
Askhsh_12_v1_8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c078  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fa0  0800c318  0800c318  0001c318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d2b8  0800d2b8  0001d2b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d2c0  0800d2c0  0001d2c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d2c4  0800d2c4  0001d2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  24000000  0800d2c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002b6c  24000088  0800d350  00020088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24002bf4  0800d350  00022bf4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 10 .debug_info   000314cf  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004867  00000000  00000000  00051585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a78  00000000  00000000  00055df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001908  00000000  00000000  00057868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ede3  00000000  00000000  00059170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021b74  00000000  00000000  00097f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017bcba  00000000  00000000  000b9ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00235781  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000767c  00000000  00000000  002357d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c300 	.word	0x0800c300

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	0800c300 	.word	0x0800c300

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <delayUS_DWT>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void delayUS_DWT(volatile uint32_t microseconds)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000690:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <delayUS_DWT+0x40>)
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000696:	f006 f83f 	bl	8006718 <HAL_RCC_GetHCLKFreq>
 800069a:	4603      	mov	r3, r0
 800069c:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <delayUS_DWT+0x44>)
 800069e:	fba2 2303 	umull	r2, r3, r2, r3
 80006a2:	0c9b      	lsrs	r3, r3, #18
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	fb02 f303 	mul.w	r3, r2, r3
 80006aa:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80006ac:	bf00      	nop
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <delayUS_DWT+0x40>)
 80006b0:	685a      	ldr	r2, [r3, #4]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	1ad2      	subs	r2, r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d3f8      	bcc.n	80006ae <delayUS_DWT+0x26>
}
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	e0001000 	.word	0xe0001000
 80006cc:	431bde83 	.word	0x431bde83

080006d0 <writeSDA>:
#define HEX2BCD(v)	((v) % 10 + (v) / 10 * 16)
#define BCD2HEX(v)	((v) % 16 + (v) / 16 * 10)


// SDA Write(output) Mode
static void writeSDA(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SDA;
 80006d6:	2301      	movs	r3, #1
 80006d8:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80006de:	2302      	movs	r3, #2
 80006e0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4619      	mov	r1, r3
 80006e6:	4803      	ldr	r0, [pc, #12]	; (80006f4 <writeSDA+0x24>)
 80006e8:	f004 f8b8 	bl	800485c <HAL_GPIO_Init>
	
}
 80006ec:	bf00      	nop
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	58021400 	.word	0x58021400

080006f8 <readSDA>:


// SDA Read(input) Mode
static void readSDA(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SDA;
 80006fe:	2301      	movs	r3, #1
 8000700:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_INPUT;
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8000706:	2302      	movs	r3, #2
 8000708:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800070a:	2302      	movs	r3, #2
 800070c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);	
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	4619      	mov	r1, r3
 8000712:	4803      	ldr	r0, [pc, #12]	; (8000720 <readSDA+0x28>)
 8000714:	f004 f8a2 	bl	800485c <HAL_GPIO_Init>
}
 8000718:	bf00      	nop
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	58021400 	.word	0x58021400

08000724 <DS1302_SendCmd>:


/* Отправка адреса или команды */
static void DS1302_SendCmd(uint8_t cmd) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i ++) 
 800072e:	2300      	movs	r3, #0
 8000730:	73fb      	strb	r3, [r7, #15]
 8000732:	e01e      	b.n	8000772 <DS1302_SendCmd+0x4e>
	{	
		//		DS1302_SDA = (bit)(addr & 1);
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA, (cmd & 1) ?  GPIO_PIN_SET :  GPIO_PIN_RESET);
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	461a      	mov	r2, r3
 800073e:	2101      	movs	r1, #1
 8000740:	4810      	ldr	r0, [pc, #64]	; (8000784 <DS1302_SendCmd+0x60>)
 8000742:	f004 fa53 	bl	8004bec <HAL_GPIO_WritePin>
		//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	2102      	movs	r1, #2
 800074a:	480e      	ldr	r0, [pc, #56]	; (8000784 <DS1302_SendCmd+0x60>)
 800074c:	f004 fa4e 	bl	8004bec <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff ff99 	bl	8000688 <delayUS_DWT>
		//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2102      	movs	r1, #2
 800075a:	480a      	ldr	r0, [pc, #40]	; (8000784 <DS1302_SendCmd+0x60>)
 800075c:	f004 fa46 	bl	8004bec <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 8000760:	2001      	movs	r0, #1
 8000762:	f7ff ff91 	bl	8000688 <delayUS_DWT>
		cmd >>= 1;
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	085b      	lsrs	r3, r3, #1
 800076a:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i ++) 
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	3301      	adds	r3, #1
 8000770:	73fb      	strb	r3, [r7, #15]
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	2b07      	cmp	r3, #7
 8000776:	d9dd      	bls.n	8000734 <DS1302_SendCmd+0x10>
	}
}
 8000778:	bf00      	nop
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	58021400 	.word	0x58021400

08000788 <DS1302_WriteByte>:


/* Прочитать байт по адресу 'addr' */
static void DS1302_WriteByte(uint8_t addr, uint8_t d)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	460a      	mov	r2, r1
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	4613      	mov	r3, r2
 8000796:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	//	DS1302_RST = 1;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_SET);	
 8000798:	2201      	movs	r2, #1
 800079a:	2104      	movs	r1, #4
 800079c:	481c      	ldr	r0, [pc, #112]	; (8000810 <DS1302_WriteByte+0x88>)
 800079e:	f004 fa25 	bl	8004bec <HAL_GPIO_WritePin>
	
	//addr = addr & 0xFE;
	DS1302_SendCmd(addr);	// Отправка адреса
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ffbd 	bl	8000724 <DS1302_SendCmd>
	
	for (i = 0; i < 8; i ++) 
 80007aa:	2300      	movs	r3, #0
 80007ac:	73fb      	strb	r3, [r7, #15]
 80007ae:	e01e      	b.n	80007ee <DS1302_WriteByte+0x66>
	{
		//		DS1302_SDA = (bit)(d & 1);
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA, (d & 1) ?  GPIO_PIN_SET :  GPIO_PIN_RESET);
 80007b0:	79bb      	ldrb	r3, [r7, #6]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	461a      	mov	r2, r3
 80007ba:	2101      	movs	r1, #1
 80007bc:	4814      	ldr	r0, [pc, #80]	; (8000810 <DS1302_WriteByte+0x88>)
 80007be:	f004 fa15 	bl	8004bec <HAL_GPIO_WritePin>
		//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	2102      	movs	r1, #2
 80007c6:	4812      	ldr	r0, [pc, #72]	; (8000810 <DS1302_WriteByte+0x88>)
 80007c8:	f004 fa10 	bl	8004bec <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 80007cc:	2001      	movs	r0, #1
 80007ce:	f7ff ff5b 	bl	8000688 <delayUS_DWT>
		//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2102      	movs	r1, #2
 80007d6:	480e      	ldr	r0, [pc, #56]	; (8000810 <DS1302_WriteByte+0x88>)
 80007d8:	f004 fa08 	bl	8004bec <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 80007dc:	2001      	movs	r0, #1
 80007de:	f7ff ff53 	bl	8000688 <delayUS_DWT>
		d >>= 1;
 80007e2:	79bb      	ldrb	r3, [r7, #6]
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	71bb      	strb	r3, [r7, #6]
	for (i = 0; i < 8; i ++) 
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	3301      	adds	r3, #1
 80007ec:	73fb      	strb	r3, [r7, #15]
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2b07      	cmp	r3, #7
 80007f2:	d9dd      	bls.n	80007b0 <DS1302_WriteByte+0x28>
	}
	
	//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2104      	movs	r1, #4
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <DS1302_WriteByte+0x88>)
 80007fa:	f004 f9f7 	bl	8004bec <HAL_GPIO_WritePin>
	//	DS1302_SDA = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA,  GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2101      	movs	r1, #1
 8000802:	4803      	ldr	r0, [pc, #12]	; (8000810 <DS1302_WriteByte+0x88>)
 8000804:	f004 f9f2 	bl	8004bec <HAL_GPIO_WritePin>
}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	58021400 	.word	0x58021400

08000814 <DS1302_ReadByte>:
}


/* Reads a byte from addr */
static uint8_t DS1302_ReadByte(uint8_t addr)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t temp = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	73bb      	strb	r3, [r7, #14]

	//	DS1302_RST = 1;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_SET);	
 8000822:	2201      	movs	r2, #1
 8000824:	2104      	movs	r1, #4
 8000826:	4822      	ldr	r0, [pc, #136]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000828:	f004 f9e0 	bl	8004bec <HAL_GPIO_WritePin>
	addr = addr | 0x01; 	// Generate Read Address
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	71fb      	strb	r3, [r7, #7]

	DS1302_SendCmd(addr);	// Sends address
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff74 	bl	8000724 <DS1302_SendCmd>
	
	readSDA();
 800083c:	f7ff ff5c 	bl	80006f8 <readSDA>
	for (i = 0; i < 8; i ++) 
 8000840:	2300      	movs	r3, #0
 8000842:	73fb      	strb	r3, [r7, #15]
 8000844:	e020      	b.n	8000888 <DS1302_ReadByte+0x74>
	{
		temp >>= 1;
 8000846:	7bbb      	ldrb	r3, [r7, #14]
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	73bb      	strb	r3, [r7, #14]
		//		if(DS1302_SDA)
		if(HAL_GPIO_ReadPin(DS1302_GPIO, DS1302_SDA))
 800084c:	2101      	movs	r1, #1
 800084e:	4818      	ldr	r0, [pc, #96]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000850:	f004 f9b4 	bl	8004bbc <HAL_GPIO_ReadPin>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d003      	beq.n	8000862 <DS1302_ReadByte+0x4e>
			temp |= 0x80;
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000860:	73bb      	strb	r3, [r7, #14]
		//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	2102      	movs	r1, #2
 8000866:	4812      	ldr	r0, [pc, #72]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000868:	f004 f9c0 	bl	8004bec <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff ff0b 	bl	8000688 <delayUS_DWT>
		//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2102      	movs	r1, #2
 8000876:	480e      	ldr	r0, [pc, #56]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000878:	f004 f9b8 	bl	8004bec <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 800087c:	2001      	movs	r0, #1
 800087e:	f7ff ff03 	bl	8000688 <delayUS_DWT>
	for (i = 0; i < 8; i ++) 
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	3301      	adds	r3, #1
 8000886:	73fb      	strb	r3, [r7, #15]
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	2b07      	cmp	r3, #7
 800088c:	d9db      	bls.n	8000846 <DS1302_ReadByte+0x32>
	}
	writeSDA();
 800088e:	f7ff ff1f 	bl	80006d0 <writeSDA>

	//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2104      	movs	r1, #4
 8000896:	4806      	ldr	r0, [pc, #24]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000898:	f004 f9a8 	bl	8004bec <HAL_GPIO_WritePin>
	//	DS1302_SDA = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA,  GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2101      	movs	r1, #1
 80008a0:	4803      	ldr	r0, [pc, #12]	; (80008b0 <DS1302_ReadByte+0x9c>)
 80008a2:	f004 f9a3 	bl	8004bec <HAL_GPIO_WritePin>
	return temp;
 80008a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	58021400 	.word	0x58021400

080008b4 <DS1302_ReadTime>:
}


/* Reads time byte by byte to 'buf' */
void DS1302_ReadTime(uint8_t *buf)  
{ 
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
   	uint8_t tmp;
	
	tmp = DS1302_ReadByte(DS1302_YEAR); 	
 80008bc:	208c      	movs	r0, #140	; 0x8c
 80008be:	f7ff ffa9 	bl	8000814 <DS1302_ReadByte>
 80008c2:	4603      	mov	r3, r0
 80008c4:	73fb      	strb	r3, [r7, #15]
	buf[1] = BCD2HEX(tmp);		 
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
 80008c8:	f003 030f 	and.w	r3, r3, #15
 80008cc:	b2d9      	uxtb	r1, r3
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	091b      	lsrs	r3, r3, #4
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	461a      	mov	r2, r3
 80008d6:	0092      	lsls	r2, r2, #2
 80008d8:	4413      	add	r3, r2
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	3301      	adds	r3, #1
 80008e2:	440a      	add	r2, r1
 80008e4:	b2d2      	uxtb	r2, r2
 80008e6:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_MONTH); 	
 80008e8:	2088      	movs	r0, #136	; 0x88
 80008ea:	f7ff ff93 	bl	8000814 <DS1302_ReadByte>
 80008ee:	4603      	mov	r3, r0
 80008f0:	73fb      	strb	r3, [r7, #15]
	buf[2] = BCD2HEX(tmp);	 
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
 80008f4:	f003 030f 	and.w	r3, r3, #15
 80008f8:	b2d9      	uxtb	r1, r3
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	091b      	lsrs	r3, r3, #4
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	461a      	mov	r2, r3
 8000902:	0092      	lsls	r2, r2, #2
 8000904:	4413      	add	r3, r2
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	b2da      	uxtb	r2, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	3302      	adds	r3, #2
 800090e:	440a      	add	r2, r1
 8000910:	b2d2      	uxtb	r2, r2
 8000912:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_DATE); 	
 8000914:	2086      	movs	r0, #134	; 0x86
 8000916:	f7ff ff7d 	bl	8000814 <DS1302_ReadByte>
 800091a:	4603      	mov	r3, r0
 800091c:	73fb      	strb	r3, [r7, #15]
	buf[3] = BCD2HEX(tmp);
 800091e:	7bfb      	ldrb	r3, [r7, #15]
 8000920:	f003 030f 	and.w	r3, r3, #15
 8000924:	b2d9      	uxtb	r1, r3
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	091b      	lsrs	r3, r3, #4
 800092a:	b2db      	uxtb	r3, r3
 800092c:	461a      	mov	r2, r3
 800092e:	0092      	lsls	r2, r2, #2
 8000930:	4413      	add	r3, r2
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	b2da      	uxtb	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3303      	adds	r3, #3
 800093a:	440a      	add	r2, r1
 800093c:	b2d2      	uxtb	r2, r2
 800093e:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_HOUR);		
 8000940:	2084      	movs	r0, #132	; 0x84
 8000942:	f7ff ff67 	bl	8000814 <DS1302_ReadByte>
 8000946:	4603      	mov	r3, r0
 8000948:	73fb      	strb	r3, [r7, #15]
	buf[4] = BCD2HEX(tmp);
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	f003 030f 	and.w	r3, r3, #15
 8000950:	b2d9      	uxtb	r1, r3
 8000952:	7bfb      	ldrb	r3, [r7, #15]
 8000954:	091b      	lsrs	r3, r3, #4
 8000956:	b2db      	uxtb	r3, r3
 8000958:	461a      	mov	r2, r3
 800095a:	0092      	lsls	r2, r2, #2
 800095c:	4413      	add	r3, r2
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	b2da      	uxtb	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3304      	adds	r3, #4
 8000966:	440a      	add	r2, r1
 8000968:	b2d2      	uxtb	r2, r2
 800096a:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_MIN);		
 800096c:	2082      	movs	r0, #130	; 0x82
 800096e:	f7ff ff51 	bl	8000814 <DS1302_ReadByte>
 8000972:	4603      	mov	r3, r0
 8000974:	73fb      	strb	r3, [r7, #15]
	buf[5] = BCD2HEX(tmp); 
 8000976:	7bfb      	ldrb	r3, [r7, #15]
 8000978:	f003 030f 	and.w	r3, r3, #15
 800097c:	b2d9      	uxtb	r1, r3
 800097e:	7bfb      	ldrb	r3, [r7, #15]
 8000980:	091b      	lsrs	r3, r3, #4
 8000982:	b2db      	uxtb	r3, r3
 8000984:	461a      	mov	r2, r3
 8000986:	0092      	lsls	r2, r2, #2
 8000988:	4413      	add	r3, r2
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	b2da      	uxtb	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	3305      	adds	r3, #5
 8000992:	440a      	add	r2, r1
 8000994:	b2d2      	uxtb	r2, r2
 8000996:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte((DS1302_SEC)) & 0x7F;
 8000998:	2080      	movs	r0, #128	; 0x80
 800099a:	f7ff ff3b 	bl	8000814 <DS1302_ReadByte>
 800099e:	4603      	mov	r3, r0
 80009a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009a4:	73fb      	strb	r3, [r7, #15]
	buf[6] = BCD2HEX(tmp);
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	f003 030f 	and.w	r3, r3, #15
 80009ac:	b2d9      	uxtb	r1, r3
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	091b      	lsrs	r3, r3, #4
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	461a      	mov	r2, r3
 80009b6:	0092      	lsls	r2, r2, #2
 80009b8:	4413      	add	r3, r2
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3306      	adds	r3, #6
 80009c2:	440a      	add	r2, r1
 80009c4:	b2d2      	uxtb	r2, r2
 80009c6:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_DAY);		
 80009c8:	208a      	movs	r0, #138	; 0x8a
 80009ca:	f7ff ff23 	bl	8000814 <DS1302_ReadByte>
 80009ce:	4603      	mov	r3, r0
 80009d0:	73fb      	strb	r3, [r7, #15]
	buf[7] = BCD2HEX(tmp);
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	f003 030f 	and.w	r3, r3, #15
 80009d8:	b2d9      	uxtb	r1, r3
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	091b      	lsrs	r3, r3, #4
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	461a      	mov	r2, r3
 80009e2:	0092      	lsls	r2, r2, #2
 80009e4:	4413      	add	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3307      	adds	r3, #7
 80009ee:	440a      	add	r2, r1
 80009f0:	b2d2      	uxtb	r2, r2
 80009f2:	701a      	strb	r2, [r3, #0]
}
 80009f4:	bf00      	nop
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <DS1302_Init>:


/* Инициализация */
void DS1302_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
	DWT_Delay_Init(); //Инициализация таймера для отсчета милисекунд
 8000a02:	f000 f849 	bl	8000a98 <DWT_Delay_Init>

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SCLK | DS1302_SDA | DS1302_RST;
 8000a06:	2307      	movs	r3, #7
 8000a08:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	4619      	mov	r1, r3
 8000a16:	480d      	ldr	r0, [pc, #52]	; (8000a4c <DS1302_Init+0x50>)
 8000a18:	f003 ff20 	bl	800485c <HAL_GPIO_Init>
	
	DS1302_WriteByte(DS1302_CHARGER, 0x00);			// Отключить Trickle Charger
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2090      	movs	r0, #144	; 0x90
 8000a20:	f7ff feb2 	bl	8000788 <DS1302_WriteByte>
		
	//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2104      	movs	r1, #4
 8000a28:	4808      	ldr	r0, [pc, #32]	; (8000a4c <DS1302_Init+0x50>)
 8000a2a:	f004 f8df 	bl	8004bec <HAL_GPIO_WritePin>
	//	DS1302_SCK = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2102      	movs	r1, #2
 8000a32:	4806      	ldr	r0, [pc, #24]	; (8000a4c <DS1302_Init+0x50>)
 8000a34:	f004 f8da 	bl	8004bec <HAL_GPIO_WritePin>

	delayUS_DWT(10); // Меньше 10 мкс делать не стоит.
 8000a38:	200a      	movs	r0, #10
 8000a3a:	f7ff fe25 	bl	8000688 <delayUS_DWT>
	DS1302_ClockStart();
 8000a3e:	f000 f807 	bl	8000a50 <DS1302_ClockStart>
}
 8000a42:	bf00      	nop
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	58021400 	.word	0x58021400

08000a50 <DS1302_ClockStart>:

//Запуск часов.
//Изначально DS1302 в режиме HALT (остановлена, режим энергосбережения).
//Чтоб начался отсчет времени необходимо однократно выполнить эту функцию.
void DS1302_ClockStart(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
	uint8_t buf = 0x00;
 8000a56:	2300      	movs	r3, #0
 8000a58:	71fb      	strb	r3, [r7, #7]

	DS1302_WriteByte(DS1302_CONTROL, 0x00);			// Отключить защиту от записи
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	208e      	movs	r0, #142	; 0x8e
 8000a5e:	f7ff fe93 	bl	8000788 <DS1302_WriteByte>
	delayUS_DWT(1);
 8000a62:	2001      	movs	r0, #1
 8000a64:	f7ff fe10 	bl	8000688 <delayUS_DWT>

	buf = DS1302_ReadByte(DS1302_SEC) & 0x7F;		// Записываем в 8 бит 0. При этом сохраняем установленное значение секунд.
 8000a68:	2080      	movs	r0, #128	; 0x80
 8000a6a:	f7ff fed3 	bl	8000814 <DS1302_ReadByte>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a74:	71fb      	strb	r3, [r7, #7]
	DS1302_WriteByte(DS1302_SEC, buf);
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	2080      	movs	r0, #128	; 0x80
 8000a7c:	f7ff fe84 	bl	8000788 <DS1302_WriteByte>

	DS1302_WriteByte(DS1302_CONTROL, 0x80);			// Включить защиту от записи
 8000a80:	2180      	movs	r1, #128	; 0x80
 8000a82:	208e      	movs	r0, #142	; 0x8e
 8000a84:	f7ff fe80 	bl	8000788 <DS1302_WriteByte>
	delayUS_DWT(1);
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f7ff fdfd 	bl	8000688 <delayUS_DWT>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <DWT_Delay_Init+0x58>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	4a13      	ldr	r2, [pc, #76]	; (8000af0 <DWT_Delay_Init+0x58>)
 8000aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000aa6:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <DWT_Delay_Init+0x58>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <DWT_Delay_Init+0x58>)
 8000aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ab2:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <DWT_Delay_Init+0x5c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <DWT_Delay_Init+0x5c>)
 8000aba:	f023 0301 	bic.w	r3, r3, #1
 8000abe:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <DWT_Delay_Init+0x5c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0b      	ldr	r2, [pc, #44]	; (8000af4 <DWT_Delay_Init+0x5c>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <DWT_Delay_Init+0x5c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000ad2:	bf00      	nop
     __ASM volatile ("NOP");
 8000ad4:	bf00      	nop
     __ASM volatile ("NOP");
 8000ad6:	bf00      	nop

     /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <DWT_Delay_Init+0x5c>)
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	e000      	b.n	8000ae6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000ae4:	2301      	movs	r3, #1
  }
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000edf0 	.word	0xe000edf0
 8000af4:	e0001000 	.word	0xe0001000

08000af8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM5)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d125      	bne.n	8000b56 <HAL_TIM_PeriodElapsedCallback+0x5e>
  {
	  counterclk++;
 8000b0a:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	4a15      	ldr	r2, [pc, #84]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000b12:	6013      	str	r3, [r2, #0]
	  counter2++;
 8000b14:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b1c:	6013      	str	r3, [r2, #0]
	  adc_flag=0;
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
	  uartflag=0;
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
	  if(counterclk>=setTiming1)
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d305      	bcc.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x4a>
	  {
//	  dataloggerflag=1;

	  adc_flag=1;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	601a      	str	r2, [r3, #0]
	  counterclk=0;
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
	  }
	  if(counter2>=5)
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	d905      	bls.n	8000b56 <HAL_TIM_PeriodElapsedCallback+0x5e>
	  {
		  uartflag=1;
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	601a      	str	r2, [r3, #0]
		  counter2=0;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
	  }
    // Code to execute every 1 second interval
    // Place your desired actions here
  }
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40000c00 	.word	0x40000c00
 8000b68:	240000cc 	.word	0x240000cc
 8000b6c:	240000c8 	.word	0x240000c8
 8000b70:	240000a4 	.word	0x240000a4
 8000b74:	240000a8 	.word	0x240000a8
 8000b78:	24000000 	.word	0x24000000

08000b7c <datalogger>:

void datalogger() ////5 lepta
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08e      	sub	sp, #56	; 0x38
 8000b80:	af00      	add	r7, sp, #0


	HAL_Delay(500);
 8000b82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b86:	f002 f941 	bl	8002e0c <HAL_Delay>
	if(HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin)==1)
 8000b8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b8e:	485c      	ldr	r0, [pc, #368]	; (8000d00 <datalogger+0x184>)
 8000b90:	f004 f814 	bl	8004bbc <HAL_GPIO_ReadPin>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	f040 80ae 	bne.w	8000cf8 <datalogger+0x17c>
	{
	for (i=0; i<100; i++) // 10 gia test  288 gia 5 lepta gia na bgalw ola ta apothikeumena apo to datalogger_array na ta metatrepsw kai na ta dw sto hyper terminal
 8000b9c:	4b59      	ldr	r3, [pc, #356]	; (8000d04 <datalogger+0x188>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	e0a1      	b.n	8000ce8 <datalogger+0x16c>
	{

	char buffer2[50];
	ssd1306_Fill(Black);
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f001 fad7 	bl	8002158 <ssd1306_Fill>
    sprintf(buffer2, "DATA LOGGER SENDING TO PuTTy");
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	4956      	ldr	r1, [pc, #344]	; (8000d08 <datalogger+0x18c>)
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f00a ff98 	bl	800bae4 <siprintf>
    ssd1306_SetCursor(0,20); // Adjust these values according to where you want the text to start
 8000bb4:	2114      	movs	r1, #20
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f001 fc1c 	bl	80023f4 <ssd1306_SetCursor>
    ssd1306_WriteString(buffer2, Font_7x10, White); // Replace with your font and color choice
 8000bbc:	4a53      	ldr	r2, [pc, #332]	; (8000d0c <datalogger+0x190>)
 8000bbe:	1d38      	adds	r0, r7, #4
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	ca06      	ldmia	r2, {r1, r2}
 8000bc4:	f001 fbf0 	bl	80023a8 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000bc8:	f001 faea 	bl	80021a0 <ssd1306_UpdateScreen>
    sprintf(graphbuffer, "\n\r~~~~~~~~~~~~~~DATALOGGER~~~~~~~~~~~~~~~~\n\r");
 8000bcc:	4950      	ldr	r1, [pc, #320]	; (8000d10 <datalogger+0x194>)
 8000bce:	4851      	ldr	r0, [pc, #324]	; (8000d14 <datalogger+0x198>)
 8000bd0:	f00a ff88 	bl	800bae4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)graphbuffer, strlen(graphbuffer), 100);
 8000bd4:	484f      	ldr	r0, [pc, #316]	; (8000d14 <datalogger+0x198>)
 8000bd6:	f7ff fb83 	bl	80002e0 <strlen>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	2364      	movs	r3, #100	; 0x64
 8000be0:	494c      	ldr	r1, [pc, #304]	; (8000d14 <datalogger+0x198>)
 8000be2:	484d      	ldr	r0, [pc, #308]	; (8000d18 <datalogger+0x19c>)
 8000be4:	f009 fb72 	bl	800a2cc <HAL_UART_Transmit>
    sprintf(graphTimeBuffer, "\n\r~~~~~~~~~~~~~~%s~~~~~~~~~~~~~~~~\n\r",TimeArray[i]);
 8000be8:	4b46      	ldr	r3, [pc, #280]	; (8000d04 <datalogger+0x188>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2232      	movs	r2, #50	; 0x32
 8000bee:	fb02 f303 	mul.w	r3, r2, r3
 8000bf2:	4a4a      	ldr	r2, [pc, #296]	; (8000d1c <datalogger+0x1a0>)
 8000bf4:	4413      	add	r3, r2
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	4949      	ldr	r1, [pc, #292]	; (8000d20 <datalogger+0x1a4>)
 8000bfa:	484a      	ldr	r0, [pc, #296]	; (8000d24 <datalogger+0x1a8>)
 8000bfc:	f00a ff72 	bl	800bae4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)graphTimeBuffer, strlen(graphTimeBuffer), 100);
 8000c00:	4848      	ldr	r0, [pc, #288]	; (8000d24 <datalogger+0x1a8>)
 8000c02:	f7ff fb6d 	bl	80002e0 <strlen>
 8000c06:	4603      	mov	r3, r0
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	2364      	movs	r3, #100	; 0x64
 8000c0c:	4945      	ldr	r1, [pc, #276]	; (8000d24 <datalogger+0x1a8>)
 8000c0e:	4842      	ldr	r0, [pc, #264]	; (8000d18 <datalogger+0x19c>)
 8000c10:	f009 fb5c 	bl	800a2cc <HAL_UART_Transmit>
    sprintf(datalogbuf0, "\n\r%d Channel 0  %2d\n\r", i,adcarray0[i]);
 8000c14:	4b3b      	ldr	r3, [pc, #236]	; (8000d04 <datalogger+0x188>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b3a      	ldr	r3, [pc, #232]	; (8000d04 <datalogger+0x188>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4942      	ldr	r1, [pc, #264]	; (8000d28 <datalogger+0x1ac>)
 8000c1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c22:	4942      	ldr	r1, [pc, #264]	; (8000d2c <datalogger+0x1b0>)
 8000c24:	4842      	ldr	r0, [pc, #264]	; (8000d30 <datalogger+0x1b4>)
 8000c26:	f00a ff5d 	bl	800bae4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)datalogbuf0, strlen(datalogbuf0), 100);
 8000c2a:	4841      	ldr	r0, [pc, #260]	; (8000d30 <datalogger+0x1b4>)
 8000c2c:	f7ff fb58 	bl	80002e0 <strlen>
 8000c30:	4603      	mov	r3, r0
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	2364      	movs	r3, #100	; 0x64
 8000c36:	493e      	ldr	r1, [pc, #248]	; (8000d30 <datalogger+0x1b4>)
 8000c38:	4837      	ldr	r0, [pc, #220]	; (8000d18 <datalogger+0x19c>)
 8000c3a:	f009 fb47 	bl	800a2cc <HAL_UART_Transmit>
    sprintf(datalogbuf1, "\n\r   Channel 1  %2d\n\r", adcarray1[i]);
 8000c3e:	4b31      	ldr	r3, [pc, #196]	; (8000d04 <datalogger+0x188>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a3c      	ldr	r2, [pc, #240]	; (8000d34 <datalogger+0x1b8>)
 8000c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	493b      	ldr	r1, [pc, #236]	; (8000d38 <datalogger+0x1bc>)
 8000c4c:	483b      	ldr	r0, [pc, #236]	; (8000d3c <datalogger+0x1c0>)
 8000c4e:	f00a ff49 	bl	800bae4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)datalogbuf1, strlen(datalogbuf1), 100);
 8000c52:	483a      	ldr	r0, [pc, #232]	; (8000d3c <datalogger+0x1c0>)
 8000c54:	f7ff fb44 	bl	80002e0 <strlen>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	2364      	movs	r3, #100	; 0x64
 8000c5e:	4937      	ldr	r1, [pc, #220]	; (8000d3c <datalogger+0x1c0>)
 8000c60:	482d      	ldr	r0, [pc, #180]	; (8000d18 <datalogger+0x19c>)
 8000c62:	f009 fb33 	bl	800a2cc <HAL_UART_Transmit>
    sprintf(datalogbuf4, "\n\r   Channel 4  %2d\n\r", adcarray4[i]);
 8000c66:	4b27      	ldr	r3, [pc, #156]	; (8000d04 <datalogger+0x188>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a35      	ldr	r2, [pc, #212]	; (8000d40 <datalogger+0x1c4>)
 8000c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4934      	ldr	r1, [pc, #208]	; (8000d44 <datalogger+0x1c8>)
 8000c74:	4834      	ldr	r0, [pc, #208]	; (8000d48 <datalogger+0x1cc>)
 8000c76:	f00a ff35 	bl	800bae4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)datalogbuf4, strlen(datalogbuf4), 100);
 8000c7a:	4833      	ldr	r0, [pc, #204]	; (8000d48 <datalogger+0x1cc>)
 8000c7c:	f7ff fb30 	bl	80002e0 <strlen>
 8000c80:	4603      	mov	r3, r0
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	2364      	movs	r3, #100	; 0x64
 8000c86:	4930      	ldr	r1, [pc, #192]	; (8000d48 <datalogger+0x1cc>)
 8000c88:	4823      	ldr	r0, [pc, #140]	; (8000d18 <datalogger+0x19c>)
 8000c8a:	f009 fb1f 	bl	800a2cc <HAL_UART_Transmit>
    sprintf(datalogbuf6, "\n\r   Channel 6  %2d\n\r", adcarray6[i]);
 8000c8e:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <datalogger+0x188>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a2e      	ldr	r2, [pc, #184]	; (8000d4c <datalogger+0x1d0>)
 8000c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	492d      	ldr	r1, [pc, #180]	; (8000d50 <datalogger+0x1d4>)
 8000c9c:	482d      	ldr	r0, [pc, #180]	; (8000d54 <datalogger+0x1d8>)
 8000c9e:	f00a ff21 	bl	800bae4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)datalogbuf6, strlen(datalogbuf6), 100);
 8000ca2:	482c      	ldr	r0, [pc, #176]	; (8000d54 <datalogger+0x1d8>)
 8000ca4:	f7ff fb1c 	bl	80002e0 <strlen>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	2364      	movs	r3, #100	; 0x64
 8000cae:	4929      	ldr	r1, [pc, #164]	; (8000d54 <datalogger+0x1d8>)
 8000cb0:	4819      	ldr	r0, [pc, #100]	; (8000d18 <datalogger+0x19c>)
 8000cb2:	f009 fb0b 	bl	800a2cc <HAL_UART_Transmit>
    sprintf(datalogbuf7, "\n\r   Channel 7  %2d\n\r", adcarray7[i]);
 8000cb6:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <datalogger+0x188>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a27      	ldr	r2, [pc, #156]	; (8000d58 <datalogger+0x1dc>)
 8000cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4926      	ldr	r1, [pc, #152]	; (8000d5c <datalogger+0x1e0>)
 8000cc4:	4826      	ldr	r0, [pc, #152]	; (8000d60 <datalogger+0x1e4>)
 8000cc6:	f00a ff0d 	bl	800bae4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)datalogbuf7, strlen(datalogbuf7), 100);
 8000cca:	4825      	ldr	r0, [pc, #148]	; (8000d60 <datalogger+0x1e4>)
 8000ccc:	f7ff fb08 	bl	80002e0 <strlen>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	2364      	movs	r3, #100	; 0x64
 8000cd6:	4922      	ldr	r1, [pc, #136]	; (8000d60 <datalogger+0x1e4>)
 8000cd8:	480f      	ldr	r0, [pc, #60]	; (8000d18 <datalogger+0x19c>)
 8000cda:	f009 faf7 	bl	800a2cc <HAL_UART_Transmit>
	for (i=0; i<100; i++) // 10 gia test  288 gia 5 lepta gia na bgalw ola ta apothikeumena apo to datalogger_array na ta metatrepsw kai na ta dw sto hyper terminal
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <datalogger+0x188>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <datalogger+0x188>)
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <datalogger+0x188>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b63      	cmp	r3, #99	; 0x63
 8000cee:	f77f af59 	ble.w	8000ba4 <datalogger+0x28>


//    sprintf(datalogbuf2, " %c\n\r", datalogger_array_status[i]);
//    HAL_UART_Transmit(&huart3, (uint8_t*)datalogbuf2, strlen(datalogbuf2), 100);
	}
	ssd1306_Fill(Black);
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f001 fa30 	bl	8002158 <ssd1306_Fill>

	}


}
 8000cf8:	bf00      	nop
 8000cfa:	3738      	adds	r7, #56	; 0x38
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	58020800 	.word	0x58020800
 8000d04:	240000ac 	.word	0x240000ac
 8000d08:	0800c318 	.word	0x0800c318
 8000d0c:	2400000c 	.word	0x2400000c
 8000d10:	0800c338 	.word	0x0800c338
 8000d14:	24002648 	.word	0x24002648
 8000d18:	24000660 	.word	0x24000660
 8000d1c:	24000b90 	.word	0x24000b90
 8000d20:	0800c368 	.word	0x0800c368
 8000d24:	24000594 	.word	0x24000594
 8000d28:	24002464 	.word	0x24002464
 8000d2c:	0800c390 	.word	0x0800c390
 8000d30:	240029b8 	.word	0x240029b8
 8000d34:	24002254 	.word	0x24002254
 8000d38:	0800c3a8 	.word	0x0800c3a8
 8000d3c:	240026e0 	.word	0x240026e0
 8000d40:	240027a8 	.word	0x240027a8
 8000d44:	0800c3c0 	.word	0x0800c3c0
 8000d48:	240005fc 	.word	0x240005fc
 8000d4c:	24002a50 	.word	0x24002a50
 8000d50:	0800c3d8 	.word	0x0800c3d8
 8000d54:	240021f0 	.word	0x240021f0
 8000d58:	24001fc8 	.word	0x24001fc8
 8000d5c:	0800c3f0 	.word	0x0800c3f0
 8000d60:	240004e4 	.word	0x240004e4

08000d64 <ADC_CH0_SELECT>:




void ADC_CH0_SELECT()
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
 8000d78:	615a      	str	r2, [r3, #20]
 8000d7a:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_0;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d80:	2306      	movs	r3, #6
 8000d82:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d84:	2301      	movs	r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d88:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d8c:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d8e:	2304      	movs	r3, #4
 8000d90:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4806      	ldr	r0, [pc, #24]	; (8000db4 <ADC_CH0_SELECT+0x50>)
 8000d9c:	f002 fe4e 	bl	8003a3c <HAL_ADC_ConfigChannel>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <ADC_CH0_SELECT+0x46>
	  {
	    Error_Handler();
 8000da6:	f001 f915 	bl	8001fd4 <Error_Handler>
	  }
}
 8000daa:	bf00      	nop
 8000dac:	3720      	adds	r7, #32
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2400218c 	.word	0x2400218c

08000db8 <ADC_CH1_SELECT>:
void ADC_CH1_SELECT()
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
 8000dcc:	615a      	str	r2, [r3, #20]
 8000dce:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_1;
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <ADC_CH1_SELECT+0x50>)
 8000dd2:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dd4:	2306      	movs	r3, #6
 8000dd6:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ddc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000de0:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000de2:	2304      	movs	r3, #4
 8000de4:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	4619      	mov	r1, r3
 8000dee:	4807      	ldr	r0, [pc, #28]	; (8000e0c <ADC_CH1_SELECT+0x54>)
 8000df0:	f002 fe24 	bl	8003a3c <HAL_ADC_ConfigChannel>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <ADC_CH1_SELECT+0x46>
	  {
	    Error_Handler();
 8000dfa:	f001 f8eb 	bl	8001fd4 <Error_Handler>
	  }
}
 8000dfe:	bf00      	nop
 8000e00:	3720      	adds	r7, #32
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	04300002 	.word	0x04300002
 8000e0c:	2400218c 	.word	0x2400218c

08000e10 <ADC_CH4_SELECT>:
void ADC_CH4_SELECT()
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
 8000e24:	615a      	str	r2, [r3, #20]
 8000e26:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_4;
 8000e28:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <ADC_CH4_SELECT+0x50>)
 8000e2a:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e2c:	2306      	movs	r3, #6
 8000e2e:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e30:	2301      	movs	r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e34:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e38:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	4619      	mov	r1, r3
 8000e46:	4807      	ldr	r0, [pc, #28]	; (8000e64 <ADC_CH4_SELECT+0x54>)
 8000e48:	f002 fdf8 	bl	8003a3c <HAL_ADC_ConfigChannel>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <ADC_CH4_SELECT+0x46>
	  {
	    Error_Handler();
 8000e52:	f001 f8bf 	bl	8001fd4 <Error_Handler>
	  }
}
 8000e56:	bf00      	nop
 8000e58:	3720      	adds	r7, #32
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	10c00010 	.word	0x10c00010
 8000e64:	2400218c 	.word	0x2400218c

08000e68 <ADC_CH6_SELECT>:
void ADC_CH6_SELECT()
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
 8000e7c:	615a      	str	r2, [r3, #20]
 8000e7e:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_6;
 8000e80:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <ADC_CH6_SELECT+0x50>)
 8000e82:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e84:	2306      	movs	r3, #6
 8000e86:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e8c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e90:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e92:	2304      	movs	r3, #4
 8000e94:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4807      	ldr	r0, [pc, #28]	; (8000ebc <ADC_CH6_SELECT+0x54>)
 8000ea0:	f002 fdcc 	bl	8003a3c <HAL_ADC_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <ADC_CH6_SELECT+0x46>
	  {
	    Error_Handler();
 8000eaa:	f001 f893 	bl	8001fd4 <Error_Handler>
	  }
}
 8000eae:	bf00      	nop
 8000eb0:	3720      	adds	r7, #32
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	19200040 	.word	0x19200040
 8000ebc:	2400218c 	.word	0x2400218c

08000ec0 <ADC_CH7_SELECT>:
void ADC_CH7_SELECT()
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
 8000ed4:	615a      	str	r2, [r3, #20]
 8000ed6:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_7;
 8000ed8:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <ADC_CH7_SELECT+0x50>)
 8000eda:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000edc:	2306      	movs	r3, #6
 8000ede:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ee4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ee8:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eea:	2304      	movs	r3, #4
 8000eec:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4807      	ldr	r0, [pc, #28]	; (8000f14 <ADC_CH7_SELECT+0x54>)
 8000ef8:	f002 fda0 	bl	8003a3c <HAL_ADC_ConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <ADC_CH7_SELECT+0x46>
	  {
	    Error_Handler();
 8000f02:	f001 f867 	bl	8001fd4 <Error_Handler>
	  }
}
 8000f06:	bf00      	nop
 8000f08:	3720      	adds	r7, #32
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	1d500080 	.word	0x1d500080
 8000f14:	2400218c 	.word	0x2400218c

08000f18 <ADC_TAKE_ALL>:

void ADC_TAKE_ALL()
{
 8000f18:	b5b0      	push	{r4, r5, r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af04      	add	r7, sp, #16


	HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,SET);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f24:	4866      	ldr	r0, [pc, #408]	; (80010c0 <ADC_TAKE_ALL+0x1a8>)
 8000f26:	f003 fe61 	bl	8004bec <HAL_GPIO_WritePin>

	DS1302_ReadTime(time);
 8000f2a:	4866      	ldr	r0, [pc, #408]	; (80010c4 <ADC_TAKE_ALL+0x1ac>)
 8000f2c:	f7ff fcc2 	bl	80008b4 <DS1302_ReadTime>
	sprintf(timeBuffer2,"\n\r %2d/%2d/%2d %2d:%2d:%2d \n\r",time[1],time[2],time[3],time[4],time[5],time[6]);
 8000f30:	4b64      	ldr	r3, [pc, #400]	; (80010c4 <ADC_TAKE_ALL+0x1ac>)
 8000f32:	785b      	ldrb	r3, [r3, #1]
 8000f34:	461c      	mov	r4, r3
 8000f36:	4b63      	ldr	r3, [pc, #396]	; (80010c4 <ADC_TAKE_ALL+0x1ac>)
 8000f38:	789b      	ldrb	r3, [r3, #2]
 8000f3a:	461d      	mov	r5, r3
 8000f3c:	4b61      	ldr	r3, [pc, #388]	; (80010c4 <ADC_TAKE_ALL+0x1ac>)
 8000f3e:	78db      	ldrb	r3, [r3, #3]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b60      	ldr	r3, [pc, #384]	; (80010c4 <ADC_TAKE_ALL+0x1ac>)
 8000f44:	791b      	ldrb	r3, [r3, #4]
 8000f46:	4619      	mov	r1, r3
 8000f48:	4b5e      	ldr	r3, [pc, #376]	; (80010c4 <ADC_TAKE_ALL+0x1ac>)
 8000f4a:	795b      	ldrb	r3, [r3, #5]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	4b5d      	ldr	r3, [pc, #372]	; (80010c4 <ADC_TAKE_ALL+0x1ac>)
 8000f50:	799b      	ldrb	r3, [r3, #6]
 8000f52:	9303      	str	r3, [sp, #12]
 8000f54:	9002      	str	r0, [sp, #8]
 8000f56:	9101      	str	r1, [sp, #4]
 8000f58:	9200      	str	r2, [sp, #0]
 8000f5a:	462b      	mov	r3, r5
 8000f5c:	4622      	mov	r2, r4
 8000f5e:	495a      	ldr	r1, [pc, #360]	; (80010c8 <ADC_TAKE_ALL+0x1b0>)
 8000f60:	485a      	ldr	r0, [pc, #360]	; (80010cc <ADC_TAKE_ALL+0x1b4>)
 8000f62:	f00a fdbf 	bl	800bae4 <siprintf>
	strcpy(TimeArray[counter1], timeBuffer2);
 8000f66:	4b5a      	ldr	r3, [pc, #360]	; (80010d0 <ADC_TAKE_ALL+0x1b8>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2232      	movs	r2, #50	; 0x32
 8000f6c:	fb02 f303 	mul.w	r3, r2, r3
 8000f70:	4a58      	ldr	r2, [pc, #352]	; (80010d4 <ADC_TAKE_ALL+0x1bc>)
 8000f72:	4413      	add	r3, r2
 8000f74:	4955      	ldr	r1, [pc, #340]	; (80010cc <ADC_TAKE_ALL+0x1b4>)
 8000f76:	4618      	mov	r0, r3
 8000f78:	f00a fdd4 	bl	800bb24 <strcpy>

    HAL_Delay(10);
 8000f7c:	200a      	movs	r0, #10
 8000f7e:	f001 ff45 	bl	8002e0c <HAL_Delay>
    ADC_CH0_SELECT();
 8000f82:	f7ff feef 	bl	8000d64 <ADC_CH0_SELECT>
    HAL_ADC_Start(&hadc3);
 8000f86:	4854      	ldr	r0, [pc, #336]	; (80010d8 <ADC_TAKE_ALL+0x1c0>)
 8000f88:	f002 fb58 	bl	800363c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc3, 100);
 8000f8c:	2164      	movs	r1, #100	; 0x64
 8000f8e:	4852      	ldr	r0, [pc, #328]	; (80010d8 <ADC_TAKE_ALL+0x1c0>)
 8000f90:	f002 fc52 	bl	8003838 <HAL_ADC_PollForConversion>
    adcraw0 = HAL_ADC_GetValue(&hadc3);
 8000f94:	4850      	ldr	r0, [pc, #320]	; (80010d8 <ADC_TAKE_ALL+0x1c0>)
 8000f96:	f002 fd43 	bl	8003a20 <HAL_ADC_GetValue>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b4f      	ldr	r3, [pc, #316]	; (80010dc <ADC_TAKE_ALL+0x1c4>)
 8000fa0:	601a      	str	r2, [r3, #0]
    adcarray0[counter1]=adcraw0;
 8000fa2:	4b4b      	ldr	r3, [pc, #300]	; (80010d0 <ADC_TAKE_ALL+0x1b8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a4d      	ldr	r2, [pc, #308]	; (80010dc <ADC_TAKE_ALL+0x1c4>)
 8000fa8:	6812      	ldr	r2, [r2, #0]
 8000faa:	494d      	ldr	r1, [pc, #308]	; (80010e0 <ADC_TAKE_ALL+0x1c8>)
 8000fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    HAL_ADC_Stop(&hadc3);
 8000fb0:	4849      	ldr	r0, [pc, #292]	; (80010d8 <ADC_TAKE_ALL+0x1c0>)
 8000fb2:	f002 fc0d 	bl	80037d0 <HAL_ADC_Stop>
    HAL_Delay(10);
 8000fb6:	200a      	movs	r0, #10
 8000fb8:	f001 ff28 	bl	8002e0c <HAL_Delay>
    ADC_CH1_SELECT();
 8000fbc:	f7ff fefc 	bl	8000db8 <ADC_CH1_SELECT>
    HAL_ADC_Start(&hadc3);
 8000fc0:	4845      	ldr	r0, [pc, #276]	; (80010d8 <ADC_TAKE_ALL+0x1c0>)
 8000fc2:	f002 fb3b 	bl	800363c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc3, 100);
 8000fc6:	2164      	movs	r1, #100	; 0x64
 8000fc8:	4843      	ldr	r0, [pc, #268]	; (80010d8 <ADC_TAKE_ALL+0x1c0>)
 8000fca:	f002 fc35 	bl	8003838 <HAL_ADC_PollForConversion>
    adcraw1 = HAL_ADC_GetValue(&hadc3);
 8000fce:	4842      	ldr	r0, [pc, #264]	; (80010d8 <ADC_TAKE_ALL+0x1c0>)
 8000fd0:	f002 fd26 	bl	8003a20 <HAL_ADC_GetValue>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4b42      	ldr	r3, [pc, #264]	; (80010e4 <ADC_TAKE_ALL+0x1cc>)
 8000fda:	601a      	str	r2, [r3, #0]
    adcarray1[counter1]=adcraw1;
 8000fdc:	4b3c      	ldr	r3, [pc, #240]	; (80010d0 <ADC_TAKE_ALL+0x1b8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a40      	ldr	r2, [pc, #256]	; (80010e4 <ADC_TAKE_ALL+0x1cc>)
 8000fe2:	6812      	ldr	r2, [r2, #0]
 8000fe4:	4940      	ldr	r1, [pc, #256]	; (80010e8 <ADC_TAKE_ALL+0x1d0>)
 8000fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    HAL_ADC_Stop(&hadc3);
 8000fea:	483b      	ldr	r0, [pc, #236]	; (80010d8 <ADC_TAKE_ALL+0x1c0>)
 8000fec:	f002 fbf0 	bl	80037d0 <HAL_ADC_Stop>
    HAL_Delay(10);
 8000ff0:	200a      	movs	r0, #10
 8000ff2:	f001 ff0b 	bl	8002e0c <HAL_Delay>
    ADC_CH4_SELECT();
 8000ff6:	f7ff ff0b 	bl	8000e10 <ADC_CH4_SELECT>
    HAL_ADC_Start(&hadc3);
 8000ffa:	4837      	ldr	r0, [pc, #220]	; (80010d8 <ADC_TAKE_ALL+0x1c0>)
 8000ffc:	f002 fb1e 	bl	800363c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc3, 100);
 8001000:	2164      	movs	r1, #100	; 0x64
 8001002:	4835      	ldr	r0, [pc, #212]	; (80010d8 <ADC_TAKE_ALL+0x1c0>)
 8001004:	f002 fc18 	bl	8003838 <HAL_ADC_PollForConversion>
    adcraw4 = HAL_ADC_GetValue(&hadc3);
 8001008:	4833      	ldr	r0, [pc, #204]	; (80010d8 <ADC_TAKE_ALL+0x1c0>)
 800100a:	f002 fd09 	bl	8003a20 <HAL_ADC_GetValue>
 800100e:	4603      	mov	r3, r0
 8001010:	461a      	mov	r2, r3
 8001012:	4b36      	ldr	r3, [pc, #216]	; (80010ec <ADC_TAKE_ALL+0x1d4>)
 8001014:	601a      	str	r2, [r3, #0]
    adcarray4[counter1]=adcraw4;
 8001016:	4b2e      	ldr	r3, [pc, #184]	; (80010d0 <ADC_TAKE_ALL+0x1b8>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a34      	ldr	r2, [pc, #208]	; (80010ec <ADC_TAKE_ALL+0x1d4>)
 800101c:	6812      	ldr	r2, [r2, #0]
 800101e:	4934      	ldr	r1, [pc, #208]	; (80010f0 <ADC_TAKE_ALL+0x1d8>)
 8001020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    HAL_ADC_Stop(&hadc3);
 8001024:	482c      	ldr	r0, [pc, #176]	; (80010d8 <ADC_TAKE_ALL+0x1c0>)
 8001026:	f002 fbd3 	bl	80037d0 <HAL_ADC_Stop>
    HAL_Delay(10);
 800102a:	200a      	movs	r0, #10
 800102c:	f001 feee 	bl	8002e0c <HAL_Delay>
    ADC_CH6_SELECT();
 8001030:	f7ff ff1a 	bl	8000e68 <ADC_CH6_SELECT>
    HAL_ADC_Start(&hadc3);
 8001034:	4828      	ldr	r0, [pc, #160]	; (80010d8 <ADC_TAKE_ALL+0x1c0>)
 8001036:	f002 fb01 	bl	800363c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc3, 100);
 800103a:	2164      	movs	r1, #100	; 0x64
 800103c:	4826      	ldr	r0, [pc, #152]	; (80010d8 <ADC_TAKE_ALL+0x1c0>)
 800103e:	f002 fbfb 	bl	8003838 <HAL_ADC_PollForConversion>
    adcraw6 = HAL_ADC_GetValue(&hadc3);
 8001042:	4825      	ldr	r0, [pc, #148]	; (80010d8 <ADC_TAKE_ALL+0x1c0>)
 8001044:	f002 fcec 	bl	8003a20 <HAL_ADC_GetValue>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	4b29      	ldr	r3, [pc, #164]	; (80010f4 <ADC_TAKE_ALL+0x1dc>)
 800104e:	601a      	str	r2, [r3, #0]
    adcarray6[counter1]=adcraw6;
 8001050:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <ADC_TAKE_ALL+0x1b8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a27      	ldr	r2, [pc, #156]	; (80010f4 <ADC_TAKE_ALL+0x1dc>)
 8001056:	6812      	ldr	r2, [r2, #0]
 8001058:	4927      	ldr	r1, [pc, #156]	; (80010f8 <ADC_TAKE_ALL+0x1e0>)
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    HAL_ADC_Stop(&hadc3);
 800105e:	481e      	ldr	r0, [pc, #120]	; (80010d8 <ADC_TAKE_ALL+0x1c0>)
 8001060:	f002 fbb6 	bl	80037d0 <HAL_ADC_Stop>
    HAL_Delay(10);
 8001064:	200a      	movs	r0, #10
 8001066:	f001 fed1 	bl	8002e0c <HAL_Delay>
    ADC_CH7_SELECT();
 800106a:	f7ff ff29 	bl	8000ec0 <ADC_CH7_SELECT>
    HAL_ADC_Start(&hadc3);
 800106e:	481a      	ldr	r0, [pc, #104]	; (80010d8 <ADC_TAKE_ALL+0x1c0>)
 8001070:	f002 fae4 	bl	800363c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc3, 100);
 8001074:	2164      	movs	r1, #100	; 0x64
 8001076:	4818      	ldr	r0, [pc, #96]	; (80010d8 <ADC_TAKE_ALL+0x1c0>)
 8001078:	f002 fbde 	bl	8003838 <HAL_ADC_PollForConversion>
    adcraw7 = HAL_ADC_GetValue(&hadc3);
 800107c:	4816      	ldr	r0, [pc, #88]	; (80010d8 <ADC_TAKE_ALL+0x1c0>)
 800107e:	f002 fccf 	bl	8003a20 <HAL_ADC_GetValue>
 8001082:	4603      	mov	r3, r0
 8001084:	461a      	mov	r2, r3
 8001086:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <ADC_TAKE_ALL+0x1e4>)
 8001088:	601a      	str	r2, [r3, #0]
    adcarray7[counter1]=adcraw7;
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <ADC_TAKE_ALL+0x1b8>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a1b      	ldr	r2, [pc, #108]	; (80010fc <ADC_TAKE_ALL+0x1e4>)
 8001090:	6812      	ldr	r2, [r2, #0]
 8001092:	491b      	ldr	r1, [pc, #108]	; (8001100 <ADC_TAKE_ALL+0x1e8>)
 8001094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    HAL_ADC_Stop(&hadc3);
 8001098:	480f      	ldr	r0, [pc, #60]	; (80010d8 <ADC_TAKE_ALL+0x1c0>)
 800109a:	f002 fb99 	bl	80037d0 <HAL_ADC_Stop>
    HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010a4:	4806      	ldr	r0, [pc, #24]	; (80010c0 <ADC_TAKE_ALL+0x1a8>)
 80010a6:	f003 fda1 	bl	8004bec <HAL_GPIO_WritePin>

    counter1++;
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <ADC_TAKE_ALL+0x1b8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	3301      	adds	r3, #1
 80010b0:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <ADC_TAKE_ALL+0x1b8>)
 80010b2:	6013      	str	r3, [r2, #0]
    adc_flag=0;
 80010b4:	4b13      	ldr	r3, [pc, #76]	; (8001104 <ADC_TAKE_ALL+0x1ec>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	bdb0      	pop	{r4, r5, r7, pc}
 80010c0:	58020400 	.word	0x58020400
 80010c4:	24002640 	.word	0x24002640
 80010c8:	0800c408 	.word	0x0800c408
 80010cc:	24002744 	.word	0x24002744
 80010d0:	240000c4 	.word	0x240000c4
 80010d4:	24000b90 	.word	0x24000b90
 80010d8:	2400218c 	.word	0x2400218c
 80010dc:	240000b0 	.word	0x240000b0
 80010e0:	24002464 	.word	0x24002464
 80010e4:	240000b4 	.word	0x240000b4
 80010e8:	24002254 	.word	0x24002254
 80010ec:	240000b8 	.word	0x240000b8
 80010f0:	240027a8 	.word	0x240027a8
 80010f4:	240000bc 	.word	0x240000bc
 80010f8:	24002a50 	.word	0x24002a50
 80010fc:	240000c0 	.word	0x240000c0
 8001100:	24001fc8 	.word	0x24001fc8
 8001104:	240000a4 	.word	0x240000a4

08001108 <uarttrigger>:

void uarttrigger()
{
 8001108:	b5b0      	push	{r4, r5, r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af04      	add	r7, sp, #16
	DS1302_ReadTime(time);
 800110e:	4856      	ldr	r0, [pc, #344]	; (8001268 <uarttrigger+0x160>)
 8001110:	f7ff fbd0 	bl	80008b4 <DS1302_ReadTime>
	sprintf(timeBuffer,"\n\r %2d/%2d/%2d %2d:%2d:%2d \n\r",time[1],time[2],time[3],time[4],time[5],time[6]);
 8001114:	4b54      	ldr	r3, [pc, #336]	; (8001268 <uarttrigger+0x160>)
 8001116:	785b      	ldrb	r3, [r3, #1]
 8001118:	461c      	mov	r4, r3
 800111a:	4b53      	ldr	r3, [pc, #332]	; (8001268 <uarttrigger+0x160>)
 800111c:	789b      	ldrb	r3, [r3, #2]
 800111e:	461d      	mov	r5, r3
 8001120:	4b51      	ldr	r3, [pc, #324]	; (8001268 <uarttrigger+0x160>)
 8001122:	78db      	ldrb	r3, [r3, #3]
 8001124:	461a      	mov	r2, r3
 8001126:	4b50      	ldr	r3, [pc, #320]	; (8001268 <uarttrigger+0x160>)
 8001128:	791b      	ldrb	r3, [r3, #4]
 800112a:	4619      	mov	r1, r3
 800112c:	4b4e      	ldr	r3, [pc, #312]	; (8001268 <uarttrigger+0x160>)
 800112e:	795b      	ldrb	r3, [r3, #5]
 8001130:	4618      	mov	r0, r3
 8001132:	4b4d      	ldr	r3, [pc, #308]	; (8001268 <uarttrigger+0x160>)
 8001134:	799b      	ldrb	r3, [r3, #6]
 8001136:	9303      	str	r3, [sp, #12]
 8001138:	9002      	str	r0, [sp, #8]
 800113a:	9101      	str	r1, [sp, #4]
 800113c:	9200      	str	r2, [sp, #0]
 800113e:	462b      	mov	r3, r5
 8001140:	4622      	mov	r2, r4
 8001142:	494a      	ldr	r1, [pc, #296]	; (800126c <uarttrigger+0x164>)
 8001144:	484a      	ldr	r0, [pc, #296]	; (8001270 <uarttrigger+0x168>)
 8001146:	f00a fccd 	bl	800bae4 <siprintf>


	HAL_UART_Transmit(&huart3, (uint8_t*)timeBuffer, strlen(timeBuffer), HAL_MAX_DELAY);
 800114a:	4849      	ldr	r0, [pc, #292]	; (8001270 <uarttrigger+0x168>)
 800114c:	f7ff f8c8 	bl	80002e0 <strlen>
 8001150:	4603      	mov	r3, r0
 8001152:	b29a      	uxth	r2, r3
 8001154:	f04f 33ff 	mov.w	r3, #4294967295
 8001158:	4945      	ldr	r1, [pc, #276]	; (8001270 <uarttrigger+0x168>)
 800115a:	4846      	ldr	r0, [pc, #280]	; (8001274 <uarttrigger+0x16c>)
 800115c:	f009 f8b6 	bl	800a2cc <HAL_UART_Transmit>

	sprintf(uartBuf, "Encoder count: %d\r\n", (int)TIM4->CNT);
 8001160:	4b45      	ldr	r3, [pc, #276]	; (8001278 <uarttrigger+0x170>)
 8001162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001164:	461a      	mov	r2, r3
 8001166:	4945      	ldr	r1, [pc, #276]	; (800127c <uarttrigger+0x174>)
 8001168:	4845      	ldr	r0, [pc, #276]	; (8001280 <uarttrigger+0x178>)
 800116a:	f00a fcbb 	bl	800bae4 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 800116e:	4844      	ldr	r0, [pc, #272]	; (8001280 <uarttrigger+0x178>)
 8001170:	f7ff f8b6 	bl	80002e0 <strlen>
 8001174:	4603      	mov	r3, r0
 8001176:	b29a      	uxth	r2, r3
 8001178:	f04f 33ff 	mov.w	r3, #4294967295
 800117c:	4940      	ldr	r1, [pc, #256]	; (8001280 <uarttrigger+0x178>)
 800117e:	483d      	ldr	r0, [pc, #244]	; (8001274 <uarttrigger+0x16c>)
 8001180:	f009 f8a4 	bl	800a2cc <HAL_UART_Transmit>
    sprintf(buffer, "SetTime ADC:%ds\n", scaledTime);
 8001184:	4b3f      	ldr	r3, [pc, #252]	; (8001284 <uarttrigger+0x17c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	493f      	ldr	r1, [pc, #252]	; (8001288 <uarttrigger+0x180>)
 800118c:	483f      	ldr	r0, [pc, #252]	; (800128c <uarttrigger+0x184>)
 800118e:	f00a fca9 	bl	800bae4 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001192:	483e      	ldr	r0, [pc, #248]	; (800128c <uarttrigger+0x184>)
 8001194:	f7ff f8a4 	bl	80002e0 <strlen>
 8001198:	4603      	mov	r3, r0
 800119a:	b29a      	uxth	r2, r3
 800119c:	f04f 33ff 	mov.w	r3, #4294967295
 80011a0:	493a      	ldr	r1, [pc, #232]	; (800128c <uarttrigger+0x184>)
 80011a2:	4834      	ldr	r0, [pc, #208]	; (8001274 <uarttrigger+0x16c>)
 80011a4:	f009 f892 	bl	800a2cc <HAL_UART_Transmit>

	sprintf(adcbuffer0,"\n\r Channel 0  %2d \n\r",adcraw0);
 80011a8:	4b39      	ldr	r3, [pc, #228]	; (8001290 <uarttrigger+0x188>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4939      	ldr	r1, [pc, #228]	; (8001294 <uarttrigger+0x18c>)
 80011b0:	4839      	ldr	r0, [pc, #228]	; (8001298 <uarttrigger+0x190>)
 80011b2:	f00a fc97 	bl	800bae4 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer0, strlen(adcbuffer0), HAL_MAX_DELAY);
 80011b6:	4838      	ldr	r0, [pc, #224]	; (8001298 <uarttrigger+0x190>)
 80011b8:	f7ff f892 	bl	80002e0 <strlen>
 80011bc:	4603      	mov	r3, r0
 80011be:	b29a      	uxth	r2, r3
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295
 80011c4:	4934      	ldr	r1, [pc, #208]	; (8001298 <uarttrigger+0x190>)
 80011c6:	482b      	ldr	r0, [pc, #172]	; (8001274 <uarttrigger+0x16c>)
 80011c8:	f009 f880 	bl	800a2cc <HAL_UART_Transmit>
	sprintf(adcbuffer1,"\n\r Channel 1  %2d \n\r",adcraw1);
 80011cc:	4b33      	ldr	r3, [pc, #204]	; (800129c <uarttrigger+0x194>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4933      	ldr	r1, [pc, #204]	; (80012a0 <uarttrigger+0x198>)
 80011d4:	4833      	ldr	r0, [pc, #204]	; (80012a4 <uarttrigger+0x19c>)
 80011d6:	f00a fc85 	bl	800bae4 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer1, strlen(adcbuffer1), HAL_MAX_DELAY);
 80011da:	4832      	ldr	r0, [pc, #200]	; (80012a4 <uarttrigger+0x19c>)
 80011dc:	f7ff f880 	bl	80002e0 <strlen>
 80011e0:	4603      	mov	r3, r0
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295
 80011e8:	492e      	ldr	r1, [pc, #184]	; (80012a4 <uarttrigger+0x19c>)
 80011ea:	4822      	ldr	r0, [pc, #136]	; (8001274 <uarttrigger+0x16c>)
 80011ec:	f009 f86e 	bl	800a2cc <HAL_UART_Transmit>
	sprintf(adcbuffer4,"\n\r Channel 4  %2d \n\r",adcraw4);
 80011f0:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <uarttrigger+0x1a0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	492d      	ldr	r1, [pc, #180]	; (80012ac <uarttrigger+0x1a4>)
 80011f8:	482d      	ldr	r0, [pc, #180]	; (80012b0 <uarttrigger+0x1a8>)
 80011fa:	f00a fc73 	bl	800bae4 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer4, strlen(adcbuffer4), HAL_MAX_DELAY);
 80011fe:	482c      	ldr	r0, [pc, #176]	; (80012b0 <uarttrigger+0x1a8>)
 8001200:	f7ff f86e 	bl	80002e0 <strlen>
 8001204:	4603      	mov	r3, r0
 8001206:	b29a      	uxth	r2, r3
 8001208:	f04f 33ff 	mov.w	r3, #4294967295
 800120c:	4928      	ldr	r1, [pc, #160]	; (80012b0 <uarttrigger+0x1a8>)
 800120e:	4819      	ldr	r0, [pc, #100]	; (8001274 <uarttrigger+0x16c>)
 8001210:	f009 f85c 	bl	800a2cc <HAL_UART_Transmit>
	sprintf(adcbuffer6,"\n\r Channel 6  %2d \n\r",adcraw6);
 8001214:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <uarttrigger+0x1ac>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4927      	ldr	r1, [pc, #156]	; (80012b8 <uarttrigger+0x1b0>)
 800121c:	4827      	ldr	r0, [pc, #156]	; (80012bc <uarttrigger+0x1b4>)
 800121e:	f00a fc61 	bl	800bae4 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer6, strlen(adcbuffer6), HAL_MAX_DELAY);
 8001222:	4826      	ldr	r0, [pc, #152]	; (80012bc <uarttrigger+0x1b4>)
 8001224:	f7ff f85c 	bl	80002e0 <strlen>
 8001228:	4603      	mov	r3, r0
 800122a:	b29a      	uxth	r2, r3
 800122c:	f04f 33ff 	mov.w	r3, #4294967295
 8001230:	4922      	ldr	r1, [pc, #136]	; (80012bc <uarttrigger+0x1b4>)
 8001232:	4810      	ldr	r0, [pc, #64]	; (8001274 <uarttrigger+0x16c>)
 8001234:	f009 f84a 	bl	800a2cc <HAL_UART_Transmit>
	sprintf(adcbuffer7,"\n\r Channel 7  %2d \n\r",adcraw7);
 8001238:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <uarttrigger+0x1b8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4921      	ldr	r1, [pc, #132]	; (80012c4 <uarttrigger+0x1bc>)
 8001240:	4821      	ldr	r0, [pc, #132]	; (80012c8 <uarttrigger+0x1c0>)
 8001242:	f00a fc4f 	bl	800bae4 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer7, strlen(adcbuffer7), HAL_MAX_DELAY);
 8001246:	4820      	ldr	r0, [pc, #128]	; (80012c8 <uarttrigger+0x1c0>)
 8001248:	f7ff f84a 	bl	80002e0 <strlen>
 800124c:	4603      	mov	r3, r0
 800124e:	b29a      	uxth	r2, r3
 8001250:	f04f 33ff 	mov.w	r3, #4294967295
 8001254:	491c      	ldr	r1, [pc, #112]	; (80012c8 <uarttrigger+0x1c0>)
 8001256:	4807      	ldr	r0, [pc, #28]	; (8001274 <uarttrigger+0x16c>)
 8001258:	f009 f838 	bl	800a2cc <HAL_UART_Transmit>

	HAL_Delay(10);
 800125c:	200a      	movs	r0, #10
 800125e:	f001 fdd5 	bl	8002e0c <HAL_Delay>

}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	bdb0      	pop	{r4, r5, r7, pc}
 8001268:	24002640 	.word	0x24002640
 800126c:	0800c408 	.word	0x0800c408
 8001270:	24001f64 	.word	0x24001f64
 8001274:	24000660 	.word	0x24000660
 8001278:	40000800 	.word	0x40000800
 800127c:	0800c428 	.word	0x0800c428
 8001280:	240023e4 	.word	0x240023e4
 8001284:	2400242c 	.word	0x2400242c
 8001288:	0800c43c 	.word	0x0800c43c
 800128c:	24002418 	.word	0x24002418
 8001290:	240000b0 	.word	0x240000b0
 8001294:	0800c450 	.word	0x0800c450
 8001298:	24002a1c 	.word	0x24002a1c
 800129c:	240000b4 	.word	0x240000b4
 80012a0:	0800c468 	.word	0x0800c468
 80012a4:	240026ac 	.word	0x240026ac
 80012a8:	240000b8 	.word	0x240000b8
 80012ac:	0800c480 	.word	0x0800c480
 80012b0:	24002430 	.word	0x24002430
 80012b4:	240000bc 	.word	0x240000bc
 80012b8:	0800c498 	.word	0x0800c498
 80012bc:	24002158 	.word	0x24002158
 80012c0:	240000c0 	.word	0x240000c0
 80012c4:	0800c4b0 	.word	0x0800c4b0
 80012c8:	24002938 	.word	0x24002938

080012cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */
  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d2:	f001 fd09 	bl	8002ce8 <HAL_Init>
  /* USER CODE BEGIN Init */
  /* USER CODE END Init */
  /* Configure the system clock */
  SystemClock_Config();
 80012d6:	f000 f99b 	bl	8001610 <SystemClock_Config>
/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80012da:	f000 fa19 	bl	8001710 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012de:	f000 fcf3 	bl	8001cc8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80012e2:	f000 fc73 	bl	8001bcc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80012e6:	f000 fcbd 	bl	8001c64 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80012ea:	f000 fa8f 	bl	800180c <MX_I2C1_Init>
  MX_ADC3_Init();
 80012ee:	f000 fa2b 	bl	8001748 <MX_ADC3_Init>
  MX_TIM1_Init();
 80012f2:	f000 facb 	bl	800188c <MX_TIM1_Init>
  MX_TIM3_Init();
 80012f6:	f000 fb1d 	bl	8001934 <MX_TIM3_Init>
  MX_TIM4_Init();
 80012fa:	f000 fb6b 	bl	80019d4 <MX_TIM4_Init>
  MX_TIM14_Init();
 80012fe:	f000 fc17 	bl	8001b30 <MX_TIM14_Init>
  MX_TIM5_Init();
 8001302:	f000 fbbd 	bl	8001a80 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8001306:	f000 febd 	bl	8002084 <ssd1306_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 800130a:	48a6      	ldr	r0, [pc, #664]	; (80015a4 <main+0x2d8>)
 800130c:	f007 fc3e 	bl	8008b8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8001310:	48a5      	ldr	r0, [pc, #660]	; (80015a8 <main+0x2dc>)
 8001312:	f007 fc3b 	bl	8008b8c <HAL_TIM_Base_Start_IT>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001316:	201d      	movs	r0, #29
 8001318:	f003 fa85 	bl	8004826 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800131c:	213c      	movs	r1, #60	; 0x3c
 800131e:	48a3      	ldr	r0, [pc, #652]	; (80015ac <main+0x2e0>)
 8001320:	f007 fec2 	bl	80090a8 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8001324:	2100      	movs	r1, #0
 8001326:	48a2      	ldr	r0, [pc, #648]	; (80015b0 <main+0x2e4>)
 8001328:	f007 fd0a 	bl	8008d40 <HAL_TIM_PWM_Start>
  DS1302_Init();
 800132c:	f7ff fb66 	bl	80009fc <DS1302_Init>
  HAL_Delay(200);
 8001330:	20c8      	movs	r0, #200	; 0xc8
 8001332:	f001 fd6b 	bl	8002e0c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(uartflag==1)
 8001336:	4b9f      	ldr	r3, [pc, #636]	; (80015b4 <main+0x2e8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d104      	bne.n	8001348 <main+0x7c>
	  {
		  uarttrigger();
 800133e:	f7ff fee3 	bl	8001108 <uarttrigger>
		  uartflag=0;
 8001342:	4b9c      	ldr	r3, [pc, #624]	; (80015b4 <main+0x2e8>)
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
	  }
      encoderReading = TIM4->CNT;  // Original reading
 8001348:	4b9b      	ldr	r3, [pc, #620]	; (80015b8 <main+0x2ec>)
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	4a9b      	ldr	r2, [pc, #620]	; (80015bc <main+0x2f0>)
 800134e:	6013      	str	r3, [r2, #0]
      int detents = encoderReading / ENCODER_STEP;
 8001350:	4b9a      	ldr	r3, [pc, #616]	; (80015bc <main+0x2f0>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b9a      	ldr	r3, [pc, #616]	; (80015c0 <main+0x2f4>)
 8001356:	fba3 1302 	umull	r1, r3, r3, r2
 800135a:	1ad2      	subs	r2, r2, r3
 800135c:	0852      	lsrs	r2, r2, #1
 800135e:	4413      	add	r3, r2
 8001360:	095b      	lsrs	r3, r3, #5
 8001362:	617b      	str	r3, [r7, #20]
      scaledTime = MIN_TIME + (detents * TIME_STEP);
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	3301      	adds	r3, #1
 8001370:	461a      	mov	r2, r3
 8001372:	4b94      	ldr	r3, [pc, #592]	; (80015c4 <main+0x2f8>)
 8001374:	601a      	str	r2, [r3, #0]
      if (scaledTime > MAX_TIME) {
 8001376:	4b93      	ldr	r3, [pc, #588]	; (80015c4 <main+0x2f8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800137e:	d902      	bls.n	8001386 <main+0xba>
          scaledTime = MIN_TIME;
 8001380:	4b90      	ldr	r3, [pc, #576]	; (80015c4 <main+0x2f8>)
 8001382:	2201      	movs	r2, #1
 8001384:	601a      	str	r2, [r3, #0]
      }
      if (scaledTime > MIN_TIME) {
 8001386:	4b8f      	ldr	r3, [pc, #572]	; (80015c4 <main+0x2f8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d904      	bls.n	8001398 <main+0xcc>
          scaledTime = scaledTime-MIN_TIME;
 800138e:	4b8d      	ldr	r3, [pc, #564]	; (80015c4 <main+0x2f8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	3b01      	subs	r3, #1
 8001394:	4a8b      	ldr	r2, [pc, #556]	; (80015c4 <main+0x2f8>)
 8001396:	6013      	str	r3, [r2, #0]
      }
      if((encoderReading>1018)&&(encoderReading<=1024))
 8001398:	4b88      	ldr	r3, [pc, #544]	; (80015bc <main+0x2f0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f240 32fa 	movw	r2, #1018	; 0x3fa
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d908      	bls.n	80013b6 <main+0xea>
 80013a4:	4b85      	ldr	r3, [pc, #532]	; (80015bc <main+0x2f0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ac:	d803      	bhi.n	80013b6 <main+0xea>
      {
    	  scaledTime=300;
 80013ae:	4b85      	ldr	r3, [pc, #532]	; (80015c4 <main+0x2f8>)
 80013b0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013b4:	601a      	str	r2, [r3, #0]


      // Round to the nearest multiple of 10


      setTiming1=(scaledTime);
 80013b6:	4b83      	ldr	r3, [pc, #524]	; (80015c4 <main+0x2f8>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a83      	ldr	r2, [pc, #524]	; (80015c8 <main+0x2fc>)
 80013bc:	6013      	str	r3, [r2, #0]
      // Now scaledTime should be in the range of 1 second to 300 seconds
      sprintf(buffer, "SetTime ADC:%ds\n", scaledTime);
 80013be:	4b81      	ldr	r3, [pc, #516]	; (80015c4 <main+0x2f8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	4981      	ldr	r1, [pc, #516]	; (80015cc <main+0x300>)
 80013c6:	4882      	ldr	r0, [pc, #520]	; (80015d0 <main+0x304>)
 80013c8:	f00a fb8c 	bl	800bae4 <siprintf>
      ssd1306_Fill(Black);
 80013cc:	2000      	movs	r0, #0
 80013ce:	f000 fec3 	bl	8002158 <ssd1306_Fill>
      ssd1306_SetCursor(13,56); // Adjust these values according to where you want the text to start
 80013d2:	2138      	movs	r1, #56	; 0x38
 80013d4:	200d      	movs	r0, #13
 80013d6:	f001 f80d 	bl	80023f4 <ssd1306_SetCursor>
      ssd1306_WriteString(buffer, Font_6x8, White); // Replace with your font and color choice
 80013da:	4a7e      	ldr	r2, [pc, #504]	; (80015d4 <main+0x308>)
 80013dc:	2301      	movs	r3, #1
 80013de:	ca06      	ldmia	r2, {r1, r2}
 80013e0:	487b      	ldr	r0, [pc, #492]	; (80015d0 <main+0x304>)
 80013e2:	f000 ffe1 	bl	80023a8 <ssd1306_WriteString>
      ssd1306_UpdateScreen();
 80013e6:	f000 fedb 	bl	80021a0 <ssd1306_UpdateScreen>

      // take all the adc measurements
      if(counter1>99)
 80013ea:	4b7b      	ldr	r3, [pc, #492]	; (80015d8 <main+0x30c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2b63      	cmp	r3, #99	; 0x63
 80013f0:	d902      	bls.n	80013f8 <main+0x12c>
      {
    	  counter1=0;
 80013f2:	4b79      	ldr	r3, [pc, #484]	; (80015d8 <main+0x30c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
      }

      if(adc_flag==1)
 80013f8:	4b78      	ldr	r3, [pc, #480]	; (80015dc <main+0x310>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d104      	bne.n	800140a <main+0x13e>
      {

    	  ADC_TAKE_ALL();
 8001400:	f7ff fd8a 	bl	8000f18 <ADC_TAKE_ALL>
    	  adc_flag=0;
 8001404:	4b75      	ldr	r3, [pc, #468]	; (80015dc <main+0x310>)
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]

      }
      int barHeight1 = ((adcraw0 * (DISPLAY_HEIGHT - START_Y-ELEVATION)) / ADC_MAX);
 800140a:	4b75      	ldr	r3, [pc, #468]	; (80015e0 <main+0x314>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	222c      	movs	r2, #44	; 0x2c
 8001410:	fb02 f303 	mul.w	r3, r2, r3
 8001414:	4a73      	ldr	r2, [pc, #460]	; (80015e4 <main+0x318>)
 8001416:	fb82 1203 	smull	r1, r2, r2, r3
 800141a:	441a      	add	r2, r3
 800141c:	12d2      	asrs	r2, r2, #11
 800141e:	17db      	asrs	r3, r3, #31
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	613b      	str	r3, [r7, #16]
      int barHeight2 = ((adcraw1 * (DISPLAY_HEIGHT - START_Y-ELEVATION)) / ADC_MAX);
 8001424:	4b70      	ldr	r3, [pc, #448]	; (80015e8 <main+0x31c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	222c      	movs	r2, #44	; 0x2c
 800142a:	fb02 f303 	mul.w	r3, r2, r3
 800142e:	4a6d      	ldr	r2, [pc, #436]	; (80015e4 <main+0x318>)
 8001430:	fb82 1203 	smull	r1, r2, r2, r3
 8001434:	441a      	add	r2, r3
 8001436:	12d2      	asrs	r2, r2, #11
 8001438:	17db      	asrs	r3, r3, #31
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	60fb      	str	r3, [r7, #12]
      int barHeight3 = ((adcraw4 * (DISPLAY_HEIGHT - START_Y-ELEVATION)) / ADC_MAX);
 800143e:	4b6b      	ldr	r3, [pc, #428]	; (80015ec <main+0x320>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	222c      	movs	r2, #44	; 0x2c
 8001444:	fb02 f303 	mul.w	r3, r2, r3
 8001448:	4a66      	ldr	r2, [pc, #408]	; (80015e4 <main+0x318>)
 800144a:	fb82 1203 	smull	r1, r2, r2, r3
 800144e:	441a      	add	r2, r3
 8001450:	12d2      	asrs	r2, r2, #11
 8001452:	17db      	asrs	r3, r3, #31
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	60bb      	str	r3, [r7, #8]
      int barHeight4 = ((adcraw6 * (DISPLAY_HEIGHT - START_Y-ELEVATION)) / ADC_MAX);
 8001458:	4b65      	ldr	r3, [pc, #404]	; (80015f0 <main+0x324>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	222c      	movs	r2, #44	; 0x2c
 800145e:	fb02 f303 	mul.w	r3, r2, r3
 8001462:	4a60      	ldr	r2, [pc, #384]	; (80015e4 <main+0x318>)
 8001464:	fb82 1203 	smull	r1, r2, r2, r3
 8001468:	441a      	add	r2, r3
 800146a:	12d2      	asrs	r2, r2, #11
 800146c:	17db      	asrs	r3, r3, #31
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	607b      	str	r3, [r7, #4]
      int barHeight5 = ((adcraw7 * (DISPLAY_HEIGHT - START_Y-ELEVATION)) / ADC_MAX);
 8001472:	4b60      	ldr	r3, [pc, #384]	; (80015f4 <main+0x328>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	222c      	movs	r2, #44	; 0x2c
 8001478:	fb02 f303 	mul.w	r3, r2, r3
 800147c:	4a59      	ldr	r2, [pc, #356]	; (80015e4 <main+0x318>)
 800147e:	fb82 1203 	smull	r1, r2, r2, r3
 8001482:	441a      	add	r2, r3
 8001484:	12d2      	asrs	r2, r2, #11
 8001486:	17db      	asrs	r3, r3, #31
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	603b      	str	r3, [r7, #0]

      // Draw a filled rectangle for each bar
      ssd1306_DrawFilledRectangle(START_X + (0 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - barHeight1-ELEVATION, BAR_WIDTH, barHeight1, White);
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	f1c3 0136 	rsb	r1, r3, #54	; 0x36
 8001492:	2301      	movs	r3, #1
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	2205      	movs	r2, #5
 800149a:	2014      	movs	r0, #20
 800149c:	f000 ffc2 	bl	8002424 <ssd1306_DrawFilledRectangle>
      ssd1306_DrawFilledRectangle(START_X + (1 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - barHeight2-ELEVATION, BAR_WIDTH, barHeight2, White);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f1c3 0136 	rsb	r1, r3, #54	; 0x36
 80014a6:	2301      	movs	r3, #1
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2205      	movs	r2, #5
 80014ae:	202b      	movs	r0, #43	; 0x2b
 80014b0:	f000 ffb8 	bl	8002424 <ssd1306_DrawFilledRectangle>
      ssd1306_DrawFilledRectangle(START_X + (2 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - barHeight3-ELEVATION, BAR_WIDTH, barHeight3, White);
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	f1c3 0136 	rsb	r1, r3, #54	; 0x36
 80014ba:	2301      	movs	r3, #1
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	2205      	movs	r2, #5
 80014c2:	2042      	movs	r0, #66	; 0x42
 80014c4:	f000 ffae 	bl	8002424 <ssd1306_DrawFilledRectangle>
      ssd1306_DrawFilledRectangle(START_X + (3 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - barHeight4-ELEVATION, BAR_WIDTH, barHeight4, White);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f1c3 0136 	rsb	r1, r3, #54	; 0x36
 80014ce:	2301      	movs	r3, #1
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2205      	movs	r2, #5
 80014d6:	2059      	movs	r0, #89	; 0x59
 80014d8:	f000 ffa4 	bl	8002424 <ssd1306_DrawFilledRectangle>
      ssd1306_DrawFilledRectangle(START_X + (4 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - barHeight5-ELEVATION, BAR_WIDTH, barHeight5, White);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	f1c3 0136 	rsb	r1, r3, #54	; 0x36
 80014e2:	2301      	movs	r3, #1
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	2205      	movs	r2, #5
 80014ea:	2070      	movs	r0, #112	; 0x70
 80014ec:	f000 ff9a 	bl	8002424 <ssd1306_DrawFilledRectangle>

      // Label for each bar
      ssd1306_SetCursor(START_X + (0 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - ELEVATION - barHeight1 - 8);  // Assumes a font height
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	f1c3 032e 	rsb	r3, r3, #46	; 0x2e
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	4619      	mov	r1, r3
 80014fc:	2014      	movs	r0, #20
 80014fe:	f000 ff79 	bl	80023f4 <ssd1306_SetCursor>
      ssd1306_WriteString("0", Font_6x8, White);  // Replace with your font
 8001502:	4a34      	ldr	r2, [pc, #208]	; (80015d4 <main+0x308>)
 8001504:	2301      	movs	r3, #1
 8001506:	ca06      	ldmia	r2, {r1, r2}
 8001508:	483b      	ldr	r0, [pc, #236]	; (80015f8 <main+0x32c>)
 800150a:	f000 ff4d 	bl	80023a8 <ssd1306_WriteString>
      ssd1306_SetCursor(START_X + (1 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - ELEVATION - barHeight2 - 8);  // Assumes a font height
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	f1c3 032e 	rsb	r3, r3, #46	; 0x2e
 8001516:	b2db      	uxtb	r3, r3
 8001518:	4619      	mov	r1, r3
 800151a:	202b      	movs	r0, #43	; 0x2b
 800151c:	f000 ff6a 	bl	80023f4 <ssd1306_SetCursor>
      ssd1306_WriteString("1", Font_6x8, White);  // Replace with your font
 8001520:	4a2c      	ldr	r2, [pc, #176]	; (80015d4 <main+0x308>)
 8001522:	2301      	movs	r3, #1
 8001524:	ca06      	ldmia	r2, {r1, r2}
 8001526:	4835      	ldr	r0, [pc, #212]	; (80015fc <main+0x330>)
 8001528:	f000 ff3e 	bl	80023a8 <ssd1306_WriteString>
      ssd1306_SetCursor(START_X + (2 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - ELEVATION - barHeight3 - 8);  // Assumes a font height
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	f1c3 032e 	rsb	r3, r3, #46	; 0x2e
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4619      	mov	r1, r3
 8001538:	2042      	movs	r0, #66	; 0x42
 800153a:	f000 ff5b 	bl	80023f4 <ssd1306_SetCursor>
      ssd1306_WriteString("4", Font_6x8, White);  // Replace with your font
 800153e:	4a25      	ldr	r2, [pc, #148]	; (80015d4 <main+0x308>)
 8001540:	2301      	movs	r3, #1
 8001542:	ca06      	ldmia	r2, {r1, r2}
 8001544:	482e      	ldr	r0, [pc, #184]	; (8001600 <main+0x334>)
 8001546:	f000 ff2f 	bl	80023a8 <ssd1306_WriteString>
      ssd1306_SetCursor(START_X + (3 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - ELEVATION - barHeight4 - 8);  // Assumes a font height
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	f1c3 032e 	rsb	r3, r3, #46	; 0x2e
 8001552:	b2db      	uxtb	r3, r3
 8001554:	4619      	mov	r1, r3
 8001556:	2059      	movs	r0, #89	; 0x59
 8001558:	f000 ff4c 	bl	80023f4 <ssd1306_SetCursor>
      ssd1306_WriteString("6", Font_6x8, White);  // Replace with your font
 800155c:	4a1d      	ldr	r2, [pc, #116]	; (80015d4 <main+0x308>)
 800155e:	2301      	movs	r3, #1
 8001560:	ca06      	ldmia	r2, {r1, r2}
 8001562:	4828      	ldr	r0, [pc, #160]	; (8001604 <main+0x338>)
 8001564:	f000 ff20 	bl	80023a8 <ssd1306_WriteString>
      ssd1306_SetCursor(START_X + (4 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - ELEVATION - barHeight5 - 8);  // Assumes a font height
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	f1c3 032e 	rsb	r3, r3, #46	; 0x2e
 8001570:	b2db      	uxtb	r3, r3
 8001572:	4619      	mov	r1, r3
 8001574:	2070      	movs	r0, #112	; 0x70
 8001576:	f000 ff3d 	bl	80023f4 <ssd1306_SetCursor>
      ssd1306_WriteString("7", Font_6x8, White);  // Replace with your font
 800157a:	4a16      	ldr	r2, [pc, #88]	; (80015d4 <main+0x308>)
 800157c:	2301      	movs	r3, #1
 800157e:	ca06      	ldmia	r2, {r1, r2}
 8001580:	4821      	ldr	r0, [pc, #132]	; (8001608 <main+0x33c>)
 8001582:	f000 ff11 	bl	80023a8 <ssd1306_WriteString>

      ssd1306_UpdateScreen();
 8001586:	f000 fe0b 	bl	80021a0 <ssd1306_UpdateScreen>

      if(HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin)==1)
 800158a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800158e:	481f      	ldr	r0, [pc, #124]	; (800160c <main+0x340>)
 8001590:	f003 fb14 	bl	8004bbc <HAL_GPIO_ReadPin>
 8001594:	4603      	mov	r3, r0
 8001596:	2b01      	cmp	r3, #1
 8001598:	f47f aecd 	bne.w	8001336 <main+0x6a>
      {
    	  datalogger();
 800159c:	f7ff faee 	bl	8000b7c <datalogger>
  {
 80015a0:	e6c9      	b.n	8001336 <main+0x6a>
 80015a2:	bf00      	nop
 80015a4:	24001f18 	.word	0x24001f18
 80015a8:	24000b44 	.word	0x24000b44
 80015ac:	24000548 	.word	0x24000548
 80015b0:	2400296c 	.word	0x2400296c
 80015b4:	240000a8 	.word	0x240000a8
 80015b8:	40000800 	.word	0x40000800
 80015bc:	240005f8 	.word	0x240005f8
 80015c0:	d41d41d5 	.word	0xd41d41d5
 80015c4:	2400242c 	.word	0x2400242c
 80015c8:	24000000 	.word	0x24000000
 80015cc:	0800c43c 	.word	0x0800c43c
 80015d0:	24002418 	.word	0x24002418
 80015d4:	24000004 	.word	0x24000004
 80015d8:	240000c4 	.word	0x240000c4
 80015dc:	240000a4 	.word	0x240000a4
 80015e0:	240000b0 	.word	0x240000b0
 80015e4:	80080081 	.word	0x80080081
 80015e8:	240000b4 	.word	0x240000b4
 80015ec:	240000b8 	.word	0x240000b8
 80015f0:	240000bc 	.word	0x240000bc
 80015f4:	240000c0 	.word	0x240000c0
 80015f8:	0800c4c8 	.word	0x0800c4c8
 80015fc:	0800c4cc 	.word	0x0800c4cc
 8001600:	0800c4d0 	.word	0x0800c4d0
 8001604:	0800c4d4 	.word	0x0800c4d4
 8001608:	0800c4d8 	.word	0x0800c4d8
 800160c:	58020800 	.word	0x58020800

08001610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b09c      	sub	sp, #112	; 0x70
 8001614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161a:	224c      	movs	r2, #76	; 0x4c
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f00a fa58 	bl	800bad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	2220      	movs	r2, #32
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f00a fa52 	bl	800bad4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001630:	2002      	movs	r0, #2
 8001632:	f004 f8cb 	bl	80057cc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001636:	2300      	movs	r3, #0
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	4b33      	ldr	r3, [pc, #204]	; (8001708 <SystemClock_Config+0xf8>)
 800163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163e:	4a32      	ldr	r2, [pc, #200]	; (8001708 <SystemClock_Config+0xf8>)
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001646:	4b30      	ldr	r3, [pc, #192]	; (8001708 <SystemClock_Config+0xf8>)
 8001648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	4b2e      	ldr	r3, [pc, #184]	; (800170c <SystemClock_Config+0xfc>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001658:	4a2c      	ldr	r2, [pc, #176]	; (800170c <SystemClock_Config+0xfc>)
 800165a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800165e:	6193      	str	r3, [r2, #24]
 8001660:	4b2a      	ldr	r3, [pc, #168]	; (800170c <SystemClock_Config+0xfc>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001668:	603b      	str	r3, [r7, #0]
 800166a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800166c:	bf00      	nop
 800166e:	4b27      	ldr	r3, [pc, #156]	; (800170c <SystemClock_Config+0xfc>)
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800167a:	d1f8      	bne.n	800166e <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSI;
 800167c:	2312      	movs	r3, #18
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001680:	2309      	movs	r3, #9
 8001682:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001684:	2340      	movs	r3, #64	; 0x40
 8001686:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 800168c:	2320      	movs	r3, #32
 800168e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001690:	2302      	movs	r3, #2
 8001692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8001694:	2301      	movs	r3, #1
 8001696:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001698:	2301      	movs	r3, #1
 800169a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 37;
 800169c:	2325      	movs	r3, #37	; 0x25
 800169e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80016a0:	2302      	movs	r3, #2
 80016a2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80016a4:	2303      	movs	r3, #3
 80016a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016a8:	2302      	movs	r3, #2
 80016aa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80016ac:	2308      	movs	r3, #8
 80016ae:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80016b0:	2302      	movs	r3, #2
 80016b2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016bc:	4618      	mov	r0, r3
 80016be:	f004 f8cf 	bl	8005860 <HAL_RCC_OscConfig>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80016c8:	f000 fc84 	bl	8001fd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016cc:	233f      	movs	r3, #63	; 0x3f
 80016ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80016d8:	2300      	movs	r3, #0
 80016da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	2100      	movs	r1, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f004 fce1 	bl	80060b8 <HAL_RCC_ClockConfig>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80016fc:	f000 fc6a 	bl	8001fd4 <Error_Handler>
  }
}
 8001700:	bf00      	nop
 8001702:	3770      	adds	r7, #112	; 0x70
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	58000400 	.word	0x58000400
 800170c:	58024800 	.word	0x58024800

08001710 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b0b0      	sub	sp, #192	; 0xc0
 8001714:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	22bc      	movs	r2, #188	; 0xbc
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f00a f9d9 	bl	800bad4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8001722:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001726:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001728:	2300      	movs	r3, #0
 800172a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	4618      	mov	r0, r3
 8001730:	f005 f84e 	bl	80067d0 <HAL_RCCEx_PeriphCLKConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 800173a:	f000 fc4b 	bl	8001fd4 <Error_Handler>
  }
}
 800173e:	bf00      	nop
 8001740:	37c0      	adds	r7, #192	; 0xc0
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
 800175c:	615a      	str	r2, [r3, #20]
 800175e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8001760:	4b28      	ldr	r3, [pc, #160]	; (8001804 <MX_ADC3_Init+0xbc>)
 8001762:	4a29      	ldr	r2, [pc, #164]	; (8001808 <MX_ADC3_Init+0xc0>)
 8001764:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001766:	4b27      	ldr	r3, [pc, #156]	; (8001804 <MX_ADC3_Init+0xbc>)
 8001768:	2200      	movs	r2, #0
 800176a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800176c:	4b25      	ldr	r3, [pc, #148]	; (8001804 <MX_ADC3_Init+0xbc>)
 800176e:	2208      	movs	r2, #8
 8001770:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001772:	4b24      	ldr	r3, [pc, #144]	; (8001804 <MX_ADC3_Init+0xbc>)
 8001774:	2200      	movs	r2, #0
 8001776:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001778:	4b22      	ldr	r3, [pc, #136]	; (8001804 <MX_ADC3_Init+0xbc>)
 800177a:	2204      	movs	r2, #4
 800177c:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800177e:	4b21      	ldr	r3, [pc, #132]	; (8001804 <MX_ADC3_Init+0xbc>)
 8001780:	2200      	movs	r2, #0
 8001782:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001784:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <MX_ADC3_Init+0xbc>)
 8001786:	2201      	movs	r2, #1
 8001788:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 800178a:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <MX_ADC3_Init+0xbc>)
 800178c:	2201      	movs	r2, #1
 800178e:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001790:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <MX_ADC3_Init+0xbc>)
 8001792:	2200      	movs	r2, #0
 8001794:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001796:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <MX_ADC3_Init+0xbc>)
 8001798:	2200      	movs	r2, #0
 800179a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <MX_ADC3_Init+0xbc>)
 800179e:	2200      	movs	r2, #0
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <MX_ADC3_Init+0xbc>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <MX_ADC3_Init+0xbc>)
 80017aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017ae:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <MX_ADC3_Init+0xbc>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <MX_ADC3_Init+0xbc>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80017be:	4811      	ldr	r0, [pc, #68]	; (8001804 <MX_ADC3_Init+0xbc>)
 80017c0:	f001 fd9c 	bl	80032fc <HAL_ADC_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80017ca:	f000 fc03 	bl	8001fd4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017ce:	2301      	movs	r3, #1
 80017d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017d2:	2306      	movs	r3, #6
 80017d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80017d6:	2301      	movs	r3, #1
 80017d8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017da:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80017de:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017e0:	2304      	movs	r3, #4
 80017e2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	4619      	mov	r1, r3
 80017ec:	4805      	ldr	r0, [pc, #20]	; (8001804 <MX_ADC3_Init+0xbc>)
 80017ee:	f002 f925 	bl	8003a3c <HAL_ADC_ConfigChannel>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 80017f8:	f000 fbec 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80017fc:	bf00      	nop
 80017fe:	3720      	adds	r7, #32
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	2400218c 	.word	0x2400218c
 8001808:	58026000 	.word	0x58026000

0800180c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001810:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <MX_I2C1_Init+0x74>)
 8001812:	4a1c      	ldr	r2, [pc, #112]	; (8001884 <MX_I2C1_Init+0x78>)
 8001814:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B0DCFB;
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <MX_I2C1_Init+0x74>)
 8001818:	4a1b      	ldr	r2, [pc, #108]	; (8001888 <MX_I2C1_Init+0x7c>)
 800181a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800181c:	4b18      	ldr	r3, [pc, #96]	; (8001880 <MX_I2C1_Init+0x74>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001822:	4b17      	ldr	r3, [pc, #92]	; (8001880 <MX_I2C1_Init+0x74>)
 8001824:	2201      	movs	r2, #1
 8001826:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001828:	4b15      	ldr	r3, [pc, #84]	; (8001880 <MX_I2C1_Init+0x74>)
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800182e:	4b14      	ldr	r3, [pc, #80]	; (8001880 <MX_I2C1_Init+0x74>)
 8001830:	2200      	movs	r2, #0
 8001832:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <MX_I2C1_Init+0x74>)
 8001836:	2200      	movs	r2, #0
 8001838:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <MX_I2C1_Init+0x74>)
 800183c:	2200      	movs	r2, #0
 800183e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <MX_I2C1_Init+0x74>)
 8001842:	2200      	movs	r2, #0
 8001844:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001846:	480e      	ldr	r0, [pc, #56]	; (8001880 <MX_I2C1_Init+0x74>)
 8001848:	f003 f9ea 	bl	8004c20 <HAL_I2C_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001852:	f000 fbbf 	bl	8001fd4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001856:	2100      	movs	r1, #0
 8001858:	4809      	ldr	r0, [pc, #36]	; (8001880 <MX_I2C1_Init+0x74>)
 800185a:	f003 fdd7 	bl	800540c <HAL_I2CEx_ConfigAnalogFilter>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001864:	f000 fbb6 	bl	8001fd4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001868:	2100      	movs	r1, #0
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_I2C1_Init+0x74>)
 800186c:	f003 fe19 	bl	80054a2 <HAL_I2CEx_ConfigDigitalFilter>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001876:	f000 fbad 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	240006f0 	.word	0x240006f0
 8001884:	40005400 	.word	0x40005400
 8001888:	10b0dcfb 	.word	0x10b0dcfb

0800188c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001892:	f107 0310 	add.w	r3, r7, #16
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018aa:	4b20      	ldr	r3, [pc, #128]	; (800192c <MX_TIM1_Init+0xa0>)
 80018ac:	4a20      	ldr	r2, [pc, #128]	; (8001930 <MX_TIM1_Init+0xa4>)
 80018ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018b0:	4b1e      	ldr	r3, [pc, #120]	; (800192c <MX_TIM1_Init+0xa0>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b6:	4b1d      	ldr	r3, [pc, #116]	; (800192c <MX_TIM1_Init+0xa0>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <MX_TIM1_Init+0xa0>)
 80018be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c4:	4b19      	ldr	r3, [pc, #100]	; (800192c <MX_TIM1_Init+0xa0>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018ca:	4b18      	ldr	r3, [pc, #96]	; (800192c <MX_TIM1_Init+0xa0>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d0:	4b16      	ldr	r3, [pc, #88]	; (800192c <MX_TIM1_Init+0xa0>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018d6:	4815      	ldr	r0, [pc, #84]	; (800192c <MX_TIM1_Init+0xa0>)
 80018d8:	f007 f900 	bl	8008adc <HAL_TIM_Base_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80018e2:	f000 fb77 	bl	8001fd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018ec:	f107 0310 	add.w	r3, r7, #16
 80018f0:	4619      	mov	r1, r3
 80018f2:	480e      	ldr	r0, [pc, #56]	; (800192c <MX_TIM1_Init+0xa0>)
 80018f4:	f007 fe9a 	bl	800962c <HAL_TIM_ConfigClockSource>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80018fe:	f000 fb69 	bl	8001fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	4619      	mov	r1, r3
 8001912:	4806      	ldr	r0, [pc, #24]	; (800192c <MX_TIM1_Init+0xa0>)
 8001914:	f008 fbde 	bl	800a0d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800191e:	f000 fb59 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001922:	bf00      	nop
 8001924:	3720      	adds	r7, #32
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	240025f4 	.word	0x240025f4
 8001930:	40010000 	.word	0x40010000

08001934 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
//
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800193a:	f107 0310 	add.w	r3, r7, #16
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */
//
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001952:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <MX_TIM3_Init+0x98>)
 8001954:	4a1e      	ldr	r2, [pc, #120]	; (80019d0 <MX_TIM3_Init+0x9c>)
 8001956:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64000-1;
 8001958:	4b1c      	ldr	r3, [pc, #112]	; (80019cc <MX_TIM3_Init+0x98>)
 800195a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800195e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001960:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <MX_TIM3_Init+0x98>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8001966:	4b19      	ldr	r3, [pc, #100]	; (80019cc <MX_TIM3_Init+0x98>)
 8001968:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800196c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196e:	4b17      	ldr	r3, [pc, #92]	; (80019cc <MX_TIM3_Init+0x98>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001974:	4b15      	ldr	r3, [pc, #84]	; (80019cc <MX_TIM3_Init+0x98>)
 8001976:	2200      	movs	r2, #0
 8001978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800197a:	4814      	ldr	r0, [pc, #80]	; (80019cc <MX_TIM3_Init+0x98>)
 800197c:	f007 f8ae 	bl	8008adc <HAL_TIM_Base_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001986:	f000 fb25 	bl	8001fd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800198a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800198e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001990:	f107 0310 	add.w	r3, r7, #16
 8001994:	4619      	mov	r1, r3
 8001996:	480d      	ldr	r0, [pc, #52]	; (80019cc <MX_TIM3_Init+0x98>)
 8001998:	f007 fe48 	bl	800962c <HAL_TIM_ConfigClockSource>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80019a2:	f000 fb17 	bl	8001fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	4619      	mov	r1, r3
 80019b2:	4806      	ldr	r0, [pc, #24]	; (80019cc <MX_TIM3_Init+0x98>)
 80019b4:	f008 fb8e 	bl	800a0d4 <HAL_TIMEx_MasterConfigSynchronization>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80019be:	f000 fb09 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
//
  /* USER CODE END TIM3_Init 2 */

}
 80019c2:	bf00      	nop
 80019c4:	3720      	adds	r7, #32
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	24001f18 	.word	0x24001f18
 80019d0:	40000400 	.word	0x40000400

080019d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08c      	sub	sp, #48	; 0x30
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	2224      	movs	r2, #36	; 0x24
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f00a f876 	bl	800bad4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e8:	463b      	mov	r3, r7
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019f2:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <MX_TIM4_Init+0xa4>)
 80019f4:	4a21      	ldr	r2, [pc, #132]	; (8001a7c <MX_TIM4_Init+0xa8>)
 80019f6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80019f8:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <MX_TIM4_Init+0xa4>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fe:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <MX_TIM4_Init+0xa4>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1024;
 8001a04:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <MX_TIM4_Init+0xa4>)
 8001a06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a0a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <MX_TIM4_Init+0xa4>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a12:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <MX_TIM4_Init+0xa4>)
 8001a14:	2280      	movs	r2, #128	; 0x80
 8001a16:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a20:	2301      	movs	r3, #1
 8001a22:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a30:	2301      	movs	r3, #1
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a34:	2300      	movs	r3, #0
 8001a36:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001a3c:	f107 030c 	add.w	r3, r7, #12
 8001a40:	4619      	mov	r1, r3
 8001a42:	480d      	ldr	r0, [pc, #52]	; (8001a78 <MX_TIM4_Init+0xa4>)
 8001a44:	f007 fa8a 	bl	8008f5c <HAL_TIM_Encoder_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001a4e:	f000 fac1 	bl	8001fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a52:	2300      	movs	r3, #0
 8001a54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a5a:	463b      	mov	r3, r7
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4806      	ldr	r0, [pc, #24]	; (8001a78 <MX_TIM4_Init+0xa4>)
 8001a60:	f008 fb38 	bl	800a0d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001a6a:	f000 fab3 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a6e:	bf00      	nop
 8001a70:	3730      	adds	r7, #48	; 0x30
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	24000548 	.word	0x24000548
 8001a7c:	40000800 	.word	0x40000800

08001a80 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a86:	f107 0310 	add.w	r3, r7, #16
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a9e:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <MX_TIM5_Init+0xa0>)
 8001aa0:	4a20      	ldr	r2, [pc, #128]	; (8001b24 <MX_TIM5_Init+0xa4>)
 8001aa2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = (SystemCoreClock/1000)-1;
 8001aa4:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <MX_TIM5_Init+0xa8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a20      	ldr	r2, [pc, #128]	; (8001b2c <MX_TIM5_Init+0xac>)
 8001aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001aae:	099b      	lsrs	r3, r3, #6
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	4a1b      	ldr	r2, [pc, #108]	; (8001b20 <MX_TIM5_Init+0xa0>)
 8001ab4:	6053      	str	r3, [r2, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab6:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <MX_TIM5_Init+0xa0>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8001abc:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <MX_TIM5_Init+0xa0>)
 8001abe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ac2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac4:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <MX_TIM5_Init+0xa0>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <MX_TIM5_Init+0xa0>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001ad0:	4813      	ldr	r0, [pc, #76]	; (8001b20 <MX_TIM5_Init+0xa0>)
 8001ad2:	f007 f803 	bl	8008adc <HAL_TIM_Base_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8001adc:	f000 fa7a 	bl	8001fd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001ae6:	f107 0310 	add.w	r3, r7, #16
 8001aea:	4619      	mov	r1, r3
 8001aec:	480c      	ldr	r0, [pc, #48]	; (8001b20 <MX_TIM5_Init+0xa0>)
 8001aee:	f007 fd9d 	bl	800962c <HAL_TIM_ConfigClockSource>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001af8:	f000 fa6c 	bl	8001fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001afc:	2300      	movs	r3, #0
 8001afe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	4619      	mov	r1, r3
 8001b08:	4805      	ldr	r0, [pc, #20]	; (8001b20 <MX_TIM5_Init+0xa0>)
 8001b0a:	f008 fae3 	bl	800a0d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001b14:	f000 fa5e 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001b18:	bf00      	nop
 8001b1a:	3720      	adds	r7, #32
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	24000b44 	.word	0x24000b44
 8001b24:	40000c00 	.word	0x40000c00
 8001b28:	24000014 	.word	0x24000014
 8001b2c:	10624dd3 	.word	0x10624dd3

08001b30 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
 8001b44:	615a      	str	r2, [r3, #20]
 8001b46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001b48:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <MX_TIM14_Init+0x94>)
 8001b4a:	4a1f      	ldr	r2, [pc, #124]	; (8001bc8 <MX_TIM14_Init+0x98>)
 8001b4c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001b4e:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <MX_TIM14_Init+0x94>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b54:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <MX_TIM14_Init+0x94>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1024;
 8001b5a:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <MX_TIM14_Init+0x94>)
 8001b5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b60:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b62:	4b18      	ldr	r3, [pc, #96]	; (8001bc4 <MX_TIM14_Init+0x94>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b68:	4b16      	ldr	r3, [pc, #88]	; (8001bc4 <MX_TIM14_Init+0x94>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001b6e:	4815      	ldr	r0, [pc, #84]	; (8001bc4 <MX_TIM14_Init+0x94>)
 8001b70:	f006 ffb4 	bl	8008adc <HAL_TIM_Base_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001b7a:	f000 fa2b 	bl	8001fd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001b7e:	4811      	ldr	r0, [pc, #68]	; (8001bc4 <MX_TIM14_Init+0x94>)
 8001b80:	f007 f87c 	bl	8008c7c <HAL_TIM_PWM_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001b8a:	f000 fa23 	bl	8001fd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b8e:	2360      	movs	r3, #96	; 0x60
 8001b90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4807      	ldr	r0, [pc, #28]	; (8001bc4 <MX_TIM14_Init+0x94>)
 8001ba6:	f007 fc2d 	bl	8009404 <HAL_TIM_PWM_ConfigChannel>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001bb0:	f000 fa10 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001bb4:	4803      	ldr	r0, [pc, #12]	; (8001bc4 <MX_TIM14_Init+0x94>)
 8001bb6:	f000 fe55 	bl	8002864 <HAL_TIM_MspPostInit>

}
 8001bba:	bf00      	nop
 8001bbc:	3720      	adds	r7, #32
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	2400296c 	.word	0x2400296c
 8001bc8:	40002000 	.word	0x40002000

08001bcc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bd0:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <MX_USART3_UART_Init+0x90>)
 8001bd2:	4a23      	ldr	r2, [pc, #140]	; (8001c60 <MX_USART3_UART_Init+0x94>)
 8001bd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001bd6:	4b21      	ldr	r3, [pc, #132]	; (8001c5c <MX_USART3_UART_Init+0x90>)
 8001bd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bdc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bde:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <MX_USART3_UART_Init+0x90>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001be4:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <MX_USART3_UART_Init+0x90>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bea:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <MX_USART3_UART_Init+0x90>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bf0:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <MX_USART3_UART_Init+0x90>)
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bf6:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <MX_USART3_UART_Init+0x90>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bfc:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <MX_USART3_UART_Init+0x90>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c02:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <MX_USART3_UART_Init+0x90>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c08:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <MX_USART3_UART_Init+0x90>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c0e:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <MX_USART3_UART_Init+0x90>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c14:	4811      	ldr	r0, [pc, #68]	; (8001c5c <MX_USART3_UART_Init+0x90>)
 8001c16:	f008 fb09 	bl	800a22c <HAL_UART_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001c20:	f000 f9d8 	bl	8001fd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c24:	2100      	movs	r1, #0
 8001c26:	480d      	ldr	r0, [pc, #52]	; (8001c5c <MX_USART3_UART_Init+0x90>)
 8001c28:	f009 fb34 	bl	800b294 <HAL_UARTEx_SetTxFifoThreshold>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001c32:	f000 f9cf 	bl	8001fd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c36:	2100      	movs	r1, #0
 8001c38:	4808      	ldr	r0, [pc, #32]	; (8001c5c <MX_USART3_UART_Init+0x90>)
 8001c3a:	f009 fb69 	bl	800b310 <HAL_UARTEx_SetRxFifoThreshold>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001c44:	f000 f9c6 	bl	8001fd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001c48:	4804      	ldr	r0, [pc, #16]	; (8001c5c <MX_USART3_UART_Init+0x90>)
 8001c4a:	f009 faea 	bl	800b222 <HAL_UARTEx_DisableFifoMode>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001c54:	f000 f9be 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	24000660 	.word	0x24000660
 8001c60:	40004800 	.word	0x40004800

08001c64 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001c68:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c6a:	4a16      	ldr	r2, [pc, #88]	; (8001cc4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001c6c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001c6e:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c70:	2209      	movs	r2, #9
 8001c72:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c76:	2202      	movs	r2, #2
 8001c78:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001c7a:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c80:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c82:	2202      	movs	r2, #2
 8001c84:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001c86:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001c92:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001c98:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001c9e:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001caa:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001cac:	f003 fc45 	bl	800553a <HAL_PCD_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001cb6:	f000 f98d 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	2400073c 	.word	0x2400073c
 8001cc4:	40080000 	.word	0x40080000

08001cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08e      	sub	sp, #56	; 0x38
 8001ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
 8001cdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cde:	4bb5      	ldr	r3, [pc, #724]	; (8001fb4 <MX_GPIO_Init+0x2ec>)
 8001ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce4:	4ab3      	ldr	r2, [pc, #716]	; (8001fb4 <MX_GPIO_Init+0x2ec>)
 8001ce6:	f043 0310 	orr.w	r3, r3, #16
 8001cea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cee:	4bb1      	ldr	r3, [pc, #708]	; (8001fb4 <MX_GPIO_Init+0x2ec>)
 8001cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf4:	f003 0310 	and.w	r3, r3, #16
 8001cf8:	623b      	str	r3, [r7, #32]
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfc:	4bad      	ldr	r3, [pc, #692]	; (8001fb4 <MX_GPIO_Init+0x2ec>)
 8001cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d02:	4aac      	ldr	r2, [pc, #688]	; (8001fb4 <MX_GPIO_Init+0x2ec>)
 8001d04:	f043 0304 	orr.w	r3, r3, #4
 8001d08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d0c:	4ba9      	ldr	r3, [pc, #676]	; (8001fb4 <MX_GPIO_Init+0x2ec>)
 8001d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	61fb      	str	r3, [r7, #28]
 8001d18:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d1a:	4ba6      	ldr	r3, [pc, #664]	; (8001fb4 <MX_GPIO_Init+0x2ec>)
 8001d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d20:	4aa4      	ldr	r2, [pc, #656]	; (8001fb4 <MX_GPIO_Init+0x2ec>)
 8001d22:	f043 0320 	orr.w	r3, r3, #32
 8001d26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d2a:	4ba2      	ldr	r3, [pc, #648]	; (8001fb4 <MX_GPIO_Init+0x2ec>)
 8001d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d30:	f003 0320 	and.w	r3, r3, #32
 8001d34:	61bb      	str	r3, [r7, #24]
 8001d36:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d38:	4b9e      	ldr	r3, [pc, #632]	; (8001fb4 <MX_GPIO_Init+0x2ec>)
 8001d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d3e:	4a9d      	ldr	r2, [pc, #628]	; (8001fb4 <MX_GPIO_Init+0x2ec>)
 8001d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d48:	4b9a      	ldr	r3, [pc, #616]	; (8001fb4 <MX_GPIO_Init+0x2ec>)
 8001d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d56:	4b97      	ldr	r3, [pc, #604]	; (8001fb4 <MX_GPIO_Init+0x2ec>)
 8001d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d5c:	4a95      	ldr	r2, [pc, #596]	; (8001fb4 <MX_GPIO_Init+0x2ec>)
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d66:	4b93      	ldr	r3, [pc, #588]	; (8001fb4 <MX_GPIO_Init+0x2ec>)
 8001d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d74:	4b8f      	ldr	r3, [pc, #572]	; (8001fb4 <MX_GPIO_Init+0x2ec>)
 8001d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7a:	4a8e      	ldr	r2, [pc, #568]	; (8001fb4 <MX_GPIO_Init+0x2ec>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d84:	4b8b      	ldr	r3, [pc, #556]	; (8001fb4 <MX_GPIO_Init+0x2ec>)
 8001d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d92:	4b88      	ldr	r3, [pc, #544]	; (8001fb4 <MX_GPIO_Init+0x2ec>)
 8001d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d98:	4a86      	ldr	r2, [pc, #536]	; (8001fb4 <MX_GPIO_Init+0x2ec>)
 8001d9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001da2:	4b84      	ldr	r3, [pc, #528]	; (8001fb4 <MX_GPIO_Init+0x2ec>)
 8001da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001db0:	4b80      	ldr	r3, [pc, #512]	; (8001fb4 <MX_GPIO_Init+0x2ec>)
 8001db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db6:	4a7f      	ldr	r2, [pc, #508]	; (8001fb4 <MX_GPIO_Init+0x2ec>)
 8001db8:	f043 0308 	orr.w	r3, r3, #8
 8001dbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dc0:	4b7c      	ldr	r3, [pc, #496]	; (8001fb4 <MX_GPIO_Init+0x2ec>)
 8001dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	607b      	str	r3, [r7, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, RTC_CLK_Pin|RTC_RST_Pin, GPIO_PIN_RESET);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2106      	movs	r1, #6
 8001dd2:	4879      	ldr	r0, [pc, #484]	; (8001fb8 <MX_GPIO_Init+0x2f0>)
 8001dd4:	f002 ff0a 	bl	8004bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001dde:	4877      	ldr	r0, [pc, #476]	; (8001fbc <MX_GPIO_Init+0x2f4>)
 8001de0:	f002 ff04 	bl	8004bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001de4:	2200      	movs	r2, #0
 8001de6:	2140      	movs	r1, #64	; 0x40
 8001de8:	4875      	ldr	r0, [pc, #468]	; (8001fc0 <MX_GPIO_Init+0x2f8>)
 8001dea:	f002 feff 	bl	8004bec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001dee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001df4:	2303      	movs	r3, #3
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e00:	4619      	mov	r1, r3
 8001e02:	4870      	ldr	r0, [pc, #448]	; (8001fc4 <MX_GPIO_Init+0x2fc>)
 8001e04:	f002 fd2a 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001e08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	486a      	ldr	r0, [pc, #424]	; (8001fc8 <MX_GPIO_Init+0x300>)
 8001e20:	f002 fd1c 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pin : RTC_IO_Pin */
  GPIO_InitStruct.Pin = RTC_IO_Pin;
 8001e24:	2301      	movs	r3, #1
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RTC_IO_GPIO_Port, &GPIO_InitStruct);
 8001e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e34:	4619      	mov	r1, r3
 8001e36:	4860      	ldr	r0, [pc, #384]	; (8001fb8 <MX_GPIO_Init+0x2f0>)
 8001e38:	f002 fd10 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pins : RTC_CLK_Pin RTC_RST_Pin */
  GPIO_InitStruct.Pin = RTC_CLK_Pin|RTC_RST_Pin;
 8001e3c:	2306      	movs	r3, #6
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e40:	2301      	movs	r3, #1
 8001e42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e50:	4619      	mov	r1, r3
 8001e52:	4859      	ldr	r0, [pc, #356]	; (8001fb8 <MX_GPIO_Init+0x2f0>)
 8001e54:	f002 fd02 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF4 PF6 PF7
                           PF11 PF12 PF13 PF14
                           PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
 8001e58:	f64f 03d8 	movw	r3, #63704	; 0xf8d8
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4852      	ldr	r0, [pc, #328]	; (8001fb8 <MX_GPIO_Init+0x2f0>)
 8001e6e:	f002 fcf5 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001e72:	f641 73f1 	movw	r3, #8177	; 0x1ff1
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e84:	4619      	mov	r1, r3
 8001e86:	4850      	ldr	r0, [pc, #320]	; (8001fc8 <MX_GPIO_Init+0x300>)
 8001e88:	f002 fce8 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDC_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e90:	2302      	movs	r3, #2
 8001e92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e9c:	230b      	movs	r3, #11
 8001e9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 8001ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4848      	ldr	r0, [pc, #288]	; (8001fc8 <MX_GPIO_Init+0x300>)
 8001ea8:	f002 fcd8 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001eac:	f248 03ff 	movw	r3, #33023	; 0x80ff
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4842      	ldr	r0, [pc, #264]	; (8001fcc <MX_GPIO_Init+0x304>)
 8001ec2:	f002 fccb 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB15 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001ec6:	f649 4377 	movw	r3, #40055	; 0x9c77
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4838      	ldr	r0, [pc, #224]	; (8001fbc <MX_GPIO_Init+0x2f4>)
 8001edc:	f002 fcbe 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG8 PG9
                           PG10 PG12 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001ee0:	f24d 733f 	movw	r3, #55103	; 0xd73f
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4832      	ldr	r0, [pc, #200]	; (8001fc0 <MX_GPIO_Init+0x2f8>)
 8001ef6:	f002 fcb1 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001efa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f0c:	230b      	movs	r3, #11
 8001f0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f14:	4619      	mov	r1, r3
 8001f16:	4829      	ldr	r0, [pc, #164]	; (8001fbc <MX_GPIO_Init+0x2f4>)
 8001f18:	f002 fca0 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001f1c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f22:	2301      	movs	r3, #1
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f32:	4619      	mov	r1, r3
 8001f34:	4821      	ldr	r0, [pc, #132]	; (8001fbc <MX_GPIO_Init+0x2f4>)
 8001f36:	f002 fc91 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15
 8001f3a:	f64c 43ff 	movw	r3, #52479	; 0xccff
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f40:	2303      	movs	r3, #3
 8001f42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4820      	ldr	r0, [pc, #128]	; (8001fd0 <MX_GPIO_Init+0x308>)
 8001f50:	f002 fc84 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001f54:	2340      	movs	r3, #64	; 0x40
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f60:	2300      	movs	r3, #0
 8001f62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4815      	ldr	r0, [pc, #84]	; (8001fc0 <MX_GPIO_Init+0x2f8>)
 8001f6c:	f002 fc76 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f74:	2300      	movs	r3, #0
 8001f76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f80:	4619      	mov	r1, r3
 8001f82:	480f      	ldr	r0, [pc, #60]	; (8001fc0 <MX_GPIO_Init+0x2f8>)
 8001f84:	f002 fc6a 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001f88:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f96:	2300      	movs	r3, #0
 8001f98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f9a:	230b      	movs	r3, #11
 8001f9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4806      	ldr	r0, [pc, #24]	; (8001fc0 <MX_GPIO_Init+0x2f8>)
 8001fa6:	f002 fc59 	bl	800485c <HAL_GPIO_Init>

}
 8001faa:	bf00      	nop
 8001fac:	3738      	adds	r7, #56	; 0x38
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	58024400 	.word	0x58024400
 8001fb8:	58021400 	.word	0x58021400
 8001fbc:	58020400 	.word	0x58020400
 8001fc0:	58021800 	.word	0x58021800
 8001fc4:	58021000 	.word	0x58021000
 8001fc8:	58020800 	.word	0x58020800
 8001fcc:	58020000 	.word	0x58020000
 8001fd0:	58020c00 	.word	0x58020c00

08001fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    char buffer[20];

    ssd1306_Fill(Black);
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f000 f8bc 	bl	8002158 <ssd1306_Fill>

    sprintf(buffer, "gGMTXMMMMMMMMMMMM\n");
 8001fe0:	1d3b      	adds	r3, r7, #4
 8001fe2:	4909      	ldr	r1, [pc, #36]	; (8002008 <Error_Handler+0x34>)
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f009 fd7d 	bl	800bae4 <siprintf>
    ssd1306_SetCursor(0,0); // Adjust these values according to where you want the text to start
 8001fea:	2100      	movs	r1, #0
 8001fec:	2000      	movs	r0, #0
 8001fee:	f000 fa01 	bl	80023f4 <ssd1306_SetCursor>
    ssd1306_WriteString(buffer, Font_7x10, White); // Replace with your font and color choice
 8001ff2:	4a06      	ldr	r2, [pc, #24]	; (800200c <Error_Handler+0x38>)
 8001ff4:	1d38      	adds	r0, r7, #4
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	ca06      	ldmia	r2, {r1, r2}
 8001ffa:	f000 f9d5 	bl	80023a8 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8001ffe:	f000 f8cf 	bl	80021a0 <ssd1306_UpdateScreen>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002002:	b672      	cpsid	i
}
 8002004:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002006:	e7fe      	b.n	8002006 <Error_Handler+0x32>
 8002008:	0800c4dc 	.word	0x0800c4dc
 800200c:	2400000c 	.word	0x2400000c

08002010 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
	...

08002020 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af04      	add	r7, sp, #16
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800202a:	f04f 33ff 	mov.w	r3, #4294967295
 800202e:	9302      	str	r3, [sp, #8]
 8002030:	2301      	movs	r3, #1
 8002032:	9301      	str	r3, [sp, #4]
 8002034:	1dfb      	adds	r3, r7, #7
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	2301      	movs	r3, #1
 800203a:	2200      	movs	r2, #0
 800203c:	2178      	movs	r1, #120	; 0x78
 800203e:	4803      	ldr	r0, [pc, #12]	; (800204c <ssd1306_WriteCommand+0x2c>)
 8002040:	f002 fe7e 	bl	8004d40 <HAL_I2C_Mem_Write>
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	240006f0 	.word	0x240006f0

08002050 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af04      	add	r7, sp, #16
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	b29b      	uxth	r3, r3
 800205e:	f04f 32ff 	mov.w	r2, #4294967295
 8002062:	9202      	str	r2, [sp, #8]
 8002064:	9301      	str	r3, [sp, #4]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	2301      	movs	r3, #1
 800206c:	2240      	movs	r2, #64	; 0x40
 800206e:	2178      	movs	r1, #120	; 0x78
 8002070:	4803      	ldr	r0, [pc, #12]	; (8002080 <ssd1306_WriteData+0x30>)
 8002072:	f002 fe65 	bl	8004d40 <HAL_I2C_Mem_Write>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	240006f0 	.word	0x240006f0

08002084 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002088:	f7ff ffc2 	bl	8002010 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800208c:	2064      	movs	r0, #100	; 0x64
 800208e:	f000 febd 	bl	8002e0c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002092:	2000      	movs	r0, #0
 8002094:	f000 fa0c 	bl	80024b0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002098:	2020      	movs	r0, #32
 800209a:	f7ff ffc1 	bl	8002020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800209e:	2000      	movs	r0, #0
 80020a0:	f7ff ffbe 	bl	8002020 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80020a4:	20b0      	movs	r0, #176	; 0xb0
 80020a6:	f7ff ffbb 	bl	8002020 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80020aa:	20c8      	movs	r0, #200	; 0xc8
 80020ac:	f7ff ffb8 	bl	8002020 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80020b0:	2000      	movs	r0, #0
 80020b2:	f7ff ffb5 	bl	8002020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80020b6:	2010      	movs	r0, #16
 80020b8:	f7ff ffb2 	bl	8002020 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80020bc:	2040      	movs	r0, #64	; 0x40
 80020be:	f7ff ffaf 	bl	8002020 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80020c2:	20ff      	movs	r0, #255	; 0xff
 80020c4:	f000 f9e1 	bl	800248a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80020c8:	20a1      	movs	r0, #161	; 0xa1
 80020ca:	f7ff ffa9 	bl	8002020 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80020ce:	20a6      	movs	r0, #166	; 0xa6
 80020d0:	f7ff ffa6 	bl	8002020 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80020d4:	20a8      	movs	r0, #168	; 0xa8
 80020d6:	f7ff ffa3 	bl	8002020 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80020da:	203f      	movs	r0, #63	; 0x3f
 80020dc:	f7ff ffa0 	bl	8002020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80020e0:	20a4      	movs	r0, #164	; 0xa4
 80020e2:	f7ff ff9d 	bl	8002020 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80020e6:	20d3      	movs	r0, #211	; 0xd3
 80020e8:	f7ff ff9a 	bl	8002020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80020ec:	2000      	movs	r0, #0
 80020ee:	f7ff ff97 	bl	8002020 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80020f2:	20d5      	movs	r0, #213	; 0xd5
 80020f4:	f7ff ff94 	bl	8002020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80020f8:	20f0      	movs	r0, #240	; 0xf0
 80020fa:	f7ff ff91 	bl	8002020 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80020fe:	20d9      	movs	r0, #217	; 0xd9
 8002100:	f7ff ff8e 	bl	8002020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002104:	2022      	movs	r0, #34	; 0x22
 8002106:	f7ff ff8b 	bl	8002020 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800210a:	20da      	movs	r0, #218	; 0xda
 800210c:	f7ff ff88 	bl	8002020 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002110:	2012      	movs	r0, #18
 8002112:	f7ff ff85 	bl	8002020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002116:	20db      	movs	r0, #219	; 0xdb
 8002118:	f7ff ff82 	bl	8002020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800211c:	2020      	movs	r0, #32
 800211e:	f7ff ff7f 	bl	8002020 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002122:	208d      	movs	r0, #141	; 0x8d
 8002124:	f7ff ff7c 	bl	8002020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002128:	2014      	movs	r0, #20
 800212a:	f7ff ff79 	bl	8002020 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800212e:	2001      	movs	r0, #1
 8002130:	f000 f9be 	bl	80024b0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002134:	2000      	movs	r0, #0
 8002136:	f000 f80f 	bl	8002158 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800213a:	f000 f831 	bl	80021a0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800213e:	4b05      	ldr	r3, [pc, #20]	; (8002154 <ssd1306_Init+0xd0>)
 8002140:	2200      	movs	r2, #0
 8002142:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002144:	4b03      	ldr	r3, [pc, #12]	; (8002154 <ssd1306_Init+0xd0>)
 8002146:	2200      	movs	r2, #0
 8002148:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800214a:	4b02      	ldr	r3, [pc, #8]	; (8002154 <ssd1306_Init+0xd0>)
 800214c:	2201      	movs	r2, #1
 800214e:	711a      	strb	r2, [r3, #4]
}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}
 8002154:	240004d0 	.word	0x240004d0

08002158 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	e00d      	b.n	8002184 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <ssd1306_Fill+0x1a>
 800216e:	2100      	movs	r1, #0
 8002170:	e000      	b.n	8002174 <ssd1306_Fill+0x1c>
 8002172:	21ff      	movs	r1, #255	; 0xff
 8002174:	4a09      	ldr	r2, [pc, #36]	; (800219c <ssd1306_Fill+0x44>)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	4413      	add	r3, r2
 800217a:	460a      	mov	r2, r1
 800217c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	3301      	adds	r3, #1
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800218a:	d3ed      	bcc.n	8002168 <ssd1306_Fill+0x10>
    }
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	240000d0 	.word	0x240000d0

080021a0 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80021a6:	2300      	movs	r3, #0
 80021a8:	71fb      	strb	r3, [r7, #7]
 80021aa:	e016      	b.n	80021da <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	3b50      	subs	r3, #80	; 0x50
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff ff34 	bl	8002020 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80021b8:	2000      	movs	r0, #0
 80021ba:	f7ff ff31 	bl	8002020 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80021be:	2010      	movs	r0, #16
 80021c0:	f7ff ff2e 	bl	8002020 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	01db      	lsls	r3, r3, #7
 80021c8:	4a08      	ldr	r2, [pc, #32]	; (80021ec <ssd1306_UpdateScreen+0x4c>)
 80021ca:	4413      	add	r3, r2
 80021cc:	2180      	movs	r1, #128	; 0x80
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff ff3e 	bl	8002050 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	3301      	adds	r3, #1
 80021d8:	71fb      	strb	r3, [r7, #7]
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	2b07      	cmp	r3, #7
 80021de:	d9e5      	bls.n	80021ac <ssd1306_UpdateScreen+0xc>
    }
}
 80021e0:	bf00      	nop
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	240000d0 	.word	0x240000d0

080021f0 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
 80021fa:	460b      	mov	r3, r1
 80021fc:	71bb      	strb	r3, [r7, #6]
 80021fe:	4613      	mov	r3, r2
 8002200:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	2b00      	cmp	r3, #0
 8002208:	db3d      	blt.n	8002286 <ssd1306_DrawPixel+0x96>
 800220a:	79bb      	ldrb	r3, [r7, #6]
 800220c:	2b3f      	cmp	r3, #63	; 0x3f
 800220e:	d83a      	bhi.n	8002286 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002210:	797b      	ldrb	r3, [r7, #5]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d11a      	bne.n	800224c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002216:	79fa      	ldrb	r2, [r7, #7]
 8002218:	79bb      	ldrb	r3, [r7, #6]
 800221a:	08db      	lsrs	r3, r3, #3
 800221c:	b2d8      	uxtb	r0, r3
 800221e:	4603      	mov	r3, r0
 8002220:	01db      	lsls	r3, r3, #7
 8002222:	4413      	add	r3, r2
 8002224:	4a1b      	ldr	r2, [pc, #108]	; (8002294 <ssd1306_DrawPixel+0xa4>)
 8002226:	5cd3      	ldrb	r3, [r2, r3]
 8002228:	b25a      	sxtb	r2, r3
 800222a:	79bb      	ldrb	r3, [r7, #6]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	2101      	movs	r1, #1
 8002232:	fa01 f303 	lsl.w	r3, r1, r3
 8002236:	b25b      	sxtb	r3, r3
 8002238:	4313      	orrs	r3, r2
 800223a:	b259      	sxtb	r1, r3
 800223c:	79fa      	ldrb	r2, [r7, #7]
 800223e:	4603      	mov	r3, r0
 8002240:	01db      	lsls	r3, r3, #7
 8002242:	4413      	add	r3, r2
 8002244:	b2c9      	uxtb	r1, r1
 8002246:	4a13      	ldr	r2, [pc, #76]	; (8002294 <ssd1306_DrawPixel+0xa4>)
 8002248:	54d1      	strb	r1, [r2, r3]
 800224a:	e01d      	b.n	8002288 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800224c:	79fa      	ldrb	r2, [r7, #7]
 800224e:	79bb      	ldrb	r3, [r7, #6]
 8002250:	08db      	lsrs	r3, r3, #3
 8002252:	b2d8      	uxtb	r0, r3
 8002254:	4603      	mov	r3, r0
 8002256:	01db      	lsls	r3, r3, #7
 8002258:	4413      	add	r3, r2
 800225a:	4a0e      	ldr	r2, [pc, #56]	; (8002294 <ssd1306_DrawPixel+0xa4>)
 800225c:	5cd3      	ldrb	r3, [r2, r3]
 800225e:	b25a      	sxtb	r2, r3
 8002260:	79bb      	ldrb	r3, [r7, #6]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	2101      	movs	r1, #1
 8002268:	fa01 f303 	lsl.w	r3, r1, r3
 800226c:	b25b      	sxtb	r3, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	b25b      	sxtb	r3, r3
 8002272:	4013      	ands	r3, r2
 8002274:	b259      	sxtb	r1, r3
 8002276:	79fa      	ldrb	r2, [r7, #7]
 8002278:	4603      	mov	r3, r0
 800227a:	01db      	lsls	r3, r3, #7
 800227c:	4413      	add	r3, r2
 800227e:	b2c9      	uxtb	r1, r1
 8002280:	4a04      	ldr	r2, [pc, #16]	; (8002294 <ssd1306_DrawPixel+0xa4>)
 8002282:	54d1      	strb	r1, [r2, r3]
 8002284:	e000      	b.n	8002288 <ssd1306_DrawPixel+0x98>
        return;
 8002286:	bf00      	nop
    }
}
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	240000d0 	.word	0x240000d0

08002298 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002298:	b590      	push	{r4, r7, lr}
 800229a:	b089      	sub	sp, #36	; 0x24
 800229c:	af00      	add	r7, sp, #0
 800229e:	4604      	mov	r4, r0
 80022a0:	1d38      	adds	r0, r7, #4
 80022a2:	e880 0006 	stmia.w	r0, {r1, r2}
 80022a6:	461a      	mov	r2, r3
 80022a8:	4623      	mov	r3, r4
 80022aa:	73fb      	strb	r3, [r7, #15]
 80022ac:	4613      	mov	r3, r2
 80022ae:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	2b1f      	cmp	r3, #31
 80022b4:	d902      	bls.n	80022bc <ssd1306_WriteChar+0x24>
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	2b7e      	cmp	r3, #126	; 0x7e
 80022ba:	d901      	bls.n	80022c0 <ssd1306_WriteChar+0x28>
        return 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	e06d      	b.n	800239c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80022c0:	4b38      	ldr	r3, [pc, #224]	; (80023a4 <ssd1306_WriteChar+0x10c>)
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	461a      	mov	r2, r3
 80022c6:	793b      	ldrb	r3, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	2b80      	cmp	r3, #128	; 0x80
 80022cc:	dc06      	bgt.n	80022dc <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80022ce:	4b35      	ldr	r3, [pc, #212]	; (80023a4 <ssd1306_WriteChar+0x10c>)
 80022d0:	885b      	ldrh	r3, [r3, #2]
 80022d2:	461a      	mov	r2, r3
 80022d4:	797b      	ldrb	r3, [r7, #5]
 80022d6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80022d8:	2b40      	cmp	r3, #64	; 0x40
 80022da:	dd01      	ble.n	80022e0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	e05d      	b.n	800239c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80022e0:	2300      	movs	r3, #0
 80022e2:	61fb      	str	r3, [r7, #28]
 80022e4:	e04c      	b.n	8002380 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
 80022ea:	3b20      	subs	r3, #32
 80022ec:	7979      	ldrb	r1, [r7, #5]
 80022ee:	fb01 f303 	mul.w	r3, r1, r3
 80022f2:	4619      	mov	r1, r3
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	440b      	add	r3, r1
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	4413      	add	r3, r2
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002300:	2300      	movs	r3, #0
 8002302:	61bb      	str	r3, [r7, #24]
 8002304:	e034      	b.n	8002370 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d012      	beq.n	800233c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002316:	4b23      	ldr	r3, [pc, #140]	; (80023a4 <ssd1306_WriteChar+0x10c>)
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	b2da      	uxtb	r2, r3
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	b2db      	uxtb	r3, r3
 8002320:	4413      	add	r3, r2
 8002322:	b2d8      	uxtb	r0, r3
 8002324:	4b1f      	ldr	r3, [pc, #124]	; (80023a4 <ssd1306_WriteChar+0x10c>)
 8002326:	885b      	ldrh	r3, [r3, #2]
 8002328:	b2da      	uxtb	r2, r3
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	4413      	add	r3, r2
 8002330:	b2db      	uxtb	r3, r3
 8002332:	7bba      	ldrb	r2, [r7, #14]
 8002334:	4619      	mov	r1, r3
 8002336:	f7ff ff5b 	bl	80021f0 <ssd1306_DrawPixel>
 800233a:	e016      	b.n	800236a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800233c:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <ssd1306_WriteChar+0x10c>)
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	b2da      	uxtb	r2, r3
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	4413      	add	r3, r2
 8002348:	b2d8      	uxtb	r0, r3
 800234a:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <ssd1306_WriteChar+0x10c>)
 800234c:	885b      	ldrh	r3, [r3, #2]
 800234e:	b2da      	uxtb	r2, r3
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	b2db      	uxtb	r3, r3
 8002354:	4413      	add	r3, r2
 8002356:	b2d9      	uxtb	r1, r3
 8002358:	7bbb      	ldrb	r3, [r7, #14]
 800235a:	2b00      	cmp	r3, #0
 800235c:	bf0c      	ite	eq
 800235e:	2301      	moveq	r3, #1
 8002360:	2300      	movne	r3, #0
 8002362:	b2db      	uxtb	r3, r3
 8002364:	461a      	mov	r2, r3
 8002366:	f7ff ff43 	bl	80021f0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	3301      	adds	r3, #1
 800236e:	61bb      	str	r3, [r7, #24]
 8002370:	793b      	ldrb	r3, [r7, #4]
 8002372:	461a      	mov	r2, r3
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	4293      	cmp	r3, r2
 8002378:	d3c5      	bcc.n	8002306 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3301      	adds	r3, #1
 800237e:	61fb      	str	r3, [r7, #28]
 8002380:	797b      	ldrb	r3, [r7, #5]
 8002382:	461a      	mov	r2, r3
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	4293      	cmp	r3, r2
 8002388:	d3ad      	bcc.n	80022e6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800238a:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <ssd1306_WriteChar+0x10c>)
 800238c:	881a      	ldrh	r2, [r3, #0]
 800238e:	793b      	ldrb	r3, [r7, #4]
 8002390:	b29b      	uxth	r3, r3
 8002392:	4413      	add	r3, r2
 8002394:	b29a      	uxth	r2, r3
 8002396:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <ssd1306_WriteChar+0x10c>)
 8002398:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800239a:	7bfb      	ldrb	r3, [r7, #15]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3724      	adds	r7, #36	; 0x24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd90      	pop	{r4, r7, pc}
 80023a4:	240004d0 	.word	0x240004d0

080023a8 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	1d38      	adds	r0, r7, #4
 80023b2:	e880 0006 	stmia.w	r0, {r1, r2}
 80023b6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80023b8:	e012      	b.n	80023e0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	7818      	ldrb	r0, [r3, #0]
 80023be:	78fb      	ldrb	r3, [r7, #3]
 80023c0:	1d3a      	adds	r2, r7, #4
 80023c2:	ca06      	ldmia	r2, {r1, r2}
 80023c4:	f7ff ff68 	bl	8002298 <ssd1306_WriteChar>
 80023c8:	4603      	mov	r3, r0
 80023ca:	461a      	mov	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d002      	beq.n	80023da <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	e008      	b.n	80023ec <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	3301      	adds	r3, #1
 80023de:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1e8      	bne.n	80023ba <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	781b      	ldrb	r3, [r3, #0]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	460a      	mov	r2, r1
 80023fe:	71fb      	strb	r3, [r7, #7]
 8002400:	4613      	mov	r3, r2
 8002402:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	b29a      	uxth	r2, r3
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <ssd1306_SetCursor+0x2c>)
 800240a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800240c:	79bb      	ldrb	r3, [r7, #6]
 800240e:	b29a      	uxth	r2, r3
 8002410:	4b03      	ldr	r3, [pc, #12]	; (8002420 <ssd1306_SetCursor+0x2c>)
 8002412:	805a      	strh	r2, [r3, #2]
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	240004d0 	.word	0x240004d0

08002424 <ssd1306_DrawFilledRectangle>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_DrawFilledRectangle(uint8_t x, uint8_t y, uint8_t width, uint8_t height, SSD1306_COLOR color) {
 8002424:	b590      	push	{r4, r7, lr}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	4604      	mov	r4, r0
 800242c:	4608      	mov	r0, r1
 800242e:	4611      	mov	r1, r2
 8002430:	461a      	mov	r2, r3
 8002432:	4623      	mov	r3, r4
 8002434:	71fb      	strb	r3, [r7, #7]
 8002436:	4603      	mov	r3, r0
 8002438:	71bb      	strb	r3, [r7, #6]
 800243a:	460b      	mov	r3, r1
 800243c:	717b      	strb	r3, [r7, #5]
 800243e:	4613      	mov	r3, r2
 8002440:	713b      	strb	r3, [r7, #4]
    uint8_t i, j;
    for (i = x; i < x + width; i++) {
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	73fb      	strb	r3, [r7, #15]
 8002446:	e015      	b.n	8002474 <ssd1306_DrawFilledRectangle+0x50>
        for (j = y; j < y + height; j++) {
 8002448:	79bb      	ldrb	r3, [r7, #6]
 800244a:	73bb      	strb	r3, [r7, #14]
 800244c:	e009      	b.n	8002462 <ssd1306_DrawFilledRectangle+0x3e>
            ssd1306_DrawPixel(i, j, color);
 800244e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002452:	7bb9      	ldrb	r1, [r7, #14]
 8002454:	7bfb      	ldrb	r3, [r7, #15]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff feca 	bl	80021f0 <ssd1306_DrawPixel>
        for (j = y; j < y + height; j++) {
 800245c:	7bbb      	ldrb	r3, [r7, #14]
 800245e:	3301      	adds	r3, #1
 8002460:	73bb      	strb	r3, [r7, #14]
 8002462:	7bba      	ldrb	r2, [r7, #14]
 8002464:	79b9      	ldrb	r1, [r7, #6]
 8002466:	793b      	ldrb	r3, [r7, #4]
 8002468:	440b      	add	r3, r1
 800246a:	429a      	cmp	r2, r3
 800246c:	dbef      	blt.n	800244e <ssd1306_DrawFilledRectangle+0x2a>
    for (i = x; i < x + width; i++) {
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	3301      	adds	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
 8002474:	7bfa      	ldrb	r2, [r7, #15]
 8002476:	79f9      	ldrb	r1, [r7, #7]
 8002478:	797b      	ldrb	r3, [r7, #5]
 800247a:	440b      	add	r3, r1
 800247c:	429a      	cmp	r2, r3
 800247e:	dbe3      	blt.n	8002448 <ssd1306_DrawFilledRectangle+0x24>
        }
    }
}
 8002480:	bf00      	nop
 8002482:	bf00      	nop
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	bd90      	pop	{r4, r7, pc}

0800248a <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800248a:	b580      	push	{r7, lr}
 800248c:	b084      	sub	sp, #16
 800248e:	af00      	add	r7, sp, #0
 8002490:	4603      	mov	r3, r0
 8002492:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002494:	2381      	movs	r3, #129	; 0x81
 8002496:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fdc0 	bl	8002020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fdbc 	bl	8002020 <ssd1306_WriteCommand>
}
 80024a8:	bf00      	nop
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80024c0:	23af      	movs	r3, #175	; 0xaf
 80024c2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80024c4:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <ssd1306_SetDisplayOn+0x38>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	715a      	strb	r2, [r3, #5]
 80024ca:	e004      	b.n	80024d6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80024cc:	23ae      	movs	r3, #174	; 0xae
 80024ce:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <ssd1306_SetDisplayOn+0x38>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fda1 	bl	8002020 <ssd1306_WriteCommand>
}
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	240004d0 	.word	0x240004d0

080024ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f2:	4b0a      	ldr	r3, [pc, #40]	; (800251c <HAL_MspInit+0x30>)
 80024f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024f8:	4a08      	ldr	r2, [pc, #32]	; (800251c <HAL_MspInit+0x30>)
 80024fa:	f043 0302 	orr.w	r3, r3, #2
 80024fe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_MspInit+0x30>)
 8002504:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	607b      	str	r3, [r7, #4]
 800250e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	58024400 	.word	0x58024400

08002520 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b0ba      	sub	sp, #232	; 0xe8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002528:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002538:	f107 0318 	add.w	r3, r7, #24
 800253c:	22bc      	movs	r2, #188	; 0xbc
 800253e:	2100      	movs	r1, #0
 8002540:	4618      	mov	r0, r3
 8002542:	f009 fac7 	bl	800bad4 <memset>
  if(hadc->Instance==ADC3)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a30      	ldr	r2, [pc, #192]	; (800260c <HAL_ADC_MspInit+0xec>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d159      	bne.n	8002604 <HAL_ADC_MspInit+0xe4>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002550:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002554:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8002556:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800255a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800255e:	f107 0318 	add.w	r3, r7, #24
 8002562:	4618      	mov	r0, r3
 8002564:	f004 f934 	bl	80067d0 <HAL_RCCEx_PeriphCLKConfig>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800256e:	f7ff fd31 	bl	8001fd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002572:	4b27      	ldr	r3, [pc, #156]	; (8002610 <HAL_ADC_MspInit+0xf0>)
 8002574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002578:	4a25      	ldr	r2, [pc, #148]	; (8002610 <HAL_ADC_MspInit+0xf0>)
 800257a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800257e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002582:	4b23      	ldr	r3, [pc, #140]	; (8002610 <HAL_ADC_MspInit+0xf0>)
 8002584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002590:	4b1f      	ldr	r3, [pc, #124]	; (8002610 <HAL_ADC_MspInit+0xf0>)
 8002592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002596:	4a1e      	ldr	r2, [pc, #120]	; (8002610 <HAL_ADC_MspInit+0xf0>)
 8002598:	f043 0320 	orr.w	r3, r3, #32
 800259c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025a0:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <HAL_ADC_MspInit+0xf0>)
 80025a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025a6:	f003 0320 	and.w	r3, r3, #32
 80025aa:	613b      	str	r3, [r7, #16]
 80025ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ae:	4b18      	ldr	r3, [pc, #96]	; (8002610 <HAL_ADC_MspInit+0xf0>)
 80025b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025b4:	4a16      	ldr	r2, [pc, #88]	; (8002610 <HAL_ADC_MspInit+0xf0>)
 80025b6:	f043 0304 	orr.w	r3, r3, #4
 80025ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025be:	4b14      	ldr	r3, [pc, #80]	; (8002610 <HAL_ADC_MspInit+0xf0>)
 80025c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	68fb      	ldr	r3, [r7, #12]
    PF8     ------> ADC3_INP7
    PF10     ------> ADC3_INP6
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_10;
 80025cc:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 80025d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025d4:	2303      	movs	r3, #3
 80025d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025e4:	4619      	mov	r1, r3
 80025e6:	480b      	ldr	r0, [pc, #44]	; (8002614 <HAL_ADC_MspInit+0xf4>)
 80025e8:	f002 f938 	bl	800485c <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80025ec:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80025f0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80025f4:	f000 fc3a 	bl	8002e6c <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80025f8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80025fc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002600:	f000 fc34 	bl	8002e6c <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002604:	bf00      	nop
 8002606:	37e8      	adds	r7, #232	; 0xe8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	58026000 	.word	0x58026000
 8002610:	58024400 	.word	0x58024400
 8002614:	58021400 	.word	0x58021400

08002618 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b0b8      	sub	sp, #224	; 0xe0
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002630:	f107 0310 	add.w	r3, r7, #16
 8002634:	22bc      	movs	r2, #188	; 0xbc
 8002636:	2100      	movs	r1, #0
 8002638:	4618      	mov	r0, r3
 800263a:	f009 fa4b 	bl	800bad4 <memset>
  if(hi2c->Instance==I2C1)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a25      	ldr	r2, [pc, #148]	; (80026d8 <HAL_I2C_MspInit+0xc0>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d143      	bne.n	80026d0 <HAL_I2C_MspInit+0xb8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002648:	2308      	movs	r3, #8
 800264a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_HSI;
 800264c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002650:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002654:	f107 0310 	add.w	r3, r7, #16
 8002658:	4618      	mov	r0, r3
 800265a:	f004 f8b9 	bl	80067d0 <HAL_RCCEx_PeriphCLKConfig>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002664:	f7ff fcb6 	bl	8001fd4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002668:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <HAL_I2C_MspInit+0xc4>)
 800266a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800266e:	4a1b      	ldr	r2, [pc, #108]	; (80026dc <HAL_I2C_MspInit+0xc4>)
 8002670:	f043 0302 	orr.w	r3, r3, #2
 8002674:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002678:	4b18      	ldr	r3, [pc, #96]	; (80026dc <HAL_I2C_MspInit+0xc4>)
 800267a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002686:	f44f 7340 	mov.w	r3, #768	; 0x300
 800268a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800268e:	2312      	movs	r3, #18
 8002690:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002694:	2301      	movs	r3, #1
 8002696:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800269a:	2302      	movs	r3, #2
 800269c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026a0:	2304      	movs	r3, #4
 80026a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026aa:	4619      	mov	r1, r3
 80026ac:	480c      	ldr	r0, [pc, #48]	; (80026e0 <HAL_I2C_MspInit+0xc8>)
 80026ae:	f002 f8d5 	bl	800485c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026b2:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <HAL_I2C_MspInit+0xc4>)
 80026b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026b8:	4a08      	ldr	r2, [pc, #32]	; (80026dc <HAL_I2C_MspInit+0xc4>)
 80026ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026c2:	4b06      	ldr	r3, [pc, #24]	; (80026dc <HAL_I2C_MspInit+0xc4>)
 80026c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80026d0:	bf00      	nop
 80026d2:	37e0      	adds	r7, #224	; 0xe0
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40005400 	.word	0x40005400
 80026dc:	58024400 	.word	0x58024400
 80026e0:	58020400 	.word	0x58020400

080026e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a32      	ldr	r2, [pc, #200]	; (80027bc <HAL_TIM_Base_MspInit+0xd8>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d10f      	bne.n	8002716 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026f6:	4b32      	ldr	r3, [pc, #200]	; (80027c0 <HAL_TIM_Base_MspInit+0xdc>)
 80026f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026fc:	4a30      	ldr	r2, [pc, #192]	; (80027c0 <HAL_TIM_Base_MspInit+0xdc>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002706:	4b2e      	ldr	r3, [pc, #184]	; (80027c0 <HAL_TIM_Base_MspInit+0xdc>)
 8002708:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002714:	e04d      	b.n	80027b2 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM3)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a2a      	ldr	r2, [pc, #168]	; (80027c4 <HAL_TIM_Base_MspInit+0xe0>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d117      	bne.n	8002750 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002720:	4b27      	ldr	r3, [pc, #156]	; (80027c0 <HAL_TIM_Base_MspInit+0xdc>)
 8002722:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002726:	4a26      	ldr	r2, [pc, #152]	; (80027c0 <HAL_TIM_Base_MspInit+0xdc>)
 8002728:	f043 0302 	orr.w	r3, r3, #2
 800272c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002730:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <HAL_TIM_Base_MspInit+0xdc>)
 8002732:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	613b      	str	r3, [r7, #16]
 800273c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800273e:	2200      	movs	r2, #0
 8002740:	2100      	movs	r1, #0
 8002742:	201d      	movs	r0, #29
 8002744:	f002 f855 	bl	80047f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002748:	201d      	movs	r0, #29
 800274a:	f002 f86c 	bl	8004826 <HAL_NVIC_EnableIRQ>
}
 800274e:	e030      	b.n	80027b2 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM5)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a1c      	ldr	r2, [pc, #112]	; (80027c8 <HAL_TIM_Base_MspInit+0xe4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d117      	bne.n	800278a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800275a:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <HAL_TIM_Base_MspInit+0xdc>)
 800275c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002760:	4a17      	ldr	r2, [pc, #92]	; (80027c0 <HAL_TIM_Base_MspInit+0xdc>)
 8002762:	f043 0308 	orr.w	r3, r3, #8
 8002766:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <HAL_TIM_Base_MspInit+0xdc>)
 800276c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002778:	2200      	movs	r2, #0
 800277a:	2100      	movs	r1, #0
 800277c:	2032      	movs	r0, #50	; 0x32
 800277e:	f002 f838 	bl	80047f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002782:	2032      	movs	r0, #50	; 0x32
 8002784:	f002 f84f 	bl	8004826 <HAL_NVIC_EnableIRQ>
}
 8002788:	e013      	b.n	80027b2 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM14)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a0f      	ldr	r2, [pc, #60]	; (80027cc <HAL_TIM_Base_MspInit+0xe8>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d10e      	bne.n	80027b2 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002794:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <HAL_TIM_Base_MspInit+0xdc>)
 8002796:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800279a:	4a09      	ldr	r2, [pc, #36]	; (80027c0 <HAL_TIM_Base_MspInit+0xdc>)
 800279c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027a4:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_TIM_Base_MspInit+0xdc>)
 80027a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
}
 80027b2:	bf00      	nop
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40010000 	.word	0x40010000
 80027c0:	58024400 	.word	0x58024400
 80027c4:	40000400 	.word	0x40000400
 80027c8:	40000c00 	.word	0x40000c00
 80027cc:	40002000 	.word	0x40002000

080027d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	; 0x28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f107 0314 	add.w	r3, r7, #20
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a1a      	ldr	r2, [pc, #104]	; (8002858 <HAL_TIM_Encoder_MspInit+0x88>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d12e      	bne.n	8002850 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027f2:	4b1a      	ldr	r3, [pc, #104]	; (800285c <HAL_TIM_Encoder_MspInit+0x8c>)
 80027f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027f8:	4a18      	ldr	r2, [pc, #96]	; (800285c <HAL_TIM_Encoder_MspInit+0x8c>)
 80027fa:	f043 0304 	orr.w	r3, r3, #4
 80027fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002802:	4b16      	ldr	r3, [pc, #88]	; (800285c <HAL_TIM_Encoder_MspInit+0x8c>)
 8002804:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002810:	4b12      	ldr	r3, [pc, #72]	; (800285c <HAL_TIM_Encoder_MspInit+0x8c>)
 8002812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002816:	4a11      	ldr	r2, [pc, #68]	; (800285c <HAL_TIM_Encoder_MspInit+0x8c>)
 8002818:	f043 0308 	orr.w	r3, r3, #8
 800281c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002820:	4b0e      	ldr	r3, [pc, #56]	; (800285c <HAL_TIM_Encoder_MspInit+0x8c>)
 8002822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800282e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002834:	2302      	movs	r3, #2
 8002836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283c:	2300      	movs	r3, #0
 800283e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002840:	2302      	movs	r3, #2
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002844:	f107 0314 	add.w	r3, r7, #20
 8002848:	4619      	mov	r1, r3
 800284a:	4805      	ldr	r0, [pc, #20]	; (8002860 <HAL_TIM_Encoder_MspInit+0x90>)
 800284c:	f002 f806 	bl	800485c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002850:	bf00      	nop
 8002852:	3728      	adds	r7, #40	; 0x28
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40000800 	.word	0x40000800
 800285c:	58024400 	.word	0x58024400
 8002860:	58020c00 	.word	0x58020c00

08002864 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286c:	f107 030c 	add.w	r3, r7, #12
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM14)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a13      	ldr	r2, [pc, #76]	; (80028d0 <HAL_TIM_MspPostInit+0x6c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d11f      	bne.n	80028c6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002886:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <HAL_TIM_MspPostInit+0x70>)
 8002888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800288c:	4a11      	ldr	r2, [pc, #68]	; (80028d4 <HAL_TIM_MspPostInit+0x70>)
 800288e:	f043 0320 	orr.w	r3, r3, #32
 8002892:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002896:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <HAL_TIM_MspPostInit+0x70>)
 8002898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PF9     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028aa:	2302      	movs	r3, #2
 80028ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b2:	2300      	movs	r3, #0
 80028b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80028b6:	2309      	movs	r3, #9
 80028b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028ba:	f107 030c 	add.w	r3, r7, #12
 80028be:	4619      	mov	r1, r3
 80028c0:	4805      	ldr	r0, [pc, #20]	; (80028d8 <HAL_TIM_MspPostInit+0x74>)
 80028c2:	f001 ffcb 	bl	800485c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80028c6:	bf00      	nop
 80028c8:	3720      	adds	r7, #32
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40002000 	.word	0x40002000
 80028d4:	58024400 	.word	0x58024400
 80028d8:	58021400 	.word	0x58021400

080028dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b0b8      	sub	sp, #224	; 0xe0
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028f4:	f107 0310 	add.w	r3, r7, #16
 80028f8:	22bc      	movs	r2, #188	; 0xbc
 80028fa:	2100      	movs	r1, #0
 80028fc:	4618      	mov	r0, r3
 80028fe:	f009 f8e9 	bl	800bad4 <memset>
  if(huart->Instance==USART3)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a25      	ldr	r2, [pc, #148]	; (800299c <HAL_UART_MspInit+0xc0>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d142      	bne.n	8002992 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800290c:	2302      	movs	r3, #2
 800290e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002910:	2300      	movs	r3, #0
 8002912:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002916:	f107 0310 	add.w	r3, r7, #16
 800291a:	4618      	mov	r0, r3
 800291c:	f003 ff58 	bl	80067d0 <HAL_RCCEx_PeriphCLKConfig>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002926:	f7ff fb55 	bl	8001fd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800292a:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <HAL_UART_MspInit+0xc4>)
 800292c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002930:	4a1b      	ldr	r2, [pc, #108]	; (80029a0 <HAL_UART_MspInit+0xc4>)
 8002932:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002936:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800293a:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <HAL_UART_MspInit+0xc4>)
 800293c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002940:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002948:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <HAL_UART_MspInit+0xc4>)
 800294a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800294e:	4a14      	ldr	r2, [pc, #80]	; (80029a0 <HAL_UART_MspInit+0xc4>)
 8002950:	f043 0308 	orr.w	r3, r3, #8
 8002954:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002958:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <HAL_UART_MspInit+0xc4>)
 800295a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002966:	f44f 7340 	mov.w	r3, #768	; 0x300
 800296a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296e:	2302      	movs	r3, #2
 8002970:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297a:	2300      	movs	r3, #0
 800297c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002980:	2307      	movs	r3, #7
 8002982:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002986:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800298a:	4619      	mov	r1, r3
 800298c:	4805      	ldr	r0, [pc, #20]	; (80029a4 <HAL_UART_MspInit+0xc8>)
 800298e:	f001 ff65 	bl	800485c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002992:	bf00      	nop
 8002994:	37e0      	adds	r7, #224	; 0xe0
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40004800 	.word	0x40004800
 80029a0:	58024400 	.word	0x58024400
 80029a4:	58020c00 	.word	0x58020c00

080029a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b0b8      	sub	sp, #224	; 0xe0
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029c0:	f107 0310 	add.w	r3, r7, #16
 80029c4:	22bc      	movs	r2, #188	; 0xbc
 80029c6:	2100      	movs	r1, #0
 80029c8:	4618      	mov	r0, r3
 80029ca:	f009 f883 	bl	800bad4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a2f      	ldr	r2, [pc, #188]	; (8002a90 <HAL_PCD_MspInit+0xe8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d156      	bne.n	8002a86 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80029d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029dc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80029de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029e6:	f107 0310 	add.w	r3, r7, #16
 80029ea:	4618      	mov	r0, r3
 80029ec:	f003 fef0 	bl	80067d0 <HAL_RCCEx_PeriphCLKConfig>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80029f6:	f7ff faed 	bl	8001fd4 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80029fa:	f002 ff21 	bl	8005840 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fe:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <HAL_PCD_MspInit+0xec>)
 8002a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a04:	4a23      	ldr	r2, [pc, #140]	; (8002a94 <HAL_PCD_MspInit+0xec>)
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a0e:	4b21      	ldr	r3, [pc, #132]	; (8002a94 <HAL_PCD_MspInit+0xec>)
 8002a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002a1c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002a20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a24:	2302      	movs	r3, #2
 8002a26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a30:	2300      	movs	r3, #0
 8002a32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002a36:	230a      	movs	r3, #10
 8002a38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a40:	4619      	mov	r1, r3
 8002a42:	4815      	ldr	r0, [pc, #84]	; (8002a98 <HAL_PCD_MspInit+0xf0>)
 8002a44:	f001 ff0a 	bl	800485c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002a48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a50:	2300      	movs	r3, #0
 8002a52:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002a5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a60:	4619      	mov	r1, r3
 8002a62:	480d      	ldr	r0, [pc, #52]	; (8002a98 <HAL_PCD_MspInit+0xf0>)
 8002a64:	f001 fefa 	bl	800485c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002a68:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <HAL_PCD_MspInit+0xec>)
 8002a6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a6e:	4a09      	ldr	r2, [pc, #36]	; (8002a94 <HAL_PCD_MspInit+0xec>)
 8002a70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a74:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_PCD_MspInit+0xec>)
 8002a7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a82:	60bb      	str	r3, [r7, #8]
 8002a84:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002a86:	bf00      	nop
 8002a88:	37e0      	adds	r7, #224	; 0xe0
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40080000 	.word	0x40080000
 8002a94:	58024400 	.word	0x58024400
 8002a98:	58020000 	.word	0x58020000

08002a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002aa0:	e7fe      	b.n	8002aa0 <NMI_Handler+0x4>

08002aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aa6:	e7fe      	b.n	8002aa6 <HardFault_Handler+0x4>

08002aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aac:	e7fe      	b.n	8002aac <MemManage_Handler+0x4>

08002aae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ab2:	e7fe      	b.n	8002ab2 <BusFault_Handler+0x4>

08002ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ab8:	e7fe      	b.n	8002ab8 <UsageFault_Handler+0x4>

08002aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aba:	b480      	push	{r7}
 8002abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ae8:	f000 f970 	bl	8002dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aec:	bf00      	nop
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002af4:	4802      	ldr	r0, [pc, #8]	; (8002b00 <TIM3_IRQHandler+0x10>)
 8002af6:	f006 fb65 	bl	80091c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	24001f18 	.word	0x24001f18

08002b04 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002b08:	4802      	ldr	r0, [pc, #8]	; (8002b14 <TIM5_IRQHandler+0x10>)
 8002b0a:	f006 fb5b 	bl	80091c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	24000b44 	.word	0x24000b44

08002b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b20:	4a14      	ldr	r2, [pc, #80]	; (8002b74 <_sbrk+0x5c>)
 8002b22:	4b15      	ldr	r3, [pc, #84]	; (8002b78 <_sbrk+0x60>)
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b2c:	4b13      	ldr	r3, [pc, #76]	; (8002b7c <_sbrk+0x64>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d102      	bne.n	8002b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b34:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <_sbrk+0x64>)
 8002b36:	4a12      	ldr	r2, [pc, #72]	; (8002b80 <_sbrk+0x68>)
 8002b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b3a:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <_sbrk+0x64>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4413      	add	r3, r2
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d207      	bcs.n	8002b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b48:	f008 ff72 	bl	800ba30 <__errno>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	220c      	movs	r2, #12
 8002b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b52:	f04f 33ff 	mov.w	r3, #4294967295
 8002b56:	e009      	b.n	8002b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b58:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <_sbrk+0x64>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b5e:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <_sbrk+0x64>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4413      	add	r3, r2
 8002b66:	4a05      	ldr	r2, [pc, #20]	; (8002b7c <_sbrk+0x64>)
 8002b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	24080000 	.word	0x24080000
 8002b78:	00000400 	.word	0x00000400
 8002b7c:	240004d8 	.word	0x240004d8
 8002b80:	24002bf8 	.word	0x24002bf8

08002b84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b88:	4b37      	ldr	r3, [pc, #220]	; (8002c68 <SystemInit+0xe4>)
 8002b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8e:	4a36      	ldr	r2, [pc, #216]	; (8002c68 <SystemInit+0xe4>)
 8002b90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b98:	4b34      	ldr	r3, [pc, #208]	; (8002c6c <SystemInit+0xe8>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 030f 	and.w	r3, r3, #15
 8002ba0:	2b06      	cmp	r3, #6
 8002ba2:	d807      	bhi.n	8002bb4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002ba4:	4b31      	ldr	r3, [pc, #196]	; (8002c6c <SystemInit+0xe8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f023 030f 	bic.w	r3, r3, #15
 8002bac:	4a2f      	ldr	r2, [pc, #188]	; (8002c6c <SystemInit+0xe8>)
 8002bae:	f043 0307 	orr.w	r3, r3, #7
 8002bb2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002bb4:	4b2e      	ldr	r3, [pc, #184]	; (8002c70 <SystemInit+0xec>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a2d      	ldr	r2, [pc, #180]	; (8002c70 <SystemInit+0xec>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002bc0:	4b2b      	ldr	r3, [pc, #172]	; (8002c70 <SystemInit+0xec>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002bc6:	4b2a      	ldr	r3, [pc, #168]	; (8002c70 <SystemInit+0xec>)
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	4929      	ldr	r1, [pc, #164]	; (8002c70 <SystemInit+0xec>)
 8002bcc:	4b29      	ldr	r3, [pc, #164]	; (8002c74 <SystemInit+0xf0>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002bd2:	4b26      	ldr	r3, [pc, #152]	; (8002c6c <SystemInit+0xe8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d007      	beq.n	8002bee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002bde:	4b23      	ldr	r3, [pc, #140]	; (8002c6c <SystemInit+0xe8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f023 030f 	bic.w	r3, r3, #15
 8002be6:	4a21      	ldr	r2, [pc, #132]	; (8002c6c <SystemInit+0xe8>)
 8002be8:	f043 0307 	orr.w	r3, r3, #7
 8002bec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002bee:	4b20      	ldr	r3, [pc, #128]	; (8002c70 <SystemInit+0xec>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002bf4:	4b1e      	ldr	r3, [pc, #120]	; (8002c70 <SystemInit+0xec>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002bfa:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <SystemInit+0xec>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002c00:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <SystemInit+0xec>)
 8002c02:	4a1d      	ldr	r2, [pc, #116]	; (8002c78 <SystemInit+0xf4>)
 8002c04:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002c06:	4b1a      	ldr	r3, [pc, #104]	; (8002c70 <SystemInit+0xec>)
 8002c08:	4a1c      	ldr	r2, [pc, #112]	; (8002c7c <SystemInit+0xf8>)
 8002c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002c0c:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <SystemInit+0xec>)
 8002c0e:	4a1c      	ldr	r2, [pc, #112]	; (8002c80 <SystemInit+0xfc>)
 8002c10:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002c12:	4b17      	ldr	r3, [pc, #92]	; (8002c70 <SystemInit+0xec>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002c18:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <SystemInit+0xec>)
 8002c1a:	4a19      	ldr	r2, [pc, #100]	; (8002c80 <SystemInit+0xfc>)
 8002c1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002c1e:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <SystemInit+0xec>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002c24:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <SystemInit+0xec>)
 8002c26:	4a16      	ldr	r2, [pc, #88]	; (8002c80 <SystemInit+0xfc>)
 8002c28:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002c2a:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <SystemInit+0xec>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c30:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <SystemInit+0xec>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a0e      	ldr	r2, [pc, #56]	; (8002c70 <SystemInit+0xec>)
 8002c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <SystemInit+0xec>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002c42:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <SystemInit+0x100>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <SystemInit+0x104>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c4e:	d202      	bcs.n	8002c56 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002c50:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <SystemInit+0x108>)
 8002c52:	2201      	movs	r2, #1
 8002c54:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002c56:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <SystemInit+0x10c>)
 8002c58:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002c5c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002c5e:	bf00      	nop
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	e000ed00 	.word	0xe000ed00
 8002c6c:	52002000 	.word	0x52002000
 8002c70:	58024400 	.word	0x58024400
 8002c74:	eaf6ed7f 	.word	0xeaf6ed7f
 8002c78:	02020200 	.word	0x02020200
 8002c7c:	01ff0000 	.word	0x01ff0000
 8002c80:	01010280 	.word	0x01010280
 8002c84:	5c001000 	.word	0x5c001000
 8002c88:	ffff0000 	.word	0xffff0000
 8002c8c:	51008108 	.word	0x51008108
 8002c90:	52004000 	.word	0x52004000

08002c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002c94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ccc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c98:	f7ff ff74 	bl	8002b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c9c:	480c      	ldr	r0, [pc, #48]	; (8002cd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c9e:	490d      	ldr	r1, [pc, #52]	; (8002cd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ca0:	4a0d      	ldr	r2, [pc, #52]	; (8002cd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ca4:	e002      	b.n	8002cac <LoopCopyDataInit>

08002ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002caa:	3304      	adds	r3, #4

08002cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cb0:	d3f9      	bcc.n	8002ca6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cb2:	4a0a      	ldr	r2, [pc, #40]	; (8002cdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002cb4:	4c0a      	ldr	r4, [pc, #40]	; (8002ce0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cb8:	e001      	b.n	8002cbe <LoopFillZerobss>

08002cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cbc:	3204      	adds	r2, #4

08002cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cc0:	d3fb      	bcc.n	8002cba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cc2:	f008 febb 	bl	800ba3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cc6:	f7fe fb01 	bl	80012cc <main>
  bx  lr
 8002cca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ccc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002cd0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002cd4:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8002cd8:	0800d2c8 	.word	0x0800d2c8
  ldr r2, =_sbss
 8002cdc:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8002ce0:	24002bf4 	.word	0x24002bf4

08002ce4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ce4:	e7fe      	b.n	8002ce4 <ADC3_IRQHandler>
	...

08002ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cee:	2003      	movs	r0, #3
 8002cf0:	f001 fd74 	bl	80047dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002cf4:	f003 fb96 	bl	8006424 <HAL_RCC_GetSysClockFreq>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <HAL_Init+0x68>)
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	0a1b      	lsrs	r3, r3, #8
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	4913      	ldr	r1, [pc, #76]	; (8002d54 <HAL_Init+0x6c>)
 8002d06:	5ccb      	ldrb	r3, [r1, r3]
 8002d08:	f003 031f 	and.w	r3, r3, #31
 8002d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d12:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <HAL_Init+0x68>)
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	4a0e      	ldr	r2, [pc, #56]	; (8002d54 <HAL_Init+0x6c>)
 8002d1c:	5cd3      	ldrb	r3, [r2, r3]
 8002d1e:	f003 031f 	and.w	r3, r3, #31
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	fa22 f303 	lsr.w	r3, r2, r3
 8002d28:	4a0b      	ldr	r2, [pc, #44]	; (8002d58 <HAL_Init+0x70>)
 8002d2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d2c:	4a0b      	ldr	r2, [pc, #44]	; (8002d5c <HAL_Init+0x74>)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d32:	2000      	movs	r0, #0
 8002d34:	f000 f814 	bl	8002d60 <HAL_InitTick>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e002      	b.n	8002d48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002d42:	f7ff fbd3 	bl	80024ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	58024400 	.word	0x58024400
 8002d54:	0800d24c 	.word	0x0800d24c
 8002d58:	24000018 	.word	0x24000018
 8002d5c:	24000014 	.word	0x24000014

08002d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002d68:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <HAL_InitTick+0x60>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e021      	b.n	8002db8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002d74:	4b13      	ldr	r3, [pc, #76]	; (8002dc4 <HAL_InitTick+0x64>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4b11      	ldr	r3, [pc, #68]	; (8002dc0 <HAL_InitTick+0x60>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f001 fd59 	bl	8004842 <HAL_SYSTICK_Config>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e00e      	b.n	8002db8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b0f      	cmp	r3, #15
 8002d9e:	d80a      	bhi.n	8002db6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002da0:	2200      	movs	r2, #0
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	f04f 30ff 	mov.w	r0, #4294967295
 8002da8:	f001 fd23 	bl	80047f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dac:	4a06      	ldr	r2, [pc, #24]	; (8002dc8 <HAL_InitTick+0x68>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	e000      	b.n	8002db8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	24000020 	.word	0x24000020
 8002dc4:	24000014 	.word	0x24000014
 8002dc8:	2400001c 	.word	0x2400001c

08002dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_IncTick+0x20>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_IncTick+0x24>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4413      	add	r3, r2
 8002ddc:	4a04      	ldr	r2, [pc, #16]	; (8002df0 <HAL_IncTick+0x24>)
 8002dde:	6013      	str	r3, [r2, #0]
}
 8002de0:	bf00      	nop
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	24000020 	.word	0x24000020
 8002df0:	24002be0 	.word	0x24002be0

08002df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return uwTick;
 8002df8:	4b03      	ldr	r3, [pc, #12]	; (8002e08 <HAL_GetTick+0x14>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	24002be0 	.word	0x24002be0

08002e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e14:	f7ff ffee 	bl	8002df4 <HAL_GetTick>
 8002e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e24:	d005      	beq.n	8002e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e26:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <HAL_Delay+0x44>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4413      	add	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e32:	bf00      	nop
 8002e34:	f7ff ffde 	bl	8002df4 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d8f7      	bhi.n	8002e34 <HAL_Delay+0x28>
  {
  }
}
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	24000020 	.word	0x24000020

08002e54 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002e58:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <HAL_GetREVID+0x14>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	0c1b      	lsrs	r3, r3, #16
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	5c001000 	.word	0x5c001000

08002e6c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002e76:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	401a      	ands	r2, r3
 8002e80:	4904      	ldr	r1, [pc, #16]	; (8002e94 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	604b      	str	r3, [r1, #4]
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	58000400 	.word	0x58000400

08002e98 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	609a      	str	r2, [r3, #8]
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	609a      	str	r2, [r3, #8]
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
 8002f0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	3360      	adds	r3, #96	; 0x60
 8002f12:	461a      	mov	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002f34:	bf00      	nop
 8002f36:	371c      	adds	r7, #28
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f003 031f 	and.w	r3, r3, #31
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f60:	431a      	orrs	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	611a      	str	r2, [r3, #16]
}
 8002f66:	bf00      	nop
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b087      	sub	sp, #28
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	3360      	adds	r3, #96	; 0x60
 8002f82:	461a      	mov	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	601a      	str	r2, [r3, #0]
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	371c      	adds	r7, #28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e000      	b.n	8002fc2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b087      	sub	sp, #28
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	3330      	adds	r3, #48	; 0x30
 8002fde:	461a      	mov	r2, r3
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	0a1b      	lsrs	r3, r3, #8
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	f003 030c 	and.w	r3, r3, #12
 8002fea:	4413      	add	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	211f      	movs	r1, #31
 8002ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffe:	43db      	mvns	r3, r3
 8003000:	401a      	ands	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	0e9b      	lsrs	r3, r3, #26
 8003006:	f003 011f 	and.w	r1, r3, #31
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	fa01 f303 	lsl.w	r3, r1, r3
 8003014:	431a      	orrs	r2, r3
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800301a:	bf00      	nop
 800301c:	371c      	adds	r7, #28
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003026:	b480      	push	{r7}
 8003028:	b087      	sub	sp, #28
 800302a:	af00      	add	r7, sp, #0
 800302c:	60f8      	str	r0, [r7, #12]
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	3314      	adds	r3, #20
 8003036:	461a      	mov	r2, r3
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	0e5b      	lsrs	r3, r3, #25
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	4413      	add	r3, r2
 8003044:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	0d1b      	lsrs	r3, r3, #20
 800304e:	f003 031f 	and.w	r3, r3, #31
 8003052:	2107      	movs	r1, #7
 8003054:	fa01 f303 	lsl.w	r3, r1, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	401a      	ands	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	0d1b      	lsrs	r3, r3, #20
 8003060:	f003 031f 	and.w	r3, r3, #31
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	fa01 f303 	lsl.w	r3, r1, r3
 800306a:	431a      	orrs	r2, r3
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003070:	bf00      	nop
 8003072:	371c      	adds	r7, #28
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003094:	43db      	mvns	r3, r3
 8003096:	401a      	ands	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f003 0318 	and.w	r3, r3, #24
 800309e:	4908      	ldr	r1, [pc, #32]	; (80030c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80030a0:	40d9      	lsrs	r1, r3
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	400b      	ands	r3, r1
 80030a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030aa:	431a      	orrs	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80030b2:	bf00      	nop
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	000fffff 	.word	0x000fffff

080030c4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 031f 	and.w	r3, r3, #31
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	4b04      	ldr	r3, [pc, #16]	; (800311c <LL_ADC_DisableDeepPowerDown+0x20>)
 800310a:	4013      	ands	r3, r2
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6093      	str	r3, [r2, #8]
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	5fffffc0 	.word	0x5fffffc0

08003120 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003130:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003134:	d101      	bne.n	800313a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	4b05      	ldr	r3, [pc, #20]	; (800316c <LL_ADC_EnableInternalRegulator+0x24>)
 8003156:	4013      	ands	r3, r2
 8003158:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	6fffffc0 	.word	0x6fffffc0

08003170 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003180:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003184:	d101      	bne.n	800318a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	4b05      	ldr	r3, [pc, #20]	; (80031bc <LL_ADC_Enable+0x24>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	f043 0201 	orr.w	r2, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	7fffffc0 	.word	0x7fffffc0

080031c0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <LL_ADC_Disable+0x24>)
 80031ce:	4013      	ands	r3, r2
 80031d0:	f043 0202 	orr.w	r2, r3, #2
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	7fffffc0 	.word	0x7fffffc0

080031e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <LL_ADC_IsEnabled+0x18>
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <LL_ADC_IsEnabled+0x1a>
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b02      	cmp	r3, #2
 8003220:	d101      	bne.n	8003226 <LL_ADC_IsDisableOngoing+0x18>
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <LL_ADC_IsDisableOngoing+0x1a>
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	4b05      	ldr	r3, [pc, #20]	; (8003258 <LL_ADC_REG_StartConversion+0x24>)
 8003242:	4013      	ands	r3, r2
 8003244:	f043 0204 	orr.w	r2, r3, #4
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	7fffffc0 	.word	0x7fffffc0

0800325c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <LL_ADC_REG_StopConversion+0x24>)
 800326a:	4013      	ands	r3, r2
 800326c:	f043 0210 	orr.w	r2, r3, #16
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	7fffffc0 	.word	0x7fffffc0

08003284 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b04      	cmp	r3, #4
 8003296:	d101      	bne.n	800329c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <LL_ADC_INJ_StopConversion+0x24>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	f043 0220 	orr.w	r2, r3, #32
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	7fffffc0 	.word	0x7fffffc0

080032d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 0308 	and.w	r3, r3, #8
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d101      	bne.n	80032ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80032e8:	2301      	movs	r3, #1
 80032ea:	e000      	b.n	80032ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
	...

080032fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032fc:	b590      	push	{r4, r7, lr}
 80032fe:	b089      	sub	sp, #36	; 0x24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003308:	2300      	movs	r3, #0
 800330a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e18e      	b.n	8003634 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003320:	2b00      	cmp	r3, #0
 8003322:	d109      	bne.n	8003338 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff f8fb 	bl	8002520 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff feef 	bl	8003120 <LL_ADC_IsDeepPowerDownEnabled>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d004      	beq.n	8003352 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff fed5 	bl	80030fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff ff0a 	bl	8003170 <LL_ADC_IsInternalRegulatorEnabled>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d114      	bne.n	800338c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff feee 	bl	8003148 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800336c:	4b9a      	ldr	r3, [pc, #616]	; (80035d8 <HAL_ADC_Init+0x2dc>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	099b      	lsrs	r3, r3, #6
 8003372:	4a9a      	ldr	r2, [pc, #616]	; (80035dc <HAL_ADC_Init+0x2e0>)
 8003374:	fba2 2303 	umull	r2, r3, r2, r3
 8003378:	099b      	lsrs	r3, r3, #6
 800337a:	3301      	adds	r3, #1
 800337c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800337e:	e002      	b.n	8003386 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	3b01      	subs	r3, #1
 8003384:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1f9      	bne.n	8003380 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff feed 	bl	8003170 <LL_ADC_IsInternalRegulatorEnabled>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10d      	bne.n	80033b8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a0:	f043 0210 	orr.w	r2, r3, #16
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ac:	f043 0201 	orr.w	r2, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff ff61 	bl	8003284 <LL_ADC_REG_IsConversionOngoing>
 80033c2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c8:	f003 0310 	and.w	r3, r3, #16
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f040 8128 	bne.w	8003622 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f040 8124 	bne.w	8003622 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033de:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80033e2:	f043 0202 	orr.w	r2, r3, #2
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff fefa 	bl	80031e8 <LL_ADC_IsEnabled>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d136      	bne.n	8003468 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a78      	ldr	r2, [pc, #480]	; (80035e0 <HAL_ADC_Init+0x2e4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d004      	beq.n	800340e <HAL_ADC_Init+0x112>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a76      	ldr	r2, [pc, #472]	; (80035e4 <HAL_ADC_Init+0x2e8>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d10e      	bne.n	800342c <HAL_ADC_Init+0x130>
 800340e:	4874      	ldr	r0, [pc, #464]	; (80035e0 <HAL_ADC_Init+0x2e4>)
 8003410:	f7ff feea 	bl	80031e8 <LL_ADC_IsEnabled>
 8003414:	4604      	mov	r4, r0
 8003416:	4873      	ldr	r0, [pc, #460]	; (80035e4 <HAL_ADC_Init+0x2e8>)
 8003418:	f7ff fee6 	bl	80031e8 <LL_ADC_IsEnabled>
 800341c:	4603      	mov	r3, r0
 800341e:	4323      	orrs	r3, r4
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf0c      	ite	eq
 8003424:	2301      	moveq	r3, #1
 8003426:	2300      	movne	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	e008      	b.n	800343e <HAL_ADC_Init+0x142>
 800342c:	486e      	ldr	r0, [pc, #440]	; (80035e8 <HAL_ADC_Init+0x2ec>)
 800342e:	f7ff fedb 	bl	80031e8 <LL_ADC_IsEnabled>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	bf0c      	ite	eq
 8003438:	2301      	moveq	r3, #1
 800343a:	2300      	movne	r3, #0
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d012      	beq.n	8003468 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a66      	ldr	r2, [pc, #408]	; (80035e0 <HAL_ADC_Init+0x2e4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d004      	beq.n	8003456 <HAL_ADC_Init+0x15a>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a64      	ldr	r2, [pc, #400]	; (80035e4 <HAL_ADC_Init+0x2e8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d101      	bne.n	800345a <HAL_ADC_Init+0x15e>
 8003456:	4a65      	ldr	r2, [pc, #404]	; (80035ec <HAL_ADC_Init+0x2f0>)
 8003458:	e000      	b.n	800345c <HAL_ADC_Init+0x160>
 800345a:	4a65      	ldr	r2, [pc, #404]	; (80035f0 <HAL_ADC_Init+0x2f4>)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	4619      	mov	r1, r3
 8003462:	4610      	mov	r0, r2
 8003464:	f7ff fd18 	bl	8002e98 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003468:	f7ff fcf4 	bl	8002e54 <HAL_GetREVID>
 800346c:	4603      	mov	r3, r0
 800346e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003472:	4293      	cmp	r3, r2
 8003474:	d914      	bls.n	80034a0 <HAL_ADC_Init+0x1a4>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b10      	cmp	r3, #16
 800347c:	d110      	bne.n	80034a0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	7d5b      	ldrb	r3, [r3, #21]
 8003482:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003488:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800348e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	7f1b      	ldrb	r3, [r3, #28]
 8003494:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003496:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003498:	f043 030c 	orr.w	r3, r3, #12
 800349c:	61bb      	str	r3, [r7, #24]
 800349e:	e00d      	b.n	80034bc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	7d5b      	ldrb	r3, [r3, #21]
 80034a4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034aa:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80034b0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	7f1b      	ldrb	r3, [r3, #28]
 80034b6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034b8:	4313      	orrs	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	7f1b      	ldrb	r3, [r3, #28]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d106      	bne.n	80034d2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	3b01      	subs	r3, #1
 80034ca:	045b      	lsls	r3, r3, #17
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d009      	beq.n	80034ee <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	4b3f      	ldr	r3, [pc, #252]	; (80035f4 <HAL_ADC_Init+0x2f8>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6812      	ldr	r2, [r2, #0]
 80034fc:	69b9      	ldr	r1, [r7, #24]
 80034fe:	430b      	orrs	r3, r1
 8003500:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff febc 	bl	8003284 <LL_ADC_REG_IsConversionOngoing>
 800350c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff fede 	bl	80032d4 <LL_ADC_INJ_IsConversionOngoing>
 8003518:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d14a      	bne.n	80035b6 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d147      	bne.n	80035b6 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	7d1b      	ldrb	r3, [r3, #20]
 800352a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003530:	4313      	orrs	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	4b2f      	ldr	r3, [pc, #188]	; (80035f8 <HAL_ADC_Init+0x2fc>)
 800353c:	4013      	ands	r3, r2
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6812      	ldr	r2, [r2, #0]
 8003542:	69b9      	ldr	r1, [r7, #24]
 8003544:	430b      	orrs	r3, r1
 8003546:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800354e:	2b01      	cmp	r3, #1
 8003550:	d11b      	bne.n	800358a <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	691a      	ldr	r2, [r3, #16]
 800355e:	4b27      	ldr	r3, [pc, #156]	; (80035fc <HAL_ADC_Init+0x300>)
 8003560:	4013      	ands	r3, r2
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003566:	3a01      	subs	r2, #1
 8003568:	0411      	lsls	r1, r2, #16
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800356e:	4311      	orrs	r1, r2
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003574:	4311      	orrs	r1, r2
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800357a:	430a      	orrs	r2, r1
 800357c:	431a      	orrs	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0201 	orr.w	r2, r2, #1
 8003586:	611a      	str	r2, [r3, #16]
 8003588:	e007      	b.n	800359a <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0201 	bic.w	r2, r2, #1
 8003598:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 ff39 	bl	8004428 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d120      	bne.n	8003600 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c4:	f023 010f 	bic.w	r1, r3, #15
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	1e5a      	subs	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	631a      	str	r2, [r3, #48]	; 0x30
 80035d6:	e01b      	b.n	8003610 <HAL_ADC_Init+0x314>
 80035d8:	24000014 	.word	0x24000014
 80035dc:	053e2d63 	.word	0x053e2d63
 80035e0:	40022000 	.word	0x40022000
 80035e4:	40022100 	.word	0x40022100
 80035e8:	58026000 	.word	0x58026000
 80035ec:	40022300 	.word	0x40022300
 80035f0:	58026300 	.word	0x58026300
 80035f4:	fff0c003 	.word	0xfff0c003
 80035f8:	ffffbffc 	.word	0xffffbffc
 80035fc:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 020f 	bic.w	r2, r2, #15
 800360e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003614:	f023 0303 	bic.w	r3, r3, #3
 8003618:	f043 0201 	orr.w	r2, r3, #1
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	655a      	str	r2, [r3, #84]	; 0x54
 8003620:	e007      	b.n	8003632 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003626:	f043 0210 	orr.w	r2, r3, #16
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003632:	7ffb      	ldrb	r3, [r7, #31]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3724      	adds	r7, #36	; 0x24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd90      	pop	{r4, r7, pc}

0800363c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a5c      	ldr	r2, [pc, #368]	; (80037bc <HAL_ADC_Start+0x180>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d004      	beq.n	8003658 <HAL_ADC_Start+0x1c>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a5b      	ldr	r2, [pc, #364]	; (80037c0 <HAL_ADC_Start+0x184>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d101      	bne.n	800365c <HAL_ADC_Start+0x20>
 8003658:	4b5a      	ldr	r3, [pc, #360]	; (80037c4 <HAL_ADC_Start+0x188>)
 800365a:	e000      	b.n	800365e <HAL_ADC_Start+0x22>
 800365c:	4b5a      	ldr	r3, [pc, #360]	; (80037c8 <HAL_ADC_Start+0x18c>)
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff fd30 	bl	80030c4 <LL_ADC_GetMultimode>
 8003664:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff fe0a 	bl	8003284 <LL_ADC_REG_IsConversionOngoing>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	f040 809a 	bne.w	80037ac <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <HAL_ADC_Start+0x4a>
 8003682:	2302      	movs	r3, #2
 8003684:	e095      	b.n	80037b2 <HAL_ADC_Start+0x176>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 fde0 	bl	8004254 <ADC_Enable>
 8003694:	4603      	mov	r3, r0
 8003696:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003698:	7dfb      	ldrb	r3, [r7, #23]
 800369a:	2b00      	cmp	r3, #0
 800369c:	f040 8081 	bne.w	80037a2 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036a4:	4b49      	ldr	r3, [pc, #292]	; (80037cc <HAL_ADC_Start+0x190>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a42      	ldr	r2, [pc, #264]	; (80037c0 <HAL_ADC_Start+0x184>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d002      	beq.n	80036c0 <HAL_ADC_Start+0x84>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	e000      	b.n	80036c2 <HAL_ADC_Start+0x86>
 80036c0:	4b3e      	ldr	r3, [pc, #248]	; (80037bc <HAL_ADC_Start+0x180>)
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6812      	ldr	r2, [r2, #0]
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d002      	beq.n	80036d0 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d105      	bne.n	80036dc <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e8:	d106      	bne.n	80036f8 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ee:	f023 0206 	bic.w	r2, r3, #6
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	659a      	str	r2, [r3, #88]	; 0x58
 80036f6:	e002      	b.n	80036fe <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	221c      	movs	r2, #28
 8003704:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a2b      	ldr	r2, [pc, #172]	; (80037c0 <HAL_ADC_Start+0x184>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d002      	beq.n	800371e <HAL_ADC_Start+0xe2>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	e000      	b.n	8003720 <HAL_ADC_Start+0xe4>
 800371e:	4b27      	ldr	r3, [pc, #156]	; (80037bc <HAL_ADC_Start+0x180>)
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6812      	ldr	r2, [r2, #0]
 8003724:	4293      	cmp	r3, r2
 8003726:	d008      	beq.n	800373a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	2b05      	cmp	r3, #5
 8003732:	d002      	beq.n	800373a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	2b09      	cmp	r3, #9
 8003738:	d114      	bne.n	8003764 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d007      	beq.n	8003758 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003750:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff fd69 	bl	8003234 <LL_ADC_REG_StartConversion>
 8003762:	e025      	b.n	80037b0 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003768:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a12      	ldr	r2, [pc, #72]	; (80037c0 <HAL_ADC_Start+0x184>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d002      	beq.n	8003780 <HAL_ADC_Start+0x144>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	e000      	b.n	8003782 <HAL_ADC_Start+0x146>
 8003780:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <HAL_ADC_Start+0x180>)
 8003782:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00f      	beq.n	80037b0 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003794:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003798:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	655a      	str	r2, [r3, #84]	; 0x54
 80037a0:	e006      	b.n	80037b0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80037aa:	e001      	b.n	80037b0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80037ac:	2302      	movs	r3, #2
 80037ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80037b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40022000 	.word	0x40022000
 80037c0:	40022100 	.word	0x40022100
 80037c4:	40022300 	.word	0x40022300
 80037c8:	58026300 	.word	0x58026300
 80037cc:	fffff0fe 	.word	0xfffff0fe

080037d0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d101      	bne.n	80037e6 <HAL_ADC_Stop+0x16>
 80037e2:	2302      	movs	r3, #2
 80037e4:	e021      	b.n	800382a <HAL_ADC_Stop+0x5a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80037ee:	2103      	movs	r1, #3
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 fc73 	bl	80040dc <ADC_ConversionStop>
 80037f6:	4603      	mov	r3, r0
 80037f8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10f      	bne.n	8003820 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 fdb1 	bl	8004368 <ADC_Disable>
 8003806:	4603      	mov	r3, r0
 8003808:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800380a:	7bfb      	ldrb	r3, [r7, #15]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d107      	bne.n	8003820 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003814:	4b07      	ldr	r3, [pc, #28]	; (8003834 <HAL_ADC_Stop+0x64>)
 8003816:	4013      	ands	r3, r2
 8003818:	f043 0201 	orr.w	r2, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003828:	7bfb      	ldrb	r3, [r7, #15]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	ffffeefe 	.word	0xffffeefe

08003838 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b088      	sub	sp, #32
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a72      	ldr	r2, [pc, #456]	; (8003a10 <HAL_ADC_PollForConversion+0x1d8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d004      	beq.n	8003856 <HAL_ADC_PollForConversion+0x1e>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a70      	ldr	r2, [pc, #448]	; (8003a14 <HAL_ADC_PollForConversion+0x1dc>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d101      	bne.n	800385a <HAL_ADC_PollForConversion+0x22>
 8003856:	4b70      	ldr	r3, [pc, #448]	; (8003a18 <HAL_ADC_PollForConversion+0x1e0>)
 8003858:	e000      	b.n	800385c <HAL_ADC_PollForConversion+0x24>
 800385a:	4b70      	ldr	r3, [pc, #448]	; (8003a1c <HAL_ADC_PollForConversion+0x1e4>)
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff fc31 	bl	80030c4 <LL_ADC_GetMultimode>
 8003862:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	2b08      	cmp	r3, #8
 800386a:	d102      	bne.n	8003872 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800386c:	2308      	movs	r3, #8
 800386e:	61fb      	str	r3, [r7, #28]
 8003870:	e037      	b.n	80038e2 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	2b05      	cmp	r3, #5
 800387c:	d002      	beq.n	8003884 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2b09      	cmp	r3, #9
 8003882:	d111      	bne.n	80038a8 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d007      	beq.n	80038a2 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003896:	f043 0220 	orr.w	r2, r3, #32
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e0b1      	b.n	8003a06 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80038a2:	2304      	movs	r3, #4
 80038a4:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80038a6:	e01c      	b.n	80038e2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a58      	ldr	r2, [pc, #352]	; (8003a10 <HAL_ADC_PollForConversion+0x1d8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d004      	beq.n	80038bc <HAL_ADC_PollForConversion+0x84>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a57      	ldr	r2, [pc, #348]	; (8003a14 <HAL_ADC_PollForConversion+0x1dc>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d101      	bne.n	80038c0 <HAL_ADC_PollForConversion+0x88>
 80038bc:	4b56      	ldr	r3, [pc, #344]	; (8003a18 <HAL_ADC_PollForConversion+0x1e0>)
 80038be:	e000      	b.n	80038c2 <HAL_ADC_PollForConversion+0x8a>
 80038c0:	4b56      	ldr	r3, [pc, #344]	; (8003a1c <HAL_ADC_PollForConversion+0x1e4>)
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff fc0c 	bl	80030e0 <LL_ADC_GetMultiDMATransfer>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d007      	beq.n	80038de <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d2:	f043 0220 	orr.w	r2, r3, #32
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e093      	b.n	8003a06 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80038de:	2304      	movs	r3, #4
 80038e0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80038e2:	f7ff fa87 	bl	8002df4 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80038e8:	e021      	b.n	800392e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f0:	d01d      	beq.n	800392e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80038f2:	f7ff fa7f 	bl	8002df4 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d302      	bcc.n	8003908 <HAL_ADC_PollForConversion+0xd0>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d112      	bne.n	800392e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	4013      	ands	r3, r2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10b      	bne.n	800392e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391a:	f043 0204 	orr.w	r2, r3, #4
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e06b      	b.n	8003a06 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	4013      	ands	r3, r2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0d6      	beq.n	80038ea <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003940:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff fb2b 	bl	8002fa8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d01c      	beq.n	8003992 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	7d5b      	ldrb	r3, [r3, #21]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d118      	bne.n	8003992 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b08      	cmp	r3, #8
 800396c:	d111      	bne.n	8003992 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003972:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d105      	bne.n	8003992 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398a:	f043 0201 	orr.w	r2, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a1f      	ldr	r2, [pc, #124]	; (8003a14 <HAL_ADC_PollForConversion+0x1dc>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d002      	beq.n	80039a2 <HAL_ADC_PollForConversion+0x16a>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	e000      	b.n	80039a4 <HAL_ADC_PollForConversion+0x16c>
 80039a2:	4b1b      	ldr	r3, [pc, #108]	; (8003a10 <HAL_ADC_PollForConversion+0x1d8>)
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d008      	beq.n	80039be <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d005      	beq.n	80039be <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2b05      	cmp	r3, #5
 80039b6:	d002      	beq.n	80039be <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2b09      	cmp	r3, #9
 80039bc:	d104      	bne.n	80039c8 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	61bb      	str	r3, [r7, #24]
 80039c6:	e00c      	b.n	80039e2 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a11      	ldr	r2, [pc, #68]	; (8003a14 <HAL_ADC_PollForConversion+0x1dc>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d002      	beq.n	80039d8 <HAL_ADC_PollForConversion+0x1a0>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	e000      	b.n	80039da <HAL_ADC_PollForConversion+0x1a2>
 80039d8:	4b0d      	ldr	r3, [pc, #52]	; (8003a10 <HAL_ADC_PollForConversion+0x1d8>)
 80039da:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d104      	bne.n	80039f2 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2208      	movs	r2, #8
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	e008      	b.n	8003a04 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d103      	bne.n	8003a04 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	220c      	movs	r2, #12
 8003a02:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3720      	adds	r7, #32
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40022000 	.word	0x40022000
 8003a14:	40022100 	.word	0x40022100
 8003a18:	40022300 	.word	0x40022300
 8003a1c:	58026300 	.word	0x58026300

08003a20 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
	...

08003a3c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a3c:	b590      	push	{r4, r7, lr}
 8003a3e:	b0a1      	sub	sp, #132	; 0x84
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4a9d      	ldr	r2, [pc, #628]	; (8003ccc <HAL_ADC_ConfigChannel+0x290>)
 8003a56:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_ADC_ConfigChannel+0x2a>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e321      	b.n	80040aa <HAL_ADC_ConfigChannel+0x66e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff fc06 	bl	8003284 <LL_ADC_REG_IsConversionOngoing>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f040 8306 	bne.w	800408c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d108      	bne.n	8003a9e <HAL_ADC_ConfigChannel+0x62>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	0e9b      	lsrs	r3, r3, #26
 8003a92:	f003 031f 	and.w	r3, r3, #31
 8003a96:	2201      	movs	r2, #1
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	e016      	b.n	8003acc <HAL_ADC_ConfigChannel+0x90>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003aa6:	fa93 f3a3 	rbit	r3, r3
 8003aaa:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003aac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003aae:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003ab0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003ab6:	2320      	movs	r3, #32
 8003ab8:	e003      	b.n	8003ac2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003aba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003abc:	fab3 f383 	clz	r3, r3
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	f003 031f 	and.w	r3, r3, #31
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6812      	ldr	r2, [r2, #0]
 8003ad0:	69d1      	ldr	r1, [r2, #28]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6812      	ldr	r2, [r2, #0]
 8003ad6:	430b      	orrs	r3, r1
 8003ad8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6818      	ldr	r0, [r3, #0]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	6859      	ldr	r1, [r3, #4]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f7ff fa71 	bl	8002fce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff fbc7 	bl	8003284 <LL_ADC_REG_IsConversionOngoing>
 8003af6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff fbe9 	bl	80032d4 <LL_ADC_INJ_IsConversionOngoing>
 8003b02:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f040 80b3 	bne.w	8003c72 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f040 80af 	bne.w	8003c72 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6818      	ldr	r0, [r3, #0]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	6819      	ldr	r1, [r3, #0]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	461a      	mov	r2, r3
 8003b22:	f7ff fa80 	bl	8003026 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b26:	4b6a      	ldr	r3, [pc, #424]	; (8003cd0 <HAL_ADC_ConfigChannel+0x294>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003b2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b32:	d10b      	bne.n	8003b4c <HAL_ADC_ConfigChannel+0x110>
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	695a      	ldr	r2, [r3, #20]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	089b      	lsrs	r3, r3, #2
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	e01d      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x14c>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0310 	and.w	r3, r3, #16
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10b      	bne.n	8003b72 <HAL_ADC_ConfigChannel+0x136>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	695a      	ldr	r2, [r3, #20]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	089b      	lsrs	r3, r3, #2
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	e00a      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x14c>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	695a      	ldr	r2, [r3, #20]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	089b      	lsrs	r3, r3, #2
 8003b7e:	f003 0304 	and.w	r3, r3, #4
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d027      	beq.n	8003be2 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6919      	ldr	r1, [r3, #16]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ba0:	f7ff f9ae 	bl	8002f00 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6818      	ldr	r0, [r3, #0]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	6919      	ldr	r1, [r3, #16]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	7e5b      	ldrb	r3, [r3, #25]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d102      	bne.n	8003bba <HAL_ADC_ConfigChannel+0x17e>
 8003bb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003bb8:	e000      	b.n	8003bbc <HAL_ADC_ConfigChannel+0x180>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f7ff f9d8 	bl	8002f72 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	6919      	ldr	r1, [r3, #16]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	7e1b      	ldrb	r3, [r3, #24]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d102      	bne.n	8003bd8 <HAL_ADC_ConfigChannel+0x19c>
 8003bd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003bd6:	e000      	b.n	8003bda <HAL_ADC_ConfigChannel+0x19e>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	461a      	mov	r2, r3
 8003bdc:	f7ff f9b0 	bl	8002f40 <LL_ADC_SetDataRightShift>
 8003be0:	e047      	b.n	8003c72 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	069b      	lsls	r3, r3, #26
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d107      	bne.n	8003c06 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c04:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	069b      	lsls	r3, r3, #26
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d107      	bne.n	8003c2a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c28:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	069b      	lsls	r3, r3, #26
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d107      	bne.n	8003c4e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c4c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	069b      	lsls	r3, r3, #26
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d107      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c70:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff fab6 	bl	80031e8 <LL_ADC_IsEnabled>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f040 820d 	bne.w	800409e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6818      	ldr	r0, [r3, #0]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	6819      	ldr	r1, [r3, #0]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	461a      	mov	r2, r3
 8003c92:	f7ff f9f3 	bl	800307c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	4a0c      	ldr	r2, [pc, #48]	; (8003ccc <HAL_ADC_ConfigChannel+0x290>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	f040 8133 	bne.w	8003f08 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d110      	bne.n	8003cd4 <HAL_ADC_ConfigChannel+0x298>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	0e9b      	lsrs	r3, r3, #26
 8003cb8:	3301      	adds	r3, #1
 8003cba:	f003 031f 	and.w	r3, r3, #31
 8003cbe:	2b09      	cmp	r3, #9
 8003cc0:	bf94      	ite	ls
 8003cc2:	2301      	movls	r3, #1
 8003cc4:	2300      	movhi	r3, #0
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	e01e      	b.n	8003d08 <HAL_ADC_ConfigChannel+0x2cc>
 8003cca:	bf00      	nop
 8003ccc:	47ff0000 	.word	0x47ff0000
 8003cd0:	5c001000 	.word	0x5c001000
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cdc:	fa93 f3a3 	rbit	r3, r3
 8003ce0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003cec:	2320      	movs	r3, #32
 8003cee:	e003      	b.n	8003cf8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cf2:	fab3 f383 	clz	r3, r3
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	f003 031f 	and.w	r3, r3, #31
 8003cfe:	2b09      	cmp	r3, #9
 8003d00:	bf94      	ite	ls
 8003d02:	2301      	movls	r3, #1
 8003d04:	2300      	movhi	r3, #0
 8003d06:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d079      	beq.n	8003e00 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d107      	bne.n	8003d28 <HAL_ADC_ConfigChannel+0x2ec>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	0e9b      	lsrs	r3, r3, #26
 8003d1e:	3301      	adds	r3, #1
 8003d20:	069b      	lsls	r3, r3, #26
 8003d22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d26:	e015      	b.n	8003d54 <HAL_ADC_ConfigChannel+0x318>
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d30:	fa93 f3a3 	rbit	r3, r3
 8003d34:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d38:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003d40:	2320      	movs	r3, #32
 8003d42:	e003      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003d44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d46:	fab3 f383 	clz	r3, r3
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	069b      	lsls	r3, r3, #26
 8003d50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d109      	bne.n	8003d74 <HAL_ADC_ConfigChannel+0x338>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	0e9b      	lsrs	r3, r3, #26
 8003d66:	3301      	adds	r3, #1
 8003d68:	f003 031f 	and.w	r3, r3, #31
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d72:	e017      	b.n	8003da4 <HAL_ADC_ConfigChannel+0x368>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d7c:	fa93 f3a3 	rbit	r3, r3
 8003d80:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d84:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003d8c:	2320      	movs	r3, #32
 8003d8e:	e003      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d92:	fab3 f383 	clz	r3, r3
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	3301      	adds	r3, #1
 8003d9a:	f003 031f 	and.w	r3, r3, #31
 8003d9e:	2101      	movs	r1, #1
 8003da0:	fa01 f303 	lsl.w	r3, r1, r3
 8003da4:	ea42 0103 	orr.w	r1, r2, r3
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10a      	bne.n	8003dca <HAL_ADC_ConfigChannel+0x38e>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	0e9b      	lsrs	r3, r3, #26
 8003dba:	3301      	adds	r3, #1
 8003dbc:	f003 021f 	and.w	r2, r3, #31
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	4413      	add	r3, r2
 8003dc6:	051b      	lsls	r3, r3, #20
 8003dc8:	e018      	b.n	8003dfc <HAL_ADC_ConfigChannel+0x3c0>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd2:	fa93 f3a3 	rbit	r3, r3
 8003dd6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dda:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003de2:	2320      	movs	r3, #32
 8003de4:	e003      	b.n	8003dee <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de8:	fab3 f383 	clz	r3, r3
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	3301      	adds	r3, #1
 8003df0:	f003 021f 	and.w	r2, r3, #31
 8003df4:	4613      	mov	r3, r2
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	4413      	add	r3, r2
 8003dfa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dfc:	430b      	orrs	r3, r1
 8003dfe:	e07e      	b.n	8003efe <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d107      	bne.n	8003e1c <HAL_ADC_ConfigChannel+0x3e0>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	0e9b      	lsrs	r3, r3, #26
 8003e12:	3301      	adds	r3, #1
 8003e14:	069b      	lsls	r3, r3, #26
 8003e16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e1a:	e015      	b.n	8003e48 <HAL_ADC_ConfigChannel+0x40c>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e24:	fa93 f3a3 	rbit	r3, r3
 8003e28:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003e34:	2320      	movs	r3, #32
 8003e36:	e003      	b.n	8003e40 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3a:	fab3 f383 	clz	r3, r3
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	3301      	adds	r3, #1
 8003e42:	069b      	lsls	r3, r3, #26
 8003e44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d109      	bne.n	8003e68 <HAL_ADC_ConfigChannel+0x42c>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	0e9b      	lsrs	r3, r3, #26
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	f003 031f 	and.w	r3, r3, #31
 8003e60:	2101      	movs	r1, #1
 8003e62:	fa01 f303 	lsl.w	r3, r1, r3
 8003e66:	e017      	b.n	8003e98 <HAL_ADC_ConfigChannel+0x45c>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	fa93 f3a3 	rbit	r3, r3
 8003e74:	61bb      	str	r3, [r7, #24]
  return result;
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003e80:	2320      	movs	r3, #32
 8003e82:	e003      	b.n	8003e8c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	fab3 f383 	clz	r3, r3
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	f003 031f 	and.w	r3, r3, #31
 8003e92:	2101      	movs	r1, #1
 8003e94:	fa01 f303 	lsl.w	r3, r1, r3
 8003e98:	ea42 0103 	orr.w	r1, r2, r3
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10d      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x488>
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	0e9b      	lsrs	r3, r3, #26
 8003eae:	3301      	adds	r3, #1
 8003eb0:	f003 021f 	and.w	r2, r3, #31
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	4413      	add	r3, r2
 8003eba:	3b1e      	subs	r3, #30
 8003ebc:	051b      	lsls	r3, r3, #20
 8003ebe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ec2:	e01b      	b.n	8003efc <HAL_ADC_ConfigChannel+0x4c0>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	fa93 f3a3 	rbit	r3, r3
 8003ed0:	60fb      	str	r3, [r7, #12]
  return result;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003edc:	2320      	movs	r3, #32
 8003ede:	e003      	b.n	8003ee8 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	fab3 f383 	clz	r3, r3
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	3301      	adds	r3, #1
 8003eea:	f003 021f 	and.w	r2, r3, #31
 8003eee:	4613      	mov	r3, r2
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	4413      	add	r3, r2
 8003ef4:	3b1e      	subs	r3, #30
 8003ef6:	051b      	lsls	r3, r3, #20
 8003ef8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003efc:	430b      	orrs	r3, r1
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	6892      	ldr	r2, [r2, #8]
 8003f02:	4619      	mov	r1, r3
 8003f04:	f7ff f88f 	bl	8003026 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f280 80c6 	bge.w	800409e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a67      	ldr	r2, [pc, #412]	; (80040b4 <HAL_ADC_ConfigChannel+0x678>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d004      	beq.n	8003f26 <HAL_ADC_ConfigChannel+0x4ea>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a65      	ldr	r2, [pc, #404]	; (80040b8 <HAL_ADC_ConfigChannel+0x67c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d101      	bne.n	8003f2a <HAL_ADC_ConfigChannel+0x4ee>
 8003f26:	4b65      	ldr	r3, [pc, #404]	; (80040bc <HAL_ADC_ConfigChannel+0x680>)
 8003f28:	e000      	b.n	8003f2c <HAL_ADC_ConfigChannel+0x4f0>
 8003f2a:	4b65      	ldr	r3, [pc, #404]	; (80040c0 <HAL_ADC_ConfigChannel+0x684>)
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fe ffd9 	bl	8002ee4 <LL_ADC_GetCommonPathInternalCh>
 8003f32:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a5e      	ldr	r2, [pc, #376]	; (80040b4 <HAL_ADC_ConfigChannel+0x678>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d004      	beq.n	8003f48 <HAL_ADC_ConfigChannel+0x50c>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a5d      	ldr	r2, [pc, #372]	; (80040b8 <HAL_ADC_ConfigChannel+0x67c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d10e      	bne.n	8003f66 <HAL_ADC_ConfigChannel+0x52a>
 8003f48:	485a      	ldr	r0, [pc, #360]	; (80040b4 <HAL_ADC_ConfigChannel+0x678>)
 8003f4a:	f7ff f94d 	bl	80031e8 <LL_ADC_IsEnabled>
 8003f4e:	4604      	mov	r4, r0
 8003f50:	4859      	ldr	r0, [pc, #356]	; (80040b8 <HAL_ADC_ConfigChannel+0x67c>)
 8003f52:	f7ff f949 	bl	80031e8 <LL_ADC_IsEnabled>
 8003f56:	4603      	mov	r3, r0
 8003f58:	4323      	orrs	r3, r4
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	bf0c      	ite	eq
 8003f5e:	2301      	moveq	r3, #1
 8003f60:	2300      	movne	r3, #0
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	e008      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x53c>
 8003f66:	4857      	ldr	r0, [pc, #348]	; (80040c4 <HAL_ADC_ConfigChannel+0x688>)
 8003f68:	f7ff f93e 	bl	80031e8 <LL_ADC_IsEnabled>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	bf0c      	ite	eq
 8003f72:	2301      	moveq	r3, #1
 8003f74:	2300      	movne	r3, #0
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d07d      	beq.n	8004078 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a51      	ldr	r2, [pc, #324]	; (80040c8 <HAL_ADC_ConfigChannel+0x68c>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d130      	bne.n	8003fe8 <HAL_ADC_ConfigChannel+0x5ac>
 8003f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d12b      	bne.n	8003fe8 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a4b      	ldr	r2, [pc, #300]	; (80040c4 <HAL_ADC_ConfigChannel+0x688>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	f040 8081 	bne.w	800409e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a44      	ldr	r2, [pc, #272]	; (80040b4 <HAL_ADC_ConfigChannel+0x678>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d004      	beq.n	8003fb0 <HAL_ADC_ConfigChannel+0x574>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a43      	ldr	r2, [pc, #268]	; (80040b8 <HAL_ADC_ConfigChannel+0x67c>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d101      	bne.n	8003fb4 <HAL_ADC_ConfigChannel+0x578>
 8003fb0:	4a42      	ldr	r2, [pc, #264]	; (80040bc <HAL_ADC_ConfigChannel+0x680>)
 8003fb2:	e000      	b.n	8003fb6 <HAL_ADC_ConfigChannel+0x57a>
 8003fb4:	4a42      	ldr	r2, [pc, #264]	; (80040c0 <HAL_ADC_ConfigChannel+0x684>)
 8003fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	f7fe ff7d 	bl	8002ebe <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fc4:	4b41      	ldr	r3, [pc, #260]	; (80040cc <HAL_ADC_ConfigChannel+0x690>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	099b      	lsrs	r3, r3, #6
 8003fca:	4a41      	ldr	r2, [pc, #260]	; (80040d0 <HAL_ADC_ConfigChannel+0x694>)
 8003fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd0:	099b      	lsrs	r3, r3, #6
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003fd8:	e002      	b.n	8003fe0 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1f9      	bne.n	8003fda <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fe6:	e05a      	b.n	800409e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a39      	ldr	r2, [pc, #228]	; (80040d4 <HAL_ADC_ConfigChannel+0x698>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d11e      	bne.n	8004030 <HAL_ADC_ConfigChannel+0x5f4>
 8003ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d119      	bne.n	8004030 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a30      	ldr	r2, [pc, #192]	; (80040c4 <HAL_ADC_ConfigChannel+0x688>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d14b      	bne.n	800409e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a2a      	ldr	r2, [pc, #168]	; (80040b4 <HAL_ADC_ConfigChannel+0x678>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d004      	beq.n	800401a <HAL_ADC_ConfigChannel+0x5de>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a28      	ldr	r2, [pc, #160]	; (80040b8 <HAL_ADC_ConfigChannel+0x67c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d101      	bne.n	800401e <HAL_ADC_ConfigChannel+0x5e2>
 800401a:	4a28      	ldr	r2, [pc, #160]	; (80040bc <HAL_ADC_ConfigChannel+0x680>)
 800401c:	e000      	b.n	8004020 <HAL_ADC_ConfigChannel+0x5e4>
 800401e:	4a28      	ldr	r2, [pc, #160]	; (80040c0 <HAL_ADC_ConfigChannel+0x684>)
 8004020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004022:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004026:	4619      	mov	r1, r3
 8004028:	4610      	mov	r0, r2
 800402a:	f7fe ff48 	bl	8002ebe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800402e:	e036      	b.n	800409e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a28      	ldr	r2, [pc, #160]	; (80040d8 <HAL_ADC_ConfigChannel+0x69c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d131      	bne.n	800409e <HAL_ADC_ConfigChannel+0x662>
 800403a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800403c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d12c      	bne.n	800409e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a1e      	ldr	r2, [pc, #120]	; (80040c4 <HAL_ADC_ConfigChannel+0x688>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d127      	bne.n	800409e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a18      	ldr	r2, [pc, #96]	; (80040b4 <HAL_ADC_ConfigChannel+0x678>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d004      	beq.n	8004062 <HAL_ADC_ConfigChannel+0x626>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a16      	ldr	r2, [pc, #88]	; (80040b8 <HAL_ADC_ConfigChannel+0x67c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d101      	bne.n	8004066 <HAL_ADC_ConfigChannel+0x62a>
 8004062:	4a16      	ldr	r2, [pc, #88]	; (80040bc <HAL_ADC_ConfigChannel+0x680>)
 8004064:	e000      	b.n	8004068 <HAL_ADC_ConfigChannel+0x62c>
 8004066:	4a16      	ldr	r2, [pc, #88]	; (80040c0 <HAL_ADC_ConfigChannel+0x684>)
 8004068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800406a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800406e:	4619      	mov	r1, r3
 8004070:	4610      	mov	r0, r2
 8004072:	f7fe ff24 	bl	8002ebe <LL_ADC_SetCommonPathInternalCh>
 8004076:	e012      	b.n	800409e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407c:	f043 0220 	orr.w	r2, r3, #32
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800408a:	e008      	b.n	800409e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004090:	f043 0220 	orr.w	r2, r3, #32
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80040a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3784      	adds	r7, #132	; 0x84
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd90      	pop	{r4, r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40022000 	.word	0x40022000
 80040b8:	40022100 	.word	0x40022100
 80040bc:	40022300 	.word	0x40022300
 80040c0:	58026300 	.word	0x58026300
 80040c4:	58026000 	.word	0x58026000
 80040c8:	cb840000 	.word	0xcb840000
 80040cc:	24000014 	.word	0x24000014
 80040d0:	053e2d63 	.word	0x053e2d63
 80040d4:	c7520000 	.word	0xc7520000
 80040d8:	cfb80000 	.word	0xcfb80000

080040dc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80040e6:	2300      	movs	r3, #0
 80040e8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff f8c6 	bl	8003284 <LL_ADC_REG_IsConversionOngoing>
 80040f8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff f8e8 	bl	80032d4 <LL_ADC_INJ_IsConversionOngoing>
 8004104:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d103      	bne.n	8004114 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 8098 	beq.w	8004244 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d02a      	beq.n	8004178 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	7d5b      	ldrb	r3, [r3, #21]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d126      	bne.n	8004178 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	7d1b      	ldrb	r3, [r3, #20]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d122      	bne.n	8004178 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004132:	2301      	movs	r3, #1
 8004134:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004136:	e014      	b.n	8004162 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	4a45      	ldr	r2, [pc, #276]	; (8004250 <ADC_ConversionStop+0x174>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d90d      	bls.n	800415c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004144:	f043 0210 	orr.w	r2, r3, #16
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004150:	f043 0201 	orr.w	r2, r3, #1
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e074      	b.n	8004246 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	3301      	adds	r3, #1
 8004160:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416c:	2b40      	cmp	r3, #64	; 0x40
 800416e:	d1e3      	bne.n	8004138 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2240      	movs	r2, #64	; 0x40
 8004176:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d014      	beq.n	80041a8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff f87e 	bl	8003284 <LL_ADC_REG_IsConversionOngoing>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00c      	beq.n	80041a8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff f83b 	bl	800320e <LL_ADC_IsDisableOngoing>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d104      	bne.n	80041a8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff f85a 	bl	800325c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d014      	beq.n	80041d8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff f88e 	bl	80032d4 <LL_ADC_INJ_IsConversionOngoing>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00c      	beq.n	80041d8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff f823 	bl	800320e <LL_ADC_IsDisableOngoing>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d104      	bne.n	80041d8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff f86a 	bl	80032ac <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d005      	beq.n	80041ea <ADC_ConversionStop+0x10e>
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	2b03      	cmp	r3, #3
 80041e2:	d105      	bne.n	80041f0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80041e4:	230c      	movs	r3, #12
 80041e6:	617b      	str	r3, [r7, #20]
        break;
 80041e8:	e005      	b.n	80041f6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80041ea:	2308      	movs	r3, #8
 80041ec:	617b      	str	r3, [r7, #20]
        break;
 80041ee:	e002      	b.n	80041f6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80041f0:	2304      	movs	r3, #4
 80041f2:	617b      	str	r3, [r7, #20]
        break;
 80041f4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80041f6:	f7fe fdfd 	bl	8002df4 <HAL_GetTick>
 80041fa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80041fc:	e01b      	b.n	8004236 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80041fe:	f7fe fdf9 	bl	8002df4 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b05      	cmp	r3, #5
 800420a:	d914      	bls.n	8004236 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	4013      	ands	r3, r2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00d      	beq.n	8004236 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421e:	f043 0210 	orr.w	r2, r3, #16
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422a:	f043 0201 	orr.w	r2, r3, #1
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e007      	b.n	8004246 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	4013      	ands	r3, r2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1dc      	bne.n	80041fe <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3720      	adds	r7, #32
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	000cdbff 	.word	0x000cdbff

08004254 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4618      	mov	r0, r3
 8004262:	f7fe ffc1 	bl	80031e8 <LL_ADC_IsEnabled>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d16e      	bne.n	800434a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689a      	ldr	r2, [r3, #8]
 8004272:	4b38      	ldr	r3, [pc, #224]	; (8004354 <ADC_Enable+0x100>)
 8004274:	4013      	ands	r3, r2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00d      	beq.n	8004296 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427e:	f043 0210 	orr.w	r2, r3, #16
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428a:	f043 0201 	orr.w	r2, r3, #1
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e05a      	b.n	800434c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f7fe ff7c 	bl	8003198 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80042a0:	f7fe fda8 	bl	8002df4 <HAL_GetTick>
 80042a4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a2b      	ldr	r2, [pc, #172]	; (8004358 <ADC_Enable+0x104>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d004      	beq.n	80042ba <ADC_Enable+0x66>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a29      	ldr	r2, [pc, #164]	; (800435c <ADC_Enable+0x108>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d101      	bne.n	80042be <ADC_Enable+0x6a>
 80042ba:	4b29      	ldr	r3, [pc, #164]	; (8004360 <ADC_Enable+0x10c>)
 80042bc:	e000      	b.n	80042c0 <ADC_Enable+0x6c>
 80042be:	4b29      	ldr	r3, [pc, #164]	; (8004364 <ADC_Enable+0x110>)
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fe feff 	bl	80030c4 <LL_ADC_GetMultimode>
 80042c6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a23      	ldr	r2, [pc, #140]	; (800435c <ADC_Enable+0x108>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d002      	beq.n	80042d8 <ADC_Enable+0x84>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	e000      	b.n	80042da <ADC_Enable+0x86>
 80042d8:	4b1f      	ldr	r3, [pc, #124]	; (8004358 <ADC_Enable+0x104>)
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6812      	ldr	r2, [r2, #0]
 80042de:	4293      	cmp	r3, r2
 80042e0:	d02c      	beq.n	800433c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d130      	bne.n	800434a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042e8:	e028      	b.n	800433c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fe ff7a 	bl	80031e8 <LL_ADC_IsEnabled>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d104      	bne.n	8004304 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fe ff4a 	bl	8003198 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004304:	f7fe fd76 	bl	8002df4 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d914      	bls.n	800433c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b01      	cmp	r3, #1
 800431e:	d00d      	beq.n	800433c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004324:	f043 0210 	orr.w	r2, r3, #16
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004330:	f043 0201 	orr.w	r2, r3, #1
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e007      	b.n	800434c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b01      	cmp	r3, #1
 8004348:	d1cf      	bne.n	80042ea <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	8000003f 	.word	0x8000003f
 8004358:	40022000 	.word	0x40022000
 800435c:	40022100 	.word	0x40022100
 8004360:	40022300 	.word	0x40022300
 8004364:	58026300 	.word	0x58026300

08004368 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f7fe ff4a 	bl	800320e <LL_ADC_IsDisableOngoing>
 800437a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	f7fe ff31 	bl	80031e8 <LL_ADC_IsEnabled>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d047      	beq.n	800441c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d144      	bne.n	800441c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 030d 	and.w	r3, r3, #13
 800439c:	2b01      	cmp	r3, #1
 800439e:	d10c      	bne.n	80043ba <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fe ff0b 	bl	80031c0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2203      	movs	r2, #3
 80043b0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80043b2:	f7fe fd1f 	bl	8002df4 <HAL_GetTick>
 80043b6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80043b8:	e029      	b.n	800440e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043be:	f043 0210 	orr.w	r2, r3, #16
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ca:	f043 0201 	orr.w	r2, r3, #1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e023      	b.n	800441e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80043d6:	f7fe fd0d 	bl	8002df4 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d914      	bls.n	800440e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00d      	beq.n	800440e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f6:	f043 0210 	orr.w	r2, r3, #16
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004402:	f043 0201 	orr.w	r2, r3, #1
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e007      	b.n	800441e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1dc      	bne.n	80043d6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a79      	ldr	r2, [pc, #484]	; (800461c <ADC_ConfigureBoostMode+0x1f4>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d004      	beq.n	8004444 <ADC_ConfigureBoostMode+0x1c>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a78      	ldr	r2, [pc, #480]	; (8004620 <ADC_ConfigureBoostMode+0x1f8>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d109      	bne.n	8004458 <ADC_ConfigureBoostMode+0x30>
 8004444:	4b77      	ldr	r3, [pc, #476]	; (8004624 <ADC_ConfigureBoostMode+0x1fc>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800444c:	2b00      	cmp	r3, #0
 800444e:	bf14      	ite	ne
 8004450:	2301      	movne	r3, #1
 8004452:	2300      	moveq	r3, #0
 8004454:	b2db      	uxtb	r3, r3
 8004456:	e008      	b.n	800446a <ADC_ConfigureBoostMode+0x42>
 8004458:	4b73      	ldr	r3, [pc, #460]	; (8004628 <ADC_ConfigureBoostMode+0x200>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004460:	2b00      	cmp	r3, #0
 8004462:	bf14      	ite	ne
 8004464:	2301      	movne	r3, #1
 8004466:	2300      	moveq	r3, #0
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d01c      	beq.n	80044a8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800446e:	f002 f953 	bl	8006718 <HAL_RCC_GetHCLKFreq>
 8004472:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800447c:	d010      	beq.n	80044a0 <ADC_ConfigureBoostMode+0x78>
 800447e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004482:	d871      	bhi.n	8004568 <ADC_ConfigureBoostMode+0x140>
 8004484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004488:	d002      	beq.n	8004490 <ADC_ConfigureBoostMode+0x68>
 800448a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800448e:	d16b      	bne.n	8004568 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	0c1b      	lsrs	r3, r3, #16
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	fbb2 f3f3 	udiv	r3, r2, r3
 800449c:	60fb      	str	r3, [r7, #12]
        break;
 800449e:	e066      	b.n	800456e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	089b      	lsrs	r3, r3, #2
 80044a4:	60fb      	str	r3, [r7, #12]
        break;
 80044a6:	e062      	b.n	800456e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80044a8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80044ac:	f003 f8d0 	bl	8007650 <HAL_RCCEx_GetPeriphCLKFreq>
 80044b0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80044ba:	d051      	beq.n	8004560 <ADC_ConfigureBoostMode+0x138>
 80044bc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80044c0:	d854      	bhi.n	800456c <ADC_ConfigureBoostMode+0x144>
 80044c2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80044c6:	d047      	beq.n	8004558 <ADC_ConfigureBoostMode+0x130>
 80044c8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80044cc:	d84e      	bhi.n	800456c <ADC_ConfigureBoostMode+0x144>
 80044ce:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80044d2:	d03d      	beq.n	8004550 <ADC_ConfigureBoostMode+0x128>
 80044d4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80044d8:	d848      	bhi.n	800456c <ADC_ConfigureBoostMode+0x144>
 80044da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044de:	d033      	beq.n	8004548 <ADC_ConfigureBoostMode+0x120>
 80044e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044e4:	d842      	bhi.n	800456c <ADC_ConfigureBoostMode+0x144>
 80044e6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80044ea:	d029      	beq.n	8004540 <ADC_ConfigureBoostMode+0x118>
 80044ec:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80044f0:	d83c      	bhi.n	800456c <ADC_ConfigureBoostMode+0x144>
 80044f2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80044f6:	d01a      	beq.n	800452e <ADC_ConfigureBoostMode+0x106>
 80044f8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80044fc:	d836      	bhi.n	800456c <ADC_ConfigureBoostMode+0x144>
 80044fe:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004502:	d014      	beq.n	800452e <ADC_ConfigureBoostMode+0x106>
 8004504:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004508:	d830      	bhi.n	800456c <ADC_ConfigureBoostMode+0x144>
 800450a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800450e:	d00e      	beq.n	800452e <ADC_ConfigureBoostMode+0x106>
 8004510:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004514:	d82a      	bhi.n	800456c <ADC_ConfigureBoostMode+0x144>
 8004516:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800451a:	d008      	beq.n	800452e <ADC_ConfigureBoostMode+0x106>
 800451c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004520:	d824      	bhi.n	800456c <ADC_ConfigureBoostMode+0x144>
 8004522:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004526:	d002      	beq.n	800452e <ADC_ConfigureBoostMode+0x106>
 8004528:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800452c:	d11e      	bne.n	800456c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	0c9b      	lsrs	r3, r3, #18
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	fbb2 f3f3 	udiv	r3, r2, r3
 800453c:	60fb      	str	r3, [r7, #12]
        break;
 800453e:	e016      	b.n	800456e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	091b      	lsrs	r3, r3, #4
 8004544:	60fb      	str	r3, [r7, #12]
        break;
 8004546:	e012      	b.n	800456e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	60fb      	str	r3, [r7, #12]
        break;
 800454e:	e00e      	b.n	800456e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	099b      	lsrs	r3, r3, #6
 8004554:	60fb      	str	r3, [r7, #12]
        break;
 8004556:	e00a      	b.n	800456e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	09db      	lsrs	r3, r3, #7
 800455c:	60fb      	str	r3, [r7, #12]
        break;
 800455e:	e006      	b.n	800456e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	0a1b      	lsrs	r3, r3, #8
 8004564:	60fb      	str	r3, [r7, #12]
        break;
 8004566:	e002      	b.n	800456e <ADC_ConfigureBoostMode+0x146>
        break;
 8004568:	bf00      	nop
 800456a:	e000      	b.n	800456e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 800456c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800456e:	f7fe fc71 	bl	8002e54 <HAL_GetREVID>
 8004572:	4603      	mov	r3, r0
 8004574:	f241 0203 	movw	r2, #4099	; 0x1003
 8004578:	4293      	cmp	r3, r2
 800457a:	d815      	bhi.n	80045a8 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4a2b      	ldr	r2, [pc, #172]	; (800462c <ADC_ConfigureBoostMode+0x204>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d908      	bls.n	8004596 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689a      	ldr	r2, [r3, #8]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004592:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004594:	e03e      	b.n	8004614 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045a4:	609a      	str	r2, [r3, #8]
}
 80045a6:	e035      	b.n	8004614 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	085b      	lsrs	r3, r3, #1
 80045ac:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4a1f      	ldr	r2, [pc, #124]	; (8004630 <ADC_ConfigureBoostMode+0x208>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d808      	bhi.n	80045c8 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80045c4:	609a      	str	r2, [r3, #8]
}
 80045c6:	e025      	b.n	8004614 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4a1a      	ldr	r2, [pc, #104]	; (8004634 <ADC_ConfigureBoostMode+0x20c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d80a      	bhi.n	80045e6 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045e2:	609a      	str	r2, [r3, #8]
}
 80045e4:	e016      	b.n	8004614 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	4a13      	ldr	r2, [pc, #76]	; (8004638 <ADC_ConfigureBoostMode+0x210>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d80a      	bhi.n	8004604 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004600:	609a      	str	r2, [r3, #8]
}
 8004602:	e007      	b.n	8004614 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004612:	609a      	str	r2, [r3, #8]
}
 8004614:	bf00      	nop
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40022000 	.word	0x40022000
 8004620:	40022100 	.word	0x40022100
 8004624:	40022300 	.word	0x40022300
 8004628:	58026300 	.word	0x58026300
 800462c:	01312d00 	.word	0x01312d00
 8004630:	005f5e10 	.word	0x005f5e10
 8004634:	00bebc20 	.word	0x00bebc20
 8004638:	017d7840 	.word	0x017d7840

0800463c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800464c:	4b0b      	ldr	r3, [pc, #44]	; (800467c <__NVIC_SetPriorityGrouping+0x40>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004658:	4013      	ands	r3, r2
 800465a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004664:	4b06      	ldr	r3, [pc, #24]	; (8004680 <__NVIC_SetPriorityGrouping+0x44>)
 8004666:	4313      	orrs	r3, r2
 8004668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800466a:	4a04      	ldr	r2, [pc, #16]	; (800467c <__NVIC_SetPriorityGrouping+0x40>)
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	60d3      	str	r3, [r2, #12]
}
 8004670:	bf00      	nop
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	e000ed00 	.word	0xe000ed00
 8004680:	05fa0000 	.word	0x05fa0000

08004684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004688:	4b04      	ldr	r3, [pc, #16]	; (800469c <__NVIC_GetPriorityGrouping+0x18>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	0a1b      	lsrs	r3, r3, #8
 800468e:	f003 0307 	and.w	r3, r3, #7
}
 8004692:	4618      	mov	r0, r3
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	e000ed00 	.word	0xe000ed00

080046a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	4603      	mov	r3, r0
 80046a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80046aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	db0b      	blt.n	80046ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046b2:	88fb      	ldrh	r3, [r7, #6]
 80046b4:	f003 021f 	and.w	r2, r3, #31
 80046b8:	4907      	ldr	r1, [pc, #28]	; (80046d8 <__NVIC_EnableIRQ+0x38>)
 80046ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046be:	095b      	lsrs	r3, r3, #5
 80046c0:	2001      	movs	r0, #1
 80046c2:	fa00 f202 	lsl.w	r2, r0, r2
 80046c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	e000e100 	.word	0xe000e100

080046dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	6039      	str	r1, [r7, #0]
 80046e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80046e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	db0a      	blt.n	8004706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	490c      	ldr	r1, [pc, #48]	; (8004728 <__NVIC_SetPriority+0x4c>)
 80046f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046fa:	0112      	lsls	r2, r2, #4
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	440b      	add	r3, r1
 8004700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004704:	e00a      	b.n	800471c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	b2da      	uxtb	r2, r3
 800470a:	4908      	ldr	r1, [pc, #32]	; (800472c <__NVIC_SetPriority+0x50>)
 800470c:	88fb      	ldrh	r3, [r7, #6]
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	3b04      	subs	r3, #4
 8004714:	0112      	lsls	r2, r2, #4
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	440b      	add	r3, r1
 800471a:	761a      	strb	r2, [r3, #24]
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	e000e100 	.word	0xe000e100
 800472c:	e000ed00 	.word	0xe000ed00

08004730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004730:	b480      	push	{r7}
 8004732:	b089      	sub	sp, #36	; 0x24
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	f1c3 0307 	rsb	r3, r3, #7
 800474a:	2b04      	cmp	r3, #4
 800474c:	bf28      	it	cs
 800474e:	2304      	movcs	r3, #4
 8004750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	3304      	adds	r3, #4
 8004756:	2b06      	cmp	r3, #6
 8004758:	d902      	bls.n	8004760 <NVIC_EncodePriority+0x30>
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	3b03      	subs	r3, #3
 800475e:	e000      	b.n	8004762 <NVIC_EncodePriority+0x32>
 8004760:	2300      	movs	r3, #0
 8004762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004764:	f04f 32ff 	mov.w	r2, #4294967295
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	fa02 f303 	lsl.w	r3, r2, r3
 800476e:	43da      	mvns	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	401a      	ands	r2, r3
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004778:	f04f 31ff 	mov.w	r1, #4294967295
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	fa01 f303 	lsl.w	r3, r1, r3
 8004782:	43d9      	mvns	r1, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004788:	4313      	orrs	r3, r2
         );
}
 800478a:	4618      	mov	r0, r3
 800478c:	3724      	adds	r7, #36	; 0x24
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
	...

08004798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047a8:	d301      	bcc.n	80047ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047aa:	2301      	movs	r3, #1
 80047ac:	e00f      	b.n	80047ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047ae:	4a0a      	ldr	r2, [pc, #40]	; (80047d8 <SysTick_Config+0x40>)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047b6:	210f      	movs	r1, #15
 80047b8:	f04f 30ff 	mov.w	r0, #4294967295
 80047bc:	f7ff ff8e 	bl	80046dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047c0:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <SysTick_Config+0x40>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047c6:	4b04      	ldr	r3, [pc, #16]	; (80047d8 <SysTick_Config+0x40>)
 80047c8:	2207      	movs	r2, #7
 80047ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	e000e010 	.word	0xe000e010

080047dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff ff29 	bl	800463c <__NVIC_SetPriorityGrouping>
}
 80047ea:	bf00      	nop
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b086      	sub	sp, #24
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	4603      	mov	r3, r0
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	607a      	str	r2, [r7, #4]
 80047fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004800:	f7ff ff40 	bl	8004684 <__NVIC_GetPriorityGrouping>
 8004804:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	68b9      	ldr	r1, [r7, #8]
 800480a:	6978      	ldr	r0, [r7, #20]
 800480c:	f7ff ff90 	bl	8004730 <NVIC_EncodePriority>
 8004810:	4602      	mov	r2, r0
 8004812:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004816:	4611      	mov	r1, r2
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff ff5f 	bl	80046dc <__NVIC_SetPriority>
}
 800481e:	bf00      	nop
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b082      	sub	sp, #8
 800482a:	af00      	add	r7, sp, #0
 800482c:	4603      	mov	r3, r0
 800482e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004830:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff ff33 	bl	80046a0 <__NVIC_EnableIRQ>
}
 800483a:	bf00      	nop
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b082      	sub	sp, #8
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7ff ffa4 	bl	8004798 <SysTick_Config>
 8004850:	4603      	mov	r3, r0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800485c:	b480      	push	{r7}
 800485e:	b089      	sub	sp, #36	; 0x24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004866:	2300      	movs	r3, #0
 8004868:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800486a:	4b89      	ldr	r3, [pc, #548]	; (8004a90 <HAL_GPIO_Init+0x234>)
 800486c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800486e:	e194      	b.n	8004b9a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	2101      	movs	r1, #1
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	fa01 f303 	lsl.w	r3, r1, r3
 800487c:	4013      	ands	r3, r2
 800487e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 8186 	beq.w	8004b94 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f003 0303 	and.w	r3, r3, #3
 8004890:	2b01      	cmp	r3, #1
 8004892:	d005      	beq.n	80048a0 <HAL_GPIO_Init+0x44>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f003 0303 	and.w	r3, r3, #3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d130      	bne.n	8004902 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	2203      	movs	r2, #3
 80048ac:	fa02 f303 	lsl.w	r3, r2, r3
 80048b0:	43db      	mvns	r3, r3
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	4013      	ands	r3, r2
 80048b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048d6:	2201      	movs	r2, #1
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	43db      	mvns	r3, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4013      	ands	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	091b      	lsrs	r3, r3, #4
 80048ec:	f003 0201 	and.w	r2, r3, #1
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	2b03      	cmp	r3, #3
 800490c:	d017      	beq.n	800493e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	2203      	movs	r2, #3
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	43db      	mvns	r3, r3
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	4013      	ands	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	4313      	orrs	r3, r2
 8004936:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d123      	bne.n	8004992 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	08da      	lsrs	r2, r3, #3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3208      	adds	r2, #8
 8004952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	220f      	movs	r2, #15
 8004962:	fa02 f303 	lsl.w	r3, r2, r3
 8004966:	43db      	mvns	r3, r3
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4013      	ands	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	691a      	ldr	r2, [r3, #16]
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	4313      	orrs	r3, r2
 8004982:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	08da      	lsrs	r2, r3, #3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3208      	adds	r2, #8
 800498c:	69b9      	ldr	r1, [r7, #24]
 800498e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	2203      	movs	r2, #3
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	43db      	mvns	r3, r3
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	4013      	ands	r3, r2
 80049a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f003 0203 	and.w	r2, r3, #3
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	4313      	orrs	r3, r2
 80049be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 80e0 	beq.w	8004b94 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049d4:	4b2f      	ldr	r3, [pc, #188]	; (8004a94 <HAL_GPIO_Init+0x238>)
 80049d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80049da:	4a2e      	ldr	r2, [pc, #184]	; (8004a94 <HAL_GPIO_Init+0x238>)
 80049dc:	f043 0302 	orr.w	r3, r3, #2
 80049e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80049e4:	4b2b      	ldr	r3, [pc, #172]	; (8004a94 <HAL_GPIO_Init+0x238>)
 80049e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049f2:	4a29      	ldr	r2, [pc, #164]	; (8004a98 <HAL_GPIO_Init+0x23c>)
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	089b      	lsrs	r3, r3, #2
 80049f8:	3302      	adds	r3, #2
 80049fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	220f      	movs	r2, #15
 8004a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0e:	43db      	mvns	r3, r3
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	4013      	ands	r3, r2
 8004a14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a20      	ldr	r2, [pc, #128]	; (8004a9c <HAL_GPIO_Init+0x240>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d052      	beq.n	8004ac4 <HAL_GPIO_Init+0x268>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a1f      	ldr	r2, [pc, #124]	; (8004aa0 <HAL_GPIO_Init+0x244>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d031      	beq.n	8004a8a <HAL_GPIO_Init+0x22e>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a1e      	ldr	r2, [pc, #120]	; (8004aa4 <HAL_GPIO_Init+0x248>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d02b      	beq.n	8004a86 <HAL_GPIO_Init+0x22a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a1d      	ldr	r2, [pc, #116]	; (8004aa8 <HAL_GPIO_Init+0x24c>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d025      	beq.n	8004a82 <HAL_GPIO_Init+0x226>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a1c      	ldr	r2, [pc, #112]	; (8004aac <HAL_GPIO_Init+0x250>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d01f      	beq.n	8004a7e <HAL_GPIO_Init+0x222>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a1b      	ldr	r2, [pc, #108]	; (8004ab0 <HAL_GPIO_Init+0x254>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d019      	beq.n	8004a7a <HAL_GPIO_Init+0x21e>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a1a      	ldr	r2, [pc, #104]	; (8004ab4 <HAL_GPIO_Init+0x258>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d013      	beq.n	8004a76 <HAL_GPIO_Init+0x21a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a19      	ldr	r2, [pc, #100]	; (8004ab8 <HAL_GPIO_Init+0x25c>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00d      	beq.n	8004a72 <HAL_GPIO_Init+0x216>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a18      	ldr	r2, [pc, #96]	; (8004abc <HAL_GPIO_Init+0x260>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d007      	beq.n	8004a6e <HAL_GPIO_Init+0x212>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a17      	ldr	r2, [pc, #92]	; (8004ac0 <HAL_GPIO_Init+0x264>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d101      	bne.n	8004a6a <HAL_GPIO_Init+0x20e>
 8004a66:	2309      	movs	r3, #9
 8004a68:	e02d      	b.n	8004ac6 <HAL_GPIO_Init+0x26a>
 8004a6a:	230a      	movs	r3, #10
 8004a6c:	e02b      	b.n	8004ac6 <HAL_GPIO_Init+0x26a>
 8004a6e:	2308      	movs	r3, #8
 8004a70:	e029      	b.n	8004ac6 <HAL_GPIO_Init+0x26a>
 8004a72:	2307      	movs	r3, #7
 8004a74:	e027      	b.n	8004ac6 <HAL_GPIO_Init+0x26a>
 8004a76:	2306      	movs	r3, #6
 8004a78:	e025      	b.n	8004ac6 <HAL_GPIO_Init+0x26a>
 8004a7a:	2305      	movs	r3, #5
 8004a7c:	e023      	b.n	8004ac6 <HAL_GPIO_Init+0x26a>
 8004a7e:	2304      	movs	r3, #4
 8004a80:	e021      	b.n	8004ac6 <HAL_GPIO_Init+0x26a>
 8004a82:	2303      	movs	r3, #3
 8004a84:	e01f      	b.n	8004ac6 <HAL_GPIO_Init+0x26a>
 8004a86:	2302      	movs	r3, #2
 8004a88:	e01d      	b.n	8004ac6 <HAL_GPIO_Init+0x26a>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e01b      	b.n	8004ac6 <HAL_GPIO_Init+0x26a>
 8004a8e:	bf00      	nop
 8004a90:	58000080 	.word	0x58000080
 8004a94:	58024400 	.word	0x58024400
 8004a98:	58000400 	.word	0x58000400
 8004a9c:	58020000 	.word	0x58020000
 8004aa0:	58020400 	.word	0x58020400
 8004aa4:	58020800 	.word	0x58020800
 8004aa8:	58020c00 	.word	0x58020c00
 8004aac:	58021000 	.word	0x58021000
 8004ab0:	58021400 	.word	0x58021400
 8004ab4:	58021800 	.word	0x58021800
 8004ab8:	58021c00 	.word	0x58021c00
 8004abc:	58022000 	.word	0x58022000
 8004ac0:	58022400 	.word	0x58022400
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	69fa      	ldr	r2, [r7, #28]
 8004ac8:	f002 0203 	and.w	r2, r2, #3
 8004acc:	0092      	lsls	r2, r2, #2
 8004ace:	4093      	lsls	r3, r2
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ad6:	4938      	ldr	r1, [pc, #224]	; (8004bb8 <HAL_GPIO_Init+0x35c>)
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	089b      	lsrs	r3, r3, #2
 8004adc:	3302      	adds	r3, #2
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	43db      	mvns	r3, r3
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	4013      	ands	r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	4013      	ands	r3, r2
 8004b22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	43db      	mvns	r3, r3
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	4013      	ands	r3, r2
 8004b78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	3301      	adds	r3, #1
 8004b98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f47f ae63 	bne.w	8004870 <HAL_GPIO_Init+0x14>
  }
}
 8004baa:	bf00      	nop
 8004bac:	bf00      	nop
 8004bae:	3724      	adds	r7, #36	; 0x24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	58000400 	.word	0x58000400

08004bbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	691a      	ldr	r2, [r3, #16]
 8004bcc:	887b      	ldrh	r3, [r7, #2]
 8004bce:	4013      	ands	r3, r2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	73fb      	strb	r3, [r7, #15]
 8004bd8:	e001      	b.n	8004bde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	807b      	strh	r3, [r7, #2]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bfc:	787b      	ldrb	r3, [r7, #1]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c02:	887a      	ldrh	r2, [r7, #2]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004c08:	e003      	b.n	8004c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004c0a:	887b      	ldrh	r3, [r7, #2]
 8004c0c:	041a      	lsls	r2, r3, #16
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	619a      	str	r2, [r3, #24]
}
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
	...

08004c20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e07f      	b.n	8004d32 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fd fce6 	bl	8002618 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2224      	movs	r2, #36	; 0x24
 8004c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0201 	bic.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d107      	bne.n	8004c9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c96:	609a      	str	r2, [r3, #8]
 8004c98:	e006      	b.n	8004ca8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004ca6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d104      	bne.n	8004cba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6859      	ldr	r1, [r3, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	4b1d      	ldr	r3, [pc, #116]	; (8004d3c <HAL_I2C_Init+0x11c>)
 8004cc6:	430b      	orrs	r3, r1
 8004cc8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cd8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691a      	ldr	r2, [r3, #16]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	69d9      	ldr	r1, [r3, #28]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a1a      	ldr	r2, [r3, #32]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0201 	orr.w	r2, r2, #1
 8004d12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	02008000 	.word	0x02008000

08004d40 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b088      	sub	sp, #32
 8004d44:	af02      	add	r7, sp, #8
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	4608      	mov	r0, r1
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	4603      	mov	r3, r0
 8004d50:	817b      	strh	r3, [r7, #10]
 8004d52:	460b      	mov	r3, r1
 8004d54:	813b      	strh	r3, [r7, #8]
 8004d56:	4613      	mov	r3, r2
 8004d58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b20      	cmp	r3, #32
 8004d64:	f040 80f9 	bne.w	8004f5a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d002      	beq.n	8004d74 <HAL_I2C_Mem_Write+0x34>
 8004d6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d105      	bne.n	8004d80 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d7a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e0ed      	b.n	8004f5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <HAL_I2C_Mem_Write+0x4e>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e0e6      	b.n	8004f5c <HAL_I2C_Mem_Write+0x21c>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d96:	f7fe f82d 	bl	8002df4 <HAL_GetTick>
 8004d9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	2319      	movs	r3, #25
 8004da2:	2201      	movs	r2, #1
 8004da4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f000 f955 	bl	8005058 <I2C_WaitOnFlagUntilTimeout>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e0d1      	b.n	8004f5c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2221      	movs	r2, #33	; 0x21
 8004dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2240      	movs	r2, #64	; 0x40
 8004dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6a3a      	ldr	r2, [r7, #32]
 8004dd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004de0:	88f8      	ldrh	r0, [r7, #6]
 8004de2:	893a      	ldrh	r2, [r7, #8]
 8004de4:	8979      	ldrh	r1, [r7, #10]
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	9301      	str	r3, [sp, #4]
 8004dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	4603      	mov	r3, r0
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 f8b9 	bl	8004f68 <I2C_RequestMemoryWrite>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d005      	beq.n	8004e08 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e0a9      	b.n	8004f5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2bff      	cmp	r3, #255	; 0xff
 8004e10:	d90e      	bls.n	8004e30 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	22ff      	movs	r2, #255	; 0xff
 8004e16:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	8979      	ldrh	r1, [r7, #10]
 8004e20:	2300      	movs	r3, #0
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 fabd 	bl	80053a8 <I2C_TransferConfig>
 8004e2e:	e00f      	b.n	8004e50 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	8979      	ldrh	r1, [r7, #10]
 8004e42:	2300      	movs	r3, #0
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 faac 	bl	80053a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 f93f 	bl	80050d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e07b      	b.n	8004f5c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e68:	781a      	ldrb	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	1c5a      	adds	r2, r3, #1
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	3b01      	subs	r3, #1
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d034      	beq.n	8004f08 <HAL_I2C_Mem_Write+0x1c8>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d130      	bne.n	8004f08 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eac:	2200      	movs	r2, #0
 8004eae:	2180      	movs	r1, #128	; 0x80
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 f8d1 	bl	8005058 <I2C_WaitOnFlagUntilTimeout>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e04d      	b.n	8004f5c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	2bff      	cmp	r3, #255	; 0xff
 8004ec8:	d90e      	bls.n	8004ee8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	22ff      	movs	r2, #255	; 0xff
 8004ece:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	8979      	ldrh	r1, [r7, #10]
 8004ed8:	2300      	movs	r3, #0
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 fa61 	bl	80053a8 <I2C_TransferConfig>
 8004ee6:	e00f      	b.n	8004f08 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	8979      	ldrh	r1, [r7, #10]
 8004efa:	2300      	movs	r3, #0
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 fa50 	bl	80053a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d19e      	bne.n	8004e50 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 f91e 	bl	8005158 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e01a      	b.n	8004f5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6859      	ldr	r1, [r3, #4]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	4b0a      	ldr	r3, [pc, #40]	; (8004f64 <HAL_I2C_Mem_Write+0x224>)
 8004f3a:	400b      	ands	r3, r1
 8004f3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	e000      	b.n	8004f5c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004f5a:	2302      	movs	r3, #2
  }
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	fe00e800 	.word	0xfe00e800

08004f68 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af02      	add	r7, sp, #8
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	4608      	mov	r0, r1
 8004f72:	4611      	mov	r1, r2
 8004f74:	461a      	mov	r2, r3
 8004f76:	4603      	mov	r3, r0
 8004f78:	817b      	strh	r3, [r7, #10]
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	813b      	strh	r3, [r7, #8]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004f82:	88fb      	ldrh	r3, [r7, #6]
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	8979      	ldrh	r1, [r7, #10]
 8004f88:	4b20      	ldr	r3, [pc, #128]	; (800500c <I2C_RequestMemoryWrite+0xa4>)
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 fa09 	bl	80053a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f96:	69fa      	ldr	r2, [r7, #28]
 8004f98:	69b9      	ldr	r1, [r7, #24]
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 f89c 	bl	80050d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e02c      	b.n	8005004 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004faa:	88fb      	ldrh	r3, [r7, #6]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d105      	bne.n	8004fbc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fb0:	893b      	ldrh	r3, [r7, #8]
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	629a      	str	r2, [r3, #40]	; 0x28
 8004fba:	e015      	b.n	8004fe8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004fbc:	893b      	ldrh	r3, [r7, #8]
 8004fbe:	0a1b      	lsrs	r3, r3, #8
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fca:	69fa      	ldr	r2, [r7, #28]
 8004fcc:	69b9      	ldr	r1, [r7, #24]
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 f882 	bl	80050d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e012      	b.n	8005004 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fde:	893b      	ldrh	r3, [r7, #8]
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	2180      	movs	r1, #128	; 0x80
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 f830 	bl	8005058 <I2C_WaitOnFlagUntilTimeout>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	80002000 	.word	0x80002000

08005010 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b02      	cmp	r3, #2
 8005024:	d103      	bne.n	800502e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2200      	movs	r2, #0
 800502c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b01      	cmp	r3, #1
 800503a:	d007      	beq.n	800504c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	699a      	ldr	r2, [r3, #24]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	619a      	str	r2, [r3, #24]
  }
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	603b      	str	r3, [r7, #0]
 8005064:	4613      	mov	r3, r2
 8005066:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005068:	e022      	b.n	80050b0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005070:	d01e      	beq.n	80050b0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005072:	f7fd febf 	bl	8002df4 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	429a      	cmp	r2, r3
 8005080:	d302      	bcc.n	8005088 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d113      	bne.n	80050b0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508c:	f043 0220 	orr.w	r2, r3, #32
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2220      	movs	r2, #32
 8005098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e00f      	b.n	80050d0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	699a      	ldr	r2, [r3, #24]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	4013      	ands	r3, r2
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	429a      	cmp	r2, r3
 80050be:	bf0c      	ite	eq
 80050c0:	2301      	moveq	r3, #1
 80050c2:	2300      	movne	r3, #0
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	461a      	mov	r2, r3
 80050c8:	79fb      	ldrb	r3, [r7, #7]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d0cd      	beq.n	800506a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80050e4:	e02c      	b.n	8005140 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 f870 	bl	80051d0 <I2C_IsErrorOccurred>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e02a      	b.n	8005150 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005100:	d01e      	beq.n	8005140 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005102:	f7fd fe77 	bl	8002df4 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	429a      	cmp	r2, r3
 8005110:	d302      	bcc.n	8005118 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d113      	bne.n	8005140 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511c:	f043 0220 	orr.w	r2, r3, #32
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2220      	movs	r2, #32
 8005128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e007      	b.n	8005150 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b02      	cmp	r3, #2
 800514c:	d1cb      	bne.n	80050e6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005164:	e028      	b.n	80051b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	68b9      	ldr	r1, [r7, #8]
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 f830 	bl	80051d0 <I2C_IsErrorOccurred>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e026      	b.n	80051c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800517a:	f7fd fe3b 	bl	8002df4 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	429a      	cmp	r2, r3
 8005188:	d302      	bcc.n	8005190 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d113      	bne.n	80051b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005194:	f043 0220 	orr.w	r2, r3, #32
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2220      	movs	r2, #32
 80051a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e007      	b.n	80051c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	f003 0320 	and.w	r3, r3, #32
 80051c2:	2b20      	cmp	r3, #32
 80051c4:	d1cf      	bne.n	8005166 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b08a      	sub	sp, #40	; 0x28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051dc:	2300      	movs	r3, #0
 80051de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80051ea:	2300      	movs	r3, #0
 80051ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d075      	beq.n	80052e8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2210      	movs	r2, #16
 8005202:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005204:	e056      	b.n	80052b4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520c:	d052      	beq.n	80052b4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800520e:	f7fd fdf1 	bl	8002df4 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	429a      	cmp	r2, r3
 800521c:	d302      	bcc.n	8005224 <I2C_IsErrorOccurred+0x54>
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d147      	bne.n	80052b4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800522e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005236:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005246:	d12e      	bne.n	80052a6 <I2C_IsErrorOccurred+0xd6>
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800524e:	d02a      	beq.n	80052a6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005250:	7cfb      	ldrb	r3, [r7, #19]
 8005252:	2b20      	cmp	r3, #32
 8005254:	d027      	beq.n	80052a6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005264:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005266:	f7fd fdc5 	bl	8002df4 <HAL_GetTick>
 800526a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800526c:	e01b      	b.n	80052a6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800526e:	f7fd fdc1 	bl	8002df4 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b19      	cmp	r3, #25
 800527a:	d914      	bls.n	80052a6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005280:	f043 0220 	orr.w	r2, r3, #32
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2220      	movs	r2, #32
 800528c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	f003 0320 	and.w	r3, r3, #32
 80052b0:	2b20      	cmp	r3, #32
 80052b2:	d1dc      	bne.n	800526e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	f003 0320 	and.w	r3, r3, #32
 80052be:	2b20      	cmp	r3, #32
 80052c0:	d003      	beq.n	80052ca <I2C_IsErrorOccurred+0xfa>
 80052c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d09d      	beq.n	8005206 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80052ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d103      	bne.n	80052da <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2220      	movs	r2, #32
 80052d8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	f043 0304 	orr.w	r3, r3, #4
 80052e0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00b      	beq.n	8005312 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	f043 0301 	orr.w	r3, r3, #1
 8005300:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f44f 7280 	mov.w	r2, #256	; 0x100
 800530a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00b      	beq.n	8005334 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	f043 0308 	orr.w	r3, r3, #8
 8005322:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800532c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00b      	beq.n	8005356 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	f043 0302 	orr.w	r3, r3, #2
 8005344:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800534e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005356:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800535a:	2b00      	cmp	r3, #0
 800535c:	d01c      	beq.n	8005398 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f7ff fe56 	bl	8005010 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6859      	ldr	r1, [r3, #4]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	4b0d      	ldr	r3, [pc, #52]	; (80053a4 <I2C_IsErrorOccurred+0x1d4>)
 8005370:	400b      	ands	r3, r1
 8005372:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	431a      	orrs	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2220      	movs	r2, #32
 8005384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800539c:	4618      	mov	r0, r3
 800539e:	3728      	adds	r7, #40	; 0x28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	fe00e800 	.word	0xfe00e800

080053a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b087      	sub	sp, #28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	607b      	str	r3, [r7, #4]
 80053b2:	460b      	mov	r3, r1
 80053b4:	817b      	strh	r3, [r7, #10]
 80053b6:	4613      	mov	r3, r2
 80053b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053ba:	897b      	ldrh	r3, [r7, #10]
 80053bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80053c0:	7a7b      	ldrb	r3, [r7, #9]
 80053c2:	041b      	lsls	r3, r3, #16
 80053c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053c8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053d6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	0d5b      	lsrs	r3, r3, #21
 80053e2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80053e6:	4b08      	ldr	r3, [pc, #32]	; (8005408 <I2C_TransferConfig+0x60>)
 80053e8:	430b      	orrs	r3, r1
 80053ea:	43db      	mvns	r3, r3
 80053ec:	ea02 0103 	and.w	r1, r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80053fa:	bf00      	nop
 80053fc:	371c      	adds	r7, #28
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	03ff63ff 	.word	0x03ff63ff

0800540c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b20      	cmp	r3, #32
 8005420:	d138      	bne.n	8005494 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005428:	2b01      	cmp	r3, #1
 800542a:	d101      	bne.n	8005430 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800542c:	2302      	movs	r3, #2
 800542e:	e032      	b.n	8005496 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2224      	movs	r2, #36	; 0x24
 800543c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0201 	bic.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800545e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6819      	ldr	r1, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	430a      	orrs	r2, r1
 800546e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0201 	orr.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2220      	movs	r2, #32
 8005484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005490:	2300      	movs	r3, #0
 8005492:	e000      	b.n	8005496 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005494:	2302      	movs	r3, #2
  }
}
 8005496:	4618      	mov	r0, r3
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b085      	sub	sp, #20
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b20      	cmp	r3, #32
 80054b6:	d139      	bne.n	800552c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d101      	bne.n	80054c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80054c2:	2302      	movs	r3, #2
 80054c4:	e033      	b.n	800552e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2224      	movs	r2, #36	; 0x24
 80054d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 0201 	bic.w	r2, r2, #1
 80054e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80054f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	021b      	lsls	r3, r3, #8
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f042 0201 	orr.w	r2, r2, #1
 8005516:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2220      	movs	r2, #32
 800551c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005528:	2300      	movs	r3, #0
 800552a:	e000      	b.n	800552e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800552c:	2302      	movs	r3, #2
  }
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800553a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800553c:	b08f      	sub	sp, #60	; 0x3c
 800553e:	af0a      	add	r7, sp, #40	; 0x28
 8005540:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e116      	b.n	800577a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7fd fa1e 	bl	80029a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2203      	movs	r2, #3
 8005570:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557c:	2b00      	cmp	r3, #0
 800557e:	d102      	bne.n	8005586 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4618      	mov	r0, r3
 800558c:	f005 ffba 	bl	800b504 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	603b      	str	r3, [r7, #0]
 8005596:	687e      	ldr	r6, [r7, #4]
 8005598:	466d      	mov	r5, sp
 800559a:	f106 0410 	add.w	r4, r6, #16
 800559e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80055aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80055ae:	1d33      	adds	r3, r6, #4
 80055b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055b2:	6838      	ldr	r0, [r7, #0]
 80055b4:	f005 ff38 	bl	800b428 <USB_CoreInit>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d005      	beq.n	80055ca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2202      	movs	r2, #2
 80055c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e0d7      	b.n	800577a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2100      	movs	r1, #0
 80055d0:	4618      	mov	r0, r3
 80055d2:	f005 ffa8 	bl	800b526 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055d6:	2300      	movs	r3, #0
 80055d8:	73fb      	strb	r3, [r7, #15]
 80055da:	e04a      	b.n	8005672 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80055dc:	7bfa      	ldrb	r2, [r7, #15]
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	4613      	mov	r3, r2
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	1a9b      	subs	r3, r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	440b      	add	r3, r1
 80055ea:	333d      	adds	r3, #61	; 0x3d
 80055ec:	2201      	movs	r2, #1
 80055ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80055f0:	7bfa      	ldrb	r2, [r7, #15]
 80055f2:	6879      	ldr	r1, [r7, #4]
 80055f4:	4613      	mov	r3, r2
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	1a9b      	subs	r3, r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	440b      	add	r3, r1
 80055fe:	333c      	adds	r3, #60	; 0x3c
 8005600:	7bfa      	ldrb	r2, [r7, #15]
 8005602:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005604:	7bfa      	ldrb	r2, [r7, #15]
 8005606:	7bfb      	ldrb	r3, [r7, #15]
 8005608:	b298      	uxth	r0, r3
 800560a:	6879      	ldr	r1, [r7, #4]
 800560c:	4613      	mov	r3, r2
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	1a9b      	subs	r3, r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	440b      	add	r3, r1
 8005616:	3342      	adds	r3, #66	; 0x42
 8005618:	4602      	mov	r2, r0
 800561a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800561c:	7bfa      	ldrb	r2, [r7, #15]
 800561e:	6879      	ldr	r1, [r7, #4]
 8005620:	4613      	mov	r3, r2
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	1a9b      	subs	r3, r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	440b      	add	r3, r1
 800562a:	333f      	adds	r3, #63	; 0x3f
 800562c:	2200      	movs	r2, #0
 800562e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005630:	7bfa      	ldrb	r2, [r7, #15]
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	4613      	mov	r3, r2
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	1a9b      	subs	r3, r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	440b      	add	r3, r1
 800563e:	3344      	adds	r3, #68	; 0x44
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005644:	7bfa      	ldrb	r2, [r7, #15]
 8005646:	6879      	ldr	r1, [r7, #4]
 8005648:	4613      	mov	r3, r2
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	1a9b      	subs	r3, r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	440b      	add	r3, r1
 8005652:	3348      	adds	r3, #72	; 0x48
 8005654:	2200      	movs	r2, #0
 8005656:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005658:	7bfa      	ldrb	r2, [r7, #15]
 800565a:	6879      	ldr	r1, [r7, #4]
 800565c:	4613      	mov	r3, r2
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	1a9b      	subs	r3, r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	440b      	add	r3, r1
 8005666:	3350      	adds	r3, #80	; 0x50
 8005668:	2200      	movs	r2, #0
 800566a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800566c:	7bfb      	ldrb	r3, [r7, #15]
 800566e:	3301      	adds	r3, #1
 8005670:	73fb      	strb	r3, [r7, #15]
 8005672:	7bfa      	ldrb	r2, [r7, #15]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	429a      	cmp	r2, r3
 800567a:	d3af      	bcc.n	80055dc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800567c:	2300      	movs	r3, #0
 800567e:	73fb      	strb	r3, [r7, #15]
 8005680:	e044      	b.n	800570c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005682:	7bfa      	ldrb	r2, [r7, #15]
 8005684:	6879      	ldr	r1, [r7, #4]
 8005686:	4613      	mov	r3, r2
 8005688:	00db      	lsls	r3, r3, #3
 800568a:	1a9b      	subs	r3, r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	440b      	add	r3, r1
 8005690:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005694:	2200      	movs	r2, #0
 8005696:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005698:	7bfa      	ldrb	r2, [r7, #15]
 800569a:	6879      	ldr	r1, [r7, #4]
 800569c:	4613      	mov	r3, r2
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	1a9b      	subs	r3, r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	440b      	add	r3, r1
 80056a6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80056aa:	7bfa      	ldrb	r2, [r7, #15]
 80056ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80056ae:	7bfa      	ldrb	r2, [r7, #15]
 80056b0:	6879      	ldr	r1, [r7, #4]
 80056b2:	4613      	mov	r3, r2
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	1a9b      	subs	r3, r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	440b      	add	r3, r1
 80056bc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80056c0:	2200      	movs	r2, #0
 80056c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80056c4:	7bfa      	ldrb	r2, [r7, #15]
 80056c6:	6879      	ldr	r1, [r7, #4]
 80056c8:	4613      	mov	r3, r2
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	1a9b      	subs	r3, r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	440b      	add	r3, r1
 80056d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80056da:	7bfa      	ldrb	r2, [r7, #15]
 80056dc:	6879      	ldr	r1, [r7, #4]
 80056de:	4613      	mov	r3, r2
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	1a9b      	subs	r3, r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	440b      	add	r3, r1
 80056e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80056ec:	2200      	movs	r2, #0
 80056ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80056f0:	7bfa      	ldrb	r2, [r7, #15]
 80056f2:	6879      	ldr	r1, [r7, #4]
 80056f4:	4613      	mov	r3, r2
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	1a9b      	subs	r3, r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	440b      	add	r3, r1
 80056fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005702:	2200      	movs	r2, #0
 8005704:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005706:	7bfb      	ldrb	r3, [r7, #15]
 8005708:	3301      	adds	r3, #1
 800570a:	73fb      	strb	r3, [r7, #15]
 800570c:	7bfa      	ldrb	r2, [r7, #15]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	429a      	cmp	r2, r3
 8005714:	d3b5      	bcc.n	8005682 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	603b      	str	r3, [r7, #0]
 800571c:	687e      	ldr	r6, [r7, #4]
 800571e:	466d      	mov	r5, sp
 8005720:	f106 0410 	add.w	r4, r6, #16
 8005724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005728:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800572a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800572c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005730:	e885 0003 	stmia.w	r5, {r0, r1}
 8005734:	1d33      	adds	r3, r6, #4
 8005736:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005738:	6838      	ldr	r0, [r7, #0]
 800573a:	f005 ff41 	bl	800b5c0 <USB_DevInit>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e014      	b.n	800577a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	2b01      	cmp	r3, #1
 8005766:	d102      	bne.n	800576e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f80b 	bl	8005784 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4618      	mov	r0, r3
 8005774:	f006 f8fb 	bl	800b96e <USB_DevDisconnect>

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005784 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057b2:	4b05      	ldr	r3, [pc, #20]	; (80057c8 <HAL_PCDEx_ActivateLPM+0x44>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	10000003 	.word	0x10000003

080057cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80057d4:	4b19      	ldr	r3, [pc, #100]	; (800583c <HAL_PWREx_ConfigSupply+0x70>)
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d00a      	beq.n	80057f6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80057e0:	4b16      	ldr	r3, [pc, #88]	; (800583c <HAL_PWREx_ConfigSupply+0x70>)
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f003 0307 	and.w	r3, r3, #7
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d001      	beq.n	80057f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e01f      	b.n	8005832 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80057f2:	2300      	movs	r3, #0
 80057f4:	e01d      	b.n	8005832 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80057f6:	4b11      	ldr	r3, [pc, #68]	; (800583c <HAL_PWREx_ConfigSupply+0x70>)
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	f023 0207 	bic.w	r2, r3, #7
 80057fe:	490f      	ldr	r1, [pc, #60]	; (800583c <HAL_PWREx_ConfigSupply+0x70>)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4313      	orrs	r3, r2
 8005804:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005806:	f7fd faf5 	bl	8002df4 <HAL_GetTick>
 800580a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800580c:	e009      	b.n	8005822 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800580e:	f7fd faf1 	bl	8002df4 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800581c:	d901      	bls.n	8005822 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e007      	b.n	8005832 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005822:	4b06      	ldr	r3, [pc, #24]	; (800583c <HAL_PWREx_ConfigSupply+0x70>)
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800582a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800582e:	d1ee      	bne.n	800580e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	58024800 	.word	0x58024800

08005840 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005844:	4b05      	ldr	r3, [pc, #20]	; (800585c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	4a04      	ldr	r2, [pc, #16]	; (800585c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800584a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800584e:	60d3      	str	r3, [r2, #12]
}
 8005850:	bf00      	nop
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	58024800 	.word	0x58024800

08005860 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b08c      	sub	sp, #48	; 0x30
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d102      	bne.n	8005874 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	f000 bc1c 	b.w	80060ac <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	f000 8087 	beq.w	8005990 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005882:	4b9e      	ldr	r3, [pc, #632]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800588a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800588c:	4b9b      	ldr	r3, [pc, #620]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 800588e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005890:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005894:	2b10      	cmp	r3, #16
 8005896:	d007      	beq.n	80058a8 <HAL_RCC_OscConfig+0x48>
 8005898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589a:	2b18      	cmp	r3, #24
 800589c:	d110      	bne.n	80058c0 <HAL_RCC_OscConfig+0x60>
 800589e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a0:	f003 0303 	and.w	r3, r3, #3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d10b      	bne.n	80058c0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058a8:	4b94      	ldr	r3, [pc, #592]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d06c      	beq.n	800598e <HAL_RCC_OscConfig+0x12e>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d168      	bne.n	800598e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e3f5      	b.n	80060ac <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058c8:	d106      	bne.n	80058d8 <HAL_RCC_OscConfig+0x78>
 80058ca:	4b8c      	ldr	r3, [pc, #560]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a8b      	ldr	r2, [pc, #556]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 80058d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058d4:	6013      	str	r3, [r2, #0]
 80058d6:	e02e      	b.n	8005936 <HAL_RCC_OscConfig+0xd6>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10c      	bne.n	80058fa <HAL_RCC_OscConfig+0x9a>
 80058e0:	4b86      	ldr	r3, [pc, #536]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a85      	ldr	r2, [pc, #532]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 80058e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ea:	6013      	str	r3, [r2, #0]
 80058ec:	4b83      	ldr	r3, [pc, #524]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a82      	ldr	r2, [pc, #520]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 80058f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058f6:	6013      	str	r3, [r2, #0]
 80058f8:	e01d      	b.n	8005936 <HAL_RCC_OscConfig+0xd6>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005902:	d10c      	bne.n	800591e <HAL_RCC_OscConfig+0xbe>
 8005904:	4b7d      	ldr	r3, [pc, #500]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a7c      	ldr	r2, [pc, #496]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 800590a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800590e:	6013      	str	r3, [r2, #0]
 8005910:	4b7a      	ldr	r3, [pc, #488]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a79      	ldr	r2, [pc, #484]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 8005916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800591a:	6013      	str	r3, [r2, #0]
 800591c:	e00b      	b.n	8005936 <HAL_RCC_OscConfig+0xd6>
 800591e:	4b77      	ldr	r3, [pc, #476]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a76      	ldr	r2, [pc, #472]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 8005924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005928:	6013      	str	r3, [r2, #0]
 800592a:	4b74      	ldr	r3, [pc, #464]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a73      	ldr	r2, [pc, #460]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 8005930:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005934:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d013      	beq.n	8005966 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800593e:	f7fd fa59 	bl	8002df4 <HAL_GetTick>
 8005942:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005944:	e008      	b.n	8005958 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005946:	f7fd fa55 	bl	8002df4 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b64      	cmp	r3, #100	; 0x64
 8005952:	d901      	bls.n	8005958 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e3a9      	b.n	80060ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005958:	4b68      	ldr	r3, [pc, #416]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d0f0      	beq.n	8005946 <HAL_RCC_OscConfig+0xe6>
 8005964:	e014      	b.n	8005990 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005966:	f7fd fa45 	bl	8002df4 <HAL_GetTick>
 800596a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800596c:	e008      	b.n	8005980 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800596e:	f7fd fa41 	bl	8002df4 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b64      	cmp	r3, #100	; 0x64
 800597a:	d901      	bls.n	8005980 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e395      	b.n	80060ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005980:	4b5e      	ldr	r3, [pc, #376]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1f0      	bne.n	800596e <HAL_RCC_OscConfig+0x10e>
 800598c:	e000      	b.n	8005990 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800598e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 80ca 	beq.w	8005b32 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800599e:	4b57      	ldr	r3, [pc, #348]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059a6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80059a8:	4b54      	ldr	r3, [pc, #336]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 80059aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ac:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d007      	beq.n	80059c4 <HAL_RCC_OscConfig+0x164>
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	2b18      	cmp	r3, #24
 80059b8:	d156      	bne.n	8005a68 <HAL_RCC_OscConfig+0x208>
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	f003 0303 	and.w	r3, r3, #3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d151      	bne.n	8005a68 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059c4:	4b4d      	ldr	r3, [pc, #308]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d005      	beq.n	80059dc <HAL_RCC_OscConfig+0x17c>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e367      	b.n	80060ac <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80059dc:	4b47      	ldr	r3, [pc, #284]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f023 0219 	bic.w	r2, r3, #25
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	4944      	ldr	r1, [pc, #272]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059ee:	f7fd fa01 	bl	8002df4 <HAL_GetTick>
 80059f2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059f4:	e008      	b.n	8005a08 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059f6:	f7fd f9fd 	bl	8002df4 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d901      	bls.n	8005a08 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e351      	b.n	80060ac <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a08:	4b3c      	ldr	r3, [pc, #240]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0304 	and.w	r3, r3, #4
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d0f0      	beq.n	80059f6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a14:	f7fd fa1e 	bl	8002e54 <HAL_GetREVID>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	f241 0203 	movw	r2, #4099	; 0x1003
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d817      	bhi.n	8005a52 <HAL_RCC_OscConfig+0x1f2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	2b40      	cmp	r3, #64	; 0x40
 8005a28:	d108      	bne.n	8005a3c <HAL_RCC_OscConfig+0x1dc>
 8005a2a:	4b34      	ldr	r3, [pc, #208]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005a32:	4a32      	ldr	r2, [pc, #200]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 8005a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a38:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a3a:	e07a      	b.n	8005b32 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a3c:	4b2f      	ldr	r3, [pc, #188]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	031b      	lsls	r3, r3, #12
 8005a4a:	492c      	ldr	r1, [pc, #176]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a50:	e06f      	b.n	8005b32 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a52:	4b2a      	ldr	r3, [pc, #168]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	061b      	lsls	r3, r3, #24
 8005a60:	4926      	ldr	r1, [pc, #152]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a66:	e064      	b.n	8005b32 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d047      	beq.n	8005b00 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005a70:	4b22      	ldr	r3, [pc, #136]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f023 0219 	bic.w	r2, r3, #25
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	491f      	ldr	r1, [pc, #124]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a82:	f7fd f9b7 	bl	8002df4 <HAL_GetTick>
 8005a86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a88:	e008      	b.n	8005a9c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a8a:	f7fd f9b3 	bl	8002df4 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d901      	bls.n	8005a9c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e307      	b.n	80060ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a9c:	4b17      	ldr	r3, [pc, #92]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d0f0      	beq.n	8005a8a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aa8:	f7fd f9d4 	bl	8002e54 <HAL_GetREVID>
 8005aac:	4603      	mov	r3, r0
 8005aae:	f241 0203 	movw	r2, #4099	; 0x1003
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d817      	bhi.n	8005ae6 <HAL_RCC_OscConfig+0x286>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	2b40      	cmp	r3, #64	; 0x40
 8005abc:	d108      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x270>
 8005abe:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005ac6:	4a0d      	ldr	r2, [pc, #52]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 8005ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005acc:	6053      	str	r3, [r2, #4]
 8005ace:	e030      	b.n	8005b32 <HAL_RCC_OscConfig+0x2d2>
 8005ad0:	4b0a      	ldr	r3, [pc, #40]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	031b      	lsls	r3, r3, #12
 8005ade:	4907      	ldr	r1, [pc, #28]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	604b      	str	r3, [r1, #4]
 8005ae4:	e025      	b.n	8005b32 <HAL_RCC_OscConfig+0x2d2>
 8005ae6:	4b05      	ldr	r3, [pc, #20]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	061b      	lsls	r3, r3, #24
 8005af4:	4901      	ldr	r1, [pc, #4]	; (8005afc <HAL_RCC_OscConfig+0x29c>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	604b      	str	r3, [r1, #4]
 8005afa:	e01a      	b.n	8005b32 <HAL_RCC_OscConfig+0x2d2>
 8005afc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b00:	4b9e      	ldr	r3, [pc, #632]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a9d      	ldr	r2, [pc, #628]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005b06:	f023 0301 	bic.w	r3, r3, #1
 8005b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b0c:	f7fd f972 	bl	8002df4 <HAL_GetTick>
 8005b10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b14:	f7fd f96e 	bl	8002df4 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e2c2      	b.n	80060ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b26:	4b95      	ldr	r3, [pc, #596]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0304 	and.w	r3, r3, #4
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1f0      	bne.n	8005b14 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0310 	and.w	r3, r3, #16
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f000 80a9 	beq.w	8005c92 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b40:	4b8e      	ldr	r3, [pc, #568]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b48:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b4a:	4b8c      	ldr	r3, [pc, #560]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	2b08      	cmp	r3, #8
 8005b54:	d007      	beq.n	8005b66 <HAL_RCC_OscConfig+0x306>
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	2b18      	cmp	r3, #24
 8005b5a:	d13a      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x372>
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f003 0303 	and.w	r3, r3, #3
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d135      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b66:	4b85      	ldr	r3, [pc, #532]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d005      	beq.n	8005b7e <HAL_RCC_OscConfig+0x31e>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	2b80      	cmp	r3, #128	; 0x80
 8005b78:	d001      	beq.n	8005b7e <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e296      	b.n	80060ac <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b7e:	f7fd f969 	bl	8002e54 <HAL_GetREVID>
 8005b82:	4603      	mov	r3, r0
 8005b84:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d817      	bhi.n	8005bbc <HAL_RCC_OscConfig+0x35c>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	2b20      	cmp	r3, #32
 8005b92:	d108      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x346>
 8005b94:	4b79      	ldr	r3, [pc, #484]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005b9c:	4a77      	ldr	r2, [pc, #476]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005b9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ba2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ba4:	e075      	b.n	8005c92 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ba6:	4b75      	ldr	r3, [pc, #468]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	069b      	lsls	r3, r3, #26
 8005bb4:	4971      	ldr	r1, [pc, #452]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005bba:	e06a      	b.n	8005c92 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005bbc:	4b6f      	ldr	r3, [pc, #444]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	061b      	lsls	r3, r3, #24
 8005bca:	496c      	ldr	r1, [pc, #432]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005bd0:	e05f      	b.n	8005c92 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d042      	beq.n	8005c60 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005bda:	4b68      	ldr	r3, [pc, #416]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a67      	ldr	r2, [pc, #412]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be6:	f7fd f905 	bl	8002df4 <HAL_GetTick>
 8005bea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005bec:	e008      	b.n	8005c00 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005bee:	f7fd f901 	bl	8002df4 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d901      	bls.n	8005c00 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e255      	b.n	80060ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c00:	4b5e      	ldr	r3, [pc, #376]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0f0      	beq.n	8005bee <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c0c:	f7fd f922 	bl	8002e54 <HAL_GetREVID>
 8005c10:	4603      	mov	r3, r0
 8005c12:	f241 0203 	movw	r2, #4099	; 0x1003
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d817      	bhi.n	8005c4a <HAL_RCC_OscConfig+0x3ea>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	2b20      	cmp	r3, #32
 8005c20:	d108      	bne.n	8005c34 <HAL_RCC_OscConfig+0x3d4>
 8005c22:	4b56      	ldr	r3, [pc, #344]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005c2a:	4a54      	ldr	r2, [pc, #336]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005c2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c30:	6053      	str	r3, [r2, #4]
 8005c32:	e02e      	b.n	8005c92 <HAL_RCC_OscConfig+0x432>
 8005c34:	4b51      	ldr	r3, [pc, #324]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	069b      	lsls	r3, r3, #26
 8005c42:	494e      	ldr	r1, [pc, #312]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	604b      	str	r3, [r1, #4]
 8005c48:	e023      	b.n	8005c92 <HAL_RCC_OscConfig+0x432>
 8005c4a:	4b4c      	ldr	r3, [pc, #304]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	061b      	lsls	r3, r3, #24
 8005c58:	4948      	ldr	r1, [pc, #288]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	60cb      	str	r3, [r1, #12]
 8005c5e:	e018      	b.n	8005c92 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005c60:	4b46      	ldr	r3, [pc, #280]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a45      	ldr	r2, [pc, #276]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005c66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c6c:	f7fd f8c2 	bl	8002df4 <HAL_GetTick>
 8005c70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005c72:	e008      	b.n	8005c86 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005c74:	f7fd f8be 	bl	8002df4 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e212      	b.n	80060ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005c86:	4b3d      	ldr	r3, [pc, #244]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1f0      	bne.n	8005c74 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0308 	and.w	r3, r3, #8
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d036      	beq.n	8005d0c <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d019      	beq.n	8005cda <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ca6:	4b35      	ldr	r3, [pc, #212]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005caa:	4a34      	ldr	r2, [pc, #208]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005cac:	f043 0301 	orr.w	r3, r3, #1
 8005cb0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cb2:	f7fd f89f 	bl	8002df4 <HAL_GetTick>
 8005cb6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005cb8:	e008      	b.n	8005ccc <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cba:	f7fd f89b 	bl	8002df4 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d901      	bls.n	8005ccc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e1ef      	b.n	80060ac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ccc:	4b2b      	ldr	r3, [pc, #172]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0f0      	beq.n	8005cba <HAL_RCC_OscConfig+0x45a>
 8005cd8:	e018      	b.n	8005d0c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cda:	4b28      	ldr	r3, [pc, #160]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cde:	4a27      	ldr	r2, [pc, #156]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005ce0:	f023 0301 	bic.w	r3, r3, #1
 8005ce4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce6:	f7fd f885 	bl	8002df4 <HAL_GetTick>
 8005cea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005cec:	e008      	b.n	8005d00 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cee:	f7fd f881 	bl	8002df4 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d901      	bls.n	8005d00 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e1d5      	b.n	80060ac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d00:	4b1e      	ldr	r3, [pc, #120]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1f0      	bne.n	8005cee <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0320 	and.w	r3, r3, #32
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d039      	beq.n	8005d8c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d019      	beq.n	8005d54 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d20:	4b16      	ldr	r3, [pc, #88]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a15      	ldr	r2, [pc, #84]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005d26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d2a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005d2c:	f7fd f862 	bl	8002df4 <HAL_GetTick>
 8005d30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d32:	e008      	b.n	8005d46 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005d34:	f7fd f85e 	bl	8002df4 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e1b2      	b.n	80060ac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d46:	4b0d      	ldr	r3, [pc, #52]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d0f0      	beq.n	8005d34 <HAL_RCC_OscConfig+0x4d4>
 8005d52:	e01b      	b.n	8005d8c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d54:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a08      	ldr	r2, [pc, #32]	; (8005d7c <HAL_RCC_OscConfig+0x51c>)
 8005d5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d5e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005d60:	f7fd f848 	bl	8002df4 <HAL_GetTick>
 8005d64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005d66:	e00b      	b.n	8005d80 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005d68:	f7fd f844 	bl	8002df4 <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d904      	bls.n	8005d80 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e198      	b.n	80060ac <HAL_RCC_OscConfig+0x84c>
 8005d7a:	bf00      	nop
 8005d7c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005d80:	4ba3      	ldr	r3, [pc, #652]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1ed      	bne.n	8005d68 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0304 	and.w	r3, r3, #4
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 8081 	beq.w	8005e9c <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005d9a:	4b9e      	ldr	r3, [pc, #632]	; (8006014 <HAL_RCC_OscConfig+0x7b4>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a9d      	ldr	r2, [pc, #628]	; (8006014 <HAL_RCC_OscConfig+0x7b4>)
 8005da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005da4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005da6:	f7fd f825 	bl	8002df4 <HAL_GetTick>
 8005daa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dac:	e008      	b.n	8005dc0 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005dae:	f7fd f821 	bl	8002df4 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	2b64      	cmp	r3, #100	; 0x64
 8005dba:	d901      	bls.n	8005dc0 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e175      	b.n	80060ac <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dc0:	4b94      	ldr	r3, [pc, #592]	; (8006014 <HAL_RCC_OscConfig+0x7b4>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d0f0      	beq.n	8005dae <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d106      	bne.n	8005de2 <HAL_RCC_OscConfig+0x582>
 8005dd4:	4b8e      	ldr	r3, [pc, #568]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd8:	4a8d      	ldr	r2, [pc, #564]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005dda:	f043 0301 	orr.w	r3, r3, #1
 8005dde:	6713      	str	r3, [r2, #112]	; 0x70
 8005de0:	e02d      	b.n	8005e3e <HAL_RCC_OscConfig+0x5de>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10c      	bne.n	8005e04 <HAL_RCC_OscConfig+0x5a4>
 8005dea:	4b89      	ldr	r3, [pc, #548]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dee:	4a88      	ldr	r2, [pc, #544]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005df0:	f023 0301 	bic.w	r3, r3, #1
 8005df4:	6713      	str	r3, [r2, #112]	; 0x70
 8005df6:	4b86      	ldr	r3, [pc, #536]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfa:	4a85      	ldr	r2, [pc, #532]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005dfc:	f023 0304 	bic.w	r3, r3, #4
 8005e00:	6713      	str	r3, [r2, #112]	; 0x70
 8005e02:	e01c      	b.n	8005e3e <HAL_RCC_OscConfig+0x5de>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	2b05      	cmp	r3, #5
 8005e0a:	d10c      	bne.n	8005e26 <HAL_RCC_OscConfig+0x5c6>
 8005e0c:	4b80      	ldr	r3, [pc, #512]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e10:	4a7f      	ldr	r2, [pc, #508]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005e12:	f043 0304 	orr.w	r3, r3, #4
 8005e16:	6713      	str	r3, [r2, #112]	; 0x70
 8005e18:	4b7d      	ldr	r3, [pc, #500]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1c:	4a7c      	ldr	r2, [pc, #496]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005e1e:	f043 0301 	orr.w	r3, r3, #1
 8005e22:	6713      	str	r3, [r2, #112]	; 0x70
 8005e24:	e00b      	b.n	8005e3e <HAL_RCC_OscConfig+0x5de>
 8005e26:	4b7a      	ldr	r3, [pc, #488]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2a:	4a79      	ldr	r2, [pc, #484]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005e2c:	f023 0301 	bic.w	r3, r3, #1
 8005e30:	6713      	str	r3, [r2, #112]	; 0x70
 8005e32:	4b77      	ldr	r3, [pc, #476]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e36:	4a76      	ldr	r2, [pc, #472]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005e38:	f023 0304 	bic.w	r3, r3, #4
 8005e3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d015      	beq.n	8005e72 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e46:	f7fc ffd5 	bl	8002df4 <HAL_GetTick>
 8005e4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e4c:	e00a      	b.n	8005e64 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e4e:	f7fc ffd1 	bl	8002df4 <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d901      	bls.n	8005e64 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e123      	b.n	80060ac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e64:	4b6a      	ldr	r3, [pc, #424]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e68:	f003 0302 	and.w	r3, r3, #2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d0ee      	beq.n	8005e4e <HAL_RCC_OscConfig+0x5ee>
 8005e70:	e014      	b.n	8005e9c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e72:	f7fc ffbf 	bl	8002df4 <HAL_GetTick>
 8005e76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005e78:	e00a      	b.n	8005e90 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e7a:	f7fc ffbb 	bl	8002df4 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d901      	bls.n	8005e90 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e10d      	b.n	80060ac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005e90:	4b5f      	ldr	r3, [pc, #380]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1ee      	bne.n	8005e7a <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 8102 	beq.w	80060aa <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005ea6:	4b5a      	ldr	r3, [pc, #360]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eae:	2b18      	cmp	r3, #24
 8005eb0:	f000 80bd 	beq.w	800602e <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	f040 8095 	bne.w	8005fe8 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ebe:	4b54      	ldr	r3, [pc, #336]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a53      	ldr	r2, [pc, #332]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005ec4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ec8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eca:	f7fc ff93 	bl	8002df4 <HAL_GetTick>
 8005ece:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ed0:	e008      	b.n	8005ee4 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ed2:	f7fc ff8f 	bl	8002df4 <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d901      	bls.n	8005ee4 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e0e3      	b.n	80060ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ee4:	4b4a      	ldr	r3, [pc, #296]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1f0      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ef0:	4b47      	ldr	r3, [pc, #284]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005ef2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ef4:	4b48      	ldr	r3, [pc, #288]	; (8006018 <HAL_RCC_OscConfig+0x7b8>)
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005f00:	0112      	lsls	r2, r2, #4
 8005f02:	430a      	orrs	r2, r1
 8005f04:	4942      	ldr	r1, [pc, #264]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	628b      	str	r3, [r1, #40]	; 0x28
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	025b      	lsls	r3, r3, #9
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f24:	3b01      	subs	r3, #1
 8005f26:	041b      	lsls	r3, r3, #16
 8005f28:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f2c:	431a      	orrs	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f32:	3b01      	subs	r3, #1
 8005f34:	061b      	lsls	r3, r3, #24
 8005f36:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005f3a:	4935      	ldr	r1, [pc, #212]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005f40:	4b33      	ldr	r3, [pc, #204]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f44:	4a32      	ldr	r2, [pc, #200]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005f46:	f023 0301 	bic.w	r3, r3, #1
 8005f4a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005f4c:	4b30      	ldr	r3, [pc, #192]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f50:	4b32      	ldr	r3, [pc, #200]	; (800601c <HAL_RCC_OscConfig+0x7bc>)
 8005f52:	4013      	ands	r3, r2
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005f58:	00d2      	lsls	r2, r2, #3
 8005f5a:	492d      	ldr	r1, [pc, #180]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005f60:	4b2b      	ldr	r3, [pc, #172]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f64:	f023 020c 	bic.w	r2, r3, #12
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6c:	4928      	ldr	r1, [pc, #160]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005f72:	4b27      	ldr	r3, [pc, #156]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f76:	f023 0202 	bic.w	r2, r3, #2
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7e:	4924      	ldr	r1, [pc, #144]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005f84:	4b22      	ldr	r3, [pc, #136]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f88:	4a21      	ldr	r2, [pc, #132]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f90:	4b1f      	ldr	r3, [pc, #124]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f94:	4a1e      	ldr	r2, [pc, #120]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005f9c:	4b1c      	ldr	r3, [pc, #112]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa0:	4a1b      	ldr	r2, [pc, #108]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005fa2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005fa8:	4b19      	ldr	r3, [pc, #100]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fac:	4a18      	ldr	r2, [pc, #96]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005fae:	f043 0301 	orr.w	r3, r3, #1
 8005fb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fb4:	4b16      	ldr	r3, [pc, #88]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a15      	ldr	r2, [pc, #84]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005fba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc0:	f7fc ff18 	bl	8002df4 <HAL_GetTick>
 8005fc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005fc6:	e008      	b.n	8005fda <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fc8:	f7fc ff14 	bl	8002df4 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e068      	b.n	80060ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005fda:	4b0d      	ldr	r3, [pc, #52]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d0f0      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x768>
 8005fe6:	e060      	b.n	80060aa <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fe8:	4b09      	ldr	r3, [pc, #36]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a08      	ldr	r2, [pc, #32]	; (8006010 <HAL_RCC_OscConfig+0x7b0>)
 8005fee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff4:	f7fc fefe 	bl	8002df4 <HAL_GetTick>
 8005ff8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ffa:	e011      	b.n	8006020 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ffc:	f7fc fefa 	bl	8002df4 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b02      	cmp	r3, #2
 8006008:	d90a      	bls.n	8006020 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e04e      	b.n	80060ac <HAL_RCC_OscConfig+0x84c>
 800600e:	bf00      	nop
 8006010:	58024400 	.word	0x58024400
 8006014:	58024800 	.word	0x58024800
 8006018:	fffffc0c 	.word	0xfffffc0c
 800601c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006020:	4b24      	ldr	r3, [pc, #144]	; (80060b4 <HAL_RCC_OscConfig+0x854>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1e7      	bne.n	8005ffc <HAL_RCC_OscConfig+0x79c>
 800602c:	e03d      	b.n	80060aa <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800602e:	4b21      	ldr	r3, [pc, #132]	; (80060b4 <HAL_RCC_OscConfig+0x854>)
 8006030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006032:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006034:	4b1f      	ldr	r3, [pc, #124]	; (80060b4 <HAL_RCC_OscConfig+0x854>)
 8006036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006038:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603e:	2b01      	cmp	r3, #1
 8006040:	d031      	beq.n	80060a6 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f003 0203 	and.w	r2, r3, #3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800604c:	429a      	cmp	r2, r3
 800604e:	d12a      	bne.n	80060a6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	091b      	lsrs	r3, r3, #4
 8006054:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800605c:	429a      	cmp	r2, r3
 800605e:	d122      	bne.n	80060a6 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800606c:	429a      	cmp	r2, r3
 800606e:	d11a      	bne.n	80060a6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	0a5b      	lsrs	r3, r3, #9
 8006074:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800607c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800607e:	429a      	cmp	r2, r3
 8006080:	d111      	bne.n	80060a6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	0c1b      	lsrs	r3, r3, #16
 8006086:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006090:	429a      	cmp	r2, r3
 8006092:	d108      	bne.n	80060a6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	0e1b      	lsrs	r3, r3, #24
 8006098:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d001      	beq.n	80060aa <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3730      	adds	r7, #48	; 0x30
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	58024400 	.word	0x58024400

080060b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e19c      	b.n	8006406 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060cc:	4b8a      	ldr	r3, [pc, #552]	; (80062f8 <HAL_RCC_ClockConfig+0x240>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 030f 	and.w	r3, r3, #15
 80060d4:	683a      	ldr	r2, [r7, #0]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d910      	bls.n	80060fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060da:	4b87      	ldr	r3, [pc, #540]	; (80062f8 <HAL_RCC_ClockConfig+0x240>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f023 020f 	bic.w	r2, r3, #15
 80060e2:	4985      	ldr	r1, [pc, #532]	; (80062f8 <HAL_RCC_ClockConfig+0x240>)
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ea:	4b83      	ldr	r3, [pc, #524]	; (80062f8 <HAL_RCC_ClockConfig+0x240>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 030f 	and.w	r3, r3, #15
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d001      	beq.n	80060fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e184      	b.n	8006406 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0304 	and.w	r3, r3, #4
 8006104:	2b00      	cmp	r3, #0
 8006106:	d010      	beq.n	800612a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	691a      	ldr	r2, [r3, #16]
 800610c:	4b7b      	ldr	r3, [pc, #492]	; (80062fc <HAL_RCC_ClockConfig+0x244>)
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006114:	429a      	cmp	r2, r3
 8006116:	d908      	bls.n	800612a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006118:	4b78      	ldr	r3, [pc, #480]	; (80062fc <HAL_RCC_ClockConfig+0x244>)
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	4975      	ldr	r1, [pc, #468]	; (80062fc <HAL_RCC_ClockConfig+0x244>)
 8006126:	4313      	orrs	r3, r2
 8006128:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0308 	and.w	r3, r3, #8
 8006132:	2b00      	cmp	r3, #0
 8006134:	d010      	beq.n	8006158 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	695a      	ldr	r2, [r3, #20]
 800613a:	4b70      	ldr	r3, [pc, #448]	; (80062fc <HAL_RCC_ClockConfig+0x244>)
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006142:	429a      	cmp	r2, r3
 8006144:	d908      	bls.n	8006158 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006146:	4b6d      	ldr	r3, [pc, #436]	; (80062fc <HAL_RCC_ClockConfig+0x244>)
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	496a      	ldr	r1, [pc, #424]	; (80062fc <HAL_RCC_ClockConfig+0x244>)
 8006154:	4313      	orrs	r3, r2
 8006156:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0310 	and.w	r3, r3, #16
 8006160:	2b00      	cmp	r3, #0
 8006162:	d010      	beq.n	8006186 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	699a      	ldr	r2, [r3, #24]
 8006168:	4b64      	ldr	r3, [pc, #400]	; (80062fc <HAL_RCC_ClockConfig+0x244>)
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006170:	429a      	cmp	r2, r3
 8006172:	d908      	bls.n	8006186 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006174:	4b61      	ldr	r3, [pc, #388]	; (80062fc <HAL_RCC_ClockConfig+0x244>)
 8006176:	69db      	ldr	r3, [r3, #28]
 8006178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	495e      	ldr	r1, [pc, #376]	; (80062fc <HAL_RCC_ClockConfig+0x244>)
 8006182:	4313      	orrs	r3, r2
 8006184:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0320 	and.w	r3, r3, #32
 800618e:	2b00      	cmp	r3, #0
 8006190:	d010      	beq.n	80061b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	69da      	ldr	r2, [r3, #28]
 8006196:	4b59      	ldr	r3, [pc, #356]	; (80062fc <HAL_RCC_ClockConfig+0x244>)
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800619e:	429a      	cmp	r2, r3
 80061a0:	d908      	bls.n	80061b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80061a2:	4b56      	ldr	r3, [pc, #344]	; (80062fc <HAL_RCC_ClockConfig+0x244>)
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	69db      	ldr	r3, [r3, #28]
 80061ae:	4953      	ldr	r1, [pc, #332]	; (80062fc <HAL_RCC_ClockConfig+0x244>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0302 	and.w	r3, r3, #2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d010      	beq.n	80061e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68da      	ldr	r2, [r3, #12]
 80061c4:	4b4d      	ldr	r3, [pc, #308]	; (80062fc <HAL_RCC_ClockConfig+0x244>)
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	f003 030f 	and.w	r3, r3, #15
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d908      	bls.n	80061e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061d0:	4b4a      	ldr	r3, [pc, #296]	; (80062fc <HAL_RCC_ClockConfig+0x244>)
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	f023 020f 	bic.w	r2, r3, #15
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	4947      	ldr	r1, [pc, #284]	; (80062fc <HAL_RCC_ClockConfig+0x244>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d055      	beq.n	800629a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80061ee:	4b43      	ldr	r3, [pc, #268]	; (80062fc <HAL_RCC_ClockConfig+0x244>)
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	4940      	ldr	r1, [pc, #256]	; (80062fc <HAL_RCC_ClockConfig+0x244>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	2b02      	cmp	r3, #2
 8006206:	d107      	bne.n	8006218 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006208:	4b3c      	ldr	r3, [pc, #240]	; (80062fc <HAL_RCC_ClockConfig+0x244>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d121      	bne.n	8006258 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e0f6      	b.n	8006406 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	2b03      	cmp	r3, #3
 800621e:	d107      	bne.n	8006230 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006220:	4b36      	ldr	r3, [pc, #216]	; (80062fc <HAL_RCC_ClockConfig+0x244>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d115      	bne.n	8006258 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e0ea      	b.n	8006406 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d107      	bne.n	8006248 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006238:	4b30      	ldr	r3, [pc, #192]	; (80062fc <HAL_RCC_ClockConfig+0x244>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006240:	2b00      	cmp	r3, #0
 8006242:	d109      	bne.n	8006258 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e0de      	b.n	8006406 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006248:	4b2c      	ldr	r3, [pc, #176]	; (80062fc <HAL_RCC_ClockConfig+0x244>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0304 	and.w	r3, r3, #4
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e0d6      	b.n	8006406 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006258:	4b28      	ldr	r3, [pc, #160]	; (80062fc <HAL_RCC_ClockConfig+0x244>)
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	f023 0207 	bic.w	r2, r3, #7
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	4925      	ldr	r1, [pc, #148]	; (80062fc <HAL_RCC_ClockConfig+0x244>)
 8006266:	4313      	orrs	r3, r2
 8006268:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800626a:	f7fc fdc3 	bl	8002df4 <HAL_GetTick>
 800626e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006270:	e00a      	b.n	8006288 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006272:	f7fc fdbf 	bl	8002df4 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006280:	4293      	cmp	r3, r2
 8006282:	d901      	bls.n	8006288 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e0be      	b.n	8006406 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006288:	4b1c      	ldr	r3, [pc, #112]	; (80062fc <HAL_RCC_ClockConfig+0x244>)
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	00db      	lsls	r3, r3, #3
 8006296:	429a      	cmp	r2, r3
 8006298:	d1eb      	bne.n	8006272 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d010      	beq.n	80062c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68da      	ldr	r2, [r3, #12]
 80062aa:	4b14      	ldr	r3, [pc, #80]	; (80062fc <HAL_RCC_ClockConfig+0x244>)
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	f003 030f 	and.w	r3, r3, #15
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d208      	bcs.n	80062c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062b6:	4b11      	ldr	r3, [pc, #68]	; (80062fc <HAL_RCC_ClockConfig+0x244>)
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	f023 020f 	bic.w	r2, r3, #15
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	490e      	ldr	r1, [pc, #56]	; (80062fc <HAL_RCC_ClockConfig+0x244>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062c8:	4b0b      	ldr	r3, [pc, #44]	; (80062f8 <HAL_RCC_ClockConfig+0x240>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 030f 	and.w	r3, r3, #15
 80062d0:	683a      	ldr	r2, [r7, #0]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d214      	bcs.n	8006300 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062d6:	4b08      	ldr	r3, [pc, #32]	; (80062f8 <HAL_RCC_ClockConfig+0x240>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f023 020f 	bic.w	r2, r3, #15
 80062de:	4906      	ldr	r1, [pc, #24]	; (80062f8 <HAL_RCC_ClockConfig+0x240>)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062e6:	4b04      	ldr	r3, [pc, #16]	; (80062f8 <HAL_RCC_ClockConfig+0x240>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 030f 	and.w	r3, r3, #15
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d005      	beq.n	8006300 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e086      	b.n	8006406 <HAL_RCC_ClockConfig+0x34e>
 80062f8:	52002000 	.word	0x52002000
 80062fc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b00      	cmp	r3, #0
 800630a:	d010      	beq.n	800632e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	691a      	ldr	r2, [r3, #16]
 8006310:	4b3f      	ldr	r3, [pc, #252]	; (8006410 <HAL_RCC_ClockConfig+0x358>)
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006318:	429a      	cmp	r2, r3
 800631a:	d208      	bcs.n	800632e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800631c:	4b3c      	ldr	r3, [pc, #240]	; (8006410 <HAL_RCC_ClockConfig+0x358>)
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	4939      	ldr	r1, [pc, #228]	; (8006410 <HAL_RCC_ClockConfig+0x358>)
 800632a:	4313      	orrs	r3, r2
 800632c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0308 	and.w	r3, r3, #8
 8006336:	2b00      	cmp	r3, #0
 8006338:	d010      	beq.n	800635c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	695a      	ldr	r2, [r3, #20]
 800633e:	4b34      	ldr	r3, [pc, #208]	; (8006410 <HAL_RCC_ClockConfig+0x358>)
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006346:	429a      	cmp	r2, r3
 8006348:	d208      	bcs.n	800635c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800634a:	4b31      	ldr	r3, [pc, #196]	; (8006410 <HAL_RCC_ClockConfig+0x358>)
 800634c:	69db      	ldr	r3, [r3, #28]
 800634e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	492e      	ldr	r1, [pc, #184]	; (8006410 <HAL_RCC_ClockConfig+0x358>)
 8006358:	4313      	orrs	r3, r2
 800635a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0310 	and.w	r3, r3, #16
 8006364:	2b00      	cmp	r3, #0
 8006366:	d010      	beq.n	800638a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	699a      	ldr	r2, [r3, #24]
 800636c:	4b28      	ldr	r3, [pc, #160]	; (8006410 <HAL_RCC_ClockConfig+0x358>)
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006374:	429a      	cmp	r2, r3
 8006376:	d208      	bcs.n	800638a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006378:	4b25      	ldr	r3, [pc, #148]	; (8006410 <HAL_RCC_ClockConfig+0x358>)
 800637a:	69db      	ldr	r3, [r3, #28]
 800637c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	4922      	ldr	r1, [pc, #136]	; (8006410 <HAL_RCC_ClockConfig+0x358>)
 8006386:	4313      	orrs	r3, r2
 8006388:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0320 	and.w	r3, r3, #32
 8006392:	2b00      	cmp	r3, #0
 8006394:	d010      	beq.n	80063b8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	69da      	ldr	r2, [r3, #28]
 800639a:	4b1d      	ldr	r3, [pc, #116]	; (8006410 <HAL_RCC_ClockConfig+0x358>)
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d208      	bcs.n	80063b8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80063a6:	4b1a      	ldr	r3, [pc, #104]	; (8006410 <HAL_RCC_ClockConfig+0x358>)
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	4917      	ldr	r1, [pc, #92]	; (8006410 <HAL_RCC_ClockConfig+0x358>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80063b8:	f000 f834 	bl	8006424 <HAL_RCC_GetSysClockFreq>
 80063bc:	4602      	mov	r2, r0
 80063be:	4b14      	ldr	r3, [pc, #80]	; (8006410 <HAL_RCC_ClockConfig+0x358>)
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	0a1b      	lsrs	r3, r3, #8
 80063c4:	f003 030f 	and.w	r3, r3, #15
 80063c8:	4912      	ldr	r1, [pc, #72]	; (8006414 <HAL_RCC_ClockConfig+0x35c>)
 80063ca:	5ccb      	ldrb	r3, [r1, r3]
 80063cc:	f003 031f 	and.w	r3, r3, #31
 80063d0:	fa22 f303 	lsr.w	r3, r2, r3
 80063d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80063d6:	4b0e      	ldr	r3, [pc, #56]	; (8006410 <HAL_RCC_ClockConfig+0x358>)
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	f003 030f 	and.w	r3, r3, #15
 80063de:	4a0d      	ldr	r2, [pc, #52]	; (8006414 <HAL_RCC_ClockConfig+0x35c>)
 80063e0:	5cd3      	ldrb	r3, [r2, r3]
 80063e2:	f003 031f 	and.w	r3, r3, #31
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	fa22 f303 	lsr.w	r3, r2, r3
 80063ec:	4a0a      	ldr	r2, [pc, #40]	; (8006418 <HAL_RCC_ClockConfig+0x360>)
 80063ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80063f0:	4a0a      	ldr	r2, [pc, #40]	; (800641c <HAL_RCC_ClockConfig+0x364>)
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80063f6:	4b0a      	ldr	r3, [pc, #40]	; (8006420 <HAL_RCC_ClockConfig+0x368>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fc fcb0 	bl	8002d60 <HAL_InitTick>
 8006400:	4603      	mov	r3, r0
 8006402:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006404:	7bfb      	ldrb	r3, [r7, #15]
}
 8006406:	4618      	mov	r0, r3
 8006408:	3718      	adds	r7, #24
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	58024400 	.word	0x58024400
 8006414:	0800d24c 	.word	0x0800d24c
 8006418:	24000018 	.word	0x24000018
 800641c:	24000014 	.word	0x24000014
 8006420:	2400001c 	.word	0x2400001c

08006424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006424:	b480      	push	{r7}
 8006426:	b089      	sub	sp, #36	; 0x24
 8006428:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800642a:	4bb3      	ldr	r3, [pc, #716]	; (80066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006432:	2b18      	cmp	r3, #24
 8006434:	f200 8155 	bhi.w	80066e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8006438:	a201      	add	r2, pc, #4	; (adr r2, 8006440 <HAL_RCC_GetSysClockFreq+0x1c>)
 800643a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643e:	bf00      	nop
 8006440:	080064a5 	.word	0x080064a5
 8006444:	080066e3 	.word	0x080066e3
 8006448:	080066e3 	.word	0x080066e3
 800644c:	080066e3 	.word	0x080066e3
 8006450:	080066e3 	.word	0x080066e3
 8006454:	080066e3 	.word	0x080066e3
 8006458:	080066e3 	.word	0x080066e3
 800645c:	080066e3 	.word	0x080066e3
 8006460:	080064cb 	.word	0x080064cb
 8006464:	080066e3 	.word	0x080066e3
 8006468:	080066e3 	.word	0x080066e3
 800646c:	080066e3 	.word	0x080066e3
 8006470:	080066e3 	.word	0x080066e3
 8006474:	080066e3 	.word	0x080066e3
 8006478:	080066e3 	.word	0x080066e3
 800647c:	080066e3 	.word	0x080066e3
 8006480:	080064d1 	.word	0x080064d1
 8006484:	080066e3 	.word	0x080066e3
 8006488:	080066e3 	.word	0x080066e3
 800648c:	080066e3 	.word	0x080066e3
 8006490:	080066e3 	.word	0x080066e3
 8006494:	080066e3 	.word	0x080066e3
 8006498:	080066e3 	.word	0x080066e3
 800649c:	080066e3 	.word	0x080066e3
 80064a0:	080064d7 	.word	0x080064d7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064a4:	4b94      	ldr	r3, [pc, #592]	; (80066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0320 	and.w	r3, r3, #32
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d009      	beq.n	80064c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80064b0:	4b91      	ldr	r3, [pc, #580]	; (80066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	08db      	lsrs	r3, r3, #3
 80064b6:	f003 0303 	and.w	r3, r3, #3
 80064ba:	4a90      	ldr	r2, [pc, #576]	; (80066fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80064bc:	fa22 f303 	lsr.w	r3, r2, r3
 80064c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80064c2:	e111      	b.n	80066e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80064c4:	4b8d      	ldr	r3, [pc, #564]	; (80066fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80064c6:	61bb      	str	r3, [r7, #24]
    break;
 80064c8:	e10e      	b.n	80066e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80064ca:	4b8d      	ldr	r3, [pc, #564]	; (8006700 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80064cc:	61bb      	str	r3, [r7, #24]
    break;
 80064ce:	e10b      	b.n	80066e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80064d0:	4b8c      	ldr	r3, [pc, #560]	; (8006704 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80064d2:	61bb      	str	r3, [r7, #24]
    break;
 80064d4:	e108      	b.n	80066e8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80064d6:	4b88      	ldr	r3, [pc, #544]	; (80066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064da:	f003 0303 	and.w	r3, r3, #3
 80064de:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80064e0:	4b85      	ldr	r3, [pc, #532]	; (80066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e4:	091b      	lsrs	r3, r3, #4
 80064e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064ea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80064ec:	4b82      	ldr	r3, [pc, #520]	; (80066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80064f6:	4b80      	ldr	r3, [pc, #512]	; (80066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fa:	08db      	lsrs	r3, r3, #3
 80064fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	fb02 f303 	mul.w	r3, r2, r3
 8006506:	ee07 3a90 	vmov	s15, r3
 800650a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800650e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 80e1 	beq.w	80066dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2b02      	cmp	r3, #2
 800651e:	f000 8083 	beq.w	8006628 <HAL_RCC_GetSysClockFreq+0x204>
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2b02      	cmp	r3, #2
 8006526:	f200 80a1 	bhi.w	800666c <HAL_RCC_GetSysClockFreq+0x248>
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d003      	beq.n	8006538 <HAL_RCC_GetSysClockFreq+0x114>
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d056      	beq.n	80065e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006536:	e099      	b.n	800666c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006538:	4b6f      	ldr	r3, [pc, #444]	; (80066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0320 	and.w	r3, r3, #32
 8006540:	2b00      	cmp	r3, #0
 8006542:	d02d      	beq.n	80065a0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006544:	4b6c      	ldr	r3, [pc, #432]	; (80066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	08db      	lsrs	r3, r3, #3
 800654a:	f003 0303 	and.w	r3, r3, #3
 800654e:	4a6b      	ldr	r2, [pc, #428]	; (80066fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006550:	fa22 f303 	lsr.w	r3, r2, r3
 8006554:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	ee07 3a90 	vmov	s15, r3
 800655c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	ee07 3a90 	vmov	s15, r3
 8006566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800656a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800656e:	4b62      	ldr	r3, [pc, #392]	; (80066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006576:	ee07 3a90 	vmov	s15, r3
 800657a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800657e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006582:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006708 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800658a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800658e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800659a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800659e:	e087      	b.n	80066b0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	ee07 3a90 	vmov	s15, r3
 80065a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800670c <HAL_RCC_GetSysClockFreq+0x2e8>
 80065ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065b2:	4b51      	ldr	r3, [pc, #324]	; (80066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ba:	ee07 3a90 	vmov	s15, r3
 80065be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80065c6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006708 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065e2:	e065      	b.n	80066b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	ee07 3a90 	vmov	s15, r3
 80065ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006710 <HAL_RCC_GetSysClockFreq+0x2ec>
 80065f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065f6:	4b40      	ldr	r3, [pc, #256]	; (80066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065fe:	ee07 3a90 	vmov	s15, r3
 8006602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006606:	ed97 6a02 	vldr	s12, [r7, #8]
 800660a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006708 <HAL_RCC_GetSysClockFreq+0x2e4>
 800660e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800661a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800661e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006622:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006626:	e043      	b.n	80066b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	ee07 3a90 	vmov	s15, r3
 800662e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006632:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006714 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800663a:	4b2f      	ldr	r3, [pc, #188]	; (80066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800663c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006642:	ee07 3a90 	vmov	s15, r3
 8006646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800664a:	ed97 6a02 	vldr	s12, [r7, #8]
 800664e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006708 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800665a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800665e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006666:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800666a:	e021      	b.n	80066b0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	ee07 3a90 	vmov	s15, r3
 8006672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006676:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006710 <HAL_RCC_GetSysClockFreq+0x2ec>
 800667a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800667e:	4b1e      	ldr	r3, [pc, #120]	; (80066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006686:	ee07 3a90 	vmov	s15, r3
 800668a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800668e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006692:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006708 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800669a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800669e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066ae:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80066b0:	4b11      	ldr	r3, [pc, #68]	; (80066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b4:	0a5b      	lsrs	r3, r3, #9
 80066b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066ba:	3301      	adds	r3, #1
 80066bc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	ee07 3a90 	vmov	s15, r3
 80066c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80066c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80066cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066d4:	ee17 3a90 	vmov	r3, s15
 80066d8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80066da:	e005      	b.n	80066e8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80066dc:	2300      	movs	r3, #0
 80066de:	61bb      	str	r3, [r7, #24]
    break;
 80066e0:	e002      	b.n	80066e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80066e2:	4b07      	ldr	r3, [pc, #28]	; (8006700 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80066e4:	61bb      	str	r3, [r7, #24]
    break;
 80066e6:	bf00      	nop
  }

  return sysclockfreq;
 80066e8:	69bb      	ldr	r3, [r7, #24]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3724      	adds	r7, #36	; 0x24
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	58024400 	.word	0x58024400
 80066fc:	03d09000 	.word	0x03d09000
 8006700:	003d0900 	.word	0x003d0900
 8006704:	007a1200 	.word	0x007a1200
 8006708:	46000000 	.word	0x46000000
 800670c:	4c742400 	.word	0x4c742400
 8006710:	4a742400 	.word	0x4a742400
 8006714:	4af42400 	.word	0x4af42400

08006718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800671e:	f7ff fe81 	bl	8006424 <HAL_RCC_GetSysClockFreq>
 8006722:	4602      	mov	r2, r0
 8006724:	4b10      	ldr	r3, [pc, #64]	; (8006768 <HAL_RCC_GetHCLKFreq+0x50>)
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	0a1b      	lsrs	r3, r3, #8
 800672a:	f003 030f 	and.w	r3, r3, #15
 800672e:	490f      	ldr	r1, [pc, #60]	; (800676c <HAL_RCC_GetHCLKFreq+0x54>)
 8006730:	5ccb      	ldrb	r3, [r1, r3]
 8006732:	f003 031f 	and.w	r3, r3, #31
 8006736:	fa22 f303 	lsr.w	r3, r2, r3
 800673a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800673c:	4b0a      	ldr	r3, [pc, #40]	; (8006768 <HAL_RCC_GetHCLKFreq+0x50>)
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	f003 030f 	and.w	r3, r3, #15
 8006744:	4a09      	ldr	r2, [pc, #36]	; (800676c <HAL_RCC_GetHCLKFreq+0x54>)
 8006746:	5cd3      	ldrb	r3, [r2, r3]
 8006748:	f003 031f 	and.w	r3, r3, #31
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	fa22 f303 	lsr.w	r3, r2, r3
 8006752:	4a07      	ldr	r2, [pc, #28]	; (8006770 <HAL_RCC_GetHCLKFreq+0x58>)
 8006754:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006756:	4a07      	ldr	r2, [pc, #28]	; (8006774 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800675c:	4b04      	ldr	r3, [pc, #16]	; (8006770 <HAL_RCC_GetHCLKFreq+0x58>)
 800675e:	681b      	ldr	r3, [r3, #0]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3708      	adds	r7, #8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	58024400 	.word	0x58024400
 800676c:	0800d24c 	.word	0x0800d24c
 8006770:	24000018 	.word	0x24000018
 8006774:	24000014 	.word	0x24000014

08006778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800677c:	f7ff ffcc 	bl	8006718 <HAL_RCC_GetHCLKFreq>
 8006780:	4602      	mov	r2, r0
 8006782:	4b06      	ldr	r3, [pc, #24]	; (800679c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	091b      	lsrs	r3, r3, #4
 8006788:	f003 0307 	and.w	r3, r3, #7
 800678c:	4904      	ldr	r1, [pc, #16]	; (80067a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800678e:	5ccb      	ldrb	r3, [r1, r3]
 8006790:	f003 031f 	and.w	r3, r3, #31
 8006794:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006798:	4618      	mov	r0, r3
 800679a:	bd80      	pop	{r7, pc}
 800679c:	58024400 	.word	0x58024400
 80067a0:	0800d24c 	.word	0x0800d24c

080067a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80067a8:	f7ff ffb6 	bl	8006718 <HAL_RCC_GetHCLKFreq>
 80067ac:	4602      	mov	r2, r0
 80067ae:	4b06      	ldr	r3, [pc, #24]	; (80067c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	0a1b      	lsrs	r3, r3, #8
 80067b4:	f003 0307 	and.w	r3, r3, #7
 80067b8:	4904      	ldr	r1, [pc, #16]	; (80067cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80067ba:	5ccb      	ldrb	r3, [r1, r3]
 80067bc:	f003 031f 	and.w	r3, r3, #31
 80067c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	58024400 	.word	0x58024400
 80067cc:	0800d24c 	.word	0x0800d24c

080067d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80067d8:	2300      	movs	r3, #0
 80067da:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80067dc:	2300      	movs	r3, #0
 80067de:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d03f      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067f4:	d02a      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80067f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067fa:	d824      	bhi.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80067fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006800:	d018      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006802:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006806:	d81e      	bhi.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006808:	2b00      	cmp	r3, #0
 800680a:	d003      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800680c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006810:	d007      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006812:	e018      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006814:	4bab      	ldr	r3, [pc, #684]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006818:	4aaa      	ldr	r2, [pc, #680]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800681a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800681e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006820:	e015      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	3304      	adds	r3, #4
 8006826:	2102      	movs	r1, #2
 8006828:	4618      	mov	r0, r3
 800682a:	f001 fff3 	bl	8008814 <RCCEx_PLL2_Config>
 800682e:	4603      	mov	r3, r0
 8006830:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006832:	e00c      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	3324      	adds	r3, #36	; 0x24
 8006838:	2102      	movs	r1, #2
 800683a:	4618      	mov	r0, r3
 800683c:	f002 f89c 	bl	8008978 <RCCEx_PLL3_Config>
 8006840:	4603      	mov	r3, r0
 8006842:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006844:	e003      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	75fb      	strb	r3, [r7, #23]
      break;
 800684a:	e000      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800684c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800684e:	7dfb      	ldrb	r3, [r7, #23]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d109      	bne.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006854:	4b9b      	ldr	r3, [pc, #620]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006858:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006860:	4998      	ldr	r1, [pc, #608]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006862:	4313      	orrs	r3, r2
 8006864:	650b      	str	r3, [r1, #80]	; 0x50
 8006866:	e001      	b.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006868:	7dfb      	ldrb	r3, [r7, #23]
 800686a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006874:	2b00      	cmp	r3, #0
 8006876:	d03d      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800687c:	2b04      	cmp	r3, #4
 800687e:	d826      	bhi.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006880:	a201      	add	r2, pc, #4	; (adr r2, 8006888 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006886:	bf00      	nop
 8006888:	0800689d 	.word	0x0800689d
 800688c:	080068ab 	.word	0x080068ab
 8006890:	080068bd 	.word	0x080068bd
 8006894:	080068d5 	.word	0x080068d5
 8006898:	080068d5 	.word	0x080068d5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800689c:	4b89      	ldr	r3, [pc, #548]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800689e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a0:	4a88      	ldr	r2, [pc, #544]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068a8:	e015      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	3304      	adds	r3, #4
 80068ae:	2100      	movs	r1, #0
 80068b0:	4618      	mov	r0, r3
 80068b2:	f001 ffaf 	bl	8008814 <RCCEx_PLL2_Config>
 80068b6:	4603      	mov	r3, r0
 80068b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068ba:	e00c      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	3324      	adds	r3, #36	; 0x24
 80068c0:	2100      	movs	r1, #0
 80068c2:	4618      	mov	r0, r3
 80068c4:	f002 f858 	bl	8008978 <RCCEx_PLL3_Config>
 80068c8:	4603      	mov	r3, r0
 80068ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068cc:	e003      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	75fb      	strb	r3, [r7, #23]
      break;
 80068d2:	e000      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80068d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068d6:	7dfb      	ldrb	r3, [r7, #23]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d109      	bne.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80068dc:	4b79      	ldr	r3, [pc, #484]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068e0:	f023 0207 	bic.w	r2, r3, #7
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e8:	4976      	ldr	r1, [pc, #472]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	650b      	str	r3, [r1, #80]	; 0x50
 80068ee:	e001      	b.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f0:	7dfb      	ldrb	r3, [r7, #23]
 80068f2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d042      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006908:	d02b      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800690a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800690e:	d825      	bhi.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006910:	2bc0      	cmp	r3, #192	; 0xc0
 8006912:	d028      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006914:	2bc0      	cmp	r3, #192	; 0xc0
 8006916:	d821      	bhi.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006918:	2b80      	cmp	r3, #128	; 0x80
 800691a:	d016      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800691c:	2b80      	cmp	r3, #128	; 0x80
 800691e:	d81d      	bhi.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006924:	2b40      	cmp	r3, #64	; 0x40
 8006926:	d007      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006928:	e018      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800692a:	4b66      	ldr	r3, [pc, #408]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800692c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692e:	4a65      	ldr	r2, [pc, #404]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006934:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006936:	e017      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	3304      	adds	r3, #4
 800693c:	2100      	movs	r1, #0
 800693e:	4618      	mov	r0, r3
 8006940:	f001 ff68 	bl	8008814 <RCCEx_PLL2_Config>
 8006944:	4603      	mov	r3, r0
 8006946:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006948:	e00e      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	3324      	adds	r3, #36	; 0x24
 800694e:	2100      	movs	r1, #0
 8006950:	4618      	mov	r0, r3
 8006952:	f002 f811 	bl	8008978 <RCCEx_PLL3_Config>
 8006956:	4603      	mov	r3, r0
 8006958:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800695a:	e005      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	75fb      	strb	r3, [r7, #23]
      break;
 8006960:	e002      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006962:	bf00      	nop
 8006964:	e000      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006966:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006968:	7dfb      	ldrb	r3, [r7, #23]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d109      	bne.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800696e:	4b55      	ldr	r3, [pc, #340]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006972:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800697a:	4952      	ldr	r1, [pc, #328]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800697c:	4313      	orrs	r3, r2
 800697e:	650b      	str	r3, [r1, #80]	; 0x50
 8006980:	e001      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006982:	7dfb      	ldrb	r3, [r7, #23]
 8006984:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800698e:	2b00      	cmp	r3, #0
 8006990:	d049      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006998:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800699c:	d030      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800699e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069a2:	d82a      	bhi.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80069a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80069a8:	d02c      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80069aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80069ae:	d824      	bhi.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80069b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069b4:	d018      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80069b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069ba:	d81e      	bhi.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d003      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80069c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069c4:	d007      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80069c6:	e018      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069c8:	4b3e      	ldr	r3, [pc, #248]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069cc:	4a3d      	ldr	r2, [pc, #244]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80069d4:	e017      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	3304      	adds	r3, #4
 80069da:	2100      	movs	r1, #0
 80069dc:	4618      	mov	r0, r3
 80069de:	f001 ff19 	bl	8008814 <RCCEx_PLL2_Config>
 80069e2:	4603      	mov	r3, r0
 80069e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80069e6:	e00e      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	3324      	adds	r3, #36	; 0x24
 80069ec:	2100      	movs	r1, #0
 80069ee:	4618      	mov	r0, r3
 80069f0:	f001 ffc2 	bl	8008978 <RCCEx_PLL3_Config>
 80069f4:	4603      	mov	r3, r0
 80069f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80069f8:	e005      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	75fb      	strb	r3, [r7, #23]
      break;
 80069fe:	e002      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006a00:	bf00      	nop
 8006a02:	e000      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006a04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a06:	7dfb      	ldrb	r3, [r7, #23]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10a      	bne.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006a0c:	4b2d      	ldr	r3, [pc, #180]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a10:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006a1a:	492a      	ldr	r1, [pc, #168]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	658b      	str	r3, [r1, #88]	; 0x58
 8006a20:	e001      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a22:	7dfb      	ldrb	r3, [r7, #23]
 8006a24:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d04c      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006a38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a3c:	d030      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006a3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a42:	d82a      	bhi.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006a44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a48:	d02c      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006a4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a4e:	d824      	bhi.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006a50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a54:	d018      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006a56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a5a:	d81e      	bhi.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d003      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006a60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a64:	d007      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006a66:	e018      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a68:	4b16      	ldr	r3, [pc, #88]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6c:	4a15      	ldr	r2, [pc, #84]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a74:	e017      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	3304      	adds	r3, #4
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f001 fec9 	bl	8008814 <RCCEx_PLL2_Config>
 8006a82:	4603      	mov	r3, r0
 8006a84:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006a86:	e00e      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3324      	adds	r3, #36	; 0x24
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f001 ff72 	bl	8008978 <RCCEx_PLL3_Config>
 8006a94:	4603      	mov	r3, r0
 8006a96:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a98:	e005      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	75fb      	strb	r3, [r7, #23]
      break;
 8006a9e:	e002      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006aa0:	bf00      	nop
 8006aa2:	e000      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006aa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006aa6:	7dfb      	ldrb	r3, [r7, #23]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10d      	bne.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006aac:	4b05      	ldr	r3, [pc, #20]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ab0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006aba:	4902      	ldr	r1, [pc, #8]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	658b      	str	r3, [r1, #88]	; 0x58
 8006ac0:	e004      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006ac2:	bf00      	nop
 8006ac4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac8:	7dfb      	ldrb	r3, [r7, #23]
 8006aca:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d032      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006adc:	2b30      	cmp	r3, #48	; 0x30
 8006ade:	d01c      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006ae0:	2b30      	cmp	r3, #48	; 0x30
 8006ae2:	d817      	bhi.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006ae4:	2b20      	cmp	r3, #32
 8006ae6:	d00c      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006ae8:	2b20      	cmp	r3, #32
 8006aea:	d813      	bhi.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d016      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006af0:	2b10      	cmp	r3, #16
 8006af2:	d10f      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006af4:	4baf      	ldr	r3, [pc, #700]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af8:	4aae      	ldr	r2, [pc, #696]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006afe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006b00:	e00e      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	3304      	adds	r3, #4
 8006b06:	2102      	movs	r1, #2
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f001 fe83 	bl	8008814 <RCCEx_PLL2_Config>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006b12:	e005      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	75fb      	strb	r3, [r7, #23]
      break;
 8006b18:	e002      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006b1a:	bf00      	nop
 8006b1c:	e000      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006b1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b20:	7dfb      	ldrb	r3, [r7, #23]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d109      	bne.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006b26:	4ba3      	ldr	r3, [pc, #652]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b2a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b32:	49a0      	ldr	r1, [pc, #640]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006b38:	e001      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b3a:	7dfb      	ldrb	r3, [r7, #23]
 8006b3c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d047      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b52:	d030      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006b54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b58:	d82a      	bhi.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006b5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b5e:	d02c      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006b60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b64:	d824      	bhi.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b6a:	d018      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8006b6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b70:	d81e      	bhi.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b7a:	d007      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006b7c:	e018      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b7e:	4b8d      	ldr	r3, [pc, #564]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b82:	4a8c      	ldr	r2, [pc, #560]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006b8a:	e017      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3304      	adds	r3, #4
 8006b90:	2100      	movs	r1, #0
 8006b92:	4618      	mov	r0, r3
 8006b94:	f001 fe3e 	bl	8008814 <RCCEx_PLL2_Config>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006b9c:	e00e      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	3324      	adds	r3, #36	; 0x24
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f001 fee7 	bl	8008978 <RCCEx_PLL3_Config>
 8006baa:	4603      	mov	r3, r0
 8006bac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006bae:	e005      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8006bb4:	e002      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006bb6:	bf00      	nop
 8006bb8:	e000      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006bba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bbc:	7dfb      	ldrb	r3, [r7, #23]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d109      	bne.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006bc2:	4b7c      	ldr	r3, [pc, #496]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bc6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bce:	4979      	ldr	r1, [pc, #484]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	650b      	str	r3, [r1, #80]	; 0x50
 8006bd4:	e001      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bd6:	7dfb      	ldrb	r3, [r7, #23]
 8006bd8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d049      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bee:	d02e      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8006bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bf4:	d828      	bhi.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006bf6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006bfa:	d02a      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8006bfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c00:	d822      	bhi.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006c02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c06:	d026      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006c08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c0c:	d81c      	bhi.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006c0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c12:	d010      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006c14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c18:	d816      	bhi.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d01d      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8006c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c22:	d111      	bne.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	3304      	adds	r3, #4
 8006c28:	2101      	movs	r1, #1
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f001 fdf2 	bl	8008814 <RCCEx_PLL2_Config>
 8006c30:	4603      	mov	r3, r0
 8006c32:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006c34:	e012      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	3324      	adds	r3, #36	; 0x24
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f001 fe9b 	bl	8008978 <RCCEx_PLL3_Config>
 8006c42:	4603      	mov	r3, r0
 8006c44:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006c46:	e009      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c4c:	e006      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006c4e:	bf00      	nop
 8006c50:	e004      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006c52:	bf00      	nop
 8006c54:	e002      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006c56:	bf00      	nop
 8006c58:	e000      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006c5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c5c:	7dfb      	ldrb	r3, [r7, #23]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d109      	bne.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006c62:	4b54      	ldr	r3, [pc, #336]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c66:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c6e:	4951      	ldr	r1, [pc, #324]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	650b      	str	r3, [r1, #80]	; 0x50
 8006c74:	e001      	b.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c76:	7dfb      	ldrb	r3, [r7, #23]
 8006c78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d04b      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c90:	d02e      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006c92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c96:	d828      	bhi.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c9c:	d02a      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca2:	d822      	bhi.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006ca4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ca8:	d026      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006caa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cae:	d81c      	bhi.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006cb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cb4:	d010      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006cb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cba:	d816      	bhi.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d01d      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006cc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cc4:	d111      	bne.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	3304      	adds	r3, #4
 8006cca:	2101      	movs	r1, #1
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f001 fda1 	bl	8008814 <RCCEx_PLL2_Config>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006cd6:	e012      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	3324      	adds	r3, #36	; 0x24
 8006cdc:	2101      	movs	r1, #1
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f001 fe4a 	bl	8008978 <RCCEx_PLL3_Config>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006ce8:	e009      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	75fb      	strb	r3, [r7, #23]
      break;
 8006cee:	e006      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006cf0:	bf00      	nop
 8006cf2:	e004      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006cf4:	bf00      	nop
 8006cf6:	e002      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006cf8:	bf00      	nop
 8006cfa:	e000      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006cfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cfe:	7dfb      	ldrb	r3, [r7, #23]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10a      	bne.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006d04:	4b2b      	ldr	r3, [pc, #172]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d08:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d12:	4928      	ldr	r1, [pc, #160]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	658b      	str	r3, [r1, #88]	; 0x58
 8006d18:	e001      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d1a:	7dfb      	ldrb	r3, [r7, #23]
 8006d1c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d02f      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d32:	d00e      	beq.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d38:	d814      	bhi.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d015      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006d3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d42:	d10f      	bne.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d44:	4b1b      	ldr	r3, [pc, #108]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d48:	4a1a      	ldr	r2, [pc, #104]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006d50:	e00c      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	3304      	adds	r3, #4
 8006d56:	2101      	movs	r1, #1
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f001 fd5b 	bl	8008814 <RCCEx_PLL2_Config>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006d62:	e003      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	75fb      	strb	r3, [r7, #23]
      break;
 8006d68:	e000      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006d6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d6c:	7dfb      	ldrb	r3, [r7, #23]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d109      	bne.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006d72:	4b10      	ldr	r3, [pc, #64]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d76:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d7e:	490d      	ldr	r1, [pc, #52]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006d80:	4313      	orrs	r3, r2
 8006d82:	650b      	str	r3, [r1, #80]	; 0x50
 8006d84:	e001      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d86:	7dfb      	ldrb	r3, [r7, #23]
 8006d88:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d033      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d81c      	bhi.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006d9e:	a201      	add	r2, pc, #4	; (adr r2, 8006da4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da4:	08006ddf 	.word	0x08006ddf
 8006da8:	08006db9 	.word	0x08006db9
 8006dac:	08006dc7 	.word	0x08006dc7
 8006db0:	08006ddf 	.word	0x08006ddf
 8006db4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006db8:	4bb8      	ldr	r3, [pc, #736]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbc:	4ab7      	ldr	r2, [pc, #732]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006dbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006dc4:	e00c      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	3304      	adds	r3, #4
 8006dca:	2102      	movs	r1, #2
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f001 fd21 	bl	8008814 <RCCEx_PLL2_Config>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006dd6:	e003      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	75fb      	strb	r3, [r7, #23]
      break;
 8006ddc:	e000      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006dde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d109      	bne.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006de6:	4bad      	ldr	r3, [pc, #692]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dea:	f023 0203 	bic.w	r2, r3, #3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df2:	49aa      	ldr	r1, [pc, #680]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006df8:	e001      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dfa:	7dfb      	ldrb	r3, [r7, #23]
 8006dfc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f000 8086 	beq.w	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e0c:	4ba4      	ldr	r3, [pc, #656]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4aa3      	ldr	r2, [pc, #652]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e18:	f7fb ffec 	bl	8002df4 <HAL_GetTick>
 8006e1c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e1e:	e009      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e20:	f7fb ffe8 	bl	8002df4 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	2b64      	cmp	r3, #100	; 0x64
 8006e2c:	d902      	bls.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	75fb      	strb	r3, [r7, #23]
        break;
 8006e32:	e005      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e34:	4b9a      	ldr	r3, [pc, #616]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d0ef      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006e40:	7dfb      	ldrb	r3, [r7, #23]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d166      	bne.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006e46:	4b95      	ldr	r3, [pc, #596]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e50:	4053      	eors	r3, r2
 8006e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d013      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e5a:	4b90      	ldr	r3, [pc, #576]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e62:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e64:	4b8d      	ldr	r3, [pc, #564]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e68:	4a8c      	ldr	r2, [pc, #560]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e6e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e70:	4b8a      	ldr	r3, [pc, #552]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e74:	4a89      	ldr	r2, [pc, #548]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e7a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006e7c:	4a87      	ldr	r2, [pc, #540]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e8c:	d115      	bne.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e8e:	f7fb ffb1 	bl	8002df4 <HAL_GetTick>
 8006e92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e94:	e00b      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e96:	f7fb ffad 	bl	8002df4 <HAL_GetTick>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d902      	bls.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	75fb      	strb	r3, [r7, #23]
            break;
 8006eac:	e005      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006eae:	4b7b      	ldr	r3, [pc, #492]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d0ed      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006eba:	7dfb      	ldrb	r3, [r7, #23]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d126      	bne.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ece:	d10d      	bne.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006ed0:	4b72      	ldr	r3, [pc, #456]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ede:	0919      	lsrs	r1, r3, #4
 8006ee0:	4b70      	ldr	r3, [pc, #448]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006ee2:	400b      	ands	r3, r1
 8006ee4:	496d      	ldr	r1, [pc, #436]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	610b      	str	r3, [r1, #16]
 8006eea:	e005      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006eec:	4b6b      	ldr	r3, [pc, #428]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	4a6a      	ldr	r2, [pc, #424]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ef2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006ef6:	6113      	str	r3, [r2, #16]
 8006ef8:	4b68      	ldr	r3, [pc, #416]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006efa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f06:	4965      	ldr	r1, [pc, #404]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	670b      	str	r3, [r1, #112]	; 0x70
 8006f0c:	e004      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f0e:	7dfb      	ldrb	r3, [r7, #23]
 8006f10:	75bb      	strb	r3, [r7, #22]
 8006f12:	e001      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f14:	7dfb      	ldrb	r3, [r7, #23]
 8006f16:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0301 	and.w	r3, r3, #1
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d07e      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f28:	2b28      	cmp	r3, #40	; 0x28
 8006f2a:	d867      	bhi.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006f2c:	a201      	add	r2, pc, #4	; (adr r2, 8006f34 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f32:	bf00      	nop
 8006f34:	08007003 	.word	0x08007003
 8006f38:	08006ffd 	.word	0x08006ffd
 8006f3c:	08006ffd 	.word	0x08006ffd
 8006f40:	08006ffd 	.word	0x08006ffd
 8006f44:	08006ffd 	.word	0x08006ffd
 8006f48:	08006ffd 	.word	0x08006ffd
 8006f4c:	08006ffd 	.word	0x08006ffd
 8006f50:	08006ffd 	.word	0x08006ffd
 8006f54:	08006fd9 	.word	0x08006fd9
 8006f58:	08006ffd 	.word	0x08006ffd
 8006f5c:	08006ffd 	.word	0x08006ffd
 8006f60:	08006ffd 	.word	0x08006ffd
 8006f64:	08006ffd 	.word	0x08006ffd
 8006f68:	08006ffd 	.word	0x08006ffd
 8006f6c:	08006ffd 	.word	0x08006ffd
 8006f70:	08006ffd 	.word	0x08006ffd
 8006f74:	08006feb 	.word	0x08006feb
 8006f78:	08006ffd 	.word	0x08006ffd
 8006f7c:	08006ffd 	.word	0x08006ffd
 8006f80:	08006ffd 	.word	0x08006ffd
 8006f84:	08006ffd 	.word	0x08006ffd
 8006f88:	08006ffd 	.word	0x08006ffd
 8006f8c:	08006ffd 	.word	0x08006ffd
 8006f90:	08006ffd 	.word	0x08006ffd
 8006f94:	08007003 	.word	0x08007003
 8006f98:	08006ffd 	.word	0x08006ffd
 8006f9c:	08006ffd 	.word	0x08006ffd
 8006fa0:	08006ffd 	.word	0x08006ffd
 8006fa4:	08006ffd 	.word	0x08006ffd
 8006fa8:	08006ffd 	.word	0x08006ffd
 8006fac:	08006ffd 	.word	0x08006ffd
 8006fb0:	08006ffd 	.word	0x08006ffd
 8006fb4:	08007003 	.word	0x08007003
 8006fb8:	08006ffd 	.word	0x08006ffd
 8006fbc:	08006ffd 	.word	0x08006ffd
 8006fc0:	08006ffd 	.word	0x08006ffd
 8006fc4:	08006ffd 	.word	0x08006ffd
 8006fc8:	08006ffd 	.word	0x08006ffd
 8006fcc:	08006ffd 	.word	0x08006ffd
 8006fd0:	08006ffd 	.word	0x08006ffd
 8006fd4:	08007003 	.word	0x08007003
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	3304      	adds	r3, #4
 8006fdc:	2101      	movs	r1, #1
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f001 fc18 	bl	8008814 <RCCEx_PLL2_Config>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006fe8:	e00c      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	3324      	adds	r3, #36	; 0x24
 8006fee:	2101      	movs	r1, #1
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f001 fcc1 	bl	8008978 <RCCEx_PLL3_Config>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006ffa:	e003      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8007000:	e000      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007002:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007004:	7dfb      	ldrb	r3, [r7, #23]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d109      	bne.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800700a:	4b24      	ldr	r3, [pc, #144]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800700c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800700e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007016:	4921      	ldr	r1, [pc, #132]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007018:	4313      	orrs	r3, r2
 800701a:	654b      	str	r3, [r1, #84]	; 0x54
 800701c:	e001      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800701e:	7dfb      	ldrb	r3, [r7, #23]
 8007020:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0302 	and.w	r3, r3, #2
 800702a:	2b00      	cmp	r3, #0
 800702c:	d03e      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007032:	2b05      	cmp	r3, #5
 8007034:	d820      	bhi.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8007036:	a201      	add	r2, pc, #4	; (adr r2, 800703c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8007038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703c:	0800707f 	.word	0x0800707f
 8007040:	08007055 	.word	0x08007055
 8007044:	08007067 	.word	0x08007067
 8007048:	0800707f 	.word	0x0800707f
 800704c:	0800707f 	.word	0x0800707f
 8007050:	0800707f 	.word	0x0800707f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	3304      	adds	r3, #4
 8007058:	2101      	movs	r1, #1
 800705a:	4618      	mov	r0, r3
 800705c:	f001 fbda 	bl	8008814 <RCCEx_PLL2_Config>
 8007060:	4603      	mov	r3, r0
 8007062:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007064:	e00c      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	3324      	adds	r3, #36	; 0x24
 800706a:	2101      	movs	r1, #1
 800706c:	4618      	mov	r0, r3
 800706e:	f001 fc83 	bl	8008978 <RCCEx_PLL3_Config>
 8007072:	4603      	mov	r3, r0
 8007074:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007076:	e003      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	75fb      	strb	r3, [r7, #23]
      break;
 800707c:	e000      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800707e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007080:	7dfb      	ldrb	r3, [r7, #23]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d110      	bne.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007086:	4b05      	ldr	r3, [pc, #20]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708a:	f023 0207 	bic.w	r2, r3, #7
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007092:	4902      	ldr	r1, [pc, #8]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007094:	4313      	orrs	r3, r2
 8007096:	654b      	str	r3, [r1, #84]	; 0x54
 8007098:	e008      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800709a:	bf00      	nop
 800709c:	58024400 	.word	0x58024400
 80070a0:	58024800 	.word	0x58024800
 80070a4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a8:	7dfb      	ldrb	r3, [r7, #23]
 80070aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0304 	and.w	r3, r3, #4
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d039      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070be:	2b05      	cmp	r3, #5
 80070c0:	d820      	bhi.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80070c2:	a201      	add	r2, pc, #4	; (adr r2, 80070c8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80070c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c8:	0800710b 	.word	0x0800710b
 80070cc:	080070e1 	.word	0x080070e1
 80070d0:	080070f3 	.word	0x080070f3
 80070d4:	0800710b 	.word	0x0800710b
 80070d8:	0800710b 	.word	0x0800710b
 80070dc:	0800710b 	.word	0x0800710b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	3304      	adds	r3, #4
 80070e4:	2101      	movs	r1, #1
 80070e6:	4618      	mov	r0, r3
 80070e8:	f001 fb94 	bl	8008814 <RCCEx_PLL2_Config>
 80070ec:	4603      	mov	r3, r0
 80070ee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80070f0:	e00c      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	3324      	adds	r3, #36	; 0x24
 80070f6:	2101      	movs	r1, #1
 80070f8:	4618      	mov	r0, r3
 80070fa:	f001 fc3d 	bl	8008978 <RCCEx_PLL3_Config>
 80070fe:	4603      	mov	r3, r0
 8007100:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007102:	e003      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	75fb      	strb	r3, [r7, #23]
      break;
 8007108:	e000      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800710a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800710c:	7dfb      	ldrb	r3, [r7, #23]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10a      	bne.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007112:	4bb7      	ldr	r3, [pc, #732]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007116:	f023 0207 	bic.w	r2, r3, #7
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007120:	49b3      	ldr	r1, [pc, #716]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007122:	4313      	orrs	r3, r2
 8007124:	658b      	str	r3, [r1, #88]	; 0x58
 8007126:	e001      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007128:	7dfb      	ldrb	r3, [r7, #23]
 800712a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0320 	and.w	r3, r3, #32
 8007134:	2b00      	cmp	r3, #0
 8007136:	d04b      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800713e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007142:	d02e      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007144:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007148:	d828      	bhi.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800714a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800714e:	d02a      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007154:	d822      	bhi.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007156:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800715a:	d026      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800715c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007160:	d81c      	bhi.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007162:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007166:	d010      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007168:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800716c:	d816      	bhi.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800716e:	2b00      	cmp	r3, #0
 8007170:	d01d      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007172:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007176:	d111      	bne.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	3304      	adds	r3, #4
 800717c:	2100      	movs	r1, #0
 800717e:	4618      	mov	r0, r3
 8007180:	f001 fb48 	bl	8008814 <RCCEx_PLL2_Config>
 8007184:	4603      	mov	r3, r0
 8007186:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007188:	e012      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	3324      	adds	r3, #36	; 0x24
 800718e:	2102      	movs	r1, #2
 8007190:	4618      	mov	r0, r3
 8007192:	f001 fbf1 	bl	8008978 <RCCEx_PLL3_Config>
 8007196:	4603      	mov	r3, r0
 8007198:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800719a:	e009      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	75fb      	strb	r3, [r7, #23]
      break;
 80071a0:	e006      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80071a2:	bf00      	nop
 80071a4:	e004      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80071a6:	bf00      	nop
 80071a8:	e002      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80071aa:	bf00      	nop
 80071ac:	e000      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80071ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071b0:	7dfb      	ldrb	r3, [r7, #23]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10a      	bne.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071b6:	4b8e      	ldr	r3, [pc, #568]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80071b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071c4:	498a      	ldr	r1, [pc, #552]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	654b      	str	r3, [r1, #84]	; 0x54
 80071ca:	e001      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071cc:	7dfb      	ldrb	r3, [r7, #23]
 80071ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d04b      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80071e6:	d02e      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80071e8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80071ec:	d828      	bhi.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80071ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071f2:	d02a      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80071f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071f8:	d822      	bhi.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80071fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071fe:	d026      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007200:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007204:	d81c      	bhi.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800720a:	d010      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800720c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007210:	d816      	bhi.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007212:	2b00      	cmp	r3, #0
 8007214:	d01d      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800721a:	d111      	bne.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	3304      	adds	r3, #4
 8007220:	2100      	movs	r1, #0
 8007222:	4618      	mov	r0, r3
 8007224:	f001 faf6 	bl	8008814 <RCCEx_PLL2_Config>
 8007228:	4603      	mov	r3, r0
 800722a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800722c:	e012      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	3324      	adds	r3, #36	; 0x24
 8007232:	2102      	movs	r1, #2
 8007234:	4618      	mov	r0, r3
 8007236:	f001 fb9f 	bl	8008978 <RCCEx_PLL3_Config>
 800723a:	4603      	mov	r3, r0
 800723c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800723e:	e009      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	75fb      	strb	r3, [r7, #23]
      break;
 8007244:	e006      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007246:	bf00      	nop
 8007248:	e004      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800724a:	bf00      	nop
 800724c:	e002      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800724e:	bf00      	nop
 8007250:	e000      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007252:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007254:	7dfb      	ldrb	r3, [r7, #23]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10a      	bne.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800725a:	4b65      	ldr	r3, [pc, #404]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800725c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800725e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007268:	4961      	ldr	r1, [pc, #388]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800726a:	4313      	orrs	r3, r2
 800726c:	658b      	str	r3, [r1, #88]	; 0x58
 800726e:	e001      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007270:	7dfb      	ldrb	r3, [r7, #23]
 8007272:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800727c:	2b00      	cmp	r3, #0
 800727e:	d04b      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007286:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800728a:	d02e      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800728c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007290:	d828      	bhi.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007292:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007296:	d02a      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800729c:	d822      	bhi.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800729e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80072a2:	d026      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80072a4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80072a8:	d81c      	bhi.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80072aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072ae:	d010      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80072b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072b4:	d816      	bhi.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d01d      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80072ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072be:	d111      	bne.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	3304      	adds	r3, #4
 80072c4:	2100      	movs	r1, #0
 80072c6:	4618      	mov	r0, r3
 80072c8:	f001 faa4 	bl	8008814 <RCCEx_PLL2_Config>
 80072cc:	4603      	mov	r3, r0
 80072ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80072d0:	e012      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	3324      	adds	r3, #36	; 0x24
 80072d6:	2102      	movs	r1, #2
 80072d8:	4618      	mov	r0, r3
 80072da:	f001 fb4d 	bl	8008978 <RCCEx_PLL3_Config>
 80072de:	4603      	mov	r3, r0
 80072e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80072e2:	e009      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	75fb      	strb	r3, [r7, #23]
      break;
 80072e8:	e006      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80072ea:	bf00      	nop
 80072ec:	e004      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80072ee:	bf00      	nop
 80072f0:	e002      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80072f2:	bf00      	nop
 80072f4:	e000      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80072f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072f8:	7dfb      	ldrb	r3, [r7, #23]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10a      	bne.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80072fe:	4b3c      	ldr	r3, [pc, #240]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007302:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800730c:	4938      	ldr	r1, [pc, #224]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800730e:	4313      	orrs	r3, r2
 8007310:	658b      	str	r3, [r1, #88]	; 0x58
 8007312:	e001      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007314:	7dfb      	ldrb	r3, [r7, #23]
 8007316:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 0308 	and.w	r3, r3, #8
 8007320:	2b00      	cmp	r3, #0
 8007322:	d01a      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800732a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800732e:	d10a      	bne.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3324      	adds	r3, #36	; 0x24
 8007334:	2102      	movs	r1, #2
 8007336:	4618      	mov	r0, r3
 8007338:	f001 fb1e 	bl	8008978 <RCCEx_PLL3_Config>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d001      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007346:	4b2a      	ldr	r3, [pc, #168]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007354:	4926      	ldr	r1, [pc, #152]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007356:	4313      	orrs	r3, r2
 8007358:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 0310 	and.w	r3, r3, #16
 8007362:	2b00      	cmp	r3, #0
 8007364:	d01a      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800736c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007370:	d10a      	bne.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	3324      	adds	r3, #36	; 0x24
 8007376:	2102      	movs	r1, #2
 8007378:	4618      	mov	r0, r3
 800737a:	f001 fafd 	bl	8008978 <RCCEx_PLL3_Config>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007388:	4b19      	ldr	r3, [pc, #100]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800738a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800738c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007396:	4916      	ldr	r1, [pc, #88]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007398:	4313      	orrs	r3, r2
 800739a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d036      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80073ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073b2:	d01f      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80073b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073b8:	d817      	bhi.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d003      	beq.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80073be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073c2:	d009      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80073c4:	e011      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	3304      	adds	r3, #4
 80073ca:	2100      	movs	r1, #0
 80073cc:	4618      	mov	r0, r3
 80073ce:	f001 fa21 	bl	8008814 <RCCEx_PLL2_Config>
 80073d2:	4603      	mov	r3, r0
 80073d4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80073d6:	e00e      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	3324      	adds	r3, #36	; 0x24
 80073dc:	2102      	movs	r1, #2
 80073de:	4618      	mov	r0, r3
 80073e0:	f001 faca 	bl	8008978 <RCCEx_PLL3_Config>
 80073e4:	4603      	mov	r3, r0
 80073e6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80073e8:	e005      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	75fb      	strb	r3, [r7, #23]
      break;
 80073ee:	e002      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80073f0:	58024400 	.word	0x58024400
      break;
 80073f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073f6:	7dfb      	ldrb	r3, [r7, #23]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10a      	bne.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80073fc:	4b93      	ldr	r3, [pc, #588]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80073fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007400:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800740a:	4990      	ldr	r1, [pc, #576]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800740c:	4313      	orrs	r3, r2
 800740e:	658b      	str	r3, [r1, #88]	; 0x58
 8007410:	e001      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007412:	7dfb      	ldrb	r3, [r7, #23]
 8007414:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d033      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007428:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800742c:	d01c      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800742e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007432:	d816      	bhi.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007434:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007438:	d003      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800743a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800743e:	d007      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007440:	e00f      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007442:	4b82      	ldr	r3, [pc, #520]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007446:	4a81      	ldr	r2, [pc, #516]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800744c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800744e:	e00c      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	3324      	adds	r3, #36	; 0x24
 8007454:	2101      	movs	r1, #1
 8007456:	4618      	mov	r0, r3
 8007458:	f001 fa8e 	bl	8008978 <RCCEx_PLL3_Config>
 800745c:	4603      	mov	r3, r0
 800745e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007460:	e003      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	75fb      	strb	r3, [r7, #23]
      break;
 8007466:	e000      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007468:	bf00      	nop
    }

    if(ret == HAL_OK)
 800746a:	7dfb      	ldrb	r3, [r7, #23]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10a      	bne.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007470:	4b76      	ldr	r3, [pc, #472]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007474:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800747e:	4973      	ldr	r1, [pc, #460]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007480:	4313      	orrs	r3, r2
 8007482:	654b      	str	r3, [r1, #84]	; 0x54
 8007484:	e001      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007486:	7dfb      	ldrb	r3, [r7, #23]
 8007488:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007492:	2b00      	cmp	r3, #0
 8007494:	d029      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800749a:	2b00      	cmp	r3, #0
 800749c:	d003      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800749e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074a2:	d007      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80074a4:	e00f      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074a6:	4b69      	ldr	r3, [pc, #420]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80074a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074aa:	4a68      	ldr	r2, [pc, #416]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80074ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80074b2:	e00b      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	3304      	adds	r3, #4
 80074b8:	2102      	movs	r1, #2
 80074ba:	4618      	mov	r0, r3
 80074bc:	f001 f9aa 	bl	8008814 <RCCEx_PLL2_Config>
 80074c0:	4603      	mov	r3, r0
 80074c2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80074c4:	e002      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	75fb      	strb	r3, [r7, #23]
      break;
 80074ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074cc:	7dfb      	ldrb	r3, [r7, #23]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d109      	bne.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80074d2:	4b5e      	ldr	r3, [pc, #376]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80074d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074de:	495b      	ldr	r1, [pc, #364]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80074e4:	e001      	b.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e6:	7dfb      	ldrb	r3, [r7, #23]
 80074e8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00a      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	3324      	adds	r3, #36	; 0x24
 80074fa:	2102      	movs	r1, #2
 80074fc:	4618      	mov	r0, r3
 80074fe:	f001 fa3b 	bl	8008978 <RCCEx_PLL3_Config>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d001      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d030      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800751c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007520:	d017      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007522:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007526:	d811      	bhi.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800752c:	d013      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800752e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007532:	d80b      	bhi.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007534:	2b00      	cmp	r3, #0
 8007536:	d010      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800753c:	d106      	bne.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800753e:	4b43      	ldr	r3, [pc, #268]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007542:	4a42      	ldr	r2, [pc, #264]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007548:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800754a:	e007      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	75fb      	strb	r3, [r7, #23]
      break;
 8007550:	e004      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007552:	bf00      	nop
 8007554:	e002      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007556:	bf00      	nop
 8007558:	e000      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800755a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800755c:	7dfb      	ldrb	r3, [r7, #23]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d109      	bne.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007562:	4b3a      	ldr	r3, [pc, #232]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007566:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800756e:	4937      	ldr	r1, [pc, #220]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007570:	4313      	orrs	r3, r2
 8007572:	654b      	str	r3, [r1, #84]	; 0x54
 8007574:	e001      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007576:	7dfb      	ldrb	r3, [r7, #23]
 8007578:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d008      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007586:	4b31      	ldr	r3, [pc, #196]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800758a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007592:	492e      	ldr	r1, [pc, #184]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007594:	4313      	orrs	r3, r2
 8007596:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d009      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80075a4:	4b29      	ldr	r3, [pc, #164]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80075b2:	4926      	ldr	r1, [pc, #152]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d008      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80075c4:	4b21      	ldr	r3, [pc, #132]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80075c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075d0:	491e      	ldr	r1, [pc, #120]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80075d2:	4313      	orrs	r3, r2
 80075d4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00d      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80075e2:	4b1a      	ldr	r3, [pc, #104]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	4a19      	ldr	r2, [pc, #100]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80075e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075ec:	6113      	str	r3, [r2, #16]
 80075ee:	4b17      	ldr	r3, [pc, #92]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80075f0:	691a      	ldr	r2, [r3, #16]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80075f8:	4914      	ldr	r1, [pc, #80]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80075fa:	4313      	orrs	r3, r2
 80075fc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	da08      	bge.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007606:	4b11      	ldr	r3, [pc, #68]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800760a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007612:	490e      	ldr	r1, [pc, #56]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007614:	4313      	orrs	r3, r2
 8007616:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d009      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007624:	4b09      	ldr	r3, [pc, #36]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007628:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007632:	4906      	ldr	r1, [pc, #24]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007634:	4313      	orrs	r3, r2
 8007636:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007638:	7dbb      	ldrb	r3, [r7, #22]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d101      	bne.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800763e:	2300      	movs	r3, #0
 8007640:	e000      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
}
 8007644:	4618      	mov	r0, r3
 8007646:	3718      	adds	r7, #24
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}
 800764c:	58024400 	.word	0x58024400

08007650 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b090      	sub	sp, #64	; 0x40
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800765e:	f040 8095 	bne.w	800778c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007662:	4bae      	ldr	r3, [pc, #696]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007666:	f003 0307 	and.w	r3, r3, #7
 800766a:	633b      	str	r3, [r7, #48]	; 0x30
 800766c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766e:	2b04      	cmp	r3, #4
 8007670:	f200 8088 	bhi.w	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007674:	a201      	add	r2, pc, #4	; (adr r2, 800767c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8007676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767a:	bf00      	nop
 800767c:	08007691 	.word	0x08007691
 8007680:	080076b9 	.word	0x080076b9
 8007684:	080076e1 	.word	0x080076e1
 8007688:	0800777d 	.word	0x0800777d
 800768c:	08007709 	.word	0x08007709

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007690:	4ba2      	ldr	r3, [pc, #648]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007698:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800769c:	d108      	bne.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800769e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 ff64 	bl	8008570 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80076a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80076ac:	f000 bc95 	b.w	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80076b0:	2300      	movs	r3, #0
 80076b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076b4:	f000 bc91 	b.w	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076b8:	4b98      	ldr	r3, [pc, #608]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076c4:	d108      	bne.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076c6:	f107 0318 	add.w	r3, r7, #24
 80076ca:	4618      	mov	r0, r3
 80076cc:	f000 fca8 	bl	8008020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80076d4:	f000 bc81 	b.w	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80076d8:	2300      	movs	r3, #0
 80076da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076dc:	f000 bc7d 	b.w	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80076e0:	4b8e      	ldr	r3, [pc, #568]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076ec:	d108      	bne.n	8007700 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076ee:	f107 030c 	add.w	r3, r7, #12
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 fde8 	bl	80082c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80076fc:	f000 bc6d 	b.w	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007700:	2300      	movs	r3, #0
 8007702:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007704:	f000 bc69 	b.w	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007708:	4b84      	ldr	r3, [pc, #528]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800770a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800770c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007710:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007712:	4b82      	ldr	r3, [pc, #520]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0304 	and.w	r3, r3, #4
 800771a:	2b04      	cmp	r3, #4
 800771c:	d10c      	bne.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800771e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007720:	2b00      	cmp	r3, #0
 8007722:	d109      	bne.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007724:	4b7d      	ldr	r3, [pc, #500]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	08db      	lsrs	r3, r3, #3
 800772a:	f003 0303 	and.w	r3, r3, #3
 800772e:	4a7c      	ldr	r2, [pc, #496]	; (8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8007730:	fa22 f303 	lsr.w	r3, r2, r3
 8007734:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007736:	e01f      	b.n	8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007738:	4b78      	ldr	r3, [pc, #480]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007744:	d106      	bne.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007748:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800774c:	d102      	bne.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800774e:	4b75      	ldr	r3, [pc, #468]	; (8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007750:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007752:	e011      	b.n	8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007754:	4b71      	ldr	r3, [pc, #452]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800775c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007760:	d106      	bne.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8007762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007768:	d102      	bne.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800776a:	4b6f      	ldr	r3, [pc, #444]	; (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800776c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800776e:	e003      	b.n	8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007770:	2300      	movs	r3, #0
 8007772:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007774:	f000 bc31 	b.w	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007778:	f000 bc2f 	b.w	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800777c:	4b6b      	ldr	r3, [pc, #428]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800777e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007780:	f000 bc2b 	b.w	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007784:	2300      	movs	r3, #0
 8007786:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007788:	f000 bc27 	b.w	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007792:	f040 8095 	bne.w	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007796:	4b61      	ldr	r3, [pc, #388]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800779a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800779e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80077a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077a6:	d04d      	beq.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80077a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ae:	f200 8084 	bhi.w	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80077b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b4:	2bc0      	cmp	r3, #192	; 0xc0
 80077b6:	d07d      	beq.n	80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80077b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ba:	2bc0      	cmp	r3, #192	; 0xc0
 80077bc:	d87d      	bhi.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80077be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c0:	2b80      	cmp	r3, #128	; 0x80
 80077c2:	d02d      	beq.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80077c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c6:	2b80      	cmp	r3, #128	; 0x80
 80077c8:	d877      	bhi.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80077ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d003      	beq.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80077d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d2:	2b40      	cmp	r3, #64	; 0x40
 80077d4:	d012      	beq.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80077d6:	e070      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80077d8:	4b50      	ldr	r3, [pc, #320]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077e4:	d107      	bne.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077ea:	4618      	mov	r0, r3
 80077ec:	f000 fec0 	bl	8008570 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80077f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80077f4:	e3f1      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80077f6:	2300      	movs	r3, #0
 80077f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077fa:	e3ee      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80077fc:	4b47      	ldr	r3, [pc, #284]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007804:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007808:	d107      	bne.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800780a:	f107 0318 	add.w	r3, r7, #24
 800780e:	4618      	mov	r0, r3
 8007810:	f000 fc06 	bl	8008020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007818:	e3df      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800781a:	2300      	movs	r3, #0
 800781c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800781e:	e3dc      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007820:	4b3e      	ldr	r3, [pc, #248]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800782c:	d107      	bne.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800782e:	f107 030c 	add.w	r3, r7, #12
 8007832:	4618      	mov	r0, r3
 8007834:	f000 fd48 	bl	80082c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800783c:	e3cd      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800783e:	2300      	movs	r3, #0
 8007840:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007842:	e3ca      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007844:	4b35      	ldr	r3, [pc, #212]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007848:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800784c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800784e:	4b33      	ldr	r3, [pc, #204]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 0304 	and.w	r3, r3, #4
 8007856:	2b04      	cmp	r3, #4
 8007858:	d10c      	bne.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800785a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800785c:	2b00      	cmp	r3, #0
 800785e:	d109      	bne.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007860:	4b2e      	ldr	r3, [pc, #184]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	08db      	lsrs	r3, r3, #3
 8007866:	f003 0303 	and.w	r3, r3, #3
 800786a:	4a2d      	ldr	r2, [pc, #180]	; (8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800786c:	fa22 f303 	lsr.w	r3, r2, r3
 8007870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007872:	e01e      	b.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007874:	4b29      	ldr	r3, [pc, #164]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800787c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007880:	d106      	bne.n	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8007882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007884:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007888:	d102      	bne.n	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800788a:	4b26      	ldr	r3, [pc, #152]	; (8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800788c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800788e:	e010      	b.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007890:	4b22      	ldr	r3, [pc, #136]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007898:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800789c:	d106      	bne.n	80078ac <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800789e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078a4:	d102      	bne.n	80078ac <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80078a6:	4b20      	ldr	r3, [pc, #128]	; (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80078a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078aa:	e002      	b.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80078ac:	2300      	movs	r3, #0
 80078ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80078b0:	e393      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80078b2:	e392      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80078b4:	4b1d      	ldr	r3, [pc, #116]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80078b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078b8:	e38f      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80078ba:	2300      	movs	r3, #0
 80078bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078be:	e38c      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078c6:	f040 80a7 	bne.w	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80078ca:	4b14      	ldr	r3, [pc, #80]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80078cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ce:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80078d2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80078d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078da:	d05f      	beq.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80078dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078e2:	f200 8096 	bhi.w	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80078e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80078ec:	f000 808e 	beq.w	8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80078f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80078f6:	f200 808c 	bhi.w	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80078fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007900:	d03a      	beq.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007904:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007908:	f200 8083 	bhi.w	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800790c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00e      	beq.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8007912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007914:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007918:	d01c      	beq.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800791a:	e07a      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800791c:	58024400 	.word	0x58024400
 8007920:	03d09000 	.word	0x03d09000
 8007924:	003d0900 	.word	0x003d0900
 8007928:	007a1200 	.word	0x007a1200
 800792c:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007930:	4baa      	ldr	r3, [pc, #680]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007938:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800793c:	d107      	bne.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800793e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007942:	4618      	mov	r0, r3
 8007944:	f000 fe14 	bl	8008570 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800794c:	e345      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800794e:	2300      	movs	r3, #0
 8007950:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007952:	e342      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007954:	4ba1      	ldr	r3, [pc, #644]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800795c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007960:	d107      	bne.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007962:	f107 0318 	add.w	r3, r7, #24
 8007966:	4618      	mov	r0, r3
 8007968:	f000 fb5a 	bl	8008020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007970:	e333      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007972:	2300      	movs	r3, #0
 8007974:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007976:	e330      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007978:	4b98      	ldr	r3, [pc, #608]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007984:	d107      	bne.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007986:	f107 030c 	add.w	r3, r7, #12
 800798a:	4618      	mov	r0, r3
 800798c:	f000 fc9c 	bl	80082c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007994:	e321      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007996:	2300      	movs	r3, #0
 8007998:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800799a:	e31e      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800799c:	4b8f      	ldr	r3, [pc, #572]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800799e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079a4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079a6:	4b8d      	ldr	r3, [pc, #564]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0304 	and.w	r3, r3, #4
 80079ae:	2b04      	cmp	r3, #4
 80079b0:	d10c      	bne.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80079b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d109      	bne.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079b8:	4b88      	ldr	r3, [pc, #544]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	08db      	lsrs	r3, r3, #3
 80079be:	f003 0303 	and.w	r3, r3, #3
 80079c2:	4a87      	ldr	r2, [pc, #540]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80079c4:	fa22 f303 	lsr.w	r3, r2, r3
 80079c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079ca:	e01e      	b.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80079cc:	4b83      	ldr	r3, [pc, #524]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079d8:	d106      	bne.n	80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 80079da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079e0:	d102      	bne.n	80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80079e2:	4b80      	ldr	r3, [pc, #512]	; (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80079e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079e6:	e010      	b.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80079e8:	4b7c      	ldr	r3, [pc, #496]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079f4:	d106      	bne.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80079f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079fc:	d102      	bne.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80079fe:	4b7a      	ldr	r3, [pc, #488]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007a00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a02:	e002      	b.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007a04:	2300      	movs	r3, #0
 8007a06:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007a08:	e2e7      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007a0a:	e2e6      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007a0c:	4b77      	ldr	r3, [pc, #476]	; (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a10:	e2e3      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007a12:	2300      	movs	r3, #0
 8007a14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a16:	e2e0      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a1e:	f040 809c 	bne.w	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007a22:	4b6e      	ldr	r3, [pc, #440]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a26:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007a2a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a32:	d054      	beq.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8007a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a3a:	f200 808b 	bhi.w	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a44:	f000 8083 	beq.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8007a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a4e:	f200 8081 	bhi.w	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8007a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a58:	d02f      	beq.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a60:	d878      	bhi.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8007a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d004      	beq.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a6e:	d012      	beq.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8007a70:	e070      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a72:	4b5a      	ldr	r3, [pc, #360]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a7e:	d107      	bne.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 fd73 	bl	8008570 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007a8e:	e2a4      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007a90:	2300      	movs	r3, #0
 8007a92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a94:	e2a1      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a96:	4b51      	ldr	r3, [pc, #324]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007aa2:	d107      	bne.n	8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aa4:	f107 0318 	add.w	r3, r7, #24
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f000 fab9 	bl	8008020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8007ab2:	e292      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ab8:	e28f      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007aba:	4b48      	ldr	r3, [pc, #288]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ac6:	d107      	bne.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ac8:	f107 030c 	add.w	r3, r7, #12
 8007acc:	4618      	mov	r0, r3
 8007ace:	f000 fbfb 	bl	80082c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ad6:	e280      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007adc:	e27d      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007ade:	4b3f      	ldr	r3, [pc, #252]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ae2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ae6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ae8:	4b3c      	ldr	r3, [pc, #240]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0304 	and.w	r3, r3, #4
 8007af0:	2b04      	cmp	r3, #4
 8007af2:	d10c      	bne.n	8007b0e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d109      	bne.n	8007b0e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007afa:	4b38      	ldr	r3, [pc, #224]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	08db      	lsrs	r3, r3, #3
 8007b00:	f003 0303 	and.w	r3, r3, #3
 8007b04:	4a36      	ldr	r2, [pc, #216]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007b06:	fa22 f303 	lsr.w	r3, r2, r3
 8007b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b0c:	e01e      	b.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b0e:	4b33      	ldr	r3, [pc, #204]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b1a:	d106      	bne.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8007b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b22:	d102      	bne.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007b24:	4b2f      	ldr	r3, [pc, #188]	; (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007b26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b28:	e010      	b.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b2a:	4b2c      	ldr	r3, [pc, #176]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b36:	d106      	bne.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8007b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b3e:	d102      	bne.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007b40:	4b29      	ldr	r3, [pc, #164]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b44:	e002      	b.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007b46:	2300      	movs	r3, #0
 8007b48:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007b4a:	e246      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007b4c:	e245      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b4e:	4b27      	ldr	r3, [pc, #156]	; (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007b50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b52:	e242      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007b54:	2300      	movs	r3, #0
 8007b56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b58:	e23f      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b60:	f040 80a8 	bne.w	8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007b64:	4b1d      	ldr	r3, [pc, #116]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b68:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007b6c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b74:	d060      	beq.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8007b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b7c:	f200 8097 	bhi.w	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8007b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b86:	f000 808f 	beq.w	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8007b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b90:	f200 808d 	bhi.w	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8007b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b9a:	d03b      	beq.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8007b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ba2:	f200 8084 	bhi.w	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8007ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d004      	beq.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8007bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bb2:	d01d      	beq.n	8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8007bb4:	e07b      	b.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007bb6:	4b09      	ldr	r3, [pc, #36]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bc2:	d107      	bne.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f000 fcd1 	bl	8008570 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007bd2:	e202      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bd8:	e1ff      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007bda:	bf00      	nop
 8007bdc:	58024400 	.word	0x58024400
 8007be0:	03d09000 	.word	0x03d09000
 8007be4:	003d0900 	.word	0x003d0900
 8007be8:	007a1200 	.word	0x007a1200
 8007bec:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bf0:	4ba3      	ldr	r3, [pc, #652]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bfc:	d107      	bne.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bfe:	f107 0318 	add.w	r3, r7, #24
 8007c02:	4618      	mov	r0, r3
 8007c04:	f000 fa0c 	bl	8008020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c0c:	e1e5      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c12:	e1e2      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c14:	4b9a      	ldr	r3, [pc, #616]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c20:	d107      	bne.n	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c22:	f107 030c 	add.w	r3, r7, #12
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 fb4e 	bl	80082c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c30:	e1d3      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007c32:	2300      	movs	r3, #0
 8007c34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c36:	e1d0      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c38:	4b91      	ldr	r3, [pc, #580]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c40:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c42:	4b8f      	ldr	r3, [pc, #572]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 0304 	and.w	r3, r3, #4
 8007c4a:	2b04      	cmp	r3, #4
 8007c4c:	d10c      	bne.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8007c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d109      	bne.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c54:	4b8a      	ldr	r3, [pc, #552]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	08db      	lsrs	r3, r3, #3
 8007c5a:	f003 0303 	and.w	r3, r3, #3
 8007c5e:	4a89      	ldr	r2, [pc, #548]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007c60:	fa22 f303 	lsr.w	r3, r2, r3
 8007c64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c66:	e01e      	b.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c68:	4b85      	ldr	r3, [pc, #532]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c74:	d106      	bne.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8007c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c7c:	d102      	bne.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007c7e:	4b82      	ldr	r3, [pc, #520]	; (8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c82:	e010      	b.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c84:	4b7e      	ldr	r3, [pc, #504]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c90:	d106      	bne.n	8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c98:	d102      	bne.n	8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007c9a:	4b7c      	ldr	r3, [pc, #496]	; (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c9e:	e002      	b.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007ca4:	e199      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007ca6:	e198      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007ca8:	4b79      	ldr	r3, [pc, #484]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007caa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cac:	e195      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cb2:	e192      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007cba:	d173      	bne.n	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007cbc:	4b70      	ldr	r3, [pc, #448]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007cc4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ccc:	d02f      	beq.n	8007d2e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8007cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cd4:	d863      	bhi.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8007cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d004      	beq.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8007cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ce2:	d012      	beq.n	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8007ce4:	e05b      	b.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ce6:	4b66      	ldr	r3, [pc, #408]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cf2:	d107      	bne.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cf4:	f107 0318 	add.w	r3, r7, #24
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f000 f991 	bl	8008020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d02:	e16a      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007d04:	2300      	movs	r3, #0
 8007d06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d08:	e167      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d0a:	4b5d      	ldr	r3, [pc, #372]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d16:	d107      	bne.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d18:	f107 030c 	add.w	r3, r7, #12
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f000 fad3 	bl	80082c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d26:	e158      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d2c:	e155      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007d2e:	4b54      	ldr	r3, [pc, #336]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d36:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d38:	4b51      	ldr	r3, [pc, #324]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0304 	and.w	r3, r3, #4
 8007d40:	2b04      	cmp	r3, #4
 8007d42:	d10c      	bne.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8007d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d109      	bne.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d4a:	4b4d      	ldr	r3, [pc, #308]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	08db      	lsrs	r3, r3, #3
 8007d50:	f003 0303 	and.w	r3, r3, #3
 8007d54:	4a4b      	ldr	r2, [pc, #300]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007d56:	fa22 f303 	lsr.w	r3, r2, r3
 8007d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d5c:	e01e      	b.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d5e:	4b48      	ldr	r3, [pc, #288]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d6a:	d106      	bne.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8007d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d72:	d102      	bne.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007d74:	4b44      	ldr	r3, [pc, #272]	; (8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d78:	e010      	b.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d7a:	4b41      	ldr	r3, [pc, #260]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d86:	d106      	bne.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8007d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d8e:	d102      	bne.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007d90:	4b3e      	ldr	r3, [pc, #248]	; (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d94:	e002      	b.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007d96:	2300      	movs	r3, #0
 8007d98:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007d9a:	e11e      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007d9c:	e11d      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007da2:	e11a      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007daa:	d133      	bne.n	8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007dac:	4b34      	ldr	r3, [pc, #208]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007db4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d004      	beq.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8007dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dc2:	d012      	beq.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8007dc4:	e023      	b.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007dc6:	4b2e      	ldr	r3, [pc, #184]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007dd2:	d107      	bne.n	8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f000 fbc9 	bl	8008570 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007de2:	e0fa      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007de4:	2300      	movs	r3, #0
 8007de6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007de8:	e0f7      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007dea:	4b25      	ldr	r3, [pc, #148]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007df2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007df6:	d107      	bne.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007df8:	f107 0318 	add.w	r3, r7, #24
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f000 f90f 	bl	8008020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007e02:	6a3b      	ldr	r3, [r7, #32]
 8007e04:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007e06:	e0e8      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e0c:	e0e5      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e12:	e0e2      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e1a:	f040 808f 	bne.w	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007e1e:	4b18      	ldr	r3, [pc, #96]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e22:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007e26:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e2e:	d075      	beq.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8007e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e36:	d87e      	bhi.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e3e:	d060      	beq.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8007e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e46:	d876      	bhi.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e4e:	d045      	beq.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8007e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e56:	d86e      	bhi.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e5e:	d02b      	beq.n	8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8007e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e66:	d866      	bhi.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d004      	beq.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8007e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e74:	d00e      	beq.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007e76:	e05e      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007e78:	f000 f8bc 	bl	8007ff4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007e7c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007e7e:	e0ac      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007e80:	58024400 	.word	0x58024400
 8007e84:	03d09000 	.word	0x03d09000
 8007e88:	003d0900 	.word	0x003d0900
 8007e8c:	007a1200 	.word	0x007a1200
 8007e90:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e94:	4b53      	ldr	r3, [pc, #332]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ea0:	d107      	bne.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ea2:	f107 0318 	add.w	r3, r7, #24
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f000 f8ba 	bl	8008020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007eb0:	e093      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eb6:	e090      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007eb8:	4b4a      	ldr	r3, [pc, #296]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ec4:	d107      	bne.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ec6:	f107 030c 	add.w	r3, r7, #12
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f000 f9fc 	bl	80082c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007ed4:	e081      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eda:	e07e      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007edc:	4b41      	ldr	r3, [pc, #260]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0304 	and.w	r3, r3, #4
 8007ee4:	2b04      	cmp	r3, #4
 8007ee6:	d109      	bne.n	8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ee8:	4b3e      	ldr	r3, [pc, #248]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	08db      	lsrs	r3, r3, #3
 8007eee:	f003 0303 	and.w	r3, r3, #3
 8007ef2:	4a3d      	ldr	r2, [pc, #244]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8007ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007efa:	e06e      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007efc:	2300      	movs	r3, #0
 8007efe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f00:	e06b      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007f02:	4b38      	ldr	r3, [pc, #224]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f0e:	d102      	bne.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8007f10:	4b36      	ldr	r3, [pc, #216]	; (8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007f12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007f14:	e061      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007f16:	2300      	movs	r3, #0
 8007f18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f1a:	e05e      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007f1c:	4b31      	ldr	r3, [pc, #196]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f28:	d102      	bne.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8007f2a:	4b31      	ldr	r3, [pc, #196]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007f2e:	e054      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f30:	2300      	movs	r3, #0
 8007f32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f34:	e051      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007f36:	2300      	movs	r3, #0
 8007f38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f3a:	e04e      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f42:	d148      	bne.n	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8007f44:	4b27      	ldr	r3, [pc, #156]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f4c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f54:	d02a      	beq.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8007f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f5c:	d838      	bhi.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d004      	beq.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8007f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f6a:	d00d      	beq.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8007f6c:	e030      	b.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007f6e:	4b1d      	ldr	r3, [pc, #116]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f7a:	d102      	bne.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8007f7c:	4b1c      	ldr	r3, [pc, #112]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007f80:	e02b      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f82:	2300      	movs	r3, #0
 8007f84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f86:	e028      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f88:	4b16      	ldr	r3, [pc, #88]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f94:	d107      	bne.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 fae8 	bl	8008570 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007fa4:	e019      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007faa:	e016      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fac:	4b0d      	ldr	r3, [pc, #52]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fb8:	d107      	bne.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fba:	f107 0318 	add.w	r3, r7, #24
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f000 f82e 	bl	8008020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007fc8:	e007      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fce:	e004      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fd4:	e001      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3740      	adds	r7, #64	; 0x40
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	58024400 	.word	0x58024400
 8007fe8:	03d09000 	.word	0x03d09000
 8007fec:	003d0900 	.word	0x003d0900
 8007ff0:	007a1200 	.word	0x007a1200

08007ff4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007ff8:	f7fe fb8e 	bl	8006718 <HAL_RCC_GetHCLKFreq>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	4b06      	ldr	r3, [pc, #24]	; (8008018 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	091b      	lsrs	r3, r3, #4
 8008004:	f003 0307 	and.w	r3, r3, #7
 8008008:	4904      	ldr	r1, [pc, #16]	; (800801c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800800a:	5ccb      	ldrb	r3, [r1, r3]
 800800c:	f003 031f 	and.w	r3, r3, #31
 8008010:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008014:	4618      	mov	r0, r3
 8008016:	bd80      	pop	{r7, pc}
 8008018:	58024400 	.word	0x58024400
 800801c:	0800d24c 	.word	0x0800d24c

08008020 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008020:	b480      	push	{r7}
 8008022:	b089      	sub	sp, #36	; 0x24
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008028:	4ba1      	ldr	r3, [pc, #644]	; (80082b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800802a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802c:	f003 0303 	and.w	r3, r3, #3
 8008030:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008032:	4b9f      	ldr	r3, [pc, #636]	; (80082b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008036:	0b1b      	lsrs	r3, r3, #12
 8008038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800803c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800803e:	4b9c      	ldr	r3, [pc, #624]	; (80082b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008042:	091b      	lsrs	r3, r3, #4
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800804a:	4b99      	ldr	r3, [pc, #612]	; (80082b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800804c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800804e:	08db      	lsrs	r3, r3, #3
 8008050:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	fb02 f303 	mul.w	r3, r2, r3
 800805a:	ee07 3a90 	vmov	s15, r3
 800805e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008062:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 8111 	beq.w	8008290 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	2b02      	cmp	r3, #2
 8008072:	f000 8083 	beq.w	800817c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	2b02      	cmp	r3, #2
 800807a:	f200 80a1 	bhi.w	80081c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d003      	beq.n	800808c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d056      	beq.n	8008138 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800808a:	e099      	b.n	80081c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800808c:	4b88      	ldr	r3, [pc, #544]	; (80082b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 0320 	and.w	r3, r3, #32
 8008094:	2b00      	cmp	r3, #0
 8008096:	d02d      	beq.n	80080f4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008098:	4b85      	ldr	r3, [pc, #532]	; (80082b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	08db      	lsrs	r3, r3, #3
 800809e:	f003 0303 	and.w	r3, r3, #3
 80080a2:	4a84      	ldr	r2, [pc, #528]	; (80082b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80080a4:	fa22 f303 	lsr.w	r3, r2, r3
 80080a8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	ee07 3a90 	vmov	s15, r3
 80080b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	ee07 3a90 	vmov	s15, r3
 80080ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080c2:	4b7b      	ldr	r3, [pc, #492]	; (80082b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ca:	ee07 3a90 	vmov	s15, r3
 80080ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80080d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80082b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80080f2:	e087      	b.n	8008204 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	ee07 3a90 	vmov	s15, r3
 80080fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008106:	4b6a      	ldr	r3, [pc, #424]	; (80082b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800810e:	ee07 3a90 	vmov	s15, r3
 8008112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008116:	ed97 6a03 	vldr	s12, [r7, #12]
 800811a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80082b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800811e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800812a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800812e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008132:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008136:	e065      	b.n	8008204 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	ee07 3a90 	vmov	s15, r3
 800813e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008142:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80082c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800814a:	4b59      	ldr	r3, [pc, #356]	; (80082b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800814c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800814e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008152:	ee07 3a90 	vmov	s15, r3
 8008156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800815a:	ed97 6a03 	vldr	s12, [r7, #12]
 800815e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80082b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800816a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800816e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008176:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800817a:	e043      	b.n	8008204 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	ee07 3a90 	vmov	s15, r3
 8008182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008186:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800818a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800818e:	4b48      	ldr	r3, [pc, #288]	; (80082b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008196:	ee07 3a90 	vmov	s15, r3
 800819a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800819e:	ed97 6a03 	vldr	s12, [r7, #12]
 80081a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80082b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081be:	e021      	b.n	8008204 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	ee07 3a90 	vmov	s15, r3
 80081c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80082c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80081ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081d2:	4b37      	ldr	r3, [pc, #220]	; (80082b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081da:	ee07 3a90 	vmov	s15, r3
 80081de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80081e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80082b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008202:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008204:	4b2a      	ldr	r3, [pc, #168]	; (80082b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008208:	0a5b      	lsrs	r3, r3, #9
 800820a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800820e:	ee07 3a90 	vmov	s15, r3
 8008212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008216:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800821a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800821e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800822a:	ee17 2a90 	vmov	r2, s15
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008232:	4b1f      	ldr	r3, [pc, #124]	; (80082b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008236:	0c1b      	lsrs	r3, r3, #16
 8008238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800823c:	ee07 3a90 	vmov	s15, r3
 8008240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008244:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008248:	ee37 7a87 	vadd.f32	s14, s15, s14
 800824c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008258:	ee17 2a90 	vmov	r2, s15
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008260:	4b13      	ldr	r3, [pc, #76]	; (80082b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008264:	0e1b      	lsrs	r3, r3, #24
 8008266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800826a:	ee07 3a90 	vmov	s15, r3
 800826e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008272:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008276:	ee37 7a87 	vadd.f32	s14, s15, s14
 800827a:	edd7 6a07 	vldr	s13, [r7, #28]
 800827e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008286:	ee17 2a90 	vmov	r2, s15
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800828e:	e008      	b.n	80082a2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	609a      	str	r2, [r3, #8]
}
 80082a2:	bf00      	nop
 80082a4:	3724      	adds	r7, #36	; 0x24
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	58024400 	.word	0x58024400
 80082b4:	03d09000 	.word	0x03d09000
 80082b8:	46000000 	.word	0x46000000
 80082bc:	4c742400 	.word	0x4c742400
 80082c0:	4a742400 	.word	0x4a742400
 80082c4:	4af42400 	.word	0x4af42400

080082c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b089      	sub	sp, #36	; 0x24
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082d0:	4ba1      	ldr	r3, [pc, #644]	; (8008558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d4:	f003 0303 	and.w	r3, r3, #3
 80082d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80082da:	4b9f      	ldr	r3, [pc, #636]	; (8008558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082de:	0d1b      	lsrs	r3, r3, #20
 80082e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80082e6:	4b9c      	ldr	r3, [pc, #624]	; (8008558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ea:	0a1b      	lsrs	r3, r3, #8
 80082ec:	f003 0301 	and.w	r3, r3, #1
 80082f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80082f2:	4b99      	ldr	r3, [pc, #612]	; (8008558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082f6:	08db      	lsrs	r3, r3, #3
 80082f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	fb02 f303 	mul.w	r3, r2, r3
 8008302:	ee07 3a90 	vmov	s15, r3
 8008306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800830a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	2b00      	cmp	r3, #0
 8008312:	f000 8111 	beq.w	8008538 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	2b02      	cmp	r3, #2
 800831a:	f000 8083 	beq.w	8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	2b02      	cmp	r3, #2
 8008322:	f200 80a1 	bhi.w	8008468 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d003      	beq.n	8008334 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	2b01      	cmp	r3, #1
 8008330:	d056      	beq.n	80083e0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008332:	e099      	b.n	8008468 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008334:	4b88      	ldr	r3, [pc, #544]	; (8008558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 0320 	and.w	r3, r3, #32
 800833c:	2b00      	cmp	r3, #0
 800833e:	d02d      	beq.n	800839c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008340:	4b85      	ldr	r3, [pc, #532]	; (8008558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	08db      	lsrs	r3, r3, #3
 8008346:	f003 0303 	and.w	r3, r3, #3
 800834a:	4a84      	ldr	r2, [pc, #528]	; (800855c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800834c:	fa22 f303 	lsr.w	r3, r2, r3
 8008350:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	ee07 3a90 	vmov	s15, r3
 8008358:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	ee07 3a90 	vmov	s15, r3
 8008362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800836a:	4b7b      	ldr	r3, [pc, #492]	; (8008558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800836c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008372:	ee07 3a90 	vmov	s15, r3
 8008376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800837a:	ed97 6a03 	vldr	s12, [r7, #12]
 800837e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008560 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800838a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800838e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008396:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800839a:	e087      	b.n	80084ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	ee07 3a90 	vmov	s15, r3
 80083a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80083aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ae:	4b6a      	ldr	r3, [pc, #424]	; (8008558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083b6:	ee07 3a90 	vmov	s15, r3
 80083ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083be:	ed97 6a03 	vldr	s12, [r7, #12]
 80083c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008560 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083de:	e065      	b.n	80084ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	ee07 3a90 	vmov	s15, r3
 80083e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008568 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80083ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083f2:	4b59      	ldr	r3, [pc, #356]	; (8008558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083fa:	ee07 3a90 	vmov	s15, r3
 80083fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008402:	ed97 6a03 	vldr	s12, [r7, #12]
 8008406:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008560 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800840a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800840e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800841a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800841e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008422:	e043      	b.n	80084ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	ee07 3a90 	vmov	s15, r3
 800842a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800842e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800856c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008436:	4b48      	ldr	r3, [pc, #288]	; (8008558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800843e:	ee07 3a90 	vmov	s15, r3
 8008442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008446:	ed97 6a03 	vldr	s12, [r7, #12]
 800844a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008560 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800844e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008456:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800845a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800845e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008462:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008466:	e021      	b.n	80084ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	ee07 3a90 	vmov	s15, r3
 800846e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008472:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008568 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800847a:	4b37      	ldr	r3, [pc, #220]	; (8008558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800847c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008482:	ee07 3a90 	vmov	s15, r3
 8008486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800848a:	ed97 6a03 	vldr	s12, [r7, #12]
 800848e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008560 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800849a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800849e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084aa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80084ac:	4b2a      	ldr	r3, [pc, #168]	; (8008558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b0:	0a5b      	lsrs	r3, r3, #9
 80084b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084b6:	ee07 3a90 	vmov	s15, r3
 80084ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80084ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084d2:	ee17 2a90 	vmov	r2, s15
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80084da:	4b1f      	ldr	r3, [pc, #124]	; (8008558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084de:	0c1b      	lsrs	r3, r3, #16
 80084e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084e4:	ee07 3a90 	vmov	s15, r3
 80084e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80084f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008500:	ee17 2a90 	vmov	r2, s15
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008508:	4b13      	ldr	r3, [pc, #76]	; (8008558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800850a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850c:	0e1b      	lsrs	r3, r3, #24
 800850e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008512:	ee07 3a90 	vmov	s15, r3
 8008516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800851a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800851e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008522:	edd7 6a07 	vldr	s13, [r7, #28]
 8008526:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800852a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800852e:	ee17 2a90 	vmov	r2, s15
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008536:	e008      	b.n	800854a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	609a      	str	r2, [r3, #8]
}
 800854a:	bf00      	nop
 800854c:	3724      	adds	r7, #36	; 0x24
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	58024400 	.word	0x58024400
 800855c:	03d09000 	.word	0x03d09000
 8008560:	46000000 	.word	0x46000000
 8008564:	4c742400 	.word	0x4c742400
 8008568:	4a742400 	.word	0x4a742400
 800856c:	4af42400 	.word	0x4af42400

08008570 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008570:	b480      	push	{r7}
 8008572:	b089      	sub	sp, #36	; 0x24
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008578:	4ba0      	ldr	r3, [pc, #640]	; (80087fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800857a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800857c:	f003 0303 	and.w	r3, r3, #3
 8008580:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008582:	4b9e      	ldr	r3, [pc, #632]	; (80087fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008586:	091b      	lsrs	r3, r3, #4
 8008588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800858c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800858e:	4b9b      	ldr	r3, [pc, #620]	; (80087fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008592:	f003 0301 	and.w	r3, r3, #1
 8008596:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008598:	4b98      	ldr	r3, [pc, #608]	; (80087fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800859a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800859c:	08db      	lsrs	r3, r3, #3
 800859e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	fb02 f303 	mul.w	r3, r2, r3
 80085a8:	ee07 3a90 	vmov	s15, r3
 80085ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085b0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f000 8111 	beq.w	80087de <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	2b02      	cmp	r3, #2
 80085c0:	f000 8083 	beq.w	80086ca <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	f200 80a1 	bhi.w	800870e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d003      	beq.n	80085da <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d056      	beq.n	8008686 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80085d8:	e099      	b.n	800870e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085da:	4b88      	ldr	r3, [pc, #544]	; (80087fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 0320 	and.w	r3, r3, #32
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d02d      	beq.n	8008642 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80085e6:	4b85      	ldr	r3, [pc, #532]	; (80087fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	08db      	lsrs	r3, r3, #3
 80085ec:	f003 0303 	and.w	r3, r3, #3
 80085f0:	4a83      	ldr	r2, [pc, #524]	; (8008800 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80085f2:	fa22 f303 	lsr.w	r3, r2, r3
 80085f6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	ee07 3a90 	vmov	s15, r3
 80085fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	ee07 3a90 	vmov	s15, r3
 8008608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800860c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008610:	4b7a      	ldr	r3, [pc, #488]	; (80087fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008618:	ee07 3a90 	vmov	s15, r3
 800861c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008620:	ed97 6a03 	vldr	s12, [r7, #12]
 8008624:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008804 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008628:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800862c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008630:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008634:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800863c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008640:	e087      	b.n	8008752 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	ee07 3a90 	vmov	s15, r3
 8008648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800864c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008808 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008650:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008654:	4b69      	ldr	r3, [pc, #420]	; (80087fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800865c:	ee07 3a90 	vmov	s15, r3
 8008660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008664:	ed97 6a03 	vldr	s12, [r7, #12]
 8008668:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008804 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800866c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008670:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008674:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008678:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800867c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008680:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008684:	e065      	b.n	8008752 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	ee07 3a90 	vmov	s15, r3
 800868c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008690:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800880c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008694:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008698:	4b58      	ldr	r3, [pc, #352]	; (80087fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800869a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086a0:	ee07 3a90 	vmov	s15, r3
 80086a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80086ac:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008804 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80086b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086c8:	e043      	b.n	8008752 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	ee07 3a90 	vmov	s15, r3
 80086d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086d4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008810 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80086d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086dc:	4b47      	ldr	r3, [pc, #284]	; (80087fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086e4:	ee07 3a90 	vmov	s15, r3
 80086e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80086f0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008804 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80086f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008700:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008708:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800870c:	e021      	b.n	8008752 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	ee07 3a90 	vmov	s15, r3
 8008714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008718:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008808 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800871c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008720:	4b36      	ldr	r3, [pc, #216]	; (80087fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008728:	ee07 3a90 	vmov	s15, r3
 800872c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008730:	ed97 6a03 	vldr	s12, [r7, #12]
 8008734:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008804 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008738:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800873c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008740:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008744:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800874c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008750:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008752:	4b2a      	ldr	r3, [pc, #168]	; (80087fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008756:	0a5b      	lsrs	r3, r3, #9
 8008758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800875c:	ee07 3a90 	vmov	s15, r3
 8008760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008764:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008768:	ee37 7a87 	vadd.f32	s14, s15, s14
 800876c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008778:	ee17 2a90 	vmov	r2, s15
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008780:	4b1e      	ldr	r3, [pc, #120]	; (80087fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008784:	0c1b      	lsrs	r3, r3, #16
 8008786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800878a:	ee07 3a90 	vmov	s15, r3
 800878e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008792:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008796:	ee37 7a87 	vadd.f32	s14, s15, s14
 800879a:	edd7 6a07 	vldr	s13, [r7, #28]
 800879e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087a6:	ee17 2a90 	vmov	r2, s15
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80087ae:	4b13      	ldr	r3, [pc, #76]	; (80087fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b2:	0e1b      	lsrs	r3, r3, #24
 80087b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087b8:	ee07 3a90 	vmov	s15, r3
 80087bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80087cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087d4:	ee17 2a90 	vmov	r2, s15
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80087dc:	e008      	b.n	80087f0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	609a      	str	r2, [r3, #8]
}
 80087f0:	bf00      	nop
 80087f2:	3724      	adds	r7, #36	; 0x24
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr
 80087fc:	58024400 	.word	0x58024400
 8008800:	03d09000 	.word	0x03d09000
 8008804:	46000000 	.word	0x46000000
 8008808:	4c742400 	.word	0x4c742400
 800880c:	4a742400 	.word	0x4a742400
 8008810:	4af42400 	.word	0x4af42400

08008814 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800881e:	2300      	movs	r3, #0
 8008820:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008822:	4b53      	ldr	r3, [pc, #332]	; (8008970 <RCCEx_PLL2_Config+0x15c>)
 8008824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008826:	f003 0303 	and.w	r3, r3, #3
 800882a:	2b03      	cmp	r3, #3
 800882c:	d101      	bne.n	8008832 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e099      	b.n	8008966 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008832:	4b4f      	ldr	r3, [pc, #316]	; (8008970 <RCCEx_PLL2_Config+0x15c>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a4e      	ldr	r2, [pc, #312]	; (8008970 <RCCEx_PLL2_Config+0x15c>)
 8008838:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800883c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800883e:	f7fa fad9 	bl	8002df4 <HAL_GetTick>
 8008842:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008844:	e008      	b.n	8008858 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008846:	f7fa fad5 	bl	8002df4 <HAL_GetTick>
 800884a:	4602      	mov	r2, r0
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	2b02      	cmp	r3, #2
 8008852:	d901      	bls.n	8008858 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008854:	2303      	movs	r3, #3
 8008856:	e086      	b.n	8008966 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008858:	4b45      	ldr	r3, [pc, #276]	; (8008970 <RCCEx_PLL2_Config+0x15c>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d1f0      	bne.n	8008846 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008864:	4b42      	ldr	r3, [pc, #264]	; (8008970 <RCCEx_PLL2_Config+0x15c>)
 8008866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008868:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	031b      	lsls	r3, r3, #12
 8008872:	493f      	ldr	r1, [pc, #252]	; (8008970 <RCCEx_PLL2_Config+0x15c>)
 8008874:	4313      	orrs	r3, r2
 8008876:	628b      	str	r3, [r1, #40]	; 0x28
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	3b01      	subs	r3, #1
 800887e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	3b01      	subs	r3, #1
 8008888:	025b      	lsls	r3, r3, #9
 800888a:	b29b      	uxth	r3, r3
 800888c:	431a      	orrs	r2, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	3b01      	subs	r3, #1
 8008894:	041b      	lsls	r3, r3, #16
 8008896:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800889a:	431a      	orrs	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	691b      	ldr	r3, [r3, #16]
 80088a0:	3b01      	subs	r3, #1
 80088a2:	061b      	lsls	r3, r3, #24
 80088a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80088a8:	4931      	ldr	r1, [pc, #196]	; (8008970 <RCCEx_PLL2_Config+0x15c>)
 80088aa:	4313      	orrs	r3, r2
 80088ac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80088ae:	4b30      	ldr	r3, [pc, #192]	; (8008970 <RCCEx_PLL2_Config+0x15c>)
 80088b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	695b      	ldr	r3, [r3, #20]
 80088ba:	492d      	ldr	r1, [pc, #180]	; (8008970 <RCCEx_PLL2_Config+0x15c>)
 80088bc:	4313      	orrs	r3, r2
 80088be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80088c0:	4b2b      	ldr	r3, [pc, #172]	; (8008970 <RCCEx_PLL2_Config+0x15c>)
 80088c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c4:	f023 0220 	bic.w	r2, r3, #32
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	4928      	ldr	r1, [pc, #160]	; (8008970 <RCCEx_PLL2_Config+0x15c>)
 80088ce:	4313      	orrs	r3, r2
 80088d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80088d2:	4b27      	ldr	r3, [pc, #156]	; (8008970 <RCCEx_PLL2_Config+0x15c>)
 80088d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d6:	4a26      	ldr	r2, [pc, #152]	; (8008970 <RCCEx_PLL2_Config+0x15c>)
 80088d8:	f023 0310 	bic.w	r3, r3, #16
 80088dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80088de:	4b24      	ldr	r3, [pc, #144]	; (8008970 <RCCEx_PLL2_Config+0x15c>)
 80088e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088e2:	4b24      	ldr	r3, [pc, #144]	; (8008974 <RCCEx_PLL2_Config+0x160>)
 80088e4:	4013      	ands	r3, r2
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	69d2      	ldr	r2, [r2, #28]
 80088ea:	00d2      	lsls	r2, r2, #3
 80088ec:	4920      	ldr	r1, [pc, #128]	; (8008970 <RCCEx_PLL2_Config+0x15c>)
 80088ee:	4313      	orrs	r3, r2
 80088f0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80088f2:	4b1f      	ldr	r3, [pc, #124]	; (8008970 <RCCEx_PLL2_Config+0x15c>)
 80088f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f6:	4a1e      	ldr	r2, [pc, #120]	; (8008970 <RCCEx_PLL2_Config+0x15c>)
 80088f8:	f043 0310 	orr.w	r3, r3, #16
 80088fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d106      	bne.n	8008912 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008904:	4b1a      	ldr	r3, [pc, #104]	; (8008970 <RCCEx_PLL2_Config+0x15c>)
 8008906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008908:	4a19      	ldr	r2, [pc, #100]	; (8008970 <RCCEx_PLL2_Config+0x15c>)
 800890a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800890e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008910:	e00f      	b.n	8008932 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	2b01      	cmp	r3, #1
 8008916:	d106      	bne.n	8008926 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008918:	4b15      	ldr	r3, [pc, #84]	; (8008970 <RCCEx_PLL2_Config+0x15c>)
 800891a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891c:	4a14      	ldr	r2, [pc, #80]	; (8008970 <RCCEx_PLL2_Config+0x15c>)
 800891e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008922:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008924:	e005      	b.n	8008932 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008926:	4b12      	ldr	r3, [pc, #72]	; (8008970 <RCCEx_PLL2_Config+0x15c>)
 8008928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892a:	4a11      	ldr	r2, [pc, #68]	; (8008970 <RCCEx_PLL2_Config+0x15c>)
 800892c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008930:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008932:	4b0f      	ldr	r3, [pc, #60]	; (8008970 <RCCEx_PLL2_Config+0x15c>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a0e      	ldr	r2, [pc, #56]	; (8008970 <RCCEx_PLL2_Config+0x15c>)
 8008938:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800893c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800893e:	f7fa fa59 	bl	8002df4 <HAL_GetTick>
 8008942:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008944:	e008      	b.n	8008958 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008946:	f7fa fa55 	bl	8002df4 <HAL_GetTick>
 800894a:	4602      	mov	r2, r0
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	2b02      	cmp	r3, #2
 8008952:	d901      	bls.n	8008958 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008954:	2303      	movs	r3, #3
 8008956:	e006      	b.n	8008966 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008958:	4b05      	ldr	r3, [pc, #20]	; (8008970 <RCCEx_PLL2_Config+0x15c>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008960:	2b00      	cmp	r3, #0
 8008962:	d0f0      	beq.n	8008946 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008964:	7bfb      	ldrb	r3, [r7, #15]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	58024400 	.word	0x58024400
 8008974:	ffff0007 	.word	0xffff0007

08008978 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008982:	2300      	movs	r3, #0
 8008984:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008986:	4b53      	ldr	r3, [pc, #332]	; (8008ad4 <RCCEx_PLL3_Config+0x15c>)
 8008988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800898a:	f003 0303 	and.w	r3, r3, #3
 800898e:	2b03      	cmp	r3, #3
 8008990:	d101      	bne.n	8008996 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e099      	b.n	8008aca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008996:	4b4f      	ldr	r3, [pc, #316]	; (8008ad4 <RCCEx_PLL3_Config+0x15c>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a4e      	ldr	r2, [pc, #312]	; (8008ad4 <RCCEx_PLL3_Config+0x15c>)
 800899c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089a2:	f7fa fa27 	bl	8002df4 <HAL_GetTick>
 80089a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80089a8:	e008      	b.n	80089bc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80089aa:	f7fa fa23 	bl	8002df4 <HAL_GetTick>
 80089ae:	4602      	mov	r2, r0
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	1ad3      	subs	r3, r2, r3
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d901      	bls.n	80089bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80089b8:	2303      	movs	r3, #3
 80089ba:	e086      	b.n	8008aca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80089bc:	4b45      	ldr	r3, [pc, #276]	; (8008ad4 <RCCEx_PLL3_Config+0x15c>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d1f0      	bne.n	80089aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80089c8:	4b42      	ldr	r3, [pc, #264]	; (8008ad4 <RCCEx_PLL3_Config+0x15c>)
 80089ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089cc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	051b      	lsls	r3, r3, #20
 80089d6:	493f      	ldr	r1, [pc, #252]	; (8008ad4 <RCCEx_PLL3_Config+0x15c>)
 80089d8:	4313      	orrs	r3, r2
 80089da:	628b      	str	r3, [r1, #40]	; 0x28
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	3b01      	subs	r3, #1
 80089e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	3b01      	subs	r3, #1
 80089ec:	025b      	lsls	r3, r3, #9
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	431a      	orrs	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	3b01      	subs	r3, #1
 80089f8:	041b      	lsls	r3, r3, #16
 80089fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80089fe:	431a      	orrs	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	691b      	ldr	r3, [r3, #16]
 8008a04:	3b01      	subs	r3, #1
 8008a06:	061b      	lsls	r3, r3, #24
 8008a08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008a0c:	4931      	ldr	r1, [pc, #196]	; (8008ad4 <RCCEx_PLL3_Config+0x15c>)
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008a12:	4b30      	ldr	r3, [pc, #192]	; (8008ad4 <RCCEx_PLL3_Config+0x15c>)
 8008a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	695b      	ldr	r3, [r3, #20]
 8008a1e:	492d      	ldr	r1, [pc, #180]	; (8008ad4 <RCCEx_PLL3_Config+0x15c>)
 8008a20:	4313      	orrs	r3, r2
 8008a22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008a24:	4b2b      	ldr	r3, [pc, #172]	; (8008ad4 <RCCEx_PLL3_Config+0x15c>)
 8008a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a28:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	699b      	ldr	r3, [r3, #24]
 8008a30:	4928      	ldr	r1, [pc, #160]	; (8008ad4 <RCCEx_PLL3_Config+0x15c>)
 8008a32:	4313      	orrs	r3, r2
 8008a34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008a36:	4b27      	ldr	r3, [pc, #156]	; (8008ad4 <RCCEx_PLL3_Config+0x15c>)
 8008a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3a:	4a26      	ldr	r2, [pc, #152]	; (8008ad4 <RCCEx_PLL3_Config+0x15c>)
 8008a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008a42:	4b24      	ldr	r3, [pc, #144]	; (8008ad4 <RCCEx_PLL3_Config+0x15c>)
 8008a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a46:	4b24      	ldr	r3, [pc, #144]	; (8008ad8 <RCCEx_PLL3_Config+0x160>)
 8008a48:	4013      	ands	r3, r2
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	69d2      	ldr	r2, [r2, #28]
 8008a4e:	00d2      	lsls	r2, r2, #3
 8008a50:	4920      	ldr	r1, [pc, #128]	; (8008ad4 <RCCEx_PLL3_Config+0x15c>)
 8008a52:	4313      	orrs	r3, r2
 8008a54:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008a56:	4b1f      	ldr	r3, [pc, #124]	; (8008ad4 <RCCEx_PLL3_Config+0x15c>)
 8008a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5a:	4a1e      	ldr	r2, [pc, #120]	; (8008ad4 <RCCEx_PLL3_Config+0x15c>)
 8008a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d106      	bne.n	8008a76 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008a68:	4b1a      	ldr	r3, [pc, #104]	; (8008ad4 <RCCEx_PLL3_Config+0x15c>)
 8008a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6c:	4a19      	ldr	r2, [pc, #100]	; (8008ad4 <RCCEx_PLL3_Config+0x15c>)
 8008a6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008a72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a74:	e00f      	b.n	8008a96 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d106      	bne.n	8008a8a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008a7c:	4b15      	ldr	r3, [pc, #84]	; (8008ad4 <RCCEx_PLL3_Config+0x15c>)
 8008a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a80:	4a14      	ldr	r2, [pc, #80]	; (8008ad4 <RCCEx_PLL3_Config+0x15c>)
 8008a82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008a86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a88:	e005      	b.n	8008a96 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008a8a:	4b12      	ldr	r3, [pc, #72]	; (8008ad4 <RCCEx_PLL3_Config+0x15c>)
 8008a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8e:	4a11      	ldr	r2, [pc, #68]	; (8008ad4 <RCCEx_PLL3_Config+0x15c>)
 8008a90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008a96:	4b0f      	ldr	r3, [pc, #60]	; (8008ad4 <RCCEx_PLL3_Config+0x15c>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a0e      	ldr	r2, [pc, #56]	; (8008ad4 <RCCEx_PLL3_Config+0x15c>)
 8008a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008aa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008aa2:	f7fa f9a7 	bl	8002df4 <HAL_GetTick>
 8008aa6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008aa8:	e008      	b.n	8008abc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008aaa:	f7fa f9a3 	bl	8002df4 <HAL_GetTick>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	1ad3      	subs	r3, r2, r3
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d901      	bls.n	8008abc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	e006      	b.n	8008aca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008abc:	4b05      	ldr	r3, [pc, #20]	; (8008ad4 <RCCEx_PLL3_Config+0x15c>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d0f0      	beq.n	8008aaa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	58024400 	.word	0x58024400
 8008ad8:	ffff0007 	.word	0xffff0007

08008adc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d101      	bne.n	8008aee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e049      	b.n	8008b82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d106      	bne.n	8008b08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f7f9 fdee 	bl	80026e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	3304      	adds	r3, #4
 8008b18:	4619      	mov	r1, r3
 8008b1a:	4610      	mov	r0, r2
 8008b1c:	f000 fea6 	bl	800986c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
	...

08008b8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d001      	beq.n	8008ba4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e054      	b.n	8008c4e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2202      	movs	r2, #2
 8008ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	68da      	ldr	r2, [r3, #12]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f042 0201 	orr.w	r2, r2, #1
 8008bba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a26      	ldr	r2, [pc, #152]	; (8008c5c <HAL_TIM_Base_Start_IT+0xd0>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d022      	beq.n	8008c0c <HAL_TIM_Base_Start_IT+0x80>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bce:	d01d      	beq.n	8008c0c <HAL_TIM_Base_Start_IT+0x80>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a22      	ldr	r2, [pc, #136]	; (8008c60 <HAL_TIM_Base_Start_IT+0xd4>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d018      	beq.n	8008c0c <HAL_TIM_Base_Start_IT+0x80>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a21      	ldr	r2, [pc, #132]	; (8008c64 <HAL_TIM_Base_Start_IT+0xd8>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d013      	beq.n	8008c0c <HAL_TIM_Base_Start_IT+0x80>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a1f      	ldr	r2, [pc, #124]	; (8008c68 <HAL_TIM_Base_Start_IT+0xdc>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d00e      	beq.n	8008c0c <HAL_TIM_Base_Start_IT+0x80>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a1e      	ldr	r2, [pc, #120]	; (8008c6c <HAL_TIM_Base_Start_IT+0xe0>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d009      	beq.n	8008c0c <HAL_TIM_Base_Start_IT+0x80>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a1c      	ldr	r2, [pc, #112]	; (8008c70 <HAL_TIM_Base_Start_IT+0xe4>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d004      	beq.n	8008c0c <HAL_TIM_Base_Start_IT+0x80>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a1b      	ldr	r2, [pc, #108]	; (8008c74 <HAL_TIM_Base_Start_IT+0xe8>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d115      	bne.n	8008c38 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	689a      	ldr	r2, [r3, #8]
 8008c12:	4b19      	ldr	r3, [pc, #100]	; (8008c78 <HAL_TIM_Base_Start_IT+0xec>)
 8008c14:	4013      	ands	r3, r2
 8008c16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2b06      	cmp	r3, #6
 8008c1c:	d015      	beq.n	8008c4a <HAL_TIM_Base_Start_IT+0xbe>
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c24:	d011      	beq.n	8008c4a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f042 0201 	orr.w	r2, r2, #1
 8008c34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c36:	e008      	b.n	8008c4a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f042 0201 	orr.w	r2, r2, #1
 8008c46:	601a      	str	r2, [r3, #0]
 8008c48:	e000      	b.n	8008c4c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3714      	adds	r7, #20
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop
 8008c5c:	40010000 	.word	0x40010000
 8008c60:	40000400 	.word	0x40000400
 8008c64:	40000800 	.word	0x40000800
 8008c68:	40000c00 	.word	0x40000c00
 8008c6c:	40010400 	.word	0x40010400
 8008c70:	40001800 	.word	0x40001800
 8008c74:	40014000 	.word	0x40014000
 8008c78:	00010007 	.word	0x00010007

08008c7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d101      	bne.n	8008c8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e049      	b.n	8008d22 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d106      	bne.n	8008ca8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f841 	bl	8008d2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2202      	movs	r2, #2
 8008cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	3304      	adds	r3, #4
 8008cb8:	4619      	mov	r1, r3
 8008cba:	4610      	mov	r0, r2
 8008cbc:	f000 fdd6 	bl	800986c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3708      	adds	r7, #8
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	b083      	sub	sp, #12
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008d32:	bf00      	nop
 8008d34:	370c      	adds	r7, #12
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
	...

08008d40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d109      	bne.n	8008d64 <HAL_TIM_PWM_Start+0x24>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	bf14      	ite	ne
 8008d5c:	2301      	movne	r3, #1
 8008d5e:	2300      	moveq	r3, #0
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	e03c      	b.n	8008dde <HAL_TIM_PWM_Start+0x9e>
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	2b04      	cmp	r3, #4
 8008d68:	d109      	bne.n	8008d7e <HAL_TIM_PWM_Start+0x3e>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	bf14      	ite	ne
 8008d76:	2301      	movne	r3, #1
 8008d78:	2300      	moveq	r3, #0
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	e02f      	b.n	8008dde <HAL_TIM_PWM_Start+0x9e>
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	2b08      	cmp	r3, #8
 8008d82:	d109      	bne.n	8008d98 <HAL_TIM_PWM_Start+0x58>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	bf14      	ite	ne
 8008d90:	2301      	movne	r3, #1
 8008d92:	2300      	moveq	r3, #0
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	e022      	b.n	8008dde <HAL_TIM_PWM_Start+0x9e>
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	2b0c      	cmp	r3, #12
 8008d9c:	d109      	bne.n	8008db2 <HAL_TIM_PWM_Start+0x72>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	bf14      	ite	ne
 8008daa:	2301      	movne	r3, #1
 8008dac:	2300      	moveq	r3, #0
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	e015      	b.n	8008dde <HAL_TIM_PWM_Start+0x9e>
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	2b10      	cmp	r3, #16
 8008db6:	d109      	bne.n	8008dcc <HAL_TIM_PWM_Start+0x8c>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	bf14      	ite	ne
 8008dc4:	2301      	movne	r3, #1
 8008dc6:	2300      	moveq	r3, #0
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	e008      	b.n	8008dde <HAL_TIM_PWM_Start+0x9e>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	bf14      	ite	ne
 8008dd8:	2301      	movne	r3, #1
 8008dda:	2300      	moveq	r3, #0
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d001      	beq.n	8008de6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e0a1      	b.n	8008f2a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d104      	bne.n	8008df6 <HAL_TIM_PWM_Start+0xb6>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2202      	movs	r2, #2
 8008df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008df4:	e023      	b.n	8008e3e <HAL_TIM_PWM_Start+0xfe>
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	2b04      	cmp	r3, #4
 8008dfa:	d104      	bne.n	8008e06 <HAL_TIM_PWM_Start+0xc6>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2202      	movs	r2, #2
 8008e00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e04:	e01b      	b.n	8008e3e <HAL_TIM_PWM_Start+0xfe>
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	2b08      	cmp	r3, #8
 8008e0a:	d104      	bne.n	8008e16 <HAL_TIM_PWM_Start+0xd6>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2202      	movs	r2, #2
 8008e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e14:	e013      	b.n	8008e3e <HAL_TIM_PWM_Start+0xfe>
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	2b0c      	cmp	r3, #12
 8008e1a:	d104      	bne.n	8008e26 <HAL_TIM_PWM_Start+0xe6>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2202      	movs	r2, #2
 8008e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e24:	e00b      	b.n	8008e3e <HAL_TIM_PWM_Start+0xfe>
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	2b10      	cmp	r3, #16
 8008e2a:	d104      	bne.n	8008e36 <HAL_TIM_PWM_Start+0xf6>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2202      	movs	r2, #2
 8008e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e34:	e003      	b.n	8008e3e <HAL_TIM_PWM_Start+0xfe>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2202      	movs	r2, #2
 8008e3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2201      	movs	r2, #1
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f001 f91e 	bl	800a088 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a38      	ldr	r2, [pc, #224]	; (8008f34 <HAL_TIM_PWM_Start+0x1f4>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d013      	beq.n	8008e7e <HAL_TIM_PWM_Start+0x13e>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a37      	ldr	r2, [pc, #220]	; (8008f38 <HAL_TIM_PWM_Start+0x1f8>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d00e      	beq.n	8008e7e <HAL_TIM_PWM_Start+0x13e>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a35      	ldr	r2, [pc, #212]	; (8008f3c <HAL_TIM_PWM_Start+0x1fc>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d009      	beq.n	8008e7e <HAL_TIM_PWM_Start+0x13e>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a34      	ldr	r2, [pc, #208]	; (8008f40 <HAL_TIM_PWM_Start+0x200>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d004      	beq.n	8008e7e <HAL_TIM_PWM_Start+0x13e>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a32      	ldr	r2, [pc, #200]	; (8008f44 <HAL_TIM_PWM_Start+0x204>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d101      	bne.n	8008e82 <HAL_TIM_PWM_Start+0x142>
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e000      	b.n	8008e84 <HAL_TIM_PWM_Start+0x144>
 8008e82:	2300      	movs	r3, #0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d007      	beq.n	8008e98 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e96:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a25      	ldr	r2, [pc, #148]	; (8008f34 <HAL_TIM_PWM_Start+0x1f4>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d022      	beq.n	8008ee8 <HAL_TIM_PWM_Start+0x1a8>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eaa:	d01d      	beq.n	8008ee8 <HAL_TIM_PWM_Start+0x1a8>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a25      	ldr	r2, [pc, #148]	; (8008f48 <HAL_TIM_PWM_Start+0x208>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d018      	beq.n	8008ee8 <HAL_TIM_PWM_Start+0x1a8>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a24      	ldr	r2, [pc, #144]	; (8008f4c <HAL_TIM_PWM_Start+0x20c>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d013      	beq.n	8008ee8 <HAL_TIM_PWM_Start+0x1a8>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a22      	ldr	r2, [pc, #136]	; (8008f50 <HAL_TIM_PWM_Start+0x210>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d00e      	beq.n	8008ee8 <HAL_TIM_PWM_Start+0x1a8>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a1a      	ldr	r2, [pc, #104]	; (8008f38 <HAL_TIM_PWM_Start+0x1f8>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d009      	beq.n	8008ee8 <HAL_TIM_PWM_Start+0x1a8>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a1e      	ldr	r2, [pc, #120]	; (8008f54 <HAL_TIM_PWM_Start+0x214>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d004      	beq.n	8008ee8 <HAL_TIM_PWM_Start+0x1a8>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a16      	ldr	r2, [pc, #88]	; (8008f3c <HAL_TIM_PWM_Start+0x1fc>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d115      	bne.n	8008f14 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	689a      	ldr	r2, [r3, #8]
 8008eee:	4b1a      	ldr	r3, [pc, #104]	; (8008f58 <HAL_TIM_PWM_Start+0x218>)
 8008ef0:	4013      	ands	r3, r2
 8008ef2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2b06      	cmp	r3, #6
 8008ef8:	d015      	beq.n	8008f26 <HAL_TIM_PWM_Start+0x1e6>
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f00:	d011      	beq.n	8008f26 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f042 0201 	orr.w	r2, r2, #1
 8008f10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f12:	e008      	b.n	8008f26 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f042 0201 	orr.w	r2, r2, #1
 8008f22:	601a      	str	r2, [r3, #0]
 8008f24:	e000      	b.n	8008f28 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	40010000 	.word	0x40010000
 8008f38:	40010400 	.word	0x40010400
 8008f3c:	40014000 	.word	0x40014000
 8008f40:	40014400 	.word	0x40014400
 8008f44:	40014800 	.word	0x40014800
 8008f48:	40000400 	.word	0x40000400
 8008f4c:	40000800 	.word	0x40000800
 8008f50:	40000c00 	.word	0x40000c00
 8008f54:	40001800 	.word	0x40001800
 8008f58:	00010007 	.word	0x00010007

08008f5c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b086      	sub	sp, #24
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d101      	bne.n	8008f70 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e08f      	b.n	8009090 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d106      	bne.n	8008f8a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f7f9 fc23 	bl	80027d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2202      	movs	r2, #2
 8008f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	6899      	ldr	r1, [r3, #8]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	4b3e      	ldr	r3, [pc, #248]	; (8009098 <HAL_TIM_Encoder_Init+0x13c>)
 8008f9e:	400b      	ands	r3, r1
 8008fa0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	3304      	adds	r3, #4
 8008faa:	4619      	mov	r1, r3
 8008fac:	4610      	mov	r0, r2
 8008fae:	f000 fc5d 	bl	800986c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	6a1b      	ldr	r3, [r3, #32]
 8008fc8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	697a      	ldr	r2, [r7, #20]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008fd4:	693a      	ldr	r2, [r7, #16]
 8008fd6:	4b31      	ldr	r3, [pc, #196]	; (800909c <HAL_TIM_Encoder_Init+0x140>)
 8008fd8:	4013      	ands	r3, r2
 8008fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	689a      	ldr	r2, [r3, #8]
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	699b      	ldr	r3, [r3, #24]
 8008fe4:	021b      	lsls	r3, r3, #8
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	693a      	ldr	r2, [r7, #16]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008fee:	693a      	ldr	r2, [r7, #16]
 8008ff0:	4b2b      	ldr	r3, [pc, #172]	; (80090a0 <HAL_TIM_Encoder_Init+0x144>)
 8008ff2:	4013      	ands	r3, r2
 8008ff4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008ff6:	693a      	ldr	r2, [r7, #16]
 8008ff8:	4b2a      	ldr	r3, [pc, #168]	; (80090a4 <HAL_TIM_Encoder_Init+0x148>)
 8008ffa:	4013      	ands	r3, r2
 8008ffc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	68da      	ldr	r2, [r3, #12]
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	69db      	ldr	r3, [r3, #28]
 8009006:	021b      	lsls	r3, r3, #8
 8009008:	4313      	orrs	r3, r2
 800900a:	693a      	ldr	r2, [r7, #16]
 800900c:	4313      	orrs	r3, r2
 800900e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	011a      	lsls	r2, r3, #4
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	6a1b      	ldr	r3, [r3, #32]
 800901a:	031b      	lsls	r3, r3, #12
 800901c:	4313      	orrs	r3, r2
 800901e:	693a      	ldr	r2, [r7, #16]
 8009020:	4313      	orrs	r3, r2
 8009022:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800902a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009032:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	685a      	ldr	r2, [r3, #4]
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	695b      	ldr	r3, [r3, #20]
 800903c:	011b      	lsls	r3, r3, #4
 800903e:	4313      	orrs	r3, r2
 8009040:	68fa      	ldr	r2, [r7, #12]
 8009042:	4313      	orrs	r3, r2
 8009044:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	697a      	ldr	r2, [r7, #20]
 800904c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	693a      	ldr	r2, [r7, #16]
 8009054:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2201      	movs	r2, #1
 8009062:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2201      	movs	r2, #1
 800906a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2201      	movs	r2, #1
 8009072:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2201      	movs	r2, #1
 800907a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2201      	movs	r2, #1
 8009082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2201      	movs	r2, #1
 800908a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800908e:	2300      	movs	r3, #0
}
 8009090:	4618      	mov	r0, r3
 8009092:	3718      	adds	r7, #24
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	fffebff8 	.word	0xfffebff8
 800909c:	fffffcfc 	.word	0xfffffcfc
 80090a0:	fffff3f3 	.word	0xfffff3f3
 80090a4:	ffff0f0f 	.word	0xffff0f0f

080090a8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80090b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80090c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d110      	bne.n	80090fa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d102      	bne.n	80090e4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80090de:	7b7b      	ldrb	r3, [r7, #13]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d001      	beq.n	80090e8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	e069      	b.n	80091bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2202      	movs	r2, #2
 80090ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2202      	movs	r2, #2
 80090f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090f8:	e031      	b.n	800915e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	2b04      	cmp	r3, #4
 80090fe:	d110      	bne.n	8009122 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009100:	7bbb      	ldrb	r3, [r7, #14]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d102      	bne.n	800910c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009106:	7b3b      	ldrb	r3, [r7, #12]
 8009108:	2b01      	cmp	r3, #1
 800910a:	d001      	beq.n	8009110 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	e055      	b.n	80091bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2202      	movs	r2, #2
 8009114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2202      	movs	r2, #2
 800911c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009120:	e01d      	b.n	800915e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009122:	7bfb      	ldrb	r3, [r7, #15]
 8009124:	2b01      	cmp	r3, #1
 8009126:	d108      	bne.n	800913a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009128:	7bbb      	ldrb	r3, [r7, #14]
 800912a:	2b01      	cmp	r3, #1
 800912c:	d105      	bne.n	800913a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800912e:	7b7b      	ldrb	r3, [r7, #13]
 8009130:	2b01      	cmp	r3, #1
 8009132:	d102      	bne.n	800913a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009134:	7b3b      	ldrb	r3, [r7, #12]
 8009136:	2b01      	cmp	r3, #1
 8009138:	d001      	beq.n	800913e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	e03e      	b.n	80091bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2202      	movs	r2, #2
 8009142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2202      	movs	r2, #2
 800914a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2202      	movs	r2, #2
 8009152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2202      	movs	r2, #2
 800915a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d003      	beq.n	800916c <HAL_TIM_Encoder_Start+0xc4>
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	2b04      	cmp	r3, #4
 8009168:	d008      	beq.n	800917c <HAL_TIM_Encoder_Start+0xd4>
 800916a:	e00f      	b.n	800918c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2201      	movs	r2, #1
 8009172:	2100      	movs	r1, #0
 8009174:	4618      	mov	r0, r3
 8009176:	f000 ff87 	bl	800a088 <TIM_CCxChannelCmd>
      break;
 800917a:	e016      	b.n	80091aa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2201      	movs	r2, #1
 8009182:	2104      	movs	r1, #4
 8009184:	4618      	mov	r0, r3
 8009186:	f000 ff7f 	bl	800a088 <TIM_CCxChannelCmd>
      break;
 800918a:	e00e      	b.n	80091aa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2201      	movs	r2, #1
 8009192:	2100      	movs	r1, #0
 8009194:	4618      	mov	r0, r3
 8009196:	f000 ff77 	bl	800a088 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2201      	movs	r2, #1
 80091a0:	2104      	movs	r1, #4
 80091a2:	4618      	mov	r0, r3
 80091a4:	f000 ff70 	bl	800a088 <TIM_CCxChannelCmd>
      break;
 80091a8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f042 0201 	orr.w	r2, r2, #1
 80091b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	691b      	ldr	r3, [r3, #16]
 80091d2:	f003 0302 	and.w	r3, r3, #2
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d122      	bne.n	8009220 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	f003 0302 	and.w	r3, r3, #2
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d11b      	bne.n	8009220 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f06f 0202 	mvn.w	r2, #2
 80091f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2201      	movs	r2, #1
 80091f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	699b      	ldr	r3, [r3, #24]
 80091fe:	f003 0303 	and.w	r3, r3, #3
 8009202:	2b00      	cmp	r3, #0
 8009204:	d003      	beq.n	800920e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 fb12 	bl	8009830 <HAL_TIM_IC_CaptureCallback>
 800920c:	e005      	b.n	800921a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 fb04 	bl	800981c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 fb15 	bl	8009844 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	691b      	ldr	r3, [r3, #16]
 8009226:	f003 0304 	and.w	r3, r3, #4
 800922a:	2b04      	cmp	r3, #4
 800922c:	d122      	bne.n	8009274 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	f003 0304 	and.w	r3, r3, #4
 8009238:	2b04      	cmp	r3, #4
 800923a:	d11b      	bne.n	8009274 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f06f 0204 	mvn.w	r2, #4
 8009244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2202      	movs	r2, #2
 800924a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	699b      	ldr	r3, [r3, #24]
 8009252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009256:	2b00      	cmp	r3, #0
 8009258:	d003      	beq.n	8009262 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fae8 	bl	8009830 <HAL_TIM_IC_CaptureCallback>
 8009260:	e005      	b.n	800926e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 fada 	bl	800981c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 faeb 	bl	8009844 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	691b      	ldr	r3, [r3, #16]
 800927a:	f003 0308 	and.w	r3, r3, #8
 800927e:	2b08      	cmp	r3, #8
 8009280:	d122      	bne.n	80092c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	f003 0308 	and.w	r3, r3, #8
 800928c:	2b08      	cmp	r3, #8
 800928e:	d11b      	bne.n	80092c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f06f 0208 	mvn.w	r2, #8
 8009298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2204      	movs	r2, #4
 800929e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	69db      	ldr	r3, [r3, #28]
 80092a6:	f003 0303 	and.w	r3, r3, #3
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d003      	beq.n	80092b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 fabe 	bl	8009830 <HAL_TIM_IC_CaptureCallback>
 80092b4:	e005      	b.n	80092c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 fab0 	bl	800981c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 fac1 	bl	8009844 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	f003 0310 	and.w	r3, r3, #16
 80092d2:	2b10      	cmp	r3, #16
 80092d4:	d122      	bne.n	800931c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	f003 0310 	and.w	r3, r3, #16
 80092e0:	2b10      	cmp	r3, #16
 80092e2:	d11b      	bne.n	800931c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f06f 0210 	mvn.w	r2, #16
 80092ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2208      	movs	r2, #8
 80092f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	69db      	ldr	r3, [r3, #28]
 80092fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d003      	beq.n	800930a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 fa94 	bl	8009830 <HAL_TIM_IC_CaptureCallback>
 8009308:	e005      	b.n	8009316 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fa86 	bl	800981c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 fa97 	bl	8009844 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	691b      	ldr	r3, [r3, #16]
 8009322:	f003 0301 	and.w	r3, r3, #1
 8009326:	2b01      	cmp	r3, #1
 8009328:	d10e      	bne.n	8009348 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	f003 0301 	and.w	r3, r3, #1
 8009334:	2b01      	cmp	r3, #1
 8009336:	d107      	bne.n	8009348 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f06f 0201 	mvn.w	r2, #1
 8009340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f7f7 fbd8 	bl	8000af8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	691b      	ldr	r3, [r3, #16]
 800934e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009352:	2b80      	cmp	r3, #128	; 0x80
 8009354:	d10e      	bne.n	8009374 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009360:	2b80      	cmp	r3, #128	; 0x80
 8009362:	d107      	bne.n	8009374 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800936c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 ff48 	bl	800a204 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	691b      	ldr	r3, [r3, #16]
 800937a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800937e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009382:	d10e      	bne.n	80093a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800938e:	2b80      	cmp	r3, #128	; 0x80
 8009390:	d107      	bne.n	80093a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800939a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 ff3b 	bl	800a218 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ac:	2b40      	cmp	r3, #64	; 0x40
 80093ae:	d10e      	bne.n	80093ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ba:	2b40      	cmp	r3, #64	; 0x40
 80093bc:	d107      	bne.n	80093ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80093c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 fa45 	bl	8009858 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	f003 0320 	and.w	r3, r3, #32
 80093d8:	2b20      	cmp	r3, #32
 80093da:	d10e      	bne.n	80093fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	f003 0320 	and.w	r3, r3, #32
 80093e6:	2b20      	cmp	r3, #32
 80093e8:	d107      	bne.n	80093fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f06f 0220 	mvn.w	r2, #32
 80093f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 fefb 	bl	800a1f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80093fa:	bf00      	nop
 80093fc:	3708      	adds	r7, #8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
	...

08009404 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b086      	sub	sp, #24
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009410:	2300      	movs	r3, #0
 8009412:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800941a:	2b01      	cmp	r3, #1
 800941c:	d101      	bne.n	8009422 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800941e:	2302      	movs	r3, #2
 8009420:	e0ff      	b.n	8009622 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2201      	movs	r2, #1
 8009426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2b14      	cmp	r3, #20
 800942e:	f200 80f0 	bhi.w	8009612 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009432:	a201      	add	r2, pc, #4	; (adr r2, 8009438 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009438:	0800948d 	.word	0x0800948d
 800943c:	08009613 	.word	0x08009613
 8009440:	08009613 	.word	0x08009613
 8009444:	08009613 	.word	0x08009613
 8009448:	080094cd 	.word	0x080094cd
 800944c:	08009613 	.word	0x08009613
 8009450:	08009613 	.word	0x08009613
 8009454:	08009613 	.word	0x08009613
 8009458:	0800950f 	.word	0x0800950f
 800945c:	08009613 	.word	0x08009613
 8009460:	08009613 	.word	0x08009613
 8009464:	08009613 	.word	0x08009613
 8009468:	0800954f 	.word	0x0800954f
 800946c:	08009613 	.word	0x08009613
 8009470:	08009613 	.word	0x08009613
 8009474:	08009613 	.word	0x08009613
 8009478:	08009591 	.word	0x08009591
 800947c:	08009613 	.word	0x08009613
 8009480:	08009613 	.word	0x08009613
 8009484:	08009613 	.word	0x08009613
 8009488:	080095d1 	.word	0x080095d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68b9      	ldr	r1, [r7, #8]
 8009492:	4618      	mov	r0, r3
 8009494:	f000 fa84 	bl	80099a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	699a      	ldr	r2, [r3, #24]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f042 0208 	orr.w	r2, r2, #8
 80094a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	699a      	ldr	r2, [r3, #24]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f022 0204 	bic.w	r2, r2, #4
 80094b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	6999      	ldr	r1, [r3, #24]
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	691a      	ldr	r2, [r3, #16]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	430a      	orrs	r2, r1
 80094c8:	619a      	str	r2, [r3, #24]
      break;
 80094ca:	e0a5      	b.n	8009618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68b9      	ldr	r1, [r7, #8]
 80094d2:	4618      	mov	r0, r3
 80094d4:	f000 faf4 	bl	8009ac0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	699a      	ldr	r2, [r3, #24]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	699a      	ldr	r2, [r3, #24]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	6999      	ldr	r1, [r3, #24]
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	021a      	lsls	r2, r3, #8
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	430a      	orrs	r2, r1
 800950a:	619a      	str	r2, [r3, #24]
      break;
 800950c:	e084      	b.n	8009618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	68b9      	ldr	r1, [r7, #8]
 8009514:	4618      	mov	r0, r3
 8009516:	f000 fb5d 	bl	8009bd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	69da      	ldr	r2, [r3, #28]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f042 0208 	orr.w	r2, r2, #8
 8009528:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	69da      	ldr	r2, [r3, #28]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f022 0204 	bic.w	r2, r2, #4
 8009538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	69d9      	ldr	r1, [r3, #28]
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	691a      	ldr	r2, [r3, #16]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	430a      	orrs	r2, r1
 800954a:	61da      	str	r2, [r3, #28]
      break;
 800954c:	e064      	b.n	8009618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	68b9      	ldr	r1, [r7, #8]
 8009554:	4618      	mov	r0, r3
 8009556:	f000 fbc5 	bl	8009ce4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	69da      	ldr	r2, [r3, #28]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009568:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	69da      	ldr	r2, [r3, #28]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009578:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	69d9      	ldr	r1, [r3, #28]
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	691b      	ldr	r3, [r3, #16]
 8009584:	021a      	lsls	r2, r3, #8
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	430a      	orrs	r2, r1
 800958c:	61da      	str	r2, [r3, #28]
      break;
 800958e:	e043      	b.n	8009618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	68b9      	ldr	r1, [r7, #8]
 8009596:	4618      	mov	r0, r3
 8009598:	f000 fc0e 	bl	8009db8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f042 0208 	orr.w	r2, r2, #8
 80095aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f022 0204 	bic.w	r2, r2, #4
 80095ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	691a      	ldr	r2, [r3, #16]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	430a      	orrs	r2, r1
 80095cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80095ce:	e023      	b.n	8009618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	68b9      	ldr	r1, [r7, #8]
 80095d6:	4618      	mov	r0, r3
 80095d8:	f000 fc52 	bl	8009e80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	691b      	ldr	r3, [r3, #16]
 8009606:	021a      	lsls	r2, r3, #8
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	430a      	orrs	r2, r1
 800960e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009610:	e002      	b.n	8009618 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	75fb      	strb	r3, [r7, #23]
      break;
 8009616:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2200      	movs	r2, #0
 800961c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009620:	7dfb      	ldrb	r3, [r7, #23]
}
 8009622:	4618      	mov	r0, r3
 8009624:	3718      	adds	r7, #24
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop

0800962c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009636:	2300      	movs	r3, #0
 8009638:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009640:	2b01      	cmp	r3, #1
 8009642:	d101      	bne.n	8009648 <HAL_TIM_ConfigClockSource+0x1c>
 8009644:	2302      	movs	r3, #2
 8009646:	e0dc      	b.n	8009802 <HAL_TIM_ConfigClockSource+0x1d6>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2202      	movs	r2, #2
 8009654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009660:	68ba      	ldr	r2, [r7, #8]
 8009662:	4b6a      	ldr	r3, [pc, #424]	; (800980c <HAL_TIM_ConfigClockSource+0x1e0>)
 8009664:	4013      	ands	r3, r2
 8009666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800966e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	68ba      	ldr	r2, [r7, #8]
 8009676:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a64      	ldr	r2, [pc, #400]	; (8009810 <HAL_TIM_ConfigClockSource+0x1e4>)
 800967e:	4293      	cmp	r3, r2
 8009680:	f000 80a9 	beq.w	80097d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009684:	4a62      	ldr	r2, [pc, #392]	; (8009810 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009686:	4293      	cmp	r3, r2
 8009688:	f200 80ae 	bhi.w	80097e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800968c:	4a61      	ldr	r2, [pc, #388]	; (8009814 <HAL_TIM_ConfigClockSource+0x1e8>)
 800968e:	4293      	cmp	r3, r2
 8009690:	f000 80a1 	beq.w	80097d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009694:	4a5f      	ldr	r2, [pc, #380]	; (8009814 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009696:	4293      	cmp	r3, r2
 8009698:	f200 80a6 	bhi.w	80097e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800969c:	4a5e      	ldr	r2, [pc, #376]	; (8009818 <HAL_TIM_ConfigClockSource+0x1ec>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	f000 8099 	beq.w	80097d6 <HAL_TIM_ConfigClockSource+0x1aa>
 80096a4:	4a5c      	ldr	r2, [pc, #368]	; (8009818 <HAL_TIM_ConfigClockSource+0x1ec>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	f200 809e 	bhi.w	80097e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80096ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80096b0:	f000 8091 	beq.w	80097d6 <HAL_TIM_ConfigClockSource+0x1aa>
 80096b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80096b8:	f200 8096 	bhi.w	80097e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80096bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096c0:	f000 8089 	beq.w	80097d6 <HAL_TIM_ConfigClockSource+0x1aa>
 80096c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096c8:	f200 808e 	bhi.w	80097e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80096cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096d0:	d03e      	beq.n	8009750 <HAL_TIM_ConfigClockSource+0x124>
 80096d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096d6:	f200 8087 	bhi.w	80097e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80096da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096de:	f000 8086 	beq.w	80097ee <HAL_TIM_ConfigClockSource+0x1c2>
 80096e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096e6:	d87f      	bhi.n	80097e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80096e8:	2b70      	cmp	r3, #112	; 0x70
 80096ea:	d01a      	beq.n	8009722 <HAL_TIM_ConfigClockSource+0xf6>
 80096ec:	2b70      	cmp	r3, #112	; 0x70
 80096ee:	d87b      	bhi.n	80097e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80096f0:	2b60      	cmp	r3, #96	; 0x60
 80096f2:	d050      	beq.n	8009796 <HAL_TIM_ConfigClockSource+0x16a>
 80096f4:	2b60      	cmp	r3, #96	; 0x60
 80096f6:	d877      	bhi.n	80097e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80096f8:	2b50      	cmp	r3, #80	; 0x50
 80096fa:	d03c      	beq.n	8009776 <HAL_TIM_ConfigClockSource+0x14a>
 80096fc:	2b50      	cmp	r3, #80	; 0x50
 80096fe:	d873      	bhi.n	80097e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009700:	2b40      	cmp	r3, #64	; 0x40
 8009702:	d058      	beq.n	80097b6 <HAL_TIM_ConfigClockSource+0x18a>
 8009704:	2b40      	cmp	r3, #64	; 0x40
 8009706:	d86f      	bhi.n	80097e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009708:	2b30      	cmp	r3, #48	; 0x30
 800970a:	d064      	beq.n	80097d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800970c:	2b30      	cmp	r3, #48	; 0x30
 800970e:	d86b      	bhi.n	80097e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009710:	2b20      	cmp	r3, #32
 8009712:	d060      	beq.n	80097d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009714:	2b20      	cmp	r3, #32
 8009716:	d867      	bhi.n	80097e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009718:	2b00      	cmp	r3, #0
 800971a:	d05c      	beq.n	80097d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800971c:	2b10      	cmp	r3, #16
 800971e:	d05a      	beq.n	80097d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009720:	e062      	b.n	80097e8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6818      	ldr	r0, [r3, #0]
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	6899      	ldr	r1, [r3, #8]
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	685a      	ldr	r2, [r3, #4]
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	f000 fc89 	bl	800a048 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009744:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	68ba      	ldr	r2, [r7, #8]
 800974c:	609a      	str	r2, [r3, #8]
      break;
 800974e:	e04f      	b.n	80097f0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6818      	ldr	r0, [r3, #0]
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	6899      	ldr	r1, [r3, #8]
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	685a      	ldr	r2, [r3, #4]
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	f000 fc72 	bl	800a048 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	689a      	ldr	r2, [r3, #8]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009772:	609a      	str	r2, [r3, #8]
      break;
 8009774:	e03c      	b.n	80097f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6818      	ldr	r0, [r3, #0]
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	6859      	ldr	r1, [r3, #4]
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	68db      	ldr	r3, [r3, #12]
 8009782:	461a      	mov	r2, r3
 8009784:	f000 fbe2 	bl	8009f4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2150      	movs	r1, #80	; 0x50
 800978e:	4618      	mov	r0, r3
 8009790:	f000 fc3c 	bl	800a00c <TIM_ITRx_SetConfig>
      break;
 8009794:	e02c      	b.n	80097f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6818      	ldr	r0, [r3, #0]
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	6859      	ldr	r1, [r3, #4]
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	461a      	mov	r2, r3
 80097a4:	f000 fc01 	bl	8009faa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2160      	movs	r1, #96	; 0x60
 80097ae:	4618      	mov	r0, r3
 80097b0:	f000 fc2c 	bl	800a00c <TIM_ITRx_SetConfig>
      break;
 80097b4:	e01c      	b.n	80097f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6818      	ldr	r0, [r3, #0]
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	6859      	ldr	r1, [r3, #4]
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	461a      	mov	r2, r3
 80097c4:	f000 fbc2 	bl	8009f4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2140      	movs	r1, #64	; 0x40
 80097ce:	4618      	mov	r0, r3
 80097d0:	f000 fc1c 	bl	800a00c <TIM_ITRx_SetConfig>
      break;
 80097d4:	e00c      	b.n	80097f0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4619      	mov	r1, r3
 80097e0:	4610      	mov	r0, r2
 80097e2:	f000 fc13 	bl	800a00c <TIM_ITRx_SetConfig>
      break;
 80097e6:	e003      	b.n	80097f0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	73fb      	strb	r3, [r7, #15]
      break;
 80097ec:	e000      	b.n	80097f0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80097ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009800:	7bfb      	ldrb	r3, [r7, #15]
}
 8009802:	4618      	mov	r0, r3
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	ffceff88 	.word	0xffceff88
 8009810:	00100040 	.word	0x00100040
 8009814:	00100030 	.word	0x00100030
 8009818:	00100020 	.word	0x00100020

0800981c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009824:	bf00      	nop
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009838:	bf00      	nop
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800984c:	bf00      	nop
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009860:	bf00      	nop
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800986c:	b480      	push	{r7}
 800986e:	b085      	sub	sp, #20
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4a40      	ldr	r2, [pc, #256]	; (8009980 <TIM_Base_SetConfig+0x114>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d013      	beq.n	80098ac <TIM_Base_SetConfig+0x40>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800988a:	d00f      	beq.n	80098ac <TIM_Base_SetConfig+0x40>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	4a3d      	ldr	r2, [pc, #244]	; (8009984 <TIM_Base_SetConfig+0x118>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d00b      	beq.n	80098ac <TIM_Base_SetConfig+0x40>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	4a3c      	ldr	r2, [pc, #240]	; (8009988 <TIM_Base_SetConfig+0x11c>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d007      	beq.n	80098ac <TIM_Base_SetConfig+0x40>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4a3b      	ldr	r2, [pc, #236]	; (800998c <TIM_Base_SetConfig+0x120>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d003      	beq.n	80098ac <TIM_Base_SetConfig+0x40>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	4a3a      	ldr	r2, [pc, #232]	; (8009990 <TIM_Base_SetConfig+0x124>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d108      	bne.n	80098be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	68fa      	ldr	r2, [r7, #12]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4a2f      	ldr	r2, [pc, #188]	; (8009980 <TIM_Base_SetConfig+0x114>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d01f      	beq.n	8009906 <TIM_Base_SetConfig+0x9a>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098cc:	d01b      	beq.n	8009906 <TIM_Base_SetConfig+0x9a>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a2c      	ldr	r2, [pc, #176]	; (8009984 <TIM_Base_SetConfig+0x118>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d017      	beq.n	8009906 <TIM_Base_SetConfig+0x9a>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4a2b      	ldr	r2, [pc, #172]	; (8009988 <TIM_Base_SetConfig+0x11c>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d013      	beq.n	8009906 <TIM_Base_SetConfig+0x9a>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a2a      	ldr	r2, [pc, #168]	; (800998c <TIM_Base_SetConfig+0x120>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d00f      	beq.n	8009906 <TIM_Base_SetConfig+0x9a>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a29      	ldr	r2, [pc, #164]	; (8009990 <TIM_Base_SetConfig+0x124>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d00b      	beq.n	8009906 <TIM_Base_SetConfig+0x9a>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a28      	ldr	r2, [pc, #160]	; (8009994 <TIM_Base_SetConfig+0x128>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d007      	beq.n	8009906 <TIM_Base_SetConfig+0x9a>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4a27      	ldr	r2, [pc, #156]	; (8009998 <TIM_Base_SetConfig+0x12c>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d003      	beq.n	8009906 <TIM_Base_SetConfig+0x9a>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4a26      	ldr	r2, [pc, #152]	; (800999c <TIM_Base_SetConfig+0x130>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d108      	bne.n	8009918 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800990c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	68fa      	ldr	r2, [r7, #12]
 8009914:	4313      	orrs	r3, r2
 8009916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	695b      	ldr	r3, [r3, #20]
 8009922:	4313      	orrs	r3, r2
 8009924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	68fa      	ldr	r2, [r7, #12]
 800992a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	689a      	ldr	r2, [r3, #8]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a10      	ldr	r2, [pc, #64]	; (8009980 <TIM_Base_SetConfig+0x114>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d00f      	beq.n	8009964 <TIM_Base_SetConfig+0xf8>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	4a12      	ldr	r2, [pc, #72]	; (8009990 <TIM_Base_SetConfig+0x124>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d00b      	beq.n	8009964 <TIM_Base_SetConfig+0xf8>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	4a11      	ldr	r2, [pc, #68]	; (8009994 <TIM_Base_SetConfig+0x128>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d007      	beq.n	8009964 <TIM_Base_SetConfig+0xf8>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4a10      	ldr	r2, [pc, #64]	; (8009998 <TIM_Base_SetConfig+0x12c>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d003      	beq.n	8009964 <TIM_Base_SetConfig+0xf8>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	4a0f      	ldr	r2, [pc, #60]	; (800999c <TIM_Base_SetConfig+0x130>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d103      	bne.n	800996c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	691a      	ldr	r2, [r3, #16]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2201      	movs	r2, #1
 8009970:	615a      	str	r2, [r3, #20]
}
 8009972:	bf00      	nop
 8009974:	3714      	adds	r7, #20
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop
 8009980:	40010000 	.word	0x40010000
 8009984:	40000400 	.word	0x40000400
 8009988:	40000800 	.word	0x40000800
 800998c:	40000c00 	.word	0x40000c00
 8009990:	40010400 	.word	0x40010400
 8009994:	40014000 	.word	0x40014000
 8009998:	40014400 	.word	0x40014400
 800999c:	40014800 	.word	0x40014800

080099a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b087      	sub	sp, #28
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6a1b      	ldr	r3, [r3, #32]
 80099ae:	f023 0201 	bic.w	r2, r3, #1
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6a1b      	ldr	r3, [r3, #32]
 80099ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	699b      	ldr	r3, [r3, #24]
 80099c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	4b37      	ldr	r3, [pc, #220]	; (8009aa8 <TIM_OC1_SetConfig+0x108>)
 80099cc:	4013      	ands	r3, r2
 80099ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f023 0303 	bic.w	r3, r3, #3
 80099d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	4313      	orrs	r3, r2
 80099e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	f023 0302 	bic.w	r3, r3, #2
 80099e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	697a      	ldr	r2, [r7, #20]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4a2d      	ldr	r2, [pc, #180]	; (8009aac <TIM_OC1_SetConfig+0x10c>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d00f      	beq.n	8009a1c <TIM_OC1_SetConfig+0x7c>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	4a2c      	ldr	r2, [pc, #176]	; (8009ab0 <TIM_OC1_SetConfig+0x110>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d00b      	beq.n	8009a1c <TIM_OC1_SetConfig+0x7c>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4a2b      	ldr	r2, [pc, #172]	; (8009ab4 <TIM_OC1_SetConfig+0x114>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d007      	beq.n	8009a1c <TIM_OC1_SetConfig+0x7c>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4a2a      	ldr	r2, [pc, #168]	; (8009ab8 <TIM_OC1_SetConfig+0x118>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d003      	beq.n	8009a1c <TIM_OC1_SetConfig+0x7c>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4a29      	ldr	r2, [pc, #164]	; (8009abc <TIM_OC1_SetConfig+0x11c>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d10c      	bne.n	8009a36 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	f023 0308 	bic.w	r3, r3, #8
 8009a22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	697a      	ldr	r2, [r7, #20]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	f023 0304 	bic.w	r3, r3, #4
 8009a34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4a1c      	ldr	r2, [pc, #112]	; (8009aac <TIM_OC1_SetConfig+0x10c>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d00f      	beq.n	8009a5e <TIM_OC1_SetConfig+0xbe>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4a1b      	ldr	r2, [pc, #108]	; (8009ab0 <TIM_OC1_SetConfig+0x110>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d00b      	beq.n	8009a5e <TIM_OC1_SetConfig+0xbe>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	4a1a      	ldr	r2, [pc, #104]	; (8009ab4 <TIM_OC1_SetConfig+0x114>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d007      	beq.n	8009a5e <TIM_OC1_SetConfig+0xbe>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4a19      	ldr	r2, [pc, #100]	; (8009ab8 <TIM_OC1_SetConfig+0x118>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d003      	beq.n	8009a5e <TIM_OC1_SetConfig+0xbe>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4a18      	ldr	r2, [pc, #96]	; (8009abc <TIM_OC1_SetConfig+0x11c>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d111      	bne.n	8009a82 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	695b      	ldr	r3, [r3, #20]
 8009a72:	693a      	ldr	r2, [r7, #16]
 8009a74:	4313      	orrs	r3, r2
 8009a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	699b      	ldr	r3, [r3, #24]
 8009a7c:	693a      	ldr	r2, [r7, #16]
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	693a      	ldr	r2, [r7, #16]
 8009a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	685a      	ldr	r2, [r3, #4]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	697a      	ldr	r2, [r7, #20]
 8009a9a:	621a      	str	r2, [r3, #32]
}
 8009a9c:	bf00      	nop
 8009a9e:	371c      	adds	r7, #28
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr
 8009aa8:	fffeff8f 	.word	0xfffeff8f
 8009aac:	40010000 	.word	0x40010000
 8009ab0:	40010400 	.word	0x40010400
 8009ab4:	40014000 	.word	0x40014000
 8009ab8:	40014400 	.word	0x40014400
 8009abc:	40014800 	.word	0x40014800

08009ac0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b087      	sub	sp, #28
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6a1b      	ldr	r3, [r3, #32]
 8009ace:	f023 0210 	bic.w	r2, r3, #16
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6a1b      	ldr	r3, [r3, #32]
 8009ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	699b      	ldr	r3, [r3, #24]
 8009ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	4b34      	ldr	r3, [pc, #208]	; (8009bbc <TIM_OC2_SetConfig+0xfc>)
 8009aec:	4013      	ands	r3, r2
 8009aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009af6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	021b      	lsls	r3, r3, #8
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	f023 0320 	bic.w	r3, r3, #32
 8009b0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	011b      	lsls	r3, r3, #4
 8009b12:	697a      	ldr	r2, [r7, #20]
 8009b14:	4313      	orrs	r3, r2
 8009b16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	4a29      	ldr	r2, [pc, #164]	; (8009bc0 <TIM_OC2_SetConfig+0x100>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d003      	beq.n	8009b28 <TIM_OC2_SetConfig+0x68>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	4a28      	ldr	r2, [pc, #160]	; (8009bc4 <TIM_OC2_SetConfig+0x104>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d10d      	bne.n	8009b44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	011b      	lsls	r3, r3, #4
 8009b36:	697a      	ldr	r2, [r7, #20]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	4a1e      	ldr	r2, [pc, #120]	; (8009bc0 <TIM_OC2_SetConfig+0x100>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d00f      	beq.n	8009b6c <TIM_OC2_SetConfig+0xac>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	4a1d      	ldr	r2, [pc, #116]	; (8009bc4 <TIM_OC2_SetConfig+0x104>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d00b      	beq.n	8009b6c <TIM_OC2_SetConfig+0xac>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	4a1c      	ldr	r2, [pc, #112]	; (8009bc8 <TIM_OC2_SetConfig+0x108>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d007      	beq.n	8009b6c <TIM_OC2_SetConfig+0xac>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	4a1b      	ldr	r2, [pc, #108]	; (8009bcc <TIM_OC2_SetConfig+0x10c>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d003      	beq.n	8009b6c <TIM_OC2_SetConfig+0xac>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4a1a      	ldr	r2, [pc, #104]	; (8009bd0 <TIM_OC2_SetConfig+0x110>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d113      	bne.n	8009b94 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	695b      	ldr	r3, [r3, #20]
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	693a      	ldr	r2, [r7, #16]
 8009b84:	4313      	orrs	r3, r2
 8009b86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	699b      	ldr	r3, [r3, #24]
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	693a      	ldr	r2, [r7, #16]
 8009b90:	4313      	orrs	r3, r2
 8009b92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	693a      	ldr	r2, [r7, #16]
 8009b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	68fa      	ldr	r2, [r7, #12]
 8009b9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	685a      	ldr	r2, [r3, #4]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	697a      	ldr	r2, [r7, #20]
 8009bac:	621a      	str	r2, [r3, #32]
}
 8009bae:	bf00      	nop
 8009bb0:	371c      	adds	r7, #28
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr
 8009bba:	bf00      	nop
 8009bbc:	feff8fff 	.word	0xfeff8fff
 8009bc0:	40010000 	.word	0x40010000
 8009bc4:	40010400 	.word	0x40010400
 8009bc8:	40014000 	.word	0x40014000
 8009bcc:	40014400 	.word	0x40014400
 8009bd0:	40014800 	.word	0x40014800

08009bd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b087      	sub	sp, #28
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6a1b      	ldr	r3, [r3, #32]
 8009be2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a1b      	ldr	r3, [r3, #32]
 8009bee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	69db      	ldr	r3, [r3, #28]
 8009bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	4b33      	ldr	r3, [pc, #204]	; (8009ccc <TIM_OC3_SetConfig+0xf8>)
 8009c00:	4013      	ands	r3, r2
 8009c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f023 0303 	bic.w	r3, r3, #3
 8009c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	4313      	orrs	r3, r2
 8009c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	021b      	lsls	r3, r3, #8
 8009c24:	697a      	ldr	r2, [r7, #20]
 8009c26:	4313      	orrs	r3, r2
 8009c28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4a28      	ldr	r2, [pc, #160]	; (8009cd0 <TIM_OC3_SetConfig+0xfc>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d003      	beq.n	8009c3a <TIM_OC3_SetConfig+0x66>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	4a27      	ldr	r2, [pc, #156]	; (8009cd4 <TIM_OC3_SetConfig+0x100>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d10d      	bne.n	8009c56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	68db      	ldr	r3, [r3, #12]
 8009c46:	021b      	lsls	r3, r3, #8
 8009c48:	697a      	ldr	r2, [r7, #20]
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a1d      	ldr	r2, [pc, #116]	; (8009cd0 <TIM_OC3_SetConfig+0xfc>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d00f      	beq.n	8009c7e <TIM_OC3_SetConfig+0xaa>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4a1c      	ldr	r2, [pc, #112]	; (8009cd4 <TIM_OC3_SetConfig+0x100>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d00b      	beq.n	8009c7e <TIM_OC3_SetConfig+0xaa>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4a1b      	ldr	r2, [pc, #108]	; (8009cd8 <TIM_OC3_SetConfig+0x104>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d007      	beq.n	8009c7e <TIM_OC3_SetConfig+0xaa>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4a1a      	ldr	r2, [pc, #104]	; (8009cdc <TIM_OC3_SetConfig+0x108>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d003      	beq.n	8009c7e <TIM_OC3_SetConfig+0xaa>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a19      	ldr	r2, [pc, #100]	; (8009ce0 <TIM_OC3_SetConfig+0x10c>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d113      	bne.n	8009ca6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	695b      	ldr	r3, [r3, #20]
 8009c92:	011b      	lsls	r3, r3, #4
 8009c94:	693a      	ldr	r2, [r7, #16]
 8009c96:	4313      	orrs	r3, r2
 8009c98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	699b      	ldr	r3, [r3, #24]
 8009c9e:	011b      	lsls	r3, r3, #4
 8009ca0:	693a      	ldr	r2, [r7, #16]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	693a      	ldr	r2, [r7, #16]
 8009caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	685a      	ldr	r2, [r3, #4]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	697a      	ldr	r2, [r7, #20]
 8009cbe:	621a      	str	r2, [r3, #32]
}
 8009cc0:	bf00      	nop
 8009cc2:	371c      	adds	r7, #28
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr
 8009ccc:	fffeff8f 	.word	0xfffeff8f
 8009cd0:	40010000 	.word	0x40010000
 8009cd4:	40010400 	.word	0x40010400
 8009cd8:	40014000 	.word	0x40014000
 8009cdc:	40014400 	.word	0x40014400
 8009ce0:	40014800 	.word	0x40014800

08009ce4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b087      	sub	sp, #28
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6a1b      	ldr	r3, [r3, #32]
 8009cf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6a1b      	ldr	r3, [r3, #32]
 8009cfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	69db      	ldr	r3, [r3, #28]
 8009d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	4b24      	ldr	r3, [pc, #144]	; (8009da0 <TIM_OC4_SetConfig+0xbc>)
 8009d10:	4013      	ands	r3, r2
 8009d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	021b      	lsls	r3, r3, #8
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	4313      	orrs	r3, r2
 8009d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	031b      	lsls	r3, r3, #12
 8009d36:	693a      	ldr	r2, [r7, #16]
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a19      	ldr	r2, [pc, #100]	; (8009da4 <TIM_OC4_SetConfig+0xc0>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d00f      	beq.n	8009d64 <TIM_OC4_SetConfig+0x80>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4a18      	ldr	r2, [pc, #96]	; (8009da8 <TIM_OC4_SetConfig+0xc4>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d00b      	beq.n	8009d64 <TIM_OC4_SetConfig+0x80>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	4a17      	ldr	r2, [pc, #92]	; (8009dac <TIM_OC4_SetConfig+0xc8>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d007      	beq.n	8009d64 <TIM_OC4_SetConfig+0x80>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	4a16      	ldr	r2, [pc, #88]	; (8009db0 <TIM_OC4_SetConfig+0xcc>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d003      	beq.n	8009d64 <TIM_OC4_SetConfig+0x80>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4a15      	ldr	r2, [pc, #84]	; (8009db4 <TIM_OC4_SetConfig+0xd0>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d109      	bne.n	8009d78 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	695b      	ldr	r3, [r3, #20]
 8009d70:	019b      	lsls	r3, r3, #6
 8009d72:	697a      	ldr	r2, [r7, #20]
 8009d74:	4313      	orrs	r3, r2
 8009d76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	697a      	ldr	r2, [r7, #20]
 8009d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	68fa      	ldr	r2, [r7, #12]
 8009d82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	685a      	ldr	r2, [r3, #4]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	693a      	ldr	r2, [r7, #16]
 8009d90:	621a      	str	r2, [r3, #32]
}
 8009d92:	bf00      	nop
 8009d94:	371c      	adds	r7, #28
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop
 8009da0:	feff8fff 	.word	0xfeff8fff
 8009da4:	40010000 	.word	0x40010000
 8009da8:	40010400 	.word	0x40010400
 8009dac:	40014000 	.word	0x40014000
 8009db0:	40014400 	.word	0x40014400
 8009db4:	40014800 	.word	0x40014800

08009db8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b087      	sub	sp, #28
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a1b      	ldr	r3, [r3, #32]
 8009dc6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a1b      	ldr	r3, [r3, #32]
 8009dd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009de0:	68fa      	ldr	r2, [r7, #12]
 8009de2:	4b21      	ldr	r3, [pc, #132]	; (8009e68 <TIM_OC5_SetConfig+0xb0>)
 8009de4:	4013      	ands	r3, r2
 8009de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009df8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	041b      	lsls	r3, r3, #16
 8009e00:	693a      	ldr	r2, [r7, #16]
 8009e02:	4313      	orrs	r3, r2
 8009e04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	4a18      	ldr	r2, [pc, #96]	; (8009e6c <TIM_OC5_SetConfig+0xb4>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d00f      	beq.n	8009e2e <TIM_OC5_SetConfig+0x76>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	4a17      	ldr	r2, [pc, #92]	; (8009e70 <TIM_OC5_SetConfig+0xb8>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d00b      	beq.n	8009e2e <TIM_OC5_SetConfig+0x76>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	4a16      	ldr	r2, [pc, #88]	; (8009e74 <TIM_OC5_SetConfig+0xbc>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d007      	beq.n	8009e2e <TIM_OC5_SetConfig+0x76>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	4a15      	ldr	r2, [pc, #84]	; (8009e78 <TIM_OC5_SetConfig+0xc0>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d003      	beq.n	8009e2e <TIM_OC5_SetConfig+0x76>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	4a14      	ldr	r2, [pc, #80]	; (8009e7c <TIM_OC5_SetConfig+0xc4>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d109      	bne.n	8009e42 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	695b      	ldr	r3, [r3, #20]
 8009e3a:	021b      	lsls	r3, r3, #8
 8009e3c:	697a      	ldr	r2, [r7, #20]
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	697a      	ldr	r2, [r7, #20]
 8009e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	68fa      	ldr	r2, [r7, #12]
 8009e4c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	685a      	ldr	r2, [r3, #4]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	693a      	ldr	r2, [r7, #16]
 8009e5a:	621a      	str	r2, [r3, #32]
}
 8009e5c:	bf00      	nop
 8009e5e:	371c      	adds	r7, #28
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr
 8009e68:	fffeff8f 	.word	0xfffeff8f
 8009e6c:	40010000 	.word	0x40010000
 8009e70:	40010400 	.word	0x40010400
 8009e74:	40014000 	.word	0x40014000
 8009e78:	40014400 	.word	0x40014400
 8009e7c:	40014800 	.word	0x40014800

08009e80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b087      	sub	sp, #28
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a1b      	ldr	r3, [r3, #32]
 8009e8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a1b      	ldr	r3, [r3, #32]
 8009e9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	4b22      	ldr	r3, [pc, #136]	; (8009f34 <TIM_OC6_SetConfig+0xb4>)
 8009eac:	4013      	ands	r3, r2
 8009eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	021b      	lsls	r3, r3, #8
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ec2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	051b      	lsls	r3, r3, #20
 8009eca:	693a      	ldr	r2, [r7, #16]
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4a19      	ldr	r2, [pc, #100]	; (8009f38 <TIM_OC6_SetConfig+0xb8>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d00f      	beq.n	8009ef8 <TIM_OC6_SetConfig+0x78>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a18      	ldr	r2, [pc, #96]	; (8009f3c <TIM_OC6_SetConfig+0xbc>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d00b      	beq.n	8009ef8 <TIM_OC6_SetConfig+0x78>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4a17      	ldr	r2, [pc, #92]	; (8009f40 <TIM_OC6_SetConfig+0xc0>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d007      	beq.n	8009ef8 <TIM_OC6_SetConfig+0x78>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4a16      	ldr	r2, [pc, #88]	; (8009f44 <TIM_OC6_SetConfig+0xc4>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d003      	beq.n	8009ef8 <TIM_OC6_SetConfig+0x78>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	4a15      	ldr	r2, [pc, #84]	; (8009f48 <TIM_OC6_SetConfig+0xc8>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d109      	bne.n	8009f0c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009efe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	695b      	ldr	r3, [r3, #20]
 8009f04:	029b      	lsls	r3, r3, #10
 8009f06:	697a      	ldr	r2, [r7, #20]
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	697a      	ldr	r2, [r7, #20]
 8009f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	68fa      	ldr	r2, [r7, #12]
 8009f16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	685a      	ldr	r2, [r3, #4]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	693a      	ldr	r2, [r7, #16]
 8009f24:	621a      	str	r2, [r3, #32]
}
 8009f26:	bf00      	nop
 8009f28:	371c      	adds	r7, #28
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr
 8009f32:	bf00      	nop
 8009f34:	feff8fff 	.word	0xfeff8fff
 8009f38:	40010000 	.word	0x40010000
 8009f3c:	40010400 	.word	0x40010400
 8009f40:	40014000 	.word	0x40014000
 8009f44:	40014400 	.word	0x40014400
 8009f48:	40014800 	.word	0x40014800

08009f4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b087      	sub	sp, #28
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	6a1b      	ldr	r3, [r3, #32]
 8009f5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	6a1b      	ldr	r3, [r3, #32]
 8009f62:	f023 0201 	bic.w	r2, r3, #1
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	699b      	ldr	r3, [r3, #24]
 8009f6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	011b      	lsls	r3, r3, #4
 8009f7c:	693a      	ldr	r2, [r7, #16]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	f023 030a 	bic.w	r3, r3, #10
 8009f88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f8a:	697a      	ldr	r2, [r7, #20]
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	693a      	ldr	r2, [r7, #16]
 8009f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	697a      	ldr	r2, [r7, #20]
 8009f9c:	621a      	str	r2, [r3, #32]
}
 8009f9e:	bf00      	nop
 8009fa0:	371c      	adds	r7, #28
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr

08009faa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009faa:	b480      	push	{r7}
 8009fac:	b087      	sub	sp, #28
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	60f8      	str	r0, [r7, #12]
 8009fb2:	60b9      	str	r1, [r7, #8]
 8009fb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6a1b      	ldr	r3, [r3, #32]
 8009fba:	f023 0210 	bic.w	r2, r3, #16
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	699b      	ldr	r3, [r3, #24]
 8009fc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6a1b      	ldr	r3, [r3, #32]
 8009fcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009fd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	031b      	lsls	r3, r3, #12
 8009fda:	697a      	ldr	r2, [r7, #20]
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009fe6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	011b      	lsls	r3, r3, #4
 8009fec:	693a      	ldr	r2, [r7, #16]
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	697a      	ldr	r2, [r7, #20]
 8009ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	693a      	ldr	r2, [r7, #16]
 8009ffc:	621a      	str	r2, [r3, #32]
}
 8009ffe:	bf00      	nop
 800a000:	371c      	adds	r7, #28
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr
	...

0800a00c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a01c:	68fa      	ldr	r2, [r7, #12]
 800a01e:	4b09      	ldr	r3, [pc, #36]	; (800a044 <TIM_ITRx_SetConfig+0x38>)
 800a020:	4013      	ands	r3, r2
 800a022:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a024:	683a      	ldr	r2, [r7, #0]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	4313      	orrs	r3, r2
 800a02a:	f043 0307 	orr.w	r3, r3, #7
 800a02e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	68fa      	ldr	r2, [r7, #12]
 800a034:	609a      	str	r2, [r3, #8]
}
 800a036:	bf00      	nop
 800a038:	3714      	adds	r7, #20
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop
 800a044:	ffcfff8f 	.word	0xffcfff8f

0800a048 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a048:	b480      	push	{r7}
 800a04a:	b087      	sub	sp, #28
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	607a      	str	r2, [r7, #4]
 800a054:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a062:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	021a      	lsls	r2, r3, #8
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	431a      	orrs	r2, r3
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	4313      	orrs	r3, r2
 800a070:	697a      	ldr	r2, [r7, #20]
 800a072:	4313      	orrs	r3, r2
 800a074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	697a      	ldr	r2, [r7, #20]
 800a07a:	609a      	str	r2, [r3, #8]
}
 800a07c:	bf00      	nop
 800a07e:	371c      	adds	r7, #28
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a088:	b480      	push	{r7}
 800a08a:	b087      	sub	sp, #28
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	f003 031f 	and.w	r3, r3, #31
 800a09a:	2201      	movs	r2, #1
 800a09c:	fa02 f303 	lsl.w	r3, r2, r3
 800a0a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	6a1a      	ldr	r2, [r3, #32]
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	43db      	mvns	r3, r3
 800a0aa:	401a      	ands	r2, r3
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6a1a      	ldr	r2, [r3, #32]
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	f003 031f 	and.w	r3, r3, #31
 800a0ba:	6879      	ldr	r1, [r7, #4]
 800a0bc:	fa01 f303 	lsl.w	r3, r1, r3
 800a0c0:	431a      	orrs	r2, r3
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	621a      	str	r2, [r3, #32]
}
 800a0c6:	bf00      	nop
 800a0c8:	371c      	adds	r7, #28
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
	...

0800a0d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b085      	sub	sp, #20
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d101      	bne.n	800a0ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a0e8:	2302      	movs	r3, #2
 800a0ea:	e06d      	b.n	800a1c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2202      	movs	r2, #2
 800a0f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a30      	ldr	r2, [pc, #192]	; (800a1d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d004      	beq.n	800a120 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4a2f      	ldr	r2, [pc, #188]	; (800a1d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d108      	bne.n	800a132 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a126:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	68fa      	ldr	r2, [r7, #12]
 800a12e:	4313      	orrs	r3, r2
 800a130:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a138:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	68fa      	ldr	r2, [r7, #12]
 800a140:	4313      	orrs	r3, r2
 800a142:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	68fa      	ldr	r2, [r7, #12]
 800a14a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a20      	ldr	r2, [pc, #128]	; (800a1d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d022      	beq.n	800a19c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a15e:	d01d      	beq.n	800a19c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a1d      	ldr	r2, [pc, #116]	; (800a1dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d018      	beq.n	800a19c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a1c      	ldr	r2, [pc, #112]	; (800a1e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d013      	beq.n	800a19c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a1a      	ldr	r2, [pc, #104]	; (800a1e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d00e      	beq.n	800a19c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a15      	ldr	r2, [pc, #84]	; (800a1d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d009      	beq.n	800a19c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a16      	ldr	r2, [pc, #88]	; (800a1e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d004      	beq.n	800a19c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a15      	ldr	r2, [pc, #84]	; (800a1ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d10c      	bne.n	800a1b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	68ba      	ldr	r2, [r7, #8]
 800a1b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1c6:	2300      	movs	r3, #0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3714      	adds	r7, #20
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr
 800a1d4:	40010000 	.word	0x40010000
 800a1d8:	40010400 	.word	0x40010400
 800a1dc:	40000400 	.word	0x40000400
 800a1e0:	40000800 	.word	0x40000800
 800a1e4:	40000c00 	.word	0x40000c00
 800a1e8:	40001800 	.word	0x40001800
 800a1ec:	40014000 	.word	0x40014000

0800a1f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a1f8:	bf00      	nop
 800a1fa:	370c      	adds	r7, #12
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a20c:	bf00      	nop
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a220:	bf00      	nop
 800a222:	370c      	adds	r7, #12
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d101      	bne.n	800a23e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a23a:	2301      	movs	r3, #1
 800a23c:	e042      	b.n	800a2c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a244:	2b00      	cmp	r3, #0
 800a246:	d106      	bne.n	800a256 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2200      	movs	r2, #0
 800a24c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f7f8 fb43 	bl	80028dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2224      	movs	r2, #36	; 0x24
 800a25a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f022 0201 	bic.w	r2, r2, #1
 800a26c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 f8c2 	bl	800a3f8 <UART_SetConfig>
 800a274:	4603      	mov	r3, r0
 800a276:	2b01      	cmp	r3, #1
 800a278:	d101      	bne.n	800a27e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a27a:	2301      	movs	r3, #1
 800a27c:	e022      	b.n	800a2c4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a282:	2b00      	cmp	r3, #0
 800a284:	d002      	beq.n	800a28c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 fe16 	bl	800aeb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	685a      	ldr	r2, [r3, #4]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a29a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	689a      	ldr	r2, [r3, #8]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a2aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f042 0201 	orr.w	r2, r2, #1
 800a2ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 fe9d 	bl	800affc <UART_CheckIdleState>
 800a2c2:	4603      	mov	r3, r0
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3708      	adds	r7, #8
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b08a      	sub	sp, #40	; 0x28
 800a2d0:	af02      	add	r7, sp, #8
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	603b      	str	r3, [r7, #0]
 800a2d8:	4613      	mov	r3, r2
 800a2da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2e2:	2b20      	cmp	r3, #32
 800a2e4:	f040 8083 	bne.w	800a3ee <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d002      	beq.n	800a2f4 <HAL_UART_Transmit+0x28>
 800a2ee:	88fb      	ldrh	r3, [r7, #6]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d101      	bne.n	800a2f8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e07b      	b.n	800a3f0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d101      	bne.n	800a306 <HAL_UART_Transmit+0x3a>
 800a302:	2302      	movs	r3, #2
 800a304:	e074      	b.n	800a3f0 <HAL_UART_Transmit+0x124>
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2201      	movs	r2, #1
 800a30a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2200      	movs	r2, #0
 800a312:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2221      	movs	r2, #33	; 0x21
 800a31a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a31e:	f7f8 fd69 	bl	8002df4 <HAL_GetTick>
 800a322:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	88fa      	ldrh	r2, [r7, #6]
 800a328:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	88fa      	ldrh	r2, [r7, #6]
 800a330:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a33c:	d108      	bne.n	800a350 <HAL_UART_Transmit+0x84>
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	691b      	ldr	r3, [r3, #16]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d104      	bne.n	800a350 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a346:	2300      	movs	r3, #0
 800a348:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	61bb      	str	r3, [r7, #24]
 800a34e:	e003      	b.n	800a358 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a354:	2300      	movs	r3, #0
 800a356:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2200      	movs	r2, #0
 800a35c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a360:	e02c      	b.n	800a3bc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	2200      	movs	r2, #0
 800a36a:	2180      	movs	r1, #128	; 0x80
 800a36c:	68f8      	ldr	r0, [r7, #12]
 800a36e:	f000 fe90 	bl	800b092 <UART_WaitOnFlagUntilTimeout>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d001      	beq.n	800a37c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a378:	2303      	movs	r3, #3
 800a37a:	e039      	b.n	800a3f0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d10b      	bne.n	800a39a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a382:	69bb      	ldr	r3, [r7, #24]
 800a384:	881b      	ldrh	r3, [r3, #0]
 800a386:	461a      	mov	r2, r3
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a390:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a392:	69bb      	ldr	r3, [r7, #24]
 800a394:	3302      	adds	r3, #2
 800a396:	61bb      	str	r3, [r7, #24]
 800a398:	e007      	b.n	800a3aa <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	781a      	ldrb	r2, [r3, #0]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	3b01      	subs	r3, #1
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d1cc      	bne.n	800a362 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	9300      	str	r3, [sp, #0]
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	2140      	movs	r1, #64	; 0x40
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f000 fe5d 	bl	800b092 <UART_WaitOnFlagUntilTimeout>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d001      	beq.n	800a3e2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a3de:	2303      	movs	r3, #3
 800a3e0:	e006      	b.n	800a3f0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2220      	movs	r2, #32
 800a3e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	e000      	b.n	800a3f0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a3ee:	2302      	movs	r3, #2
  }
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3720      	adds	r7, #32
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3f8:	b5b0      	push	{r4, r5, r7, lr}
 800a3fa:	b08e      	sub	sp, #56	; 0x38
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a400:	2300      	movs	r3, #0
 800a402:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	689a      	ldr	r2, [r3, #8]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	691b      	ldr	r3, [r3, #16]
 800a40e:	431a      	orrs	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	695b      	ldr	r3, [r3, #20]
 800a414:	431a      	orrs	r2, r3
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	69db      	ldr	r3, [r3, #28]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	681a      	ldr	r2, [r3, #0]
 800a424:	4bbf      	ldr	r3, [pc, #764]	; (800a724 <UART_SetConfig+0x32c>)
 800a426:	4013      	ands	r3, r2
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	6812      	ldr	r2, [r2, #0]
 800a42c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a42e:	430b      	orrs	r3, r1
 800a430:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	68da      	ldr	r2, [r3, #12]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	430a      	orrs	r2, r1
 800a446:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	699b      	ldr	r3, [r3, #24]
 800a44c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4ab5      	ldr	r2, [pc, #724]	; (800a728 <UART_SetConfig+0x330>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d004      	beq.n	800a462 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6a1b      	ldr	r3, [r3, #32]
 800a45c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a45e:	4313      	orrs	r3, r2
 800a460:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	689a      	ldr	r2, [r3, #8]
 800a468:	4bb0      	ldr	r3, [pc, #704]	; (800a72c <UART_SetConfig+0x334>)
 800a46a:	4013      	ands	r3, r2
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	6812      	ldr	r2, [r2, #0]
 800a470:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a472:	430b      	orrs	r3, r1
 800a474:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47c:	f023 010f 	bic.w	r1, r3, #15
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	430a      	orrs	r2, r1
 800a48a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4aa7      	ldr	r2, [pc, #668]	; (800a730 <UART_SetConfig+0x338>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d176      	bne.n	800a584 <UART_SetConfig+0x18c>
 800a496:	4ba7      	ldr	r3, [pc, #668]	; (800a734 <UART_SetConfig+0x33c>)
 800a498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a49a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a49e:	2b28      	cmp	r3, #40	; 0x28
 800a4a0:	d86c      	bhi.n	800a57c <UART_SetConfig+0x184>
 800a4a2:	a201      	add	r2, pc, #4	; (adr r2, 800a4a8 <UART_SetConfig+0xb0>)
 800a4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a8:	0800a54d 	.word	0x0800a54d
 800a4ac:	0800a57d 	.word	0x0800a57d
 800a4b0:	0800a57d 	.word	0x0800a57d
 800a4b4:	0800a57d 	.word	0x0800a57d
 800a4b8:	0800a57d 	.word	0x0800a57d
 800a4bc:	0800a57d 	.word	0x0800a57d
 800a4c0:	0800a57d 	.word	0x0800a57d
 800a4c4:	0800a57d 	.word	0x0800a57d
 800a4c8:	0800a555 	.word	0x0800a555
 800a4cc:	0800a57d 	.word	0x0800a57d
 800a4d0:	0800a57d 	.word	0x0800a57d
 800a4d4:	0800a57d 	.word	0x0800a57d
 800a4d8:	0800a57d 	.word	0x0800a57d
 800a4dc:	0800a57d 	.word	0x0800a57d
 800a4e0:	0800a57d 	.word	0x0800a57d
 800a4e4:	0800a57d 	.word	0x0800a57d
 800a4e8:	0800a55d 	.word	0x0800a55d
 800a4ec:	0800a57d 	.word	0x0800a57d
 800a4f0:	0800a57d 	.word	0x0800a57d
 800a4f4:	0800a57d 	.word	0x0800a57d
 800a4f8:	0800a57d 	.word	0x0800a57d
 800a4fc:	0800a57d 	.word	0x0800a57d
 800a500:	0800a57d 	.word	0x0800a57d
 800a504:	0800a57d 	.word	0x0800a57d
 800a508:	0800a565 	.word	0x0800a565
 800a50c:	0800a57d 	.word	0x0800a57d
 800a510:	0800a57d 	.word	0x0800a57d
 800a514:	0800a57d 	.word	0x0800a57d
 800a518:	0800a57d 	.word	0x0800a57d
 800a51c:	0800a57d 	.word	0x0800a57d
 800a520:	0800a57d 	.word	0x0800a57d
 800a524:	0800a57d 	.word	0x0800a57d
 800a528:	0800a56d 	.word	0x0800a56d
 800a52c:	0800a57d 	.word	0x0800a57d
 800a530:	0800a57d 	.word	0x0800a57d
 800a534:	0800a57d 	.word	0x0800a57d
 800a538:	0800a57d 	.word	0x0800a57d
 800a53c:	0800a57d 	.word	0x0800a57d
 800a540:	0800a57d 	.word	0x0800a57d
 800a544:	0800a57d 	.word	0x0800a57d
 800a548:	0800a575 	.word	0x0800a575
 800a54c:	2301      	movs	r3, #1
 800a54e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a552:	e222      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a554:	2304      	movs	r3, #4
 800a556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a55a:	e21e      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a55c:	2308      	movs	r3, #8
 800a55e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a562:	e21a      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a564:	2310      	movs	r3, #16
 800a566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a56a:	e216      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a56c:	2320      	movs	r3, #32
 800a56e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a572:	e212      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a574:	2340      	movs	r3, #64	; 0x40
 800a576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a57a:	e20e      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a57c:	2380      	movs	r3, #128	; 0x80
 800a57e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a582:	e20a      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a6b      	ldr	r2, [pc, #428]	; (800a738 <UART_SetConfig+0x340>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d130      	bne.n	800a5f0 <UART_SetConfig+0x1f8>
 800a58e:	4b69      	ldr	r3, [pc, #420]	; (800a734 <UART_SetConfig+0x33c>)
 800a590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a592:	f003 0307 	and.w	r3, r3, #7
 800a596:	2b05      	cmp	r3, #5
 800a598:	d826      	bhi.n	800a5e8 <UART_SetConfig+0x1f0>
 800a59a:	a201      	add	r2, pc, #4	; (adr r2, 800a5a0 <UART_SetConfig+0x1a8>)
 800a59c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a0:	0800a5b9 	.word	0x0800a5b9
 800a5a4:	0800a5c1 	.word	0x0800a5c1
 800a5a8:	0800a5c9 	.word	0x0800a5c9
 800a5ac:	0800a5d1 	.word	0x0800a5d1
 800a5b0:	0800a5d9 	.word	0x0800a5d9
 800a5b4:	0800a5e1 	.word	0x0800a5e1
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5be:	e1ec      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a5c0:	2304      	movs	r3, #4
 800a5c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5c6:	e1e8      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a5c8:	2308      	movs	r3, #8
 800a5ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ce:	e1e4      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a5d0:	2310      	movs	r3, #16
 800a5d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5d6:	e1e0      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a5d8:	2320      	movs	r3, #32
 800a5da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5de:	e1dc      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a5e0:	2340      	movs	r3, #64	; 0x40
 800a5e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5e6:	e1d8      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a5e8:	2380      	movs	r3, #128	; 0x80
 800a5ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ee:	e1d4      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a51      	ldr	r2, [pc, #324]	; (800a73c <UART_SetConfig+0x344>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d130      	bne.n	800a65c <UART_SetConfig+0x264>
 800a5fa:	4b4e      	ldr	r3, [pc, #312]	; (800a734 <UART_SetConfig+0x33c>)
 800a5fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5fe:	f003 0307 	and.w	r3, r3, #7
 800a602:	2b05      	cmp	r3, #5
 800a604:	d826      	bhi.n	800a654 <UART_SetConfig+0x25c>
 800a606:	a201      	add	r2, pc, #4	; (adr r2, 800a60c <UART_SetConfig+0x214>)
 800a608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a60c:	0800a625 	.word	0x0800a625
 800a610:	0800a62d 	.word	0x0800a62d
 800a614:	0800a635 	.word	0x0800a635
 800a618:	0800a63d 	.word	0x0800a63d
 800a61c:	0800a645 	.word	0x0800a645
 800a620:	0800a64d 	.word	0x0800a64d
 800a624:	2300      	movs	r3, #0
 800a626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a62a:	e1b6      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a62c:	2304      	movs	r3, #4
 800a62e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a632:	e1b2      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a634:	2308      	movs	r3, #8
 800a636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a63a:	e1ae      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a63c:	2310      	movs	r3, #16
 800a63e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a642:	e1aa      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a644:	2320      	movs	r3, #32
 800a646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a64a:	e1a6      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a64c:	2340      	movs	r3, #64	; 0x40
 800a64e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a652:	e1a2      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a654:	2380      	movs	r3, #128	; 0x80
 800a656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a65a:	e19e      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a37      	ldr	r2, [pc, #220]	; (800a740 <UART_SetConfig+0x348>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d130      	bne.n	800a6c8 <UART_SetConfig+0x2d0>
 800a666:	4b33      	ldr	r3, [pc, #204]	; (800a734 <UART_SetConfig+0x33c>)
 800a668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a66a:	f003 0307 	and.w	r3, r3, #7
 800a66e:	2b05      	cmp	r3, #5
 800a670:	d826      	bhi.n	800a6c0 <UART_SetConfig+0x2c8>
 800a672:	a201      	add	r2, pc, #4	; (adr r2, 800a678 <UART_SetConfig+0x280>)
 800a674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a678:	0800a691 	.word	0x0800a691
 800a67c:	0800a699 	.word	0x0800a699
 800a680:	0800a6a1 	.word	0x0800a6a1
 800a684:	0800a6a9 	.word	0x0800a6a9
 800a688:	0800a6b1 	.word	0x0800a6b1
 800a68c:	0800a6b9 	.word	0x0800a6b9
 800a690:	2300      	movs	r3, #0
 800a692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a696:	e180      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a698:	2304      	movs	r3, #4
 800a69a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a69e:	e17c      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a6a0:	2308      	movs	r3, #8
 800a6a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6a6:	e178      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a6a8:	2310      	movs	r3, #16
 800a6aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6ae:	e174      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a6b0:	2320      	movs	r3, #32
 800a6b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6b6:	e170      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a6b8:	2340      	movs	r3, #64	; 0x40
 800a6ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6be:	e16c      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a6c0:	2380      	movs	r3, #128	; 0x80
 800a6c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6c6:	e168      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a1d      	ldr	r2, [pc, #116]	; (800a744 <UART_SetConfig+0x34c>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d142      	bne.n	800a758 <UART_SetConfig+0x360>
 800a6d2:	4b18      	ldr	r3, [pc, #96]	; (800a734 <UART_SetConfig+0x33c>)
 800a6d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6d6:	f003 0307 	and.w	r3, r3, #7
 800a6da:	2b05      	cmp	r3, #5
 800a6dc:	d838      	bhi.n	800a750 <UART_SetConfig+0x358>
 800a6de:	a201      	add	r2, pc, #4	; (adr r2, 800a6e4 <UART_SetConfig+0x2ec>)
 800a6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e4:	0800a6fd 	.word	0x0800a6fd
 800a6e8:	0800a705 	.word	0x0800a705
 800a6ec:	0800a70d 	.word	0x0800a70d
 800a6f0:	0800a715 	.word	0x0800a715
 800a6f4:	0800a71d 	.word	0x0800a71d
 800a6f8:	0800a749 	.word	0x0800a749
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a702:	e14a      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a704:	2304      	movs	r3, #4
 800a706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a70a:	e146      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a70c:	2308      	movs	r3, #8
 800a70e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a712:	e142      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a714:	2310      	movs	r3, #16
 800a716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a71a:	e13e      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a71c:	2320      	movs	r3, #32
 800a71e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a722:	e13a      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a724:	cfff69f3 	.word	0xcfff69f3
 800a728:	58000c00 	.word	0x58000c00
 800a72c:	11fff4ff 	.word	0x11fff4ff
 800a730:	40011000 	.word	0x40011000
 800a734:	58024400 	.word	0x58024400
 800a738:	40004400 	.word	0x40004400
 800a73c:	40004800 	.word	0x40004800
 800a740:	40004c00 	.word	0x40004c00
 800a744:	40005000 	.word	0x40005000
 800a748:	2340      	movs	r3, #64	; 0x40
 800a74a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a74e:	e124      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a750:	2380      	movs	r3, #128	; 0x80
 800a752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a756:	e120      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4acc      	ldr	r2, [pc, #816]	; (800aa90 <UART_SetConfig+0x698>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d176      	bne.n	800a850 <UART_SetConfig+0x458>
 800a762:	4bcc      	ldr	r3, [pc, #816]	; (800aa94 <UART_SetConfig+0x69c>)
 800a764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a766:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a76a:	2b28      	cmp	r3, #40	; 0x28
 800a76c:	d86c      	bhi.n	800a848 <UART_SetConfig+0x450>
 800a76e:	a201      	add	r2, pc, #4	; (adr r2, 800a774 <UART_SetConfig+0x37c>)
 800a770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a774:	0800a819 	.word	0x0800a819
 800a778:	0800a849 	.word	0x0800a849
 800a77c:	0800a849 	.word	0x0800a849
 800a780:	0800a849 	.word	0x0800a849
 800a784:	0800a849 	.word	0x0800a849
 800a788:	0800a849 	.word	0x0800a849
 800a78c:	0800a849 	.word	0x0800a849
 800a790:	0800a849 	.word	0x0800a849
 800a794:	0800a821 	.word	0x0800a821
 800a798:	0800a849 	.word	0x0800a849
 800a79c:	0800a849 	.word	0x0800a849
 800a7a0:	0800a849 	.word	0x0800a849
 800a7a4:	0800a849 	.word	0x0800a849
 800a7a8:	0800a849 	.word	0x0800a849
 800a7ac:	0800a849 	.word	0x0800a849
 800a7b0:	0800a849 	.word	0x0800a849
 800a7b4:	0800a829 	.word	0x0800a829
 800a7b8:	0800a849 	.word	0x0800a849
 800a7bc:	0800a849 	.word	0x0800a849
 800a7c0:	0800a849 	.word	0x0800a849
 800a7c4:	0800a849 	.word	0x0800a849
 800a7c8:	0800a849 	.word	0x0800a849
 800a7cc:	0800a849 	.word	0x0800a849
 800a7d0:	0800a849 	.word	0x0800a849
 800a7d4:	0800a831 	.word	0x0800a831
 800a7d8:	0800a849 	.word	0x0800a849
 800a7dc:	0800a849 	.word	0x0800a849
 800a7e0:	0800a849 	.word	0x0800a849
 800a7e4:	0800a849 	.word	0x0800a849
 800a7e8:	0800a849 	.word	0x0800a849
 800a7ec:	0800a849 	.word	0x0800a849
 800a7f0:	0800a849 	.word	0x0800a849
 800a7f4:	0800a839 	.word	0x0800a839
 800a7f8:	0800a849 	.word	0x0800a849
 800a7fc:	0800a849 	.word	0x0800a849
 800a800:	0800a849 	.word	0x0800a849
 800a804:	0800a849 	.word	0x0800a849
 800a808:	0800a849 	.word	0x0800a849
 800a80c:	0800a849 	.word	0x0800a849
 800a810:	0800a849 	.word	0x0800a849
 800a814:	0800a841 	.word	0x0800a841
 800a818:	2301      	movs	r3, #1
 800a81a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a81e:	e0bc      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a820:	2304      	movs	r3, #4
 800a822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a826:	e0b8      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a828:	2308      	movs	r3, #8
 800a82a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a82e:	e0b4      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a830:	2310      	movs	r3, #16
 800a832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a836:	e0b0      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a838:	2320      	movs	r3, #32
 800a83a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a83e:	e0ac      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a840:	2340      	movs	r3, #64	; 0x40
 800a842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a846:	e0a8      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a848:	2380      	movs	r3, #128	; 0x80
 800a84a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a84e:	e0a4      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a90      	ldr	r2, [pc, #576]	; (800aa98 <UART_SetConfig+0x6a0>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d130      	bne.n	800a8bc <UART_SetConfig+0x4c4>
 800a85a:	4b8e      	ldr	r3, [pc, #568]	; (800aa94 <UART_SetConfig+0x69c>)
 800a85c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a85e:	f003 0307 	and.w	r3, r3, #7
 800a862:	2b05      	cmp	r3, #5
 800a864:	d826      	bhi.n	800a8b4 <UART_SetConfig+0x4bc>
 800a866:	a201      	add	r2, pc, #4	; (adr r2, 800a86c <UART_SetConfig+0x474>)
 800a868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a86c:	0800a885 	.word	0x0800a885
 800a870:	0800a88d 	.word	0x0800a88d
 800a874:	0800a895 	.word	0x0800a895
 800a878:	0800a89d 	.word	0x0800a89d
 800a87c:	0800a8a5 	.word	0x0800a8a5
 800a880:	0800a8ad 	.word	0x0800a8ad
 800a884:	2300      	movs	r3, #0
 800a886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a88a:	e086      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a88c:	2304      	movs	r3, #4
 800a88e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a892:	e082      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a894:	2308      	movs	r3, #8
 800a896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a89a:	e07e      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a89c:	2310      	movs	r3, #16
 800a89e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8a2:	e07a      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a8a4:	2320      	movs	r3, #32
 800a8a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8aa:	e076      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a8ac:	2340      	movs	r3, #64	; 0x40
 800a8ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8b2:	e072      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a8b4:	2380      	movs	r3, #128	; 0x80
 800a8b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8ba:	e06e      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a76      	ldr	r2, [pc, #472]	; (800aa9c <UART_SetConfig+0x6a4>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d130      	bne.n	800a928 <UART_SetConfig+0x530>
 800a8c6:	4b73      	ldr	r3, [pc, #460]	; (800aa94 <UART_SetConfig+0x69c>)
 800a8c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8ca:	f003 0307 	and.w	r3, r3, #7
 800a8ce:	2b05      	cmp	r3, #5
 800a8d0:	d826      	bhi.n	800a920 <UART_SetConfig+0x528>
 800a8d2:	a201      	add	r2, pc, #4	; (adr r2, 800a8d8 <UART_SetConfig+0x4e0>)
 800a8d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d8:	0800a8f1 	.word	0x0800a8f1
 800a8dc:	0800a8f9 	.word	0x0800a8f9
 800a8e0:	0800a901 	.word	0x0800a901
 800a8e4:	0800a909 	.word	0x0800a909
 800a8e8:	0800a911 	.word	0x0800a911
 800a8ec:	0800a919 	.word	0x0800a919
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8f6:	e050      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a8f8:	2304      	movs	r3, #4
 800a8fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8fe:	e04c      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a900:	2308      	movs	r3, #8
 800a902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a906:	e048      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a908:	2310      	movs	r3, #16
 800a90a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a90e:	e044      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a910:	2320      	movs	r3, #32
 800a912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a916:	e040      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a918:	2340      	movs	r3, #64	; 0x40
 800a91a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a91e:	e03c      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a920:	2380      	movs	r3, #128	; 0x80
 800a922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a926:	e038      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a5c      	ldr	r2, [pc, #368]	; (800aaa0 <UART_SetConfig+0x6a8>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d130      	bne.n	800a994 <UART_SetConfig+0x59c>
 800a932:	4b58      	ldr	r3, [pc, #352]	; (800aa94 <UART_SetConfig+0x69c>)
 800a934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a936:	f003 0307 	and.w	r3, r3, #7
 800a93a:	2b05      	cmp	r3, #5
 800a93c:	d826      	bhi.n	800a98c <UART_SetConfig+0x594>
 800a93e:	a201      	add	r2, pc, #4	; (adr r2, 800a944 <UART_SetConfig+0x54c>)
 800a940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a944:	0800a95d 	.word	0x0800a95d
 800a948:	0800a965 	.word	0x0800a965
 800a94c:	0800a96d 	.word	0x0800a96d
 800a950:	0800a975 	.word	0x0800a975
 800a954:	0800a97d 	.word	0x0800a97d
 800a958:	0800a985 	.word	0x0800a985
 800a95c:	2302      	movs	r3, #2
 800a95e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a962:	e01a      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a964:	2304      	movs	r3, #4
 800a966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a96a:	e016      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a96c:	2308      	movs	r3, #8
 800a96e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a972:	e012      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a974:	2310      	movs	r3, #16
 800a976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a97a:	e00e      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a97c:	2320      	movs	r3, #32
 800a97e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a982:	e00a      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a984:	2340      	movs	r3, #64	; 0x40
 800a986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a98a:	e006      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a98c:	2380      	movs	r3, #128	; 0x80
 800a98e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a992:	e002      	b.n	800a99a <UART_SetConfig+0x5a2>
 800a994:	2380      	movs	r3, #128	; 0x80
 800a996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4a40      	ldr	r2, [pc, #256]	; (800aaa0 <UART_SetConfig+0x6a8>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	f040 80ef 	bne.w	800ab84 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a9a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a9aa:	2b20      	cmp	r3, #32
 800a9ac:	dc46      	bgt.n	800aa3c <UART_SetConfig+0x644>
 800a9ae:	2b02      	cmp	r3, #2
 800a9b0:	f2c0 8081 	blt.w	800aab6 <UART_SetConfig+0x6be>
 800a9b4:	3b02      	subs	r3, #2
 800a9b6:	2b1e      	cmp	r3, #30
 800a9b8:	d87d      	bhi.n	800aab6 <UART_SetConfig+0x6be>
 800a9ba:	a201      	add	r2, pc, #4	; (adr r2, 800a9c0 <UART_SetConfig+0x5c8>)
 800a9bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9c0:	0800aa43 	.word	0x0800aa43
 800a9c4:	0800aab7 	.word	0x0800aab7
 800a9c8:	0800aa4b 	.word	0x0800aa4b
 800a9cc:	0800aab7 	.word	0x0800aab7
 800a9d0:	0800aab7 	.word	0x0800aab7
 800a9d4:	0800aab7 	.word	0x0800aab7
 800a9d8:	0800aa5b 	.word	0x0800aa5b
 800a9dc:	0800aab7 	.word	0x0800aab7
 800a9e0:	0800aab7 	.word	0x0800aab7
 800a9e4:	0800aab7 	.word	0x0800aab7
 800a9e8:	0800aab7 	.word	0x0800aab7
 800a9ec:	0800aab7 	.word	0x0800aab7
 800a9f0:	0800aab7 	.word	0x0800aab7
 800a9f4:	0800aab7 	.word	0x0800aab7
 800a9f8:	0800aa6b 	.word	0x0800aa6b
 800a9fc:	0800aab7 	.word	0x0800aab7
 800aa00:	0800aab7 	.word	0x0800aab7
 800aa04:	0800aab7 	.word	0x0800aab7
 800aa08:	0800aab7 	.word	0x0800aab7
 800aa0c:	0800aab7 	.word	0x0800aab7
 800aa10:	0800aab7 	.word	0x0800aab7
 800aa14:	0800aab7 	.word	0x0800aab7
 800aa18:	0800aab7 	.word	0x0800aab7
 800aa1c:	0800aab7 	.word	0x0800aab7
 800aa20:	0800aab7 	.word	0x0800aab7
 800aa24:	0800aab7 	.word	0x0800aab7
 800aa28:	0800aab7 	.word	0x0800aab7
 800aa2c:	0800aab7 	.word	0x0800aab7
 800aa30:	0800aab7 	.word	0x0800aab7
 800aa34:	0800aab7 	.word	0x0800aab7
 800aa38:	0800aaa9 	.word	0x0800aaa9
 800aa3c:	2b40      	cmp	r3, #64	; 0x40
 800aa3e:	d036      	beq.n	800aaae <UART_SetConfig+0x6b6>
 800aa40:	e039      	b.n	800aab6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800aa42:	f7fd fad7 	bl	8007ff4 <HAL_RCCEx_GetD3PCLK1Freq>
 800aa46:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aa48:	e03b      	b.n	800aac2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa4a:	f107 0314 	add.w	r3, r7, #20
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7fd fae6 	bl	8008020 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa54:	69bb      	ldr	r3, [r7, #24]
 800aa56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa58:	e033      	b.n	800aac2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa5a:	f107 0308 	add.w	r3, r7, #8
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7fd fc32 	bl	80082c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa68:	e02b      	b.n	800aac2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa6a:	4b0a      	ldr	r3, [pc, #40]	; (800aa94 <UART_SetConfig+0x69c>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f003 0320 	and.w	r3, r3, #32
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d009      	beq.n	800aa8a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa76:	4b07      	ldr	r3, [pc, #28]	; (800aa94 <UART_SetConfig+0x69c>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	08db      	lsrs	r3, r3, #3
 800aa7c:	f003 0303 	and.w	r3, r3, #3
 800aa80:	4a08      	ldr	r2, [pc, #32]	; (800aaa4 <UART_SetConfig+0x6ac>)
 800aa82:	fa22 f303 	lsr.w	r3, r2, r3
 800aa86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa88:	e01b      	b.n	800aac2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800aa8a:	4b06      	ldr	r3, [pc, #24]	; (800aaa4 <UART_SetConfig+0x6ac>)
 800aa8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa8e:	e018      	b.n	800aac2 <UART_SetConfig+0x6ca>
 800aa90:	40011400 	.word	0x40011400
 800aa94:	58024400 	.word	0x58024400
 800aa98:	40007800 	.word	0x40007800
 800aa9c:	40007c00 	.word	0x40007c00
 800aaa0:	58000c00 	.word	0x58000c00
 800aaa4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aaa8:	4bc4      	ldr	r3, [pc, #784]	; (800adbc <UART_SetConfig+0x9c4>)
 800aaaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aaac:	e009      	b.n	800aac2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aaae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aab2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aab4:	e005      	b.n	800aac2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800aab6:	2300      	movs	r3, #0
 800aab8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800aaba:	2301      	movs	r3, #1
 800aabc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800aac0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	f000 81da 	beq.w	800ae7e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aace:	4abc      	ldr	r2, [pc, #752]	; (800adc0 <UART_SetConfig+0x9c8>)
 800aad0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aad4:	461a      	mov	r2, r3
 800aad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad8:	fbb3 f3f2 	udiv	r3, r3, r2
 800aadc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	685a      	ldr	r2, [r3, #4]
 800aae2:	4613      	mov	r3, r2
 800aae4:	005b      	lsls	r3, r3, #1
 800aae6:	4413      	add	r3, r2
 800aae8:	6a3a      	ldr	r2, [r7, #32]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d305      	bcc.n	800aafa <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aaf4:	6a3a      	ldr	r2, [r7, #32]
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d903      	bls.n	800ab02 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800aafa:	2301      	movs	r3, #1
 800aafc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ab00:	e1bd      	b.n	800ae7e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab04:	4618      	mov	r0, r3
 800ab06:	f04f 0100 	mov.w	r1, #0
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab0e:	4aac      	ldr	r2, [pc, #688]	; (800adc0 <UART_SetConfig+0x9c8>)
 800ab10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab14:	b29a      	uxth	r2, r3
 800ab16:	f04f 0300 	mov.w	r3, #0
 800ab1a:	f7f5 fc39 	bl	8000390 <__aeabi_uldivmod>
 800ab1e:	4602      	mov	r2, r0
 800ab20:	460b      	mov	r3, r1
 800ab22:	4610      	mov	r0, r2
 800ab24:	4619      	mov	r1, r3
 800ab26:	f04f 0200 	mov.w	r2, #0
 800ab2a:	f04f 0300 	mov.w	r3, #0
 800ab2e:	020b      	lsls	r3, r1, #8
 800ab30:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ab34:	0202      	lsls	r2, r0, #8
 800ab36:	6879      	ldr	r1, [r7, #4]
 800ab38:	6849      	ldr	r1, [r1, #4]
 800ab3a:	0849      	lsrs	r1, r1, #1
 800ab3c:	4608      	mov	r0, r1
 800ab3e:	f04f 0100 	mov.w	r1, #0
 800ab42:	1814      	adds	r4, r2, r0
 800ab44:	eb43 0501 	adc.w	r5, r3, r1
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	f04f 0300 	mov.w	r3, #0
 800ab52:	4620      	mov	r0, r4
 800ab54:	4629      	mov	r1, r5
 800ab56:	f7f5 fc1b 	bl	8000390 <__aeabi_uldivmod>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	4613      	mov	r3, r2
 800ab60:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ab62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab68:	d308      	bcc.n	800ab7c <UART_SetConfig+0x784>
 800ab6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab70:	d204      	bcs.n	800ab7c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab78:	60da      	str	r2, [r3, #12]
 800ab7a:	e180      	b.n	800ae7e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ab82:	e17c      	b.n	800ae7e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	69db      	ldr	r3, [r3, #28]
 800ab88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab8c:	f040 80be 	bne.w	800ad0c <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800ab90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ab94:	2b20      	cmp	r3, #32
 800ab96:	dc49      	bgt.n	800ac2c <UART_SetConfig+0x834>
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	db7c      	blt.n	800ac96 <UART_SetConfig+0x89e>
 800ab9c:	2b20      	cmp	r3, #32
 800ab9e:	d87a      	bhi.n	800ac96 <UART_SetConfig+0x89e>
 800aba0:	a201      	add	r2, pc, #4	; (adr r2, 800aba8 <UART_SetConfig+0x7b0>)
 800aba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba6:	bf00      	nop
 800aba8:	0800ac33 	.word	0x0800ac33
 800abac:	0800ac3b 	.word	0x0800ac3b
 800abb0:	0800ac97 	.word	0x0800ac97
 800abb4:	0800ac97 	.word	0x0800ac97
 800abb8:	0800ac43 	.word	0x0800ac43
 800abbc:	0800ac97 	.word	0x0800ac97
 800abc0:	0800ac97 	.word	0x0800ac97
 800abc4:	0800ac97 	.word	0x0800ac97
 800abc8:	0800ac53 	.word	0x0800ac53
 800abcc:	0800ac97 	.word	0x0800ac97
 800abd0:	0800ac97 	.word	0x0800ac97
 800abd4:	0800ac97 	.word	0x0800ac97
 800abd8:	0800ac97 	.word	0x0800ac97
 800abdc:	0800ac97 	.word	0x0800ac97
 800abe0:	0800ac97 	.word	0x0800ac97
 800abe4:	0800ac97 	.word	0x0800ac97
 800abe8:	0800ac63 	.word	0x0800ac63
 800abec:	0800ac97 	.word	0x0800ac97
 800abf0:	0800ac97 	.word	0x0800ac97
 800abf4:	0800ac97 	.word	0x0800ac97
 800abf8:	0800ac97 	.word	0x0800ac97
 800abfc:	0800ac97 	.word	0x0800ac97
 800ac00:	0800ac97 	.word	0x0800ac97
 800ac04:	0800ac97 	.word	0x0800ac97
 800ac08:	0800ac97 	.word	0x0800ac97
 800ac0c:	0800ac97 	.word	0x0800ac97
 800ac10:	0800ac97 	.word	0x0800ac97
 800ac14:	0800ac97 	.word	0x0800ac97
 800ac18:	0800ac97 	.word	0x0800ac97
 800ac1c:	0800ac97 	.word	0x0800ac97
 800ac20:	0800ac97 	.word	0x0800ac97
 800ac24:	0800ac97 	.word	0x0800ac97
 800ac28:	0800ac89 	.word	0x0800ac89
 800ac2c:	2b40      	cmp	r3, #64	; 0x40
 800ac2e:	d02e      	beq.n	800ac8e <UART_SetConfig+0x896>
 800ac30:	e031      	b.n	800ac96 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac32:	f7fb fda1 	bl	8006778 <HAL_RCC_GetPCLK1Freq>
 800ac36:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ac38:	e033      	b.n	800aca2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac3a:	f7fb fdb3 	bl	80067a4 <HAL_RCC_GetPCLK2Freq>
 800ac3e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ac40:	e02f      	b.n	800aca2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac42:	f107 0314 	add.w	r3, r7, #20
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7fd f9ea 	bl	8008020 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac50:	e027      	b.n	800aca2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac52:	f107 0308 	add.w	r3, r7, #8
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7fd fb36 	bl	80082c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac60:	e01f      	b.n	800aca2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac62:	4b58      	ldr	r3, [pc, #352]	; (800adc4 <UART_SetConfig+0x9cc>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f003 0320 	and.w	r3, r3, #32
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d009      	beq.n	800ac82 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac6e:	4b55      	ldr	r3, [pc, #340]	; (800adc4 <UART_SetConfig+0x9cc>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	08db      	lsrs	r3, r3, #3
 800ac74:	f003 0303 	and.w	r3, r3, #3
 800ac78:	4a53      	ldr	r2, [pc, #332]	; (800adc8 <UART_SetConfig+0x9d0>)
 800ac7a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac80:	e00f      	b.n	800aca2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800ac82:	4b51      	ldr	r3, [pc, #324]	; (800adc8 <UART_SetConfig+0x9d0>)
 800ac84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac86:	e00c      	b.n	800aca2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac88:	4b4c      	ldr	r3, [pc, #304]	; (800adbc <UART_SetConfig+0x9c4>)
 800ac8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac8c:	e009      	b.n	800aca2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac94:	e005      	b.n	800aca2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800ac96:	2300      	movs	r3, #0
 800ac98:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800aca0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	f000 80ea 	beq.w	800ae7e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acae:	4a44      	ldr	r2, [pc, #272]	; (800adc0 <UART_SetConfig+0x9c8>)
 800acb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acb4:	461a      	mov	r2, r3
 800acb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800acbc:	005a      	lsls	r2, r3, #1
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	085b      	lsrs	r3, r3, #1
 800acc4:	441a      	add	r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	fbb2 f3f3 	udiv	r3, r2, r3
 800acce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd2:	2b0f      	cmp	r3, #15
 800acd4:	d916      	bls.n	800ad04 <UART_SetConfig+0x90c>
 800acd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acdc:	d212      	bcs.n	800ad04 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800acde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	f023 030f 	bic.w	r3, r3, #15
 800ace6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ace8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acea:	085b      	lsrs	r3, r3, #1
 800acec:	b29b      	uxth	r3, r3
 800acee:	f003 0307 	and.w	r3, r3, #7
 800acf2:	b29a      	uxth	r2, r3
 800acf4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800acf6:	4313      	orrs	r3, r2
 800acf8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ad00:	60da      	str	r2, [r3, #12]
 800ad02:	e0bc      	b.n	800ae7e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800ad04:	2301      	movs	r3, #1
 800ad06:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ad0a:	e0b8      	b.n	800ae7e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ad0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ad10:	2b20      	cmp	r3, #32
 800ad12:	dc4b      	bgt.n	800adac <UART_SetConfig+0x9b4>
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	f2c0 8087 	blt.w	800ae28 <UART_SetConfig+0xa30>
 800ad1a:	2b20      	cmp	r3, #32
 800ad1c:	f200 8084 	bhi.w	800ae28 <UART_SetConfig+0xa30>
 800ad20:	a201      	add	r2, pc, #4	; (adr r2, 800ad28 <UART_SetConfig+0x930>)
 800ad22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad26:	bf00      	nop
 800ad28:	0800adb3 	.word	0x0800adb3
 800ad2c:	0800adcd 	.word	0x0800adcd
 800ad30:	0800ae29 	.word	0x0800ae29
 800ad34:	0800ae29 	.word	0x0800ae29
 800ad38:	0800add5 	.word	0x0800add5
 800ad3c:	0800ae29 	.word	0x0800ae29
 800ad40:	0800ae29 	.word	0x0800ae29
 800ad44:	0800ae29 	.word	0x0800ae29
 800ad48:	0800ade5 	.word	0x0800ade5
 800ad4c:	0800ae29 	.word	0x0800ae29
 800ad50:	0800ae29 	.word	0x0800ae29
 800ad54:	0800ae29 	.word	0x0800ae29
 800ad58:	0800ae29 	.word	0x0800ae29
 800ad5c:	0800ae29 	.word	0x0800ae29
 800ad60:	0800ae29 	.word	0x0800ae29
 800ad64:	0800ae29 	.word	0x0800ae29
 800ad68:	0800adf5 	.word	0x0800adf5
 800ad6c:	0800ae29 	.word	0x0800ae29
 800ad70:	0800ae29 	.word	0x0800ae29
 800ad74:	0800ae29 	.word	0x0800ae29
 800ad78:	0800ae29 	.word	0x0800ae29
 800ad7c:	0800ae29 	.word	0x0800ae29
 800ad80:	0800ae29 	.word	0x0800ae29
 800ad84:	0800ae29 	.word	0x0800ae29
 800ad88:	0800ae29 	.word	0x0800ae29
 800ad8c:	0800ae29 	.word	0x0800ae29
 800ad90:	0800ae29 	.word	0x0800ae29
 800ad94:	0800ae29 	.word	0x0800ae29
 800ad98:	0800ae29 	.word	0x0800ae29
 800ad9c:	0800ae29 	.word	0x0800ae29
 800ada0:	0800ae29 	.word	0x0800ae29
 800ada4:	0800ae29 	.word	0x0800ae29
 800ada8:	0800ae1b 	.word	0x0800ae1b
 800adac:	2b40      	cmp	r3, #64	; 0x40
 800adae:	d037      	beq.n	800ae20 <UART_SetConfig+0xa28>
 800adb0:	e03a      	b.n	800ae28 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800adb2:	f7fb fce1 	bl	8006778 <HAL_RCC_GetPCLK1Freq>
 800adb6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800adb8:	e03c      	b.n	800ae34 <UART_SetConfig+0xa3c>
 800adba:	bf00      	nop
 800adbc:	003d0900 	.word	0x003d0900
 800adc0:	0800d25c 	.word	0x0800d25c
 800adc4:	58024400 	.word	0x58024400
 800adc8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800adcc:	f7fb fcea 	bl	80067a4 <HAL_RCC_GetPCLK2Freq>
 800add0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800add2:	e02f      	b.n	800ae34 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800add4:	f107 0314 	add.w	r3, r7, #20
 800add8:	4618      	mov	r0, r3
 800adda:	f7fd f921 	bl	8008020 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ade2:	e027      	b.n	800ae34 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ade4:	f107 0308 	add.w	r3, r7, #8
 800ade8:	4618      	mov	r0, r3
 800adea:	f7fd fa6d 	bl	80082c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800adf2:	e01f      	b.n	800ae34 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800adf4:	4b2c      	ldr	r3, [pc, #176]	; (800aea8 <UART_SetConfig+0xab0>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f003 0320 	and.w	r3, r3, #32
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d009      	beq.n	800ae14 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae00:	4b29      	ldr	r3, [pc, #164]	; (800aea8 <UART_SetConfig+0xab0>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	08db      	lsrs	r3, r3, #3
 800ae06:	f003 0303 	and.w	r3, r3, #3
 800ae0a:	4a28      	ldr	r2, [pc, #160]	; (800aeac <UART_SetConfig+0xab4>)
 800ae0c:	fa22 f303 	lsr.w	r3, r2, r3
 800ae10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ae12:	e00f      	b.n	800ae34 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800ae14:	4b25      	ldr	r3, [pc, #148]	; (800aeac <UART_SetConfig+0xab4>)
 800ae16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae18:	e00c      	b.n	800ae34 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ae1a:	4b25      	ldr	r3, [pc, #148]	; (800aeb0 <UART_SetConfig+0xab8>)
 800ae1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae1e:	e009      	b.n	800ae34 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae26:	e005      	b.n	800ae34 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ae32:	bf00      	nop
    }

    if (pclk != 0U)
 800ae34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d021      	beq.n	800ae7e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3e:	4a1d      	ldr	r2, [pc, #116]	; (800aeb4 <UART_SetConfig+0xabc>)
 800ae40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae44:	461a      	mov	r2, r3
 800ae46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae48:	fbb3 f2f2 	udiv	r2, r3, r2
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	085b      	lsrs	r3, r3, #1
 800ae52:	441a      	add	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae5c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae60:	2b0f      	cmp	r3, #15
 800ae62:	d909      	bls.n	800ae78 <UART_SetConfig+0xa80>
 800ae64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae6a:	d205      	bcs.n	800ae78 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ae6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6e:	b29a      	uxth	r2, r3
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	60da      	str	r2, [r3, #12]
 800ae76:	e002      	b.n	800ae7e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2201      	movs	r2, #1
 800ae82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2200      	movs	r2, #0
 800ae92:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2200      	movs	r2, #0
 800ae98:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ae9a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3738      	adds	r7, #56	; 0x38
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bdb0      	pop	{r4, r5, r7, pc}
 800aea6:	bf00      	nop
 800aea8:	58024400 	.word	0x58024400
 800aeac:	03d09000 	.word	0x03d09000
 800aeb0:	003d0900 	.word	0x003d0900
 800aeb4:	0800d25c 	.word	0x0800d25c

0800aeb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b083      	sub	sp, #12
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aec4:	f003 0301 	and.w	r3, r3, #1
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d00a      	beq.n	800aee2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	430a      	orrs	r2, r1
 800aee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aee6:	f003 0302 	and.w	r3, r3, #2
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00a      	beq.n	800af04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	430a      	orrs	r2, r1
 800af02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af08:	f003 0304 	and.w	r3, r3, #4
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d00a      	beq.n	800af26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	430a      	orrs	r2, r1
 800af24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af2a:	f003 0308 	and.w	r3, r3, #8
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d00a      	beq.n	800af48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	430a      	orrs	r2, r1
 800af46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af4c:	f003 0310 	and.w	r3, r3, #16
 800af50:	2b00      	cmp	r3, #0
 800af52:	d00a      	beq.n	800af6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	430a      	orrs	r2, r1
 800af68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af6e:	f003 0320 	and.w	r3, r3, #32
 800af72:	2b00      	cmp	r3, #0
 800af74:	d00a      	beq.n	800af8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	430a      	orrs	r2, r1
 800af8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af94:	2b00      	cmp	r3, #0
 800af96:	d01a      	beq.n	800afce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	430a      	orrs	r2, r1
 800afac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afb6:	d10a      	bne.n	800afce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	430a      	orrs	r2, r1
 800afcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00a      	beq.n	800aff0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	430a      	orrs	r2, r1
 800afee:	605a      	str	r2, [r3, #4]
  }
}
 800aff0:	bf00      	nop
 800aff2:	370c      	adds	r7, #12
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b086      	sub	sp, #24
 800b000:	af02      	add	r7, sp, #8
 800b002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2200      	movs	r2, #0
 800b008:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b00c:	f7f7 fef2 	bl	8002df4 <HAL_GetTick>
 800b010:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f003 0308 	and.w	r3, r3, #8
 800b01c:	2b08      	cmp	r3, #8
 800b01e:	d10e      	bne.n	800b03e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b020:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b024:	9300      	str	r3, [sp, #0]
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2200      	movs	r2, #0
 800b02a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f000 f82f 	bl	800b092 <UART_WaitOnFlagUntilTimeout>
 800b034:	4603      	mov	r3, r0
 800b036:	2b00      	cmp	r3, #0
 800b038:	d001      	beq.n	800b03e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b03a:	2303      	movs	r3, #3
 800b03c:	e025      	b.n	800b08a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f003 0304 	and.w	r3, r3, #4
 800b048:	2b04      	cmp	r3, #4
 800b04a:	d10e      	bne.n	800b06a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b04c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b050:	9300      	str	r3, [sp, #0]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2200      	movs	r2, #0
 800b056:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 f819 	bl	800b092 <UART_WaitOnFlagUntilTimeout>
 800b060:	4603      	mov	r3, r0
 800b062:	2b00      	cmp	r3, #0
 800b064:	d001      	beq.n	800b06a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b066:	2303      	movs	r3, #3
 800b068:	e00f      	b.n	800b08a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2220      	movs	r2, #32
 800b06e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2220      	movs	r2, #32
 800b076:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b088:	2300      	movs	r3, #0
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b092:	b580      	push	{r7, lr}
 800b094:	b09c      	sub	sp, #112	; 0x70
 800b096:	af00      	add	r7, sp, #0
 800b098:	60f8      	str	r0, [r7, #12]
 800b09a:	60b9      	str	r1, [r7, #8]
 800b09c:	603b      	str	r3, [r7, #0]
 800b09e:	4613      	mov	r3, r2
 800b0a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0a2:	e0a9      	b.n	800b1f8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0aa:	f000 80a5 	beq.w	800b1f8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0ae:	f7f7 fea1 	bl	8002df4 <HAL_GetTick>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	1ad3      	subs	r3, r2, r3
 800b0b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d302      	bcc.n	800b0c4 <UART_WaitOnFlagUntilTimeout+0x32>
 800b0be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d140      	bne.n	800b146 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0cc:	e853 3f00 	ldrex	r3, [r3]
 800b0d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b0d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b0d8:	667b      	str	r3, [r7, #100]	; 0x64
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	461a      	mov	r2, r3
 800b0e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b0e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b0e4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b0e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b0ea:	e841 2300 	strex	r3, r2, [r1]
 800b0ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b0f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d1e6      	bne.n	800b0c4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	3308      	adds	r3, #8
 800b0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b100:	e853 3f00 	ldrex	r3, [r3]
 800b104:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b108:	f023 0301 	bic.w	r3, r3, #1
 800b10c:	663b      	str	r3, [r7, #96]	; 0x60
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	3308      	adds	r3, #8
 800b114:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b116:	64ba      	str	r2, [r7, #72]	; 0x48
 800b118:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b11a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b11c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b11e:	e841 2300 	strex	r3, r2, [r1]
 800b122:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b126:	2b00      	cmp	r3, #0
 800b128:	d1e5      	bne.n	800b0f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2220      	movs	r2, #32
 800b12e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	2220      	movs	r2, #32
 800b136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	2200      	movs	r2, #0
 800b13e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b142:	2303      	movs	r3, #3
 800b144:	e069      	b.n	800b21a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f003 0304 	and.w	r3, r3, #4
 800b150:	2b00      	cmp	r3, #0
 800b152:	d051      	beq.n	800b1f8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	69db      	ldr	r3, [r3, #28]
 800b15a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b15e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b162:	d149      	bne.n	800b1f8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b16c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b176:	e853 3f00 	ldrex	r3, [r3]
 800b17a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b182:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	461a      	mov	r2, r3
 800b18a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b18c:	637b      	str	r3, [r7, #52]	; 0x34
 800b18e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b190:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b192:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b194:	e841 2300 	strex	r3, r2, [r1]
 800b198:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d1e6      	bne.n	800b16e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	3308      	adds	r3, #8
 800b1a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	e853 3f00 	ldrex	r3, [r3]
 800b1ae:	613b      	str	r3, [r7, #16]
   return(result);
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	f023 0301 	bic.w	r3, r3, #1
 800b1b6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	3308      	adds	r3, #8
 800b1be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b1c0:	623a      	str	r2, [r7, #32]
 800b1c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c4:	69f9      	ldr	r1, [r7, #28]
 800b1c6:	6a3a      	ldr	r2, [r7, #32]
 800b1c8:	e841 2300 	strex	r3, r2, [r1]
 800b1cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800b1ce:	69bb      	ldr	r3, [r7, #24]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d1e5      	bne.n	800b1a0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2220      	movs	r2, #32
 800b1d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2220      	movs	r2, #32
 800b1e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2220      	movs	r2, #32
 800b1e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b1f4:	2303      	movs	r3, #3
 800b1f6:	e010      	b.n	800b21a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	69da      	ldr	r2, [r3, #28]
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	4013      	ands	r3, r2
 800b202:	68ba      	ldr	r2, [r7, #8]
 800b204:	429a      	cmp	r2, r3
 800b206:	bf0c      	ite	eq
 800b208:	2301      	moveq	r3, #1
 800b20a:	2300      	movne	r3, #0
 800b20c:	b2db      	uxtb	r3, r3
 800b20e:	461a      	mov	r2, r3
 800b210:	79fb      	ldrb	r3, [r7, #7]
 800b212:	429a      	cmp	r2, r3
 800b214:	f43f af46 	beq.w	800b0a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3770      	adds	r7, #112	; 0x70
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}

0800b222 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b222:	b480      	push	{r7}
 800b224:	b085      	sub	sp, #20
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b230:	2b01      	cmp	r3, #1
 800b232:	d101      	bne.n	800b238 <HAL_UARTEx_DisableFifoMode+0x16>
 800b234:	2302      	movs	r3, #2
 800b236:	e027      	b.n	800b288 <HAL_UARTEx_DisableFifoMode+0x66>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2201      	movs	r2, #1
 800b23c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2224      	movs	r2, #36	; 0x24
 800b244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f022 0201 	bic.w	r2, r2, #1
 800b25e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b266:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2200      	movs	r2, #0
 800b26c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	68fa      	ldr	r2, [r7, #12]
 800b274:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2220      	movs	r2, #32
 800b27a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2200      	movs	r2, #0
 800b282:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b286:	2300      	movs	r3, #0
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3714      	adds	r7, #20
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr

0800b294 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d101      	bne.n	800b2ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b2a8:	2302      	movs	r3, #2
 800b2aa:	e02d      	b.n	800b308 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2224      	movs	r2, #36	; 0x24
 800b2b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	681a      	ldr	r2, [r3, #0]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f022 0201 	bic.w	r2, r2, #1
 800b2d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	683a      	ldr	r2, [r7, #0]
 800b2e4:	430a      	orrs	r2, r1
 800b2e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 f84f 	bl	800b38c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	68fa      	ldr	r2, [r7, #12]
 800b2f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2220      	movs	r2, #32
 800b2fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2200      	movs	r2, #0
 800b302:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b306:	2300      	movs	r3, #0
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3710      	adds	r7, #16
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b320:	2b01      	cmp	r3, #1
 800b322:	d101      	bne.n	800b328 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b324:	2302      	movs	r3, #2
 800b326:	e02d      	b.n	800b384 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2201      	movs	r2, #1
 800b32c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2224      	movs	r2, #36	; 0x24
 800b334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	681a      	ldr	r2, [r3, #0]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f022 0201 	bic.w	r2, r2, #1
 800b34e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	683a      	ldr	r2, [r7, #0]
 800b360:	430a      	orrs	r2, r1
 800b362:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 f811 	bl	800b38c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	68fa      	ldr	r2, [r7, #12]
 800b370:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2220      	movs	r2, #32
 800b376:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2200      	movs	r2, #0
 800b37e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b382:	2300      	movs	r3, #0
}
 800b384:	4618      	mov	r0, r3
 800b386:	3710      	adds	r7, #16
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b085      	sub	sp, #20
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d108      	bne.n	800b3ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2201      	movs	r2, #1
 800b3a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b3ac:	e031      	b.n	800b412 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b3ae:	2310      	movs	r3, #16
 800b3b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b3b2:	2310      	movs	r3, #16
 800b3b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	689b      	ldr	r3, [r3, #8]
 800b3bc:	0e5b      	lsrs	r3, r3, #25
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	f003 0307 	and.w	r3, r3, #7
 800b3c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	689b      	ldr	r3, [r3, #8]
 800b3cc:	0f5b      	lsrs	r3, r3, #29
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	f003 0307 	and.w	r3, r3, #7
 800b3d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3d6:	7bbb      	ldrb	r3, [r7, #14]
 800b3d8:	7b3a      	ldrb	r2, [r7, #12]
 800b3da:	4911      	ldr	r1, [pc, #68]	; (800b420 <UARTEx_SetNbDataToProcess+0x94>)
 800b3dc:	5c8a      	ldrb	r2, [r1, r2]
 800b3de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b3e2:	7b3a      	ldrb	r2, [r7, #12]
 800b3e4:	490f      	ldr	r1, [pc, #60]	; (800b424 <UARTEx_SetNbDataToProcess+0x98>)
 800b3e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3ec:	b29a      	uxth	r2, r3
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3f4:	7bfb      	ldrb	r3, [r7, #15]
 800b3f6:	7b7a      	ldrb	r2, [r7, #13]
 800b3f8:	4909      	ldr	r1, [pc, #36]	; (800b420 <UARTEx_SetNbDataToProcess+0x94>)
 800b3fa:	5c8a      	ldrb	r2, [r1, r2]
 800b3fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b400:	7b7a      	ldrb	r2, [r7, #13]
 800b402:	4908      	ldr	r1, [pc, #32]	; (800b424 <UARTEx_SetNbDataToProcess+0x98>)
 800b404:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b406:	fb93 f3f2 	sdiv	r3, r3, r2
 800b40a:	b29a      	uxth	r2, r3
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b412:	bf00      	nop
 800b414:	3714      	adds	r7, #20
 800b416:	46bd      	mov	sp, r7
 800b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41c:	4770      	bx	lr
 800b41e:	bf00      	nop
 800b420:	0800d274 	.word	0x0800d274
 800b424:	0800d27c 	.word	0x0800d27c

0800b428 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b428:	b084      	sub	sp, #16
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b084      	sub	sp, #16
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
 800b432:	f107 001c 	add.w	r0, r7, #28
 800b436:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d120      	bne.n	800b482 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b444:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	68da      	ldr	r2, [r3, #12]
 800b450:	4b2a      	ldr	r3, [pc, #168]	; (800b4fc <USB_CoreInit+0xd4>)
 800b452:	4013      	ands	r3, r2
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	68db      	ldr	r3, [r3, #12]
 800b45c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b466:	2b01      	cmp	r3, #1
 800b468:	d105      	bne.n	800b476 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	68db      	ldr	r3, [r3, #12]
 800b46e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 faa8 	bl	800b9cc <USB_CoreReset>
 800b47c:	4603      	mov	r3, r0
 800b47e:	73fb      	strb	r3, [r7, #15]
 800b480:	e01a      	b.n	800b4b8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 fa9c 	bl	800b9cc <USB_CoreReset>
 800b494:	4603      	mov	r3, r0
 800b496:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d106      	bne.n	800b4ac <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	639a      	str	r2, [r3, #56]	; 0x38
 800b4aa:	e005      	b.n	800b4b8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d116      	bne.n	800b4ec <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4c2:	b29a      	uxth	r2, r3
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b4cc:	4b0c      	ldr	r3, [pc, #48]	; (800b500 <USB_CoreInit+0xd8>)
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	689b      	ldr	r3, [r3, #8]
 800b4d8:	f043 0206 	orr.w	r2, r3, #6
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	f043 0220 	orr.w	r2, r3, #32
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b4ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3710      	adds	r7, #16
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b4f8:	b004      	add	sp, #16
 800b4fa:	4770      	bx	lr
 800b4fc:	ffbdffbf 	.word	0xffbdffbf
 800b500:	03ee0000 	.word	0x03ee0000

0800b504 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b504:	b480      	push	{r7}
 800b506:	b083      	sub	sp, #12
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	f023 0201 	bic.w	r2, r3, #1
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b518:	2300      	movs	r3, #0
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	370c      	adds	r7, #12
 800b51e:	46bd      	mov	sp, r7
 800b520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b524:	4770      	bx	lr

0800b526 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b526:	b580      	push	{r7, lr}
 800b528:	b084      	sub	sp, #16
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
 800b52e:	460b      	mov	r3, r1
 800b530:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b532:	2300      	movs	r3, #0
 800b534:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b542:	78fb      	ldrb	r3, [r7, #3]
 800b544:	2b01      	cmp	r3, #1
 800b546:	d115      	bne.n	800b574 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	68db      	ldr	r3, [r3, #12]
 800b54c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b554:	2001      	movs	r0, #1
 800b556:	f7f7 fc59 	bl	8002e0c <HAL_Delay>
      ms++;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	3301      	adds	r3, #1
 800b55e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 fa25 	bl	800b9b0 <USB_GetMode>
 800b566:	4603      	mov	r3, r0
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d01e      	beq.n	800b5aa <USB_SetCurrentMode+0x84>
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	2b31      	cmp	r3, #49	; 0x31
 800b570:	d9f0      	bls.n	800b554 <USB_SetCurrentMode+0x2e>
 800b572:	e01a      	b.n	800b5aa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b574:	78fb      	ldrb	r3, [r7, #3]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d115      	bne.n	800b5a6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	68db      	ldr	r3, [r3, #12]
 800b57e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b586:	2001      	movs	r0, #1
 800b588:	f7f7 fc40 	bl	8002e0c <HAL_Delay>
      ms++;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	3301      	adds	r3, #1
 800b590:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 fa0c 	bl	800b9b0 <USB_GetMode>
 800b598:	4603      	mov	r3, r0
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d005      	beq.n	800b5aa <USB_SetCurrentMode+0x84>
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2b31      	cmp	r3, #49	; 0x31
 800b5a2:	d9f0      	bls.n	800b586 <USB_SetCurrentMode+0x60>
 800b5a4:	e001      	b.n	800b5aa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	e005      	b.n	800b5b6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2b32      	cmp	r3, #50	; 0x32
 800b5ae:	d101      	bne.n	800b5b4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	e000      	b.n	800b5b6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b5b4:	2300      	movs	r3, #0
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3710      	adds	r7, #16
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
	...

0800b5c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b5c0:	b084      	sub	sp, #16
 800b5c2:	b580      	push	{r7, lr}
 800b5c4:	b086      	sub	sp, #24
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
 800b5ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b5ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b5da:	2300      	movs	r3, #0
 800b5dc:	613b      	str	r3, [r7, #16]
 800b5de:	e009      	b.n	800b5f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	3340      	adds	r3, #64	; 0x40
 800b5e6:	009b      	lsls	r3, r3, #2
 800b5e8:	4413      	add	r3, r2
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	613b      	str	r3, [r7, #16]
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	2b0e      	cmp	r3, #14
 800b5f8:	d9f2      	bls.n	800b5e0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b5fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d11c      	bne.n	800b63a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	68fa      	ldr	r2, [r7, #12]
 800b60a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b60e:	f043 0302 	orr.w	r3, r3, #2
 800b612:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b618:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	601a      	str	r2, [r3, #0]
 800b638:	e005      	b.n	800b646 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b63e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b64c:	461a      	mov	r2, r3
 800b64e:	2300      	movs	r3, #0
 800b650:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b658:	4619      	mov	r1, r3
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b660:	461a      	mov	r2, r3
 800b662:	680b      	ldr	r3, [r1, #0]
 800b664:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d10c      	bne.n	800b686 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d104      	bne.n	800b67c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b672:	2100      	movs	r1, #0
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 f961 	bl	800b93c <USB_SetDevSpeed>
 800b67a:	e008      	b.n	800b68e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b67c:	2101      	movs	r1, #1
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f000 f95c 	bl	800b93c <USB_SetDevSpeed>
 800b684:	e003      	b.n	800b68e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b686:	2103      	movs	r1, #3
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 f957 	bl	800b93c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b68e:	2110      	movs	r1, #16
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 f8f3 	bl	800b87c <USB_FlushTxFifo>
 800b696:	4603      	mov	r3, r0
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d001      	beq.n	800b6a0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b69c:	2301      	movs	r3, #1
 800b69e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 f91d 	bl	800b8e0 <USB_FlushRxFifo>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d001      	beq.n	800b6b0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	613b      	str	r3, [r7, #16]
 800b6d8:	e043      	b.n	800b762 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	015a      	lsls	r2, r3, #5
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	4413      	add	r3, r2
 800b6e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6f0:	d118      	bne.n	800b724 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d10a      	bne.n	800b70e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	015a      	lsls	r2, r3, #5
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	4413      	add	r3, r2
 800b700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b704:	461a      	mov	r2, r3
 800b706:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b70a:	6013      	str	r3, [r2, #0]
 800b70c:	e013      	b.n	800b736 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	015a      	lsls	r2, r3, #5
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	4413      	add	r3, r2
 800b716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b71a:	461a      	mov	r2, r3
 800b71c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b720:	6013      	str	r3, [r2, #0]
 800b722:	e008      	b.n	800b736 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	015a      	lsls	r2, r3, #5
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	4413      	add	r3, r2
 800b72c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b730:	461a      	mov	r2, r3
 800b732:	2300      	movs	r3, #0
 800b734:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	015a      	lsls	r2, r3, #5
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	4413      	add	r3, r2
 800b73e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b742:	461a      	mov	r2, r3
 800b744:	2300      	movs	r3, #0
 800b746:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	015a      	lsls	r2, r3, #5
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	4413      	add	r3, r2
 800b750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b754:	461a      	mov	r2, r3
 800b756:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b75a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	3301      	adds	r3, #1
 800b760:	613b      	str	r3, [r7, #16]
 800b762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b764:	693a      	ldr	r2, [r7, #16]
 800b766:	429a      	cmp	r2, r3
 800b768:	d3b7      	bcc.n	800b6da <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b76a:	2300      	movs	r3, #0
 800b76c:	613b      	str	r3, [r7, #16]
 800b76e:	e043      	b.n	800b7f8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	015a      	lsls	r2, r3, #5
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	4413      	add	r3, r2
 800b778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b782:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b786:	d118      	bne.n	800b7ba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d10a      	bne.n	800b7a4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	015a      	lsls	r2, r3, #5
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	4413      	add	r3, r2
 800b796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b79a:	461a      	mov	r2, r3
 800b79c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b7a0:	6013      	str	r3, [r2, #0]
 800b7a2:	e013      	b.n	800b7cc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	015a      	lsls	r2, r3, #5
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	4413      	add	r3, r2
 800b7ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b7b6:	6013      	str	r3, [r2, #0]
 800b7b8:	e008      	b.n	800b7cc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	015a      	lsls	r2, r3, #5
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	4413      	add	r3, r2
 800b7c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	015a      	lsls	r2, r3, #5
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	4413      	add	r3, r2
 800b7d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7d8:	461a      	mov	r2, r3
 800b7da:	2300      	movs	r3, #0
 800b7dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	015a      	lsls	r2, r3, #5
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	4413      	add	r3, r2
 800b7e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b7f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	613b      	str	r3, [r7, #16]
 800b7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fa:	693a      	ldr	r2, [r7, #16]
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d3b7      	bcc.n	800b770 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b806:	691b      	ldr	r3, [r3, #16]
 800b808:	68fa      	ldr	r2, [r7, #12]
 800b80a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b80e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b812:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2200      	movs	r2, #0
 800b818:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b820:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b824:	2b00      	cmp	r3, #0
 800b826:	d105      	bne.n	800b834 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	699b      	ldr	r3, [r3, #24]
 800b82c:	f043 0210 	orr.w	r2, r3, #16
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	699a      	ldr	r2, [r3, #24]
 800b838:	4b0e      	ldr	r3, [pc, #56]	; (800b874 <USB_DevInit+0x2b4>)
 800b83a:	4313      	orrs	r3, r2
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b842:	2b00      	cmp	r3, #0
 800b844:	d005      	beq.n	800b852 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	699b      	ldr	r3, [r3, #24]
 800b84a:	f043 0208 	orr.w	r2, r3, #8
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b854:	2b01      	cmp	r3, #1
 800b856:	d105      	bne.n	800b864 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	699a      	ldr	r2, [r3, #24]
 800b85c:	4b06      	ldr	r3, [pc, #24]	; (800b878 <USB_DevInit+0x2b8>)
 800b85e:	4313      	orrs	r3, r2
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b864:	7dfb      	ldrb	r3, [r7, #23]
}
 800b866:	4618      	mov	r0, r3
 800b868:	3718      	adds	r7, #24
 800b86a:	46bd      	mov	sp, r7
 800b86c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b870:	b004      	add	sp, #16
 800b872:	4770      	bx	lr
 800b874:	803c3800 	.word	0x803c3800
 800b878:	40000004 	.word	0x40000004

0800b87c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b085      	sub	sp, #20
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b886:	2300      	movs	r3, #0
 800b888:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	3301      	adds	r3, #1
 800b88e:	60fb      	str	r3, [r7, #12]
 800b890:	4a12      	ldr	r2, [pc, #72]	; (800b8dc <USB_FlushTxFifo+0x60>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d901      	bls.n	800b89a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b896:	2303      	movs	r3, #3
 800b898:	e01a      	b.n	800b8d0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	691b      	ldr	r3, [r3, #16]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	daf3      	bge.n	800b88a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	019b      	lsls	r3, r3, #6
 800b8aa:	f043 0220 	orr.w	r2, r3, #32
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	60fb      	str	r3, [r7, #12]
 800b8b8:	4a08      	ldr	r2, [pc, #32]	; (800b8dc <USB_FlushTxFifo+0x60>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d901      	bls.n	800b8c2 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800b8be:	2303      	movs	r3, #3
 800b8c0:	e006      	b.n	800b8d0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	691b      	ldr	r3, [r3, #16]
 800b8c6:	f003 0320 	and.w	r3, r3, #32
 800b8ca:	2b20      	cmp	r3, #32
 800b8cc:	d0f1      	beq.n	800b8b2 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800b8ce:	2300      	movs	r3, #0
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3714      	adds	r7, #20
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr
 800b8dc:	00030d40 	.word	0x00030d40

0800b8e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b085      	sub	sp, #20
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	60fb      	str	r3, [r7, #12]
 800b8f2:	4a11      	ldr	r2, [pc, #68]	; (800b938 <USB_FlushRxFifo+0x58>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d901      	bls.n	800b8fc <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800b8f8:	2303      	movs	r3, #3
 800b8fa:	e017      	b.n	800b92c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	691b      	ldr	r3, [r3, #16]
 800b900:	2b00      	cmp	r3, #0
 800b902:	daf3      	bge.n	800b8ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b904:	2300      	movs	r3, #0
 800b906:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2210      	movs	r2, #16
 800b90c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	3301      	adds	r3, #1
 800b912:	60fb      	str	r3, [r7, #12]
 800b914:	4a08      	ldr	r2, [pc, #32]	; (800b938 <USB_FlushRxFifo+0x58>)
 800b916:	4293      	cmp	r3, r2
 800b918:	d901      	bls.n	800b91e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800b91a:	2303      	movs	r3, #3
 800b91c:	e006      	b.n	800b92c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	691b      	ldr	r3, [r3, #16]
 800b922:	f003 0310 	and.w	r3, r3, #16
 800b926:	2b10      	cmp	r3, #16
 800b928:	d0f1      	beq.n	800b90e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800b92a:	2300      	movs	r3, #0
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3714      	adds	r7, #20
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr
 800b938:	00030d40 	.word	0x00030d40

0800b93c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b085      	sub	sp, #20
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	460b      	mov	r3, r1
 800b946:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	78fb      	ldrb	r3, [r7, #3]
 800b956:	68f9      	ldr	r1, [r7, #12]
 800b958:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b95c:	4313      	orrs	r3, r2
 800b95e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b960:	2300      	movs	r3, #0
}
 800b962:	4618      	mov	r0, r3
 800b964:	3714      	adds	r7, #20
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr

0800b96e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b96e:	b480      	push	{r7}
 800b970:	b085      	sub	sp, #20
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	68fa      	ldr	r2, [r7, #12]
 800b984:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b988:	f023 0303 	bic.w	r3, r3, #3
 800b98c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b994:	685b      	ldr	r3, [r3, #4]
 800b996:	68fa      	ldr	r2, [r7, #12]
 800b998:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b99c:	f043 0302 	orr.w	r3, r3, #2
 800b9a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b9a2:	2300      	movs	r3, #0
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3714      	adds	r7, #20
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	695b      	ldr	r3, [r3, #20]
 800b9bc:	f003 0301 	and.w	r3, r3, #1
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	370c      	adds	r7, #12
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr

0800b9cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b085      	sub	sp, #20
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	60fb      	str	r3, [r7, #12]
 800b9de:	4a13      	ldr	r2, [pc, #76]	; (800ba2c <USB_CoreReset+0x60>)
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d901      	bls.n	800b9e8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800b9e4:	2303      	movs	r3, #3
 800b9e6:	e01a      	b.n	800ba1e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	691b      	ldr	r3, [r3, #16]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	daf3      	bge.n	800b9d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	691b      	ldr	r3, [r3, #16]
 800b9f8:	f043 0201 	orr.w	r2, r3, #1
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	3301      	adds	r3, #1
 800ba04:	60fb      	str	r3, [r7, #12]
 800ba06:	4a09      	ldr	r2, [pc, #36]	; (800ba2c <USB_CoreReset+0x60>)
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d901      	bls.n	800ba10 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800ba0c:	2303      	movs	r3, #3
 800ba0e:	e006      	b.n	800ba1e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	691b      	ldr	r3, [r3, #16]
 800ba14:	f003 0301 	and.w	r3, r3, #1
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d0f1      	beq.n	800ba00 <USB_CoreReset+0x34>

  return HAL_OK;
 800ba1c:	2300      	movs	r3, #0
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3714      	adds	r7, #20
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop
 800ba2c:	00030d40 	.word	0x00030d40

0800ba30 <__errno>:
 800ba30:	4b01      	ldr	r3, [pc, #4]	; (800ba38 <__errno+0x8>)
 800ba32:	6818      	ldr	r0, [r3, #0]
 800ba34:	4770      	bx	lr
 800ba36:	bf00      	nop
 800ba38:	24000024 	.word	0x24000024

0800ba3c <__libc_init_array>:
 800ba3c:	b570      	push	{r4, r5, r6, lr}
 800ba3e:	4d0d      	ldr	r5, [pc, #52]	; (800ba74 <__libc_init_array+0x38>)
 800ba40:	4c0d      	ldr	r4, [pc, #52]	; (800ba78 <__libc_init_array+0x3c>)
 800ba42:	1b64      	subs	r4, r4, r5
 800ba44:	10a4      	asrs	r4, r4, #2
 800ba46:	2600      	movs	r6, #0
 800ba48:	42a6      	cmp	r6, r4
 800ba4a:	d109      	bne.n	800ba60 <__libc_init_array+0x24>
 800ba4c:	4d0b      	ldr	r5, [pc, #44]	; (800ba7c <__libc_init_array+0x40>)
 800ba4e:	4c0c      	ldr	r4, [pc, #48]	; (800ba80 <__libc_init_array+0x44>)
 800ba50:	f000 fc56 	bl	800c300 <_init>
 800ba54:	1b64      	subs	r4, r4, r5
 800ba56:	10a4      	asrs	r4, r4, #2
 800ba58:	2600      	movs	r6, #0
 800ba5a:	42a6      	cmp	r6, r4
 800ba5c:	d105      	bne.n	800ba6a <__libc_init_array+0x2e>
 800ba5e:	bd70      	pop	{r4, r5, r6, pc}
 800ba60:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba64:	4798      	blx	r3
 800ba66:	3601      	adds	r6, #1
 800ba68:	e7ee      	b.n	800ba48 <__libc_init_array+0xc>
 800ba6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba6e:	4798      	blx	r3
 800ba70:	3601      	adds	r6, #1
 800ba72:	e7f2      	b.n	800ba5a <__libc_init_array+0x1e>
 800ba74:	0800d2c0 	.word	0x0800d2c0
 800ba78:	0800d2c0 	.word	0x0800d2c0
 800ba7c:	0800d2c0 	.word	0x0800d2c0
 800ba80:	0800d2c4 	.word	0x0800d2c4

0800ba84 <memcpy>:
 800ba84:	440a      	add	r2, r1
 800ba86:	4291      	cmp	r1, r2
 800ba88:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba8c:	d100      	bne.n	800ba90 <memcpy+0xc>
 800ba8e:	4770      	bx	lr
 800ba90:	b510      	push	{r4, lr}
 800ba92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba9a:	4291      	cmp	r1, r2
 800ba9c:	d1f9      	bne.n	800ba92 <memcpy+0xe>
 800ba9e:	bd10      	pop	{r4, pc}

0800baa0 <memmove>:
 800baa0:	4288      	cmp	r0, r1
 800baa2:	b510      	push	{r4, lr}
 800baa4:	eb01 0402 	add.w	r4, r1, r2
 800baa8:	d902      	bls.n	800bab0 <memmove+0x10>
 800baaa:	4284      	cmp	r4, r0
 800baac:	4623      	mov	r3, r4
 800baae:	d807      	bhi.n	800bac0 <memmove+0x20>
 800bab0:	1e43      	subs	r3, r0, #1
 800bab2:	42a1      	cmp	r1, r4
 800bab4:	d008      	beq.n	800bac8 <memmove+0x28>
 800bab6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800baba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800babe:	e7f8      	b.n	800bab2 <memmove+0x12>
 800bac0:	4402      	add	r2, r0
 800bac2:	4601      	mov	r1, r0
 800bac4:	428a      	cmp	r2, r1
 800bac6:	d100      	bne.n	800baca <memmove+0x2a>
 800bac8:	bd10      	pop	{r4, pc}
 800baca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bace:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bad2:	e7f7      	b.n	800bac4 <memmove+0x24>

0800bad4 <memset>:
 800bad4:	4402      	add	r2, r0
 800bad6:	4603      	mov	r3, r0
 800bad8:	4293      	cmp	r3, r2
 800bada:	d100      	bne.n	800bade <memset+0xa>
 800badc:	4770      	bx	lr
 800bade:	f803 1b01 	strb.w	r1, [r3], #1
 800bae2:	e7f9      	b.n	800bad8 <memset+0x4>

0800bae4 <siprintf>:
 800bae4:	b40e      	push	{r1, r2, r3}
 800bae6:	b500      	push	{lr}
 800bae8:	b09c      	sub	sp, #112	; 0x70
 800baea:	ab1d      	add	r3, sp, #116	; 0x74
 800baec:	9002      	str	r0, [sp, #8]
 800baee:	9006      	str	r0, [sp, #24]
 800baf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800baf4:	4809      	ldr	r0, [pc, #36]	; (800bb1c <siprintf+0x38>)
 800baf6:	9107      	str	r1, [sp, #28]
 800baf8:	9104      	str	r1, [sp, #16]
 800bafa:	4909      	ldr	r1, [pc, #36]	; (800bb20 <siprintf+0x3c>)
 800bafc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb00:	9105      	str	r1, [sp, #20]
 800bb02:	6800      	ldr	r0, [r0, #0]
 800bb04:	9301      	str	r3, [sp, #4]
 800bb06:	a902      	add	r1, sp, #8
 800bb08:	f000 f870 	bl	800bbec <_svfiprintf_r>
 800bb0c:	9b02      	ldr	r3, [sp, #8]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	701a      	strb	r2, [r3, #0]
 800bb12:	b01c      	add	sp, #112	; 0x70
 800bb14:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb18:	b003      	add	sp, #12
 800bb1a:	4770      	bx	lr
 800bb1c:	24000024 	.word	0x24000024
 800bb20:	ffff0208 	.word	0xffff0208

0800bb24 <strcpy>:
 800bb24:	4603      	mov	r3, r0
 800bb26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb2a:	f803 2b01 	strb.w	r2, [r3], #1
 800bb2e:	2a00      	cmp	r2, #0
 800bb30:	d1f9      	bne.n	800bb26 <strcpy+0x2>
 800bb32:	4770      	bx	lr

0800bb34 <__ssputs_r>:
 800bb34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb38:	688e      	ldr	r6, [r1, #8]
 800bb3a:	429e      	cmp	r6, r3
 800bb3c:	4682      	mov	sl, r0
 800bb3e:	460c      	mov	r4, r1
 800bb40:	4690      	mov	r8, r2
 800bb42:	461f      	mov	r7, r3
 800bb44:	d838      	bhi.n	800bbb8 <__ssputs_r+0x84>
 800bb46:	898a      	ldrh	r2, [r1, #12]
 800bb48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bb4c:	d032      	beq.n	800bbb4 <__ssputs_r+0x80>
 800bb4e:	6825      	ldr	r5, [r4, #0]
 800bb50:	6909      	ldr	r1, [r1, #16]
 800bb52:	eba5 0901 	sub.w	r9, r5, r1
 800bb56:	6965      	ldr	r5, [r4, #20]
 800bb58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb60:	3301      	adds	r3, #1
 800bb62:	444b      	add	r3, r9
 800bb64:	106d      	asrs	r5, r5, #1
 800bb66:	429d      	cmp	r5, r3
 800bb68:	bf38      	it	cc
 800bb6a:	461d      	movcc	r5, r3
 800bb6c:	0553      	lsls	r3, r2, #21
 800bb6e:	d531      	bpl.n	800bbd4 <__ssputs_r+0xa0>
 800bb70:	4629      	mov	r1, r5
 800bb72:	f000 fb1f 	bl	800c1b4 <_malloc_r>
 800bb76:	4606      	mov	r6, r0
 800bb78:	b950      	cbnz	r0, 800bb90 <__ssputs_r+0x5c>
 800bb7a:	230c      	movs	r3, #12
 800bb7c:	f8ca 3000 	str.w	r3, [sl]
 800bb80:	89a3      	ldrh	r3, [r4, #12]
 800bb82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb86:	81a3      	strh	r3, [r4, #12]
 800bb88:	f04f 30ff 	mov.w	r0, #4294967295
 800bb8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb90:	6921      	ldr	r1, [r4, #16]
 800bb92:	464a      	mov	r2, r9
 800bb94:	f7ff ff76 	bl	800ba84 <memcpy>
 800bb98:	89a3      	ldrh	r3, [r4, #12]
 800bb9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bba2:	81a3      	strh	r3, [r4, #12]
 800bba4:	6126      	str	r6, [r4, #16]
 800bba6:	6165      	str	r5, [r4, #20]
 800bba8:	444e      	add	r6, r9
 800bbaa:	eba5 0509 	sub.w	r5, r5, r9
 800bbae:	6026      	str	r6, [r4, #0]
 800bbb0:	60a5      	str	r5, [r4, #8]
 800bbb2:	463e      	mov	r6, r7
 800bbb4:	42be      	cmp	r6, r7
 800bbb6:	d900      	bls.n	800bbba <__ssputs_r+0x86>
 800bbb8:	463e      	mov	r6, r7
 800bbba:	4632      	mov	r2, r6
 800bbbc:	6820      	ldr	r0, [r4, #0]
 800bbbe:	4641      	mov	r1, r8
 800bbc0:	f7ff ff6e 	bl	800baa0 <memmove>
 800bbc4:	68a3      	ldr	r3, [r4, #8]
 800bbc6:	6822      	ldr	r2, [r4, #0]
 800bbc8:	1b9b      	subs	r3, r3, r6
 800bbca:	4432      	add	r2, r6
 800bbcc:	60a3      	str	r3, [r4, #8]
 800bbce:	6022      	str	r2, [r4, #0]
 800bbd0:	2000      	movs	r0, #0
 800bbd2:	e7db      	b.n	800bb8c <__ssputs_r+0x58>
 800bbd4:	462a      	mov	r2, r5
 800bbd6:	f000 fb47 	bl	800c268 <_realloc_r>
 800bbda:	4606      	mov	r6, r0
 800bbdc:	2800      	cmp	r0, #0
 800bbde:	d1e1      	bne.n	800bba4 <__ssputs_r+0x70>
 800bbe0:	6921      	ldr	r1, [r4, #16]
 800bbe2:	4650      	mov	r0, sl
 800bbe4:	f000 fa96 	bl	800c114 <_free_r>
 800bbe8:	e7c7      	b.n	800bb7a <__ssputs_r+0x46>
	...

0800bbec <_svfiprintf_r>:
 800bbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf0:	4698      	mov	r8, r3
 800bbf2:	898b      	ldrh	r3, [r1, #12]
 800bbf4:	061b      	lsls	r3, r3, #24
 800bbf6:	b09d      	sub	sp, #116	; 0x74
 800bbf8:	4607      	mov	r7, r0
 800bbfa:	460d      	mov	r5, r1
 800bbfc:	4614      	mov	r4, r2
 800bbfe:	d50e      	bpl.n	800bc1e <_svfiprintf_r+0x32>
 800bc00:	690b      	ldr	r3, [r1, #16]
 800bc02:	b963      	cbnz	r3, 800bc1e <_svfiprintf_r+0x32>
 800bc04:	2140      	movs	r1, #64	; 0x40
 800bc06:	f000 fad5 	bl	800c1b4 <_malloc_r>
 800bc0a:	6028      	str	r0, [r5, #0]
 800bc0c:	6128      	str	r0, [r5, #16]
 800bc0e:	b920      	cbnz	r0, 800bc1a <_svfiprintf_r+0x2e>
 800bc10:	230c      	movs	r3, #12
 800bc12:	603b      	str	r3, [r7, #0]
 800bc14:	f04f 30ff 	mov.w	r0, #4294967295
 800bc18:	e0d1      	b.n	800bdbe <_svfiprintf_r+0x1d2>
 800bc1a:	2340      	movs	r3, #64	; 0x40
 800bc1c:	616b      	str	r3, [r5, #20]
 800bc1e:	2300      	movs	r3, #0
 800bc20:	9309      	str	r3, [sp, #36]	; 0x24
 800bc22:	2320      	movs	r3, #32
 800bc24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc28:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc2c:	2330      	movs	r3, #48	; 0x30
 800bc2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bdd8 <_svfiprintf_r+0x1ec>
 800bc32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc36:	f04f 0901 	mov.w	r9, #1
 800bc3a:	4623      	mov	r3, r4
 800bc3c:	469a      	mov	sl, r3
 800bc3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc42:	b10a      	cbz	r2, 800bc48 <_svfiprintf_r+0x5c>
 800bc44:	2a25      	cmp	r2, #37	; 0x25
 800bc46:	d1f9      	bne.n	800bc3c <_svfiprintf_r+0x50>
 800bc48:	ebba 0b04 	subs.w	fp, sl, r4
 800bc4c:	d00b      	beq.n	800bc66 <_svfiprintf_r+0x7a>
 800bc4e:	465b      	mov	r3, fp
 800bc50:	4622      	mov	r2, r4
 800bc52:	4629      	mov	r1, r5
 800bc54:	4638      	mov	r0, r7
 800bc56:	f7ff ff6d 	bl	800bb34 <__ssputs_r>
 800bc5a:	3001      	adds	r0, #1
 800bc5c:	f000 80aa 	beq.w	800bdb4 <_svfiprintf_r+0x1c8>
 800bc60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc62:	445a      	add	r2, fp
 800bc64:	9209      	str	r2, [sp, #36]	; 0x24
 800bc66:	f89a 3000 	ldrb.w	r3, [sl]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	f000 80a2 	beq.w	800bdb4 <_svfiprintf_r+0x1c8>
 800bc70:	2300      	movs	r3, #0
 800bc72:	f04f 32ff 	mov.w	r2, #4294967295
 800bc76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc7a:	f10a 0a01 	add.w	sl, sl, #1
 800bc7e:	9304      	str	r3, [sp, #16]
 800bc80:	9307      	str	r3, [sp, #28]
 800bc82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc86:	931a      	str	r3, [sp, #104]	; 0x68
 800bc88:	4654      	mov	r4, sl
 800bc8a:	2205      	movs	r2, #5
 800bc8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc90:	4851      	ldr	r0, [pc, #324]	; (800bdd8 <_svfiprintf_r+0x1ec>)
 800bc92:	f7f4 fb2d 	bl	80002f0 <memchr>
 800bc96:	9a04      	ldr	r2, [sp, #16]
 800bc98:	b9d8      	cbnz	r0, 800bcd2 <_svfiprintf_r+0xe6>
 800bc9a:	06d0      	lsls	r0, r2, #27
 800bc9c:	bf44      	itt	mi
 800bc9e:	2320      	movmi	r3, #32
 800bca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bca4:	0711      	lsls	r1, r2, #28
 800bca6:	bf44      	itt	mi
 800bca8:	232b      	movmi	r3, #43	; 0x2b
 800bcaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcae:	f89a 3000 	ldrb.w	r3, [sl]
 800bcb2:	2b2a      	cmp	r3, #42	; 0x2a
 800bcb4:	d015      	beq.n	800bce2 <_svfiprintf_r+0xf6>
 800bcb6:	9a07      	ldr	r2, [sp, #28]
 800bcb8:	4654      	mov	r4, sl
 800bcba:	2000      	movs	r0, #0
 800bcbc:	f04f 0c0a 	mov.w	ip, #10
 800bcc0:	4621      	mov	r1, r4
 800bcc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcc6:	3b30      	subs	r3, #48	; 0x30
 800bcc8:	2b09      	cmp	r3, #9
 800bcca:	d94e      	bls.n	800bd6a <_svfiprintf_r+0x17e>
 800bccc:	b1b0      	cbz	r0, 800bcfc <_svfiprintf_r+0x110>
 800bcce:	9207      	str	r2, [sp, #28]
 800bcd0:	e014      	b.n	800bcfc <_svfiprintf_r+0x110>
 800bcd2:	eba0 0308 	sub.w	r3, r0, r8
 800bcd6:	fa09 f303 	lsl.w	r3, r9, r3
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	9304      	str	r3, [sp, #16]
 800bcde:	46a2      	mov	sl, r4
 800bce0:	e7d2      	b.n	800bc88 <_svfiprintf_r+0x9c>
 800bce2:	9b03      	ldr	r3, [sp, #12]
 800bce4:	1d19      	adds	r1, r3, #4
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	9103      	str	r1, [sp, #12]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	bfbb      	ittet	lt
 800bcee:	425b      	neglt	r3, r3
 800bcf0:	f042 0202 	orrlt.w	r2, r2, #2
 800bcf4:	9307      	strge	r3, [sp, #28]
 800bcf6:	9307      	strlt	r3, [sp, #28]
 800bcf8:	bfb8      	it	lt
 800bcfa:	9204      	strlt	r2, [sp, #16]
 800bcfc:	7823      	ldrb	r3, [r4, #0]
 800bcfe:	2b2e      	cmp	r3, #46	; 0x2e
 800bd00:	d10c      	bne.n	800bd1c <_svfiprintf_r+0x130>
 800bd02:	7863      	ldrb	r3, [r4, #1]
 800bd04:	2b2a      	cmp	r3, #42	; 0x2a
 800bd06:	d135      	bne.n	800bd74 <_svfiprintf_r+0x188>
 800bd08:	9b03      	ldr	r3, [sp, #12]
 800bd0a:	1d1a      	adds	r2, r3, #4
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	9203      	str	r2, [sp, #12]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	bfb8      	it	lt
 800bd14:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd18:	3402      	adds	r4, #2
 800bd1a:	9305      	str	r3, [sp, #20]
 800bd1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bde8 <_svfiprintf_r+0x1fc>
 800bd20:	7821      	ldrb	r1, [r4, #0]
 800bd22:	2203      	movs	r2, #3
 800bd24:	4650      	mov	r0, sl
 800bd26:	f7f4 fae3 	bl	80002f0 <memchr>
 800bd2a:	b140      	cbz	r0, 800bd3e <_svfiprintf_r+0x152>
 800bd2c:	2340      	movs	r3, #64	; 0x40
 800bd2e:	eba0 000a 	sub.w	r0, r0, sl
 800bd32:	fa03 f000 	lsl.w	r0, r3, r0
 800bd36:	9b04      	ldr	r3, [sp, #16]
 800bd38:	4303      	orrs	r3, r0
 800bd3a:	3401      	adds	r4, #1
 800bd3c:	9304      	str	r3, [sp, #16]
 800bd3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd42:	4826      	ldr	r0, [pc, #152]	; (800bddc <_svfiprintf_r+0x1f0>)
 800bd44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd48:	2206      	movs	r2, #6
 800bd4a:	f7f4 fad1 	bl	80002f0 <memchr>
 800bd4e:	2800      	cmp	r0, #0
 800bd50:	d038      	beq.n	800bdc4 <_svfiprintf_r+0x1d8>
 800bd52:	4b23      	ldr	r3, [pc, #140]	; (800bde0 <_svfiprintf_r+0x1f4>)
 800bd54:	bb1b      	cbnz	r3, 800bd9e <_svfiprintf_r+0x1b2>
 800bd56:	9b03      	ldr	r3, [sp, #12]
 800bd58:	3307      	adds	r3, #7
 800bd5a:	f023 0307 	bic.w	r3, r3, #7
 800bd5e:	3308      	adds	r3, #8
 800bd60:	9303      	str	r3, [sp, #12]
 800bd62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd64:	4433      	add	r3, r6
 800bd66:	9309      	str	r3, [sp, #36]	; 0x24
 800bd68:	e767      	b.n	800bc3a <_svfiprintf_r+0x4e>
 800bd6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd6e:	460c      	mov	r4, r1
 800bd70:	2001      	movs	r0, #1
 800bd72:	e7a5      	b.n	800bcc0 <_svfiprintf_r+0xd4>
 800bd74:	2300      	movs	r3, #0
 800bd76:	3401      	adds	r4, #1
 800bd78:	9305      	str	r3, [sp, #20]
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	f04f 0c0a 	mov.w	ip, #10
 800bd80:	4620      	mov	r0, r4
 800bd82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd86:	3a30      	subs	r2, #48	; 0x30
 800bd88:	2a09      	cmp	r2, #9
 800bd8a:	d903      	bls.n	800bd94 <_svfiprintf_r+0x1a8>
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d0c5      	beq.n	800bd1c <_svfiprintf_r+0x130>
 800bd90:	9105      	str	r1, [sp, #20]
 800bd92:	e7c3      	b.n	800bd1c <_svfiprintf_r+0x130>
 800bd94:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd98:	4604      	mov	r4, r0
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	e7f0      	b.n	800bd80 <_svfiprintf_r+0x194>
 800bd9e:	ab03      	add	r3, sp, #12
 800bda0:	9300      	str	r3, [sp, #0]
 800bda2:	462a      	mov	r2, r5
 800bda4:	4b0f      	ldr	r3, [pc, #60]	; (800bde4 <_svfiprintf_r+0x1f8>)
 800bda6:	a904      	add	r1, sp, #16
 800bda8:	4638      	mov	r0, r7
 800bdaa:	f3af 8000 	nop.w
 800bdae:	1c42      	adds	r2, r0, #1
 800bdb0:	4606      	mov	r6, r0
 800bdb2:	d1d6      	bne.n	800bd62 <_svfiprintf_r+0x176>
 800bdb4:	89ab      	ldrh	r3, [r5, #12]
 800bdb6:	065b      	lsls	r3, r3, #25
 800bdb8:	f53f af2c 	bmi.w	800bc14 <_svfiprintf_r+0x28>
 800bdbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdbe:	b01d      	add	sp, #116	; 0x74
 800bdc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc4:	ab03      	add	r3, sp, #12
 800bdc6:	9300      	str	r3, [sp, #0]
 800bdc8:	462a      	mov	r2, r5
 800bdca:	4b06      	ldr	r3, [pc, #24]	; (800bde4 <_svfiprintf_r+0x1f8>)
 800bdcc:	a904      	add	r1, sp, #16
 800bdce:	4638      	mov	r0, r7
 800bdd0:	f000 f87a 	bl	800bec8 <_printf_i>
 800bdd4:	e7eb      	b.n	800bdae <_svfiprintf_r+0x1c2>
 800bdd6:	bf00      	nop
 800bdd8:	0800d284 	.word	0x0800d284
 800bddc:	0800d28e 	.word	0x0800d28e
 800bde0:	00000000 	.word	0x00000000
 800bde4:	0800bb35 	.word	0x0800bb35
 800bde8:	0800d28a 	.word	0x0800d28a

0800bdec <_printf_common>:
 800bdec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdf0:	4616      	mov	r6, r2
 800bdf2:	4699      	mov	r9, r3
 800bdf4:	688a      	ldr	r2, [r1, #8]
 800bdf6:	690b      	ldr	r3, [r1, #16]
 800bdf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	bfb8      	it	lt
 800be00:	4613      	movlt	r3, r2
 800be02:	6033      	str	r3, [r6, #0]
 800be04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be08:	4607      	mov	r7, r0
 800be0a:	460c      	mov	r4, r1
 800be0c:	b10a      	cbz	r2, 800be12 <_printf_common+0x26>
 800be0e:	3301      	adds	r3, #1
 800be10:	6033      	str	r3, [r6, #0]
 800be12:	6823      	ldr	r3, [r4, #0]
 800be14:	0699      	lsls	r1, r3, #26
 800be16:	bf42      	ittt	mi
 800be18:	6833      	ldrmi	r3, [r6, #0]
 800be1a:	3302      	addmi	r3, #2
 800be1c:	6033      	strmi	r3, [r6, #0]
 800be1e:	6825      	ldr	r5, [r4, #0]
 800be20:	f015 0506 	ands.w	r5, r5, #6
 800be24:	d106      	bne.n	800be34 <_printf_common+0x48>
 800be26:	f104 0a19 	add.w	sl, r4, #25
 800be2a:	68e3      	ldr	r3, [r4, #12]
 800be2c:	6832      	ldr	r2, [r6, #0]
 800be2e:	1a9b      	subs	r3, r3, r2
 800be30:	42ab      	cmp	r3, r5
 800be32:	dc26      	bgt.n	800be82 <_printf_common+0x96>
 800be34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800be38:	1e13      	subs	r3, r2, #0
 800be3a:	6822      	ldr	r2, [r4, #0]
 800be3c:	bf18      	it	ne
 800be3e:	2301      	movne	r3, #1
 800be40:	0692      	lsls	r2, r2, #26
 800be42:	d42b      	bmi.n	800be9c <_printf_common+0xb0>
 800be44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be48:	4649      	mov	r1, r9
 800be4a:	4638      	mov	r0, r7
 800be4c:	47c0      	blx	r8
 800be4e:	3001      	adds	r0, #1
 800be50:	d01e      	beq.n	800be90 <_printf_common+0xa4>
 800be52:	6823      	ldr	r3, [r4, #0]
 800be54:	68e5      	ldr	r5, [r4, #12]
 800be56:	6832      	ldr	r2, [r6, #0]
 800be58:	f003 0306 	and.w	r3, r3, #6
 800be5c:	2b04      	cmp	r3, #4
 800be5e:	bf08      	it	eq
 800be60:	1aad      	subeq	r5, r5, r2
 800be62:	68a3      	ldr	r3, [r4, #8]
 800be64:	6922      	ldr	r2, [r4, #16]
 800be66:	bf0c      	ite	eq
 800be68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be6c:	2500      	movne	r5, #0
 800be6e:	4293      	cmp	r3, r2
 800be70:	bfc4      	itt	gt
 800be72:	1a9b      	subgt	r3, r3, r2
 800be74:	18ed      	addgt	r5, r5, r3
 800be76:	2600      	movs	r6, #0
 800be78:	341a      	adds	r4, #26
 800be7a:	42b5      	cmp	r5, r6
 800be7c:	d11a      	bne.n	800beb4 <_printf_common+0xc8>
 800be7e:	2000      	movs	r0, #0
 800be80:	e008      	b.n	800be94 <_printf_common+0xa8>
 800be82:	2301      	movs	r3, #1
 800be84:	4652      	mov	r2, sl
 800be86:	4649      	mov	r1, r9
 800be88:	4638      	mov	r0, r7
 800be8a:	47c0      	blx	r8
 800be8c:	3001      	adds	r0, #1
 800be8e:	d103      	bne.n	800be98 <_printf_common+0xac>
 800be90:	f04f 30ff 	mov.w	r0, #4294967295
 800be94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be98:	3501      	adds	r5, #1
 800be9a:	e7c6      	b.n	800be2a <_printf_common+0x3e>
 800be9c:	18e1      	adds	r1, r4, r3
 800be9e:	1c5a      	adds	r2, r3, #1
 800bea0:	2030      	movs	r0, #48	; 0x30
 800bea2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bea6:	4422      	add	r2, r4
 800bea8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800beac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800beb0:	3302      	adds	r3, #2
 800beb2:	e7c7      	b.n	800be44 <_printf_common+0x58>
 800beb4:	2301      	movs	r3, #1
 800beb6:	4622      	mov	r2, r4
 800beb8:	4649      	mov	r1, r9
 800beba:	4638      	mov	r0, r7
 800bebc:	47c0      	blx	r8
 800bebe:	3001      	adds	r0, #1
 800bec0:	d0e6      	beq.n	800be90 <_printf_common+0xa4>
 800bec2:	3601      	adds	r6, #1
 800bec4:	e7d9      	b.n	800be7a <_printf_common+0x8e>
	...

0800bec8 <_printf_i>:
 800bec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800becc:	460c      	mov	r4, r1
 800bece:	4691      	mov	r9, r2
 800bed0:	7e27      	ldrb	r7, [r4, #24]
 800bed2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bed4:	2f78      	cmp	r7, #120	; 0x78
 800bed6:	4680      	mov	r8, r0
 800bed8:	469a      	mov	sl, r3
 800beda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bede:	d807      	bhi.n	800bef0 <_printf_i+0x28>
 800bee0:	2f62      	cmp	r7, #98	; 0x62
 800bee2:	d80a      	bhi.n	800befa <_printf_i+0x32>
 800bee4:	2f00      	cmp	r7, #0
 800bee6:	f000 80d8 	beq.w	800c09a <_printf_i+0x1d2>
 800beea:	2f58      	cmp	r7, #88	; 0x58
 800beec:	f000 80a3 	beq.w	800c036 <_printf_i+0x16e>
 800bef0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bef4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bef8:	e03a      	b.n	800bf70 <_printf_i+0xa8>
 800befa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800befe:	2b15      	cmp	r3, #21
 800bf00:	d8f6      	bhi.n	800bef0 <_printf_i+0x28>
 800bf02:	a001      	add	r0, pc, #4	; (adr r0, 800bf08 <_printf_i+0x40>)
 800bf04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bf08:	0800bf61 	.word	0x0800bf61
 800bf0c:	0800bf75 	.word	0x0800bf75
 800bf10:	0800bef1 	.word	0x0800bef1
 800bf14:	0800bef1 	.word	0x0800bef1
 800bf18:	0800bef1 	.word	0x0800bef1
 800bf1c:	0800bef1 	.word	0x0800bef1
 800bf20:	0800bf75 	.word	0x0800bf75
 800bf24:	0800bef1 	.word	0x0800bef1
 800bf28:	0800bef1 	.word	0x0800bef1
 800bf2c:	0800bef1 	.word	0x0800bef1
 800bf30:	0800bef1 	.word	0x0800bef1
 800bf34:	0800c081 	.word	0x0800c081
 800bf38:	0800bfa5 	.word	0x0800bfa5
 800bf3c:	0800c063 	.word	0x0800c063
 800bf40:	0800bef1 	.word	0x0800bef1
 800bf44:	0800bef1 	.word	0x0800bef1
 800bf48:	0800c0a3 	.word	0x0800c0a3
 800bf4c:	0800bef1 	.word	0x0800bef1
 800bf50:	0800bfa5 	.word	0x0800bfa5
 800bf54:	0800bef1 	.word	0x0800bef1
 800bf58:	0800bef1 	.word	0x0800bef1
 800bf5c:	0800c06b 	.word	0x0800c06b
 800bf60:	680b      	ldr	r3, [r1, #0]
 800bf62:	1d1a      	adds	r2, r3, #4
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	600a      	str	r2, [r1, #0]
 800bf68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bf6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf70:	2301      	movs	r3, #1
 800bf72:	e0a3      	b.n	800c0bc <_printf_i+0x1f4>
 800bf74:	6825      	ldr	r5, [r4, #0]
 800bf76:	6808      	ldr	r0, [r1, #0]
 800bf78:	062e      	lsls	r6, r5, #24
 800bf7a:	f100 0304 	add.w	r3, r0, #4
 800bf7e:	d50a      	bpl.n	800bf96 <_printf_i+0xce>
 800bf80:	6805      	ldr	r5, [r0, #0]
 800bf82:	600b      	str	r3, [r1, #0]
 800bf84:	2d00      	cmp	r5, #0
 800bf86:	da03      	bge.n	800bf90 <_printf_i+0xc8>
 800bf88:	232d      	movs	r3, #45	; 0x2d
 800bf8a:	426d      	negs	r5, r5
 800bf8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf90:	485e      	ldr	r0, [pc, #376]	; (800c10c <_printf_i+0x244>)
 800bf92:	230a      	movs	r3, #10
 800bf94:	e019      	b.n	800bfca <_printf_i+0x102>
 800bf96:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bf9a:	6805      	ldr	r5, [r0, #0]
 800bf9c:	600b      	str	r3, [r1, #0]
 800bf9e:	bf18      	it	ne
 800bfa0:	b22d      	sxthne	r5, r5
 800bfa2:	e7ef      	b.n	800bf84 <_printf_i+0xbc>
 800bfa4:	680b      	ldr	r3, [r1, #0]
 800bfa6:	6825      	ldr	r5, [r4, #0]
 800bfa8:	1d18      	adds	r0, r3, #4
 800bfaa:	6008      	str	r0, [r1, #0]
 800bfac:	0628      	lsls	r0, r5, #24
 800bfae:	d501      	bpl.n	800bfb4 <_printf_i+0xec>
 800bfb0:	681d      	ldr	r5, [r3, #0]
 800bfb2:	e002      	b.n	800bfba <_printf_i+0xf2>
 800bfb4:	0669      	lsls	r1, r5, #25
 800bfb6:	d5fb      	bpl.n	800bfb0 <_printf_i+0xe8>
 800bfb8:	881d      	ldrh	r5, [r3, #0]
 800bfba:	4854      	ldr	r0, [pc, #336]	; (800c10c <_printf_i+0x244>)
 800bfbc:	2f6f      	cmp	r7, #111	; 0x6f
 800bfbe:	bf0c      	ite	eq
 800bfc0:	2308      	moveq	r3, #8
 800bfc2:	230a      	movne	r3, #10
 800bfc4:	2100      	movs	r1, #0
 800bfc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bfca:	6866      	ldr	r6, [r4, #4]
 800bfcc:	60a6      	str	r6, [r4, #8]
 800bfce:	2e00      	cmp	r6, #0
 800bfd0:	bfa2      	ittt	ge
 800bfd2:	6821      	ldrge	r1, [r4, #0]
 800bfd4:	f021 0104 	bicge.w	r1, r1, #4
 800bfd8:	6021      	strge	r1, [r4, #0]
 800bfda:	b90d      	cbnz	r5, 800bfe0 <_printf_i+0x118>
 800bfdc:	2e00      	cmp	r6, #0
 800bfde:	d04d      	beq.n	800c07c <_printf_i+0x1b4>
 800bfe0:	4616      	mov	r6, r2
 800bfe2:	fbb5 f1f3 	udiv	r1, r5, r3
 800bfe6:	fb03 5711 	mls	r7, r3, r1, r5
 800bfea:	5dc7      	ldrb	r7, [r0, r7]
 800bfec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bff0:	462f      	mov	r7, r5
 800bff2:	42bb      	cmp	r3, r7
 800bff4:	460d      	mov	r5, r1
 800bff6:	d9f4      	bls.n	800bfe2 <_printf_i+0x11a>
 800bff8:	2b08      	cmp	r3, #8
 800bffa:	d10b      	bne.n	800c014 <_printf_i+0x14c>
 800bffc:	6823      	ldr	r3, [r4, #0]
 800bffe:	07df      	lsls	r7, r3, #31
 800c000:	d508      	bpl.n	800c014 <_printf_i+0x14c>
 800c002:	6923      	ldr	r3, [r4, #16]
 800c004:	6861      	ldr	r1, [r4, #4]
 800c006:	4299      	cmp	r1, r3
 800c008:	bfde      	ittt	le
 800c00a:	2330      	movle	r3, #48	; 0x30
 800c00c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c010:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c014:	1b92      	subs	r2, r2, r6
 800c016:	6122      	str	r2, [r4, #16]
 800c018:	f8cd a000 	str.w	sl, [sp]
 800c01c:	464b      	mov	r3, r9
 800c01e:	aa03      	add	r2, sp, #12
 800c020:	4621      	mov	r1, r4
 800c022:	4640      	mov	r0, r8
 800c024:	f7ff fee2 	bl	800bdec <_printf_common>
 800c028:	3001      	adds	r0, #1
 800c02a:	d14c      	bne.n	800c0c6 <_printf_i+0x1fe>
 800c02c:	f04f 30ff 	mov.w	r0, #4294967295
 800c030:	b004      	add	sp, #16
 800c032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c036:	4835      	ldr	r0, [pc, #212]	; (800c10c <_printf_i+0x244>)
 800c038:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c03c:	6823      	ldr	r3, [r4, #0]
 800c03e:	680e      	ldr	r6, [r1, #0]
 800c040:	061f      	lsls	r7, r3, #24
 800c042:	f856 5b04 	ldr.w	r5, [r6], #4
 800c046:	600e      	str	r6, [r1, #0]
 800c048:	d514      	bpl.n	800c074 <_printf_i+0x1ac>
 800c04a:	07d9      	lsls	r1, r3, #31
 800c04c:	bf44      	itt	mi
 800c04e:	f043 0320 	orrmi.w	r3, r3, #32
 800c052:	6023      	strmi	r3, [r4, #0]
 800c054:	b91d      	cbnz	r5, 800c05e <_printf_i+0x196>
 800c056:	6823      	ldr	r3, [r4, #0]
 800c058:	f023 0320 	bic.w	r3, r3, #32
 800c05c:	6023      	str	r3, [r4, #0]
 800c05e:	2310      	movs	r3, #16
 800c060:	e7b0      	b.n	800bfc4 <_printf_i+0xfc>
 800c062:	6823      	ldr	r3, [r4, #0]
 800c064:	f043 0320 	orr.w	r3, r3, #32
 800c068:	6023      	str	r3, [r4, #0]
 800c06a:	2378      	movs	r3, #120	; 0x78
 800c06c:	4828      	ldr	r0, [pc, #160]	; (800c110 <_printf_i+0x248>)
 800c06e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c072:	e7e3      	b.n	800c03c <_printf_i+0x174>
 800c074:	065e      	lsls	r6, r3, #25
 800c076:	bf48      	it	mi
 800c078:	b2ad      	uxthmi	r5, r5
 800c07a:	e7e6      	b.n	800c04a <_printf_i+0x182>
 800c07c:	4616      	mov	r6, r2
 800c07e:	e7bb      	b.n	800bff8 <_printf_i+0x130>
 800c080:	680b      	ldr	r3, [r1, #0]
 800c082:	6826      	ldr	r6, [r4, #0]
 800c084:	6960      	ldr	r0, [r4, #20]
 800c086:	1d1d      	adds	r5, r3, #4
 800c088:	600d      	str	r5, [r1, #0]
 800c08a:	0635      	lsls	r5, r6, #24
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	d501      	bpl.n	800c094 <_printf_i+0x1cc>
 800c090:	6018      	str	r0, [r3, #0]
 800c092:	e002      	b.n	800c09a <_printf_i+0x1d2>
 800c094:	0671      	lsls	r1, r6, #25
 800c096:	d5fb      	bpl.n	800c090 <_printf_i+0x1c8>
 800c098:	8018      	strh	r0, [r3, #0]
 800c09a:	2300      	movs	r3, #0
 800c09c:	6123      	str	r3, [r4, #16]
 800c09e:	4616      	mov	r6, r2
 800c0a0:	e7ba      	b.n	800c018 <_printf_i+0x150>
 800c0a2:	680b      	ldr	r3, [r1, #0]
 800c0a4:	1d1a      	adds	r2, r3, #4
 800c0a6:	600a      	str	r2, [r1, #0]
 800c0a8:	681e      	ldr	r6, [r3, #0]
 800c0aa:	6862      	ldr	r2, [r4, #4]
 800c0ac:	2100      	movs	r1, #0
 800c0ae:	4630      	mov	r0, r6
 800c0b0:	f7f4 f91e 	bl	80002f0 <memchr>
 800c0b4:	b108      	cbz	r0, 800c0ba <_printf_i+0x1f2>
 800c0b6:	1b80      	subs	r0, r0, r6
 800c0b8:	6060      	str	r0, [r4, #4]
 800c0ba:	6863      	ldr	r3, [r4, #4]
 800c0bc:	6123      	str	r3, [r4, #16]
 800c0be:	2300      	movs	r3, #0
 800c0c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0c4:	e7a8      	b.n	800c018 <_printf_i+0x150>
 800c0c6:	6923      	ldr	r3, [r4, #16]
 800c0c8:	4632      	mov	r2, r6
 800c0ca:	4649      	mov	r1, r9
 800c0cc:	4640      	mov	r0, r8
 800c0ce:	47d0      	blx	sl
 800c0d0:	3001      	adds	r0, #1
 800c0d2:	d0ab      	beq.n	800c02c <_printf_i+0x164>
 800c0d4:	6823      	ldr	r3, [r4, #0]
 800c0d6:	079b      	lsls	r3, r3, #30
 800c0d8:	d413      	bmi.n	800c102 <_printf_i+0x23a>
 800c0da:	68e0      	ldr	r0, [r4, #12]
 800c0dc:	9b03      	ldr	r3, [sp, #12]
 800c0de:	4298      	cmp	r0, r3
 800c0e0:	bfb8      	it	lt
 800c0e2:	4618      	movlt	r0, r3
 800c0e4:	e7a4      	b.n	800c030 <_printf_i+0x168>
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	4632      	mov	r2, r6
 800c0ea:	4649      	mov	r1, r9
 800c0ec:	4640      	mov	r0, r8
 800c0ee:	47d0      	blx	sl
 800c0f0:	3001      	adds	r0, #1
 800c0f2:	d09b      	beq.n	800c02c <_printf_i+0x164>
 800c0f4:	3501      	adds	r5, #1
 800c0f6:	68e3      	ldr	r3, [r4, #12]
 800c0f8:	9903      	ldr	r1, [sp, #12]
 800c0fa:	1a5b      	subs	r3, r3, r1
 800c0fc:	42ab      	cmp	r3, r5
 800c0fe:	dcf2      	bgt.n	800c0e6 <_printf_i+0x21e>
 800c100:	e7eb      	b.n	800c0da <_printf_i+0x212>
 800c102:	2500      	movs	r5, #0
 800c104:	f104 0619 	add.w	r6, r4, #25
 800c108:	e7f5      	b.n	800c0f6 <_printf_i+0x22e>
 800c10a:	bf00      	nop
 800c10c:	0800d295 	.word	0x0800d295
 800c110:	0800d2a6 	.word	0x0800d2a6

0800c114 <_free_r>:
 800c114:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c116:	2900      	cmp	r1, #0
 800c118:	d048      	beq.n	800c1ac <_free_r+0x98>
 800c11a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c11e:	9001      	str	r0, [sp, #4]
 800c120:	2b00      	cmp	r3, #0
 800c122:	f1a1 0404 	sub.w	r4, r1, #4
 800c126:	bfb8      	it	lt
 800c128:	18e4      	addlt	r4, r4, r3
 800c12a:	f000 f8d3 	bl	800c2d4 <__malloc_lock>
 800c12e:	4a20      	ldr	r2, [pc, #128]	; (800c1b0 <_free_r+0x9c>)
 800c130:	9801      	ldr	r0, [sp, #4]
 800c132:	6813      	ldr	r3, [r2, #0]
 800c134:	4615      	mov	r5, r2
 800c136:	b933      	cbnz	r3, 800c146 <_free_r+0x32>
 800c138:	6063      	str	r3, [r4, #4]
 800c13a:	6014      	str	r4, [r2, #0]
 800c13c:	b003      	add	sp, #12
 800c13e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c142:	f000 b8cd 	b.w	800c2e0 <__malloc_unlock>
 800c146:	42a3      	cmp	r3, r4
 800c148:	d90b      	bls.n	800c162 <_free_r+0x4e>
 800c14a:	6821      	ldr	r1, [r4, #0]
 800c14c:	1862      	adds	r2, r4, r1
 800c14e:	4293      	cmp	r3, r2
 800c150:	bf04      	itt	eq
 800c152:	681a      	ldreq	r2, [r3, #0]
 800c154:	685b      	ldreq	r3, [r3, #4]
 800c156:	6063      	str	r3, [r4, #4]
 800c158:	bf04      	itt	eq
 800c15a:	1852      	addeq	r2, r2, r1
 800c15c:	6022      	streq	r2, [r4, #0]
 800c15e:	602c      	str	r4, [r5, #0]
 800c160:	e7ec      	b.n	800c13c <_free_r+0x28>
 800c162:	461a      	mov	r2, r3
 800c164:	685b      	ldr	r3, [r3, #4]
 800c166:	b10b      	cbz	r3, 800c16c <_free_r+0x58>
 800c168:	42a3      	cmp	r3, r4
 800c16a:	d9fa      	bls.n	800c162 <_free_r+0x4e>
 800c16c:	6811      	ldr	r1, [r2, #0]
 800c16e:	1855      	adds	r5, r2, r1
 800c170:	42a5      	cmp	r5, r4
 800c172:	d10b      	bne.n	800c18c <_free_r+0x78>
 800c174:	6824      	ldr	r4, [r4, #0]
 800c176:	4421      	add	r1, r4
 800c178:	1854      	adds	r4, r2, r1
 800c17a:	42a3      	cmp	r3, r4
 800c17c:	6011      	str	r1, [r2, #0]
 800c17e:	d1dd      	bne.n	800c13c <_free_r+0x28>
 800c180:	681c      	ldr	r4, [r3, #0]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	6053      	str	r3, [r2, #4]
 800c186:	4421      	add	r1, r4
 800c188:	6011      	str	r1, [r2, #0]
 800c18a:	e7d7      	b.n	800c13c <_free_r+0x28>
 800c18c:	d902      	bls.n	800c194 <_free_r+0x80>
 800c18e:	230c      	movs	r3, #12
 800c190:	6003      	str	r3, [r0, #0]
 800c192:	e7d3      	b.n	800c13c <_free_r+0x28>
 800c194:	6825      	ldr	r5, [r4, #0]
 800c196:	1961      	adds	r1, r4, r5
 800c198:	428b      	cmp	r3, r1
 800c19a:	bf04      	itt	eq
 800c19c:	6819      	ldreq	r1, [r3, #0]
 800c19e:	685b      	ldreq	r3, [r3, #4]
 800c1a0:	6063      	str	r3, [r4, #4]
 800c1a2:	bf04      	itt	eq
 800c1a4:	1949      	addeq	r1, r1, r5
 800c1a6:	6021      	streq	r1, [r4, #0]
 800c1a8:	6054      	str	r4, [r2, #4]
 800c1aa:	e7c7      	b.n	800c13c <_free_r+0x28>
 800c1ac:	b003      	add	sp, #12
 800c1ae:	bd30      	pop	{r4, r5, pc}
 800c1b0:	240004dc 	.word	0x240004dc

0800c1b4 <_malloc_r>:
 800c1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b6:	1ccd      	adds	r5, r1, #3
 800c1b8:	f025 0503 	bic.w	r5, r5, #3
 800c1bc:	3508      	adds	r5, #8
 800c1be:	2d0c      	cmp	r5, #12
 800c1c0:	bf38      	it	cc
 800c1c2:	250c      	movcc	r5, #12
 800c1c4:	2d00      	cmp	r5, #0
 800c1c6:	4606      	mov	r6, r0
 800c1c8:	db01      	blt.n	800c1ce <_malloc_r+0x1a>
 800c1ca:	42a9      	cmp	r1, r5
 800c1cc:	d903      	bls.n	800c1d6 <_malloc_r+0x22>
 800c1ce:	230c      	movs	r3, #12
 800c1d0:	6033      	str	r3, [r6, #0]
 800c1d2:	2000      	movs	r0, #0
 800c1d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1d6:	f000 f87d 	bl	800c2d4 <__malloc_lock>
 800c1da:	4921      	ldr	r1, [pc, #132]	; (800c260 <_malloc_r+0xac>)
 800c1dc:	680a      	ldr	r2, [r1, #0]
 800c1de:	4614      	mov	r4, r2
 800c1e0:	b99c      	cbnz	r4, 800c20a <_malloc_r+0x56>
 800c1e2:	4f20      	ldr	r7, [pc, #128]	; (800c264 <_malloc_r+0xb0>)
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	b923      	cbnz	r3, 800c1f2 <_malloc_r+0x3e>
 800c1e8:	4621      	mov	r1, r4
 800c1ea:	4630      	mov	r0, r6
 800c1ec:	f000 f862 	bl	800c2b4 <_sbrk_r>
 800c1f0:	6038      	str	r0, [r7, #0]
 800c1f2:	4629      	mov	r1, r5
 800c1f4:	4630      	mov	r0, r6
 800c1f6:	f000 f85d 	bl	800c2b4 <_sbrk_r>
 800c1fa:	1c43      	adds	r3, r0, #1
 800c1fc:	d123      	bne.n	800c246 <_malloc_r+0x92>
 800c1fe:	230c      	movs	r3, #12
 800c200:	6033      	str	r3, [r6, #0]
 800c202:	4630      	mov	r0, r6
 800c204:	f000 f86c 	bl	800c2e0 <__malloc_unlock>
 800c208:	e7e3      	b.n	800c1d2 <_malloc_r+0x1e>
 800c20a:	6823      	ldr	r3, [r4, #0]
 800c20c:	1b5b      	subs	r3, r3, r5
 800c20e:	d417      	bmi.n	800c240 <_malloc_r+0x8c>
 800c210:	2b0b      	cmp	r3, #11
 800c212:	d903      	bls.n	800c21c <_malloc_r+0x68>
 800c214:	6023      	str	r3, [r4, #0]
 800c216:	441c      	add	r4, r3
 800c218:	6025      	str	r5, [r4, #0]
 800c21a:	e004      	b.n	800c226 <_malloc_r+0x72>
 800c21c:	6863      	ldr	r3, [r4, #4]
 800c21e:	42a2      	cmp	r2, r4
 800c220:	bf0c      	ite	eq
 800c222:	600b      	streq	r3, [r1, #0]
 800c224:	6053      	strne	r3, [r2, #4]
 800c226:	4630      	mov	r0, r6
 800c228:	f000 f85a 	bl	800c2e0 <__malloc_unlock>
 800c22c:	f104 000b 	add.w	r0, r4, #11
 800c230:	1d23      	adds	r3, r4, #4
 800c232:	f020 0007 	bic.w	r0, r0, #7
 800c236:	1ac2      	subs	r2, r0, r3
 800c238:	d0cc      	beq.n	800c1d4 <_malloc_r+0x20>
 800c23a:	1a1b      	subs	r3, r3, r0
 800c23c:	50a3      	str	r3, [r4, r2]
 800c23e:	e7c9      	b.n	800c1d4 <_malloc_r+0x20>
 800c240:	4622      	mov	r2, r4
 800c242:	6864      	ldr	r4, [r4, #4]
 800c244:	e7cc      	b.n	800c1e0 <_malloc_r+0x2c>
 800c246:	1cc4      	adds	r4, r0, #3
 800c248:	f024 0403 	bic.w	r4, r4, #3
 800c24c:	42a0      	cmp	r0, r4
 800c24e:	d0e3      	beq.n	800c218 <_malloc_r+0x64>
 800c250:	1a21      	subs	r1, r4, r0
 800c252:	4630      	mov	r0, r6
 800c254:	f000 f82e 	bl	800c2b4 <_sbrk_r>
 800c258:	3001      	adds	r0, #1
 800c25a:	d1dd      	bne.n	800c218 <_malloc_r+0x64>
 800c25c:	e7cf      	b.n	800c1fe <_malloc_r+0x4a>
 800c25e:	bf00      	nop
 800c260:	240004dc 	.word	0x240004dc
 800c264:	240004e0 	.word	0x240004e0

0800c268 <_realloc_r>:
 800c268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c26a:	4607      	mov	r7, r0
 800c26c:	4614      	mov	r4, r2
 800c26e:	460e      	mov	r6, r1
 800c270:	b921      	cbnz	r1, 800c27c <_realloc_r+0x14>
 800c272:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c276:	4611      	mov	r1, r2
 800c278:	f7ff bf9c 	b.w	800c1b4 <_malloc_r>
 800c27c:	b922      	cbnz	r2, 800c288 <_realloc_r+0x20>
 800c27e:	f7ff ff49 	bl	800c114 <_free_r>
 800c282:	4625      	mov	r5, r4
 800c284:	4628      	mov	r0, r5
 800c286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c288:	f000 f830 	bl	800c2ec <_malloc_usable_size_r>
 800c28c:	42a0      	cmp	r0, r4
 800c28e:	d20f      	bcs.n	800c2b0 <_realloc_r+0x48>
 800c290:	4621      	mov	r1, r4
 800c292:	4638      	mov	r0, r7
 800c294:	f7ff ff8e 	bl	800c1b4 <_malloc_r>
 800c298:	4605      	mov	r5, r0
 800c29a:	2800      	cmp	r0, #0
 800c29c:	d0f2      	beq.n	800c284 <_realloc_r+0x1c>
 800c29e:	4631      	mov	r1, r6
 800c2a0:	4622      	mov	r2, r4
 800c2a2:	f7ff fbef 	bl	800ba84 <memcpy>
 800c2a6:	4631      	mov	r1, r6
 800c2a8:	4638      	mov	r0, r7
 800c2aa:	f7ff ff33 	bl	800c114 <_free_r>
 800c2ae:	e7e9      	b.n	800c284 <_realloc_r+0x1c>
 800c2b0:	4635      	mov	r5, r6
 800c2b2:	e7e7      	b.n	800c284 <_realloc_r+0x1c>

0800c2b4 <_sbrk_r>:
 800c2b4:	b538      	push	{r3, r4, r5, lr}
 800c2b6:	4d06      	ldr	r5, [pc, #24]	; (800c2d0 <_sbrk_r+0x1c>)
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	4604      	mov	r4, r0
 800c2bc:	4608      	mov	r0, r1
 800c2be:	602b      	str	r3, [r5, #0]
 800c2c0:	f7f6 fc2a 	bl	8002b18 <_sbrk>
 800c2c4:	1c43      	adds	r3, r0, #1
 800c2c6:	d102      	bne.n	800c2ce <_sbrk_r+0x1a>
 800c2c8:	682b      	ldr	r3, [r5, #0]
 800c2ca:	b103      	cbz	r3, 800c2ce <_sbrk_r+0x1a>
 800c2cc:	6023      	str	r3, [r4, #0]
 800c2ce:	bd38      	pop	{r3, r4, r5, pc}
 800c2d0:	24002be4 	.word	0x24002be4

0800c2d4 <__malloc_lock>:
 800c2d4:	4801      	ldr	r0, [pc, #4]	; (800c2dc <__malloc_lock+0x8>)
 800c2d6:	f000 b811 	b.w	800c2fc <__retarget_lock_acquire_recursive>
 800c2da:	bf00      	nop
 800c2dc:	24002bec 	.word	0x24002bec

0800c2e0 <__malloc_unlock>:
 800c2e0:	4801      	ldr	r0, [pc, #4]	; (800c2e8 <__malloc_unlock+0x8>)
 800c2e2:	f000 b80c 	b.w	800c2fe <__retarget_lock_release_recursive>
 800c2e6:	bf00      	nop
 800c2e8:	24002bec 	.word	0x24002bec

0800c2ec <_malloc_usable_size_r>:
 800c2ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2f0:	1f18      	subs	r0, r3, #4
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	bfbc      	itt	lt
 800c2f6:	580b      	ldrlt	r3, [r1, r0]
 800c2f8:	18c0      	addlt	r0, r0, r3
 800c2fa:	4770      	bx	lr

0800c2fc <__retarget_lock_acquire_recursive>:
 800c2fc:	4770      	bx	lr

0800c2fe <__retarget_lock_release_recursive>:
 800c2fe:	4770      	bx	lr

0800c300 <_init>:
 800c300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c302:	bf00      	nop
 800c304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c306:	bc08      	pop	{r3}
 800c308:	469e      	mov	lr, r3
 800c30a:	4770      	bx	lr

0800c30c <_fini>:
 800c30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c30e:	bf00      	nop
 800c310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c312:	bc08      	pop	{r3}
 800c314:	469e      	mov	lr, r3
 800c316:	4770      	bx	lr
