
Askhsh_12_v1_8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6e0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000840  0800b980  0800b980  0001b980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c1c0  0800c1c0  0001c1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c1c8  0800c1c8  0001c1c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c1cc  0800c1cc  0001c1cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  0800c1d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000af0  2400007c  0800c24c  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000b6c  0800c24c  00020b6c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030095  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004806  00000000  00000000  0005013f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a30  00000000  00000000  00054948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000018c0  00000000  00000000  00056378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ed9b  00000000  00000000  00057c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021850  00000000  00000000  000969d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017ba66  00000000  00000000  000b8223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00233c89  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007520  00000000  00000000  00233cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b968 	.word	0x0800b968

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	0800b968 	.word	0x0800b968

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <delayUS_DWT>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void delayUS_DWT(volatile uint32_t microseconds)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000690:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <delayUS_DWT+0x40>)
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000696:	f005 fd5b 	bl	8006150 <HAL_RCC_GetHCLKFreq>
 800069a:	4603      	mov	r3, r0
 800069c:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <delayUS_DWT+0x44>)
 800069e:	fba2 2303 	umull	r2, r3, r2, r3
 80006a2:	0c9b      	lsrs	r3, r3, #18
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	fb02 f303 	mul.w	r3, r2, r3
 80006aa:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80006ac:	bf00      	nop
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <delayUS_DWT+0x40>)
 80006b0:	685a      	ldr	r2, [r3, #4]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	1ad2      	subs	r2, r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d3f8      	bcc.n	80006ae <delayUS_DWT+0x26>
}
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	e0001000 	.word	0xe0001000
 80006cc:	431bde83 	.word	0x431bde83

080006d0 <writeSDA>:
#define HEX2BCD(v)	((v) % 10 + (v) / 10 * 16)
#define BCD2HEX(v)	((v) % 16 + (v) / 16 * 10)


// SDA Write(output) Mode
static void writeSDA(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SDA;
 80006d6:	2301      	movs	r3, #1
 80006d8:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80006de:	2302      	movs	r3, #2
 80006e0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4619      	mov	r1, r3
 80006e6:	4803      	ldr	r0, [pc, #12]	; (80006f4 <writeSDA+0x24>)
 80006e8:	f003 fdd4 	bl	8004294 <HAL_GPIO_Init>
	
}
 80006ec:	bf00      	nop
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	58021400 	.word	0x58021400

080006f8 <readSDA>:


// SDA Read(input) Mode
static void readSDA(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SDA;
 80006fe:	2301      	movs	r3, #1
 8000700:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_INPUT;
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8000706:	2302      	movs	r3, #2
 8000708:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800070a:	2302      	movs	r3, #2
 800070c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);	
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	4619      	mov	r1, r3
 8000712:	4803      	ldr	r0, [pc, #12]	; (8000720 <readSDA+0x28>)
 8000714:	f003 fdbe 	bl	8004294 <HAL_GPIO_Init>
}
 8000718:	bf00      	nop
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	58021400 	.word	0x58021400

08000724 <DS1302_SendCmd>:


/* Отправка адреса или команды */
static void DS1302_SendCmd(uint8_t cmd) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i ++) 
 800072e:	2300      	movs	r3, #0
 8000730:	73fb      	strb	r3, [r7, #15]
 8000732:	e01e      	b.n	8000772 <DS1302_SendCmd+0x4e>
	{	
		//		DS1302_SDA = (bit)(addr & 1);
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA, (cmd & 1) ?  GPIO_PIN_SET :  GPIO_PIN_RESET);
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	461a      	mov	r2, r3
 800073e:	2101      	movs	r1, #1
 8000740:	4810      	ldr	r0, [pc, #64]	; (8000784 <DS1302_SendCmd+0x60>)
 8000742:	f003 ff6f 	bl	8004624 <HAL_GPIO_WritePin>
		//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	2102      	movs	r1, #2
 800074a:	480e      	ldr	r0, [pc, #56]	; (8000784 <DS1302_SendCmd+0x60>)
 800074c:	f003 ff6a 	bl	8004624 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff ff99 	bl	8000688 <delayUS_DWT>
		//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2102      	movs	r1, #2
 800075a:	480a      	ldr	r0, [pc, #40]	; (8000784 <DS1302_SendCmd+0x60>)
 800075c:	f003 ff62 	bl	8004624 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 8000760:	2001      	movs	r0, #1
 8000762:	f7ff ff91 	bl	8000688 <delayUS_DWT>
		cmd >>= 1;
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	085b      	lsrs	r3, r3, #1
 800076a:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i ++) 
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	3301      	adds	r3, #1
 8000770:	73fb      	strb	r3, [r7, #15]
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	2b07      	cmp	r3, #7
 8000776:	d9dd      	bls.n	8000734 <DS1302_SendCmd+0x10>
	}
}
 8000778:	bf00      	nop
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	58021400 	.word	0x58021400

08000788 <DS1302_WriteByte>:


/* Прочитать байт по адресу 'addr' */
static void DS1302_WriteByte(uint8_t addr, uint8_t d)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	460a      	mov	r2, r1
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	4613      	mov	r3, r2
 8000796:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	//	DS1302_RST = 1;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_SET);	
 8000798:	2201      	movs	r2, #1
 800079a:	2104      	movs	r1, #4
 800079c:	481c      	ldr	r0, [pc, #112]	; (8000810 <DS1302_WriteByte+0x88>)
 800079e:	f003 ff41 	bl	8004624 <HAL_GPIO_WritePin>
	
	//addr = addr & 0xFE;
	DS1302_SendCmd(addr);	// Отправка адреса
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ffbd 	bl	8000724 <DS1302_SendCmd>
	
	for (i = 0; i < 8; i ++) 
 80007aa:	2300      	movs	r3, #0
 80007ac:	73fb      	strb	r3, [r7, #15]
 80007ae:	e01e      	b.n	80007ee <DS1302_WriteByte+0x66>
	{
		//		DS1302_SDA = (bit)(d & 1);
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA, (d & 1) ?  GPIO_PIN_SET :  GPIO_PIN_RESET);
 80007b0:	79bb      	ldrb	r3, [r7, #6]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	461a      	mov	r2, r3
 80007ba:	2101      	movs	r1, #1
 80007bc:	4814      	ldr	r0, [pc, #80]	; (8000810 <DS1302_WriteByte+0x88>)
 80007be:	f003 ff31 	bl	8004624 <HAL_GPIO_WritePin>
		//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	2102      	movs	r1, #2
 80007c6:	4812      	ldr	r0, [pc, #72]	; (8000810 <DS1302_WriteByte+0x88>)
 80007c8:	f003 ff2c 	bl	8004624 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 80007cc:	2001      	movs	r0, #1
 80007ce:	f7ff ff5b 	bl	8000688 <delayUS_DWT>
		//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2102      	movs	r1, #2
 80007d6:	480e      	ldr	r0, [pc, #56]	; (8000810 <DS1302_WriteByte+0x88>)
 80007d8:	f003 ff24 	bl	8004624 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 80007dc:	2001      	movs	r0, #1
 80007de:	f7ff ff53 	bl	8000688 <delayUS_DWT>
		d >>= 1;
 80007e2:	79bb      	ldrb	r3, [r7, #6]
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	71bb      	strb	r3, [r7, #6]
	for (i = 0; i < 8; i ++) 
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	3301      	adds	r3, #1
 80007ec:	73fb      	strb	r3, [r7, #15]
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2b07      	cmp	r3, #7
 80007f2:	d9dd      	bls.n	80007b0 <DS1302_WriteByte+0x28>
	}
	
	//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2104      	movs	r1, #4
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <DS1302_WriteByte+0x88>)
 80007fa:	f003 ff13 	bl	8004624 <HAL_GPIO_WritePin>
	//	DS1302_SDA = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA,  GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2101      	movs	r1, #1
 8000802:	4803      	ldr	r0, [pc, #12]	; (8000810 <DS1302_WriteByte+0x88>)
 8000804:	f003 ff0e 	bl	8004624 <HAL_GPIO_WritePin>
}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	58021400 	.word	0x58021400

08000814 <DS1302_ReadByte>:
}


/* Reads a byte from addr */
static uint8_t DS1302_ReadByte(uint8_t addr)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t temp = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	73bb      	strb	r3, [r7, #14]

	//	DS1302_RST = 1;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_SET);	
 8000822:	2201      	movs	r2, #1
 8000824:	2104      	movs	r1, #4
 8000826:	4822      	ldr	r0, [pc, #136]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000828:	f003 fefc 	bl	8004624 <HAL_GPIO_WritePin>
	addr = addr | 0x01; 	// Generate Read Address
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	71fb      	strb	r3, [r7, #7]

	DS1302_SendCmd(addr);	// Sends address
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff74 	bl	8000724 <DS1302_SendCmd>
	
	readSDA();
 800083c:	f7ff ff5c 	bl	80006f8 <readSDA>
	for (i = 0; i < 8; i ++) 
 8000840:	2300      	movs	r3, #0
 8000842:	73fb      	strb	r3, [r7, #15]
 8000844:	e020      	b.n	8000888 <DS1302_ReadByte+0x74>
	{
		temp >>= 1;
 8000846:	7bbb      	ldrb	r3, [r7, #14]
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	73bb      	strb	r3, [r7, #14]
		//		if(DS1302_SDA)
		if(HAL_GPIO_ReadPin(DS1302_GPIO, DS1302_SDA))
 800084c:	2101      	movs	r1, #1
 800084e:	4818      	ldr	r0, [pc, #96]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000850:	f003 fed0 	bl	80045f4 <HAL_GPIO_ReadPin>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d003      	beq.n	8000862 <DS1302_ReadByte+0x4e>
			temp |= 0x80;
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000860:	73bb      	strb	r3, [r7, #14]
		//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	2102      	movs	r1, #2
 8000866:	4812      	ldr	r0, [pc, #72]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000868:	f003 fedc 	bl	8004624 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff ff0b 	bl	8000688 <delayUS_DWT>
		//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2102      	movs	r1, #2
 8000876:	480e      	ldr	r0, [pc, #56]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000878:	f003 fed4 	bl	8004624 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 800087c:	2001      	movs	r0, #1
 800087e:	f7ff ff03 	bl	8000688 <delayUS_DWT>
	for (i = 0; i < 8; i ++) 
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	3301      	adds	r3, #1
 8000886:	73fb      	strb	r3, [r7, #15]
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	2b07      	cmp	r3, #7
 800088c:	d9db      	bls.n	8000846 <DS1302_ReadByte+0x32>
	}
	writeSDA();
 800088e:	f7ff ff1f 	bl	80006d0 <writeSDA>

	//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2104      	movs	r1, #4
 8000896:	4806      	ldr	r0, [pc, #24]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000898:	f003 fec4 	bl	8004624 <HAL_GPIO_WritePin>
	//	DS1302_SDA = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA,  GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2101      	movs	r1, #1
 80008a0:	4803      	ldr	r0, [pc, #12]	; (80008b0 <DS1302_ReadByte+0x9c>)
 80008a2:	f003 febf 	bl	8004624 <HAL_GPIO_WritePin>
	return temp;
 80008a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	58021400 	.word	0x58021400

080008b4 <DS1302_WriteTime>:
}


/* Writes time byte by byte from 'buf' */
void DS1302_WriteTime(uint8_t *buf) 
{	
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	DS1302_WriteByte(DS1302_CONTROL, 0x00);			// Отключить защиту от записи
 80008bc:	2100      	movs	r1, #0
 80008be:	208e      	movs	r0, #142	; 0x8e
 80008c0:	f7ff ff62 	bl	8000788 <DS1302_WriteByte>
	delayUS_DWT(1);
 80008c4:	2001      	movs	r0, #1
 80008c6:	f7ff fedf 	bl	8000688 <delayUS_DWT>
	DS1302_WriteByte(DS1302_SEC, 0x80);
 80008ca:	2180      	movs	r1, #128	; 0x80
 80008cc:	2080      	movs	r0, #128	; 0x80
 80008ce:	f7ff ff5b 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_YEAR, HEX2BCD(buf[1]));
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3301      	adds	r3, #1
 80008d6:	781a      	ldrb	r2, [r3, #0]
 80008d8:	4b69      	ldr	r3, [pc, #420]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80008da:	fba3 1302 	umull	r1, r3, r3, r2
 80008de:	08d9      	lsrs	r1, r3, #3
 80008e0:	460b      	mov	r3, r1
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	440b      	add	r3, r1
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3301      	adds	r3, #1
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	4963      	ldr	r1, [pc, #396]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80008f4:	fba1 1303 	umull	r1, r3, r1, r3
 80008f8:	08db      	lsrs	r3, r3, #3
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	011b      	lsls	r3, r3, #4
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	4413      	add	r3, r2
 8000902:	b2db      	uxtb	r3, r3
 8000904:	4619      	mov	r1, r3
 8000906:	208c      	movs	r0, #140	; 0x8c
 8000908:	f7ff ff3e 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_MONTH, HEX2BCD(buf[2]));
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3302      	adds	r3, #2
 8000910:	781a      	ldrb	r2, [r3, #0]
 8000912:	4b5b      	ldr	r3, [pc, #364]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000914:	fba3 1302 	umull	r1, r3, r3, r2
 8000918:	08d9      	lsrs	r1, r3, #3
 800091a:	460b      	mov	r3, r1
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	440b      	add	r3, r1
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	b2da      	uxtb	r2, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3302      	adds	r3, #2
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4954      	ldr	r1, [pc, #336]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 800092e:	fba1 1303 	umull	r1, r3, r1, r3
 8000932:	08db      	lsrs	r3, r3, #3
 8000934:	b2db      	uxtb	r3, r3
 8000936:	011b      	lsls	r3, r3, #4
 8000938:	b2db      	uxtb	r3, r3
 800093a:	4413      	add	r3, r2
 800093c:	b2db      	uxtb	r3, r3
 800093e:	4619      	mov	r1, r3
 8000940:	2088      	movs	r0, #136	; 0x88
 8000942:	f7ff ff21 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_DATE, HEX2BCD(buf[3]));
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3303      	adds	r3, #3
 800094a:	781a      	ldrb	r2, [r3, #0]
 800094c:	4b4c      	ldr	r3, [pc, #304]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 800094e:	fba3 1302 	umull	r1, r3, r3, r2
 8000952:	08d9      	lsrs	r1, r3, #3
 8000954:	460b      	mov	r3, r1
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	440b      	add	r3, r1
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	b2da      	uxtb	r2, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3303      	adds	r3, #3
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	4946      	ldr	r1, [pc, #280]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000968:	fba1 1303 	umull	r1, r3, r1, r3
 800096c:	08db      	lsrs	r3, r3, #3
 800096e:	b2db      	uxtb	r3, r3
 8000970:	011b      	lsls	r3, r3, #4
 8000972:	b2db      	uxtb	r3, r3
 8000974:	4413      	add	r3, r2
 8000976:	b2db      	uxtb	r3, r3
 8000978:	4619      	mov	r1, r3
 800097a:	2086      	movs	r0, #134	; 0x86
 800097c:	f7ff ff04 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_HOUR, HEX2BCD(buf[4]));
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3304      	adds	r3, #4
 8000984:	781a      	ldrb	r2, [r3, #0]
 8000986:	4b3e      	ldr	r3, [pc, #248]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000988:	fba3 1302 	umull	r1, r3, r3, r2
 800098c:	08d9      	lsrs	r1, r3, #3
 800098e:	460b      	mov	r3, r1
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	440b      	add	r3, r1
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	b2da      	uxtb	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	3304      	adds	r3, #4
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	4937      	ldr	r1, [pc, #220]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80009a2:	fba1 1303 	umull	r1, r3, r1, r3
 80009a6:	08db      	lsrs	r3, r3, #3
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	011b      	lsls	r3, r3, #4
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	4413      	add	r3, r2
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	4619      	mov	r1, r3
 80009b4:	2084      	movs	r0, #132	; 0x84
 80009b6:	f7ff fee7 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_MIN, HEX2BCD(buf[5]));
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	3305      	adds	r3, #5
 80009be:	781a      	ldrb	r2, [r3, #0]
 80009c0:	4b2f      	ldr	r3, [pc, #188]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80009c2:	fba3 1302 	umull	r1, r3, r3, r2
 80009c6:	08d9      	lsrs	r1, r3, #3
 80009c8:	460b      	mov	r3, r1
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	440b      	add	r3, r1
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3305      	adds	r3, #5
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	4929      	ldr	r1, [pc, #164]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80009dc:	fba1 1303 	umull	r1, r3, r1, r3
 80009e0:	08db      	lsrs	r3, r3, #3
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	011b      	lsls	r3, r3, #4
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	4413      	add	r3, r2
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4619      	mov	r1, r3
 80009ee:	2082      	movs	r0, #130	; 0x82
 80009f0:	f7ff feca 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_SEC, HEX2BCD(buf[6]));
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3306      	adds	r3, #6
 80009f8:	781a      	ldrb	r2, [r3, #0]
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80009fc:	fba3 1302 	umull	r1, r3, r3, r2
 8000a00:	08d9      	lsrs	r1, r3, #3
 8000a02:	460b      	mov	r3, r1
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	440b      	add	r3, r1
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3306      	adds	r3, #6
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	491a      	ldr	r1, [pc, #104]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000a16:	fba1 1303 	umull	r1, r3, r1, r3
 8000a1a:	08db      	lsrs	r3, r3, #3
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	011b      	lsls	r3, r3, #4
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	4413      	add	r3, r2
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	4619      	mov	r1, r3
 8000a28:	2080      	movs	r0, #128	; 0x80
 8000a2a:	f7ff fead 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_DAY, HEX2BCD(buf[7]));
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	3307      	adds	r3, #7
 8000a32:	781a      	ldrb	r2, [r3, #0]
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000a36:	fba3 1302 	umull	r1, r3, r3, r2
 8000a3a:	08d9      	lsrs	r1, r3, #3
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	440b      	add	r3, r1
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3307      	adds	r3, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	490c      	ldr	r1, [pc, #48]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000a50:	fba1 1303 	umull	r1, r3, r1, r3
 8000a54:	08db      	lsrs	r3, r3, #3
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	011b      	lsls	r3, r3, #4
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	4413      	add	r3, r2
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	4619      	mov	r1, r3
 8000a62:	208a      	movs	r0, #138	; 0x8a
 8000a64:	f7ff fe90 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_CONTROL, 0x80);			// Включить защиту от записи
 8000a68:	2180      	movs	r1, #128	; 0x80
 8000a6a:	208e      	movs	r0, #142	; 0x8e
 8000a6c:	f7ff fe8c 	bl	8000788 <DS1302_WriteByte>
	delayUS_DWT(1);
 8000a70:	2001      	movs	r0, #1
 8000a72:	f7ff fe09 	bl	8000688 <delayUS_DWT>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	cccccccd 	.word	0xcccccccd

08000a84 <DS1302_ReadTime>:


/* Reads time byte by byte to 'buf' */
void DS1302_ReadTime(uint8_t *buf)  
{ 
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
   	uint8_t tmp;
	
	tmp = DS1302_ReadByte(DS1302_YEAR); 	
 8000a8c:	208c      	movs	r0, #140	; 0x8c
 8000a8e:	f7ff fec1 	bl	8000814 <DS1302_ReadByte>
 8000a92:	4603      	mov	r3, r0
 8000a94:	73fb      	strb	r3, [r7, #15]
	buf[1] = BCD2HEX(tmp);		 
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
 8000a98:	f003 030f 	and.w	r3, r3, #15
 8000a9c:	b2d9      	uxtb	r1, r3
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
 8000aa0:	091b      	lsrs	r3, r3, #4
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	0092      	lsls	r2, r2, #2
 8000aa8:	4413      	add	r3, r2
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	440a      	add	r2, r1
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_MONTH); 	
 8000ab8:	2088      	movs	r0, #136	; 0x88
 8000aba:	f7ff feab 	bl	8000814 <DS1302_ReadByte>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	73fb      	strb	r3, [r7, #15]
	buf[2] = BCD2HEX(tmp);	 
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	f003 030f 	and.w	r3, r3, #15
 8000ac8:	b2d9      	uxtb	r1, r3
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	091b      	lsrs	r3, r3, #4
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	0092      	lsls	r2, r2, #2
 8000ad4:	4413      	add	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	3302      	adds	r3, #2
 8000ade:	440a      	add	r2, r1
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_DATE); 	
 8000ae4:	2086      	movs	r0, #134	; 0x86
 8000ae6:	f7ff fe95 	bl	8000814 <DS1302_ReadByte>
 8000aea:	4603      	mov	r3, r0
 8000aec:	73fb      	strb	r3, [r7, #15]
	buf[3] = BCD2HEX(tmp);
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	f003 030f 	and.w	r3, r3, #15
 8000af4:	b2d9      	uxtb	r1, r3
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
 8000af8:	091b      	lsrs	r3, r3, #4
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	461a      	mov	r2, r3
 8000afe:	0092      	lsls	r2, r2, #2
 8000b00:	4413      	add	r3, r2
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3303      	adds	r3, #3
 8000b0a:	440a      	add	r2, r1
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_HOUR);		
 8000b10:	2084      	movs	r0, #132	; 0x84
 8000b12:	f7ff fe7f 	bl	8000814 <DS1302_ReadByte>
 8000b16:	4603      	mov	r3, r0
 8000b18:	73fb      	strb	r3, [r7, #15]
	buf[4] = BCD2HEX(tmp);
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
 8000b1c:	f003 030f 	and.w	r3, r3, #15
 8000b20:	b2d9      	uxtb	r1, r3
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	091b      	lsrs	r3, r3, #4
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	461a      	mov	r2, r3
 8000b2a:	0092      	lsls	r2, r2, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3304      	adds	r3, #4
 8000b36:	440a      	add	r2, r1
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_MIN);		
 8000b3c:	2082      	movs	r0, #130	; 0x82
 8000b3e:	f7ff fe69 	bl	8000814 <DS1302_ReadByte>
 8000b42:	4603      	mov	r3, r0
 8000b44:	73fb      	strb	r3, [r7, #15]
	buf[5] = BCD2HEX(tmp); 
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
 8000b48:	f003 030f 	and.w	r3, r3, #15
 8000b4c:	b2d9      	uxtb	r1, r3
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	091b      	lsrs	r3, r3, #4
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	461a      	mov	r2, r3
 8000b56:	0092      	lsls	r2, r2, #2
 8000b58:	4413      	add	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	3305      	adds	r3, #5
 8000b62:	440a      	add	r2, r1
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte((DS1302_SEC)) & 0x7F;
 8000b68:	2080      	movs	r0, #128	; 0x80
 8000b6a:	f7ff fe53 	bl	8000814 <DS1302_ReadByte>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b74:	73fb      	strb	r3, [r7, #15]
	buf[6] = BCD2HEX(tmp);
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	f003 030f 	and.w	r3, r3, #15
 8000b7c:	b2d9      	uxtb	r1, r3
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	091b      	lsrs	r3, r3, #4
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	461a      	mov	r2, r3
 8000b86:	0092      	lsls	r2, r2, #2
 8000b88:	4413      	add	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3306      	adds	r3, #6
 8000b92:	440a      	add	r2, r1
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_DAY);		
 8000b98:	208a      	movs	r0, #138	; 0x8a
 8000b9a:	f7ff fe3b 	bl	8000814 <DS1302_ReadByte>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	73fb      	strb	r3, [r7, #15]
	buf[7] = BCD2HEX(tmp);
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	f003 030f 	and.w	r3, r3, #15
 8000ba8:	b2d9      	uxtb	r1, r3
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	091b      	lsrs	r3, r3, #4
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	0092      	lsls	r2, r2, #2
 8000bb4:	4413      	add	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3307      	adds	r3, #7
 8000bbe:	440a      	add	r2, r1
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	701a      	strb	r2, [r3, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <DS1302_Init>:


/* Инициализация */
void DS1302_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
	DWT_Delay_Init(); //Инициализация таймера для отсчета милисекунд
 8000bd2:	f000 f849 	bl	8000c68 <DWT_Delay_Init>

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SCLK | DS1302_SDA | DS1302_RST;
 8000bd6:	2307      	movs	r3, #7
 8000bd8:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bde:	2302      	movs	r3, #2
 8000be0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	480d      	ldr	r0, [pc, #52]	; (8000c1c <DS1302_Init+0x50>)
 8000be8:	f003 fb54 	bl	8004294 <HAL_GPIO_Init>
	
	DS1302_WriteByte(DS1302_CHARGER, 0x00);			// Отключить Trickle Charger
 8000bec:	2100      	movs	r1, #0
 8000bee:	2090      	movs	r0, #144	; 0x90
 8000bf0:	f7ff fdca 	bl	8000788 <DS1302_WriteByte>
		
	//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2104      	movs	r1, #4
 8000bf8:	4808      	ldr	r0, [pc, #32]	; (8000c1c <DS1302_Init+0x50>)
 8000bfa:	f003 fd13 	bl	8004624 <HAL_GPIO_WritePin>
	//	DS1302_SCK = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2102      	movs	r1, #2
 8000c02:	4806      	ldr	r0, [pc, #24]	; (8000c1c <DS1302_Init+0x50>)
 8000c04:	f003 fd0e 	bl	8004624 <HAL_GPIO_WritePin>

	delayUS_DWT(10); // Меньше 10 мкс делать не стоит.
 8000c08:	200a      	movs	r0, #10
 8000c0a:	f7ff fd3d 	bl	8000688 <delayUS_DWT>
	DS1302_ClockStart();
 8000c0e:	f000 f807 	bl	8000c20 <DS1302_ClockStart>
}
 8000c12:	bf00      	nop
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	58021400 	.word	0x58021400

08000c20 <DS1302_ClockStart>:

//Запуск часов.
//Изначально DS1302 в режиме HALT (остановлена, режим энергосбережения).
//Чтоб начался отсчет времени необходимо однократно выполнить эту функцию.
void DS1302_ClockStart(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
	uint8_t buf = 0x00;
 8000c26:	2300      	movs	r3, #0
 8000c28:	71fb      	strb	r3, [r7, #7]

	DS1302_WriteByte(DS1302_CONTROL, 0x00);			// Отключить защиту от записи
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	208e      	movs	r0, #142	; 0x8e
 8000c2e:	f7ff fdab 	bl	8000788 <DS1302_WriteByte>
	delayUS_DWT(1);
 8000c32:	2001      	movs	r0, #1
 8000c34:	f7ff fd28 	bl	8000688 <delayUS_DWT>

	buf = DS1302_ReadByte(DS1302_SEC) & 0x7F;		// Записываем в 8 бит 0. При этом сохраняем установленное значение секунд.
 8000c38:	2080      	movs	r0, #128	; 0x80
 8000c3a:	f7ff fdeb 	bl	8000814 <DS1302_ReadByte>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c44:	71fb      	strb	r3, [r7, #7]
	DS1302_WriteByte(DS1302_SEC, buf);
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	2080      	movs	r0, #128	; 0x80
 8000c4c:	f7ff fd9c 	bl	8000788 <DS1302_WriteByte>

	DS1302_WriteByte(DS1302_CONTROL, 0x80);			// Включить защиту от записи
 8000c50:	2180      	movs	r1, #128	; 0x80
 8000c52:	208e      	movs	r0, #142	; 0x8e
 8000c54:	f7ff fd98 	bl	8000788 <DS1302_WriteByte>
	delayUS_DWT(1);
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f7ff fd15 	bl	8000688 <delayUS_DWT>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <DWT_Delay_Init+0x58>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <DWT_Delay_Init+0x58>)
 8000c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c76:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <DWT_Delay_Init+0x58>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	4a10      	ldr	r2, [pc, #64]	; (8000cc0 <DWT_Delay_Init+0x58>)
 8000c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c82:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c8a:	f023 0301 	bic.w	r3, r3, #1
 8000c8e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000ca2:	bf00      	nop
     __ASM volatile ("NOP");
 8000ca4:	bf00      	nop
     __ASM volatile ("NOP");
 8000ca6:	bf00      	nop

     /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e000      	b.n	8000cb6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000cb4:	2301      	movs	r3, #1
  }
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000edf0 	.word	0xe000edf0
 8000cc4:	e0001000 	.word	0xe0001000

08000cc8 <ADC_CH0_SELECT>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ADC_CH0_SELECT()
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
 8000cdc:	615a      	str	r2, [r3, #20]
 8000cde:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_0;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ce4:	2306      	movs	r3, #6
 8000ce6:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cec:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000cf0:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4806      	ldr	r0, [pc, #24]	; (8000d18 <ADC_CH0_SELECT+0x50>)
 8000d00:	f002 fbe4 	bl	80034cc <HAL_ADC_ConfigChannel>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <ADC_CH0_SELECT+0x46>
	  {
	    Error_Handler();
 8000d0a:	f000 ff21 	bl	8001b50 <Error_Handler>
	  }
}
 8000d0e:	bf00      	nop
 8000d10:	3720      	adds	r7, #32
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	24000a28 	.word	0x24000a28

08000d1c <ADC_CH1_SELECT>:
void ADC_CH1_SELECT()
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
 8000d30:	615a      	str	r2, [r3, #20]
 8000d32:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_1;
 8000d34:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <ADC_CH1_SELECT+0x50>)
 8000d36:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d38:	2306      	movs	r3, #6
 8000d3a:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d40:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d44:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d46:	2304      	movs	r3, #4
 8000d48:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	4619      	mov	r1, r3
 8000d52:	4807      	ldr	r0, [pc, #28]	; (8000d70 <ADC_CH1_SELECT+0x54>)
 8000d54:	f002 fbba 	bl	80034cc <HAL_ADC_ConfigChannel>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <ADC_CH1_SELECT+0x46>
	  {
	    Error_Handler();
 8000d5e:	f000 fef7 	bl	8001b50 <Error_Handler>
	  }
}
 8000d62:	bf00      	nop
 8000d64:	3720      	adds	r7, #32
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	04300002 	.word	0x04300002
 8000d70:	24000a28 	.word	0x24000a28

08000d74 <ADC_CH4_SELECT>:
void ADC_CH4_SELECT()
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
 8000d88:	615a      	str	r2, [r3, #20]
 8000d8a:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_4;
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <ADC_CH4_SELECT+0x50>)
 8000d8e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d90:	2306      	movs	r3, #6
 8000d92:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d94:	2301      	movs	r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d98:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d9c:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d9e:	2304      	movs	r3, #4
 8000da0:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	4619      	mov	r1, r3
 8000daa:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <ADC_CH4_SELECT+0x54>)
 8000dac:	f002 fb8e 	bl	80034cc <HAL_ADC_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <ADC_CH4_SELECT+0x46>
	  {
	    Error_Handler();
 8000db6:	f000 fecb 	bl	8001b50 <Error_Handler>
	  }
}
 8000dba:	bf00      	nop
 8000dbc:	3720      	adds	r7, #32
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	10c00010 	.word	0x10c00010
 8000dc8:	24000a28 	.word	0x24000a28

08000dcc <ADC_CH5_SELECT>:
void ADC_CH5_SELECT()
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
 8000de0:	615a      	str	r2, [r3, #20]
 8000de2:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_5;
 8000de4:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <ADC_CH5_SELECT+0x50>)
 8000de6:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000de8:	2306      	movs	r3, #6
 8000dea:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000dec:	2301      	movs	r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000df0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000df4:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000df6:	2304      	movs	r3, #4
 8000df8:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	4619      	mov	r1, r3
 8000e02:	4807      	ldr	r0, [pc, #28]	; (8000e20 <ADC_CH5_SELECT+0x54>)
 8000e04:	f002 fb62 	bl	80034cc <HAL_ADC_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <ADC_CH5_SELECT+0x46>
	  {
	    Error_Handler();
 8000e0e:	f000 fe9f 	bl	8001b50 <Error_Handler>
	  }
}
 8000e12:	bf00      	nop
 8000e14:	3720      	adds	r7, #32
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	14f00020 	.word	0x14f00020
 8000e20:	24000a28 	.word	0x24000a28

08000e24 <ADC_CH6_SELECT>:
void ADC_CH6_SELECT()
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
 8000e38:	615a      	str	r2, [r3, #20]
 8000e3a:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_6;
 8000e3c:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <ADC_CH6_SELECT+0x50>)
 8000e3e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e40:	2306      	movs	r3, #6
 8000e42:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e44:	2301      	movs	r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e48:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e4c:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e4e:	2304      	movs	r3, #4
 8000e50:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4807      	ldr	r0, [pc, #28]	; (8000e78 <ADC_CH6_SELECT+0x54>)
 8000e5c:	f002 fb36 	bl	80034cc <HAL_ADC_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <ADC_CH6_SELECT+0x46>
	  {
	    Error_Handler();
 8000e66:	f000 fe73 	bl	8001b50 <Error_Handler>
	  }
}
 8000e6a:	bf00      	nop
 8000e6c:	3720      	adds	r7, #32
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	19200040 	.word	0x19200040
 8000e78:	24000a28 	.word	0x24000a28

08000e7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7e:	f6ad 1d94 	subw	sp, sp, #2452	; 0x994
 8000e82:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	uint16_t LED_DutyCycle = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8a7 397a 	strh.w	r3, [r7, #2426]	; 0x97a
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8a:	f001 fc75 	bl	8002778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e8e:	f000 f9e7 	bl	8001260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e92:	f000 fcd7 	bl	8001844 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000e96:	f000 fc57 	bl	8001748 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e9a:	f000 fca1 	bl	80017e0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000e9e:	f000 facd 	bl	800143c <MX_I2C1_Init>
  MX_ADC3_Init();
 8000ea2:	f000 fa67 	bl	8001374 <MX_ADC3_Init>
  MX_TIM1_Init();
 8000ea6:	f000 fb09 	bl	80014bc <MX_TIM1_Init>
  MX_TIM3_Init();
 8000eaa:	f000 fb5b 	bl	8001564 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000eae:	f000 fba7 	bl	8001600 <MX_TIM4_Init>
  MX_TIM14_Init();
 8000eb2:	f000 fbfb 	bl	80016ac <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000eb6:	f000 fe89 	bl	8001bcc <ssd1306_Init>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000eba:	213c      	movs	r1, #60	; 0x3c
 8000ebc:	48d7      	ldr	r0, [pc, #860]	; (800121c <main+0x3a0>)
 8000ebe:	f007 fd95 	bl	80089ec <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	48d6      	ldr	r0, [pc, #856]	; (8001220 <main+0x3a4>)
 8000ec6:	f007 fbdd 	bl	8008684 <HAL_TIM_PWM_Start>
  DS1302_Init();
 8000eca:	f7ff fe7f 	bl	8000bcc <DS1302_Init>
  HAL_Delay(1000);
 8000ece:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ed2:	f001 fce3 	bl	800289c <HAL_Delay>
  uint32_t adcraw0=0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
  uint32_t adcraw1=0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
  uint32_t adcraw4=0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
  uint32_t adcraw5=0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968
  uint32_t adcraw6=0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
  uint32_t adcarray1[100];
  uint32_t adcarray4[100];
  uint32_t adcarray5[100];
  uint32_t adcarray6[100];

  int counterAdc=0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
  char adcbuffer4[50];
  char adcbuffer5[50];
  char adcbuffer6[50];
  char tempBuffer[100];
  char time[8];
  char time_to_set[8]={0,5,06,23,01,54,00,1};//Contr,Year,Mounth,Date,Hour,Min,Sec,Day
 8000efa:	f107 0318 	add.w	r3, r7, #24
 8000efe:	4ac9      	ldr	r2, [pc, #804]	; (8001224 <main+0x3a8>)
 8000f00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f04:	e883 0003 	stmia.w	r3, {r0, r1}
  DS1302_WriteTime(time_to_set);
 8000f08:	f107 0318 	add.w	r3, r7, #24
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fcd1 	bl	80008b4 <DS1302_WriteTime>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  DS1302_ReadTime(time);
 8000f12:	f107 0320 	add.w	r3, r7, #32
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fdb4 	bl	8000a84 <DS1302_ReadTime>
	  sprintf(tempBuffer,"\n\r %2d/%2d/%2d%2d:%2d:%2d \n\r",time[1],time[2],time[3],time[4],time[5],time[6]);
 8000f1c:	f107 0320 	add.w	r3, r7, #32
 8000f20:	785b      	ldrb	r3, [r3, #1]
 8000f22:	461d      	mov	r5, r3
 8000f24:	f107 0320 	add.w	r3, r7, #32
 8000f28:	789b      	ldrb	r3, [r3, #2]
 8000f2a:	461e      	mov	r6, r3
 8000f2c:	f107 0320 	add.w	r3, r7, #32
 8000f30:	78db      	ldrb	r3, [r3, #3]
 8000f32:	461a      	mov	r2, r3
 8000f34:	f107 0320 	add.w	r3, r7, #32
 8000f38:	791b      	ldrb	r3, [r3, #4]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f107 0320 	add.w	r3, r7, #32
 8000f40:	795b      	ldrb	r3, [r3, #5]
 8000f42:	461c      	mov	r4, r3
 8000f44:	f107 0320 	add.w	r3, r7, #32
 8000f48:	799b      	ldrb	r3, [r3, #6]
 8000f4a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000f4e:	9303      	str	r3, [sp, #12]
 8000f50:	9402      	str	r4, [sp, #8]
 8000f52:	9101      	str	r1, [sp, #4]
 8000f54:	9200      	str	r2, [sp, #0]
 8000f56:	4633      	mov	r3, r6
 8000f58:	462a      	mov	r2, r5
 8000f5a:	49b3      	ldr	r1, [pc, #716]	; (8001228 <main+0x3ac>)
 8000f5c:	f00a f8fe 	bl	800b15c <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)tempBuffer, strlen(tempBuffer), HAL_MAX_DELAY);
 8000f60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff f9bb 	bl	80002e0 <strlen>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
 8000f76:	48ad      	ldr	r0, [pc, #692]	; (800122c <main+0x3b0>)
 8000f78:	f008 fce4 	bl	8009944 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000f7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f80:	f001 fc8c 	bl	800289c <HAL_Delay>

      LED_DutyCycle = TIM4->CNT; //65536/tic*64
 8000f84:	4baa      	ldr	r3, [pc, #680]	; (8001230 <main+0x3b4>)
 8000f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f88:	f8a7 397a 	strh.w	r3, [r7, #2426]	; 0x97a

//      TIM14->CCR1 = LED_DutyCycle;

      sprintf(uartBuf, "Encoder count: %d\r\n", (int)TIM4->CNT);
 8000f8c:	4ba8      	ldr	r3, [pc, #672]	; (8001230 <main+0x3b4>)
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f90:	461a      	mov	r2, r3
 8000f92:	49a8      	ldr	r1, [pc, #672]	; (8001234 <main+0x3b8>)
 8000f94:	48a8      	ldr	r0, [pc, #672]	; (8001238 <main+0x3bc>)
 8000f96:	f00a f8e1 	bl	800b15c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 8000f9a:	48a7      	ldr	r0, [pc, #668]	; (8001238 <main+0x3bc>)
 8000f9c:	f7ff f9a0 	bl	80002e0 <strlen>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa8:	49a3      	ldr	r1, [pc, #652]	; (8001238 <main+0x3bc>)
 8000faa:	48a0      	ldr	r0, [pc, #640]	; (800122c <main+0x3b0>)
 8000fac:	f008 fcca 	bl	8009944 <HAL_UART_Transmit>

      HAL_Delay(10);
 8000fb0:	200a      	movs	r0, #10
 8000fb2:	f001 fc73 	bl	800289c <HAL_Delay>

      uint16_t encoderReading = TIM4->CNT;  // Original reading
 8000fb6:	4b9e      	ldr	r3, [pc, #632]	; (8001230 <main+0x3b4>)
 8000fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fba:	f8a7 3962 	strh.w	r3, [r7, #2402]	; 0x962

      // Scale the reading to a range of 1 second to 300 seconds
      uint16_t scaledTime = MIN_TIME + ((encoderReading * (MAX_TIME - MIN_TIME)) / MAX_ENCODER_VALUE);
 8000fbe:	f8b7 3962 	ldrh.w	r3, [r7, #2402]	; 0x962
 8000fc2:	f240 122b 	movw	r2, #299	; 0x12b
 8000fc6:	fb02 f303 	mul.w	r3, r2, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	da01      	bge.n	8000fd2 <main+0x156>
 8000fce:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8000fd2:	129b      	asrs	r3, r3, #10
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	f8a7 3960 	strh.w	r3, [r7, #2400]	; 0x960

      // Now scaledTime should be in the range of 1 second to 300 seconds
      char buffer[20];
      if((TIM4->CNT)>99)
 8000fdc:	4b94      	ldr	r3, [pc, #592]	; (8001230 <main+0x3b4>)
 8000fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe0:	2b63      	cmp	r3, #99	; 0x63
 8000fe2:	d902      	bls.n	8000fea <main+0x16e>
      {
    	  ssd1306_Fill(Black);
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f000 fe5b 	bl	8001ca0 <ssd1306_Fill>
      }
      if((TIM4->CNT)>9)
 8000fea:	4b91      	ldr	r3, [pc, #580]	; (8001230 <main+0x3b4>)
 8000fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fee:	2b09      	cmp	r3, #9
 8000ff0:	d902      	bls.n	8000ff8 <main+0x17c>
            {
          	  ssd1306_Fill(Black);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f000 fe54 	bl	8001ca0 <ssd1306_Fill>
            }
      sprintf(buffer, "Time for ADC: %ds\n", scaledTime);
 8000ff8:	f8b7 2960 	ldrh.w	r2, [r7, #2400]	; 0x960
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	498f      	ldr	r1, [pc, #572]	; (800123c <main+0x3c0>)
 8001000:	4618      	mov	r0, r3
 8001002:	f00a f8ab 	bl	800b15c <siprintf>
      ssd1306_SetCursor(0,0); // Adjust these values according to where you want the text to start
 8001006:	2100      	movs	r1, #0
 8001008:	2000      	movs	r0, #0
 800100a:	f000 ff97 	bl	8001f3c <ssd1306_SetCursor>
      ssd1306_WriteString(buffer, Font_7x10, White); // Replace with your font and color choice
 800100e:	4a8c      	ldr	r2, [pc, #560]	; (8001240 <main+0x3c4>)
 8001010:	1d38      	adds	r0, r7, #4
 8001012:	2301      	movs	r3, #1
 8001014:	ca06      	ldmia	r2, {r1, r2}
 8001016:	f000 ff6b 	bl	8001ef0 <ssd1306_WriteString>
      ssd1306_UpdateScreen();
 800101a:	f000 fe65 	bl	8001ce8 <ssd1306_UpdateScreen>

      HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff f95d 	bl	80002e0 <strlen>
 8001026:	4603      	mov	r3, r0
 8001028:	b29a      	uxth	r2, r3
 800102a:	1d39      	adds	r1, r7, #4
 800102c:	f04f 33ff 	mov.w	r3, #4294967295
 8001030:	487e      	ldr	r0, [pc, #504]	; (800122c <main+0x3b0>)
 8001032:	f008 fc87 	bl	8009944 <HAL_UART_Transmit>

      // ADC
      ADC_CH0_SELECT();
 8001036:	f7ff fe47 	bl	8000cc8 <ADC_CH0_SELECT>
      HAL_ADC_Start(&hadc3);
 800103a:	4882      	ldr	r0, [pc, #520]	; (8001244 <main+0x3c8>)
 800103c:	f002 f846 	bl	80030cc <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc3, 100);
 8001040:	2164      	movs	r1, #100	; 0x64
 8001042:	4880      	ldr	r0, [pc, #512]	; (8001244 <main+0x3c8>)
 8001044:	f002 f940 	bl	80032c8 <HAL_ADC_PollForConversion>
      adcraw0 = HAL_ADC_GetValue(&hadc3);
 8001048:	487e      	ldr	r0, [pc, #504]	; (8001244 <main+0x3c8>)
 800104a:	f002 fa31 	bl	80034b0 <HAL_ADC_GetValue>
 800104e:	f8c7 0974 	str.w	r0, [r7, #2420]	; 0x974
      adcarray0[counterAdc]=adcraw0;
 8001052:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 8001056:	f8d7 297c 	ldr.w	r2, [r7, #2428]	; 0x97c
 800105a:	f8d7 1974 	ldr.w	r1, [r7, #2420]	; 0x974
 800105e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      HAL_ADC_Stop(&hadc3);
 8001062:	4878      	ldr	r0, [pc, #480]	; (8001244 <main+0x3c8>)
 8001064:	f002 f8fc 	bl	8003260 <HAL_ADC_Stop>

      ADC_CH1_SELECT();
 8001068:	f7ff fe58 	bl	8000d1c <ADC_CH1_SELECT>
      HAL_ADC_Start(&hadc3);
 800106c:	4875      	ldr	r0, [pc, #468]	; (8001244 <main+0x3c8>)
 800106e:	f002 f82d 	bl	80030cc <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc3, 100);
 8001072:	2164      	movs	r1, #100	; 0x64
 8001074:	4873      	ldr	r0, [pc, #460]	; (8001244 <main+0x3c8>)
 8001076:	f002 f927 	bl	80032c8 <HAL_ADC_PollForConversion>
      adcraw1 = HAL_ADC_GetValue(&hadc3);
 800107a:	4872      	ldr	r0, [pc, #456]	; (8001244 <main+0x3c8>)
 800107c:	f002 fa18 	bl	80034b0 <HAL_ADC_GetValue>
 8001080:	f8c7 0970 	str.w	r0, [r7, #2416]	; 0x970
      adcarray1[counterAdc]=adcraw0;
 8001084:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8001088:	f8d7 297c 	ldr.w	r2, [r7, #2428]	; 0x97c
 800108c:	f8d7 1974 	ldr.w	r1, [r7, #2420]	; 0x974
 8001090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      HAL_ADC_Stop(&hadc3);
 8001094:	486b      	ldr	r0, [pc, #428]	; (8001244 <main+0x3c8>)
 8001096:	f002 f8e3 	bl	8003260 <HAL_ADC_Stop>

      ADC_CH4_SELECT();
 800109a:	f7ff fe6b 	bl	8000d74 <ADC_CH4_SELECT>
      HAL_ADC_Start(&hadc3);
 800109e:	4869      	ldr	r0, [pc, #420]	; (8001244 <main+0x3c8>)
 80010a0:	f002 f814 	bl	80030cc <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc3, 100);
 80010a4:	2164      	movs	r1, #100	; 0x64
 80010a6:	4867      	ldr	r0, [pc, #412]	; (8001244 <main+0x3c8>)
 80010a8:	f002 f90e 	bl	80032c8 <HAL_ADC_PollForConversion>
      adcraw4 = HAL_ADC_GetValue(&hadc3);
 80010ac:	4865      	ldr	r0, [pc, #404]	; (8001244 <main+0x3c8>)
 80010ae:	f002 f9ff 	bl	80034b0 <HAL_ADC_GetValue>
 80010b2:	f8c7 096c 	str.w	r0, [r7, #2412]	; 0x96c
      adcarray4[counterAdc]=adcraw0;
 80010b6:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80010ba:	f8d7 297c 	ldr.w	r2, [r7, #2428]	; 0x97c
 80010be:	f8d7 1974 	ldr.w	r1, [r7, #2420]	; 0x974
 80010c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      HAL_ADC_Stop(&hadc3);
 80010c6:	485f      	ldr	r0, [pc, #380]	; (8001244 <main+0x3c8>)
 80010c8:	f002 f8ca 	bl	8003260 <HAL_ADC_Stop>

      ADC_CH5_SELECT();
 80010cc:	f7ff fe7e 	bl	8000dcc <ADC_CH5_SELECT>
      HAL_ADC_Start(&hadc3);
 80010d0:	485c      	ldr	r0, [pc, #368]	; (8001244 <main+0x3c8>)
 80010d2:	f001 fffb 	bl	80030cc <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc3, 100);
 80010d6:	2164      	movs	r1, #100	; 0x64
 80010d8:	485a      	ldr	r0, [pc, #360]	; (8001244 <main+0x3c8>)
 80010da:	f002 f8f5 	bl	80032c8 <HAL_ADC_PollForConversion>
      adcraw5 = HAL_ADC_GetValue(&hadc3);
 80010de:	4859      	ldr	r0, [pc, #356]	; (8001244 <main+0x3c8>)
 80010e0:	f002 f9e6 	bl	80034b0 <HAL_ADC_GetValue>
 80010e4:	f8c7 0968 	str.w	r0, [r7, #2408]	; 0x968
      adcarray5[counterAdc]=adcraw0;
 80010e8:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80010ec:	f8d7 297c 	ldr.w	r2, [r7, #2428]	; 0x97c
 80010f0:	f8d7 1974 	ldr.w	r1, [r7, #2420]	; 0x974
 80010f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      HAL_ADC_Stop(&hadc3);
 80010f8:	4852      	ldr	r0, [pc, #328]	; (8001244 <main+0x3c8>)
 80010fa:	f002 f8b1 	bl	8003260 <HAL_ADC_Stop>

      ADC_CH6_SELECT();
 80010fe:	f7ff fe91 	bl	8000e24 <ADC_CH6_SELECT>
      HAL_ADC_Start(&hadc3);
 8001102:	4850      	ldr	r0, [pc, #320]	; (8001244 <main+0x3c8>)
 8001104:	f001 ffe2 	bl	80030cc <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc3, 100);
 8001108:	2164      	movs	r1, #100	; 0x64
 800110a:	484e      	ldr	r0, [pc, #312]	; (8001244 <main+0x3c8>)
 800110c:	f002 f8dc 	bl	80032c8 <HAL_ADC_PollForConversion>
      adcraw6 = HAL_ADC_GetValue(&hadc3);
 8001110:	484c      	ldr	r0, [pc, #304]	; (8001244 <main+0x3c8>)
 8001112:	f002 f9cd 	bl	80034b0 <HAL_ADC_GetValue>
 8001116:	f8c7 0964 	str.w	r0, [r7, #2404]	; 0x964
      adcarray6[counterAdc]=adcraw0;
 800111a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800111e:	f8d7 297c 	ldr.w	r2, [r7, #2428]	; 0x97c
 8001122:	f8d7 1974 	ldr.w	r1, [r7, #2420]	; 0x974
 8001126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      HAL_ADC_Stop(&hadc3);
 800112a:	4846      	ldr	r0, [pc, #280]	; (8001244 <main+0x3c8>)
 800112c:	f002 f898 	bl	8003260 <HAL_ADC_Stop>


      counterAdc++;
 8001130:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 8001134:	3301      	adds	r3, #1
 8001136:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c

      if(counterAdc>100)
 800113a:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 800113e:	2b64      	cmp	r3, #100	; 0x64
 8001140:	dd02      	ble.n	8001148 <main+0x2cc>
      {
    	  counterAdc=0;
 8001142:	2300      	movs	r3, #0
 8001144:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
      }
	  sprintf(adcbuffer0,"\n\r %lu \n\r",adcraw0);
 8001148:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800114c:	f8d7 2974 	ldr.w	r2, [r7, #2420]	; 0x974
 8001150:	493d      	ldr	r1, [pc, #244]	; (8001248 <main+0x3cc>)
 8001152:	4618      	mov	r0, r3
 8001154:	f00a f802 	bl	800b15c <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer0, strlen(adcbuffer0), HAL_MAX_DELAY);
 8001158:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff f8bf 	bl	80002e0 <strlen>
 8001162:	4603      	mov	r3, r0
 8001164:	b29a      	uxth	r2, r3
 8001166:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 800116a:	f04f 33ff 	mov.w	r3, #4294967295
 800116e:	482f      	ldr	r0, [pc, #188]	; (800122c <main+0x3b0>)
 8001170:	f008 fbe8 	bl	8009944 <HAL_UART_Transmit>
	  sprintf(adcbuffer1,"\n\r %2d \n\r",adcraw1);
 8001174:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001178:	f8d7 2970 	ldr.w	r2, [r7, #2416]	; 0x970
 800117c:	4933      	ldr	r1, [pc, #204]	; (800124c <main+0x3d0>)
 800117e:	4618      	mov	r0, r3
 8001180:	f009 ffec 	bl	800b15c <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer1, strlen(adcbuffer1), HAL_MAX_DELAY);
 8001184:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f8a9 	bl	80002e0 <strlen>
 800118e:	4603      	mov	r3, r0
 8001190:	b29a      	uxth	r2, r3
 8001192:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	4824      	ldr	r0, [pc, #144]	; (800122c <main+0x3b0>)
 800119c:	f008 fbd2 	bl	8009944 <HAL_UART_Transmit>
	  sprintf(adcbuffer4,"\n\r %2d \n\r",adcraw4);
 80011a0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80011a4:	f8d7 296c 	ldr.w	r2, [r7, #2412]	; 0x96c
 80011a8:	4928      	ldr	r1, [pc, #160]	; (800124c <main+0x3d0>)
 80011aa:	4618      	mov	r0, r3
 80011ac:	f009 ffd6 	bl	800b15c <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer4, strlen(adcbuffer4), HAL_MAX_DELAY);
 80011b0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f893 	bl	80002e0 <strlen>
 80011ba:	4603      	mov	r3, r0
 80011bc:	b29a      	uxth	r2, r3
 80011be:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	4819      	ldr	r0, [pc, #100]	; (800122c <main+0x3b0>)
 80011c8:	f008 fbbc 	bl	8009944 <HAL_UART_Transmit>
	  sprintf(adcbuffer5,"\n\r %2d \n\r",adcraw5);
 80011cc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80011d0:	f8d7 2968 	ldr.w	r2, [r7, #2408]	; 0x968
 80011d4:	491d      	ldr	r1, [pc, #116]	; (800124c <main+0x3d0>)
 80011d6:	4618      	mov	r0, r3
 80011d8:	f009 ffc0 	bl	800b15c <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer5, strlen(adcbuffer5), HAL_MAX_DELAY);
 80011dc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f87d 	bl	80002e0 <strlen>
 80011e6:	4603      	mov	r3, r0
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	480e      	ldr	r0, [pc, #56]	; (800122c <main+0x3b0>)
 80011f4:	f008 fba6 	bl	8009944 <HAL_UART_Transmit>
	  sprintf(adcbuffer6,"\n\r %2d \n\r",adcraw6);
 80011f8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011fc:	f8d7 2964 	ldr.w	r2, [r7, #2404]	; 0x964
 8001200:	4912      	ldr	r1, [pc, #72]	; (800124c <main+0x3d0>)
 8001202:	4618      	mov	r0, r3
 8001204:	f009 ffaa 	bl	800b15c <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer6, strlen(adcbuffer6), HAL_MAX_DELAY);
 8001208:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f867 	bl	80002e0 <strlen>
 8001212:	4603      	mov	r3, r0
 8001214:	b29a      	uxth	r2, r3
 8001216:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800121a:	e019      	b.n	8001250 <main+0x3d4>
 800121c:	240004ac 	.word	0x240004ac
 8001220:	24000b0c 	.word	0x24000b0c
 8001224:	0800b9e0 	.word	0x0800b9e0
 8001228:	0800b980 	.word	0x0800b980
 800122c:	240004f8 	.word	0x240004f8
 8001230:	40000800 	.word	0x40000800
 8001234:	0800b9a0 	.word	0x0800b9a0
 8001238:	24000a8c 	.word	0x24000a8c
 800123c:	0800b9b4 	.word	0x0800b9b4
 8001240:	24000000 	.word	0x24000000
 8001244:	24000a28 	.word	0x24000a28
 8001248:	0800b9c8 	.word	0x0800b9c8
 800124c:	0800b9d4 	.word	0x0800b9d4
 8001250:	f04f 33ff 	mov.w	r3, #4294967295
 8001254:	4801      	ldr	r0, [pc, #4]	; (800125c <main+0x3e0>)
 8001256:	f008 fb75 	bl	8009944 <HAL_UART_Transmit>
  {
 800125a:	e65a      	b.n	8000f12 <main+0x96>
 800125c:	240004f8 	.word	0x240004f8

08001260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b09c      	sub	sp, #112	; 0x70
 8001264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126a:	224c      	movs	r2, #76	; 0x4c
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f009 ff6c 	bl	800b14c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2220      	movs	r2, #32
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f009 ff66 	bl	800b14c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001280:	2002      	movs	r0, #2
 8001282:	f003 ffbf 	bl	8005204 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	4b37      	ldr	r3, [pc, #220]	; (8001368 <SystemClock_Config+0x108>)
 800128c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128e:	4a36      	ldr	r2, [pc, #216]	; (8001368 <SystemClock_Config+0x108>)
 8001290:	f023 0301 	bic.w	r3, r3, #1
 8001294:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001296:	4b34      	ldr	r3, [pc, #208]	; (8001368 <SystemClock_Config+0x108>)
 8001298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	4b32      	ldr	r3, [pc, #200]	; (800136c <SystemClock_Config+0x10c>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a31      	ldr	r2, [pc, #196]	; (800136c <SystemClock_Config+0x10c>)
 80012a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012aa:	6193      	str	r3, [r2, #24]
 80012ac:	4b2f      	ldr	r3, [pc, #188]	; (800136c <SystemClock_Config+0x10c>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012b8:	bf00      	nop
 80012ba:	4b2c      	ldr	r3, [pc, #176]	; (800136c <SystemClock_Config+0x10c>)
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012c6:	d1f8      	bne.n	80012ba <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_CSI);
 80012c8:	4b29      	ldr	r3, [pc, #164]	; (8001370 <SystemClock_Config+0x110>)
 80012ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012cc:	f023 0303 	bic.w	r3, r3, #3
 80012d0:	4a27      	ldr	r2, [pc, #156]	; (8001370 <SystemClock_Config+0x110>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSI;
 80012d8:	2312      	movs	r3, #18
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80012dc:	2301      	movs	r3, #1
 80012de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e0:	2340      	movs	r3, #64	; 0x40
 80012e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80012e8:	2320      	movs	r3, #32
 80012ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ec:	2302      	movs	r3, #2
 80012ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 80012f0:	2301      	movs	r3, #1
 80012f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012f4:	2301      	movs	r3, #1
 80012f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 37;
 80012f8:	2325      	movs	r3, #37	; 0x25
 80012fa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80012fc:	2302      	movs	r3, #2
 80012fe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001300:	2303      	movs	r3, #3
 8001302:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001304:	2302      	movs	r3, #2
 8001306:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001308:	2308      	movs	r3, #8
 800130a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800130c:	2302      	movs	r3, #2
 800130e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8001310:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001314:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131a:	4618      	mov	r0, r3
 800131c:	f003 ffbc 	bl	8005298 <HAL_RCC_OscConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001326:	f000 fc13 	bl	8001b50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132a:	233f      	movs	r3, #63	; 0x3f
 800132c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800132e:	2303      	movs	r3, #3
 8001330:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800133e:	2300      	movs	r3, #0
 8001340:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	2101      	movs	r1, #1
 800134e:	4618      	mov	r0, r3
 8001350:	f004 fbce 	bl	8005af0 <HAL_RCC_ClockConfig>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800135a:	f000 fbf9 	bl	8001b50 <Error_Handler>
  }
}
 800135e:	bf00      	nop
 8001360:	3770      	adds	r7, #112	; 0x70
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	58000400 	.word	0x58000400
 800136c:	58024800 	.word	0x58024800
 8001370:	58024400 	.word	0x58024400

08001374 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
 8001388:	615a      	str	r2, [r3, #20]
 800138a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 800138c:	4b29      	ldr	r3, [pc, #164]	; (8001434 <MX_ADC3_Init+0xc0>)
 800138e:	4a2a      	ldr	r2, [pc, #168]	; (8001438 <MX_ADC3_Init+0xc4>)
 8001390:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8001392:	4b28      	ldr	r3, [pc, #160]	; (8001434 <MX_ADC3_Init+0xc0>)
 8001394:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001398:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800139a:	4b26      	ldr	r3, [pc, #152]	; (8001434 <MX_ADC3_Init+0xc0>)
 800139c:	2208      	movs	r2, #8
 800139e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013a0:	4b24      	ldr	r3, [pc, #144]	; (8001434 <MX_ADC3_Init+0xc0>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013a6:	4b23      	ldr	r3, [pc, #140]	; (8001434 <MX_ADC3_Init+0xc0>)
 80013a8:	2204      	movs	r2, #4
 80013aa:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80013ac:	4b21      	ldr	r3, [pc, #132]	; (8001434 <MX_ADC3_Init+0xc0>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80013b2:	4b20      	ldr	r3, [pc, #128]	; (8001434 <MX_ADC3_Init+0xc0>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80013b8:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <MX_ADC3_Init+0xc0>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013be:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <MX_ADC3_Init+0xc0>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013c4:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <MX_ADC3_Init+0xc0>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013ca:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <MX_ADC3_Init+0xc0>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80013d0:	4b18      	ldr	r3, [pc, #96]	; (8001434 <MX_ADC3_Init+0xc0>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013d6:	4b17      	ldr	r3, [pc, #92]	; (8001434 <MX_ADC3_Init+0xc0>)
 80013d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013dc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <MX_ADC3_Init+0xc0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <MX_ADC3_Init+0xc0>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80013ec:	4811      	ldr	r0, [pc, #68]	; (8001434 <MX_ADC3_Init+0xc0>)
 80013ee:	f001 fccd 	bl	8002d8c <HAL_ADC_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 80013f8:	f000 fbaa 	bl	8001b50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013fc:	2301      	movs	r3, #1
 80013fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001400:	2306      	movs	r3, #6
 8001402:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001404:	2301      	movs	r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001408:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800140c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800140e:	2304      	movs	r3, #4
 8001410:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	4619      	mov	r1, r3
 800141a:	4806      	ldr	r0, [pc, #24]	; (8001434 <MX_ADC3_Init+0xc0>)
 800141c:	f002 f856 	bl	80034cc <HAL_ADC_ConfigChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8001426:	f000 fb93 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	3720      	adds	r7, #32
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	24000a28 	.word	0x24000a28
 8001438:	58026000 	.word	0x58026000

0800143c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <MX_I2C1_Init+0x74>)
 8001442:	4a1c      	ldr	r2, [pc, #112]	; (80014b4 <MX_I2C1_Init+0x78>)
 8001444:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B0DCFB;
 8001446:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <MX_I2C1_Init+0x74>)
 8001448:	4a1b      	ldr	r2, [pc, #108]	; (80014b8 <MX_I2C1_Init+0x7c>)
 800144a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800144c:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <MX_I2C1_Init+0x74>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001452:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <MX_I2C1_Init+0x74>)
 8001454:	2201      	movs	r2, #1
 8001456:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <MX_I2C1_Init+0x74>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800145e:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <MX_I2C1_Init+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <MX_I2C1_Init+0x74>)
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800146a:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <MX_I2C1_Init+0x74>)
 800146c:	2200      	movs	r2, #0
 800146e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <MX_I2C1_Init+0x74>)
 8001472:	2200      	movs	r2, #0
 8001474:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001476:	480e      	ldr	r0, [pc, #56]	; (80014b0 <MX_I2C1_Init+0x74>)
 8001478:	f003 f8ee 	bl	8004658 <HAL_I2C_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001482:	f000 fb65 	bl	8001b50 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001486:	2100      	movs	r1, #0
 8001488:	4809      	ldr	r0, [pc, #36]	; (80014b0 <MX_I2C1_Init+0x74>)
 800148a:	f003 fcdb 	bl	8004e44 <HAL_I2CEx_ConfigAnalogFilter>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001494:	f000 fb5c 	bl	8001b50 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001498:	2100      	movs	r1, #0
 800149a:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_I2C1_Init+0x74>)
 800149c:	f003 fd1d 	bl	8004eda <HAL_I2CEx_ConfigDigitalFilter>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014a6:	f000 fb53 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	24000588 	.word	0x24000588
 80014b4:	40005400 	.word	0x40005400
 80014b8:	10b0dcfb 	.word	0x10b0dcfb

080014bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c2:	f107 0310 	add.w	r3, r7, #16
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014da:	4b20      	ldr	r3, [pc, #128]	; (800155c <MX_TIM1_Init+0xa0>)
 80014dc:	4a20      	ldr	r2, [pc, #128]	; (8001560 <MX_TIM1_Init+0xa4>)
 80014de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014e0:	4b1e      	ldr	r3, [pc, #120]	; (800155c <MX_TIM1_Init+0xa0>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e6:	4b1d      	ldr	r3, [pc, #116]	; (800155c <MX_TIM1_Init+0xa0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <MX_TIM1_Init+0xa0>)
 80014ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f4:	4b19      	ldr	r3, [pc, #100]	; (800155c <MX_TIM1_Init+0xa0>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014fa:	4b18      	ldr	r3, [pc, #96]	; (800155c <MX_TIM1_Init+0xa0>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001500:	4b16      	ldr	r3, [pc, #88]	; (800155c <MX_TIM1_Init+0xa0>)
 8001502:	2200      	movs	r2, #0
 8001504:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001506:	4815      	ldr	r0, [pc, #84]	; (800155c <MX_TIM1_Init+0xa0>)
 8001508:	f007 f804 	bl	8008514 <HAL_TIM_Base_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001512:	f000 fb1d 	bl	8001b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001516:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800151c:	f107 0310 	add.w	r3, r7, #16
 8001520:	4619      	mov	r1, r3
 8001522:	480e      	ldr	r0, [pc, #56]	; (800155c <MX_TIM1_Init+0xa0>)
 8001524:	f007 fc04 	bl	8008d30 <HAL_TIM_ConfigClockSource>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800152e:	f000 fb0f 	bl	8001b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	4619      	mov	r1, r3
 8001542:	4806      	ldr	r0, [pc, #24]	; (800155c <MX_TIM1_Init+0xa0>)
 8001544:	f008 f920 	bl	8009788 <HAL_TIMEx_MasterConfigSynchronization>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800154e:	f000 faff 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001552:	bf00      	nop
 8001554:	3720      	adds	r7, #32
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	24000ac0 	.word	0x24000ac0
 8001560:	40010000 	.word	0x40010000

08001564 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b088      	sub	sp, #32
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156a:	f107 0310 	add.w	r3, r7, #16
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001582:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <MX_TIM3_Init+0x94>)
 8001584:	4a1d      	ldr	r2, [pc, #116]	; (80015fc <MX_TIM3_Init+0x98>)
 8001586:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <MX_TIM3_Init+0x94>)
 800158a:	2200      	movs	r2, #0
 800158c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158e:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <MX_TIM3_Init+0x94>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <MX_TIM3_Init+0x94>)
 8001596:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800159a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159c:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <MX_TIM3_Init+0x94>)
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <MX_TIM3_Init+0x94>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015a8:	4813      	ldr	r0, [pc, #76]	; (80015f8 <MX_TIM3_Init+0x94>)
 80015aa:	f006 ffb3 	bl	8008514 <HAL_TIM_Base_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80015b4:	f000 facc 	bl	8001b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	4619      	mov	r1, r3
 80015c4:	480c      	ldr	r0, [pc, #48]	; (80015f8 <MX_TIM3_Init+0x94>)
 80015c6:	f007 fbb3 	bl	8008d30 <HAL_TIM_ConfigClockSource>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80015d0:	f000 fabe 	bl	8001b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d4:	2300      	movs	r3, #0
 80015d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	4619      	mov	r1, r3
 80015e0:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_TIM3_Init+0x94>)
 80015e2:	f008 f8d1 	bl	8009788 <HAL_TIMEx_MasterConfigSynchronization>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80015ec:	f000 fab0 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015f0:	bf00      	nop
 80015f2:	3720      	adds	r7, #32
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	240009dc 	.word	0x240009dc
 80015fc:	40000400 	.word	0x40000400

08001600 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08c      	sub	sp, #48	; 0x30
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001606:	f107 030c 	add.w	r3, r7, #12
 800160a:	2224      	movs	r2, #36	; 0x24
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f009 fd9c 	bl	800b14c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001614:	463b      	mov	r3, r7
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800161e:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <MX_TIM4_Init+0xa4>)
 8001620:	4a21      	ldr	r2, [pc, #132]	; (80016a8 <MX_TIM4_Init+0xa8>)
 8001622:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001624:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <MX_TIM4_Init+0xa4>)
 8001626:	2200      	movs	r2, #0
 8001628:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162a:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <MX_TIM4_Init+0xa4>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1024;
 8001630:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <MX_TIM4_Init+0xa4>)
 8001632:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001636:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001638:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <MX_TIM4_Init+0xa4>)
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800163e:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <MX_TIM4_Init+0xa4>)
 8001640:	2280      	movs	r2, #128	; 0x80
 8001642:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001644:	2303      	movs	r3, #3
 8001646:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800164c:	2301      	movs	r3, #1
 800164e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800165c:	2301      	movs	r3, #1
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001660:	2300      	movs	r3, #0
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	4619      	mov	r1, r3
 800166e:	480d      	ldr	r0, [pc, #52]	; (80016a4 <MX_TIM4_Init+0xa4>)
 8001670:	f007 f916 	bl	80088a0 <HAL_TIM_Encoder_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800167a:	f000 fa69 	bl	8001b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001686:	463b      	mov	r3, r7
 8001688:	4619      	mov	r1, r3
 800168a:	4806      	ldr	r0, [pc, #24]	; (80016a4 <MX_TIM4_Init+0xa4>)
 800168c:	f008 f87c 	bl	8009788 <HAL_TIMEx_MasterConfigSynchronization>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001696:	f000 fa5b 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	3730      	adds	r7, #48	; 0x30
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	240004ac 	.word	0x240004ac
 80016a8:	40000800 	.word	0x40000800

080016ac <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
 80016c0:	615a      	str	r2, [r3, #20]
 80016c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80016c4:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <MX_TIM14_Init+0x94>)
 80016c6:	4a1f      	ldr	r2, [pc, #124]	; (8001744 <MX_TIM14_Init+0x98>)
 80016c8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80016ca:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <MX_TIM14_Init+0x94>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <MX_TIM14_Init+0x94>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1024;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <MX_TIM14_Init+0x94>)
 80016d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016dc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016de:	4b18      	ldr	r3, [pc, #96]	; (8001740 <MX_TIM14_Init+0x94>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e4:	4b16      	ldr	r3, [pc, #88]	; (8001740 <MX_TIM14_Init+0x94>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80016ea:	4815      	ldr	r0, [pc, #84]	; (8001740 <MX_TIM14_Init+0x94>)
 80016ec:	f006 ff12 	bl	8008514 <HAL_TIM_Base_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80016f6:	f000 fa2b 	bl	8001b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80016fa:	4811      	ldr	r0, [pc, #68]	; (8001740 <MX_TIM14_Init+0x94>)
 80016fc:	f006 ff61 	bl	80085c2 <HAL_TIM_PWM_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001706:	f000 fa23 	bl	8001b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800170a:	2360      	movs	r3, #96	; 0x60
 800170c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2200      	movs	r2, #0
 800171e:	4619      	mov	r1, r3
 8001720:	4807      	ldr	r0, [pc, #28]	; (8001740 <MX_TIM14_Init+0x94>)
 8001722:	f007 f9f1 	bl	8008b08 <HAL_TIM_PWM_ConfigChannel>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 800172c:	f000 fa10 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001730:	4803      	ldr	r0, [pc, #12]	; (8001740 <MX_TIM14_Init+0x94>)
 8001732:	f000 fdf3 	bl	800231c <HAL_TIM_MspPostInit>

}
 8001736:	bf00      	nop
 8001738:	3720      	adds	r7, #32
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	24000b0c 	.word	0x24000b0c
 8001744:	40002000 	.word	0x40002000

08001748 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800174c:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 800174e:	4a23      	ldr	r2, [pc, #140]	; (80017dc <MX_USART3_UART_Init+0x94>)
 8001750:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001752:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 8001754:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001758:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800175a:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 800176e:	220c      	movs	r2, #12
 8001770:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001778:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 800177a:	2200      	movs	r2, #0
 800177c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800177e:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 8001780:	2200      	movs	r2, #0
 8001782:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001784:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 8001786:	2200      	movs	r2, #0
 8001788:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 800178c:	2200      	movs	r2, #0
 800178e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001790:	4811      	ldr	r0, [pc, #68]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 8001792:	f008 f887 	bl	80098a4 <HAL_UART_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800179c:	f000 f9d8 	bl	8001b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017a0:	2100      	movs	r1, #0
 80017a2:	480d      	ldr	r0, [pc, #52]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 80017a4:	f009 f8b2 	bl	800a90c <HAL_UARTEx_SetTxFifoThreshold>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80017ae:	f000 f9cf 	bl	8001b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017b2:	2100      	movs	r1, #0
 80017b4:	4808      	ldr	r0, [pc, #32]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 80017b6:	f009 f8e7 	bl	800a988 <HAL_UARTEx_SetRxFifoThreshold>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80017c0:	f000 f9c6 	bl	8001b50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 80017c6:	f009 f868 	bl	800a89a <HAL_UARTEx_DisableFifoMode>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80017d0:	f000 f9be 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	240004f8 	.word	0x240004f8
 80017dc:	40004800 	.word	0x40004800

080017e0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80017e4:	4b15      	ldr	r3, [pc, #84]	; (800183c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017e6:	4a16      	ldr	r2, [pc, #88]	; (8001840 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80017e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80017ea:	4b14      	ldr	r3, [pc, #80]	; (800183c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017ec:	2209      	movs	r2, #9
 80017ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017f2:	2202      	movs	r2, #2
 80017f4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017fe:	2202      	movs	r2, #2
 8001800:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001804:	2201      	movs	r2, #1
 8001806:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800180a:	2200      	movs	r2, #0
 800180c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001810:	2200      	movs	r2, #0
 8001812:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001814:	4b09      	ldr	r3, [pc, #36]	; (800183c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001816:	2201      	movs	r2, #1
 8001818:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800181c:	2201      	movs	r2, #1
 800181e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001822:	2200      	movs	r2, #0
 8001824:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001826:	4805      	ldr	r0, [pc, #20]	; (800183c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001828:	f003 fba3 	bl	8004f72 <HAL_PCD_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001832:	f000 f98d 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	240005d4 	.word	0x240005d4
 8001840:	40080000 	.word	0x40080000

08001844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08e      	sub	sp, #56	; 0x38
 8001848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
 8001858:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800185a:	4bb5      	ldr	r3, [pc, #724]	; (8001b30 <MX_GPIO_Init+0x2ec>)
 800185c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001860:	4ab3      	ldr	r2, [pc, #716]	; (8001b30 <MX_GPIO_Init+0x2ec>)
 8001862:	f043 0310 	orr.w	r3, r3, #16
 8001866:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800186a:	4bb1      	ldr	r3, [pc, #708]	; (8001b30 <MX_GPIO_Init+0x2ec>)
 800186c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001870:	f003 0310 	and.w	r3, r3, #16
 8001874:	623b      	str	r3, [r7, #32]
 8001876:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001878:	4bad      	ldr	r3, [pc, #692]	; (8001b30 <MX_GPIO_Init+0x2ec>)
 800187a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800187e:	4aac      	ldr	r2, [pc, #688]	; (8001b30 <MX_GPIO_Init+0x2ec>)
 8001880:	f043 0304 	orr.w	r3, r3, #4
 8001884:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001888:	4ba9      	ldr	r3, [pc, #676]	; (8001b30 <MX_GPIO_Init+0x2ec>)
 800188a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	61fb      	str	r3, [r7, #28]
 8001894:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001896:	4ba6      	ldr	r3, [pc, #664]	; (8001b30 <MX_GPIO_Init+0x2ec>)
 8001898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800189c:	4aa4      	ldr	r2, [pc, #656]	; (8001b30 <MX_GPIO_Init+0x2ec>)
 800189e:	f043 0320 	orr.w	r3, r3, #32
 80018a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018a6:	4ba2      	ldr	r3, [pc, #648]	; (8001b30 <MX_GPIO_Init+0x2ec>)
 80018a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ac:	f003 0320 	and.w	r3, r3, #32
 80018b0:	61bb      	str	r3, [r7, #24]
 80018b2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018b4:	4b9e      	ldr	r3, [pc, #632]	; (8001b30 <MX_GPIO_Init+0x2ec>)
 80018b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ba:	4a9d      	ldr	r2, [pc, #628]	; (8001b30 <MX_GPIO_Init+0x2ec>)
 80018bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018c4:	4b9a      	ldr	r3, [pc, #616]	; (8001b30 <MX_GPIO_Init+0x2ec>)
 80018c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	4b97      	ldr	r3, [pc, #604]	; (8001b30 <MX_GPIO_Init+0x2ec>)
 80018d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d8:	4a95      	ldr	r2, [pc, #596]	; (8001b30 <MX_GPIO_Init+0x2ec>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018e2:	4b93      	ldr	r3, [pc, #588]	; (8001b30 <MX_GPIO_Init+0x2ec>)
 80018e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f0:	4b8f      	ldr	r3, [pc, #572]	; (8001b30 <MX_GPIO_Init+0x2ec>)
 80018f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f6:	4a8e      	ldr	r2, [pc, #568]	; (8001b30 <MX_GPIO_Init+0x2ec>)
 80018f8:	f043 0302 	orr.w	r3, r3, #2
 80018fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001900:	4b8b      	ldr	r3, [pc, #556]	; (8001b30 <MX_GPIO_Init+0x2ec>)
 8001902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800190e:	4b88      	ldr	r3, [pc, #544]	; (8001b30 <MX_GPIO_Init+0x2ec>)
 8001910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001914:	4a86      	ldr	r2, [pc, #536]	; (8001b30 <MX_GPIO_Init+0x2ec>)
 8001916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800191a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800191e:	4b84      	ldr	r3, [pc, #528]	; (8001b30 <MX_GPIO_Init+0x2ec>)
 8001920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800192c:	4b80      	ldr	r3, [pc, #512]	; (8001b30 <MX_GPIO_Init+0x2ec>)
 800192e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001932:	4a7f      	ldr	r2, [pc, #508]	; (8001b30 <MX_GPIO_Init+0x2ec>)
 8001934:	f043 0308 	orr.w	r3, r3, #8
 8001938:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800193c:	4b7c      	ldr	r3, [pc, #496]	; (8001b30 <MX_GPIO_Init+0x2ec>)
 800193e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, RTC_CLK_Pin|RTC_RST_Pin, GPIO_PIN_RESET);
 800194a:	2200      	movs	r2, #0
 800194c:	2106      	movs	r1, #6
 800194e:	4879      	ldr	r0, [pc, #484]	; (8001b34 <MX_GPIO_Init+0x2f0>)
 8001950:	f002 fe68 	bl	8004624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001954:	2200      	movs	r2, #0
 8001956:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800195a:	4877      	ldr	r0, [pc, #476]	; (8001b38 <MX_GPIO_Init+0x2f4>)
 800195c:	f002 fe62 	bl	8004624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001960:	2200      	movs	r2, #0
 8001962:	2140      	movs	r1, #64	; 0x40
 8001964:	4875      	ldr	r0, [pc, #468]	; (8001b3c <MX_GPIO_Init+0x2f8>)
 8001966:	f002 fe5d 	bl	8004624 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800196a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001970:	2303      	movs	r3, #3
 8001972:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197c:	4619      	mov	r1, r3
 800197e:	4870      	ldr	r0, [pc, #448]	; (8001b40 <MX_GPIO_Init+0x2fc>)
 8001980:	f002 fc88 	bl	8004294 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001984:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800198a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800198e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001998:	4619      	mov	r1, r3
 800199a:	486a      	ldr	r0, [pc, #424]	; (8001b44 <MX_GPIO_Init+0x300>)
 800199c:	f002 fc7a 	bl	8004294 <HAL_GPIO_Init>

  /*Configure GPIO pin : RTC_IO_Pin */
  GPIO_InitStruct.Pin = RTC_IO_Pin;
 80019a0:	2301      	movs	r3, #1
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a4:	2300      	movs	r3, #0
 80019a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RTC_IO_GPIO_Port, &GPIO_InitStruct);
 80019ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b0:	4619      	mov	r1, r3
 80019b2:	4860      	ldr	r0, [pc, #384]	; (8001b34 <MX_GPIO_Init+0x2f0>)
 80019b4:	f002 fc6e 	bl	8004294 <HAL_GPIO_Init>

  /*Configure GPIO pins : RTC_CLK_Pin RTC_RST_Pin */
  GPIO_InitStruct.Pin = RTC_CLK_Pin|RTC_RST_Pin;
 80019b8:	2306      	movs	r3, #6
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019bc:	2301      	movs	r3, #1
 80019be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c4:	2300      	movs	r3, #0
 80019c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019cc:	4619      	mov	r1, r3
 80019ce:	4859      	ldr	r0, [pc, #356]	; (8001b34 <MX_GPIO_Init+0x2f0>)
 80019d0:	f002 fc60 	bl	8004294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF4 PF6 PF7 PF8
                           PF11 PF12 PF13 PF14
                           PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80019d4:	f64f 13d0 	movw	r3, #63952	; 0xf9d0
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019da:	2303      	movs	r3, #3
 80019dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e6:	4619      	mov	r1, r3
 80019e8:	4852      	ldr	r0, [pc, #328]	; (8001b34 <MX_GPIO_Init+0x2f0>)
 80019ea:	f002 fc53 	bl	8004294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80019ee:	f641 73f1 	movw	r3, #8177	; 0x1ff1
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019f4:	2303      	movs	r3, #3
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a00:	4619      	mov	r1, r3
 8001a02:	4850      	ldr	r0, [pc, #320]	; (8001b44 <MX_GPIO_Init+0x300>)
 8001a04:	f002 fc46 	bl	8004294 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDC_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a18:	230b      	movs	r3, #11
 8001a1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 8001a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a20:	4619      	mov	r1, r3
 8001a22:	4848      	ldr	r0, [pc, #288]	; (8001b44 <MX_GPIO_Init+0x300>)
 8001a24:	f002 fc36 	bl	8004294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a28:	f248 03ff 	movw	r3, #33023	; 0x80ff
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4842      	ldr	r0, [pc, #264]	; (8001b48 <MX_GPIO_Init+0x304>)
 8001a3e:	f002 fc29 	bl	8004294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB15 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001a42:	f649 4377 	movw	r3, #40055	; 0x9c77
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a54:	4619      	mov	r1, r3
 8001a56:	4838      	ldr	r0, [pc, #224]	; (8001b38 <MX_GPIO_Init+0x2f4>)
 8001a58:	f002 fc1c 	bl	8004294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG8 PG9
                           PG10 PG12 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a5c:	f24d 733f 	movw	r3, #55103	; 0xd73f
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a62:	2303      	movs	r3, #3
 8001a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4832      	ldr	r0, [pc, #200]	; (8001b3c <MX_GPIO_Init+0x2f8>)
 8001a72:	f002 fc0f 	bl	8004294 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	2300      	movs	r3, #0
 8001a86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a88:	230b      	movs	r3, #11
 8001a8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a90:	4619      	mov	r1, r3
 8001a92:	4829      	ldr	r0, [pc, #164]	; (8001b38 <MX_GPIO_Init+0x2f4>)
 8001a94:	f002 fbfe 	bl	8004294 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001a98:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4821      	ldr	r0, [pc, #132]	; (8001b38 <MX_GPIO_Init+0x2f4>)
 8001ab2:	f002 fbef 	bl	8004294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15
 8001ab6:	f64c 43ff 	movw	r3, #52479	; 0xccff
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001abc:	2303      	movs	r3, #3
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4820      	ldr	r0, [pc, #128]	; (8001b4c <MX_GPIO_Init+0x308>)
 8001acc:	f002 fbe2 	bl	8004294 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001ad0:	2340      	movs	r3, #64	; 0x40
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001adc:	2300      	movs	r3, #0
 8001ade:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4815      	ldr	r0, [pc, #84]	; (8001b3c <MX_GPIO_Init+0x2f8>)
 8001ae8:	f002 fbd4 	bl	8004294 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af0:	2300      	movs	r3, #0
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001afc:	4619      	mov	r1, r3
 8001afe:	480f      	ldr	r0, [pc, #60]	; (8001b3c <MX_GPIO_Init+0x2f8>)
 8001b00:	f002 fbc8 	bl	8004294 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001b04:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b16:	230b      	movs	r3, #11
 8001b18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4806      	ldr	r0, [pc, #24]	; (8001b3c <MX_GPIO_Init+0x2f8>)
 8001b22:	f002 fbb7 	bl	8004294 <HAL_GPIO_Init>

}
 8001b26:	bf00      	nop
 8001b28:	3738      	adds	r7, #56	; 0x38
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	58024400 	.word	0x58024400
 8001b34:	58021400 	.word	0x58021400
 8001b38:	58020400 	.word	0x58020400
 8001b3c:	58021800 	.word	0x58021800
 8001b40:	58021000 	.word	0x58021000
 8001b44:	58020800 	.word	0x58020800
 8001b48:	58020000 	.word	0x58020000
 8001b4c:	58020c00 	.word	0x58020c00

08001b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b54:	b672      	cpsid	i
}
 8001b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <Error_Handler+0x8>

08001b5a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af04      	add	r7, sp, #16
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001b72:	f04f 33ff 	mov.w	r3, #4294967295
 8001b76:	9302      	str	r3, [sp, #8]
 8001b78:	2301      	movs	r3, #1
 8001b7a:	9301      	str	r3, [sp, #4]
 8001b7c:	1dfb      	adds	r3, r7, #7
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2301      	movs	r3, #1
 8001b82:	2200      	movs	r2, #0
 8001b84:	2178      	movs	r1, #120	; 0x78
 8001b86:	4803      	ldr	r0, [pc, #12]	; (8001b94 <ssd1306_WriteCommand+0x2c>)
 8001b88:	f002 fdf6 	bl	8004778 <HAL_I2C_Mem_Write>
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	24000588 	.word	0x24000588

08001b98 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af04      	add	r7, sp, #16
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8001baa:	9202      	str	r2, [sp, #8]
 8001bac:	9301      	str	r3, [sp, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	2240      	movs	r2, #64	; 0x40
 8001bb6:	2178      	movs	r1, #120	; 0x78
 8001bb8:	4803      	ldr	r0, [pc, #12]	; (8001bc8 <ssd1306_WriteData+0x30>)
 8001bba:	f002 fddd 	bl	8004778 <HAL_I2C_Mem_Write>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	24000588 	.word	0x24000588

08001bcc <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001bd0:	f7ff ffc3 	bl	8001b5a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001bd4:	2064      	movs	r0, #100	; 0x64
 8001bd6:	f000 fe61 	bl	800289c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f000 f9da 	bl	8001f94 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001be0:	2020      	movs	r0, #32
 8001be2:	f7ff ffc1 	bl	8001b68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001be6:	2000      	movs	r0, #0
 8001be8:	f7ff ffbe 	bl	8001b68 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001bec:	20b0      	movs	r0, #176	; 0xb0
 8001bee:	f7ff ffbb 	bl	8001b68 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001bf2:	20c8      	movs	r0, #200	; 0xc8
 8001bf4:	f7ff ffb8 	bl	8001b68 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f7ff ffb5 	bl	8001b68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001bfe:	2010      	movs	r0, #16
 8001c00:	f7ff ffb2 	bl	8001b68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001c04:	2040      	movs	r0, #64	; 0x40
 8001c06:	f7ff ffaf 	bl	8001b68 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001c0a:	20ff      	movs	r0, #255	; 0xff
 8001c0c:	f000 f9ae 	bl	8001f6c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001c10:	20a1      	movs	r0, #161	; 0xa1
 8001c12:	f7ff ffa9 	bl	8001b68 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001c16:	20a6      	movs	r0, #166	; 0xa6
 8001c18:	f7ff ffa6 	bl	8001b68 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001c1c:	20a8      	movs	r0, #168	; 0xa8
 8001c1e:	f7ff ffa3 	bl	8001b68 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001c22:	203f      	movs	r0, #63	; 0x3f
 8001c24:	f7ff ffa0 	bl	8001b68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001c28:	20a4      	movs	r0, #164	; 0xa4
 8001c2a:	f7ff ff9d 	bl	8001b68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001c2e:	20d3      	movs	r0, #211	; 0xd3
 8001c30:	f7ff ff9a 	bl	8001b68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001c34:	2000      	movs	r0, #0
 8001c36:	f7ff ff97 	bl	8001b68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001c3a:	20d5      	movs	r0, #213	; 0xd5
 8001c3c:	f7ff ff94 	bl	8001b68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001c40:	20f0      	movs	r0, #240	; 0xf0
 8001c42:	f7ff ff91 	bl	8001b68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001c46:	20d9      	movs	r0, #217	; 0xd9
 8001c48:	f7ff ff8e 	bl	8001b68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001c4c:	2022      	movs	r0, #34	; 0x22
 8001c4e:	f7ff ff8b 	bl	8001b68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001c52:	20da      	movs	r0, #218	; 0xda
 8001c54:	f7ff ff88 	bl	8001b68 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001c58:	2012      	movs	r0, #18
 8001c5a:	f7ff ff85 	bl	8001b68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001c5e:	20db      	movs	r0, #219	; 0xdb
 8001c60:	f7ff ff82 	bl	8001b68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001c64:	2020      	movs	r0, #32
 8001c66:	f7ff ff7f 	bl	8001b68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001c6a:	208d      	movs	r0, #141	; 0x8d
 8001c6c:	f7ff ff7c 	bl	8001b68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001c70:	2014      	movs	r0, #20
 8001c72:	f7ff ff79 	bl	8001b68 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001c76:	2001      	movs	r0, #1
 8001c78:	f000 f98c 	bl	8001f94 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f000 f80f 	bl	8001ca0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001c82:	f000 f831 	bl	8001ce8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <ssd1306_Init+0xd0>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001c8c:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <ssd1306_Init+0xd0>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001c92:	4b02      	ldr	r3, [pc, #8]	; (8001c9c <ssd1306_Init+0xd0>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	711a      	strb	r2, [r3, #4]
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	24000498 	.word	0x24000498

08001ca0 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	e00d      	b.n	8001ccc <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <ssd1306_Fill+0x1a>
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	e000      	b.n	8001cbc <ssd1306_Fill+0x1c>
 8001cba:	21ff      	movs	r1, #255	; 0xff
 8001cbc:	4a09      	ldr	r2, [pc, #36]	; (8001ce4 <ssd1306_Fill+0x44>)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	460a      	mov	r2, r1
 8001cc4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd2:	d3ed      	bcc.n	8001cb0 <ssd1306_Fill+0x10>
    }
}
 8001cd4:	bf00      	nop
 8001cd6:	bf00      	nop
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	24000098 	.word	0x24000098

08001ce8 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001cee:	2300      	movs	r3, #0
 8001cf0:	71fb      	strb	r3, [r7, #7]
 8001cf2:	e016      	b.n	8001d22 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	3b50      	subs	r3, #80	; 0x50
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff ff34 	bl	8001b68 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001d00:	2000      	movs	r0, #0
 8001d02:	f7ff ff31 	bl	8001b68 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001d06:	2010      	movs	r0, #16
 8001d08:	f7ff ff2e 	bl	8001b68 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	01db      	lsls	r3, r3, #7
 8001d10:	4a08      	ldr	r2, [pc, #32]	; (8001d34 <ssd1306_UpdateScreen+0x4c>)
 8001d12:	4413      	add	r3, r2
 8001d14:	2180      	movs	r1, #128	; 0x80
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff ff3e 	bl	8001b98 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	71fb      	strb	r3, [r7, #7]
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	2b07      	cmp	r3, #7
 8001d26:	d9e5      	bls.n	8001cf4 <ssd1306_UpdateScreen+0xc>
    }
}
 8001d28:	bf00      	nop
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	24000098 	.word	0x24000098

08001d38 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
 8001d42:	460b      	mov	r3, r1
 8001d44:	71bb      	strb	r3, [r7, #6]
 8001d46:	4613      	mov	r3, r2
 8001d48:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	db3d      	blt.n	8001dce <ssd1306_DrawPixel+0x96>
 8001d52:	79bb      	ldrb	r3, [r7, #6]
 8001d54:	2b3f      	cmp	r3, #63	; 0x3f
 8001d56:	d83a      	bhi.n	8001dce <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001d58:	797b      	ldrb	r3, [r7, #5]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d11a      	bne.n	8001d94 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001d5e:	79fa      	ldrb	r2, [r7, #7]
 8001d60:	79bb      	ldrb	r3, [r7, #6]
 8001d62:	08db      	lsrs	r3, r3, #3
 8001d64:	b2d8      	uxtb	r0, r3
 8001d66:	4603      	mov	r3, r0
 8001d68:	01db      	lsls	r3, r3, #7
 8001d6a:	4413      	add	r3, r2
 8001d6c:	4a1b      	ldr	r2, [pc, #108]	; (8001ddc <ssd1306_DrawPixel+0xa4>)
 8001d6e:	5cd3      	ldrb	r3, [r2, r3]
 8001d70:	b25a      	sxtb	r2, r3
 8001d72:	79bb      	ldrb	r3, [r7, #6]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	2101      	movs	r1, #1
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	b25b      	sxtb	r3, r3
 8001d80:	4313      	orrs	r3, r2
 8001d82:	b259      	sxtb	r1, r3
 8001d84:	79fa      	ldrb	r2, [r7, #7]
 8001d86:	4603      	mov	r3, r0
 8001d88:	01db      	lsls	r3, r3, #7
 8001d8a:	4413      	add	r3, r2
 8001d8c:	b2c9      	uxtb	r1, r1
 8001d8e:	4a13      	ldr	r2, [pc, #76]	; (8001ddc <ssd1306_DrawPixel+0xa4>)
 8001d90:	54d1      	strb	r1, [r2, r3]
 8001d92:	e01d      	b.n	8001dd0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001d94:	79fa      	ldrb	r2, [r7, #7]
 8001d96:	79bb      	ldrb	r3, [r7, #6]
 8001d98:	08db      	lsrs	r3, r3, #3
 8001d9a:	b2d8      	uxtb	r0, r3
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	01db      	lsls	r3, r3, #7
 8001da0:	4413      	add	r3, r2
 8001da2:	4a0e      	ldr	r2, [pc, #56]	; (8001ddc <ssd1306_DrawPixel+0xa4>)
 8001da4:	5cd3      	ldrb	r3, [r2, r3]
 8001da6:	b25a      	sxtb	r2, r3
 8001da8:	79bb      	ldrb	r3, [r7, #6]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	2101      	movs	r1, #1
 8001db0:	fa01 f303 	lsl.w	r3, r1, r3
 8001db4:	b25b      	sxtb	r3, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	b25b      	sxtb	r3, r3
 8001dba:	4013      	ands	r3, r2
 8001dbc:	b259      	sxtb	r1, r3
 8001dbe:	79fa      	ldrb	r2, [r7, #7]
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	01db      	lsls	r3, r3, #7
 8001dc4:	4413      	add	r3, r2
 8001dc6:	b2c9      	uxtb	r1, r1
 8001dc8:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <ssd1306_DrawPixel+0xa4>)
 8001dca:	54d1      	strb	r1, [r2, r3]
 8001dcc:	e000      	b.n	8001dd0 <ssd1306_DrawPixel+0x98>
        return;
 8001dce:	bf00      	nop
    }
}
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	24000098 	.word	0x24000098

08001de0 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001de0:	b590      	push	{r4, r7, lr}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4604      	mov	r4, r0
 8001de8:	1d38      	adds	r0, r7, #4
 8001dea:	e880 0006 	stmia.w	r0, {r1, r2}
 8001dee:	461a      	mov	r2, r3
 8001df0:	4623      	mov	r3, r4
 8001df2:	73fb      	strb	r3, [r7, #15]
 8001df4:	4613      	mov	r3, r2
 8001df6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	2b1f      	cmp	r3, #31
 8001dfc:	d902      	bls.n	8001e04 <ssd1306_WriteChar+0x24>
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
 8001e00:	2b7e      	cmp	r3, #126	; 0x7e
 8001e02:	d901      	bls.n	8001e08 <ssd1306_WriteChar+0x28>
        return 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	e06d      	b.n	8001ee4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001e08:	4b38      	ldr	r3, [pc, #224]	; (8001eec <ssd1306_WriteChar+0x10c>)
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	793b      	ldrb	r3, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	2b80      	cmp	r3, #128	; 0x80
 8001e14:	dc06      	bgt.n	8001e24 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001e16:	4b35      	ldr	r3, [pc, #212]	; (8001eec <ssd1306_WriteChar+0x10c>)
 8001e18:	885b      	ldrh	r3, [r3, #2]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	797b      	ldrb	r3, [r7, #5]
 8001e1e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001e20:	2b40      	cmp	r3, #64	; 0x40
 8001e22:	dd01      	ble.n	8001e28 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	e05d      	b.n	8001ee4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
 8001e2c:	e04c      	b.n	8001ec8 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	3b20      	subs	r3, #32
 8001e34:	7979      	ldrb	r1, [r7, #5]
 8001e36:	fb01 f303 	mul.w	r3, r1, r3
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	440b      	add	r3, r1
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	4413      	add	r3, r2
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61bb      	str	r3, [r7, #24]
 8001e4c:	e034      	b.n	8001eb8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d012      	beq.n	8001e84 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001e5e:	4b23      	ldr	r3, [pc, #140]	; (8001eec <ssd1306_WriteChar+0x10c>)
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	4413      	add	r3, r2
 8001e6a:	b2d8      	uxtb	r0, r3
 8001e6c:	4b1f      	ldr	r3, [pc, #124]	; (8001eec <ssd1306_WriteChar+0x10c>)
 8001e6e:	885b      	ldrh	r3, [r3, #2]
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	4413      	add	r3, r2
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	7bba      	ldrb	r2, [r7, #14]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f7ff ff5b 	bl	8001d38 <ssd1306_DrawPixel>
 8001e82:	e016      	b.n	8001eb2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001e84:	4b19      	ldr	r3, [pc, #100]	; (8001eec <ssd1306_WriteChar+0x10c>)
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	4413      	add	r3, r2
 8001e90:	b2d8      	uxtb	r0, r3
 8001e92:	4b16      	ldr	r3, [pc, #88]	; (8001eec <ssd1306_WriteChar+0x10c>)
 8001e94:	885b      	ldrh	r3, [r3, #2]
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	b2d9      	uxtb	r1, r3
 8001ea0:	7bbb      	ldrb	r3, [r7, #14]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	bf0c      	ite	eq
 8001ea6:	2301      	moveq	r3, #1
 8001ea8:	2300      	movne	r3, #0
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	f7ff ff43 	bl	8001d38 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	61bb      	str	r3, [r7, #24]
 8001eb8:	793b      	ldrb	r3, [r7, #4]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d3c5      	bcc.n	8001e4e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	61fb      	str	r3, [r7, #28]
 8001ec8:	797b      	ldrb	r3, [r7, #5]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d3ad      	bcc.n	8001e2e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <ssd1306_WriteChar+0x10c>)
 8001ed4:	881a      	ldrh	r2, [r3, #0]
 8001ed6:	793b      	ldrb	r3, [r7, #4]
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	4413      	add	r3, r2
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	4b03      	ldr	r3, [pc, #12]	; (8001eec <ssd1306_WriteChar+0x10c>)
 8001ee0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3724      	adds	r7, #36	; 0x24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd90      	pop	{r4, r7, pc}
 8001eec:	24000498 	.word	0x24000498

08001ef0 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	1d38      	adds	r0, r7, #4
 8001efa:	e880 0006 	stmia.w	r0, {r1, r2}
 8001efe:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001f00:	e012      	b.n	8001f28 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	7818      	ldrb	r0, [r3, #0]
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	1d3a      	adds	r2, r7, #4
 8001f0a:	ca06      	ldmia	r2, {r1, r2}
 8001f0c:	f7ff ff68 	bl	8001de0 <ssd1306_WriteChar>
 8001f10:	4603      	mov	r3, r0
 8001f12:	461a      	mov	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d002      	beq.n	8001f22 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	e008      	b.n	8001f34 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	3301      	adds	r3, #1
 8001f26:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1e8      	bne.n	8001f02 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	781b      	ldrb	r3, [r3, #0]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	460a      	mov	r2, r1
 8001f46:	71fb      	strb	r3, [r7, #7]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <ssd1306_SetCursor+0x2c>)
 8001f52:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001f54:	79bb      	ldrb	r3, [r7, #6]
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	4b03      	ldr	r3, [pc, #12]	; (8001f68 <ssd1306_SetCursor+0x2c>)
 8001f5a:	805a      	strh	r2, [r3, #2]
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	24000498 	.word	0x24000498

08001f6c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001f76:	2381      	movs	r3, #129	; 0x81
 8001f78:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fdf3 	bl	8001b68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fdef 	bl	8001b68 <ssd1306_WriteCommand>
}
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001fa4:	23af      	movs	r3, #175	; 0xaf
 8001fa6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001fa8:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <ssd1306_SetDisplayOn+0x38>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	715a      	strb	r2, [r3, #5]
 8001fae:	e004      	b.n	8001fba <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001fb0:	23ae      	movs	r3, #174	; 0xae
 8001fb2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <ssd1306_SetDisplayOn+0x38>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff fdd3 	bl	8001b68 <ssd1306_WriteCommand>
}
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	24000498 	.word	0x24000498

08001fd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <HAL_MspInit+0x30>)
 8001fd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fdc:	4a08      	ldr	r2, [pc, #32]	; (8002000 <HAL_MspInit+0x30>)
 8001fde:	f043 0302 	orr.w	r3, r3, #2
 8001fe2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001fe6:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_MspInit+0x30>)
 8001fe8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	607b      	str	r3, [r7, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	58024400 	.word	0x58024400

08002004 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b0ba      	sub	sp, #232	; 0xe8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800201c:	f107 0318 	add.w	r3, r7, #24
 8002020:	22bc      	movs	r2, #188	; 0xbc
 8002022:	2100      	movs	r1, #0
 8002024:	4618      	mov	r0, r3
 8002026:	f009 f891 	bl	800b14c <memset>
  if(hadc->Instance==ADC3)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a38      	ldr	r2, [pc, #224]	; (8002110 <HAL_ADC_MspInit+0x10c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d169      	bne.n	8002108 <HAL_ADC_MspInit+0x104>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002034:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002038:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 800203a:	2301      	movs	r3, #1
 800203c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 37;
 800203e:	2325      	movs	r3, #37	; 0x25
 8002040:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 1;
 8002042:	2301      	movs	r3, #1
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002046:	2302      	movs	r3, #2
 8002048:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800204a:	2302      	movs	r3, #2
 800204c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002052:	2320      	movs	r3, #32
 8002054:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8002056:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800205a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800205c:	2300      	movs	r3, #0
 800205e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002062:	f107 0318 	add.w	r3, r7, #24
 8002066:	4618      	mov	r0, r3
 8002068:	f004 f8ce 	bl	8006208 <HAL_RCCEx_PeriphCLKConfig>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8002072:	f7ff fd6d 	bl	8001b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002076:	4b27      	ldr	r3, [pc, #156]	; (8002114 <HAL_ADC_MspInit+0x110>)
 8002078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800207c:	4a25      	ldr	r2, [pc, #148]	; (8002114 <HAL_ADC_MspInit+0x110>)
 800207e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002082:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002086:	4b23      	ldr	r3, [pc, #140]	; (8002114 <HAL_ADC_MspInit+0x110>)
 8002088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800208c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002094:	4b1f      	ldr	r3, [pc, #124]	; (8002114 <HAL_ADC_MspInit+0x110>)
 8002096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800209a:	4a1e      	ldr	r2, [pc, #120]	; (8002114 <HAL_ADC_MspInit+0x110>)
 800209c:	f043 0320 	orr.w	r3, r3, #32
 80020a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020a4:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <HAL_ADC_MspInit+0x110>)
 80020a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020aa:	f003 0320 	and.w	r3, r3, #32
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b2:	4b18      	ldr	r3, [pc, #96]	; (8002114 <HAL_ADC_MspInit+0x110>)
 80020b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b8:	4a16      	ldr	r2, [pc, #88]	; (8002114 <HAL_ADC_MspInit+0x110>)
 80020ba:	f043 0304 	orr.w	r3, r3, #4
 80020be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020c2:	4b14      	ldr	r3, [pc, #80]	; (8002114 <HAL_ADC_MspInit+0x110>)
 80020c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	68fb      	ldr	r3, [r7, #12]
    PF5     ------> ADC3_INP4
    PF10     ------> ADC3_INP6
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_10;
 80020d0:	f44f 6385 	mov.w	r3, #1064	; 0x428
 80020d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020d8:	2303      	movs	r3, #3
 80020da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020e8:	4619      	mov	r1, r3
 80020ea:	480b      	ldr	r0, [pc, #44]	; (8002118 <HAL_ADC_MspInit+0x114>)
 80020ec:	f002 f8d2 	bl	8004294 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80020f0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80020f4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80020f8:	f000 fc00 	bl	80028fc <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80020fc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002100:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002104:	f000 fbfa 	bl	80028fc <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002108:	bf00      	nop
 800210a:	37e8      	adds	r7, #232	; 0xe8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	58026000 	.word	0x58026000
 8002114:	58024400 	.word	0x58024400
 8002118:	58021400 	.word	0x58021400

0800211c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b0b8      	sub	sp, #224	; 0xe0
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002124:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002134:	f107 0310 	add.w	r3, r7, #16
 8002138:	22bc      	movs	r2, #188	; 0xbc
 800213a:	2100      	movs	r1, #0
 800213c:	4618      	mov	r0, r3
 800213e:	f009 f805 	bl	800b14c <memset>
  if(hi2c->Instance==I2C1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a25      	ldr	r2, [pc, #148]	; (80021dc <HAL_I2C_MspInit+0xc0>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d143      	bne.n	80021d4 <HAL_I2C_MspInit+0xb8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800214c:	2308      	movs	r3, #8
 800214e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_HSI;
 8002150:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002154:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002158:	f107 0310 	add.w	r3, r7, #16
 800215c:	4618      	mov	r0, r3
 800215e:	f004 f853 	bl	8006208 <HAL_RCCEx_PeriphCLKConfig>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002168:	f7ff fcf2 	bl	8001b50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800216c:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <HAL_I2C_MspInit+0xc4>)
 800216e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002172:	4a1b      	ldr	r2, [pc, #108]	; (80021e0 <HAL_I2C_MspInit+0xc4>)
 8002174:	f043 0302 	orr.w	r3, r3, #2
 8002178:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800217c:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <HAL_I2C_MspInit+0xc4>)
 800217e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800218a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800218e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002192:	2312      	movs	r3, #18
 8002194:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002198:	2301      	movs	r3, #1
 800219a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800219e:	2302      	movs	r3, #2
 80021a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021a4:	2304      	movs	r3, #4
 80021a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021aa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021ae:	4619      	mov	r1, r3
 80021b0:	480c      	ldr	r0, [pc, #48]	; (80021e4 <HAL_I2C_MspInit+0xc8>)
 80021b2:	f002 f86f 	bl	8004294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021b6:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <HAL_I2C_MspInit+0xc4>)
 80021b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021bc:	4a08      	ldr	r2, [pc, #32]	; (80021e0 <HAL_I2C_MspInit+0xc4>)
 80021be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_I2C_MspInit+0xc4>)
 80021c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021d4:	bf00      	nop
 80021d6:	37e0      	adds	r7, #224	; 0xe0
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40005400 	.word	0x40005400
 80021e0:	58024400 	.word	0x58024400
 80021e4:	58020400 	.word	0x58020400

080021e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a20      	ldr	r2, [pc, #128]	; (8002278 <HAL_TIM_Base_MspInit+0x90>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d10f      	bne.n	800221a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021fa:	4b20      	ldr	r3, [pc, #128]	; (800227c <HAL_TIM_Base_MspInit+0x94>)
 80021fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002200:	4a1e      	ldr	r2, [pc, #120]	; (800227c <HAL_TIM_Base_MspInit+0x94>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800220a:	4b1c      	ldr	r3, [pc, #112]	; (800227c <HAL_TIM_Base_MspInit+0x94>)
 800220c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002218:	e028      	b.n	800226c <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM3)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a18      	ldr	r2, [pc, #96]	; (8002280 <HAL_TIM_Base_MspInit+0x98>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d10f      	bne.n	8002244 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002224:	4b15      	ldr	r3, [pc, #84]	; (800227c <HAL_TIM_Base_MspInit+0x94>)
 8002226:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800222a:	4a14      	ldr	r2, [pc, #80]	; (800227c <HAL_TIM_Base_MspInit+0x94>)
 800222c:	f043 0302 	orr.w	r3, r3, #2
 8002230:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_TIM_Base_MspInit+0x94>)
 8002236:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]
}
 8002242:	e013      	b.n	800226c <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM14)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a0e      	ldr	r2, [pc, #56]	; (8002284 <HAL_TIM_Base_MspInit+0x9c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d10e      	bne.n	800226c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800224e:	4b0b      	ldr	r3, [pc, #44]	; (800227c <HAL_TIM_Base_MspInit+0x94>)
 8002250:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002254:	4a09      	ldr	r2, [pc, #36]	; (800227c <HAL_TIM_Base_MspInit+0x94>)
 8002256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800225e:	4b07      	ldr	r3, [pc, #28]	; (800227c <HAL_TIM_Base_MspInit+0x94>)
 8002260:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	68fb      	ldr	r3, [r7, #12]
}
 800226c:	bf00      	nop
 800226e:	371c      	adds	r7, #28
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	40010000 	.word	0x40010000
 800227c:	58024400 	.word	0x58024400
 8002280:	40000400 	.word	0x40000400
 8002284:	40002000 	.word	0x40002000

08002288 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	; 0x28
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a1a      	ldr	r2, [pc, #104]	; (8002310 <HAL_TIM_Encoder_MspInit+0x88>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d12e      	bne.n	8002308 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022aa:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <HAL_TIM_Encoder_MspInit+0x8c>)
 80022ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022b0:	4a18      	ldr	r2, [pc, #96]	; (8002314 <HAL_TIM_Encoder_MspInit+0x8c>)
 80022b2:	f043 0304 	orr.w	r3, r3, #4
 80022b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022ba:	4b16      	ldr	r3, [pc, #88]	; (8002314 <HAL_TIM_Encoder_MspInit+0x8c>)
 80022bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_TIM_Encoder_MspInit+0x8c>)
 80022ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ce:	4a11      	ldr	r2, [pc, #68]	; (8002314 <HAL_TIM_Encoder_MspInit+0x8c>)
 80022d0:	f043 0308 	orr.w	r3, r3, #8
 80022d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022d8:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <HAL_TIM_Encoder_MspInit+0x8c>)
 80022da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80022e6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80022ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ec:	2302      	movs	r3, #2
 80022ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80022f8:	2302      	movs	r3, #2
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	4619      	mov	r1, r3
 8002302:	4805      	ldr	r0, [pc, #20]	; (8002318 <HAL_TIM_Encoder_MspInit+0x90>)
 8002304:	f001 ffc6 	bl	8004294 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002308:	bf00      	nop
 800230a:	3728      	adds	r7, #40	; 0x28
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40000800 	.word	0x40000800
 8002314:	58024400 	.word	0x58024400
 8002318:	58020c00 	.word	0x58020c00

0800231c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b088      	sub	sp, #32
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 030c 	add.w	r3, r7, #12
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM14)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a13      	ldr	r2, [pc, #76]	; (8002388 <HAL_TIM_MspPostInit+0x6c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d11f      	bne.n	800237e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800233e:	4b13      	ldr	r3, [pc, #76]	; (800238c <HAL_TIM_MspPostInit+0x70>)
 8002340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002344:	4a11      	ldr	r2, [pc, #68]	; (800238c <HAL_TIM_MspPostInit+0x70>)
 8002346:	f043 0320 	orr.w	r3, r3, #32
 800234a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <HAL_TIM_MspPostInit+0x70>)
 8002350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002354:	f003 0320 	and.w	r3, r3, #32
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PF9     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800235c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002360:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236a:	2300      	movs	r3, #0
 800236c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800236e:	2309      	movs	r3, #9
 8002370:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002372:	f107 030c 	add.w	r3, r7, #12
 8002376:	4619      	mov	r1, r3
 8002378:	4805      	ldr	r0, [pc, #20]	; (8002390 <HAL_TIM_MspPostInit+0x74>)
 800237a:	f001 ff8b 	bl	8004294 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800237e:	bf00      	nop
 8002380:	3720      	adds	r7, #32
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40002000 	.word	0x40002000
 800238c:	58024400 	.word	0x58024400
 8002390:	58021400 	.word	0x58021400

08002394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b0b8      	sub	sp, #224	; 0xe0
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023ac:	f107 0310 	add.w	r3, r7, #16
 80023b0:	22bc      	movs	r2, #188	; 0xbc
 80023b2:	2100      	movs	r1, #0
 80023b4:	4618      	mov	r0, r3
 80023b6:	f008 fec9 	bl	800b14c <memset>
  if(huart->Instance==USART3)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a25      	ldr	r2, [pc, #148]	; (8002454 <HAL_UART_MspInit+0xc0>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d142      	bne.n	800244a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80023c4:	2302      	movs	r3, #2
 80023c6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ce:	f107 0310 	add.w	r3, r7, #16
 80023d2:	4618      	mov	r0, r3
 80023d4:	f003 ff18 	bl	8006208 <HAL_RCCEx_PeriphCLKConfig>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80023de:	f7ff fbb7 	bl	8001b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023e2:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <HAL_UART_MspInit+0xc4>)
 80023e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023e8:	4a1b      	ldr	r2, [pc, #108]	; (8002458 <HAL_UART_MspInit+0xc4>)
 80023ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023f2:	4b19      	ldr	r3, [pc, #100]	; (8002458 <HAL_UART_MspInit+0xc4>)
 80023f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002400:	4b15      	ldr	r3, [pc, #84]	; (8002458 <HAL_UART_MspInit+0xc4>)
 8002402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002406:	4a14      	ldr	r2, [pc, #80]	; (8002458 <HAL_UART_MspInit+0xc4>)
 8002408:	f043 0308 	orr.w	r3, r3, #8
 800240c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <HAL_UART_MspInit+0xc4>)
 8002412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800241e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002422:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002426:	2302      	movs	r3, #2
 8002428:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242c:	2300      	movs	r3, #0
 800242e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002432:	2300      	movs	r3, #0
 8002434:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002438:	2307      	movs	r3, #7
 800243a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800243e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002442:	4619      	mov	r1, r3
 8002444:	4805      	ldr	r0, [pc, #20]	; (800245c <HAL_UART_MspInit+0xc8>)
 8002446:	f001 ff25 	bl	8004294 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800244a:	bf00      	nop
 800244c:	37e0      	adds	r7, #224	; 0xe0
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40004800 	.word	0x40004800
 8002458:	58024400 	.word	0x58024400
 800245c:	58020c00 	.word	0x58020c00

08002460 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b0b8      	sub	sp, #224	; 0xe0
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002468:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002478:	f107 0310 	add.w	r3, r7, #16
 800247c:	22bc      	movs	r2, #188	; 0xbc
 800247e:	2100      	movs	r1, #0
 8002480:	4618      	mov	r0, r3
 8002482:	f008 fe63 	bl	800b14c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a2f      	ldr	r2, [pc, #188]	; (8002548 <HAL_PCD_MspInit+0xe8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d156      	bne.n	800253e <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002490:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002494:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002496:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800249a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800249e:	f107 0310 	add.w	r3, r7, #16
 80024a2:	4618      	mov	r0, r3
 80024a4:	f003 feb0 	bl	8006208 <HAL_RCCEx_PeriphCLKConfig>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80024ae:	f7ff fb4f 	bl	8001b50 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80024b2:	f002 fee1 	bl	8005278 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b6:	4b25      	ldr	r3, [pc, #148]	; (800254c <HAL_PCD_MspInit+0xec>)
 80024b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024bc:	4a23      	ldr	r2, [pc, #140]	; (800254c <HAL_PCD_MspInit+0xec>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024c6:	4b21      	ldr	r3, [pc, #132]	; (800254c <HAL_PCD_MspInit+0xec>)
 80024c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80024d4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80024d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e8:	2300      	movs	r3, #0
 80024ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80024ee:	230a      	movs	r3, #10
 80024f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024f8:	4619      	mov	r1, r3
 80024fa:	4815      	ldr	r0, [pc, #84]	; (8002550 <HAL_PCD_MspInit+0xf0>)
 80024fc:	f001 feca 	bl	8004294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002500:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002504:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002508:	2300      	movs	r3, #0
 800250a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002514:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002518:	4619      	mov	r1, r3
 800251a:	480d      	ldr	r0, [pc, #52]	; (8002550 <HAL_PCD_MspInit+0xf0>)
 800251c:	f001 feba 	bl	8004294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002520:	4b0a      	ldr	r3, [pc, #40]	; (800254c <HAL_PCD_MspInit+0xec>)
 8002522:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002526:	4a09      	ldr	r2, [pc, #36]	; (800254c <HAL_PCD_MspInit+0xec>)
 8002528:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800252c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_PCD_MspInit+0xec>)
 8002532:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002536:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800253e:	bf00      	nop
 8002540:	37e0      	adds	r7, #224	; 0xe0
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40080000 	.word	0x40080000
 800254c:	58024400 	.word	0x58024400
 8002550:	58020000 	.word	0x58020000

08002554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002558:	e7fe      	b.n	8002558 <NMI_Handler+0x4>

0800255a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800255e:	e7fe      	b.n	800255e <HardFault_Handler+0x4>

08002560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002564:	e7fe      	b.n	8002564 <MemManage_Handler+0x4>

08002566 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800256a:	e7fe      	b.n	800256a <BusFault_Handler+0x4>

0800256c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002570:	e7fe      	b.n	8002570 <UsageFault_Handler+0x4>

08002572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800258e:	b480      	push	{r7}
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025a0:	f000 f95c 	bl	800285c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025b0:	4a14      	ldr	r2, [pc, #80]	; (8002604 <_sbrk+0x5c>)
 80025b2:	4b15      	ldr	r3, [pc, #84]	; (8002608 <_sbrk+0x60>)
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025bc:	4b13      	ldr	r3, [pc, #76]	; (800260c <_sbrk+0x64>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d102      	bne.n	80025ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <_sbrk+0x64>)
 80025c6:	4a12      	ldr	r2, [pc, #72]	; (8002610 <_sbrk+0x68>)
 80025c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <_sbrk+0x64>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4413      	add	r3, r2
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d207      	bcs.n	80025e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025d8:	f008 fd66 	bl	800b0a8 <__errno>
 80025dc:	4603      	mov	r3, r0
 80025de:	220c      	movs	r2, #12
 80025e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025e2:	f04f 33ff 	mov.w	r3, #4294967295
 80025e6:	e009      	b.n	80025fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025e8:	4b08      	ldr	r3, [pc, #32]	; (800260c <_sbrk+0x64>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025ee:	4b07      	ldr	r3, [pc, #28]	; (800260c <_sbrk+0x64>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	4a05      	ldr	r2, [pc, #20]	; (800260c <_sbrk+0x64>)
 80025f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025fa:	68fb      	ldr	r3, [r7, #12]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	24080000 	.word	0x24080000
 8002608:	00000400 	.word	0x00000400
 800260c:	240004a0 	.word	0x240004a0
 8002610:	24000b70 	.word	0x24000b70

08002614 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002618:	4b37      	ldr	r3, [pc, #220]	; (80026f8 <SystemInit+0xe4>)
 800261a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261e:	4a36      	ldr	r2, [pc, #216]	; (80026f8 <SystemInit+0xe4>)
 8002620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002628:	4b34      	ldr	r3, [pc, #208]	; (80026fc <SystemInit+0xe8>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 030f 	and.w	r3, r3, #15
 8002630:	2b06      	cmp	r3, #6
 8002632:	d807      	bhi.n	8002644 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002634:	4b31      	ldr	r3, [pc, #196]	; (80026fc <SystemInit+0xe8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f023 030f 	bic.w	r3, r3, #15
 800263c:	4a2f      	ldr	r2, [pc, #188]	; (80026fc <SystemInit+0xe8>)
 800263e:	f043 0307 	orr.w	r3, r3, #7
 8002642:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002644:	4b2e      	ldr	r3, [pc, #184]	; (8002700 <SystemInit+0xec>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a2d      	ldr	r2, [pc, #180]	; (8002700 <SystemInit+0xec>)
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002650:	4b2b      	ldr	r3, [pc, #172]	; (8002700 <SystemInit+0xec>)
 8002652:	2200      	movs	r2, #0
 8002654:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002656:	4b2a      	ldr	r3, [pc, #168]	; (8002700 <SystemInit+0xec>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	4929      	ldr	r1, [pc, #164]	; (8002700 <SystemInit+0xec>)
 800265c:	4b29      	ldr	r3, [pc, #164]	; (8002704 <SystemInit+0xf0>)
 800265e:	4013      	ands	r3, r2
 8002660:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002662:	4b26      	ldr	r3, [pc, #152]	; (80026fc <SystemInit+0xe8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d007      	beq.n	800267e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800266e:	4b23      	ldr	r3, [pc, #140]	; (80026fc <SystemInit+0xe8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f023 030f 	bic.w	r3, r3, #15
 8002676:	4a21      	ldr	r2, [pc, #132]	; (80026fc <SystemInit+0xe8>)
 8002678:	f043 0307 	orr.w	r3, r3, #7
 800267c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800267e:	4b20      	ldr	r3, [pc, #128]	; (8002700 <SystemInit+0xec>)
 8002680:	2200      	movs	r2, #0
 8002682:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002684:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <SystemInit+0xec>)
 8002686:	2200      	movs	r2, #0
 8002688:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800268a:	4b1d      	ldr	r3, [pc, #116]	; (8002700 <SystemInit+0xec>)
 800268c:	2200      	movs	r2, #0
 800268e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002690:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <SystemInit+0xec>)
 8002692:	4a1d      	ldr	r2, [pc, #116]	; (8002708 <SystemInit+0xf4>)
 8002694:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002696:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <SystemInit+0xec>)
 8002698:	4a1c      	ldr	r2, [pc, #112]	; (800270c <SystemInit+0xf8>)
 800269a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800269c:	4b18      	ldr	r3, [pc, #96]	; (8002700 <SystemInit+0xec>)
 800269e:	4a1c      	ldr	r2, [pc, #112]	; (8002710 <SystemInit+0xfc>)
 80026a0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80026a2:	4b17      	ldr	r3, [pc, #92]	; (8002700 <SystemInit+0xec>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80026a8:	4b15      	ldr	r3, [pc, #84]	; (8002700 <SystemInit+0xec>)
 80026aa:	4a19      	ldr	r2, [pc, #100]	; (8002710 <SystemInit+0xfc>)
 80026ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80026ae:	4b14      	ldr	r3, [pc, #80]	; (8002700 <SystemInit+0xec>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80026b4:	4b12      	ldr	r3, [pc, #72]	; (8002700 <SystemInit+0xec>)
 80026b6:	4a16      	ldr	r2, [pc, #88]	; (8002710 <SystemInit+0xfc>)
 80026b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80026ba:	4b11      	ldr	r3, [pc, #68]	; (8002700 <SystemInit+0xec>)
 80026bc:	2200      	movs	r2, #0
 80026be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026c0:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <SystemInit+0xec>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a0e      	ldr	r2, [pc, #56]	; (8002700 <SystemInit+0xec>)
 80026c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <SystemInit+0xec>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80026d2:	4b10      	ldr	r3, [pc, #64]	; (8002714 <SystemInit+0x100>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	4b10      	ldr	r3, [pc, #64]	; (8002718 <SystemInit+0x104>)
 80026d8:	4013      	ands	r3, r2
 80026da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026de:	d202      	bcs.n	80026e6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80026e0:	4b0e      	ldr	r3, [pc, #56]	; (800271c <SystemInit+0x108>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80026e6:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <SystemInit+0x10c>)
 80026e8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80026ec:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80026ee:	bf00      	nop
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	e000ed00 	.word	0xe000ed00
 80026fc:	52002000 	.word	0x52002000
 8002700:	58024400 	.word	0x58024400
 8002704:	eaf6ed7f 	.word	0xeaf6ed7f
 8002708:	02020200 	.word	0x02020200
 800270c:	01ff0000 	.word	0x01ff0000
 8002710:	01010280 	.word	0x01010280
 8002714:	5c001000 	.word	0x5c001000
 8002718:	ffff0000 	.word	0xffff0000
 800271c:	51008108 	.word	0x51008108
 8002720:	52004000 	.word	0x52004000

08002724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800275c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002728:	f7ff ff74 	bl	8002614 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800272c:	480c      	ldr	r0, [pc, #48]	; (8002760 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800272e:	490d      	ldr	r1, [pc, #52]	; (8002764 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002730:	4a0d      	ldr	r2, [pc, #52]	; (8002768 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002734:	e002      	b.n	800273c <LoopCopyDataInit>

08002736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800273a:	3304      	adds	r3, #4

0800273c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800273c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800273e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002740:	d3f9      	bcc.n	8002736 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002742:	4a0a      	ldr	r2, [pc, #40]	; (800276c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002744:	4c0a      	ldr	r4, [pc, #40]	; (8002770 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002748:	e001      	b.n	800274e <LoopFillZerobss>

0800274a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800274a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800274c:	3204      	adds	r2, #4

0800274e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800274e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002750:	d3fb      	bcc.n	800274a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002752:	f008 fcaf 	bl	800b0b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002756:	f7fe fb91 	bl	8000e7c <main>
  bx  lr
 800275a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800275c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002760:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002764:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8002768:	0800c1d0 	.word	0x0800c1d0
  ldr r2, =_sbss
 800276c:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8002770:	24000b6c 	.word	0x24000b6c

08002774 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002774:	e7fe      	b.n	8002774 <ADC3_IRQHandler>
	...

08002778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800277e:	2003      	movs	r0, #3
 8002780:	f001 fd56 	bl	8004230 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002784:	f003 fb6a 	bl	8005e5c <HAL_RCC_GetSysClockFreq>
 8002788:	4602      	mov	r2, r0
 800278a:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <HAL_Init+0x68>)
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	0a1b      	lsrs	r3, r3, #8
 8002790:	f003 030f 	and.w	r3, r3, #15
 8002794:	4913      	ldr	r1, [pc, #76]	; (80027e4 <HAL_Init+0x6c>)
 8002796:	5ccb      	ldrb	r3, [r1, r3]
 8002798:	f003 031f 	and.w	r3, r3, #31
 800279c:	fa22 f303 	lsr.w	r3, r2, r3
 80027a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027a2:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <HAL_Init+0x68>)
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	4a0e      	ldr	r2, [pc, #56]	; (80027e4 <HAL_Init+0x6c>)
 80027ac:	5cd3      	ldrb	r3, [r2, r3]
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	fa22 f303 	lsr.w	r3, r2, r3
 80027b8:	4a0b      	ldr	r2, [pc, #44]	; (80027e8 <HAL_Init+0x70>)
 80027ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027bc:	4a0b      	ldr	r2, [pc, #44]	; (80027ec <HAL_Init+0x74>)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027c2:	2000      	movs	r0, #0
 80027c4:	f000 f814 	bl	80027f0 <HAL_InitTick>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e002      	b.n	80027d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80027d2:	f7ff fbfd 	bl	8001fd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	58024400 	.word	0x58024400
 80027e4:	0800c154 	.word	0x0800c154
 80027e8:	2400000c 	.word	0x2400000c
 80027ec:	24000008 	.word	0x24000008

080027f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80027f8:	4b15      	ldr	r3, [pc, #84]	; (8002850 <HAL_InitTick+0x60>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e021      	b.n	8002848 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002804:	4b13      	ldr	r3, [pc, #76]	; (8002854 <HAL_InitTick+0x64>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4b11      	ldr	r3, [pc, #68]	; (8002850 <HAL_InitTick+0x60>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	4619      	mov	r1, r3
 800280e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002812:	fbb3 f3f1 	udiv	r3, r3, r1
 8002816:	fbb2 f3f3 	udiv	r3, r2, r3
 800281a:	4618      	mov	r0, r3
 800281c:	f001 fd2d 	bl	800427a <HAL_SYSTICK_Config>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e00e      	b.n	8002848 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b0f      	cmp	r3, #15
 800282e:	d80a      	bhi.n	8002846 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002830:	2200      	movs	r2, #0
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	f04f 30ff 	mov.w	r0, #4294967295
 8002838:	f001 fd05 	bl	8004246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800283c:	4a06      	ldr	r2, [pc, #24]	; (8002858 <HAL_InitTick+0x68>)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	e000      	b.n	8002848 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	24000014 	.word	0x24000014
 8002854:	24000008 	.word	0x24000008
 8002858:	24000010 	.word	0x24000010

0800285c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_IncTick+0x20>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_IncTick+0x24>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4413      	add	r3, r2
 800286c:	4a04      	ldr	r2, [pc, #16]	; (8002880 <HAL_IncTick+0x24>)
 800286e:	6013      	str	r3, [r2, #0]
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	24000014 	.word	0x24000014
 8002880:	24000b58 	.word	0x24000b58

08002884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return uwTick;
 8002888:	4b03      	ldr	r3, [pc, #12]	; (8002898 <HAL_GetTick+0x14>)
 800288a:	681b      	ldr	r3, [r3, #0]
}
 800288c:	4618      	mov	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	24000b58 	.word	0x24000b58

0800289c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028a4:	f7ff ffee 	bl	8002884 <HAL_GetTick>
 80028a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b4:	d005      	beq.n	80028c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028b6:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <HAL_Delay+0x44>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4413      	add	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028c2:	bf00      	nop
 80028c4:	f7ff ffde 	bl	8002884 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d8f7      	bhi.n	80028c4 <HAL_Delay+0x28>
  {
  }
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	24000014 	.word	0x24000014

080028e4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80028e8:	4b03      	ldr	r3, [pc, #12]	; (80028f8 <HAL_GetREVID+0x14>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	0c1b      	lsrs	r3, r3, #16
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	5c001000 	.word	0x5c001000

080028fc <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002906:	4b07      	ldr	r3, [pc, #28]	; (8002924 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	43db      	mvns	r3, r3
 800290e:	401a      	ands	r2, r3
 8002910:	4904      	ldr	r1, [pc, #16]	; (8002924 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	4313      	orrs	r3, r2
 8002916:	604b      	str	r3, [r1, #4]
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	58000400 	.word	0x58000400

08002928 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	431a      	orrs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	609a      	str	r2, [r3, #8]
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	609a      	str	r2, [r3, #8]
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002984:	4618      	mov	r0, r3
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
 800299c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	3360      	adds	r3, #96	; 0x60
 80029a2:	461a      	mov	r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	430b      	orrs	r3, r1
 80029be:	431a      	orrs	r2, r3
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80029c4:	bf00      	nop
 80029c6:	371c      	adds	r7, #28
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	fa01 f303 	lsl.w	r3, r1, r3
 80029f0:	431a      	orrs	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	611a      	str	r2, [r3, #16]
}
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b087      	sub	sp, #28
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	3360      	adds	r3, #96	; 0x60
 8002a12:	461a      	mov	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	431a      	orrs	r2, r3
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	601a      	str	r2, [r3, #0]
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	371c      	adds	r7, #28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b087      	sub	sp, #28
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	3330      	adds	r3, #48	; 0x30
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	0a1b      	lsrs	r3, r3, #8
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	4413      	add	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	f003 031f 	and.w	r3, r3, #31
 8002a88:	211f      	movs	r1, #31
 8002a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	401a      	ands	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	0e9b      	lsrs	r3, r3, #26
 8002a96:	f003 011f 	and.w	r1, r3, #31
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f003 031f 	and.w	r3, r3, #31
 8002aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002aaa:	bf00      	nop
 8002aac:	371c      	adds	r7, #28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b087      	sub	sp, #28
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	3314      	adds	r3, #20
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	0e5b      	lsrs	r3, r3, #25
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	4413      	add	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	0d1b      	lsrs	r3, r3, #20
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	2107      	movs	r1, #7
 8002ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	401a      	ands	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	0d1b      	lsrs	r3, r3, #20
 8002af0:	f003 031f 	and.w	r3, r3, #31
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	fa01 f303 	lsl.w	r3, r1, r3
 8002afa:	431a      	orrs	r2, r3
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b00:	bf00      	nop
 8002b02:	371c      	adds	r7, #28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b24:	43db      	mvns	r3, r3
 8002b26:	401a      	ands	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f003 0318 	and.w	r3, r3, #24
 8002b2e:	4908      	ldr	r1, [pc, #32]	; (8002b50 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b30:	40d9      	lsrs	r1, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	400b      	ands	r3, r1
 8002b36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002b42:	bf00      	nop
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	000fffff 	.word	0x000fffff

08002b54 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 031f 	and.w	r3, r3, #31
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	4b04      	ldr	r3, [pc, #16]	; (8002bac <LL_ADC_DisableDeepPowerDown+0x20>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6093      	str	r3, [r2, #8]
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	5fffffc0 	.word	0x5fffffc0

08002bb0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bc4:	d101      	bne.n	8002bca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <LL_ADC_EnableInternalRegulator+0x24>)
 8002be6:	4013      	ands	r3, r2
 8002be8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	6fffffc0 	.word	0x6fffffc0

08002c00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c14:	d101      	bne.n	8002c1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <LL_ADC_Enable+0x24>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	f043 0201 	orr.w	r2, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	7fffffc0 	.word	0x7fffffc0

08002c50 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <LL_ADC_Disable+0x24>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	f043 0202 	orr.w	r2, r3, #2
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	7fffffc0 	.word	0x7fffffc0

08002c78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <LL_ADC_IsEnabled+0x18>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e000      	b.n	8002c92 <LL_ADC_IsEnabled+0x1a>
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d101      	bne.n	8002cb6 <LL_ADC_IsDisableOngoing+0x18>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <LL_ADC_IsDisableOngoing+0x1a>
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <LL_ADC_REG_StartConversion+0x24>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	f043 0204 	orr.w	r2, r3, #4
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	7fffffc0 	.word	0x7fffffc0

08002cec <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <LL_ADC_REG_StopConversion+0x24>)
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	f043 0210 	orr.w	r2, r3, #16
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	7fffffc0 	.word	0x7fffffc0

08002d14 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d101      	bne.n	8002d2c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
	...

08002d3c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <LL_ADC_INJ_StopConversion+0x24>)
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	f043 0220 	orr.w	r2, r3, #32
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	7fffffc0 	.word	0x7fffffc0

08002d64 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d101      	bne.n	8002d7c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e000      	b.n	8002d7e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
	...

08002d8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d8c:	b590      	push	{r4, r7, lr}
 8002d8e:	b089      	sub	sp, #36	; 0x24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e18e      	b.n	80030c4 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d109      	bne.n	8002dc8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f7ff f925 	bl	8002004 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff feef 	bl	8002bb0 <LL_ADC_IsDeepPowerDownEnabled>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d004      	beq.n	8002de2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fed5 	bl	8002b8c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff ff0a 	bl	8002c00 <LL_ADC_IsInternalRegulatorEnabled>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d114      	bne.n	8002e1c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff feee 	bl	8002bd8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dfc:	4b9a      	ldr	r3, [pc, #616]	; (8003068 <HAL_ADC_Init+0x2dc>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	099b      	lsrs	r3, r3, #6
 8002e02:	4a9a      	ldr	r2, [pc, #616]	; (800306c <HAL_ADC_Init+0x2e0>)
 8002e04:	fba2 2303 	umull	r2, r3, r2, r3
 8002e08:	099b      	lsrs	r3, r3, #6
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e0e:	e002      	b.n	8002e16 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1f9      	bne.n	8002e10 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff feed 	bl	8002c00 <LL_ADC_IsInternalRegulatorEnabled>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10d      	bne.n	8002e48 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e30:	f043 0210 	orr.w	r2, r3, #16
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3c:	f043 0201 	orr.w	r2, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ff61 	bl	8002d14 <LL_ADC_REG_IsConversionOngoing>
 8002e52:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e58:	f003 0310 	and.w	r3, r3, #16
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f040 8128 	bne.w	80030b2 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f040 8124 	bne.w	80030b2 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e72:	f043 0202 	orr.w	r2, r3, #2
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fefa 	bl	8002c78 <LL_ADC_IsEnabled>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d136      	bne.n	8002ef8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a78      	ldr	r2, [pc, #480]	; (8003070 <HAL_ADC_Init+0x2e4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d004      	beq.n	8002e9e <HAL_ADC_Init+0x112>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a76      	ldr	r2, [pc, #472]	; (8003074 <HAL_ADC_Init+0x2e8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d10e      	bne.n	8002ebc <HAL_ADC_Init+0x130>
 8002e9e:	4874      	ldr	r0, [pc, #464]	; (8003070 <HAL_ADC_Init+0x2e4>)
 8002ea0:	f7ff feea 	bl	8002c78 <LL_ADC_IsEnabled>
 8002ea4:	4604      	mov	r4, r0
 8002ea6:	4873      	ldr	r0, [pc, #460]	; (8003074 <HAL_ADC_Init+0x2e8>)
 8002ea8:	f7ff fee6 	bl	8002c78 <LL_ADC_IsEnabled>
 8002eac:	4603      	mov	r3, r0
 8002eae:	4323      	orrs	r3, r4
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	bf0c      	ite	eq
 8002eb4:	2301      	moveq	r3, #1
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	e008      	b.n	8002ece <HAL_ADC_Init+0x142>
 8002ebc:	486e      	ldr	r0, [pc, #440]	; (8003078 <HAL_ADC_Init+0x2ec>)
 8002ebe:	f7ff fedb 	bl	8002c78 <LL_ADC_IsEnabled>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	bf0c      	ite	eq
 8002ec8:	2301      	moveq	r3, #1
 8002eca:	2300      	movne	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d012      	beq.n	8002ef8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a66      	ldr	r2, [pc, #408]	; (8003070 <HAL_ADC_Init+0x2e4>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d004      	beq.n	8002ee6 <HAL_ADC_Init+0x15a>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a64      	ldr	r2, [pc, #400]	; (8003074 <HAL_ADC_Init+0x2e8>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d101      	bne.n	8002eea <HAL_ADC_Init+0x15e>
 8002ee6:	4a65      	ldr	r2, [pc, #404]	; (800307c <HAL_ADC_Init+0x2f0>)
 8002ee8:	e000      	b.n	8002eec <HAL_ADC_Init+0x160>
 8002eea:	4a65      	ldr	r2, [pc, #404]	; (8003080 <HAL_ADC_Init+0x2f4>)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4610      	mov	r0, r2
 8002ef4:	f7ff fd18 	bl	8002928 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002ef8:	f7ff fcf4 	bl	80028e4 <HAL_GetREVID>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d914      	bls.n	8002f30 <HAL_ADC_Init+0x1a4>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2b10      	cmp	r3, #16
 8002f0c:	d110      	bne.n	8002f30 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	7d5b      	ldrb	r3, [r3, #21]
 8002f12:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f18:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f1e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	7f1b      	ldrb	r3, [r3, #28]
 8002f24:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002f26:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f28:	f043 030c 	orr.w	r3, r3, #12
 8002f2c:	61bb      	str	r3, [r7, #24]
 8002f2e:	e00d      	b.n	8002f4c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	7d5b      	ldrb	r3, [r3, #21]
 8002f34:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f3a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f40:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	7f1b      	ldrb	r3, [r3, #28]
 8002f46:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	7f1b      	ldrb	r3, [r3, #28]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d106      	bne.n	8002f62 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	045b      	lsls	r3, r3, #17
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d009      	beq.n	8002f7e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f76:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68da      	ldr	r2, [r3, #12]
 8002f84:	4b3f      	ldr	r3, [pc, #252]	; (8003084 <HAL_ADC_Init+0x2f8>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	69b9      	ldr	r1, [r7, #24]
 8002f8e:	430b      	orrs	r3, r1
 8002f90:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff febc 	bl	8002d14 <LL_ADC_REG_IsConversionOngoing>
 8002f9c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff fede 	bl	8002d64 <LL_ADC_INJ_IsConversionOngoing>
 8002fa8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d14a      	bne.n	8003046 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d147      	bne.n	8003046 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	7d1b      	ldrb	r3, [r3, #20]
 8002fba:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	4b2f      	ldr	r3, [pc, #188]	; (8003088 <HAL_ADC_Init+0x2fc>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6812      	ldr	r2, [r2, #0]
 8002fd2:	69b9      	ldr	r1, [r7, #24]
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d11b      	bne.n	800301a <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691a      	ldr	r2, [r3, #16]
 8002fee:	4b27      	ldr	r3, [pc, #156]	; (800308c <HAL_ADC_Init+0x300>)
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ff6:	3a01      	subs	r2, #1
 8002ff8:	0411      	lsls	r1, r2, #16
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ffe:	4311      	orrs	r1, r2
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003004:	4311      	orrs	r1, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800300a:	430a      	orrs	r2, r1
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	611a      	str	r2, [r3, #16]
 8003018:	e007      	b.n	800302a <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0201 	bic.w	r2, r2, #1
 8003028:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 ff39 	bl	8003eb8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d120      	bne.n	8003090 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003054:	f023 010f 	bic.w	r1, r3, #15
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	1e5a      	subs	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	631a      	str	r2, [r3, #48]	; 0x30
 8003066:	e01b      	b.n	80030a0 <HAL_ADC_Init+0x314>
 8003068:	24000008 	.word	0x24000008
 800306c:	053e2d63 	.word	0x053e2d63
 8003070:	40022000 	.word	0x40022000
 8003074:	40022100 	.word	0x40022100
 8003078:	58026000 	.word	0x58026000
 800307c:	40022300 	.word	0x40022300
 8003080:	58026300 	.word	0x58026300
 8003084:	fff0c003 	.word	0xfff0c003
 8003088:	ffffbffc 	.word	0xffffbffc
 800308c:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 020f 	bic.w	r2, r2, #15
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a4:	f023 0303 	bic.w	r3, r3, #3
 80030a8:	f043 0201 	orr.w	r2, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	655a      	str	r2, [r3, #84]	; 0x54
 80030b0:	e007      	b.n	80030c2 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b6:	f043 0210 	orr.w	r2, r3, #16
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3724      	adds	r7, #36	; 0x24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd90      	pop	{r4, r7, pc}

080030cc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a5c      	ldr	r2, [pc, #368]	; (800324c <HAL_ADC_Start+0x180>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d004      	beq.n	80030e8 <HAL_ADC_Start+0x1c>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a5b      	ldr	r2, [pc, #364]	; (8003250 <HAL_ADC_Start+0x184>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d101      	bne.n	80030ec <HAL_ADC_Start+0x20>
 80030e8:	4b5a      	ldr	r3, [pc, #360]	; (8003254 <HAL_ADC_Start+0x188>)
 80030ea:	e000      	b.n	80030ee <HAL_ADC_Start+0x22>
 80030ec:	4b5a      	ldr	r3, [pc, #360]	; (8003258 <HAL_ADC_Start+0x18c>)
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff fd30 	bl	8002b54 <LL_ADC_GetMultimode>
 80030f4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff fe0a 	bl	8002d14 <LL_ADC_REG_IsConversionOngoing>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	f040 809a 	bne.w	800323c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_ADC_Start+0x4a>
 8003112:	2302      	movs	r3, #2
 8003114:	e095      	b.n	8003242 <HAL_ADC_Start+0x176>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 fde0 	bl	8003ce4 <ADC_Enable>
 8003124:	4603      	mov	r3, r0
 8003126:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003128:	7dfb      	ldrb	r3, [r7, #23]
 800312a:	2b00      	cmp	r3, #0
 800312c:	f040 8081 	bne.w	8003232 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003134:	4b49      	ldr	r3, [pc, #292]	; (800325c <HAL_ADC_Start+0x190>)
 8003136:	4013      	ands	r3, r2
 8003138:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a42      	ldr	r2, [pc, #264]	; (8003250 <HAL_ADC_Start+0x184>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d002      	beq.n	8003150 <HAL_ADC_Start+0x84>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	e000      	b.n	8003152 <HAL_ADC_Start+0x86>
 8003150:	4b3e      	ldr	r3, [pc, #248]	; (800324c <HAL_ADC_Start+0x180>)
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	4293      	cmp	r3, r2
 8003158:	d002      	beq.n	8003160 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d105      	bne.n	800316c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003164:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003170:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003178:	d106      	bne.n	8003188 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317e:	f023 0206 	bic.w	r2, r3, #6
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	659a      	str	r2, [r3, #88]	; 0x58
 8003186:	e002      	b.n	800318e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	221c      	movs	r2, #28
 8003194:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a2b      	ldr	r2, [pc, #172]	; (8003250 <HAL_ADC_Start+0x184>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d002      	beq.n	80031ae <HAL_ADC_Start+0xe2>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	e000      	b.n	80031b0 <HAL_ADC_Start+0xe4>
 80031ae:	4b27      	ldr	r3, [pc, #156]	; (800324c <HAL_ADC_Start+0x180>)
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d008      	beq.n	80031ca <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d005      	beq.n	80031ca <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	2b05      	cmp	r3, #5
 80031c2:	d002      	beq.n	80031ca <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	2b09      	cmp	r3, #9
 80031c8:	d114      	bne.n	80031f4 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d007      	beq.n	80031e8 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff fd69 	bl	8002cc4 <LL_ADC_REG_StartConversion>
 80031f2:	e025      	b.n	8003240 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a12      	ldr	r2, [pc, #72]	; (8003250 <HAL_ADC_Start+0x184>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d002      	beq.n	8003210 <HAL_ADC_Start+0x144>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	e000      	b.n	8003212 <HAL_ADC_Start+0x146>
 8003210:	4b0e      	ldr	r3, [pc, #56]	; (800324c <HAL_ADC_Start+0x180>)
 8003212:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00f      	beq.n	8003240 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003224:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003228:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	655a      	str	r2, [r3, #84]	; 0x54
 8003230:	e006      	b.n	8003240 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800323a:	e001      	b.n	8003240 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800323c:	2302      	movs	r3, #2
 800323e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003240:	7dfb      	ldrb	r3, [r7, #23]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40022000 	.word	0x40022000
 8003250:	40022100 	.word	0x40022100
 8003254:	40022300 	.word	0x40022300
 8003258:	58026300 	.word	0x58026300
 800325c:	fffff0fe 	.word	0xfffff0fe

08003260 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_ADC_Stop+0x16>
 8003272:	2302      	movs	r3, #2
 8003274:	e021      	b.n	80032ba <HAL_ADC_Stop+0x5a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800327e:	2103      	movs	r1, #3
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 fc73 	bl	8003b6c <ADC_ConversionStop>
 8003286:	4603      	mov	r3, r0
 8003288:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800328a:	7bfb      	ldrb	r3, [r7, #15]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10f      	bne.n	80032b0 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 fdb1 	bl	8003df8 <ADC_Disable>
 8003296:	4603      	mov	r3, r0
 8003298:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800329a:	7bfb      	ldrb	r3, [r7, #15]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d107      	bne.n	80032b0 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032a4:	4b07      	ldr	r3, [pc, #28]	; (80032c4 <HAL_ADC_Stop+0x64>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	f043 0201 	orr.w	r2, r3, #1
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	ffffeefe 	.word	0xffffeefe

080032c8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b088      	sub	sp, #32
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a72      	ldr	r2, [pc, #456]	; (80034a0 <HAL_ADC_PollForConversion+0x1d8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d004      	beq.n	80032e6 <HAL_ADC_PollForConversion+0x1e>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a70      	ldr	r2, [pc, #448]	; (80034a4 <HAL_ADC_PollForConversion+0x1dc>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d101      	bne.n	80032ea <HAL_ADC_PollForConversion+0x22>
 80032e6:	4b70      	ldr	r3, [pc, #448]	; (80034a8 <HAL_ADC_PollForConversion+0x1e0>)
 80032e8:	e000      	b.n	80032ec <HAL_ADC_PollForConversion+0x24>
 80032ea:	4b70      	ldr	r3, [pc, #448]	; (80034ac <HAL_ADC_PollForConversion+0x1e4>)
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fc31 	bl	8002b54 <LL_ADC_GetMultimode>
 80032f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d102      	bne.n	8003302 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80032fc:	2308      	movs	r3, #8
 80032fe:	61fb      	str	r3, [r7, #28]
 8003300:	e037      	b.n	8003372 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2b05      	cmp	r3, #5
 800330c:	d002      	beq.n	8003314 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2b09      	cmp	r3, #9
 8003312:	d111      	bne.n	8003338 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d007      	beq.n	8003332 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003326:	f043 0220 	orr.w	r2, r3, #32
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e0b1      	b.n	8003496 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003332:	2304      	movs	r3, #4
 8003334:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003336:	e01c      	b.n	8003372 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a58      	ldr	r2, [pc, #352]	; (80034a0 <HAL_ADC_PollForConversion+0x1d8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d004      	beq.n	800334c <HAL_ADC_PollForConversion+0x84>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a57      	ldr	r2, [pc, #348]	; (80034a4 <HAL_ADC_PollForConversion+0x1dc>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d101      	bne.n	8003350 <HAL_ADC_PollForConversion+0x88>
 800334c:	4b56      	ldr	r3, [pc, #344]	; (80034a8 <HAL_ADC_PollForConversion+0x1e0>)
 800334e:	e000      	b.n	8003352 <HAL_ADC_PollForConversion+0x8a>
 8003350:	4b56      	ldr	r3, [pc, #344]	; (80034ac <HAL_ADC_PollForConversion+0x1e4>)
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff fc0c 	bl	8002b70 <LL_ADC_GetMultiDMATransfer>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d007      	beq.n	800336e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003362:	f043 0220 	orr.w	r2, r3, #32
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e093      	b.n	8003496 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800336e:	2304      	movs	r3, #4
 8003370:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003372:	f7ff fa87 	bl	8002884 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003378:	e021      	b.n	80033be <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003380:	d01d      	beq.n	80033be <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003382:	f7ff fa7f 	bl	8002884 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	d302      	bcc.n	8003398 <HAL_ADC_PollForConversion+0xd0>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d112      	bne.n	80033be <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	4013      	ands	r3, r2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10b      	bne.n	80033be <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033aa:	f043 0204 	orr.w	r2, r3, #4
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e06b      	b.n	8003496 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0d6      	beq.n	800337a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff fb2b 	bl	8002a38 <LL_ADC_REG_IsTriggerSourceSWStart>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d01c      	beq.n	8003422 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	7d5b      	ldrb	r3, [r3, #21]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d118      	bne.n	8003422 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b08      	cmp	r3, #8
 80033fc:	d111      	bne.n	8003422 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003402:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d105      	bne.n	8003422 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341a:	f043 0201 	orr.w	r2, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a1f      	ldr	r2, [pc, #124]	; (80034a4 <HAL_ADC_PollForConversion+0x1dc>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d002      	beq.n	8003432 <HAL_ADC_PollForConversion+0x16a>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	e000      	b.n	8003434 <HAL_ADC_PollForConversion+0x16c>
 8003432:	4b1b      	ldr	r3, [pc, #108]	; (80034a0 <HAL_ADC_PollForConversion+0x1d8>)
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6812      	ldr	r2, [r2, #0]
 8003438:	4293      	cmp	r3, r2
 800343a:	d008      	beq.n	800344e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d005      	beq.n	800344e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2b05      	cmp	r3, #5
 8003446:	d002      	beq.n	800344e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	2b09      	cmp	r3, #9
 800344c:	d104      	bne.n	8003458 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	61bb      	str	r3, [r7, #24]
 8003456:	e00c      	b.n	8003472 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a11      	ldr	r2, [pc, #68]	; (80034a4 <HAL_ADC_PollForConversion+0x1dc>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d002      	beq.n	8003468 <HAL_ADC_PollForConversion+0x1a0>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	e000      	b.n	800346a <HAL_ADC_PollForConversion+0x1a2>
 8003468:	4b0d      	ldr	r3, [pc, #52]	; (80034a0 <HAL_ADC_PollForConversion+0x1d8>)
 800346a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	2b08      	cmp	r3, #8
 8003476:	d104      	bne.n	8003482 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2208      	movs	r2, #8
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	e008      	b.n	8003494 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d103      	bne.n	8003494 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	220c      	movs	r2, #12
 8003492:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3720      	adds	r7, #32
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40022000 	.word	0x40022000
 80034a4:	40022100 	.word	0x40022100
 80034a8:	40022300 	.word	0x40022300
 80034ac:	58026300 	.word	0x58026300

080034b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80034be:	4618      	mov	r0, r3
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
	...

080034cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80034cc:	b590      	push	{r4, r7, lr}
 80034ce:	b0a1      	sub	sp, #132	; 0x84
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034d6:	2300      	movs	r3, #0
 80034d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4a9d      	ldr	r2, [pc, #628]	; (800375c <HAL_ADC_ConfigChannel+0x290>)
 80034e6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d101      	bne.n	80034f6 <HAL_ADC_ConfigChannel+0x2a>
 80034f2:	2302      	movs	r3, #2
 80034f4:	e321      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x66e>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff fc06 	bl	8002d14 <LL_ADC_REG_IsConversionOngoing>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	f040 8306 	bne.w	8003b1c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003518:	2b00      	cmp	r3, #0
 800351a:	d108      	bne.n	800352e <HAL_ADC_ConfigChannel+0x62>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	0e9b      	lsrs	r3, r3, #26
 8003522:	f003 031f 	and.w	r3, r3, #31
 8003526:	2201      	movs	r2, #1
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	e016      	b.n	800355c <HAL_ADC_ConfigChannel+0x90>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003536:	fa93 f3a3 	rbit	r3, r3
 800353a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800353c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800353e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003540:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003546:	2320      	movs	r3, #32
 8003548:	e003      	b.n	8003552 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800354a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800354c:	fab3 f383 	clz	r3, r3
 8003550:	b2db      	uxtb	r3, r3
 8003552:	f003 031f 	and.w	r3, r3, #31
 8003556:	2201      	movs	r2, #1
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6812      	ldr	r2, [r2, #0]
 8003560:	69d1      	ldr	r1, [r2, #28]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6812      	ldr	r2, [r2, #0]
 8003566:	430b      	orrs	r3, r1
 8003568:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	6859      	ldr	r1, [r3, #4]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	f7ff fa71 	bl	8002a5e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff fbc7 	bl	8002d14 <LL_ADC_REG_IsConversionOngoing>
 8003586:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff fbe9 	bl	8002d64 <LL_ADC_INJ_IsConversionOngoing>
 8003592:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003594:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003596:	2b00      	cmp	r3, #0
 8003598:	f040 80b3 	bne.w	8003702 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800359c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f040 80af 	bne.w	8003702 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	6819      	ldr	r1, [r3, #0]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	461a      	mov	r2, r3
 80035b2:	f7ff fa80 	bl	8002ab6 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80035b6:	4b6a      	ldr	r3, [pc, #424]	; (8003760 <HAL_ADC_ConfigChannel+0x294>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80035be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035c2:	d10b      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x110>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	695a      	ldr	r2, [r3, #20]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	089b      	lsrs	r3, r3, #2
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	e01d      	b.n	8003618 <HAL_ADC_ConfigChannel+0x14c>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10b      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x136>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	695a      	ldr	r2, [r3, #20]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	089b      	lsrs	r3, r3, #2
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	e00a      	b.n	8003618 <HAL_ADC_ConfigChannel+0x14c>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	695a      	ldr	r2, [r3, #20]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	089b      	lsrs	r3, r3, #2
 800360e:	f003 0304 	and.w	r3, r3, #4
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b04      	cmp	r3, #4
 8003620:	d027      	beq.n	8003672 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	6919      	ldr	r1, [r3, #16]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003630:	f7ff f9ae 	bl	8002990 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6818      	ldr	r0, [r3, #0]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	6919      	ldr	r1, [r3, #16]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	7e5b      	ldrb	r3, [r3, #25]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d102      	bne.n	800364a <HAL_ADC_ConfigChannel+0x17e>
 8003644:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003648:	e000      	b.n	800364c <HAL_ADC_ConfigChannel+0x180>
 800364a:	2300      	movs	r3, #0
 800364c:	461a      	mov	r2, r3
 800364e:	f7ff f9d8 	bl	8002a02 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	6919      	ldr	r1, [r3, #16]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	7e1b      	ldrb	r3, [r3, #24]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d102      	bne.n	8003668 <HAL_ADC_ConfigChannel+0x19c>
 8003662:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003666:	e000      	b.n	800366a <HAL_ADC_ConfigChannel+0x19e>
 8003668:	2300      	movs	r3, #0
 800366a:	461a      	mov	r2, r3
 800366c:	f7ff f9b0 	bl	80029d0 <LL_ADC_SetDataRightShift>
 8003670:	e047      	b.n	8003702 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003678:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	069b      	lsls	r3, r3, #26
 8003682:	429a      	cmp	r2, r3
 8003684:	d107      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003694:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800369c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	069b      	lsls	r3, r3, #26
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d107      	bne.n	80036ba <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036b8:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	069b      	lsls	r3, r3, #26
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d107      	bne.n	80036de <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036dc:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	069b      	lsls	r3, r3, #26
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d107      	bne.n	8003702 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003700:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff fab6 	bl	8002c78 <LL_ADC_IsEnabled>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	f040 820d 	bne.w	8003b2e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6818      	ldr	r0, [r3, #0]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	6819      	ldr	r1, [r3, #0]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	461a      	mov	r2, r3
 8003722:	f7ff f9f3 	bl	8002b0c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	4a0c      	ldr	r2, [pc, #48]	; (800375c <HAL_ADC_ConfigChannel+0x290>)
 800372c:	4293      	cmp	r3, r2
 800372e:	f040 8133 	bne.w	8003998 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800373e:	2b00      	cmp	r3, #0
 8003740:	d110      	bne.n	8003764 <HAL_ADC_ConfigChannel+0x298>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	0e9b      	lsrs	r3, r3, #26
 8003748:	3301      	adds	r3, #1
 800374a:	f003 031f 	and.w	r3, r3, #31
 800374e:	2b09      	cmp	r3, #9
 8003750:	bf94      	ite	ls
 8003752:	2301      	movls	r3, #1
 8003754:	2300      	movhi	r3, #0
 8003756:	b2db      	uxtb	r3, r3
 8003758:	e01e      	b.n	8003798 <HAL_ADC_ConfigChannel+0x2cc>
 800375a:	bf00      	nop
 800375c:	47ff0000 	.word	0x47ff0000
 8003760:	5c001000 	.word	0x5c001000
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800376c:	fa93 f3a3 	rbit	r3, r3
 8003770:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003774:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800377c:	2320      	movs	r3, #32
 800377e:	e003      	b.n	8003788 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003782:	fab3 f383 	clz	r3, r3
 8003786:	b2db      	uxtb	r3, r3
 8003788:	3301      	adds	r3, #1
 800378a:	f003 031f 	and.w	r3, r3, #31
 800378e:	2b09      	cmp	r3, #9
 8003790:	bf94      	ite	ls
 8003792:	2301      	movls	r3, #1
 8003794:	2300      	movhi	r3, #0
 8003796:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003798:	2b00      	cmp	r3, #0
 800379a:	d079      	beq.n	8003890 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d107      	bne.n	80037b8 <HAL_ADC_ConfigChannel+0x2ec>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	0e9b      	lsrs	r3, r3, #26
 80037ae:	3301      	adds	r3, #1
 80037b0:	069b      	lsls	r3, r3, #26
 80037b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037b6:	e015      	b.n	80037e4 <HAL_ADC_ConfigChannel+0x318>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037c0:	fa93 f3a3 	rbit	r3, r3
 80037c4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80037c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037c8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80037ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80037d0:	2320      	movs	r3, #32
 80037d2:	e003      	b.n	80037dc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80037d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037d6:	fab3 f383 	clz	r3, r3
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	3301      	adds	r3, #1
 80037de:	069b      	lsls	r3, r3, #26
 80037e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d109      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x338>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	0e9b      	lsrs	r3, r3, #26
 80037f6:	3301      	adds	r3, #1
 80037f8:	f003 031f 	and.w	r3, r3, #31
 80037fc:	2101      	movs	r1, #1
 80037fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003802:	e017      	b.n	8003834 <HAL_ADC_ConfigChannel+0x368>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800380c:	fa93 f3a3 	rbit	r3, r3
 8003810:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003814:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 800381c:	2320      	movs	r3, #32
 800381e:	e003      	b.n	8003828 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003822:	fab3 f383 	clz	r3, r3
 8003826:	b2db      	uxtb	r3, r3
 8003828:	3301      	adds	r3, #1
 800382a:	f003 031f 	and.w	r3, r3, #31
 800382e:	2101      	movs	r1, #1
 8003830:	fa01 f303 	lsl.w	r3, r1, r3
 8003834:	ea42 0103 	orr.w	r1, r2, r3
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10a      	bne.n	800385a <HAL_ADC_ConfigChannel+0x38e>
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	0e9b      	lsrs	r3, r3, #26
 800384a:	3301      	adds	r3, #1
 800384c:	f003 021f 	and.w	r2, r3, #31
 8003850:	4613      	mov	r3, r2
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	4413      	add	r3, r2
 8003856:	051b      	lsls	r3, r3, #20
 8003858:	e018      	b.n	800388c <HAL_ADC_ConfigChannel+0x3c0>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003862:	fa93 f3a3 	rbit	r3, r3
 8003866:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800386c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003872:	2320      	movs	r3, #32
 8003874:	e003      	b.n	800387e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003878:	fab3 f383 	clz	r3, r3
 800387c:	b2db      	uxtb	r3, r3
 800387e:	3301      	adds	r3, #1
 8003880:	f003 021f 	and.w	r2, r3, #31
 8003884:	4613      	mov	r3, r2
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	4413      	add	r3, r2
 800388a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800388c:	430b      	orrs	r3, r1
 800388e:	e07e      	b.n	800398e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003898:	2b00      	cmp	r3, #0
 800389a:	d107      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x3e0>
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	0e9b      	lsrs	r3, r3, #26
 80038a2:	3301      	adds	r3, #1
 80038a4:	069b      	lsls	r3, r3, #26
 80038a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038aa:	e015      	b.n	80038d8 <HAL_ADC_ConfigChannel+0x40c>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b4:	fa93 f3a3 	rbit	r3, r3
 80038b8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80038be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80038c4:	2320      	movs	r3, #32
 80038c6:	e003      	b.n	80038d0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80038c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ca:	fab3 f383 	clz	r3, r3
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	3301      	adds	r3, #1
 80038d2:	069b      	lsls	r3, r3, #26
 80038d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d109      	bne.n	80038f8 <HAL_ADC_ConfigChannel+0x42c>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	0e9b      	lsrs	r3, r3, #26
 80038ea:	3301      	adds	r3, #1
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	2101      	movs	r1, #1
 80038f2:	fa01 f303 	lsl.w	r3, r1, r3
 80038f6:	e017      	b.n	8003928 <HAL_ADC_ConfigChannel+0x45c>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	fa93 f3a3 	rbit	r3, r3
 8003904:	61bb      	str	r3, [r7, #24]
  return result;
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800390a:	6a3b      	ldr	r3, [r7, #32]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003910:	2320      	movs	r3, #32
 8003912:	e003      	b.n	800391c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	fab3 f383 	clz	r3, r3
 800391a:	b2db      	uxtb	r3, r3
 800391c:	3301      	adds	r3, #1
 800391e:	f003 031f 	and.w	r3, r3, #31
 8003922:	2101      	movs	r1, #1
 8003924:	fa01 f303 	lsl.w	r3, r1, r3
 8003928:	ea42 0103 	orr.w	r1, r2, r3
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10d      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x488>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	0e9b      	lsrs	r3, r3, #26
 800393e:	3301      	adds	r3, #1
 8003940:	f003 021f 	and.w	r2, r3, #31
 8003944:	4613      	mov	r3, r2
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	4413      	add	r3, r2
 800394a:	3b1e      	subs	r3, #30
 800394c:	051b      	lsls	r3, r3, #20
 800394e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003952:	e01b      	b.n	800398c <HAL_ADC_ConfigChannel+0x4c0>
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	fa93 f3a3 	rbit	r3, r3
 8003960:	60fb      	str	r3, [r7, #12]
  return result;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800396c:	2320      	movs	r3, #32
 800396e:	e003      	b.n	8003978 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	fab3 f383 	clz	r3, r3
 8003976:	b2db      	uxtb	r3, r3
 8003978:	3301      	adds	r3, #1
 800397a:	f003 021f 	and.w	r2, r3, #31
 800397e:	4613      	mov	r3, r2
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	4413      	add	r3, r2
 8003984:	3b1e      	subs	r3, #30
 8003986:	051b      	lsls	r3, r3, #20
 8003988:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800398c:	430b      	orrs	r3, r1
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	6892      	ldr	r2, [r2, #8]
 8003992:	4619      	mov	r1, r3
 8003994:	f7ff f88f 	bl	8002ab6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	f280 80c6 	bge.w	8003b2e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a67      	ldr	r2, [pc, #412]	; (8003b44 <HAL_ADC_ConfigChannel+0x678>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d004      	beq.n	80039b6 <HAL_ADC_ConfigChannel+0x4ea>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a65      	ldr	r2, [pc, #404]	; (8003b48 <HAL_ADC_ConfigChannel+0x67c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d101      	bne.n	80039ba <HAL_ADC_ConfigChannel+0x4ee>
 80039b6:	4b65      	ldr	r3, [pc, #404]	; (8003b4c <HAL_ADC_ConfigChannel+0x680>)
 80039b8:	e000      	b.n	80039bc <HAL_ADC_ConfigChannel+0x4f0>
 80039ba:	4b65      	ldr	r3, [pc, #404]	; (8003b50 <HAL_ADC_ConfigChannel+0x684>)
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fe ffd9 	bl	8002974 <LL_ADC_GetCommonPathInternalCh>
 80039c2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a5e      	ldr	r2, [pc, #376]	; (8003b44 <HAL_ADC_ConfigChannel+0x678>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d004      	beq.n	80039d8 <HAL_ADC_ConfigChannel+0x50c>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a5d      	ldr	r2, [pc, #372]	; (8003b48 <HAL_ADC_ConfigChannel+0x67c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d10e      	bne.n	80039f6 <HAL_ADC_ConfigChannel+0x52a>
 80039d8:	485a      	ldr	r0, [pc, #360]	; (8003b44 <HAL_ADC_ConfigChannel+0x678>)
 80039da:	f7ff f94d 	bl	8002c78 <LL_ADC_IsEnabled>
 80039de:	4604      	mov	r4, r0
 80039e0:	4859      	ldr	r0, [pc, #356]	; (8003b48 <HAL_ADC_ConfigChannel+0x67c>)
 80039e2:	f7ff f949 	bl	8002c78 <LL_ADC_IsEnabled>
 80039e6:	4603      	mov	r3, r0
 80039e8:	4323      	orrs	r3, r4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	bf0c      	ite	eq
 80039ee:	2301      	moveq	r3, #1
 80039f0:	2300      	movne	r3, #0
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	e008      	b.n	8003a08 <HAL_ADC_ConfigChannel+0x53c>
 80039f6:	4857      	ldr	r0, [pc, #348]	; (8003b54 <HAL_ADC_ConfigChannel+0x688>)
 80039f8:	f7ff f93e 	bl	8002c78 <LL_ADC_IsEnabled>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	bf0c      	ite	eq
 8003a02:	2301      	moveq	r3, #1
 8003a04:	2300      	movne	r3, #0
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d07d      	beq.n	8003b08 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a51      	ldr	r2, [pc, #324]	; (8003b58 <HAL_ADC_ConfigChannel+0x68c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d130      	bne.n	8003a78 <HAL_ADC_ConfigChannel+0x5ac>
 8003a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d12b      	bne.n	8003a78 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a4b      	ldr	r2, [pc, #300]	; (8003b54 <HAL_ADC_ConfigChannel+0x688>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	f040 8081 	bne.w	8003b2e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a44      	ldr	r2, [pc, #272]	; (8003b44 <HAL_ADC_ConfigChannel+0x678>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d004      	beq.n	8003a40 <HAL_ADC_ConfigChannel+0x574>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a43      	ldr	r2, [pc, #268]	; (8003b48 <HAL_ADC_ConfigChannel+0x67c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d101      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x578>
 8003a40:	4a42      	ldr	r2, [pc, #264]	; (8003b4c <HAL_ADC_ConfigChannel+0x680>)
 8003a42:	e000      	b.n	8003a46 <HAL_ADC_ConfigChannel+0x57a>
 8003a44:	4a42      	ldr	r2, [pc, #264]	; (8003b50 <HAL_ADC_ConfigChannel+0x684>)
 8003a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4610      	mov	r0, r2
 8003a50:	f7fe ff7d 	bl	800294e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a54:	4b41      	ldr	r3, [pc, #260]	; (8003b5c <HAL_ADC_ConfigChannel+0x690>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	099b      	lsrs	r3, r3, #6
 8003a5a:	4a41      	ldr	r2, [pc, #260]	; (8003b60 <HAL_ADC_ConfigChannel+0x694>)
 8003a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a60:	099b      	lsrs	r3, r3, #6
 8003a62:	3301      	adds	r3, #1
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003a68:	e002      	b.n	8003a70 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f9      	bne.n	8003a6a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a76:	e05a      	b.n	8003b2e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a39      	ldr	r2, [pc, #228]	; (8003b64 <HAL_ADC_ConfigChannel+0x698>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d11e      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x5f4>
 8003a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d119      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a30      	ldr	r2, [pc, #192]	; (8003b54 <HAL_ADC_ConfigChannel+0x688>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d14b      	bne.n	8003b2e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a2a      	ldr	r2, [pc, #168]	; (8003b44 <HAL_ADC_ConfigChannel+0x678>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d004      	beq.n	8003aaa <HAL_ADC_ConfigChannel+0x5de>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a28      	ldr	r2, [pc, #160]	; (8003b48 <HAL_ADC_ConfigChannel+0x67c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d101      	bne.n	8003aae <HAL_ADC_ConfigChannel+0x5e2>
 8003aaa:	4a28      	ldr	r2, [pc, #160]	; (8003b4c <HAL_ADC_ConfigChannel+0x680>)
 8003aac:	e000      	b.n	8003ab0 <HAL_ADC_ConfigChannel+0x5e4>
 8003aae:	4a28      	ldr	r2, [pc, #160]	; (8003b50 <HAL_ADC_ConfigChannel+0x684>)
 8003ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4610      	mov	r0, r2
 8003aba:	f7fe ff48 	bl	800294e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003abe:	e036      	b.n	8003b2e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a28      	ldr	r2, [pc, #160]	; (8003b68 <HAL_ADC_ConfigChannel+0x69c>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d131      	bne.n	8003b2e <HAL_ADC_ConfigChannel+0x662>
 8003aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d12c      	bne.n	8003b2e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a1e      	ldr	r2, [pc, #120]	; (8003b54 <HAL_ADC_ConfigChannel+0x688>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d127      	bne.n	8003b2e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a18      	ldr	r2, [pc, #96]	; (8003b44 <HAL_ADC_ConfigChannel+0x678>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d004      	beq.n	8003af2 <HAL_ADC_ConfigChannel+0x626>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a16      	ldr	r2, [pc, #88]	; (8003b48 <HAL_ADC_ConfigChannel+0x67c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d101      	bne.n	8003af6 <HAL_ADC_ConfigChannel+0x62a>
 8003af2:	4a16      	ldr	r2, [pc, #88]	; (8003b4c <HAL_ADC_ConfigChannel+0x680>)
 8003af4:	e000      	b.n	8003af8 <HAL_ADC_ConfigChannel+0x62c>
 8003af6:	4a16      	ldr	r2, [pc, #88]	; (8003b50 <HAL_ADC_ConfigChannel+0x684>)
 8003af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003afa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003afe:	4619      	mov	r1, r3
 8003b00:	4610      	mov	r0, r2
 8003b02:	f7fe ff24 	bl	800294e <LL_ADC_SetCommonPathInternalCh>
 8003b06:	e012      	b.n	8003b2e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0c:	f043 0220 	orr.w	r2, r3, #32
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003b1a:	e008      	b.n	8003b2e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b20:	f043 0220 	orr.w	r2, r3, #32
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b36:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3784      	adds	r7, #132	; 0x84
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd90      	pop	{r4, r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40022000 	.word	0x40022000
 8003b48:	40022100 	.word	0x40022100
 8003b4c:	40022300 	.word	0x40022300
 8003b50:	58026300 	.word	0x58026300
 8003b54:	58026000 	.word	0x58026000
 8003b58:	cb840000 	.word	0xcb840000
 8003b5c:	24000008 	.word	0x24000008
 8003b60:	053e2d63 	.word	0x053e2d63
 8003b64:	c7520000 	.word	0xc7520000
 8003b68:	cfb80000 	.word	0xcfb80000

08003b6c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b088      	sub	sp, #32
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff f8c6 	bl	8002d14 <LL_ADC_REG_IsConversionOngoing>
 8003b88:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff f8e8 	bl	8002d64 <LL_ADC_INJ_IsConversionOngoing>
 8003b94:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d103      	bne.n	8003ba4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 8098 	beq.w	8003cd4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d02a      	beq.n	8003c08 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	7d5b      	ldrb	r3, [r3, #21]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d126      	bne.n	8003c08 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	7d1b      	ldrb	r3, [r3, #20]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d122      	bne.n	8003c08 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003bc6:	e014      	b.n	8003bf2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	4a45      	ldr	r2, [pc, #276]	; (8003ce0 <ADC_ConversionStop+0x174>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d90d      	bls.n	8003bec <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd4:	f043 0210 	orr.w	r2, r3, #16
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be0:	f043 0201 	orr.w	r2, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e074      	b.n	8003cd6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfc:	2b40      	cmp	r3, #64	; 0x40
 8003bfe:	d1e3      	bne.n	8003bc8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2240      	movs	r2, #64	; 0x40
 8003c06:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d014      	beq.n	8003c38 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff f87e 	bl	8002d14 <LL_ADC_REG_IsConversionOngoing>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00c      	beq.n	8003c38 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff f83b 	bl	8002c9e <LL_ADC_IsDisableOngoing>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d104      	bne.n	8003c38 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff f85a 	bl	8002cec <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d014      	beq.n	8003c68 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff f88e 	bl	8002d64 <LL_ADC_INJ_IsConversionOngoing>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00c      	beq.n	8003c68 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff f823 	bl	8002c9e <LL_ADC_IsDisableOngoing>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d104      	bne.n	8003c68 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff f86a 	bl	8002d3c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d005      	beq.n	8003c7a <ADC_ConversionStop+0x10e>
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	d105      	bne.n	8003c80 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003c74:	230c      	movs	r3, #12
 8003c76:	617b      	str	r3, [r7, #20]
        break;
 8003c78:	e005      	b.n	8003c86 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003c7a:	2308      	movs	r3, #8
 8003c7c:	617b      	str	r3, [r7, #20]
        break;
 8003c7e:	e002      	b.n	8003c86 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003c80:	2304      	movs	r3, #4
 8003c82:	617b      	str	r3, [r7, #20]
        break;
 8003c84:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003c86:	f7fe fdfd 	bl	8002884 <HAL_GetTick>
 8003c8a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c8c:	e01b      	b.n	8003cc6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003c8e:	f7fe fdf9 	bl	8002884 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b05      	cmp	r3, #5
 8003c9a:	d914      	bls.n	8003cc6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00d      	beq.n	8003cc6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cae:	f043 0210 	orr.w	r2, r3, #16
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cba:	f043 0201 	orr.w	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e007      	b.n	8003cd6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1dc      	bne.n	8003c8e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3720      	adds	r7, #32
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	000cdbff 	.word	0x000cdbff

08003ce4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fe ffc1 	bl	8002c78 <LL_ADC_IsEnabled>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d16e      	bne.n	8003dda <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	4b38      	ldr	r3, [pc, #224]	; (8003de4 <ADC_Enable+0x100>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00d      	beq.n	8003d26 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0e:	f043 0210 	orr.w	r2, r3, #16
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1a:	f043 0201 	orr.w	r2, r3, #1
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e05a      	b.n	8003ddc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fe ff7c 	bl	8002c28 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d30:	f7fe fda8 	bl	8002884 <HAL_GetTick>
 8003d34:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a2b      	ldr	r2, [pc, #172]	; (8003de8 <ADC_Enable+0x104>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d004      	beq.n	8003d4a <ADC_Enable+0x66>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a29      	ldr	r2, [pc, #164]	; (8003dec <ADC_Enable+0x108>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d101      	bne.n	8003d4e <ADC_Enable+0x6a>
 8003d4a:	4b29      	ldr	r3, [pc, #164]	; (8003df0 <ADC_Enable+0x10c>)
 8003d4c:	e000      	b.n	8003d50 <ADC_Enable+0x6c>
 8003d4e:	4b29      	ldr	r3, [pc, #164]	; (8003df4 <ADC_Enable+0x110>)
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7fe feff 	bl	8002b54 <LL_ADC_GetMultimode>
 8003d56:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a23      	ldr	r2, [pc, #140]	; (8003dec <ADC_Enable+0x108>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d002      	beq.n	8003d68 <ADC_Enable+0x84>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	e000      	b.n	8003d6a <ADC_Enable+0x86>
 8003d68:	4b1f      	ldr	r3, [pc, #124]	; (8003de8 <ADC_Enable+0x104>)
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6812      	ldr	r2, [r2, #0]
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d02c      	beq.n	8003dcc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d130      	bne.n	8003dda <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d78:	e028      	b.n	8003dcc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fe ff7a 	bl	8002c78 <LL_ADC_IsEnabled>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d104      	bne.n	8003d94 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fe ff4a 	bl	8002c28 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d94:	f7fe fd76 	bl	8002884 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d914      	bls.n	8003dcc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d00d      	beq.n	8003dcc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db4:	f043 0210 	orr.w	r2, r3, #16
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc0:	f043 0201 	orr.w	r2, r3, #1
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e007      	b.n	8003ddc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d1cf      	bne.n	8003d7a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	8000003f 	.word	0x8000003f
 8003de8:	40022000 	.word	0x40022000
 8003dec:	40022100 	.word	0x40022100
 8003df0:	40022300 	.word	0x40022300
 8003df4:	58026300 	.word	0x58026300

08003df8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fe ff4a 	bl	8002c9e <LL_ADC_IsDisableOngoing>
 8003e0a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fe ff31 	bl	8002c78 <LL_ADC_IsEnabled>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d047      	beq.n	8003eac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d144      	bne.n	8003eac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 030d 	and.w	r3, r3, #13
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d10c      	bne.n	8003e4a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7fe ff0b 	bl	8002c50 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2203      	movs	r2, #3
 8003e40:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e42:	f7fe fd1f 	bl	8002884 <HAL_GetTick>
 8003e46:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e48:	e029      	b.n	8003e9e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4e:	f043 0210 	orr.w	r2, r3, #16
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5a:	f043 0201 	orr.w	r2, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e023      	b.n	8003eae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e66:	f7fe fd0d 	bl	8002884 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d914      	bls.n	8003e9e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00d      	beq.n	8003e9e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e86:	f043 0210 	orr.w	r2, r3, #16
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e92:	f043 0201 	orr.w	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e007      	b.n	8003eae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1dc      	bne.n	8003e66 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a79      	ldr	r2, [pc, #484]	; (80040ac <ADC_ConfigureBoostMode+0x1f4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d004      	beq.n	8003ed4 <ADC_ConfigureBoostMode+0x1c>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a78      	ldr	r2, [pc, #480]	; (80040b0 <ADC_ConfigureBoostMode+0x1f8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d109      	bne.n	8003ee8 <ADC_ConfigureBoostMode+0x30>
 8003ed4:	4b77      	ldr	r3, [pc, #476]	; (80040b4 <ADC_ConfigureBoostMode+0x1fc>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	bf14      	ite	ne
 8003ee0:	2301      	movne	r3, #1
 8003ee2:	2300      	moveq	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	e008      	b.n	8003efa <ADC_ConfigureBoostMode+0x42>
 8003ee8:	4b73      	ldr	r3, [pc, #460]	; (80040b8 <ADC_ConfigureBoostMode+0x200>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	bf14      	ite	ne
 8003ef4:	2301      	movne	r3, #1
 8003ef6:	2300      	moveq	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d01c      	beq.n	8003f38 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003efe:	f002 f927 	bl	8006150 <HAL_RCC_GetHCLKFreq>
 8003f02:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f0c:	d010      	beq.n	8003f30 <ADC_ConfigureBoostMode+0x78>
 8003f0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f12:	d871      	bhi.n	8003ff8 <ADC_ConfigureBoostMode+0x140>
 8003f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f18:	d002      	beq.n	8003f20 <ADC_ConfigureBoostMode+0x68>
 8003f1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f1e:	d16b      	bne.n	8003ff8 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	0c1b      	lsrs	r3, r3, #16
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2c:	60fb      	str	r3, [r7, #12]
        break;
 8003f2e:	e066      	b.n	8003ffe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	089b      	lsrs	r3, r3, #2
 8003f34:	60fb      	str	r3, [r7, #12]
        break;
 8003f36:	e062      	b.n	8003ffe <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003f38:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003f3c:	f003 f8a4 	bl	8007088 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f40:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003f4a:	d051      	beq.n	8003ff0 <ADC_ConfigureBoostMode+0x138>
 8003f4c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003f50:	d854      	bhi.n	8003ffc <ADC_ConfigureBoostMode+0x144>
 8003f52:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003f56:	d047      	beq.n	8003fe8 <ADC_ConfigureBoostMode+0x130>
 8003f58:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003f5c:	d84e      	bhi.n	8003ffc <ADC_ConfigureBoostMode+0x144>
 8003f5e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003f62:	d03d      	beq.n	8003fe0 <ADC_ConfigureBoostMode+0x128>
 8003f64:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003f68:	d848      	bhi.n	8003ffc <ADC_ConfigureBoostMode+0x144>
 8003f6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f6e:	d033      	beq.n	8003fd8 <ADC_ConfigureBoostMode+0x120>
 8003f70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f74:	d842      	bhi.n	8003ffc <ADC_ConfigureBoostMode+0x144>
 8003f76:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003f7a:	d029      	beq.n	8003fd0 <ADC_ConfigureBoostMode+0x118>
 8003f7c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003f80:	d83c      	bhi.n	8003ffc <ADC_ConfigureBoostMode+0x144>
 8003f82:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003f86:	d01a      	beq.n	8003fbe <ADC_ConfigureBoostMode+0x106>
 8003f88:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003f8c:	d836      	bhi.n	8003ffc <ADC_ConfigureBoostMode+0x144>
 8003f8e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003f92:	d014      	beq.n	8003fbe <ADC_ConfigureBoostMode+0x106>
 8003f94:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003f98:	d830      	bhi.n	8003ffc <ADC_ConfigureBoostMode+0x144>
 8003f9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f9e:	d00e      	beq.n	8003fbe <ADC_ConfigureBoostMode+0x106>
 8003fa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fa4:	d82a      	bhi.n	8003ffc <ADC_ConfigureBoostMode+0x144>
 8003fa6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003faa:	d008      	beq.n	8003fbe <ADC_ConfigureBoostMode+0x106>
 8003fac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003fb0:	d824      	bhi.n	8003ffc <ADC_ConfigureBoostMode+0x144>
 8003fb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fb6:	d002      	beq.n	8003fbe <ADC_ConfigureBoostMode+0x106>
 8003fb8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003fbc:	d11e      	bne.n	8003ffc <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	0c9b      	lsrs	r3, r3, #18
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fcc:	60fb      	str	r3, [r7, #12]
        break;
 8003fce:	e016      	b.n	8003ffe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	091b      	lsrs	r3, r3, #4
 8003fd4:	60fb      	str	r3, [r7, #12]
        break;
 8003fd6:	e012      	b.n	8003ffe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	095b      	lsrs	r3, r3, #5
 8003fdc:	60fb      	str	r3, [r7, #12]
        break;
 8003fde:	e00e      	b.n	8003ffe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	099b      	lsrs	r3, r3, #6
 8003fe4:	60fb      	str	r3, [r7, #12]
        break;
 8003fe6:	e00a      	b.n	8003ffe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	09db      	lsrs	r3, r3, #7
 8003fec:	60fb      	str	r3, [r7, #12]
        break;
 8003fee:	e006      	b.n	8003ffe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	0a1b      	lsrs	r3, r3, #8
 8003ff4:	60fb      	str	r3, [r7, #12]
        break;
 8003ff6:	e002      	b.n	8003ffe <ADC_ConfigureBoostMode+0x146>
        break;
 8003ff8:	bf00      	nop
 8003ffa:	e000      	b.n	8003ffe <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003ffc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003ffe:	f7fe fc71 	bl	80028e4 <HAL_GetREVID>
 8004002:	4603      	mov	r3, r0
 8004004:	f241 0203 	movw	r2, #4099	; 0x1003
 8004008:	4293      	cmp	r3, r2
 800400a:	d815      	bhi.n	8004038 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4a2b      	ldr	r2, [pc, #172]	; (80040bc <ADC_ConfigureBoostMode+0x204>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d908      	bls.n	8004026 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004022:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004024:	e03e      	b.n	80040a4 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004034:	609a      	str	r2, [r3, #8]
}
 8004036:	e035      	b.n	80040a4 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	085b      	lsrs	r3, r3, #1
 800403c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4a1f      	ldr	r2, [pc, #124]	; (80040c0 <ADC_ConfigureBoostMode+0x208>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d808      	bhi.n	8004058 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004054:	609a      	str	r2, [r3, #8]
}
 8004056:	e025      	b.n	80040a4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4a1a      	ldr	r2, [pc, #104]	; (80040c4 <ADC_ConfigureBoostMode+0x20c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d80a      	bhi.n	8004076 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004072:	609a      	str	r2, [r3, #8]
}
 8004074:	e016      	b.n	80040a4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4a13      	ldr	r2, [pc, #76]	; (80040c8 <ADC_ConfigureBoostMode+0x210>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d80a      	bhi.n	8004094 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004090:	609a      	str	r2, [r3, #8]
}
 8004092:	e007      	b.n	80040a4 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80040a2:	609a      	str	r2, [r3, #8]
}
 80040a4:	bf00      	nop
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40022000 	.word	0x40022000
 80040b0:	40022100 	.word	0x40022100
 80040b4:	40022300 	.word	0x40022300
 80040b8:	58026300 	.word	0x58026300
 80040bc:	01312d00 	.word	0x01312d00
 80040c0:	005f5e10 	.word	0x005f5e10
 80040c4:	00bebc20 	.word	0x00bebc20
 80040c8:	017d7840 	.word	0x017d7840

080040cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040dc:	4b0b      	ldr	r3, [pc, #44]	; (800410c <__NVIC_SetPriorityGrouping+0x40>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040e8:	4013      	ands	r3, r2
 80040ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80040f4:	4b06      	ldr	r3, [pc, #24]	; (8004110 <__NVIC_SetPriorityGrouping+0x44>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040fa:	4a04      	ldr	r2, [pc, #16]	; (800410c <__NVIC_SetPriorityGrouping+0x40>)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	60d3      	str	r3, [r2, #12]
}
 8004100:	bf00      	nop
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	e000ed00 	.word	0xe000ed00
 8004110:	05fa0000 	.word	0x05fa0000

08004114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004118:	4b04      	ldr	r3, [pc, #16]	; (800412c <__NVIC_GetPriorityGrouping+0x18>)
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	0a1b      	lsrs	r3, r3, #8
 800411e:	f003 0307 	and.w	r3, r3, #7
}
 8004122:	4618      	mov	r0, r3
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	e000ed00 	.word	0xe000ed00

08004130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	4603      	mov	r3, r0
 8004138:	6039      	str	r1, [r7, #0]
 800413a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800413c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004140:	2b00      	cmp	r3, #0
 8004142:	db0a      	blt.n	800415a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	b2da      	uxtb	r2, r3
 8004148:	490c      	ldr	r1, [pc, #48]	; (800417c <__NVIC_SetPriority+0x4c>)
 800414a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800414e:	0112      	lsls	r2, r2, #4
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	440b      	add	r3, r1
 8004154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004158:	e00a      	b.n	8004170 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	b2da      	uxtb	r2, r3
 800415e:	4908      	ldr	r1, [pc, #32]	; (8004180 <__NVIC_SetPriority+0x50>)
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	3b04      	subs	r3, #4
 8004168:	0112      	lsls	r2, r2, #4
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	440b      	add	r3, r1
 800416e:	761a      	strb	r2, [r3, #24]
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	e000e100 	.word	0xe000e100
 8004180:	e000ed00 	.word	0xe000ed00

08004184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004184:	b480      	push	{r7}
 8004186:	b089      	sub	sp, #36	; 0x24
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f1c3 0307 	rsb	r3, r3, #7
 800419e:	2b04      	cmp	r3, #4
 80041a0:	bf28      	it	cs
 80041a2:	2304      	movcs	r3, #4
 80041a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	3304      	adds	r3, #4
 80041aa:	2b06      	cmp	r3, #6
 80041ac:	d902      	bls.n	80041b4 <NVIC_EncodePriority+0x30>
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	3b03      	subs	r3, #3
 80041b2:	e000      	b.n	80041b6 <NVIC_EncodePriority+0x32>
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041b8:	f04f 32ff 	mov.w	r2, #4294967295
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	43da      	mvns	r2, r3
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	401a      	ands	r2, r3
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041cc:	f04f 31ff 	mov.w	r1, #4294967295
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	fa01 f303 	lsl.w	r3, r1, r3
 80041d6:	43d9      	mvns	r1, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041dc:	4313      	orrs	r3, r2
         );
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3724      	adds	r7, #36	; 0x24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
	...

080041ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041fc:	d301      	bcc.n	8004202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041fe:	2301      	movs	r3, #1
 8004200:	e00f      	b.n	8004222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004202:	4a0a      	ldr	r2, [pc, #40]	; (800422c <SysTick_Config+0x40>)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3b01      	subs	r3, #1
 8004208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800420a:	210f      	movs	r1, #15
 800420c:	f04f 30ff 	mov.w	r0, #4294967295
 8004210:	f7ff ff8e 	bl	8004130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004214:	4b05      	ldr	r3, [pc, #20]	; (800422c <SysTick_Config+0x40>)
 8004216:	2200      	movs	r2, #0
 8004218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800421a:	4b04      	ldr	r3, [pc, #16]	; (800422c <SysTick_Config+0x40>)
 800421c:	2207      	movs	r2, #7
 800421e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	e000e010 	.word	0xe000e010

08004230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff ff47 	bl	80040cc <__NVIC_SetPriorityGrouping>
}
 800423e:	bf00      	nop
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b086      	sub	sp, #24
 800424a:	af00      	add	r7, sp, #0
 800424c:	4603      	mov	r3, r0
 800424e:	60b9      	str	r1, [r7, #8]
 8004250:	607a      	str	r2, [r7, #4]
 8004252:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004254:	f7ff ff5e 	bl	8004114 <__NVIC_GetPriorityGrouping>
 8004258:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	68b9      	ldr	r1, [r7, #8]
 800425e:	6978      	ldr	r0, [r7, #20]
 8004260:	f7ff ff90 	bl	8004184 <NVIC_EncodePriority>
 8004264:	4602      	mov	r2, r0
 8004266:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800426a:	4611      	mov	r1, r2
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff ff5f 	bl	8004130 <__NVIC_SetPriority>
}
 8004272:	bf00      	nop
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b082      	sub	sp, #8
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7ff ffb2 	bl	80041ec <SysTick_Config>
 8004288:	4603      	mov	r3, r0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
	...

08004294 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004294:	b480      	push	{r7}
 8004296:	b089      	sub	sp, #36	; 0x24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800429e:	2300      	movs	r3, #0
 80042a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80042a2:	4b89      	ldr	r3, [pc, #548]	; (80044c8 <HAL_GPIO_Init+0x234>)
 80042a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80042a6:	e194      	b.n	80045d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	2101      	movs	r1, #1
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	fa01 f303 	lsl.w	r3, r1, r3
 80042b4:	4013      	ands	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 8186 	beq.w	80045cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f003 0303 	and.w	r3, r3, #3
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d005      	beq.n	80042d8 <HAL_GPIO_Init+0x44>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f003 0303 	and.w	r3, r3, #3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d130      	bne.n	800433a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	2203      	movs	r2, #3
 80042e4:	fa02 f303 	lsl.w	r3, r2, r3
 80042e8:	43db      	mvns	r3, r3
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4013      	ands	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	68da      	ldr	r2, [r3, #12]
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4313      	orrs	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800430e:	2201      	movs	r2, #1
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	fa02 f303 	lsl.w	r3, r2, r3
 8004316:	43db      	mvns	r3, r3
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	4013      	ands	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	091b      	lsrs	r3, r3, #4
 8004324:	f003 0201 	and.w	r2, r3, #1
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	4313      	orrs	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f003 0303 	and.w	r3, r3, #3
 8004342:	2b03      	cmp	r3, #3
 8004344:	d017      	beq.n	8004376 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	2203      	movs	r2, #3
 8004352:	fa02 f303 	lsl.w	r3, r2, r3
 8004356:	43db      	mvns	r3, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4013      	ands	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	4313      	orrs	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d123      	bne.n	80043ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	08da      	lsrs	r2, r3, #3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	3208      	adds	r2, #8
 800438a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800438e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	f003 0307 	and.w	r3, r3, #7
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	220f      	movs	r2, #15
 800439a:	fa02 f303 	lsl.w	r3, r2, r3
 800439e:	43db      	mvns	r3, r3
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	4013      	ands	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	691a      	ldr	r2, [r3, #16]
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	08da      	lsrs	r2, r3, #3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3208      	adds	r2, #8
 80043c4:	69b9      	ldr	r1, [r7, #24]
 80043c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	2203      	movs	r2, #3
 80043d6:	fa02 f303 	lsl.w	r3, r2, r3
 80043da:	43db      	mvns	r3, r3
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	4013      	ands	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f003 0203 	and.w	r2, r3, #3
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	fa02 f303 	lsl.w	r3, r2, r3
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 80e0 	beq.w	80045cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800440c:	4b2f      	ldr	r3, [pc, #188]	; (80044cc <HAL_GPIO_Init+0x238>)
 800440e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004412:	4a2e      	ldr	r2, [pc, #184]	; (80044cc <HAL_GPIO_Init+0x238>)
 8004414:	f043 0302 	orr.w	r3, r3, #2
 8004418:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800441c:	4b2b      	ldr	r3, [pc, #172]	; (80044cc <HAL_GPIO_Init+0x238>)
 800441e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800442a:	4a29      	ldr	r2, [pc, #164]	; (80044d0 <HAL_GPIO_Init+0x23c>)
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	089b      	lsrs	r3, r3, #2
 8004430:	3302      	adds	r3, #2
 8004432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004436:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	220f      	movs	r2, #15
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	43db      	mvns	r3, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4013      	ands	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a20      	ldr	r2, [pc, #128]	; (80044d4 <HAL_GPIO_Init+0x240>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d052      	beq.n	80044fc <HAL_GPIO_Init+0x268>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a1f      	ldr	r2, [pc, #124]	; (80044d8 <HAL_GPIO_Init+0x244>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d031      	beq.n	80044c2 <HAL_GPIO_Init+0x22e>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a1e      	ldr	r2, [pc, #120]	; (80044dc <HAL_GPIO_Init+0x248>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d02b      	beq.n	80044be <HAL_GPIO_Init+0x22a>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a1d      	ldr	r2, [pc, #116]	; (80044e0 <HAL_GPIO_Init+0x24c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d025      	beq.n	80044ba <HAL_GPIO_Init+0x226>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a1c      	ldr	r2, [pc, #112]	; (80044e4 <HAL_GPIO_Init+0x250>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d01f      	beq.n	80044b6 <HAL_GPIO_Init+0x222>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a1b      	ldr	r2, [pc, #108]	; (80044e8 <HAL_GPIO_Init+0x254>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d019      	beq.n	80044b2 <HAL_GPIO_Init+0x21e>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a1a      	ldr	r2, [pc, #104]	; (80044ec <HAL_GPIO_Init+0x258>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d013      	beq.n	80044ae <HAL_GPIO_Init+0x21a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a19      	ldr	r2, [pc, #100]	; (80044f0 <HAL_GPIO_Init+0x25c>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d00d      	beq.n	80044aa <HAL_GPIO_Init+0x216>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a18      	ldr	r2, [pc, #96]	; (80044f4 <HAL_GPIO_Init+0x260>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d007      	beq.n	80044a6 <HAL_GPIO_Init+0x212>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a17      	ldr	r2, [pc, #92]	; (80044f8 <HAL_GPIO_Init+0x264>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d101      	bne.n	80044a2 <HAL_GPIO_Init+0x20e>
 800449e:	2309      	movs	r3, #9
 80044a0:	e02d      	b.n	80044fe <HAL_GPIO_Init+0x26a>
 80044a2:	230a      	movs	r3, #10
 80044a4:	e02b      	b.n	80044fe <HAL_GPIO_Init+0x26a>
 80044a6:	2308      	movs	r3, #8
 80044a8:	e029      	b.n	80044fe <HAL_GPIO_Init+0x26a>
 80044aa:	2307      	movs	r3, #7
 80044ac:	e027      	b.n	80044fe <HAL_GPIO_Init+0x26a>
 80044ae:	2306      	movs	r3, #6
 80044b0:	e025      	b.n	80044fe <HAL_GPIO_Init+0x26a>
 80044b2:	2305      	movs	r3, #5
 80044b4:	e023      	b.n	80044fe <HAL_GPIO_Init+0x26a>
 80044b6:	2304      	movs	r3, #4
 80044b8:	e021      	b.n	80044fe <HAL_GPIO_Init+0x26a>
 80044ba:	2303      	movs	r3, #3
 80044bc:	e01f      	b.n	80044fe <HAL_GPIO_Init+0x26a>
 80044be:	2302      	movs	r3, #2
 80044c0:	e01d      	b.n	80044fe <HAL_GPIO_Init+0x26a>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e01b      	b.n	80044fe <HAL_GPIO_Init+0x26a>
 80044c6:	bf00      	nop
 80044c8:	58000080 	.word	0x58000080
 80044cc:	58024400 	.word	0x58024400
 80044d0:	58000400 	.word	0x58000400
 80044d4:	58020000 	.word	0x58020000
 80044d8:	58020400 	.word	0x58020400
 80044dc:	58020800 	.word	0x58020800
 80044e0:	58020c00 	.word	0x58020c00
 80044e4:	58021000 	.word	0x58021000
 80044e8:	58021400 	.word	0x58021400
 80044ec:	58021800 	.word	0x58021800
 80044f0:	58021c00 	.word	0x58021c00
 80044f4:	58022000 	.word	0x58022000
 80044f8:	58022400 	.word	0x58022400
 80044fc:	2300      	movs	r3, #0
 80044fe:	69fa      	ldr	r2, [r7, #28]
 8004500:	f002 0203 	and.w	r2, r2, #3
 8004504:	0092      	lsls	r2, r2, #2
 8004506:	4093      	lsls	r3, r2
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	4313      	orrs	r3, r2
 800450c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800450e:	4938      	ldr	r1, [pc, #224]	; (80045f0 <HAL_GPIO_Init+0x35c>)
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	089b      	lsrs	r3, r3, #2
 8004514:	3302      	adds	r3, #2
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800451c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	43db      	mvns	r3, r3
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4013      	ands	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004542:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800454a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	43db      	mvns	r3, r3
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	4013      	ands	r3, r2
 800455a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	4313      	orrs	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004570:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	43db      	mvns	r3, r3
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4013      	ands	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	43db      	mvns	r3, r3
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	4013      	ands	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	3301      	adds	r3, #1
 80045d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	fa22 f303 	lsr.w	r3, r2, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f47f ae63 	bne.w	80042a8 <HAL_GPIO_Init+0x14>
  }
}
 80045e2:	bf00      	nop
 80045e4:	bf00      	nop
 80045e6:	3724      	adds	r7, #36	; 0x24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	58000400 	.word	0x58000400

080045f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	460b      	mov	r3, r1
 80045fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691a      	ldr	r2, [r3, #16]
 8004604:	887b      	ldrh	r3, [r7, #2]
 8004606:	4013      	ands	r3, r2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800460c:	2301      	movs	r3, #1
 800460e:	73fb      	strb	r3, [r7, #15]
 8004610:	e001      	b.n	8004616 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004612:	2300      	movs	r3, #0
 8004614:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004616:	7bfb      	ldrb	r3, [r7, #15]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	460b      	mov	r3, r1
 800462e:	807b      	strh	r3, [r7, #2]
 8004630:	4613      	mov	r3, r2
 8004632:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004634:	787b      	ldrb	r3, [r7, #1]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800463a:	887a      	ldrh	r2, [r7, #2]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004640:	e003      	b.n	800464a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004642:	887b      	ldrh	r3, [r7, #2]
 8004644:	041a      	lsls	r2, r3, #16
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	619a      	str	r2, [r3, #24]
}
 800464a:	bf00      	nop
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
	...

08004658 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e07f      	b.n	800476a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d106      	bne.n	8004684 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7fd fd4c 	bl	800211c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2224      	movs	r2, #36	; 0x24
 8004688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0201 	bic.w	r2, r2, #1
 800469a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d107      	bne.n	80046d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046ce:	609a      	str	r2, [r3, #8]
 80046d0:	e006      	b.n	80046e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80046de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d104      	bne.n	80046f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6859      	ldr	r1, [r3, #4]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	4b1d      	ldr	r3, [pc, #116]	; (8004774 <HAL_I2C_Init+0x11c>)
 80046fe:	430b      	orrs	r3, r1
 8004700:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004710:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691a      	ldr	r2, [r3, #16]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69d9      	ldr	r1, [r3, #28]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1a      	ldr	r2, [r3, #32]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0201 	orr.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2220      	movs	r2, #32
 8004756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	02008000 	.word	0x02008000

08004778 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af02      	add	r7, sp, #8
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	4608      	mov	r0, r1
 8004782:	4611      	mov	r1, r2
 8004784:	461a      	mov	r2, r3
 8004786:	4603      	mov	r3, r0
 8004788:	817b      	strh	r3, [r7, #10]
 800478a:	460b      	mov	r3, r1
 800478c:	813b      	strh	r3, [r7, #8]
 800478e:	4613      	mov	r3, r2
 8004790:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b20      	cmp	r3, #32
 800479c:	f040 80f9 	bne.w	8004992 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <HAL_I2C_Mem_Write+0x34>
 80047a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d105      	bne.n	80047b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0ed      	b.n	8004994 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_I2C_Mem_Write+0x4e>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e0e6      	b.n	8004994 <HAL_I2C_Mem_Write+0x21c>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80047ce:	f7fe f859 	bl	8002884 <HAL_GetTick>
 80047d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	2319      	movs	r3, #25
 80047da:	2201      	movs	r2, #1
 80047dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 f955 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e0d1      	b.n	8004994 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2221      	movs	r2, #33	; 0x21
 80047f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2240      	movs	r2, #64	; 0x40
 80047fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6a3a      	ldr	r2, [r7, #32]
 800480a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004810:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004818:	88f8      	ldrh	r0, [r7, #6]
 800481a:	893a      	ldrh	r2, [r7, #8]
 800481c:	8979      	ldrh	r1, [r7, #10]
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	9301      	str	r3, [sp, #4]
 8004822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	4603      	mov	r3, r0
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 f8b9 	bl	80049a0 <I2C_RequestMemoryWrite>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d005      	beq.n	8004840 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e0a9      	b.n	8004994 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004844:	b29b      	uxth	r3, r3
 8004846:	2bff      	cmp	r3, #255	; 0xff
 8004848:	d90e      	bls.n	8004868 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	22ff      	movs	r2, #255	; 0xff
 800484e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004854:	b2da      	uxtb	r2, r3
 8004856:	8979      	ldrh	r1, [r7, #10]
 8004858:	2300      	movs	r3, #0
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 fabd 	bl	8004de0 <I2C_TransferConfig>
 8004866:	e00f      	b.n	8004888 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004876:	b2da      	uxtb	r2, r3
 8004878:	8979      	ldrh	r1, [r7, #10]
 800487a:	2300      	movs	r3, #0
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f000 faac 	bl	8004de0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 f93f 	bl	8004b10 <I2C_WaitOnTXISFlagUntilTimeout>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e07b      	b.n	8004994 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	781a      	ldrb	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c4:	3b01      	subs	r3, #1
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d034      	beq.n	8004940 <HAL_I2C_Mem_Write+0x1c8>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d130      	bne.n	8004940 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e4:	2200      	movs	r2, #0
 80048e6:	2180      	movs	r1, #128	; 0x80
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 f8d1 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e04d      	b.n	8004994 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	2bff      	cmp	r3, #255	; 0xff
 8004900:	d90e      	bls.n	8004920 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	22ff      	movs	r2, #255	; 0xff
 8004906:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800490c:	b2da      	uxtb	r2, r3
 800490e:	8979      	ldrh	r1, [r7, #10]
 8004910:	2300      	movs	r3, #0
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 fa61 	bl	8004de0 <I2C_TransferConfig>
 800491e:	e00f      	b.n	8004940 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004924:	b29a      	uxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800492e:	b2da      	uxtb	r2, r3
 8004930:	8979      	ldrh	r1, [r7, #10]
 8004932:	2300      	movs	r3, #0
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f000 fa50 	bl	8004de0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d19e      	bne.n	8004888 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 f91e 	bl	8004b90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e01a      	b.n	8004994 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2220      	movs	r2, #32
 8004964:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6859      	ldr	r1, [r3, #4]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	4b0a      	ldr	r3, [pc, #40]	; (800499c <HAL_I2C_Mem_Write+0x224>)
 8004972:	400b      	ands	r3, r1
 8004974:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2220      	movs	r2, #32
 800497a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	e000      	b.n	8004994 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004992:	2302      	movs	r3, #2
  }
}
 8004994:	4618      	mov	r0, r3
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	fe00e800 	.word	0xfe00e800

080049a0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af02      	add	r7, sp, #8
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	4608      	mov	r0, r1
 80049aa:	4611      	mov	r1, r2
 80049ac:	461a      	mov	r2, r3
 80049ae:	4603      	mov	r3, r0
 80049b0:	817b      	strh	r3, [r7, #10]
 80049b2:	460b      	mov	r3, r1
 80049b4:	813b      	strh	r3, [r7, #8]
 80049b6:	4613      	mov	r3, r2
 80049b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80049ba:	88fb      	ldrh	r3, [r7, #6]
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	8979      	ldrh	r1, [r7, #10]
 80049c0:	4b20      	ldr	r3, [pc, #128]	; (8004a44 <I2C_RequestMemoryWrite+0xa4>)
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 fa09 	bl	8004de0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ce:	69fa      	ldr	r2, [r7, #28]
 80049d0:	69b9      	ldr	r1, [r7, #24]
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f000 f89c 	bl	8004b10 <I2C_WaitOnTXISFlagUntilTimeout>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e02c      	b.n	8004a3c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049e2:	88fb      	ldrh	r3, [r7, #6]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d105      	bne.n	80049f4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049e8:	893b      	ldrh	r3, [r7, #8]
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	629a      	str	r2, [r3, #40]	; 0x28
 80049f2:	e015      	b.n	8004a20 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80049f4:	893b      	ldrh	r3, [r7, #8]
 80049f6:	0a1b      	lsrs	r3, r3, #8
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a02:	69fa      	ldr	r2, [r7, #28]
 8004a04:	69b9      	ldr	r1, [r7, #24]
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 f882 	bl	8004b10 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e012      	b.n	8004a3c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a16:	893b      	ldrh	r3, [r7, #8]
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	2200      	movs	r2, #0
 8004a28:	2180      	movs	r1, #128	; 0x80
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 f830 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	80002000 	.word	0x80002000

08004a48 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d103      	bne.n	8004a66 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2200      	movs	r2, #0
 8004a64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d007      	beq.n	8004a84 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699a      	ldr	r2, [r3, #24]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0201 	orr.w	r2, r2, #1
 8004a82:	619a      	str	r2, [r3, #24]
  }
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	603b      	str	r3, [r7, #0]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aa0:	e022      	b.n	8004ae8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa8:	d01e      	beq.n	8004ae8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aaa:	f7fd feeb 	bl	8002884 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d302      	bcc.n	8004ac0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d113      	bne.n	8004ae8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac4:	f043 0220 	orr.w	r2, r3, #32
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e00f      	b.n	8004b08 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	4013      	ands	r3, r2
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	bf0c      	ite	eq
 8004af8:	2301      	moveq	r3, #1
 8004afa:	2300      	movne	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	461a      	mov	r2, r3
 8004b00:	79fb      	ldrb	r3, [r7, #7]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d0cd      	beq.n	8004aa2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b1c:	e02c      	b.n	8004b78 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	68b9      	ldr	r1, [r7, #8]
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 f870 	bl	8004c08 <I2C_IsErrorOccurred>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e02a      	b.n	8004b88 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b38:	d01e      	beq.n	8004b78 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b3a:	f7fd fea3 	bl	8002884 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d302      	bcc.n	8004b50 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d113      	bne.n	8004b78 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b54:	f043 0220 	orr.w	r2, r3, #32
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e007      	b.n	8004b88 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d1cb      	bne.n	8004b1e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b9c:	e028      	b.n	8004bf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	68b9      	ldr	r1, [r7, #8]
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 f830 	bl	8004c08 <I2C_IsErrorOccurred>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e026      	b.n	8004c00 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb2:	f7fd fe67 	bl	8002884 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d302      	bcc.n	8004bc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d113      	bne.n	8004bf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bcc:	f043 0220 	orr.w	r2, r3, #32
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e007      	b.n	8004c00 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b20      	cmp	r3, #32
 8004bfc:	d1cf      	bne.n	8004b9e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08a      	sub	sp, #40	; 0x28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c14:	2300      	movs	r3, #0
 8004c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004c22:	2300      	movs	r3, #0
 8004c24:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	f003 0310 	and.w	r3, r3, #16
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d075      	beq.n	8004d20 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2210      	movs	r2, #16
 8004c3a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c3c:	e056      	b.n	8004cec <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c44:	d052      	beq.n	8004cec <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c46:	f7fd fe1d 	bl	8002884 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d302      	bcc.n	8004c5c <I2C_IsErrorOccurred+0x54>
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d147      	bne.n	8004cec <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c66:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c6e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c7e:	d12e      	bne.n	8004cde <I2C_IsErrorOccurred+0xd6>
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c86:	d02a      	beq.n	8004cde <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004c88:	7cfb      	ldrb	r3, [r7, #19]
 8004c8a:	2b20      	cmp	r3, #32
 8004c8c:	d027      	beq.n	8004cde <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685a      	ldr	r2, [r3, #4]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c9c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004c9e:	f7fd fdf1 	bl	8002884 <HAL_GetTick>
 8004ca2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ca4:	e01b      	b.n	8004cde <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004ca6:	f7fd fded 	bl	8002884 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b19      	cmp	r3, #25
 8004cb2:	d914      	bls.n	8004cde <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb8:	f043 0220 	orr.w	r2, r3, #32
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	f003 0320 	and.w	r3, r3, #32
 8004ce8:	2b20      	cmp	r3, #32
 8004cea:	d1dc      	bne.n	8004ca6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	f003 0320 	and.w	r3, r3, #32
 8004cf6:	2b20      	cmp	r3, #32
 8004cf8:	d003      	beq.n	8004d02 <I2C_IsErrorOccurred+0xfa>
 8004cfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d09d      	beq.n	8004c3e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004d02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d103      	bne.n	8004d12 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	f043 0304 	orr.w	r3, r3, #4
 8004d18:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00b      	beq.n	8004d4a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	f043 0301 	orr.w	r3, r3, #1
 8004d38:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00b      	beq.n	8004d6c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	f043 0308 	orr.w	r3, r3, #8
 8004d5a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00b      	beq.n	8004d8e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	f043 0302 	orr.w	r3, r3, #2
 8004d7c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004d8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d01c      	beq.n	8004dd0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f7ff fe56 	bl	8004a48 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6859      	ldr	r1, [r3, #4]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	4b0d      	ldr	r3, [pc, #52]	; (8004ddc <I2C_IsErrorOccurred+0x1d4>)
 8004da8:	400b      	ands	r3, r1
 8004daa:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	431a      	orrs	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3728      	adds	r7, #40	; 0x28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	fe00e800 	.word	0xfe00e800

08004de0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	607b      	str	r3, [r7, #4]
 8004dea:	460b      	mov	r3, r1
 8004dec:	817b      	strh	r3, [r7, #10]
 8004dee:	4613      	mov	r3, r2
 8004df0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004df2:	897b      	ldrh	r3, [r7, #10]
 8004df4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004df8:	7a7b      	ldrb	r3, [r7, #9]
 8004dfa:	041b      	lsls	r3, r3, #16
 8004dfc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e00:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e0e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	0d5b      	lsrs	r3, r3, #21
 8004e1a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004e1e:	4b08      	ldr	r3, [pc, #32]	; (8004e40 <I2C_TransferConfig+0x60>)
 8004e20:	430b      	orrs	r3, r1
 8004e22:	43db      	mvns	r3, r3
 8004e24:	ea02 0103 	and.w	r1, r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004e32:	bf00      	nop
 8004e34:	371c      	adds	r7, #28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	03ff63ff 	.word	0x03ff63ff

08004e44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b20      	cmp	r3, #32
 8004e58:	d138      	bne.n	8004ecc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d101      	bne.n	8004e68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e64:	2302      	movs	r3, #2
 8004e66:	e032      	b.n	8004ece <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2224      	movs	r2, #36	; 0x24
 8004e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 0201 	bic.w	r2, r2, #1
 8004e86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6819      	ldr	r1, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0201 	orr.w	r2, r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	e000      	b.n	8004ece <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ecc:	2302      	movs	r3, #2
  }
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b085      	sub	sp, #20
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
 8004ee2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b20      	cmp	r3, #32
 8004eee:	d139      	bne.n	8004f64 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d101      	bne.n	8004efe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004efa:	2302      	movs	r3, #2
 8004efc:	e033      	b.n	8004f66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2224      	movs	r2, #36	; 0x24
 8004f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0201 	bic.w	r2, r2, #1
 8004f1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f2c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	021b      	lsls	r3, r3, #8
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0201 	orr.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	e000      	b.n	8004f66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f64:	2302      	movs	r3, #2
  }
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f74:	b08f      	sub	sp, #60	; 0x3c
 8004f76:	af0a      	add	r7, sp, #40	; 0x28
 8004f78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e116      	b.n	80051b2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d106      	bne.n	8004fa4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fd fa5e 	bl	8002460 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2203      	movs	r2, #3
 8004fa8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d102      	bne.n	8004fbe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f005 fdda 	bl	800ab7c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	603b      	str	r3, [r7, #0]
 8004fce:	687e      	ldr	r6, [r7, #4]
 8004fd0:	466d      	mov	r5, sp
 8004fd2:	f106 0410 	add.w	r4, r6, #16
 8004fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004fe2:	e885 0003 	stmia.w	r5, {r0, r1}
 8004fe6:	1d33      	adds	r3, r6, #4
 8004fe8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fea:	6838      	ldr	r0, [r7, #0]
 8004fec:	f005 fd58 	bl	800aaa0 <USB_CoreInit>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d005      	beq.n	8005002 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e0d7      	b.n	80051b2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2100      	movs	r1, #0
 8005008:	4618      	mov	r0, r3
 800500a:	f005 fdc8 	bl	800ab9e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800500e:	2300      	movs	r3, #0
 8005010:	73fb      	strb	r3, [r7, #15]
 8005012:	e04a      	b.n	80050aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005014:	7bfa      	ldrb	r2, [r7, #15]
 8005016:	6879      	ldr	r1, [r7, #4]
 8005018:	4613      	mov	r3, r2
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	1a9b      	subs	r3, r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	440b      	add	r3, r1
 8005022:	333d      	adds	r3, #61	; 0x3d
 8005024:	2201      	movs	r2, #1
 8005026:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005028:	7bfa      	ldrb	r2, [r7, #15]
 800502a:	6879      	ldr	r1, [r7, #4]
 800502c:	4613      	mov	r3, r2
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	1a9b      	subs	r3, r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	333c      	adds	r3, #60	; 0x3c
 8005038:	7bfa      	ldrb	r2, [r7, #15]
 800503a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800503c:	7bfa      	ldrb	r2, [r7, #15]
 800503e:	7bfb      	ldrb	r3, [r7, #15]
 8005040:	b298      	uxth	r0, r3
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	4613      	mov	r3, r2
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	1a9b      	subs	r3, r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	440b      	add	r3, r1
 800504e:	3342      	adds	r3, #66	; 0x42
 8005050:	4602      	mov	r2, r0
 8005052:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005054:	7bfa      	ldrb	r2, [r7, #15]
 8005056:	6879      	ldr	r1, [r7, #4]
 8005058:	4613      	mov	r3, r2
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	1a9b      	subs	r3, r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	440b      	add	r3, r1
 8005062:	333f      	adds	r3, #63	; 0x3f
 8005064:	2200      	movs	r2, #0
 8005066:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005068:	7bfa      	ldrb	r2, [r7, #15]
 800506a:	6879      	ldr	r1, [r7, #4]
 800506c:	4613      	mov	r3, r2
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	1a9b      	subs	r3, r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	440b      	add	r3, r1
 8005076:	3344      	adds	r3, #68	; 0x44
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800507c:	7bfa      	ldrb	r2, [r7, #15]
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	4613      	mov	r3, r2
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	1a9b      	subs	r3, r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	440b      	add	r3, r1
 800508a:	3348      	adds	r3, #72	; 0x48
 800508c:	2200      	movs	r2, #0
 800508e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005090:	7bfa      	ldrb	r2, [r7, #15]
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	4613      	mov	r3, r2
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	1a9b      	subs	r3, r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	440b      	add	r3, r1
 800509e:	3350      	adds	r3, #80	; 0x50
 80050a0:	2200      	movs	r2, #0
 80050a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050a4:	7bfb      	ldrb	r3, [r7, #15]
 80050a6:	3301      	adds	r3, #1
 80050a8:	73fb      	strb	r3, [r7, #15]
 80050aa:	7bfa      	ldrb	r2, [r7, #15]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d3af      	bcc.n	8005014 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050b4:	2300      	movs	r3, #0
 80050b6:	73fb      	strb	r3, [r7, #15]
 80050b8:	e044      	b.n	8005144 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80050ba:	7bfa      	ldrb	r2, [r7, #15]
 80050bc:	6879      	ldr	r1, [r7, #4]
 80050be:	4613      	mov	r3, r2
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	1a9b      	subs	r3, r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	440b      	add	r3, r1
 80050c8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80050cc:	2200      	movs	r2, #0
 80050ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80050d0:	7bfa      	ldrb	r2, [r7, #15]
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	4613      	mov	r3, r2
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	1a9b      	subs	r3, r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	440b      	add	r3, r1
 80050de:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80050e2:	7bfa      	ldrb	r2, [r7, #15]
 80050e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80050e6:	7bfa      	ldrb	r2, [r7, #15]
 80050e8:	6879      	ldr	r1, [r7, #4]
 80050ea:	4613      	mov	r3, r2
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	1a9b      	subs	r3, r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	440b      	add	r3, r1
 80050f4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80050f8:	2200      	movs	r2, #0
 80050fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80050fc:	7bfa      	ldrb	r2, [r7, #15]
 80050fe:	6879      	ldr	r1, [r7, #4]
 8005100:	4613      	mov	r3, r2
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	1a9b      	subs	r3, r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	440b      	add	r3, r1
 800510a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800510e:	2200      	movs	r2, #0
 8005110:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005112:	7bfa      	ldrb	r2, [r7, #15]
 8005114:	6879      	ldr	r1, [r7, #4]
 8005116:	4613      	mov	r3, r2
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	1a9b      	subs	r3, r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	440b      	add	r3, r1
 8005120:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005128:	7bfa      	ldrb	r2, [r7, #15]
 800512a:	6879      	ldr	r1, [r7, #4]
 800512c:	4613      	mov	r3, r2
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	1a9b      	subs	r3, r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	440b      	add	r3, r1
 8005136:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800513a:	2200      	movs	r2, #0
 800513c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800513e:	7bfb      	ldrb	r3, [r7, #15]
 8005140:	3301      	adds	r3, #1
 8005142:	73fb      	strb	r3, [r7, #15]
 8005144:	7bfa      	ldrb	r2, [r7, #15]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	429a      	cmp	r2, r3
 800514c:	d3b5      	bcc.n	80050ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	603b      	str	r3, [r7, #0]
 8005154:	687e      	ldr	r6, [r7, #4]
 8005156:	466d      	mov	r5, sp
 8005158:	f106 0410 	add.w	r4, r6, #16
 800515c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800515e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005164:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005168:	e885 0003 	stmia.w	r5, {r0, r1}
 800516c:	1d33      	adds	r3, r6, #4
 800516e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005170:	6838      	ldr	r0, [r7, #0]
 8005172:	f005 fd61 	bl	800ac38 <USB_DevInit>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d005      	beq.n	8005188 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e014      	b.n	80051b2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	2b01      	cmp	r3, #1
 800519e:	d102      	bne.n	80051a6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f80b 	bl	80051bc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f005 ff1b 	bl	800afe6 <USB_DevDisconnect>

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080051bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051ea:	4b05      	ldr	r3, [pc, #20]	; (8005200 <HAL_PCDEx_ActivateLPM+0x44>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	10000003 	.word	0x10000003

08005204 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800520c:	4b19      	ldr	r3, [pc, #100]	; (8005274 <HAL_PWREx_ConfigSupply+0x70>)
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	2b04      	cmp	r3, #4
 8005216:	d00a      	beq.n	800522e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005218:	4b16      	ldr	r3, [pc, #88]	; (8005274 <HAL_PWREx_ConfigSupply+0x70>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f003 0307 	and.w	r3, r3, #7
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	429a      	cmp	r2, r3
 8005224:	d001      	beq.n	800522a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e01f      	b.n	800526a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	e01d      	b.n	800526a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800522e:	4b11      	ldr	r3, [pc, #68]	; (8005274 <HAL_PWREx_ConfigSupply+0x70>)
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f023 0207 	bic.w	r2, r3, #7
 8005236:	490f      	ldr	r1, [pc, #60]	; (8005274 <HAL_PWREx_ConfigSupply+0x70>)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4313      	orrs	r3, r2
 800523c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800523e:	f7fd fb21 	bl	8002884 <HAL_GetTick>
 8005242:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005244:	e009      	b.n	800525a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005246:	f7fd fb1d 	bl	8002884 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005254:	d901      	bls.n	800525a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e007      	b.n	800526a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800525a:	4b06      	ldr	r3, [pc, #24]	; (8005274 <HAL_PWREx_ConfigSupply+0x70>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005266:	d1ee      	bne.n	8005246 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	58024800 	.word	0x58024800

08005278 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800527c:	4b05      	ldr	r3, [pc, #20]	; (8005294 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	4a04      	ldr	r2, [pc, #16]	; (8005294 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005286:	60d3      	str	r3, [r2, #12]
}
 8005288:	bf00      	nop
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	58024800 	.word	0x58024800

08005298 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08c      	sub	sp, #48	; 0x30
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d102      	bne.n	80052ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	f000 bc1c 	b.w	8005ae4 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 8087 	beq.w	80053c8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ba:	4b9e      	ldr	r3, [pc, #632]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052c4:	4b9b      	ldr	r3, [pc, #620]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 80052c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80052ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052cc:	2b10      	cmp	r3, #16
 80052ce:	d007      	beq.n	80052e0 <HAL_RCC_OscConfig+0x48>
 80052d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d2:	2b18      	cmp	r3, #24
 80052d4:	d110      	bne.n	80052f8 <HAL_RCC_OscConfig+0x60>
 80052d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d8:	f003 0303 	and.w	r3, r3, #3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d10b      	bne.n	80052f8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052e0:	4b94      	ldr	r3, [pc, #592]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d06c      	beq.n	80053c6 <HAL_RCC_OscConfig+0x12e>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d168      	bne.n	80053c6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e3f5      	b.n	8005ae4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005300:	d106      	bne.n	8005310 <HAL_RCC_OscConfig+0x78>
 8005302:	4b8c      	ldr	r3, [pc, #560]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a8b      	ldr	r2, [pc, #556]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 8005308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	e02e      	b.n	800536e <HAL_RCC_OscConfig+0xd6>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10c      	bne.n	8005332 <HAL_RCC_OscConfig+0x9a>
 8005318:	4b86      	ldr	r3, [pc, #536]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a85      	ldr	r2, [pc, #532]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 800531e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	4b83      	ldr	r3, [pc, #524]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a82      	ldr	r2, [pc, #520]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 800532a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	e01d      	b.n	800536e <HAL_RCC_OscConfig+0xd6>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800533a:	d10c      	bne.n	8005356 <HAL_RCC_OscConfig+0xbe>
 800533c:	4b7d      	ldr	r3, [pc, #500]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a7c      	ldr	r2, [pc, #496]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 8005342:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	4b7a      	ldr	r3, [pc, #488]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a79      	ldr	r2, [pc, #484]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 800534e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005352:	6013      	str	r3, [r2, #0]
 8005354:	e00b      	b.n	800536e <HAL_RCC_OscConfig+0xd6>
 8005356:	4b77      	ldr	r3, [pc, #476]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a76      	ldr	r2, [pc, #472]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 800535c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	4b74      	ldr	r3, [pc, #464]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a73      	ldr	r2, [pc, #460]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 8005368:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800536c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d013      	beq.n	800539e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005376:	f7fd fa85 	bl	8002884 <HAL_GetTick>
 800537a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800537c:	e008      	b.n	8005390 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800537e:	f7fd fa81 	bl	8002884 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b64      	cmp	r3, #100	; 0x64
 800538a:	d901      	bls.n	8005390 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e3a9      	b.n	8005ae4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005390:	4b68      	ldr	r3, [pc, #416]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0f0      	beq.n	800537e <HAL_RCC_OscConfig+0xe6>
 800539c:	e014      	b.n	80053c8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800539e:	f7fd fa71 	bl	8002884 <HAL_GetTick>
 80053a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053a4:	e008      	b.n	80053b8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053a6:	f7fd fa6d 	bl	8002884 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b64      	cmp	r3, #100	; 0x64
 80053b2:	d901      	bls.n	80053b8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e395      	b.n	8005ae4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053b8:	4b5e      	ldr	r3, [pc, #376]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1f0      	bne.n	80053a6 <HAL_RCC_OscConfig+0x10e>
 80053c4:	e000      	b.n	80053c8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053c6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 80ca 	beq.w	800556a <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053d6:	4b57      	ldr	r3, [pc, #348]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053de:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053e0:	4b54      	ldr	r3, [pc, #336]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 80053e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d007      	beq.n	80053fc <HAL_RCC_OscConfig+0x164>
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	2b18      	cmp	r3, #24
 80053f0:	d156      	bne.n	80054a0 <HAL_RCC_OscConfig+0x208>
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	f003 0303 	and.w	r3, r3, #3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d151      	bne.n	80054a0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053fc:	4b4d      	ldr	r3, [pc, #308]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b00      	cmp	r3, #0
 8005406:	d005      	beq.n	8005414 <HAL_RCC_OscConfig+0x17c>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e367      	b.n	8005ae4 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005414:	4b47      	ldr	r3, [pc, #284]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f023 0219 	bic.w	r2, r3, #25
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	4944      	ldr	r1, [pc, #272]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 8005422:	4313      	orrs	r3, r2
 8005424:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005426:	f7fd fa2d 	bl	8002884 <HAL_GetTick>
 800542a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800542c:	e008      	b.n	8005440 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800542e:	f7fd fa29 	bl	8002884 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d901      	bls.n	8005440 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e351      	b.n	8005ae4 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005440:	4b3c      	ldr	r3, [pc, #240]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0f0      	beq.n	800542e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800544c:	f7fd fa4a 	bl	80028e4 <HAL_GetREVID>
 8005450:	4603      	mov	r3, r0
 8005452:	f241 0203 	movw	r2, #4099	; 0x1003
 8005456:	4293      	cmp	r3, r2
 8005458:	d817      	bhi.n	800548a <HAL_RCC_OscConfig+0x1f2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	2b40      	cmp	r3, #64	; 0x40
 8005460:	d108      	bne.n	8005474 <HAL_RCC_OscConfig+0x1dc>
 8005462:	4b34      	ldr	r3, [pc, #208]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800546a:	4a32      	ldr	r2, [pc, #200]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 800546c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005470:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005472:	e07a      	b.n	800556a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005474:	4b2f      	ldr	r3, [pc, #188]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	031b      	lsls	r3, r3, #12
 8005482:	492c      	ldr	r1, [pc, #176]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 8005484:	4313      	orrs	r3, r2
 8005486:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005488:	e06f      	b.n	800556a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800548a:	4b2a      	ldr	r3, [pc, #168]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	061b      	lsls	r3, r3, #24
 8005498:	4926      	ldr	r1, [pc, #152]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 800549a:	4313      	orrs	r3, r2
 800549c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800549e:	e064      	b.n	800556a <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d047      	beq.n	8005538 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80054a8:	4b22      	ldr	r3, [pc, #136]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f023 0219 	bic.w	r2, r3, #25
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	491f      	ldr	r1, [pc, #124]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ba:	f7fd f9e3 	bl	8002884 <HAL_GetTick>
 80054be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054c0:	e008      	b.n	80054d4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054c2:	f7fd f9df 	bl	8002884 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e307      	b.n	8005ae4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054d4:	4b17      	ldr	r3, [pc, #92]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0304 	and.w	r3, r3, #4
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d0f0      	beq.n	80054c2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054e0:	f7fd fa00 	bl	80028e4 <HAL_GetREVID>
 80054e4:	4603      	mov	r3, r0
 80054e6:	f241 0203 	movw	r2, #4099	; 0x1003
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d817      	bhi.n	800551e <HAL_RCC_OscConfig+0x286>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	2b40      	cmp	r3, #64	; 0x40
 80054f4:	d108      	bne.n	8005508 <HAL_RCC_OscConfig+0x270>
 80054f6:	4b0f      	ldr	r3, [pc, #60]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80054fe:	4a0d      	ldr	r2, [pc, #52]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 8005500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005504:	6053      	str	r3, [r2, #4]
 8005506:	e030      	b.n	800556a <HAL_RCC_OscConfig+0x2d2>
 8005508:	4b0a      	ldr	r3, [pc, #40]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	031b      	lsls	r3, r3, #12
 8005516:	4907      	ldr	r1, [pc, #28]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 8005518:	4313      	orrs	r3, r2
 800551a:	604b      	str	r3, [r1, #4]
 800551c:	e025      	b.n	800556a <HAL_RCC_OscConfig+0x2d2>
 800551e:	4b05      	ldr	r3, [pc, #20]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	061b      	lsls	r3, r3, #24
 800552c:	4901      	ldr	r1, [pc, #4]	; (8005534 <HAL_RCC_OscConfig+0x29c>)
 800552e:	4313      	orrs	r3, r2
 8005530:	604b      	str	r3, [r1, #4]
 8005532:	e01a      	b.n	800556a <HAL_RCC_OscConfig+0x2d2>
 8005534:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005538:	4b9e      	ldr	r3, [pc, #632]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a9d      	ldr	r2, [pc, #628]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 800553e:	f023 0301 	bic.w	r3, r3, #1
 8005542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005544:	f7fd f99e 	bl	8002884 <HAL_GetTick>
 8005548:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800554c:	f7fd f99a 	bl	8002884 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e2c2      	b.n	8005ae4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800555e:	4b95      	ldr	r3, [pc, #596]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0304 	and.w	r3, r3, #4
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1f0      	bne.n	800554c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0310 	and.w	r3, r3, #16
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 80a9 	beq.w	80056ca <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005578:	4b8e      	ldr	r3, [pc, #568]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005580:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005582:	4b8c      	ldr	r3, [pc, #560]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 8005584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005586:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	2b08      	cmp	r3, #8
 800558c:	d007      	beq.n	800559e <HAL_RCC_OscConfig+0x306>
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	2b18      	cmp	r3, #24
 8005592:	d13a      	bne.n	800560a <HAL_RCC_OscConfig+0x372>
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f003 0303 	and.w	r3, r3, #3
 800559a:	2b01      	cmp	r3, #1
 800559c:	d135      	bne.n	800560a <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800559e:	4b85      	ldr	r3, [pc, #532]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d005      	beq.n	80055b6 <HAL_RCC_OscConfig+0x31e>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	2b80      	cmp	r3, #128	; 0x80
 80055b0:	d001      	beq.n	80055b6 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e296      	b.n	8005ae4 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055b6:	f7fd f995 	bl	80028e4 <HAL_GetREVID>
 80055ba:	4603      	mov	r3, r0
 80055bc:	f241 0203 	movw	r2, #4099	; 0x1003
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d817      	bhi.n	80055f4 <HAL_RCC_OscConfig+0x35c>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a1b      	ldr	r3, [r3, #32]
 80055c8:	2b20      	cmp	r3, #32
 80055ca:	d108      	bne.n	80055de <HAL_RCC_OscConfig+0x346>
 80055cc:	4b79      	ldr	r3, [pc, #484]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80055d4:	4a77      	ldr	r2, [pc, #476]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 80055d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055da:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055dc:	e075      	b.n	80056ca <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055de:	4b75      	ldr	r3, [pc, #468]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	069b      	lsls	r3, r3, #26
 80055ec:	4971      	ldr	r1, [pc, #452]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055f2:	e06a      	b.n	80056ca <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055f4:	4b6f      	ldr	r3, [pc, #444]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	061b      	lsls	r3, r3, #24
 8005602:	496c      	ldr	r1, [pc, #432]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 8005604:	4313      	orrs	r3, r2
 8005606:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005608:	e05f      	b.n	80056ca <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d042      	beq.n	8005698 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005612:	4b68      	ldr	r3, [pc, #416]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a67      	ldr	r2, [pc, #412]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 8005618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800561c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800561e:	f7fd f931 	bl	8002884 <HAL_GetTick>
 8005622:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005624:	e008      	b.n	8005638 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005626:	f7fd f92d 	bl	8002884 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	2b02      	cmp	r3, #2
 8005632:	d901      	bls.n	8005638 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e255      	b.n	8005ae4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005638:	4b5e      	ldr	r3, [pc, #376]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0f0      	beq.n	8005626 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005644:	f7fd f94e 	bl	80028e4 <HAL_GetREVID>
 8005648:	4603      	mov	r3, r0
 800564a:	f241 0203 	movw	r2, #4099	; 0x1003
 800564e:	4293      	cmp	r3, r2
 8005650:	d817      	bhi.n	8005682 <HAL_RCC_OscConfig+0x3ea>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	2b20      	cmp	r3, #32
 8005658:	d108      	bne.n	800566c <HAL_RCC_OscConfig+0x3d4>
 800565a:	4b56      	ldr	r3, [pc, #344]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005662:	4a54      	ldr	r2, [pc, #336]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 8005664:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005668:	6053      	str	r3, [r2, #4]
 800566a:	e02e      	b.n	80056ca <HAL_RCC_OscConfig+0x432>
 800566c:	4b51      	ldr	r3, [pc, #324]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	069b      	lsls	r3, r3, #26
 800567a:	494e      	ldr	r1, [pc, #312]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 800567c:	4313      	orrs	r3, r2
 800567e:	604b      	str	r3, [r1, #4]
 8005680:	e023      	b.n	80056ca <HAL_RCC_OscConfig+0x432>
 8005682:	4b4c      	ldr	r3, [pc, #304]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	061b      	lsls	r3, r3, #24
 8005690:	4948      	ldr	r1, [pc, #288]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 8005692:	4313      	orrs	r3, r2
 8005694:	60cb      	str	r3, [r1, #12]
 8005696:	e018      	b.n	80056ca <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005698:	4b46      	ldr	r3, [pc, #280]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a45      	ldr	r2, [pc, #276]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 800569e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a4:	f7fd f8ee 	bl	8002884 <HAL_GetTick>
 80056a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80056aa:	e008      	b.n	80056be <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80056ac:	f7fd f8ea 	bl	8002884 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e212      	b.n	8005ae4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80056be:	4b3d      	ldr	r3, [pc, #244]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1f0      	bne.n	80056ac <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0308 	and.w	r3, r3, #8
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d036      	beq.n	8005744 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d019      	beq.n	8005712 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056de:	4b35      	ldr	r3, [pc, #212]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 80056e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056e2:	4a34      	ldr	r2, [pc, #208]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 80056e4:	f043 0301 	orr.w	r3, r3, #1
 80056e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ea:	f7fd f8cb 	bl	8002884 <HAL_GetTick>
 80056ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056f0:	e008      	b.n	8005704 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056f2:	f7fd f8c7 	bl	8002884 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d901      	bls.n	8005704 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e1ef      	b.n	8005ae4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005704:	4b2b      	ldr	r3, [pc, #172]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 8005706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0f0      	beq.n	80056f2 <HAL_RCC_OscConfig+0x45a>
 8005710:	e018      	b.n	8005744 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005712:	4b28      	ldr	r3, [pc, #160]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 8005714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005716:	4a27      	ldr	r2, [pc, #156]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 8005718:	f023 0301 	bic.w	r3, r3, #1
 800571c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800571e:	f7fd f8b1 	bl	8002884 <HAL_GetTick>
 8005722:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005724:	e008      	b.n	8005738 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005726:	f7fd f8ad 	bl	8002884 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e1d5      	b.n	8005ae4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005738:	4b1e      	ldr	r3, [pc, #120]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 800573a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1f0      	bne.n	8005726 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0320 	and.w	r3, r3, #32
 800574c:	2b00      	cmp	r3, #0
 800574e:	d039      	beq.n	80057c4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d019      	beq.n	800578c <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005758:	4b16      	ldr	r3, [pc, #88]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a15      	ldr	r2, [pc, #84]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 800575e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005762:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005764:	f7fd f88e 	bl	8002884 <HAL_GetTick>
 8005768:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800576a:	e008      	b.n	800577e <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800576c:	f7fd f88a 	bl	8002884 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e1b2      	b.n	8005ae4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800577e:	4b0d      	ldr	r3, [pc, #52]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0f0      	beq.n	800576c <HAL_RCC_OscConfig+0x4d4>
 800578a:	e01b      	b.n	80057c4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800578c:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a08      	ldr	r2, [pc, #32]	; (80057b4 <HAL_RCC_OscConfig+0x51c>)
 8005792:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005796:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005798:	f7fd f874 	bl	8002884 <HAL_GetTick>
 800579c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800579e:	e00b      	b.n	80057b8 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80057a0:	f7fd f870 	bl	8002884 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d904      	bls.n	80057b8 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e198      	b.n	8005ae4 <HAL_RCC_OscConfig+0x84c>
 80057b2:	bf00      	nop
 80057b4:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057b8:	4ba3      	ldr	r3, [pc, #652]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1ed      	bne.n	80057a0 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0304 	and.w	r3, r3, #4
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 8081 	beq.w	80058d4 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80057d2:	4b9e      	ldr	r3, [pc, #632]	; (8005a4c <HAL_RCC_OscConfig+0x7b4>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a9d      	ldr	r2, [pc, #628]	; (8005a4c <HAL_RCC_OscConfig+0x7b4>)
 80057d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057de:	f7fd f851 	bl	8002884 <HAL_GetTick>
 80057e2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057e4:	e008      	b.n	80057f8 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057e6:	f7fd f84d 	bl	8002884 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b64      	cmp	r3, #100	; 0x64
 80057f2:	d901      	bls.n	80057f8 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e175      	b.n	8005ae4 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057f8:	4b94      	ldr	r3, [pc, #592]	; (8005a4c <HAL_RCC_OscConfig+0x7b4>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005800:	2b00      	cmp	r3, #0
 8005802:	d0f0      	beq.n	80057e6 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d106      	bne.n	800581a <HAL_RCC_OscConfig+0x582>
 800580c:	4b8e      	ldr	r3, [pc, #568]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 800580e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005810:	4a8d      	ldr	r2, [pc, #564]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 8005812:	f043 0301 	orr.w	r3, r3, #1
 8005816:	6713      	str	r3, [r2, #112]	; 0x70
 8005818:	e02d      	b.n	8005876 <HAL_RCC_OscConfig+0x5de>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10c      	bne.n	800583c <HAL_RCC_OscConfig+0x5a4>
 8005822:	4b89      	ldr	r3, [pc, #548]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 8005824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005826:	4a88      	ldr	r2, [pc, #544]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 8005828:	f023 0301 	bic.w	r3, r3, #1
 800582c:	6713      	str	r3, [r2, #112]	; 0x70
 800582e:	4b86      	ldr	r3, [pc, #536]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 8005830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005832:	4a85      	ldr	r2, [pc, #532]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 8005834:	f023 0304 	bic.w	r3, r3, #4
 8005838:	6713      	str	r3, [r2, #112]	; 0x70
 800583a:	e01c      	b.n	8005876 <HAL_RCC_OscConfig+0x5de>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	2b05      	cmp	r3, #5
 8005842:	d10c      	bne.n	800585e <HAL_RCC_OscConfig+0x5c6>
 8005844:	4b80      	ldr	r3, [pc, #512]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 8005846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005848:	4a7f      	ldr	r2, [pc, #508]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 800584a:	f043 0304 	orr.w	r3, r3, #4
 800584e:	6713      	str	r3, [r2, #112]	; 0x70
 8005850:	4b7d      	ldr	r3, [pc, #500]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 8005852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005854:	4a7c      	ldr	r2, [pc, #496]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 8005856:	f043 0301 	orr.w	r3, r3, #1
 800585a:	6713      	str	r3, [r2, #112]	; 0x70
 800585c:	e00b      	b.n	8005876 <HAL_RCC_OscConfig+0x5de>
 800585e:	4b7a      	ldr	r3, [pc, #488]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 8005860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005862:	4a79      	ldr	r2, [pc, #484]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 8005864:	f023 0301 	bic.w	r3, r3, #1
 8005868:	6713      	str	r3, [r2, #112]	; 0x70
 800586a:	4b77      	ldr	r3, [pc, #476]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 800586c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586e:	4a76      	ldr	r2, [pc, #472]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 8005870:	f023 0304 	bic.w	r3, r3, #4
 8005874:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d015      	beq.n	80058aa <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800587e:	f7fd f801 	bl	8002884 <HAL_GetTick>
 8005882:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005884:	e00a      	b.n	800589c <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005886:	f7fc fffd 	bl	8002884 <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	f241 3288 	movw	r2, #5000	; 0x1388
 8005894:	4293      	cmp	r3, r2
 8005896:	d901      	bls.n	800589c <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e123      	b.n	8005ae4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800589c:	4b6a      	ldr	r3, [pc, #424]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 800589e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d0ee      	beq.n	8005886 <HAL_RCC_OscConfig+0x5ee>
 80058a8:	e014      	b.n	80058d4 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058aa:	f7fc ffeb 	bl	8002884 <HAL_GetTick>
 80058ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058b0:	e00a      	b.n	80058c8 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058b2:	f7fc ffe7 	bl	8002884 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d901      	bls.n	80058c8 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e10d      	b.n	8005ae4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058c8:	4b5f      	ldr	r3, [pc, #380]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 80058ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1ee      	bne.n	80058b2 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 8102 	beq.w	8005ae2 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80058de:	4b5a      	ldr	r3, [pc, #360]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058e6:	2b18      	cmp	r3, #24
 80058e8:	f000 80bd 	beq.w	8005a66 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	f040 8095 	bne.w	8005a20 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058f6:	4b54      	ldr	r3, [pc, #336]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a53      	ldr	r2, [pc, #332]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 80058fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005902:	f7fc ffbf 	bl	8002884 <HAL_GetTick>
 8005906:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005908:	e008      	b.n	800591c <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800590a:	f7fc ffbb 	bl	8002884 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	2b02      	cmp	r3, #2
 8005916:	d901      	bls.n	800591c <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e0e3      	b.n	8005ae4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800591c:	4b4a      	ldr	r3, [pc, #296]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1f0      	bne.n	800590a <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005928:	4b47      	ldr	r3, [pc, #284]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 800592a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800592c:	4b48      	ldr	r3, [pc, #288]	; (8005a50 <HAL_RCC_OscConfig+0x7b8>)
 800592e:	4013      	ands	r3, r2
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005938:	0112      	lsls	r2, r2, #4
 800593a:	430a      	orrs	r2, r1
 800593c:	4942      	ldr	r1, [pc, #264]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 800593e:	4313      	orrs	r3, r2
 8005940:	628b      	str	r3, [r1, #40]	; 0x28
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005946:	3b01      	subs	r3, #1
 8005948:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005950:	3b01      	subs	r3, #1
 8005952:	025b      	lsls	r3, r3, #9
 8005954:	b29b      	uxth	r3, r3
 8005956:	431a      	orrs	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595c:	3b01      	subs	r3, #1
 800595e:	041b      	lsls	r3, r3, #16
 8005960:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005964:	431a      	orrs	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596a:	3b01      	subs	r3, #1
 800596c:	061b      	lsls	r3, r3, #24
 800596e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005972:	4935      	ldr	r1, [pc, #212]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 8005974:	4313      	orrs	r3, r2
 8005976:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005978:	4b33      	ldr	r3, [pc, #204]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 800597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597c:	4a32      	ldr	r2, [pc, #200]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 800597e:	f023 0301 	bic.w	r3, r3, #1
 8005982:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005984:	4b30      	ldr	r3, [pc, #192]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 8005986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005988:	4b32      	ldr	r3, [pc, #200]	; (8005a54 <HAL_RCC_OscConfig+0x7bc>)
 800598a:	4013      	ands	r3, r2
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005990:	00d2      	lsls	r2, r2, #3
 8005992:	492d      	ldr	r1, [pc, #180]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 8005994:	4313      	orrs	r3, r2
 8005996:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005998:	4b2b      	ldr	r3, [pc, #172]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 800599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599c:	f023 020c 	bic.w	r2, r3, #12
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a4:	4928      	ldr	r1, [pc, #160]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80059aa:	4b27      	ldr	r3, [pc, #156]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 80059ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ae:	f023 0202 	bic.w	r2, r3, #2
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b6:	4924      	ldr	r1, [pc, #144]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80059bc:	4b22      	ldr	r3, [pc, #136]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	4a21      	ldr	r2, [pc, #132]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 80059c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059c8:	4b1f      	ldr	r3, [pc, #124]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	4a1e      	ldr	r2, [pc, #120]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 80059ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80059d4:	4b1c      	ldr	r3, [pc, #112]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 80059d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d8:	4a1b      	ldr	r2, [pc, #108]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 80059da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80059e0:	4b19      	ldr	r3, [pc, #100]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	4a18      	ldr	r2, [pc, #96]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 80059e6:	f043 0301 	orr.w	r3, r3, #1
 80059ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059ec:	4b16      	ldr	r3, [pc, #88]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a15      	ldr	r2, [pc, #84]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 80059f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f8:	f7fc ff44 	bl	8002884 <HAL_GetTick>
 80059fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059fe:	e008      	b.n	8005a12 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a00:	f7fc ff40 	bl	8002884 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e068      	b.n	8005ae4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a12:	4b0d      	ldr	r3, [pc, #52]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d0f0      	beq.n	8005a00 <HAL_RCC_OscConfig+0x768>
 8005a1e:	e060      	b.n	8005ae2 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a20:	4b09      	ldr	r3, [pc, #36]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a08      	ldr	r2, [pc, #32]	; (8005a48 <HAL_RCC_OscConfig+0x7b0>)
 8005a26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a2c:	f7fc ff2a 	bl	8002884 <HAL_GetTick>
 8005a30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a32:	e011      	b.n	8005a58 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a34:	f7fc ff26 	bl	8002884 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d90a      	bls.n	8005a58 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e04e      	b.n	8005ae4 <HAL_RCC_OscConfig+0x84c>
 8005a46:	bf00      	nop
 8005a48:	58024400 	.word	0x58024400
 8005a4c:	58024800 	.word	0x58024800
 8005a50:	fffffc0c 	.word	0xfffffc0c
 8005a54:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a58:	4b24      	ldr	r3, [pc, #144]	; (8005aec <HAL_RCC_OscConfig+0x854>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1e7      	bne.n	8005a34 <HAL_RCC_OscConfig+0x79c>
 8005a64:	e03d      	b.n	8005ae2 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005a66:	4b21      	ldr	r3, [pc, #132]	; (8005aec <HAL_RCC_OscConfig+0x854>)
 8005a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005a6c:	4b1f      	ldr	r3, [pc, #124]	; (8005aec <HAL_RCC_OscConfig+0x854>)
 8005a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a70:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d031      	beq.n	8005ade <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	f003 0203 	and.w	r2, r3, #3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d12a      	bne.n	8005ade <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	091b      	lsrs	r3, r3, #4
 8005a8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d122      	bne.n	8005ade <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d11a      	bne.n	8005ade <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	0a5b      	lsrs	r3, r3, #9
 8005aac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d111      	bne.n	8005ade <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	0c1b      	lsrs	r3, r3, #16
 8005abe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d108      	bne.n	8005ade <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	0e1b      	lsrs	r3, r3, #24
 8005ad0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d001      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e000      	b.n	8005ae4 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3730      	adds	r7, #48	; 0x30
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	58024400 	.word	0x58024400

08005af0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d101      	bne.n	8005b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e19c      	b.n	8005e3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b04:	4b8a      	ldr	r3, [pc, #552]	; (8005d30 <HAL_RCC_ClockConfig+0x240>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 030f 	and.w	r3, r3, #15
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d910      	bls.n	8005b34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b12:	4b87      	ldr	r3, [pc, #540]	; (8005d30 <HAL_RCC_ClockConfig+0x240>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f023 020f 	bic.w	r2, r3, #15
 8005b1a:	4985      	ldr	r1, [pc, #532]	; (8005d30 <HAL_RCC_ClockConfig+0x240>)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b22:	4b83      	ldr	r3, [pc, #524]	; (8005d30 <HAL_RCC_ClockConfig+0x240>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 030f 	and.w	r3, r3, #15
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d001      	beq.n	8005b34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e184      	b.n	8005e3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0304 	and.w	r3, r3, #4
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d010      	beq.n	8005b62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	691a      	ldr	r2, [r3, #16]
 8005b44:	4b7b      	ldr	r3, [pc, #492]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d908      	bls.n	8005b62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b50:	4b78      	ldr	r3, [pc, #480]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	4975      	ldr	r1, [pc, #468]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0308 	and.w	r3, r3, #8
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d010      	beq.n	8005b90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	695a      	ldr	r2, [r3, #20]
 8005b72:	4b70      	ldr	r3, [pc, #448]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d908      	bls.n	8005b90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b7e:	4b6d      	ldr	r3, [pc, #436]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	496a      	ldr	r1, [pc, #424]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0310 	and.w	r3, r3, #16
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d010      	beq.n	8005bbe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	699a      	ldr	r2, [r3, #24]
 8005ba0:	4b64      	ldr	r3, [pc, #400]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005ba2:	69db      	ldr	r3, [r3, #28]
 8005ba4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d908      	bls.n	8005bbe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005bac:	4b61      	ldr	r3, [pc, #388]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	495e      	ldr	r1, [pc, #376]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0320 	and.w	r3, r3, #32
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d010      	beq.n	8005bec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69da      	ldr	r2, [r3, #28]
 8005bce:	4b59      	ldr	r3, [pc, #356]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d908      	bls.n	8005bec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005bda:	4b56      	ldr	r3, [pc, #344]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	4953      	ldr	r1, [pc, #332]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d010      	beq.n	8005c1a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68da      	ldr	r2, [r3, #12]
 8005bfc:	4b4d      	ldr	r3, [pc, #308]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	f003 030f 	and.w	r3, r3, #15
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d908      	bls.n	8005c1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c08:	4b4a      	ldr	r3, [pc, #296]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	f023 020f 	bic.w	r2, r3, #15
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	4947      	ldr	r1, [pc, #284]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d055      	beq.n	8005cd2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005c26:	4b43      	ldr	r3, [pc, #268]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	4940      	ldr	r1, [pc, #256]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d107      	bne.n	8005c50 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c40:	4b3c      	ldr	r3, [pc, #240]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d121      	bne.n	8005c90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e0f6      	b.n	8005e3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	2b03      	cmp	r3, #3
 8005c56:	d107      	bne.n	8005c68 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c58:	4b36      	ldr	r3, [pc, #216]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d115      	bne.n	8005c90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e0ea      	b.n	8005e3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d107      	bne.n	8005c80 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c70:	4b30      	ldr	r3, [pc, #192]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d109      	bne.n	8005c90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e0de      	b.n	8005e3e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c80:	4b2c      	ldr	r3, [pc, #176]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0304 	and.w	r3, r3, #4
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e0d6      	b.n	8005e3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c90:	4b28      	ldr	r3, [pc, #160]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	f023 0207 	bic.w	r2, r3, #7
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	4925      	ldr	r1, [pc, #148]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca2:	f7fc fdef 	bl	8002884 <HAL_GetTick>
 8005ca6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ca8:	e00a      	b.n	8005cc0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005caa:	f7fc fdeb 	bl	8002884 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d901      	bls.n	8005cc0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e0be      	b.n	8005e3e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cc0:	4b1c      	ldr	r3, [pc, #112]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	00db      	lsls	r3, r3, #3
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d1eb      	bne.n	8005caa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d010      	beq.n	8005d00 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68da      	ldr	r2, [r3, #12]
 8005ce2:	4b14      	ldr	r3, [pc, #80]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	f003 030f 	and.w	r3, r3, #15
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d208      	bcs.n	8005d00 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cee:	4b11      	ldr	r3, [pc, #68]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	f023 020f 	bic.w	r2, r3, #15
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	490e      	ldr	r1, [pc, #56]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d00:	4b0b      	ldr	r3, [pc, #44]	; (8005d30 <HAL_RCC_ClockConfig+0x240>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 030f 	and.w	r3, r3, #15
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d214      	bcs.n	8005d38 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d0e:	4b08      	ldr	r3, [pc, #32]	; (8005d30 <HAL_RCC_ClockConfig+0x240>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f023 020f 	bic.w	r2, r3, #15
 8005d16:	4906      	ldr	r1, [pc, #24]	; (8005d30 <HAL_RCC_ClockConfig+0x240>)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d1e:	4b04      	ldr	r3, [pc, #16]	; (8005d30 <HAL_RCC_ClockConfig+0x240>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d005      	beq.n	8005d38 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e086      	b.n	8005e3e <HAL_RCC_ClockConfig+0x34e>
 8005d30:	52002000 	.word	0x52002000
 8005d34:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d010      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691a      	ldr	r2, [r3, #16]
 8005d48:	4b3f      	ldr	r3, [pc, #252]	; (8005e48 <HAL_RCC_ClockConfig+0x358>)
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d208      	bcs.n	8005d66 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d54:	4b3c      	ldr	r3, [pc, #240]	; (8005e48 <HAL_RCC_ClockConfig+0x358>)
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	4939      	ldr	r1, [pc, #228]	; (8005e48 <HAL_RCC_ClockConfig+0x358>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0308 	and.w	r3, r3, #8
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d010      	beq.n	8005d94 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	695a      	ldr	r2, [r3, #20]
 8005d76:	4b34      	ldr	r3, [pc, #208]	; (8005e48 <HAL_RCC_ClockConfig+0x358>)
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d208      	bcs.n	8005d94 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d82:	4b31      	ldr	r3, [pc, #196]	; (8005e48 <HAL_RCC_ClockConfig+0x358>)
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	492e      	ldr	r1, [pc, #184]	; (8005e48 <HAL_RCC_ClockConfig+0x358>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0310 	and.w	r3, r3, #16
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d010      	beq.n	8005dc2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	699a      	ldr	r2, [r3, #24]
 8005da4:	4b28      	ldr	r3, [pc, #160]	; (8005e48 <HAL_RCC_ClockConfig+0x358>)
 8005da6:	69db      	ldr	r3, [r3, #28]
 8005da8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d208      	bcs.n	8005dc2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005db0:	4b25      	ldr	r3, [pc, #148]	; (8005e48 <HAL_RCC_ClockConfig+0x358>)
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	4922      	ldr	r1, [pc, #136]	; (8005e48 <HAL_RCC_ClockConfig+0x358>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0320 	and.w	r3, r3, #32
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d010      	beq.n	8005df0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	69da      	ldr	r2, [r3, #28]
 8005dd2:	4b1d      	ldr	r3, [pc, #116]	; (8005e48 <HAL_RCC_ClockConfig+0x358>)
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d208      	bcs.n	8005df0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005dde:	4b1a      	ldr	r3, [pc, #104]	; (8005e48 <HAL_RCC_ClockConfig+0x358>)
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	4917      	ldr	r1, [pc, #92]	; (8005e48 <HAL_RCC_ClockConfig+0x358>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005df0:	f000 f834 	bl	8005e5c <HAL_RCC_GetSysClockFreq>
 8005df4:	4602      	mov	r2, r0
 8005df6:	4b14      	ldr	r3, [pc, #80]	; (8005e48 <HAL_RCC_ClockConfig+0x358>)
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	0a1b      	lsrs	r3, r3, #8
 8005dfc:	f003 030f 	and.w	r3, r3, #15
 8005e00:	4912      	ldr	r1, [pc, #72]	; (8005e4c <HAL_RCC_ClockConfig+0x35c>)
 8005e02:	5ccb      	ldrb	r3, [r1, r3]
 8005e04:	f003 031f 	and.w	r3, r3, #31
 8005e08:	fa22 f303 	lsr.w	r3, r2, r3
 8005e0c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e0e:	4b0e      	ldr	r3, [pc, #56]	; (8005e48 <HAL_RCC_ClockConfig+0x358>)
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	f003 030f 	and.w	r3, r3, #15
 8005e16:	4a0d      	ldr	r2, [pc, #52]	; (8005e4c <HAL_RCC_ClockConfig+0x35c>)
 8005e18:	5cd3      	ldrb	r3, [r2, r3]
 8005e1a:	f003 031f 	and.w	r3, r3, #31
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	fa22 f303 	lsr.w	r3, r2, r3
 8005e24:	4a0a      	ldr	r2, [pc, #40]	; (8005e50 <HAL_RCC_ClockConfig+0x360>)
 8005e26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e28:	4a0a      	ldr	r2, [pc, #40]	; (8005e54 <HAL_RCC_ClockConfig+0x364>)
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005e2e:	4b0a      	ldr	r3, [pc, #40]	; (8005e58 <HAL_RCC_ClockConfig+0x368>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fc fcdc 	bl	80027f0 <HAL_InitTick>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3718      	adds	r7, #24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	58024400 	.word	0x58024400
 8005e4c:	0800c154 	.word	0x0800c154
 8005e50:	2400000c 	.word	0x2400000c
 8005e54:	24000008 	.word	0x24000008
 8005e58:	24000010 	.word	0x24000010

08005e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b089      	sub	sp, #36	; 0x24
 8005e60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e62:	4bb3      	ldr	r3, [pc, #716]	; (8006130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e6a:	2b18      	cmp	r3, #24
 8005e6c:	f200 8155 	bhi.w	800611a <HAL_RCC_GetSysClockFreq+0x2be>
 8005e70:	a201      	add	r2, pc, #4	; (adr r2, 8005e78 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e76:	bf00      	nop
 8005e78:	08005edd 	.word	0x08005edd
 8005e7c:	0800611b 	.word	0x0800611b
 8005e80:	0800611b 	.word	0x0800611b
 8005e84:	0800611b 	.word	0x0800611b
 8005e88:	0800611b 	.word	0x0800611b
 8005e8c:	0800611b 	.word	0x0800611b
 8005e90:	0800611b 	.word	0x0800611b
 8005e94:	0800611b 	.word	0x0800611b
 8005e98:	08005f03 	.word	0x08005f03
 8005e9c:	0800611b 	.word	0x0800611b
 8005ea0:	0800611b 	.word	0x0800611b
 8005ea4:	0800611b 	.word	0x0800611b
 8005ea8:	0800611b 	.word	0x0800611b
 8005eac:	0800611b 	.word	0x0800611b
 8005eb0:	0800611b 	.word	0x0800611b
 8005eb4:	0800611b 	.word	0x0800611b
 8005eb8:	08005f09 	.word	0x08005f09
 8005ebc:	0800611b 	.word	0x0800611b
 8005ec0:	0800611b 	.word	0x0800611b
 8005ec4:	0800611b 	.word	0x0800611b
 8005ec8:	0800611b 	.word	0x0800611b
 8005ecc:	0800611b 	.word	0x0800611b
 8005ed0:	0800611b 	.word	0x0800611b
 8005ed4:	0800611b 	.word	0x0800611b
 8005ed8:	08005f0f 	.word	0x08005f0f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005edc:	4b94      	ldr	r3, [pc, #592]	; (8006130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0320 	and.w	r3, r3, #32
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d009      	beq.n	8005efc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ee8:	4b91      	ldr	r3, [pc, #580]	; (8006130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	08db      	lsrs	r3, r3, #3
 8005eee:	f003 0303 	and.w	r3, r3, #3
 8005ef2:	4a90      	ldr	r2, [pc, #576]	; (8006134 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005efa:	e111      	b.n	8006120 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005efc:	4b8d      	ldr	r3, [pc, #564]	; (8006134 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005efe:	61bb      	str	r3, [r7, #24]
    break;
 8005f00:	e10e      	b.n	8006120 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005f02:	4b8d      	ldr	r3, [pc, #564]	; (8006138 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f04:	61bb      	str	r3, [r7, #24]
    break;
 8005f06:	e10b      	b.n	8006120 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005f08:	4b8c      	ldr	r3, [pc, #560]	; (800613c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005f0a:	61bb      	str	r3, [r7, #24]
    break;
 8005f0c:	e108      	b.n	8006120 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f0e:	4b88      	ldr	r3, [pc, #544]	; (8006130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f12:	f003 0303 	and.w	r3, r3, #3
 8005f16:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005f18:	4b85      	ldr	r3, [pc, #532]	; (8006130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1c:	091b      	lsrs	r3, r3, #4
 8005f1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f22:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005f24:	4b82      	ldr	r3, [pc, #520]	; (8006130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005f2e:	4b80      	ldr	r3, [pc, #512]	; (8006130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f32:	08db      	lsrs	r3, r3, #3
 8005f34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	fb02 f303 	mul.w	r3, r2, r3
 8005f3e:	ee07 3a90 	vmov	s15, r3
 8005f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f46:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f000 80e1 	beq.w	8006114 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	f000 8083 	beq.w	8006060 <HAL_RCC_GetSysClockFreq+0x204>
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	f200 80a1 	bhi.w	80060a4 <HAL_RCC_GetSysClockFreq+0x248>
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d003      	beq.n	8005f70 <HAL_RCC_GetSysClockFreq+0x114>
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d056      	beq.n	800601c <HAL_RCC_GetSysClockFreq+0x1c0>
 8005f6e:	e099      	b.n	80060a4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f70:	4b6f      	ldr	r3, [pc, #444]	; (8006130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0320 	and.w	r3, r3, #32
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d02d      	beq.n	8005fd8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f7c:	4b6c      	ldr	r3, [pc, #432]	; (8006130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	08db      	lsrs	r3, r3, #3
 8005f82:	f003 0303 	and.w	r3, r3, #3
 8005f86:	4a6b      	ldr	r2, [pc, #428]	; (8006134 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f88:	fa22 f303 	lsr.w	r3, r2, r3
 8005f8c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	ee07 3a90 	vmov	s15, r3
 8005f94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	ee07 3a90 	vmov	s15, r3
 8005f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fa6:	4b62      	ldr	r3, [pc, #392]	; (8006130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fae:	ee07 3a90 	vmov	s15, r3
 8005fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006140 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005fd6:	e087      	b.n	80060e8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	ee07 3a90 	vmov	s15, r3
 8005fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006144 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fea:	4b51      	ldr	r3, [pc, #324]	; (8006130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ff2:	ee07 3a90 	vmov	s15, r3
 8005ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ffa:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ffe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006140 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800600a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800600e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006016:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800601a:	e065      	b.n	80060e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	ee07 3a90 	vmov	s15, r3
 8006022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006026:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006148 <HAL_RCC_GetSysClockFreq+0x2ec>
 800602a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800602e:	4b40      	ldr	r3, [pc, #256]	; (8006130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006036:	ee07 3a90 	vmov	s15, r3
 800603a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800603e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006042:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006140 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800604a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800604e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800605a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800605e:	e043      	b.n	80060e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	ee07 3a90 	vmov	s15, r3
 8006066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800606a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800614c <HAL_RCC_GetSysClockFreq+0x2f0>
 800606e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006072:	4b2f      	ldr	r3, [pc, #188]	; (8006130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800607a:	ee07 3a90 	vmov	s15, r3
 800607e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006082:	ed97 6a02 	vldr	s12, [r7, #8]
 8006086:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006140 <HAL_RCC_GetSysClockFreq+0x2e4>
 800608a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800608e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800609a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800609e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060a2:	e021      	b.n	80060e8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	ee07 3a90 	vmov	s15, r3
 80060aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006148 <HAL_RCC_GetSysClockFreq+0x2ec>
 80060b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060b6:	4b1e      	ldr	r3, [pc, #120]	; (8006130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060be:	ee07 3a90 	vmov	s15, r3
 80060c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80060ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006140 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060e6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80060e8:	4b11      	ldr	r3, [pc, #68]	; (8006130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ec:	0a5b      	lsrs	r3, r3, #9
 80060ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060f2:	3301      	adds	r3, #1
 80060f4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	ee07 3a90 	vmov	s15, r3
 80060fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006100:	edd7 6a07 	vldr	s13, [r7, #28]
 8006104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800610c:	ee17 3a90 	vmov	r3, s15
 8006110:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006112:	e005      	b.n	8006120 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	61bb      	str	r3, [r7, #24]
    break;
 8006118:	e002      	b.n	8006120 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800611a:	4b07      	ldr	r3, [pc, #28]	; (8006138 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800611c:	61bb      	str	r3, [r7, #24]
    break;
 800611e:	bf00      	nop
  }

  return sysclockfreq;
 8006120:	69bb      	ldr	r3, [r7, #24]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3724      	adds	r7, #36	; 0x24
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	58024400 	.word	0x58024400
 8006134:	03d09000 	.word	0x03d09000
 8006138:	003d0900 	.word	0x003d0900
 800613c:	007a1200 	.word	0x007a1200
 8006140:	46000000 	.word	0x46000000
 8006144:	4c742400 	.word	0x4c742400
 8006148:	4a742400 	.word	0x4a742400
 800614c:	4af42400 	.word	0x4af42400

08006150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006156:	f7ff fe81 	bl	8005e5c <HAL_RCC_GetSysClockFreq>
 800615a:	4602      	mov	r2, r0
 800615c:	4b10      	ldr	r3, [pc, #64]	; (80061a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	0a1b      	lsrs	r3, r3, #8
 8006162:	f003 030f 	and.w	r3, r3, #15
 8006166:	490f      	ldr	r1, [pc, #60]	; (80061a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006168:	5ccb      	ldrb	r3, [r1, r3]
 800616a:	f003 031f 	and.w	r3, r3, #31
 800616e:	fa22 f303 	lsr.w	r3, r2, r3
 8006172:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006174:	4b0a      	ldr	r3, [pc, #40]	; (80061a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	f003 030f 	and.w	r3, r3, #15
 800617c:	4a09      	ldr	r2, [pc, #36]	; (80061a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800617e:	5cd3      	ldrb	r3, [r2, r3]
 8006180:	f003 031f 	and.w	r3, r3, #31
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	fa22 f303 	lsr.w	r3, r2, r3
 800618a:	4a07      	ldr	r2, [pc, #28]	; (80061a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800618c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800618e:	4a07      	ldr	r2, [pc, #28]	; (80061ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006194:	4b04      	ldr	r3, [pc, #16]	; (80061a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006196:	681b      	ldr	r3, [r3, #0]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	58024400 	.word	0x58024400
 80061a4:	0800c154 	.word	0x0800c154
 80061a8:	2400000c 	.word	0x2400000c
 80061ac:	24000008 	.word	0x24000008

080061b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80061b4:	f7ff ffcc 	bl	8006150 <HAL_RCC_GetHCLKFreq>
 80061b8:	4602      	mov	r2, r0
 80061ba:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	091b      	lsrs	r3, r3, #4
 80061c0:	f003 0307 	and.w	r3, r3, #7
 80061c4:	4904      	ldr	r1, [pc, #16]	; (80061d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80061c6:	5ccb      	ldrb	r3, [r1, r3]
 80061c8:	f003 031f 	and.w	r3, r3, #31
 80061cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	58024400 	.word	0x58024400
 80061d8:	0800c154 	.word	0x0800c154

080061dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80061e0:	f7ff ffb6 	bl	8006150 <HAL_RCC_GetHCLKFreq>
 80061e4:	4602      	mov	r2, r0
 80061e6:	4b06      	ldr	r3, [pc, #24]	; (8006200 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	0a1b      	lsrs	r3, r3, #8
 80061ec:	f003 0307 	and.w	r3, r3, #7
 80061f0:	4904      	ldr	r1, [pc, #16]	; (8006204 <HAL_RCC_GetPCLK2Freq+0x28>)
 80061f2:	5ccb      	ldrb	r3, [r1, r3]
 80061f4:	f003 031f 	and.w	r3, r3, #31
 80061f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	58024400 	.word	0x58024400
 8006204:	0800c154 	.word	0x0800c154

08006208 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006210:	2300      	movs	r3, #0
 8006212:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006214:	2300      	movs	r3, #0
 8006216:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d03f      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006228:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800622c:	d02a      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800622e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006232:	d824      	bhi.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006234:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006238:	d018      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800623a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800623e:	d81e      	bhi.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006240:	2b00      	cmp	r3, #0
 8006242:	d003      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006244:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006248:	d007      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800624a:	e018      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800624c:	4bab      	ldr	r3, [pc, #684]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800624e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006250:	4aaa      	ldr	r2, [pc, #680]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006256:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006258:	e015      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	3304      	adds	r3, #4
 800625e:	2102      	movs	r1, #2
 8006260:	4618      	mov	r0, r3
 8006262:	f001 fff3 	bl	800824c <RCCEx_PLL2_Config>
 8006266:	4603      	mov	r3, r0
 8006268:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800626a:	e00c      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	3324      	adds	r3, #36	; 0x24
 8006270:	2102      	movs	r1, #2
 8006272:	4618      	mov	r0, r3
 8006274:	f002 f89c 	bl	80083b0 <RCCEx_PLL3_Config>
 8006278:	4603      	mov	r3, r0
 800627a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800627c:	e003      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	75fb      	strb	r3, [r7, #23]
      break;
 8006282:	e000      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006284:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006286:	7dfb      	ldrb	r3, [r7, #23]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d109      	bne.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800628c:	4b9b      	ldr	r3, [pc, #620]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800628e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006290:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006298:	4998      	ldr	r1, [pc, #608]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800629a:	4313      	orrs	r3, r2
 800629c:	650b      	str	r3, [r1, #80]	; 0x50
 800629e:	e001      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a0:	7dfb      	ldrb	r3, [r7, #23]
 80062a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d03d      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b4:	2b04      	cmp	r3, #4
 80062b6:	d826      	bhi.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80062b8:	a201      	add	r2, pc, #4	; (adr r2, 80062c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80062ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062be:	bf00      	nop
 80062c0:	080062d5 	.word	0x080062d5
 80062c4:	080062e3 	.word	0x080062e3
 80062c8:	080062f5 	.word	0x080062f5
 80062cc:	0800630d 	.word	0x0800630d
 80062d0:	0800630d 	.word	0x0800630d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062d4:	4b89      	ldr	r3, [pc, #548]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d8:	4a88      	ldr	r2, [pc, #544]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062e0:	e015      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	3304      	adds	r3, #4
 80062e6:	2100      	movs	r1, #0
 80062e8:	4618      	mov	r0, r3
 80062ea:	f001 ffaf 	bl	800824c <RCCEx_PLL2_Config>
 80062ee:	4603      	mov	r3, r0
 80062f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062f2:	e00c      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	3324      	adds	r3, #36	; 0x24
 80062f8:	2100      	movs	r1, #0
 80062fa:	4618      	mov	r0, r3
 80062fc:	f002 f858 	bl	80083b0 <RCCEx_PLL3_Config>
 8006300:	4603      	mov	r3, r0
 8006302:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006304:	e003      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	75fb      	strb	r3, [r7, #23]
      break;
 800630a:	e000      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800630c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800630e:	7dfb      	ldrb	r3, [r7, #23]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d109      	bne.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006314:	4b79      	ldr	r3, [pc, #484]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006318:	f023 0207 	bic.w	r2, r3, #7
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006320:	4976      	ldr	r1, [pc, #472]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006322:	4313      	orrs	r3, r2
 8006324:	650b      	str	r3, [r1, #80]	; 0x50
 8006326:	e001      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006328:	7dfb      	ldrb	r3, [r7, #23]
 800632a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006334:	2b00      	cmp	r3, #0
 8006336:	d042      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800633c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006340:	d02b      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006346:	d825      	bhi.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006348:	2bc0      	cmp	r3, #192	; 0xc0
 800634a:	d028      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800634c:	2bc0      	cmp	r3, #192	; 0xc0
 800634e:	d821      	bhi.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006350:	2b80      	cmp	r3, #128	; 0x80
 8006352:	d016      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006354:	2b80      	cmp	r3, #128	; 0x80
 8006356:	d81d      	bhi.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006358:	2b00      	cmp	r3, #0
 800635a:	d002      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800635c:	2b40      	cmp	r3, #64	; 0x40
 800635e:	d007      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006360:	e018      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006362:	4b66      	ldr	r3, [pc, #408]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006366:	4a65      	ldr	r2, [pc, #404]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800636c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800636e:	e017      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	3304      	adds	r3, #4
 8006374:	2100      	movs	r1, #0
 8006376:	4618      	mov	r0, r3
 8006378:	f001 ff68 	bl	800824c <RCCEx_PLL2_Config>
 800637c:	4603      	mov	r3, r0
 800637e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006380:	e00e      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	3324      	adds	r3, #36	; 0x24
 8006386:	2100      	movs	r1, #0
 8006388:	4618      	mov	r0, r3
 800638a:	f002 f811 	bl	80083b0 <RCCEx_PLL3_Config>
 800638e:	4603      	mov	r3, r0
 8006390:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006392:	e005      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	75fb      	strb	r3, [r7, #23]
      break;
 8006398:	e002      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800639a:	bf00      	nop
 800639c:	e000      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800639e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063a0:	7dfb      	ldrb	r3, [r7, #23]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d109      	bne.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80063a6:	4b55      	ldr	r3, [pc, #340]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063aa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b2:	4952      	ldr	r1, [pc, #328]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	650b      	str	r3, [r1, #80]	; 0x50
 80063b8:	e001      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ba:	7dfb      	ldrb	r3, [r7, #23]
 80063bc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d049      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80063d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063d4:	d030      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80063d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063da:	d82a      	bhi.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80063dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80063e0:	d02c      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80063e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80063e6:	d824      	bhi.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80063e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063ec:	d018      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80063ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063f2:	d81e      	bhi.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d003      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80063f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063fc:	d007      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80063fe:	e018      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006400:	4b3e      	ldr	r3, [pc, #248]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006404:	4a3d      	ldr	r2, [pc, #244]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800640a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800640c:	e017      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	3304      	adds	r3, #4
 8006412:	2100      	movs	r1, #0
 8006414:	4618      	mov	r0, r3
 8006416:	f001 ff19 	bl	800824c <RCCEx_PLL2_Config>
 800641a:	4603      	mov	r3, r0
 800641c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800641e:	e00e      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	3324      	adds	r3, #36	; 0x24
 8006424:	2100      	movs	r1, #0
 8006426:	4618      	mov	r0, r3
 8006428:	f001 ffc2 	bl	80083b0 <RCCEx_PLL3_Config>
 800642c:	4603      	mov	r3, r0
 800642e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006430:	e005      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	75fb      	strb	r3, [r7, #23]
      break;
 8006436:	e002      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006438:	bf00      	nop
 800643a:	e000      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800643c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800643e:	7dfb      	ldrb	r3, [r7, #23]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10a      	bne.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006444:	4b2d      	ldr	r3, [pc, #180]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006448:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006452:	492a      	ldr	r1, [pc, #168]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006454:	4313      	orrs	r3, r2
 8006456:	658b      	str	r3, [r1, #88]	; 0x58
 8006458:	e001      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800645a:	7dfb      	ldrb	r3, [r7, #23]
 800645c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006466:	2b00      	cmp	r3, #0
 8006468:	d04c      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006470:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006474:	d030      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006476:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800647a:	d82a      	bhi.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800647c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006480:	d02c      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006482:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006486:	d824      	bhi.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006488:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800648c:	d018      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800648e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006492:	d81e      	bhi.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006494:	2b00      	cmp	r3, #0
 8006496:	d003      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800649c:	d007      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800649e:	e018      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064a0:	4b16      	ldr	r3, [pc, #88]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a4:	4a15      	ldr	r2, [pc, #84]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064ac:	e017      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	3304      	adds	r3, #4
 80064b2:	2100      	movs	r1, #0
 80064b4:	4618      	mov	r0, r3
 80064b6:	f001 fec9 	bl	800824c <RCCEx_PLL2_Config>
 80064ba:	4603      	mov	r3, r0
 80064bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80064be:	e00e      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	3324      	adds	r3, #36	; 0x24
 80064c4:	2100      	movs	r1, #0
 80064c6:	4618      	mov	r0, r3
 80064c8:	f001 ff72 	bl	80083b0 <RCCEx_PLL3_Config>
 80064cc:	4603      	mov	r3, r0
 80064ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064d0:	e005      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	75fb      	strb	r3, [r7, #23]
      break;
 80064d6:	e002      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80064d8:	bf00      	nop
 80064da:	e000      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80064dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064de:	7dfb      	ldrb	r3, [r7, #23]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10d      	bne.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80064e4:	4b05      	ldr	r3, [pc, #20]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80064f2:	4902      	ldr	r1, [pc, #8]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	658b      	str	r3, [r1, #88]	; 0x58
 80064f8:	e004      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80064fa:	bf00      	nop
 80064fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006500:	7dfb      	ldrb	r3, [r7, #23]
 8006502:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d032      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006514:	2b30      	cmp	r3, #48	; 0x30
 8006516:	d01c      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006518:	2b30      	cmp	r3, #48	; 0x30
 800651a:	d817      	bhi.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800651c:	2b20      	cmp	r3, #32
 800651e:	d00c      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006520:	2b20      	cmp	r3, #32
 8006522:	d813      	bhi.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006524:	2b00      	cmp	r3, #0
 8006526:	d016      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006528:	2b10      	cmp	r3, #16
 800652a:	d10f      	bne.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800652c:	4baf      	ldr	r3, [pc, #700]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800652e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006530:	4aae      	ldr	r2, [pc, #696]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006536:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006538:	e00e      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	3304      	adds	r3, #4
 800653e:	2102      	movs	r1, #2
 8006540:	4618      	mov	r0, r3
 8006542:	f001 fe83 	bl	800824c <RCCEx_PLL2_Config>
 8006546:	4603      	mov	r3, r0
 8006548:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800654a:	e005      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	75fb      	strb	r3, [r7, #23]
      break;
 8006550:	e002      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006552:	bf00      	nop
 8006554:	e000      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006556:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006558:	7dfb      	ldrb	r3, [r7, #23]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d109      	bne.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800655e:	4ba3      	ldr	r3, [pc, #652]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006562:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800656a:	49a0      	ldr	r1, [pc, #640]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800656c:	4313      	orrs	r3, r2
 800656e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006570:	e001      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006572:	7dfb      	ldrb	r3, [r7, #23]
 8006574:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d047      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006586:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800658a:	d030      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800658c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006590:	d82a      	bhi.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006592:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006596:	d02c      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006598:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800659c:	d824      	bhi.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800659e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065a2:	d018      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80065a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065a8:	d81e      	bhi.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80065ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b2:	d007      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80065b4:	e018      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065b6:	4b8d      	ldr	r3, [pc, #564]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ba:	4a8c      	ldr	r2, [pc, #560]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80065c2:	e017      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	3304      	adds	r3, #4
 80065c8:	2100      	movs	r1, #0
 80065ca:	4618      	mov	r0, r3
 80065cc:	f001 fe3e 	bl	800824c <RCCEx_PLL2_Config>
 80065d0:	4603      	mov	r3, r0
 80065d2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80065d4:	e00e      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	3324      	adds	r3, #36	; 0x24
 80065da:	2100      	movs	r1, #0
 80065dc:	4618      	mov	r0, r3
 80065de:	f001 fee7 	bl	80083b0 <RCCEx_PLL3_Config>
 80065e2:	4603      	mov	r3, r0
 80065e4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80065e6:	e005      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	75fb      	strb	r3, [r7, #23]
      break;
 80065ec:	e002      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80065ee:	bf00      	nop
 80065f0:	e000      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80065f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065f4:	7dfb      	ldrb	r3, [r7, #23]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d109      	bne.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80065fa:	4b7c      	ldr	r3, [pc, #496]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065fe:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006606:	4979      	ldr	r1, [pc, #484]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006608:	4313      	orrs	r3, r2
 800660a:	650b      	str	r3, [r1, #80]	; 0x50
 800660c:	e001      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800660e:	7dfb      	ldrb	r3, [r7, #23]
 8006610:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d049      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006622:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006626:	d02e      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8006628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800662c:	d828      	bhi.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800662e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006632:	d02a      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8006634:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006638:	d822      	bhi.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800663a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800663e:	d026      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006640:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006644:	d81c      	bhi.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006646:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800664a:	d010      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800664c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006650:	d816      	bhi.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006652:	2b00      	cmp	r3, #0
 8006654:	d01d      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8006656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800665a:	d111      	bne.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	3304      	adds	r3, #4
 8006660:	2101      	movs	r1, #1
 8006662:	4618      	mov	r0, r3
 8006664:	f001 fdf2 	bl	800824c <RCCEx_PLL2_Config>
 8006668:	4603      	mov	r3, r0
 800666a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800666c:	e012      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3324      	adds	r3, #36	; 0x24
 8006672:	2101      	movs	r1, #1
 8006674:	4618      	mov	r0, r3
 8006676:	f001 fe9b 	bl	80083b0 <RCCEx_PLL3_Config>
 800667a:	4603      	mov	r3, r0
 800667c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800667e:	e009      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	75fb      	strb	r3, [r7, #23]
      break;
 8006684:	e006      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006686:	bf00      	nop
 8006688:	e004      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800668a:	bf00      	nop
 800668c:	e002      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800668e:	bf00      	nop
 8006690:	e000      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006692:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006694:	7dfb      	ldrb	r3, [r7, #23]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d109      	bne.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800669a:	4b54      	ldr	r3, [pc, #336]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800669c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800669e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066a6:	4951      	ldr	r1, [pc, #324]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	650b      	str	r3, [r1, #80]	; 0x50
 80066ac:	e001      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ae:	7dfb      	ldrb	r3, [r7, #23]
 80066b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d04b      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80066c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066c8:	d02e      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80066ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066ce:	d828      	bhi.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80066d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066d4:	d02a      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80066d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066da:	d822      	bhi.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80066dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066e0:	d026      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80066e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066e6:	d81c      	bhi.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80066e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066ec:	d010      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80066ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066f2:	d816      	bhi.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d01d      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80066f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066fc:	d111      	bne.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	3304      	adds	r3, #4
 8006702:	2101      	movs	r1, #1
 8006704:	4618      	mov	r0, r3
 8006706:	f001 fda1 	bl	800824c <RCCEx_PLL2_Config>
 800670a:	4603      	mov	r3, r0
 800670c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800670e:	e012      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	3324      	adds	r3, #36	; 0x24
 8006714:	2101      	movs	r1, #1
 8006716:	4618      	mov	r0, r3
 8006718:	f001 fe4a 	bl	80083b0 <RCCEx_PLL3_Config>
 800671c:	4603      	mov	r3, r0
 800671e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006720:	e009      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	75fb      	strb	r3, [r7, #23]
      break;
 8006726:	e006      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006728:	bf00      	nop
 800672a:	e004      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800672c:	bf00      	nop
 800672e:	e002      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006730:	bf00      	nop
 8006732:	e000      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006734:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006736:	7dfb      	ldrb	r3, [r7, #23]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10a      	bne.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800673c:	4b2b      	ldr	r3, [pc, #172]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800673e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006740:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800674a:	4928      	ldr	r1, [pc, #160]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800674c:	4313      	orrs	r3, r2
 800674e:	658b      	str	r3, [r1, #88]	; 0x58
 8006750:	e001      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006752:	7dfb      	ldrb	r3, [r7, #23]
 8006754:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d02f      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800676a:	d00e      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800676c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006770:	d814      	bhi.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006772:	2b00      	cmp	r3, #0
 8006774:	d015      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006776:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800677a:	d10f      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800677c:	4b1b      	ldr	r3, [pc, #108]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800677e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006780:	4a1a      	ldr	r2, [pc, #104]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006786:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006788:	e00c      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	3304      	adds	r3, #4
 800678e:	2101      	movs	r1, #1
 8006790:	4618      	mov	r0, r3
 8006792:	f001 fd5b 	bl	800824c <RCCEx_PLL2_Config>
 8006796:	4603      	mov	r3, r0
 8006798:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800679a:	e003      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	75fb      	strb	r3, [r7, #23]
      break;
 80067a0:	e000      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80067a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067a4:	7dfb      	ldrb	r3, [r7, #23]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d109      	bne.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80067aa:	4b10      	ldr	r3, [pc, #64]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067b6:	490d      	ldr	r1, [pc, #52]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	650b      	str	r3, [r1, #80]	; 0x50
 80067bc:	e001      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067be:	7dfb      	ldrb	r3, [r7, #23]
 80067c0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d033      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d2:	2b03      	cmp	r3, #3
 80067d4:	d81c      	bhi.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80067d6:	a201      	add	r2, pc, #4	; (adr r2, 80067dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80067d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067dc:	08006817 	.word	0x08006817
 80067e0:	080067f1 	.word	0x080067f1
 80067e4:	080067ff 	.word	0x080067ff
 80067e8:	08006817 	.word	0x08006817
 80067ec:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067f0:	4bb8      	ldr	r3, [pc, #736]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f4:	4ab7      	ldr	r2, [pc, #732]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80067fc:	e00c      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	3304      	adds	r3, #4
 8006802:	2102      	movs	r1, #2
 8006804:	4618      	mov	r0, r3
 8006806:	f001 fd21 	bl	800824c <RCCEx_PLL2_Config>
 800680a:	4603      	mov	r3, r0
 800680c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800680e:	e003      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	75fb      	strb	r3, [r7, #23]
      break;
 8006814:	e000      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006816:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006818:	7dfb      	ldrb	r3, [r7, #23]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d109      	bne.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800681e:	4bad      	ldr	r3, [pc, #692]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006822:	f023 0203 	bic.w	r2, r3, #3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800682a:	49aa      	ldr	r1, [pc, #680]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800682c:	4313      	orrs	r3, r2
 800682e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006830:	e001      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006832:	7dfb      	ldrb	r3, [r7, #23]
 8006834:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800683e:	2b00      	cmp	r3, #0
 8006840:	f000 8086 	beq.w	8006950 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006844:	4ba4      	ldr	r3, [pc, #656]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4aa3      	ldr	r2, [pc, #652]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800684a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800684e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006850:	f7fc f818 	bl	8002884 <HAL_GetTick>
 8006854:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006856:	e009      	b.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006858:	f7fc f814 	bl	8002884 <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	2b64      	cmp	r3, #100	; 0x64
 8006864:	d902      	bls.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	75fb      	strb	r3, [r7, #23]
        break;
 800686a:	e005      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800686c:	4b9a      	ldr	r3, [pc, #616]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006874:	2b00      	cmp	r3, #0
 8006876:	d0ef      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006878:	7dfb      	ldrb	r3, [r7, #23]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d166      	bne.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800687e:	4b95      	ldr	r3, [pc, #596]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006880:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006888:	4053      	eors	r3, r2
 800688a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800688e:	2b00      	cmp	r3, #0
 8006890:	d013      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006892:	4b90      	ldr	r3, [pc, #576]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800689a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800689c:	4b8d      	ldr	r3, [pc, #564]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800689e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a0:	4a8c      	ldr	r2, [pc, #560]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068a6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068a8:	4b8a      	ldr	r3, [pc, #552]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ac:	4a89      	ldr	r2, [pc, #548]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068b2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80068b4:	4a87      	ldr	r2, [pc, #540]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068c4:	d115      	bne.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c6:	f7fb ffdd 	bl	8002884 <HAL_GetTick>
 80068ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068cc:	e00b      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068ce:	f7fb ffd9 	bl	8002884 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80068dc:	4293      	cmp	r3, r2
 80068de:	d902      	bls.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	75fb      	strb	r3, [r7, #23]
            break;
 80068e4:	e005      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068e6:	4b7b      	ldr	r3, [pc, #492]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d0ed      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80068f2:	7dfb      	ldrb	r3, [r7, #23]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d126      	bne.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006902:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006906:	d10d      	bne.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006908:	4b72      	ldr	r3, [pc, #456]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006916:	0919      	lsrs	r1, r3, #4
 8006918:	4b70      	ldr	r3, [pc, #448]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800691a:	400b      	ands	r3, r1
 800691c:	496d      	ldr	r1, [pc, #436]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800691e:	4313      	orrs	r3, r2
 8006920:	610b      	str	r3, [r1, #16]
 8006922:	e005      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006924:	4b6b      	ldr	r3, [pc, #428]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	4a6a      	ldr	r2, [pc, #424]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800692a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800692e:	6113      	str	r3, [r2, #16]
 8006930:	4b68      	ldr	r3, [pc, #416]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006932:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800693a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800693e:	4965      	ldr	r1, [pc, #404]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006940:	4313      	orrs	r3, r2
 8006942:	670b      	str	r3, [r1, #112]	; 0x70
 8006944:	e004      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006946:	7dfb      	ldrb	r3, [r7, #23]
 8006948:	75bb      	strb	r3, [r7, #22]
 800694a:	e001      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800694c:	7dfb      	ldrb	r3, [r7, #23]
 800694e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b00      	cmp	r3, #0
 800695a:	d07e      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006960:	2b28      	cmp	r3, #40	; 0x28
 8006962:	d867      	bhi.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006964:	a201      	add	r2, pc, #4	; (adr r2, 800696c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696a:	bf00      	nop
 800696c:	08006a3b 	.word	0x08006a3b
 8006970:	08006a35 	.word	0x08006a35
 8006974:	08006a35 	.word	0x08006a35
 8006978:	08006a35 	.word	0x08006a35
 800697c:	08006a35 	.word	0x08006a35
 8006980:	08006a35 	.word	0x08006a35
 8006984:	08006a35 	.word	0x08006a35
 8006988:	08006a35 	.word	0x08006a35
 800698c:	08006a11 	.word	0x08006a11
 8006990:	08006a35 	.word	0x08006a35
 8006994:	08006a35 	.word	0x08006a35
 8006998:	08006a35 	.word	0x08006a35
 800699c:	08006a35 	.word	0x08006a35
 80069a0:	08006a35 	.word	0x08006a35
 80069a4:	08006a35 	.word	0x08006a35
 80069a8:	08006a35 	.word	0x08006a35
 80069ac:	08006a23 	.word	0x08006a23
 80069b0:	08006a35 	.word	0x08006a35
 80069b4:	08006a35 	.word	0x08006a35
 80069b8:	08006a35 	.word	0x08006a35
 80069bc:	08006a35 	.word	0x08006a35
 80069c0:	08006a35 	.word	0x08006a35
 80069c4:	08006a35 	.word	0x08006a35
 80069c8:	08006a35 	.word	0x08006a35
 80069cc:	08006a3b 	.word	0x08006a3b
 80069d0:	08006a35 	.word	0x08006a35
 80069d4:	08006a35 	.word	0x08006a35
 80069d8:	08006a35 	.word	0x08006a35
 80069dc:	08006a35 	.word	0x08006a35
 80069e0:	08006a35 	.word	0x08006a35
 80069e4:	08006a35 	.word	0x08006a35
 80069e8:	08006a35 	.word	0x08006a35
 80069ec:	08006a3b 	.word	0x08006a3b
 80069f0:	08006a35 	.word	0x08006a35
 80069f4:	08006a35 	.word	0x08006a35
 80069f8:	08006a35 	.word	0x08006a35
 80069fc:	08006a35 	.word	0x08006a35
 8006a00:	08006a35 	.word	0x08006a35
 8006a04:	08006a35 	.word	0x08006a35
 8006a08:	08006a35 	.word	0x08006a35
 8006a0c:	08006a3b 	.word	0x08006a3b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	3304      	adds	r3, #4
 8006a14:	2101      	movs	r1, #1
 8006a16:	4618      	mov	r0, r3
 8006a18:	f001 fc18 	bl	800824c <RCCEx_PLL2_Config>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006a20:	e00c      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	3324      	adds	r3, #36	; 0x24
 8006a26:	2101      	movs	r1, #1
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f001 fcc1 	bl	80083b0 <RCCEx_PLL3_Config>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006a32:	e003      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	75fb      	strb	r3, [r7, #23]
      break;
 8006a38:	e000      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006a3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a3c:	7dfb      	ldrb	r3, [r7, #23]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d109      	bne.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006a42:	4b24      	ldr	r3, [pc, #144]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a46:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a4e:	4921      	ldr	r1, [pc, #132]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	654b      	str	r3, [r1, #84]	; 0x54
 8006a54:	e001      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a56:	7dfb      	ldrb	r3, [r7, #23]
 8006a58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0302 	and.w	r3, r3, #2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d03e      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a6a:	2b05      	cmp	r3, #5
 8006a6c:	d820      	bhi.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006a6e:	a201      	add	r2, pc, #4	; (adr r2, 8006a74 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a74:	08006ab7 	.word	0x08006ab7
 8006a78:	08006a8d 	.word	0x08006a8d
 8006a7c:	08006a9f 	.word	0x08006a9f
 8006a80:	08006ab7 	.word	0x08006ab7
 8006a84:	08006ab7 	.word	0x08006ab7
 8006a88:	08006ab7 	.word	0x08006ab7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	3304      	adds	r3, #4
 8006a90:	2101      	movs	r1, #1
 8006a92:	4618      	mov	r0, r3
 8006a94:	f001 fbda 	bl	800824c <RCCEx_PLL2_Config>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a9c:	e00c      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	3324      	adds	r3, #36	; 0x24
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f001 fc83 	bl	80083b0 <RCCEx_PLL3_Config>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006aae:	e003      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ab4:	e000      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006ab6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ab8:	7dfb      	ldrb	r3, [r7, #23]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d110      	bne.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006abe:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac2:	f023 0207 	bic.w	r2, r3, #7
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aca:	4902      	ldr	r1, [pc, #8]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006acc:	4313      	orrs	r3, r2
 8006ace:	654b      	str	r3, [r1, #84]	; 0x54
 8006ad0:	e008      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006ad2:	bf00      	nop
 8006ad4:	58024400 	.word	0x58024400
 8006ad8:	58024800 	.word	0x58024800
 8006adc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae0:	7dfb      	ldrb	r3, [r7, #23]
 8006ae2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d039      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006af6:	2b05      	cmp	r3, #5
 8006af8:	d820      	bhi.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006afa:	a201      	add	r2, pc, #4	; (adr r2, 8006b00 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b00:	08006b43 	.word	0x08006b43
 8006b04:	08006b19 	.word	0x08006b19
 8006b08:	08006b2b 	.word	0x08006b2b
 8006b0c:	08006b43 	.word	0x08006b43
 8006b10:	08006b43 	.word	0x08006b43
 8006b14:	08006b43 	.word	0x08006b43
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f001 fb94 	bl	800824c <RCCEx_PLL2_Config>
 8006b24:	4603      	mov	r3, r0
 8006b26:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006b28:	e00c      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	3324      	adds	r3, #36	; 0x24
 8006b2e:	2101      	movs	r1, #1
 8006b30:	4618      	mov	r0, r3
 8006b32:	f001 fc3d 	bl	80083b0 <RCCEx_PLL3_Config>
 8006b36:	4603      	mov	r3, r0
 8006b38:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006b3a:	e003      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b40:	e000      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006b42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b44:	7dfb      	ldrb	r3, [r7, #23]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10a      	bne.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b4a:	4bb7      	ldr	r3, [pc, #732]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b4e:	f023 0207 	bic.w	r2, r3, #7
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b58:	49b3      	ldr	r1, [pc, #716]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	658b      	str	r3, [r1, #88]	; 0x58
 8006b5e:	e001      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b60:	7dfb      	ldrb	r3, [r7, #23]
 8006b62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0320 	and.w	r3, r3, #32
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d04b      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b7a:	d02e      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006b7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b80:	d828      	bhi.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b86:	d02a      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b8c:	d822      	bhi.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b92:	d026      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006b94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b98:	d81c      	bhi.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b9e:	d010      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006ba0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ba4:	d816      	bhi.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d01d      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006baa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bae:	d111      	bne.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	3304      	adds	r3, #4
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f001 fb48 	bl	800824c <RCCEx_PLL2_Config>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006bc0:	e012      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	3324      	adds	r3, #36	; 0x24
 8006bc6:	2102      	movs	r1, #2
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f001 fbf1 	bl	80083b0 <RCCEx_PLL3_Config>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006bd2:	e009      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8006bd8:	e006      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006bda:	bf00      	nop
 8006bdc:	e004      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006bde:	bf00      	nop
 8006be0:	e002      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006be2:	bf00      	nop
 8006be4:	e000      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006be6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006be8:	7dfb      	ldrb	r3, [r7, #23]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10a      	bne.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006bee:	4b8e      	ldr	r3, [pc, #568]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bfc:	498a      	ldr	r1, [pc, #552]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	654b      	str	r3, [r1, #84]	; 0x54
 8006c02:	e001      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c04:	7dfb      	ldrb	r3, [r7, #23]
 8006c06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d04b      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c1a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006c1e:	d02e      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006c20:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006c24:	d828      	bhi.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c2a:	d02a      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c30:	d822      	bhi.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c36:	d026      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006c38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c3c:	d81c      	bhi.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c42:	d010      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006c44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c48:	d816      	bhi.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d01d      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c52:	d111      	bne.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	3304      	adds	r3, #4
 8006c58:	2100      	movs	r1, #0
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f001 faf6 	bl	800824c <RCCEx_PLL2_Config>
 8006c60:	4603      	mov	r3, r0
 8006c62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006c64:	e012      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	3324      	adds	r3, #36	; 0x24
 8006c6a:	2102      	movs	r1, #2
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f001 fb9f 	bl	80083b0 <RCCEx_PLL3_Config>
 8006c72:	4603      	mov	r3, r0
 8006c74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006c76:	e009      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c7c:	e006      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c7e:	bf00      	nop
 8006c80:	e004      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c82:	bf00      	nop
 8006c84:	e002      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c86:	bf00      	nop
 8006c88:	e000      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c8c:	7dfb      	ldrb	r3, [r7, #23]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10a      	bne.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c92:	4b65      	ldr	r3, [pc, #404]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c96:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ca0:	4961      	ldr	r1, [pc, #388]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	658b      	str	r3, [r1, #88]	; 0x58
 8006ca6:	e001      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ca8:	7dfb      	ldrb	r3, [r7, #23]
 8006caa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d04b      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cbe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006cc2:	d02e      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006cc4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006cc8:	d828      	bhi.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cce:	d02a      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006cd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cd4:	d822      	bhi.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006cd6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006cda:	d026      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006cdc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006ce0:	d81c      	bhi.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006ce2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ce6:	d010      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006ce8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cec:	d816      	bhi.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d01d      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cf6:	d111      	bne.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	3304      	adds	r3, #4
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f001 faa4 	bl	800824c <RCCEx_PLL2_Config>
 8006d04:	4603      	mov	r3, r0
 8006d06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006d08:	e012      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	3324      	adds	r3, #36	; 0x24
 8006d0e:	2102      	movs	r1, #2
 8006d10:	4618      	mov	r0, r3
 8006d12:	f001 fb4d 	bl	80083b0 <RCCEx_PLL3_Config>
 8006d16:	4603      	mov	r3, r0
 8006d18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006d1a:	e009      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d20:	e006      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006d22:	bf00      	nop
 8006d24:	e004      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006d26:	bf00      	nop
 8006d28:	e002      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006d2a:	bf00      	nop
 8006d2c:	e000      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006d2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d30:	7dfb      	ldrb	r3, [r7, #23]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10a      	bne.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006d36:	4b3c      	ldr	r3, [pc, #240]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d44:	4938      	ldr	r1, [pc, #224]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d46:	4313      	orrs	r3, r2
 8006d48:	658b      	str	r3, [r1, #88]	; 0x58
 8006d4a:	e001      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d4c:	7dfb      	ldrb	r3, [r7, #23]
 8006d4e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0308 	and.w	r3, r3, #8
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d01a      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d66:	d10a      	bne.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	3324      	adds	r3, #36	; 0x24
 8006d6c:	2102      	movs	r1, #2
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f001 fb1e 	bl	80083b0 <RCCEx_PLL3_Config>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d001      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006d7e:	4b2a      	ldr	r3, [pc, #168]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d82:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d8c:	4926      	ldr	r1, [pc, #152]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0310 	and.w	r3, r3, #16
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d01a      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006da8:	d10a      	bne.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	3324      	adds	r3, #36	; 0x24
 8006dae:	2102      	movs	r1, #2
 8006db0:	4618      	mov	r0, r3
 8006db2:	f001 fafd 	bl	80083b0 <RCCEx_PLL3_Config>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006dc0:	4b19      	ldr	r3, [pc, #100]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dce:	4916      	ldr	r1, [pc, #88]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d036      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006de6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dea:	d01f      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006dec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006df0:	d817      	bhi.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d003      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dfa:	d009      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006dfc:	e011      	b.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	3304      	adds	r3, #4
 8006e02:	2100      	movs	r1, #0
 8006e04:	4618      	mov	r0, r3
 8006e06:	f001 fa21 	bl	800824c <RCCEx_PLL2_Config>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006e0e:	e00e      	b.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	3324      	adds	r3, #36	; 0x24
 8006e14:	2102      	movs	r1, #2
 8006e16:	4618      	mov	r0, r3
 8006e18:	f001 faca 	bl	80083b0 <RCCEx_PLL3_Config>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006e20:	e005      	b.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	75fb      	strb	r3, [r7, #23]
      break;
 8006e26:	e002      	b.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006e28:	58024400 	.word	0x58024400
      break;
 8006e2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e2e:	7dfb      	ldrb	r3, [r7, #23]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10a      	bne.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e34:	4b93      	ldr	r3, [pc, #588]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e42:	4990      	ldr	r1, [pc, #576]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	658b      	str	r3, [r1, #88]	; 0x58
 8006e48:	e001      	b.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e4a:	7dfb      	ldrb	r3, [r7, #23]
 8006e4c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d033      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e64:	d01c      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006e66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e6a:	d816      	bhi.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006e6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e70:	d003      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006e72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e76:	d007      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006e78:	e00f      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e7a:	4b82      	ldr	r3, [pc, #520]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7e:	4a81      	ldr	r2, [pc, #516]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006e86:	e00c      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	3324      	adds	r3, #36	; 0x24
 8006e8c:	2101      	movs	r1, #1
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f001 fa8e 	bl	80083b0 <RCCEx_PLL3_Config>
 8006e94:	4603      	mov	r3, r0
 8006e96:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006e98:	e003      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e9e:	e000      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006ea0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ea2:	7dfb      	ldrb	r3, [r7, #23]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10a      	bne.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ea8:	4b76      	ldr	r3, [pc, #472]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eb6:	4973      	ldr	r1, [pc, #460]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	654b      	str	r3, [r1, #84]	; 0x54
 8006ebc:	e001      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ebe:	7dfb      	ldrb	r3, [r7, #23]
 8006ec0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d029      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d003      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eda:	d007      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006edc:	e00f      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ede:	4b69      	ldr	r3, [pc, #420]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee2:	4a68      	ldr	r2, [pc, #416]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ee8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006eea:	e00b      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	3304      	adds	r3, #4
 8006ef0:	2102      	movs	r1, #2
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f001 f9aa 	bl	800824c <RCCEx_PLL2_Config>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006efc:	e002      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	75fb      	strb	r3, [r7, #23]
      break;
 8006f02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f04:	7dfb      	ldrb	r3, [r7, #23]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d109      	bne.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006f0a:	4b5e      	ldr	r3, [pc, #376]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f16:	495b      	ldr	r1, [pc, #364]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f1c:	e001      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f1e:	7dfb      	ldrb	r3, [r7, #23]
 8006f20:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00a      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	3324      	adds	r3, #36	; 0x24
 8006f32:	2102      	movs	r1, #2
 8006f34:	4618      	mov	r0, r3
 8006f36:	f001 fa3b 	bl	80083b0 <RCCEx_PLL3_Config>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d001      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d030      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f58:	d017      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006f5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f5e:	d811      	bhi.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f64:	d013      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006f66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f6a:	d80b      	bhi.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d010      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f74:	d106      	bne.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f76:	4b43      	ldr	r3, [pc, #268]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7a:	4a42      	ldr	r2, [pc, #264]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006f82:	e007      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	75fb      	strb	r3, [r7, #23]
      break;
 8006f88:	e004      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006f8a:	bf00      	nop
 8006f8c:	e002      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006f8e:	bf00      	nop
 8006f90:	e000      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006f92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f94:	7dfb      	ldrb	r3, [r7, #23]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d109      	bne.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f9a:	4b3a      	ldr	r3, [pc, #232]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fa6:	4937      	ldr	r1, [pc, #220]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	654b      	str	r3, [r1, #84]	; 0x54
 8006fac:	e001      	b.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fae:	7dfb      	ldrb	r3, [r7, #23]
 8006fb0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d008      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006fbe:	4b31      	ldr	r3, [pc, #196]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fca:	492e      	ldr	r1, [pc, #184]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d009      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006fdc:	4b29      	ldr	r3, [pc, #164]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006fea:	4926      	ldr	r1, [pc, #152]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d008      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006ffc:	4b21      	ldr	r3, [pc, #132]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007000:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007008:	491e      	ldr	r1, [pc, #120]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800700a:	4313      	orrs	r3, r2
 800700c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00d      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800701a:	4b1a      	ldr	r3, [pc, #104]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	4a19      	ldr	r2, [pc, #100]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007020:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007024:	6113      	str	r3, [r2, #16]
 8007026:	4b17      	ldr	r3, [pc, #92]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007028:	691a      	ldr	r2, [r3, #16]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007030:	4914      	ldr	r1, [pc, #80]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007032:	4313      	orrs	r3, r2
 8007034:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	da08      	bge.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800703e:	4b11      	ldr	r3, [pc, #68]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007042:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800704a:	490e      	ldr	r1, [pc, #56]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800704c:	4313      	orrs	r3, r2
 800704e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d009      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800705c:	4b09      	ldr	r3, [pc, #36]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800705e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007060:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800706a:	4906      	ldr	r1, [pc, #24]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800706c:	4313      	orrs	r3, r2
 800706e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007070:	7dbb      	ldrb	r3, [r7, #22]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007076:	2300      	movs	r3, #0
 8007078:	e000      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
}
 800707c:	4618      	mov	r0, r3
 800707e:	3718      	adds	r7, #24
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	58024400 	.word	0x58024400

08007088 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b090      	sub	sp, #64	; 0x40
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007096:	f040 8095 	bne.w	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800709a:	4bae      	ldr	r3, [pc, #696]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800709c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800709e:	f003 0307 	and.w	r3, r3, #7
 80070a2:	633b      	str	r3, [r7, #48]	; 0x30
 80070a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a6:	2b04      	cmp	r3, #4
 80070a8:	f200 8088 	bhi.w	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80070ac:	a201      	add	r2, pc, #4	; (adr r2, 80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80070ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b2:	bf00      	nop
 80070b4:	080070c9 	.word	0x080070c9
 80070b8:	080070f1 	.word	0x080070f1
 80070bc:	08007119 	.word	0x08007119
 80070c0:	080071b5 	.word	0x080071b5
 80070c4:	08007141 	.word	0x08007141

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070c8:	4ba2      	ldr	r3, [pc, #648]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070d4:	d108      	bne.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 ff64 	bl	8007fa8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80070e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80070e4:	f000 bc95 	b.w	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80070e8:	2300      	movs	r3, #0
 80070ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070ec:	f000 bc91 	b.w	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070f0:	4b98      	ldr	r3, [pc, #608]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070fc:	d108      	bne.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070fe:	f107 0318 	add.w	r3, r7, #24
 8007102:	4618      	mov	r0, r3
 8007104:	f000 fca8 	bl	8007a58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800710c:	f000 bc81 	b.w	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007110:	2300      	movs	r3, #0
 8007112:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007114:	f000 bc7d 	b.w	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007118:	4b8e      	ldr	r3, [pc, #568]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007120:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007124:	d108      	bne.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007126:	f107 030c 	add.w	r3, r7, #12
 800712a:	4618      	mov	r0, r3
 800712c:	f000 fde8 	bl	8007d00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007134:	f000 bc6d 	b.w	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007138:	2300      	movs	r3, #0
 800713a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800713c:	f000 bc69 	b.w	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007140:	4b84      	ldr	r3, [pc, #528]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007144:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007148:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800714a:	4b82      	ldr	r3, [pc, #520]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0304 	and.w	r3, r3, #4
 8007152:	2b04      	cmp	r3, #4
 8007154:	d10c      	bne.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8007156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007158:	2b00      	cmp	r3, #0
 800715a:	d109      	bne.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800715c:	4b7d      	ldr	r3, [pc, #500]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	08db      	lsrs	r3, r3, #3
 8007162:	f003 0303 	and.w	r3, r3, #3
 8007166:	4a7c      	ldr	r2, [pc, #496]	; (8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8007168:	fa22 f303 	lsr.w	r3, r2, r3
 800716c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800716e:	e01f      	b.n	80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007170:	4b78      	ldr	r3, [pc, #480]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800717c:	d106      	bne.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800717e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007180:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007184:	d102      	bne.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007186:	4b75      	ldr	r3, [pc, #468]	; (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007188:	63fb      	str	r3, [r7, #60]	; 0x3c
 800718a:	e011      	b.n	80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800718c:	4b71      	ldr	r3, [pc, #452]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007194:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007198:	d106      	bne.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800719a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071a0:	d102      	bne.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80071a2:	4b6f      	ldr	r3, [pc, #444]	; (8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80071a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071a6:	e003      	b.n	80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80071a8:	2300      	movs	r3, #0
 80071aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80071ac:	f000 bc31 	b.w	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80071b0:	f000 bc2f 	b.w	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80071b4:	4b6b      	ldr	r3, [pc, #428]	; (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80071b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071b8:	f000 bc2b 	b.w	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80071bc:	2300      	movs	r3, #0
 80071be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071c0:	f000 bc27 	b.w	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071ca:	f040 8095 	bne.w	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80071ce:	4b61      	ldr	r3, [pc, #388]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80071d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80071d6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80071d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071de:	d04d      	beq.n	800727c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80071e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071e6:	f200 8084 	bhi.w	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80071ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ec:	2bc0      	cmp	r3, #192	; 0xc0
 80071ee:	d07d      	beq.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80071f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f2:	2bc0      	cmp	r3, #192	; 0xc0
 80071f4:	d87d      	bhi.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80071f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f8:	2b80      	cmp	r3, #128	; 0x80
 80071fa:	d02d      	beq.n	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80071fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fe:	2b80      	cmp	r3, #128	; 0x80
 8007200:	d877      	bhi.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007204:	2b00      	cmp	r3, #0
 8007206:	d003      	beq.n	8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8007208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720a:	2b40      	cmp	r3, #64	; 0x40
 800720c:	d012      	beq.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800720e:	e070      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007210:	4b50      	ldr	r3, [pc, #320]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007218:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800721c:	d107      	bne.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800721e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007222:	4618      	mov	r0, r3
 8007224:	f000 fec0 	bl	8007fa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800722c:	e3f1      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007232:	e3ee      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007234:	4b47      	ldr	r3, [pc, #284]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800723c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007240:	d107      	bne.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007242:	f107 0318 	add.w	r3, r7, #24
 8007246:	4618      	mov	r0, r3
 8007248:	f000 fc06 	bl	8007a58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007250:	e3df      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007252:	2300      	movs	r3, #0
 8007254:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007256:	e3dc      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007258:	4b3e      	ldr	r3, [pc, #248]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007260:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007264:	d107      	bne.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007266:	f107 030c 	add.w	r3, r7, #12
 800726a:	4618      	mov	r0, r3
 800726c:	f000 fd48 	bl	8007d00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007274:	e3cd      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007276:	2300      	movs	r3, #0
 8007278:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800727a:	e3ca      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800727c:	4b35      	ldr	r3, [pc, #212]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800727e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007280:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007284:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007286:	4b33      	ldr	r3, [pc, #204]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0304 	and.w	r3, r3, #4
 800728e:	2b04      	cmp	r3, #4
 8007290:	d10c      	bne.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8007292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007294:	2b00      	cmp	r3, #0
 8007296:	d109      	bne.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007298:	4b2e      	ldr	r3, [pc, #184]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	08db      	lsrs	r3, r3, #3
 800729e:	f003 0303 	and.w	r3, r3, #3
 80072a2:	4a2d      	ldr	r2, [pc, #180]	; (8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80072a4:	fa22 f303 	lsr.w	r3, r2, r3
 80072a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072aa:	e01e      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072ac:	4b29      	ldr	r3, [pc, #164]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072b8:	d106      	bne.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80072ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072c0:	d102      	bne.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80072c2:	4b26      	ldr	r3, [pc, #152]	; (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80072c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072c6:	e010      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072c8:	4b22      	ldr	r3, [pc, #136]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072d4:	d106      	bne.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80072d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072dc:	d102      	bne.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80072de:	4b20      	ldr	r3, [pc, #128]	; (8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80072e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072e2:	e002      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80072e4:	2300      	movs	r3, #0
 80072e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80072e8:	e393      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80072ea:	e392      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80072ec:	4b1d      	ldr	r3, [pc, #116]	; (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80072ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072f0:	e38f      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80072f2:	2300      	movs	r3, #0
 80072f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072f6:	e38c      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072fe:	f040 80a7 	bne.w	8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007302:	4b14      	ldr	r3, [pc, #80]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007306:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800730a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800730c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007312:	d05f      	beq.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007316:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800731a:	f200 8096 	bhi.w	800744a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800731e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007320:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007324:	f000 808e 	beq.w	8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8007328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800732e:	f200 808c 	bhi.w	800744a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007334:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007338:	d03a      	beq.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800733a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007340:	f200 8083 	bhi.w	800744a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00e      	beq.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800734a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007350:	d01c      	beq.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8007352:	e07a      	b.n	800744a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007354:	58024400 	.word	0x58024400
 8007358:	03d09000 	.word	0x03d09000
 800735c:	003d0900 	.word	0x003d0900
 8007360:	007a1200 	.word	0x007a1200
 8007364:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007368:	4baa      	ldr	r3, [pc, #680]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007370:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007374:	d107      	bne.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800737a:	4618      	mov	r0, r3
 800737c:	f000 fe14 	bl	8007fa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007382:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007384:	e345      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007386:	2300      	movs	r3, #0
 8007388:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800738a:	e342      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800738c:	4ba1      	ldr	r3, [pc, #644]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007394:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007398:	d107      	bne.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800739a:	f107 0318 	add.w	r3, r7, #24
 800739e:	4618      	mov	r0, r3
 80073a0:	f000 fb5a 	bl	8007a58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80073a8:	e333      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80073aa:	2300      	movs	r3, #0
 80073ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073ae:	e330      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80073b0:	4b98      	ldr	r3, [pc, #608]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073bc:	d107      	bne.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073be:	f107 030c 	add.w	r3, r7, #12
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fc9c 	bl	8007d00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80073cc:	e321      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80073ce:	2300      	movs	r3, #0
 80073d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073d2:	e31e      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80073d4:	4b8f      	ldr	r3, [pc, #572]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80073d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073dc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073de:	4b8d      	ldr	r3, [pc, #564]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0304 	and.w	r3, r3, #4
 80073e6:	2b04      	cmp	r3, #4
 80073e8:	d10c      	bne.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80073ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d109      	bne.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073f0:	4b88      	ldr	r3, [pc, #544]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	08db      	lsrs	r3, r3, #3
 80073f6:	f003 0303 	and.w	r3, r3, #3
 80073fa:	4a87      	ldr	r2, [pc, #540]	; (8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80073fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007400:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007402:	e01e      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007404:	4b83      	ldr	r3, [pc, #524]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800740c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007410:	d106      	bne.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8007412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007414:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007418:	d102      	bne.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800741a:	4b80      	ldr	r3, [pc, #512]	; (800761c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800741c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800741e:	e010      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007420:	4b7c      	ldr	r3, [pc, #496]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007428:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800742c:	d106      	bne.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800742e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007434:	d102      	bne.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007436:	4b7a      	ldr	r3, [pc, #488]	; (8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007438:	63fb      	str	r3, [r7, #60]	; 0x3c
 800743a:	e002      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800743c:	2300      	movs	r3, #0
 800743e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007440:	e2e7      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007442:	e2e6      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007444:	4b77      	ldr	r3, [pc, #476]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007446:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007448:	e2e3      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800744a:	2300      	movs	r3, #0
 800744c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800744e:	e2e0      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007456:	f040 809c 	bne.w	8007592 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800745a:	4b6e      	ldr	r3, [pc, #440]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800745c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800745e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007462:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007466:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800746a:	d054      	beq.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800746c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007472:	f200 808b 	bhi.w	800758c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8007476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007478:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800747c:	f000 8083 	beq.w	8007586 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8007480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007482:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007486:	f200 8081 	bhi.w	800758c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800748a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007490:	d02f      	beq.n	80074f2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8007492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007494:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007498:	d878      	bhi.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800749a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749c:	2b00      	cmp	r3, #0
 800749e:	d004      	beq.n	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80074a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80074a6:	d012      	beq.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80074a8:	e070      	b.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80074aa:	4b5a      	ldr	r3, [pc, #360]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074b6:	d107      	bne.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074bc:	4618      	mov	r0, r3
 80074be:	f000 fd73 	bl	8007fa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80074c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80074c6:	e2a4      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80074c8:	2300      	movs	r3, #0
 80074ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074cc:	e2a1      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80074ce:	4b51      	ldr	r3, [pc, #324]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074da:	d107      	bne.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074dc:	f107 0318 	add.w	r3, r7, #24
 80074e0:	4618      	mov	r0, r3
 80074e2:	f000 fab9 	bl	8007a58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80074ea:	e292      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80074ec:	2300      	movs	r3, #0
 80074ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074f0:	e28f      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074f2:	4b48      	ldr	r3, [pc, #288]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074fe:	d107      	bne.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007500:	f107 030c 	add.w	r3, r7, #12
 8007504:	4618      	mov	r0, r3
 8007506:	f000 fbfb 	bl	8007d00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800750e:	e280      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007510:	2300      	movs	r3, #0
 8007512:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007514:	e27d      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007516:	4b3f      	ldr	r3, [pc, #252]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800751a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800751e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007520:	4b3c      	ldr	r3, [pc, #240]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0304 	and.w	r3, r3, #4
 8007528:	2b04      	cmp	r3, #4
 800752a:	d10c      	bne.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800752c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800752e:	2b00      	cmp	r3, #0
 8007530:	d109      	bne.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007532:	4b38      	ldr	r3, [pc, #224]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	08db      	lsrs	r3, r3, #3
 8007538:	f003 0303 	and.w	r3, r3, #3
 800753c:	4a36      	ldr	r2, [pc, #216]	; (8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800753e:	fa22 f303 	lsr.w	r3, r2, r3
 8007542:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007544:	e01e      	b.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007546:	4b33      	ldr	r3, [pc, #204]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800754e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007552:	d106      	bne.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8007554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007556:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800755a:	d102      	bne.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800755c:	4b2f      	ldr	r3, [pc, #188]	; (800761c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800755e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007560:	e010      	b.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007562:	4b2c      	ldr	r3, [pc, #176]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800756a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800756e:	d106      	bne.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8007570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007572:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007576:	d102      	bne.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007578:	4b29      	ldr	r3, [pc, #164]	; (8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800757a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800757c:	e002      	b.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800757e:	2300      	movs	r3, #0
 8007580:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007582:	e246      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007584:	e245      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007586:	4b27      	ldr	r3, [pc, #156]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007588:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800758a:	e242      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800758c:	2300      	movs	r3, #0
 800758e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007590:	e23f      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007598:	f040 80a8 	bne.w	80076ec <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800759c:	4b1d      	ldr	r3, [pc, #116]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800759e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075a0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80075a4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80075a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075ac:	d060      	beq.n	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80075ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075b4:	f200 8097 	bhi.w	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80075b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80075be:	f000 808f 	beq.w	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80075c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80075c8:	f200 808d 	bhi.w	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80075cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075d2:	d03b      	beq.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 80075d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075da:	f200 8084 	bhi.w	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80075de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d004      	beq.n	80075ee <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80075e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ea:	d01d      	beq.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 80075ec:	e07b      	b.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80075ee:	4b09      	ldr	r3, [pc, #36]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075fa:	d107      	bne.n	800760c <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007600:	4618      	mov	r0, r3
 8007602:	f000 fcd1 	bl	8007fa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007608:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800760a:	e202      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800760c:	2300      	movs	r3, #0
 800760e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007610:	e1ff      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007612:	bf00      	nop
 8007614:	58024400 	.word	0x58024400
 8007618:	03d09000 	.word	0x03d09000
 800761c:	003d0900 	.word	0x003d0900
 8007620:	007a1200 	.word	0x007a1200
 8007624:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007628:	4ba3      	ldr	r3, [pc, #652]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007630:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007634:	d107      	bne.n	8007646 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007636:	f107 0318 	add.w	r3, r7, #24
 800763a:	4618      	mov	r0, r3
 800763c:	f000 fa0c 	bl	8007a58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007644:	e1e5      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007646:	2300      	movs	r3, #0
 8007648:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800764a:	e1e2      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800764c:	4b9a      	ldr	r3, [pc, #616]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007658:	d107      	bne.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800765a:	f107 030c 	add.w	r3, r7, #12
 800765e:	4618      	mov	r0, r3
 8007660:	f000 fb4e 	bl	8007d00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007668:	e1d3      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800766a:	2300      	movs	r3, #0
 800766c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800766e:	e1d0      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007670:	4b91      	ldr	r3, [pc, #580]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007674:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007678:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800767a:	4b8f      	ldr	r3, [pc, #572]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 0304 	and.w	r3, r3, #4
 8007682:	2b04      	cmp	r3, #4
 8007684:	d10c      	bne.n	80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8007686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007688:	2b00      	cmp	r3, #0
 800768a:	d109      	bne.n	80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800768c:	4b8a      	ldr	r3, [pc, #552]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	08db      	lsrs	r3, r3, #3
 8007692:	f003 0303 	and.w	r3, r3, #3
 8007696:	4a89      	ldr	r2, [pc, #548]	; (80078bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007698:	fa22 f303 	lsr.w	r3, r2, r3
 800769c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800769e:	e01e      	b.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80076a0:	4b85      	ldr	r3, [pc, #532]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076ac:	d106      	bne.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 80076ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076b4:	d102      	bne.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80076b6:	4b82      	ldr	r3, [pc, #520]	; (80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80076b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076ba:	e010      	b.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80076bc:	4b7e      	ldr	r3, [pc, #504]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076c8:	d106      	bne.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80076ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076d0:	d102      	bne.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80076d2:	4b7c      	ldr	r3, [pc, #496]	; (80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80076d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076d6:	e002      	b.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80076d8:	2300      	movs	r3, #0
 80076da:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80076dc:	e199      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80076de:	e198      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80076e0:	4b79      	ldr	r3, [pc, #484]	; (80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80076e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076e4:	e195      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80076e6:	2300      	movs	r3, #0
 80076e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076ea:	e192      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80076f2:	d173      	bne.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80076f4:	4b70      	ldr	r3, [pc, #448]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80076f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80076fc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80076fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007700:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007704:	d02f      	beq.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8007706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007708:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800770c:	d863      	bhi.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800770e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007710:	2b00      	cmp	r3, #0
 8007712:	d004      	beq.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8007714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800771a:	d012      	beq.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800771c:	e05b      	b.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800771e:	4b66      	ldr	r3, [pc, #408]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800772a:	d107      	bne.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800772c:	f107 0318 	add.w	r3, r7, #24
 8007730:	4618      	mov	r0, r3
 8007732:	f000 f991 	bl	8007a58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800773a:	e16a      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800773c:	2300      	movs	r3, #0
 800773e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007740:	e167      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007742:	4b5d      	ldr	r3, [pc, #372]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800774a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800774e:	d107      	bne.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007750:	f107 030c 	add.w	r3, r7, #12
 8007754:	4618      	mov	r0, r3
 8007756:	f000 fad3 	bl	8007d00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800775e:	e158      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007760:	2300      	movs	r3, #0
 8007762:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007764:	e155      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007766:	4b54      	ldr	r3, [pc, #336]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800776a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800776e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007770:	4b51      	ldr	r3, [pc, #324]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0304 	and.w	r3, r3, #4
 8007778:	2b04      	cmp	r3, #4
 800777a:	d10c      	bne.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800777c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800777e:	2b00      	cmp	r3, #0
 8007780:	d109      	bne.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007782:	4b4d      	ldr	r3, [pc, #308]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	08db      	lsrs	r3, r3, #3
 8007788:	f003 0303 	and.w	r3, r3, #3
 800778c:	4a4b      	ldr	r2, [pc, #300]	; (80078bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800778e:	fa22 f303 	lsr.w	r3, r2, r3
 8007792:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007794:	e01e      	b.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007796:	4b48      	ldr	r3, [pc, #288]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800779e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077a2:	d106      	bne.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 80077a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077aa:	d102      	bne.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80077ac:	4b44      	ldr	r3, [pc, #272]	; (80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80077ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077b0:	e010      	b.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80077b2:	4b41      	ldr	r3, [pc, #260]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077be:	d106      	bne.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80077c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077c6:	d102      	bne.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80077c8:	4b3e      	ldr	r3, [pc, #248]	; (80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80077ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077cc:	e002      	b.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80077ce:	2300      	movs	r3, #0
 80077d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80077d2:	e11e      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80077d4:	e11d      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80077d6:	2300      	movs	r3, #0
 80077d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077da:	e11a      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077e2:	d133      	bne.n	800784c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80077e4:	4b34      	ldr	r3, [pc, #208]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80077e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077ec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80077ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d004      	beq.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 80077f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077fa:	d012      	beq.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80077fc:	e023      	b.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80077fe:	4b2e      	ldr	r3, [pc, #184]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007806:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800780a:	d107      	bne.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800780c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007810:	4618      	mov	r0, r3
 8007812:	f000 fbc9 	bl	8007fa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007818:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800781a:	e0fa      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800781c:	2300      	movs	r3, #0
 800781e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007820:	e0f7      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007822:	4b25      	ldr	r3, [pc, #148]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800782a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800782e:	d107      	bne.n	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007830:	f107 0318 	add.w	r3, r7, #24
 8007834:	4618      	mov	r0, r3
 8007836:	f000 f90f 	bl	8007a58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800783a:	6a3b      	ldr	r3, [r7, #32]
 800783c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800783e:	e0e8      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007840:	2300      	movs	r3, #0
 8007842:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007844:	e0e5      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007846:	2300      	movs	r3, #0
 8007848:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800784a:	e0e2      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007852:	f040 808f 	bne.w	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007856:	4b18      	ldr	r3, [pc, #96]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800785a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800785e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007862:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007866:	d075      	beq.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8007868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800786e:	d87e      	bhi.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007876:	d060      	beq.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8007878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800787e:	d876      	bhi.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007882:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007886:	d045      	beq.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8007888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800788e:	d86e      	bhi.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007892:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007896:	d02b      	beq.n	80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8007898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800789e:	d866      	bhi.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80078a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d004      	beq.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 80078a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078ac:	d00e      	beq.n	80078cc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80078ae:	e05e      	b.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80078b0:	f000 f8bc 	bl	8007a2c <HAL_RCCEx_GetD3PCLK1Freq>
 80078b4:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80078b6:	e0ac      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80078b8:	58024400 	.word	0x58024400
 80078bc:	03d09000 	.word	0x03d09000
 80078c0:	003d0900 	.word	0x003d0900
 80078c4:	007a1200 	.word	0x007a1200
 80078c8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80078cc:	4b53      	ldr	r3, [pc, #332]	; (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078d8:	d107      	bne.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078da:	f107 0318 	add.w	r3, r7, #24
 80078de:	4618      	mov	r0, r3
 80078e0:	f000 f8ba 	bl	8007a58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80078e8:	e093      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80078ea:	2300      	movs	r3, #0
 80078ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078ee:	e090      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80078f0:	4b4a      	ldr	r3, [pc, #296]	; (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078fc:	d107      	bne.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078fe:	f107 030c 	add.w	r3, r7, #12
 8007902:	4618      	mov	r0, r3
 8007904:	f000 f9fc 	bl	8007d00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800790c:	e081      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800790e:	2300      	movs	r3, #0
 8007910:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007912:	e07e      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007914:	4b41      	ldr	r3, [pc, #260]	; (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 0304 	and.w	r3, r3, #4
 800791c:	2b04      	cmp	r3, #4
 800791e:	d109      	bne.n	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007920:	4b3e      	ldr	r3, [pc, #248]	; (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	08db      	lsrs	r3, r3, #3
 8007926:	f003 0303 	and.w	r3, r3, #3
 800792a:	4a3d      	ldr	r2, [pc, #244]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800792c:	fa22 f303 	lsr.w	r3, r2, r3
 8007930:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007932:	e06e      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007934:	2300      	movs	r3, #0
 8007936:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007938:	e06b      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800793a:	4b38      	ldr	r3, [pc, #224]	; (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007946:	d102      	bne.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8007948:	4b36      	ldr	r3, [pc, #216]	; (8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800794a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800794c:	e061      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800794e:	2300      	movs	r3, #0
 8007950:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007952:	e05e      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007954:	4b31      	ldr	r3, [pc, #196]	; (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800795c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007960:	d102      	bne.n	8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8007962:	4b31      	ldr	r3, [pc, #196]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007964:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007966:	e054      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007968:	2300      	movs	r3, #0
 800796a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800796c:	e051      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800796e:	2300      	movs	r3, #0
 8007970:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007972:	e04e      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800797a:	d148      	bne.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800797c:	4b27      	ldr	r3, [pc, #156]	; (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800797e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007980:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007984:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800798c:	d02a      	beq.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800798e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007990:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007994:	d838      	bhi.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007998:	2b00      	cmp	r3, #0
 800799a:	d004      	beq.n	80079a6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800799c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079a2:	d00d      	beq.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80079a4:	e030      	b.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80079a6:	4b1d      	ldr	r3, [pc, #116]	; (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079b2:	d102      	bne.n	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 80079b4:	4b1c      	ldr	r3, [pc, #112]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80079b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80079b8:	e02b      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80079ba:	2300      	movs	r3, #0
 80079bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079be:	e028      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80079c0:	4b16      	ldr	r3, [pc, #88]	; (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079cc:	d107      	bne.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079d2:	4618      	mov	r0, r3
 80079d4:	f000 fae8 	bl	8007fa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80079dc:	e019      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80079de:	2300      	movs	r3, #0
 80079e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079e2:	e016      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079e4:	4b0d      	ldr	r3, [pc, #52]	; (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079f0:	d107      	bne.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079f2:	f107 0318 	add.w	r3, r7, #24
 80079f6:	4618      	mov	r0, r3
 80079f8:	f000 f82e 	bl	8007a58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007a00:	e007      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007a02:	2300      	movs	r3, #0
 8007a04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a06:	e004      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a0c:	e001      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3740      	adds	r7, #64	; 0x40
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	58024400 	.word	0x58024400
 8007a20:	03d09000 	.word	0x03d09000
 8007a24:	003d0900 	.word	0x003d0900
 8007a28:	007a1200 	.word	0x007a1200

08007a2c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007a30:	f7fe fb8e 	bl	8006150 <HAL_RCC_GetHCLKFreq>
 8007a34:	4602      	mov	r2, r0
 8007a36:	4b06      	ldr	r3, [pc, #24]	; (8007a50 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	091b      	lsrs	r3, r3, #4
 8007a3c:	f003 0307 	and.w	r3, r3, #7
 8007a40:	4904      	ldr	r1, [pc, #16]	; (8007a54 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007a42:	5ccb      	ldrb	r3, [r1, r3]
 8007a44:	f003 031f 	and.w	r3, r3, #31
 8007a48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	58024400 	.word	0x58024400
 8007a54:	0800c154 	.word	0x0800c154

08007a58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b089      	sub	sp, #36	; 0x24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a60:	4ba1      	ldr	r3, [pc, #644]	; (8007ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a64:	f003 0303 	and.w	r3, r3, #3
 8007a68:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007a6a:	4b9f      	ldr	r3, [pc, #636]	; (8007ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6e:	0b1b      	lsrs	r3, r3, #12
 8007a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a74:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007a76:	4b9c      	ldr	r3, [pc, #624]	; (8007ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7a:	091b      	lsrs	r3, r3, #4
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007a82:	4b99      	ldr	r3, [pc, #612]	; (8007ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a86:	08db      	lsrs	r3, r3, #3
 8007a88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	fb02 f303 	mul.w	r3, r2, r3
 8007a92:	ee07 3a90 	vmov	s15, r3
 8007a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 8111 	beq.w	8007cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	f000 8083 	beq.w	8007bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	f200 80a1 	bhi.w	8007bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d003      	beq.n	8007ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d056      	beq.n	8007b70 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007ac2:	e099      	b.n	8007bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ac4:	4b88      	ldr	r3, [pc, #544]	; (8007ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0320 	and.w	r3, r3, #32
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d02d      	beq.n	8007b2c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ad0:	4b85      	ldr	r3, [pc, #532]	; (8007ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	08db      	lsrs	r3, r3, #3
 8007ad6:	f003 0303 	and.w	r3, r3, #3
 8007ada:	4a84      	ldr	r2, [pc, #528]	; (8007cec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007adc:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	ee07 3a90 	vmov	s15, r3
 8007ae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	ee07 3a90 	vmov	s15, r3
 8007af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007afa:	4b7b      	ldr	r3, [pc, #492]	; (8007ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b02:	ee07 3a90 	vmov	s15, r3
 8007b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b26:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007b2a:	e087      	b.n	8007c3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	ee07 3a90 	vmov	s15, r3
 8007b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b3e:	4b6a      	ldr	r3, [pc, #424]	; (8007ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b46:	ee07 3a90 	vmov	s15, r3
 8007b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b52:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b6e:	e065      	b.n	8007c3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	ee07 3a90 	vmov	s15, r3
 8007b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b82:	4b59      	ldr	r3, [pc, #356]	; (8007ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b8a:	ee07 3a90 	vmov	s15, r3
 8007b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b92:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b96:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bb2:	e043      	b.n	8007c3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	ee07 3a90 	vmov	s15, r3
 8007bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bbe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007cfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bc6:	4b48      	ldr	r3, [pc, #288]	; (8007ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bce:	ee07 3a90 	vmov	s15, r3
 8007bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bda:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bf6:	e021      	b.n	8007c3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	ee07 3a90 	vmov	s15, r3
 8007bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c0a:	4b37      	ldr	r3, [pc, #220]	; (8007ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c12:	ee07 3a90 	vmov	s15, r3
 8007c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c3a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007c3c:	4b2a      	ldr	r3, [pc, #168]	; (8007ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c40:	0a5b      	lsrs	r3, r3, #9
 8007c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c46:	ee07 3a90 	vmov	s15, r3
 8007c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c56:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c62:	ee17 2a90 	vmov	r2, s15
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007c6a:	4b1f      	ldr	r3, [pc, #124]	; (8007ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6e:	0c1b      	lsrs	r3, r3, #16
 8007c70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c74:	ee07 3a90 	vmov	s15, r3
 8007c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c84:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c90:	ee17 2a90 	vmov	r2, s15
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007c98:	4b13      	ldr	r3, [pc, #76]	; (8007ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9c:	0e1b      	lsrs	r3, r3, #24
 8007c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ca2:	ee07 3a90 	vmov	s15, r3
 8007ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007caa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cbe:	ee17 2a90 	vmov	r2, s15
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007cc6:	e008      	b.n	8007cda <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	609a      	str	r2, [r3, #8]
}
 8007cda:	bf00      	nop
 8007cdc:	3724      	adds	r7, #36	; 0x24
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	58024400 	.word	0x58024400
 8007cec:	03d09000 	.word	0x03d09000
 8007cf0:	46000000 	.word	0x46000000
 8007cf4:	4c742400 	.word	0x4c742400
 8007cf8:	4a742400 	.word	0x4a742400
 8007cfc:	4af42400 	.word	0x4af42400

08007d00 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b089      	sub	sp, #36	; 0x24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d08:	4ba1      	ldr	r3, [pc, #644]	; (8007f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0c:	f003 0303 	and.w	r3, r3, #3
 8007d10:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007d12:	4b9f      	ldr	r3, [pc, #636]	; (8007f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d16:	0d1b      	lsrs	r3, r3, #20
 8007d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d1c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007d1e:	4b9c      	ldr	r3, [pc, #624]	; (8007f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d22:	0a1b      	lsrs	r3, r3, #8
 8007d24:	f003 0301 	and.w	r3, r3, #1
 8007d28:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007d2a:	4b99      	ldr	r3, [pc, #612]	; (8007f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d2e:	08db      	lsrs	r3, r3, #3
 8007d30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	fb02 f303 	mul.w	r3, r2, r3
 8007d3a:	ee07 3a90 	vmov	s15, r3
 8007d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f000 8111 	beq.w	8007f70 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	f000 8083 	beq.w	8007e5c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	f200 80a1 	bhi.w	8007ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d003      	beq.n	8007d6c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d056      	beq.n	8007e18 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007d6a:	e099      	b.n	8007ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d6c:	4b88      	ldr	r3, [pc, #544]	; (8007f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 0320 	and.w	r3, r3, #32
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d02d      	beq.n	8007dd4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d78:	4b85      	ldr	r3, [pc, #532]	; (8007f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	08db      	lsrs	r3, r3, #3
 8007d7e:	f003 0303 	and.w	r3, r3, #3
 8007d82:	4a84      	ldr	r2, [pc, #528]	; (8007f94 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007d84:	fa22 f303 	lsr.w	r3, r2, r3
 8007d88:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	ee07 3a90 	vmov	s15, r3
 8007d90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	ee07 3a90 	vmov	s15, r3
 8007d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007da2:	4b7b      	ldr	r3, [pc, #492]	; (8007f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007daa:	ee07 3a90 	vmov	s15, r3
 8007dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007db2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007db6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007dd2:	e087      	b.n	8007ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	ee07 3a90 	vmov	s15, r3
 8007dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dde:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007f9c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007de6:	4b6a      	ldr	r3, [pc, #424]	; (8007f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dee:	ee07 3a90 	vmov	s15, r3
 8007df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007df6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dfa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e16:	e065      	b.n	8007ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	ee07 3a90 	vmov	s15, r3
 8007e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e22:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e2a:	4b59      	ldr	r3, [pc, #356]	; (8007f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e32:	ee07 3a90 	vmov	s15, r3
 8007e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e3e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e5a:	e043      	b.n	8007ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	ee07 3a90 	vmov	s15, r3
 8007e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e66:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e6e:	4b48      	ldr	r3, [pc, #288]	; (8007f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e76:	ee07 3a90 	vmov	s15, r3
 8007e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e82:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e9e:	e021      	b.n	8007ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	ee07 3a90 	vmov	s15, r3
 8007ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eaa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eb2:	4b37      	ldr	r3, [pc, #220]	; (8007f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eba:	ee07 3a90 	vmov	s15, r3
 8007ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ec2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ec6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ede:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ee2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007ee4:	4b2a      	ldr	r3, [pc, #168]	; (8007f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee8:	0a5b      	lsrs	r3, r3, #9
 8007eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eee:	ee07 3a90 	vmov	s15, r3
 8007ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ef6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007efa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007efe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f0a:	ee17 2a90 	vmov	r2, s15
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007f12:	4b1f      	ldr	r3, [pc, #124]	; (8007f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f16:	0c1b      	lsrs	r3, r3, #16
 8007f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f1c:	ee07 3a90 	vmov	s15, r3
 8007f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f38:	ee17 2a90 	vmov	r2, s15
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007f40:	4b13      	ldr	r3, [pc, #76]	; (8007f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f44:	0e1b      	lsrs	r3, r3, #24
 8007f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f4a:	ee07 3a90 	vmov	s15, r3
 8007f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f66:	ee17 2a90 	vmov	r2, s15
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007f6e:	e008      	b.n	8007f82 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	609a      	str	r2, [r3, #8]
}
 8007f82:	bf00      	nop
 8007f84:	3724      	adds	r7, #36	; 0x24
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop
 8007f90:	58024400 	.word	0x58024400
 8007f94:	03d09000 	.word	0x03d09000
 8007f98:	46000000 	.word	0x46000000
 8007f9c:	4c742400 	.word	0x4c742400
 8007fa0:	4a742400 	.word	0x4a742400
 8007fa4:	4af42400 	.word	0x4af42400

08007fa8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b089      	sub	sp, #36	; 0x24
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007fb0:	4ba0      	ldr	r3, [pc, #640]	; (8008234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb4:	f003 0303 	and.w	r3, r3, #3
 8007fb8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007fba:	4b9e      	ldr	r3, [pc, #632]	; (8008234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fbe:	091b      	lsrs	r3, r3, #4
 8007fc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fc4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007fc6:	4b9b      	ldr	r3, [pc, #620]	; (8008234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007fd0:	4b98      	ldr	r3, [pc, #608]	; (8008234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd4:	08db      	lsrs	r3, r3, #3
 8007fd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	fb02 f303 	mul.w	r3, r2, r3
 8007fe0:	ee07 3a90 	vmov	s15, r3
 8007fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fe8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f000 8111 	beq.w	8008216 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	f000 8083 	beq.w	8008102 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	f200 80a1 	bhi.w	8008146 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d003      	beq.n	8008012 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d056      	beq.n	80080be <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008010:	e099      	b.n	8008146 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008012:	4b88      	ldr	r3, [pc, #544]	; (8008234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 0320 	and.w	r3, r3, #32
 800801a:	2b00      	cmp	r3, #0
 800801c:	d02d      	beq.n	800807a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800801e:	4b85      	ldr	r3, [pc, #532]	; (8008234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	08db      	lsrs	r3, r3, #3
 8008024:	f003 0303 	and.w	r3, r3, #3
 8008028:	4a83      	ldr	r2, [pc, #524]	; (8008238 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800802a:	fa22 f303 	lsr.w	r3, r2, r3
 800802e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	ee07 3a90 	vmov	s15, r3
 8008036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	ee07 3a90 	vmov	s15, r3
 8008040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008044:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008048:	4b7a      	ldr	r3, [pc, #488]	; (8008234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800804a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008050:	ee07 3a90 	vmov	s15, r3
 8008054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008058:	ed97 6a03 	vldr	s12, [r7, #12]
 800805c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800823c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008060:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008064:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008068:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800806c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008074:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008078:	e087      	b.n	800818a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	ee07 3a90 	vmov	s15, r3
 8008080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008084:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008240 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008088:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800808c:	4b69      	ldr	r3, [pc, #420]	; (8008234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800808e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008094:	ee07 3a90 	vmov	s15, r3
 8008098:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800809c:	ed97 6a03 	vldr	s12, [r7, #12]
 80080a0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800823c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80080a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080bc:	e065      	b.n	800818a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	ee07 3a90 	vmov	s15, r3
 80080c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080c8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008244 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80080cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080d0:	4b58      	ldr	r3, [pc, #352]	; (8008234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080d8:	ee07 3a90 	vmov	s15, r3
 80080dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80080e4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800823c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80080e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008100:	e043      	b.n	800818a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	ee07 3a90 	vmov	s15, r3
 8008108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800810c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008248 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008110:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008114:	4b47      	ldr	r3, [pc, #284]	; (8008234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800811c:	ee07 3a90 	vmov	s15, r3
 8008120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008124:	ed97 6a03 	vldr	s12, [r7, #12]
 8008128:	eddf 5a44 	vldr	s11, [pc, #272]	; 800823c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800812c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008130:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008134:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008138:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800813c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008140:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008144:	e021      	b.n	800818a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	ee07 3a90 	vmov	s15, r3
 800814c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008150:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008240 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008154:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008158:	4b36      	ldr	r3, [pc, #216]	; (8008234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800815a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800815c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008160:	ee07 3a90 	vmov	s15, r3
 8008164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008168:	ed97 6a03 	vldr	s12, [r7, #12]
 800816c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800823c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008170:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008174:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008178:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800817c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008184:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008188:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800818a:	4b2a      	ldr	r3, [pc, #168]	; (8008234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800818c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800818e:	0a5b      	lsrs	r3, r3, #9
 8008190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008194:	ee07 3a90 	vmov	s15, r3
 8008198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800819c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80081a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081b0:	ee17 2a90 	vmov	r2, s15
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80081b8:	4b1e      	ldr	r3, [pc, #120]	; (8008234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081bc:	0c1b      	lsrs	r3, r3, #16
 80081be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081c2:	ee07 3a90 	vmov	s15, r3
 80081c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80081d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081de:	ee17 2a90 	vmov	r2, s15
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80081e6:	4b13      	ldr	r3, [pc, #76]	; (8008234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ea:	0e1b      	lsrs	r3, r3, #24
 80081ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081f0:	ee07 3a90 	vmov	s15, r3
 80081f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008200:	edd7 6a07 	vldr	s13, [r7, #28]
 8008204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800820c:	ee17 2a90 	vmov	r2, s15
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008214:	e008      	b.n	8008228 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	609a      	str	r2, [r3, #8]
}
 8008228:	bf00      	nop
 800822a:	3724      	adds	r7, #36	; 0x24
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr
 8008234:	58024400 	.word	0x58024400
 8008238:	03d09000 	.word	0x03d09000
 800823c:	46000000 	.word	0x46000000
 8008240:	4c742400 	.word	0x4c742400
 8008244:	4a742400 	.word	0x4a742400
 8008248:	4af42400 	.word	0x4af42400

0800824c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008256:	2300      	movs	r3, #0
 8008258:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800825a:	4b53      	ldr	r3, [pc, #332]	; (80083a8 <RCCEx_PLL2_Config+0x15c>)
 800825c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800825e:	f003 0303 	and.w	r3, r3, #3
 8008262:	2b03      	cmp	r3, #3
 8008264:	d101      	bne.n	800826a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e099      	b.n	800839e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800826a:	4b4f      	ldr	r3, [pc, #316]	; (80083a8 <RCCEx_PLL2_Config+0x15c>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a4e      	ldr	r2, [pc, #312]	; (80083a8 <RCCEx_PLL2_Config+0x15c>)
 8008270:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008274:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008276:	f7fa fb05 	bl	8002884 <HAL_GetTick>
 800827a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800827c:	e008      	b.n	8008290 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800827e:	f7fa fb01 	bl	8002884 <HAL_GetTick>
 8008282:	4602      	mov	r2, r0
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	1ad3      	subs	r3, r2, r3
 8008288:	2b02      	cmp	r3, #2
 800828a:	d901      	bls.n	8008290 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800828c:	2303      	movs	r3, #3
 800828e:	e086      	b.n	800839e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008290:	4b45      	ldr	r3, [pc, #276]	; (80083a8 <RCCEx_PLL2_Config+0x15c>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1f0      	bne.n	800827e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800829c:	4b42      	ldr	r3, [pc, #264]	; (80083a8 <RCCEx_PLL2_Config+0x15c>)
 800829e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	031b      	lsls	r3, r3, #12
 80082aa:	493f      	ldr	r1, [pc, #252]	; (80083a8 <RCCEx_PLL2_Config+0x15c>)
 80082ac:	4313      	orrs	r3, r2
 80082ae:	628b      	str	r3, [r1, #40]	; 0x28
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	3b01      	subs	r3, #1
 80082b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	3b01      	subs	r3, #1
 80082c0:	025b      	lsls	r3, r3, #9
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	431a      	orrs	r2, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	3b01      	subs	r3, #1
 80082cc:	041b      	lsls	r3, r3, #16
 80082ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80082d2:	431a      	orrs	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	3b01      	subs	r3, #1
 80082da:	061b      	lsls	r3, r3, #24
 80082dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80082e0:	4931      	ldr	r1, [pc, #196]	; (80083a8 <RCCEx_PLL2_Config+0x15c>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80082e6:	4b30      	ldr	r3, [pc, #192]	; (80083a8 <RCCEx_PLL2_Config+0x15c>)
 80082e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	492d      	ldr	r1, [pc, #180]	; (80083a8 <RCCEx_PLL2_Config+0x15c>)
 80082f4:	4313      	orrs	r3, r2
 80082f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80082f8:	4b2b      	ldr	r3, [pc, #172]	; (80083a8 <RCCEx_PLL2_Config+0x15c>)
 80082fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fc:	f023 0220 	bic.w	r2, r3, #32
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	699b      	ldr	r3, [r3, #24]
 8008304:	4928      	ldr	r1, [pc, #160]	; (80083a8 <RCCEx_PLL2_Config+0x15c>)
 8008306:	4313      	orrs	r3, r2
 8008308:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800830a:	4b27      	ldr	r3, [pc, #156]	; (80083a8 <RCCEx_PLL2_Config+0x15c>)
 800830c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830e:	4a26      	ldr	r2, [pc, #152]	; (80083a8 <RCCEx_PLL2_Config+0x15c>)
 8008310:	f023 0310 	bic.w	r3, r3, #16
 8008314:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008316:	4b24      	ldr	r3, [pc, #144]	; (80083a8 <RCCEx_PLL2_Config+0x15c>)
 8008318:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800831a:	4b24      	ldr	r3, [pc, #144]	; (80083ac <RCCEx_PLL2_Config+0x160>)
 800831c:	4013      	ands	r3, r2
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	69d2      	ldr	r2, [r2, #28]
 8008322:	00d2      	lsls	r2, r2, #3
 8008324:	4920      	ldr	r1, [pc, #128]	; (80083a8 <RCCEx_PLL2_Config+0x15c>)
 8008326:	4313      	orrs	r3, r2
 8008328:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800832a:	4b1f      	ldr	r3, [pc, #124]	; (80083a8 <RCCEx_PLL2_Config+0x15c>)
 800832c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832e:	4a1e      	ldr	r2, [pc, #120]	; (80083a8 <RCCEx_PLL2_Config+0x15c>)
 8008330:	f043 0310 	orr.w	r3, r3, #16
 8008334:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d106      	bne.n	800834a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800833c:	4b1a      	ldr	r3, [pc, #104]	; (80083a8 <RCCEx_PLL2_Config+0x15c>)
 800833e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008340:	4a19      	ldr	r2, [pc, #100]	; (80083a8 <RCCEx_PLL2_Config+0x15c>)
 8008342:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008346:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008348:	e00f      	b.n	800836a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d106      	bne.n	800835e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008350:	4b15      	ldr	r3, [pc, #84]	; (80083a8 <RCCEx_PLL2_Config+0x15c>)
 8008352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008354:	4a14      	ldr	r2, [pc, #80]	; (80083a8 <RCCEx_PLL2_Config+0x15c>)
 8008356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800835a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800835c:	e005      	b.n	800836a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800835e:	4b12      	ldr	r3, [pc, #72]	; (80083a8 <RCCEx_PLL2_Config+0x15c>)
 8008360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008362:	4a11      	ldr	r2, [pc, #68]	; (80083a8 <RCCEx_PLL2_Config+0x15c>)
 8008364:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008368:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800836a:	4b0f      	ldr	r3, [pc, #60]	; (80083a8 <RCCEx_PLL2_Config+0x15c>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a0e      	ldr	r2, [pc, #56]	; (80083a8 <RCCEx_PLL2_Config+0x15c>)
 8008370:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008374:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008376:	f7fa fa85 	bl	8002884 <HAL_GetTick>
 800837a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800837c:	e008      	b.n	8008390 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800837e:	f7fa fa81 	bl	8002884 <HAL_GetTick>
 8008382:	4602      	mov	r2, r0
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	2b02      	cmp	r3, #2
 800838a:	d901      	bls.n	8008390 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	e006      	b.n	800839e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008390:	4b05      	ldr	r3, [pc, #20]	; (80083a8 <RCCEx_PLL2_Config+0x15c>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008398:	2b00      	cmp	r3, #0
 800839a:	d0f0      	beq.n	800837e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800839c:	7bfb      	ldrb	r3, [r7, #15]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	58024400 	.word	0x58024400
 80083ac:	ffff0007 	.word	0xffff0007

080083b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80083ba:	2300      	movs	r3, #0
 80083bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80083be:	4b53      	ldr	r3, [pc, #332]	; (800850c <RCCEx_PLL3_Config+0x15c>)
 80083c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c2:	f003 0303 	and.w	r3, r3, #3
 80083c6:	2b03      	cmp	r3, #3
 80083c8:	d101      	bne.n	80083ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	e099      	b.n	8008502 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80083ce:	4b4f      	ldr	r3, [pc, #316]	; (800850c <RCCEx_PLL3_Config+0x15c>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a4e      	ldr	r2, [pc, #312]	; (800850c <RCCEx_PLL3_Config+0x15c>)
 80083d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083da:	f7fa fa53 	bl	8002884 <HAL_GetTick>
 80083de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80083e0:	e008      	b.n	80083f4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80083e2:	f7fa fa4f 	bl	8002884 <HAL_GetTick>
 80083e6:	4602      	mov	r2, r0
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	1ad3      	subs	r3, r2, r3
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d901      	bls.n	80083f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80083f0:	2303      	movs	r3, #3
 80083f2:	e086      	b.n	8008502 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80083f4:	4b45      	ldr	r3, [pc, #276]	; (800850c <RCCEx_PLL3_Config+0x15c>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1f0      	bne.n	80083e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008400:	4b42      	ldr	r3, [pc, #264]	; (800850c <RCCEx_PLL3_Config+0x15c>)
 8008402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008404:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	051b      	lsls	r3, r3, #20
 800840e:	493f      	ldr	r1, [pc, #252]	; (800850c <RCCEx_PLL3_Config+0x15c>)
 8008410:	4313      	orrs	r3, r2
 8008412:	628b      	str	r3, [r1, #40]	; 0x28
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	3b01      	subs	r3, #1
 800841a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	3b01      	subs	r3, #1
 8008424:	025b      	lsls	r3, r3, #9
 8008426:	b29b      	uxth	r3, r3
 8008428:	431a      	orrs	r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	3b01      	subs	r3, #1
 8008430:	041b      	lsls	r3, r3, #16
 8008432:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008436:	431a      	orrs	r2, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	3b01      	subs	r3, #1
 800843e:	061b      	lsls	r3, r3, #24
 8008440:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008444:	4931      	ldr	r1, [pc, #196]	; (800850c <RCCEx_PLL3_Config+0x15c>)
 8008446:	4313      	orrs	r3, r2
 8008448:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800844a:	4b30      	ldr	r3, [pc, #192]	; (800850c <RCCEx_PLL3_Config+0x15c>)
 800844c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	695b      	ldr	r3, [r3, #20]
 8008456:	492d      	ldr	r1, [pc, #180]	; (800850c <RCCEx_PLL3_Config+0x15c>)
 8008458:	4313      	orrs	r3, r2
 800845a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800845c:	4b2b      	ldr	r3, [pc, #172]	; (800850c <RCCEx_PLL3_Config+0x15c>)
 800845e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008460:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	699b      	ldr	r3, [r3, #24]
 8008468:	4928      	ldr	r1, [pc, #160]	; (800850c <RCCEx_PLL3_Config+0x15c>)
 800846a:	4313      	orrs	r3, r2
 800846c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800846e:	4b27      	ldr	r3, [pc, #156]	; (800850c <RCCEx_PLL3_Config+0x15c>)
 8008470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008472:	4a26      	ldr	r2, [pc, #152]	; (800850c <RCCEx_PLL3_Config+0x15c>)
 8008474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008478:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800847a:	4b24      	ldr	r3, [pc, #144]	; (800850c <RCCEx_PLL3_Config+0x15c>)
 800847c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800847e:	4b24      	ldr	r3, [pc, #144]	; (8008510 <RCCEx_PLL3_Config+0x160>)
 8008480:	4013      	ands	r3, r2
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	69d2      	ldr	r2, [r2, #28]
 8008486:	00d2      	lsls	r2, r2, #3
 8008488:	4920      	ldr	r1, [pc, #128]	; (800850c <RCCEx_PLL3_Config+0x15c>)
 800848a:	4313      	orrs	r3, r2
 800848c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800848e:	4b1f      	ldr	r3, [pc, #124]	; (800850c <RCCEx_PLL3_Config+0x15c>)
 8008490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008492:	4a1e      	ldr	r2, [pc, #120]	; (800850c <RCCEx_PLL3_Config+0x15c>)
 8008494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008498:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d106      	bne.n	80084ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80084a0:	4b1a      	ldr	r3, [pc, #104]	; (800850c <RCCEx_PLL3_Config+0x15c>)
 80084a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a4:	4a19      	ldr	r2, [pc, #100]	; (800850c <RCCEx_PLL3_Config+0x15c>)
 80084a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80084aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80084ac:	e00f      	b.n	80084ce <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d106      	bne.n	80084c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80084b4:	4b15      	ldr	r3, [pc, #84]	; (800850c <RCCEx_PLL3_Config+0x15c>)
 80084b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b8:	4a14      	ldr	r2, [pc, #80]	; (800850c <RCCEx_PLL3_Config+0x15c>)
 80084ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80084be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80084c0:	e005      	b.n	80084ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80084c2:	4b12      	ldr	r3, [pc, #72]	; (800850c <RCCEx_PLL3_Config+0x15c>)
 80084c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c6:	4a11      	ldr	r2, [pc, #68]	; (800850c <RCCEx_PLL3_Config+0x15c>)
 80084c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80084ce:	4b0f      	ldr	r3, [pc, #60]	; (800850c <RCCEx_PLL3_Config+0x15c>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a0e      	ldr	r2, [pc, #56]	; (800850c <RCCEx_PLL3_Config+0x15c>)
 80084d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084da:	f7fa f9d3 	bl	8002884 <HAL_GetTick>
 80084de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80084e0:	e008      	b.n	80084f4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80084e2:	f7fa f9cf 	bl	8002884 <HAL_GetTick>
 80084e6:	4602      	mov	r2, r0
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	1ad3      	subs	r3, r2, r3
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d901      	bls.n	80084f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80084f0:	2303      	movs	r3, #3
 80084f2:	e006      	b.n	8008502 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80084f4:	4b05      	ldr	r3, [pc, #20]	; (800850c <RCCEx_PLL3_Config+0x15c>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d0f0      	beq.n	80084e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008500:	7bfb      	ldrb	r3, [r7, #15]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	58024400 	.word	0x58024400
 8008510:	ffff0007 	.word	0xffff0007

08008514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d101      	bne.n	8008526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e049      	b.n	80085ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b00      	cmp	r3, #0
 8008530:	d106      	bne.n	8008540 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f7f9 fe54 	bl	80021e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2202      	movs	r2, #2
 8008544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	3304      	adds	r3, #4
 8008550:	4619      	mov	r1, r3
 8008552:	4610      	mov	r0, r2
 8008554:	f000 fce4 	bl	8008f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b082      	sub	sp, #8
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d101      	bne.n	80085d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	e049      	b.n	8008668 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d106      	bne.n	80085ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f841 	bl	8008670 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2202      	movs	r2, #2
 80085f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	3304      	adds	r3, #4
 80085fe:	4619      	mov	r1, r3
 8008600:	4610      	mov	r0, r2
 8008602:	f000 fc8d 	bl	8008f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2201      	movs	r2, #1
 800860a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2201      	movs	r2, #1
 800862a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2201      	movs	r2, #1
 8008632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2201      	movs	r2, #1
 8008642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2201      	movs	r2, #1
 800864a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2201      	movs	r2, #1
 8008652:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2201      	movs	r2, #1
 800865a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2201      	movs	r2, #1
 8008662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008678:	bf00      	nop
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d109      	bne.n	80086a8 <HAL_TIM_PWM_Start+0x24>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800869a:	b2db      	uxtb	r3, r3
 800869c:	2b01      	cmp	r3, #1
 800869e:	bf14      	ite	ne
 80086a0:	2301      	movne	r3, #1
 80086a2:	2300      	moveq	r3, #0
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	e03c      	b.n	8008722 <HAL_TIM_PWM_Start+0x9e>
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	2b04      	cmp	r3, #4
 80086ac:	d109      	bne.n	80086c2 <HAL_TIM_PWM_Start+0x3e>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	bf14      	ite	ne
 80086ba:	2301      	movne	r3, #1
 80086bc:	2300      	moveq	r3, #0
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	e02f      	b.n	8008722 <HAL_TIM_PWM_Start+0x9e>
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	2b08      	cmp	r3, #8
 80086c6:	d109      	bne.n	80086dc <HAL_TIM_PWM_Start+0x58>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	bf14      	ite	ne
 80086d4:	2301      	movne	r3, #1
 80086d6:	2300      	moveq	r3, #0
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	e022      	b.n	8008722 <HAL_TIM_PWM_Start+0x9e>
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	2b0c      	cmp	r3, #12
 80086e0:	d109      	bne.n	80086f6 <HAL_TIM_PWM_Start+0x72>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	bf14      	ite	ne
 80086ee:	2301      	movne	r3, #1
 80086f0:	2300      	moveq	r3, #0
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	e015      	b.n	8008722 <HAL_TIM_PWM_Start+0x9e>
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	2b10      	cmp	r3, #16
 80086fa:	d109      	bne.n	8008710 <HAL_TIM_PWM_Start+0x8c>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008702:	b2db      	uxtb	r3, r3
 8008704:	2b01      	cmp	r3, #1
 8008706:	bf14      	ite	ne
 8008708:	2301      	movne	r3, #1
 800870a:	2300      	moveq	r3, #0
 800870c:	b2db      	uxtb	r3, r3
 800870e:	e008      	b.n	8008722 <HAL_TIM_PWM_Start+0x9e>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008716:	b2db      	uxtb	r3, r3
 8008718:	2b01      	cmp	r3, #1
 800871a:	bf14      	ite	ne
 800871c:	2301      	movne	r3, #1
 800871e:	2300      	moveq	r3, #0
 8008720:	b2db      	uxtb	r3, r3
 8008722:	2b00      	cmp	r3, #0
 8008724:	d001      	beq.n	800872a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	e0a1      	b.n	800886e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d104      	bne.n	800873a <HAL_TIM_PWM_Start+0xb6>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2202      	movs	r2, #2
 8008734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008738:	e023      	b.n	8008782 <HAL_TIM_PWM_Start+0xfe>
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	2b04      	cmp	r3, #4
 800873e:	d104      	bne.n	800874a <HAL_TIM_PWM_Start+0xc6>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2202      	movs	r2, #2
 8008744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008748:	e01b      	b.n	8008782 <HAL_TIM_PWM_Start+0xfe>
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	2b08      	cmp	r3, #8
 800874e:	d104      	bne.n	800875a <HAL_TIM_PWM_Start+0xd6>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2202      	movs	r2, #2
 8008754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008758:	e013      	b.n	8008782 <HAL_TIM_PWM_Start+0xfe>
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	2b0c      	cmp	r3, #12
 800875e:	d104      	bne.n	800876a <HAL_TIM_PWM_Start+0xe6>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2202      	movs	r2, #2
 8008764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008768:	e00b      	b.n	8008782 <HAL_TIM_PWM_Start+0xfe>
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	2b10      	cmp	r3, #16
 800876e:	d104      	bne.n	800877a <HAL_TIM_PWM_Start+0xf6>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2202      	movs	r2, #2
 8008774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008778:	e003      	b.n	8008782 <HAL_TIM_PWM_Start+0xfe>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2202      	movs	r2, #2
 800877e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2201      	movs	r2, #1
 8008788:	6839      	ldr	r1, [r7, #0]
 800878a:	4618      	mov	r0, r3
 800878c:	f000 ffd6 	bl	800973c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a38      	ldr	r2, [pc, #224]	; (8008878 <HAL_TIM_PWM_Start+0x1f4>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d013      	beq.n	80087c2 <HAL_TIM_PWM_Start+0x13e>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a37      	ldr	r2, [pc, #220]	; (800887c <HAL_TIM_PWM_Start+0x1f8>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d00e      	beq.n	80087c2 <HAL_TIM_PWM_Start+0x13e>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a35      	ldr	r2, [pc, #212]	; (8008880 <HAL_TIM_PWM_Start+0x1fc>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d009      	beq.n	80087c2 <HAL_TIM_PWM_Start+0x13e>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a34      	ldr	r2, [pc, #208]	; (8008884 <HAL_TIM_PWM_Start+0x200>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d004      	beq.n	80087c2 <HAL_TIM_PWM_Start+0x13e>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a32      	ldr	r2, [pc, #200]	; (8008888 <HAL_TIM_PWM_Start+0x204>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d101      	bne.n	80087c6 <HAL_TIM_PWM_Start+0x142>
 80087c2:	2301      	movs	r3, #1
 80087c4:	e000      	b.n	80087c8 <HAL_TIM_PWM_Start+0x144>
 80087c6:	2300      	movs	r3, #0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d007      	beq.n	80087dc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80087da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a25      	ldr	r2, [pc, #148]	; (8008878 <HAL_TIM_PWM_Start+0x1f4>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d022      	beq.n	800882c <HAL_TIM_PWM_Start+0x1a8>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087ee:	d01d      	beq.n	800882c <HAL_TIM_PWM_Start+0x1a8>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a25      	ldr	r2, [pc, #148]	; (800888c <HAL_TIM_PWM_Start+0x208>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d018      	beq.n	800882c <HAL_TIM_PWM_Start+0x1a8>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a24      	ldr	r2, [pc, #144]	; (8008890 <HAL_TIM_PWM_Start+0x20c>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d013      	beq.n	800882c <HAL_TIM_PWM_Start+0x1a8>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a22      	ldr	r2, [pc, #136]	; (8008894 <HAL_TIM_PWM_Start+0x210>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d00e      	beq.n	800882c <HAL_TIM_PWM_Start+0x1a8>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a1a      	ldr	r2, [pc, #104]	; (800887c <HAL_TIM_PWM_Start+0x1f8>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d009      	beq.n	800882c <HAL_TIM_PWM_Start+0x1a8>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a1e      	ldr	r2, [pc, #120]	; (8008898 <HAL_TIM_PWM_Start+0x214>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d004      	beq.n	800882c <HAL_TIM_PWM_Start+0x1a8>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a16      	ldr	r2, [pc, #88]	; (8008880 <HAL_TIM_PWM_Start+0x1fc>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d115      	bne.n	8008858 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	689a      	ldr	r2, [r3, #8]
 8008832:	4b1a      	ldr	r3, [pc, #104]	; (800889c <HAL_TIM_PWM_Start+0x218>)
 8008834:	4013      	ands	r3, r2
 8008836:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2b06      	cmp	r3, #6
 800883c:	d015      	beq.n	800886a <HAL_TIM_PWM_Start+0x1e6>
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008844:	d011      	beq.n	800886a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f042 0201 	orr.w	r2, r2, #1
 8008854:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008856:	e008      	b.n	800886a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f042 0201 	orr.w	r2, r2, #1
 8008866:	601a      	str	r2, [r3, #0]
 8008868:	e000      	b.n	800886c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800886a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	40010000 	.word	0x40010000
 800887c:	40010400 	.word	0x40010400
 8008880:	40014000 	.word	0x40014000
 8008884:	40014400 	.word	0x40014400
 8008888:	40014800 	.word	0x40014800
 800888c:	40000400 	.word	0x40000400
 8008890:	40000800 	.word	0x40000800
 8008894:	40000c00 	.word	0x40000c00
 8008898:	40001800 	.word	0x40001800
 800889c:	00010007 	.word	0x00010007

080088a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b086      	sub	sp, #24
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d101      	bne.n	80088b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	e08f      	b.n	80089d4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d106      	bne.n	80088ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f7f9 fcdd 	bl	8002288 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2202      	movs	r2, #2
 80088d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	6899      	ldr	r1, [r3, #8]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	4b3e      	ldr	r3, [pc, #248]	; (80089dc <HAL_TIM_Encoder_Init+0x13c>)
 80088e2:	400b      	ands	r3, r1
 80088e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	3304      	adds	r3, #4
 80088ee:	4619      	mov	r1, r3
 80088f0:	4610      	mov	r0, r2
 80088f2:	f000 fb15 	bl	8008f20 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	699b      	ldr	r3, [r3, #24]
 8008904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	6a1b      	ldr	r3, [r3, #32]
 800890c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	4313      	orrs	r3, r2
 8008916:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	4b31      	ldr	r3, [pc, #196]	; (80089e0 <HAL_TIM_Encoder_Init+0x140>)
 800891c:	4013      	ands	r3, r2
 800891e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	689a      	ldr	r2, [r3, #8]
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	699b      	ldr	r3, [r3, #24]
 8008928:	021b      	lsls	r3, r3, #8
 800892a:	4313      	orrs	r3, r2
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	4313      	orrs	r3, r2
 8008930:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008932:	693a      	ldr	r2, [r7, #16]
 8008934:	4b2b      	ldr	r3, [pc, #172]	; (80089e4 <HAL_TIM_Encoder_Init+0x144>)
 8008936:	4013      	ands	r3, r2
 8008938:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800893a:	693a      	ldr	r2, [r7, #16]
 800893c:	4b2a      	ldr	r3, [pc, #168]	; (80089e8 <HAL_TIM_Encoder_Init+0x148>)
 800893e:	4013      	ands	r3, r2
 8008940:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	68da      	ldr	r2, [r3, #12]
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	69db      	ldr	r3, [r3, #28]
 800894a:	021b      	lsls	r3, r3, #8
 800894c:	4313      	orrs	r3, r2
 800894e:	693a      	ldr	r2, [r7, #16]
 8008950:	4313      	orrs	r3, r2
 8008952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	011a      	lsls	r2, r3, #4
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	031b      	lsls	r3, r3, #12
 8008960:	4313      	orrs	r3, r2
 8008962:	693a      	ldr	r2, [r7, #16]
 8008964:	4313      	orrs	r3, r2
 8008966:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800896e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008976:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	685a      	ldr	r2, [r3, #4]
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	695b      	ldr	r3, [r3, #20]
 8008980:	011b      	lsls	r3, r3, #4
 8008982:	4313      	orrs	r3, r2
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	4313      	orrs	r3, r2
 8008988:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	693a      	ldr	r2, [r7, #16]
 8008998:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2201      	movs	r2, #1
 80089be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3718      	adds	r7, #24
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	fffebff8 	.word	0xfffebff8
 80089e0:	fffffcfc 	.word	0xfffffcfc
 80089e4:	fffff3f3 	.word	0xfffff3f3
 80089e8:	ffff0f0f 	.word	0xffff0f0f

080089ec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089fc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008a04:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a0c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a14:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d110      	bne.n	8008a3e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a1c:	7bfb      	ldrb	r3, [r7, #15]
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d102      	bne.n	8008a28 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008a22:	7b7b      	ldrb	r3, [r7, #13]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d001      	beq.n	8008a2c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e069      	b.n	8008b00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2202      	movs	r2, #2
 8008a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2202      	movs	r2, #2
 8008a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a3c:	e031      	b.n	8008aa2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	2b04      	cmp	r3, #4
 8008a42:	d110      	bne.n	8008a66 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a44:	7bbb      	ldrb	r3, [r7, #14]
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d102      	bne.n	8008a50 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008a4a:	7b3b      	ldrb	r3, [r7, #12]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d001      	beq.n	8008a54 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	e055      	b.n	8008b00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2202      	movs	r2, #2
 8008a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2202      	movs	r2, #2
 8008a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a64:	e01d      	b.n	8008aa2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d108      	bne.n	8008a7e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a6c:	7bbb      	ldrb	r3, [r7, #14]
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d105      	bne.n	8008a7e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a72:	7b7b      	ldrb	r3, [r7, #13]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d102      	bne.n	8008a7e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008a78:	7b3b      	ldrb	r3, [r7, #12]
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d001      	beq.n	8008a82 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e03e      	b.n	8008b00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2202      	movs	r2, #2
 8008a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2202      	movs	r2, #2
 8008a8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2202      	movs	r2, #2
 8008a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2202      	movs	r2, #2
 8008a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d003      	beq.n	8008ab0 <HAL_TIM_Encoder_Start+0xc4>
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	2b04      	cmp	r3, #4
 8008aac:	d008      	beq.n	8008ac0 <HAL_TIM_Encoder_Start+0xd4>
 8008aae:	e00f      	b.n	8008ad0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f000 fe3f 	bl	800973c <TIM_CCxChannelCmd>
      break;
 8008abe:	e016      	b.n	8008aee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	2104      	movs	r1, #4
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 fe37 	bl	800973c <TIM_CCxChannelCmd>
      break;
 8008ace:	e00e      	b.n	8008aee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	2100      	movs	r1, #0
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f000 fe2f 	bl	800973c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	2104      	movs	r1, #4
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f000 fe28 	bl	800973c <TIM_CCxChannelCmd>
      break;
 8008aec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f042 0201 	orr.w	r2, r2, #1
 8008afc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b086      	sub	sp, #24
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b14:	2300      	movs	r3, #0
 8008b16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d101      	bne.n	8008b26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008b22:	2302      	movs	r3, #2
 8008b24:	e0ff      	b.n	8008d26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2b14      	cmp	r3, #20
 8008b32:	f200 80f0 	bhi.w	8008d16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008b36:	a201      	add	r2, pc, #4	; (adr r2, 8008b3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3c:	08008b91 	.word	0x08008b91
 8008b40:	08008d17 	.word	0x08008d17
 8008b44:	08008d17 	.word	0x08008d17
 8008b48:	08008d17 	.word	0x08008d17
 8008b4c:	08008bd1 	.word	0x08008bd1
 8008b50:	08008d17 	.word	0x08008d17
 8008b54:	08008d17 	.word	0x08008d17
 8008b58:	08008d17 	.word	0x08008d17
 8008b5c:	08008c13 	.word	0x08008c13
 8008b60:	08008d17 	.word	0x08008d17
 8008b64:	08008d17 	.word	0x08008d17
 8008b68:	08008d17 	.word	0x08008d17
 8008b6c:	08008c53 	.word	0x08008c53
 8008b70:	08008d17 	.word	0x08008d17
 8008b74:	08008d17 	.word	0x08008d17
 8008b78:	08008d17 	.word	0x08008d17
 8008b7c:	08008c95 	.word	0x08008c95
 8008b80:	08008d17 	.word	0x08008d17
 8008b84:	08008d17 	.word	0x08008d17
 8008b88:	08008d17 	.word	0x08008d17
 8008b8c:	08008cd5 	.word	0x08008cd5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	68b9      	ldr	r1, [r7, #8]
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 fa5c 	bl	8009054 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	699a      	ldr	r2, [r3, #24]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f042 0208 	orr.w	r2, r2, #8
 8008baa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	699a      	ldr	r2, [r3, #24]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f022 0204 	bic.w	r2, r2, #4
 8008bba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	6999      	ldr	r1, [r3, #24]
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	691a      	ldr	r2, [r3, #16]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	430a      	orrs	r2, r1
 8008bcc:	619a      	str	r2, [r3, #24]
      break;
 8008bce:	e0a5      	b.n	8008d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	68b9      	ldr	r1, [r7, #8]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f000 facc 	bl	8009174 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	699a      	ldr	r2, [r3, #24]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	699a      	ldr	r2, [r3, #24]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	6999      	ldr	r1, [r3, #24]
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	691b      	ldr	r3, [r3, #16]
 8008c06:	021a      	lsls	r2, r3, #8
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	430a      	orrs	r2, r1
 8008c0e:	619a      	str	r2, [r3, #24]
      break;
 8008c10:	e084      	b.n	8008d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68b9      	ldr	r1, [r7, #8]
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f000 fb35 	bl	8009288 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	69da      	ldr	r2, [r3, #28]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f042 0208 	orr.w	r2, r2, #8
 8008c2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	69da      	ldr	r2, [r3, #28]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f022 0204 	bic.w	r2, r2, #4
 8008c3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	69d9      	ldr	r1, [r3, #28]
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	691a      	ldr	r2, [r3, #16]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	430a      	orrs	r2, r1
 8008c4e:	61da      	str	r2, [r3, #28]
      break;
 8008c50:	e064      	b.n	8008d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68b9      	ldr	r1, [r7, #8]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f000 fb9d 	bl	8009398 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	69da      	ldr	r2, [r3, #28]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	69da      	ldr	r2, [r3, #28]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	69d9      	ldr	r1, [r3, #28]
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	021a      	lsls	r2, r3, #8
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	430a      	orrs	r2, r1
 8008c90:	61da      	str	r2, [r3, #28]
      break;
 8008c92:	e043      	b.n	8008d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	68b9      	ldr	r1, [r7, #8]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 fbe6 	bl	800946c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f042 0208 	orr.w	r2, r2, #8
 8008cae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f022 0204 	bic.w	r2, r2, #4
 8008cbe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	691a      	ldr	r2, [r3, #16]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	430a      	orrs	r2, r1
 8008cd0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008cd2:	e023      	b.n	8008d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	68b9      	ldr	r1, [r7, #8]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f000 fc2a 	bl	8009534 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cfe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	021a      	lsls	r2, r3, #8
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	430a      	orrs	r2, r1
 8008d12:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008d14:	e002      	b.n	8008d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	75fb      	strb	r3, [r7, #23]
      break;
 8008d1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3718      	adds	r7, #24
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop

08008d30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d101      	bne.n	8008d4c <HAL_TIM_ConfigClockSource+0x1c>
 8008d48:	2302      	movs	r3, #2
 8008d4a:	e0dc      	b.n	8008f06 <HAL_TIM_ConfigClockSource+0x1d6>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2202      	movs	r2, #2
 8008d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d64:	68ba      	ldr	r2, [r7, #8]
 8008d66:	4b6a      	ldr	r3, [pc, #424]	; (8008f10 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008d68:	4013      	ands	r3, r2
 8008d6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68ba      	ldr	r2, [r7, #8]
 8008d7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a64      	ldr	r2, [pc, #400]	; (8008f14 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	f000 80a9 	beq.w	8008eda <HAL_TIM_ConfigClockSource+0x1aa>
 8008d88:	4a62      	ldr	r2, [pc, #392]	; (8008f14 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	f200 80ae 	bhi.w	8008eec <HAL_TIM_ConfigClockSource+0x1bc>
 8008d90:	4a61      	ldr	r2, [pc, #388]	; (8008f18 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	f000 80a1 	beq.w	8008eda <HAL_TIM_ConfigClockSource+0x1aa>
 8008d98:	4a5f      	ldr	r2, [pc, #380]	; (8008f18 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	f200 80a6 	bhi.w	8008eec <HAL_TIM_ConfigClockSource+0x1bc>
 8008da0:	4a5e      	ldr	r2, [pc, #376]	; (8008f1c <HAL_TIM_ConfigClockSource+0x1ec>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	f000 8099 	beq.w	8008eda <HAL_TIM_ConfigClockSource+0x1aa>
 8008da8:	4a5c      	ldr	r2, [pc, #368]	; (8008f1c <HAL_TIM_ConfigClockSource+0x1ec>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	f200 809e 	bhi.w	8008eec <HAL_TIM_ConfigClockSource+0x1bc>
 8008db0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008db4:	f000 8091 	beq.w	8008eda <HAL_TIM_ConfigClockSource+0x1aa>
 8008db8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008dbc:	f200 8096 	bhi.w	8008eec <HAL_TIM_ConfigClockSource+0x1bc>
 8008dc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dc4:	f000 8089 	beq.w	8008eda <HAL_TIM_ConfigClockSource+0x1aa>
 8008dc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dcc:	f200 808e 	bhi.w	8008eec <HAL_TIM_ConfigClockSource+0x1bc>
 8008dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dd4:	d03e      	beq.n	8008e54 <HAL_TIM_ConfigClockSource+0x124>
 8008dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dda:	f200 8087 	bhi.w	8008eec <HAL_TIM_ConfigClockSource+0x1bc>
 8008dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008de2:	f000 8086 	beq.w	8008ef2 <HAL_TIM_ConfigClockSource+0x1c2>
 8008de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dea:	d87f      	bhi.n	8008eec <HAL_TIM_ConfigClockSource+0x1bc>
 8008dec:	2b70      	cmp	r3, #112	; 0x70
 8008dee:	d01a      	beq.n	8008e26 <HAL_TIM_ConfigClockSource+0xf6>
 8008df0:	2b70      	cmp	r3, #112	; 0x70
 8008df2:	d87b      	bhi.n	8008eec <HAL_TIM_ConfigClockSource+0x1bc>
 8008df4:	2b60      	cmp	r3, #96	; 0x60
 8008df6:	d050      	beq.n	8008e9a <HAL_TIM_ConfigClockSource+0x16a>
 8008df8:	2b60      	cmp	r3, #96	; 0x60
 8008dfa:	d877      	bhi.n	8008eec <HAL_TIM_ConfigClockSource+0x1bc>
 8008dfc:	2b50      	cmp	r3, #80	; 0x50
 8008dfe:	d03c      	beq.n	8008e7a <HAL_TIM_ConfigClockSource+0x14a>
 8008e00:	2b50      	cmp	r3, #80	; 0x50
 8008e02:	d873      	bhi.n	8008eec <HAL_TIM_ConfigClockSource+0x1bc>
 8008e04:	2b40      	cmp	r3, #64	; 0x40
 8008e06:	d058      	beq.n	8008eba <HAL_TIM_ConfigClockSource+0x18a>
 8008e08:	2b40      	cmp	r3, #64	; 0x40
 8008e0a:	d86f      	bhi.n	8008eec <HAL_TIM_ConfigClockSource+0x1bc>
 8008e0c:	2b30      	cmp	r3, #48	; 0x30
 8008e0e:	d064      	beq.n	8008eda <HAL_TIM_ConfigClockSource+0x1aa>
 8008e10:	2b30      	cmp	r3, #48	; 0x30
 8008e12:	d86b      	bhi.n	8008eec <HAL_TIM_ConfigClockSource+0x1bc>
 8008e14:	2b20      	cmp	r3, #32
 8008e16:	d060      	beq.n	8008eda <HAL_TIM_ConfigClockSource+0x1aa>
 8008e18:	2b20      	cmp	r3, #32
 8008e1a:	d867      	bhi.n	8008eec <HAL_TIM_ConfigClockSource+0x1bc>
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d05c      	beq.n	8008eda <HAL_TIM_ConfigClockSource+0x1aa>
 8008e20:	2b10      	cmp	r3, #16
 8008e22:	d05a      	beq.n	8008eda <HAL_TIM_ConfigClockSource+0x1aa>
 8008e24:	e062      	b.n	8008eec <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6818      	ldr	r0, [r3, #0]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	6899      	ldr	r1, [r3, #8]
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	685a      	ldr	r2, [r3, #4]
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	f000 fc61 	bl	80096fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008e48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	609a      	str	r2, [r3, #8]
      break;
 8008e52:	e04f      	b.n	8008ef4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6818      	ldr	r0, [r3, #0]
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	6899      	ldr	r1, [r3, #8]
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	685a      	ldr	r2, [r3, #4]
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	f000 fc4a 	bl	80096fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	689a      	ldr	r2, [r3, #8]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e76:	609a      	str	r2, [r3, #8]
      break;
 8008e78:	e03c      	b.n	8008ef4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6818      	ldr	r0, [r3, #0]
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	6859      	ldr	r1, [r3, #4]
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	461a      	mov	r2, r3
 8008e88:	f000 fbba 	bl	8009600 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2150      	movs	r1, #80	; 0x50
 8008e92:	4618      	mov	r0, r3
 8008e94:	f000 fc14 	bl	80096c0 <TIM_ITRx_SetConfig>
      break;
 8008e98:	e02c      	b.n	8008ef4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6818      	ldr	r0, [r3, #0]
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	6859      	ldr	r1, [r3, #4]
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	68db      	ldr	r3, [r3, #12]
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	f000 fbd9 	bl	800965e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2160      	movs	r1, #96	; 0x60
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f000 fc04 	bl	80096c0 <TIM_ITRx_SetConfig>
      break;
 8008eb8:	e01c      	b.n	8008ef4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6818      	ldr	r0, [r3, #0]
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	6859      	ldr	r1, [r3, #4]
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	f000 fb9a 	bl	8009600 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2140      	movs	r1, #64	; 0x40
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f000 fbf4 	bl	80096c0 <TIM_ITRx_SetConfig>
      break;
 8008ed8:	e00c      	b.n	8008ef4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	f000 fbeb 	bl	80096c0 <TIM_ITRx_SetConfig>
      break;
 8008eea:	e003      	b.n	8008ef4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	73fb      	strb	r3, [r7, #15]
      break;
 8008ef0:	e000      	b.n	8008ef4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008ef2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	ffceff88 	.word	0xffceff88
 8008f14:	00100040 	.word	0x00100040
 8008f18:	00100030 	.word	0x00100030
 8008f1c:	00100020 	.word	0x00100020

08008f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a40      	ldr	r2, [pc, #256]	; (8009034 <TIM_Base_SetConfig+0x114>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d013      	beq.n	8008f60 <TIM_Base_SetConfig+0x40>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f3e:	d00f      	beq.n	8008f60 <TIM_Base_SetConfig+0x40>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a3d      	ldr	r2, [pc, #244]	; (8009038 <TIM_Base_SetConfig+0x118>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d00b      	beq.n	8008f60 <TIM_Base_SetConfig+0x40>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a3c      	ldr	r2, [pc, #240]	; (800903c <TIM_Base_SetConfig+0x11c>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d007      	beq.n	8008f60 <TIM_Base_SetConfig+0x40>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a3b      	ldr	r2, [pc, #236]	; (8009040 <TIM_Base_SetConfig+0x120>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d003      	beq.n	8008f60 <TIM_Base_SetConfig+0x40>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a3a      	ldr	r2, [pc, #232]	; (8009044 <TIM_Base_SetConfig+0x124>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d108      	bne.n	8008f72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a2f      	ldr	r2, [pc, #188]	; (8009034 <TIM_Base_SetConfig+0x114>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d01f      	beq.n	8008fba <TIM_Base_SetConfig+0x9a>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f80:	d01b      	beq.n	8008fba <TIM_Base_SetConfig+0x9a>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4a2c      	ldr	r2, [pc, #176]	; (8009038 <TIM_Base_SetConfig+0x118>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d017      	beq.n	8008fba <TIM_Base_SetConfig+0x9a>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4a2b      	ldr	r2, [pc, #172]	; (800903c <TIM_Base_SetConfig+0x11c>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d013      	beq.n	8008fba <TIM_Base_SetConfig+0x9a>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4a2a      	ldr	r2, [pc, #168]	; (8009040 <TIM_Base_SetConfig+0x120>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d00f      	beq.n	8008fba <TIM_Base_SetConfig+0x9a>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4a29      	ldr	r2, [pc, #164]	; (8009044 <TIM_Base_SetConfig+0x124>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d00b      	beq.n	8008fba <TIM_Base_SetConfig+0x9a>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	4a28      	ldr	r2, [pc, #160]	; (8009048 <TIM_Base_SetConfig+0x128>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d007      	beq.n	8008fba <TIM_Base_SetConfig+0x9a>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	4a27      	ldr	r2, [pc, #156]	; (800904c <TIM_Base_SetConfig+0x12c>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d003      	beq.n	8008fba <TIM_Base_SetConfig+0x9a>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4a26      	ldr	r2, [pc, #152]	; (8009050 <TIM_Base_SetConfig+0x130>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d108      	bne.n	8008fcc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	689a      	ldr	r2, [r3, #8]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a10      	ldr	r2, [pc, #64]	; (8009034 <TIM_Base_SetConfig+0x114>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d00f      	beq.n	8009018 <TIM_Base_SetConfig+0xf8>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4a12      	ldr	r2, [pc, #72]	; (8009044 <TIM_Base_SetConfig+0x124>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d00b      	beq.n	8009018 <TIM_Base_SetConfig+0xf8>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4a11      	ldr	r2, [pc, #68]	; (8009048 <TIM_Base_SetConfig+0x128>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d007      	beq.n	8009018 <TIM_Base_SetConfig+0xf8>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	4a10      	ldr	r2, [pc, #64]	; (800904c <TIM_Base_SetConfig+0x12c>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d003      	beq.n	8009018 <TIM_Base_SetConfig+0xf8>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4a0f      	ldr	r2, [pc, #60]	; (8009050 <TIM_Base_SetConfig+0x130>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d103      	bne.n	8009020 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	691a      	ldr	r2, [r3, #16]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	615a      	str	r2, [r3, #20]
}
 8009026:	bf00      	nop
 8009028:	3714      	adds	r7, #20
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	40010000 	.word	0x40010000
 8009038:	40000400 	.word	0x40000400
 800903c:	40000800 	.word	0x40000800
 8009040:	40000c00 	.word	0x40000c00
 8009044:	40010400 	.word	0x40010400
 8009048:	40014000 	.word	0x40014000
 800904c:	40014400 	.word	0x40014400
 8009050:	40014800 	.word	0x40014800

08009054 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009054:	b480      	push	{r7}
 8009056:	b087      	sub	sp, #28
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a1b      	ldr	r3, [r3, #32]
 8009062:	f023 0201 	bic.w	r2, r3, #1
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a1b      	ldr	r3, [r3, #32]
 800906e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	4b37      	ldr	r3, [pc, #220]	; (800915c <TIM_OC1_SetConfig+0x108>)
 8009080:	4013      	ands	r3, r2
 8009082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f023 0303 	bic.w	r3, r3, #3
 800908a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	68fa      	ldr	r2, [r7, #12]
 8009092:	4313      	orrs	r3, r2
 8009094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	f023 0302 	bic.w	r3, r3, #2
 800909c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	697a      	ldr	r2, [r7, #20]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a2d      	ldr	r2, [pc, #180]	; (8009160 <TIM_OC1_SetConfig+0x10c>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d00f      	beq.n	80090d0 <TIM_OC1_SetConfig+0x7c>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a2c      	ldr	r2, [pc, #176]	; (8009164 <TIM_OC1_SetConfig+0x110>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d00b      	beq.n	80090d0 <TIM_OC1_SetConfig+0x7c>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a2b      	ldr	r2, [pc, #172]	; (8009168 <TIM_OC1_SetConfig+0x114>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d007      	beq.n	80090d0 <TIM_OC1_SetConfig+0x7c>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4a2a      	ldr	r2, [pc, #168]	; (800916c <TIM_OC1_SetConfig+0x118>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d003      	beq.n	80090d0 <TIM_OC1_SetConfig+0x7c>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	4a29      	ldr	r2, [pc, #164]	; (8009170 <TIM_OC1_SetConfig+0x11c>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d10c      	bne.n	80090ea <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	f023 0308 	bic.w	r3, r3, #8
 80090d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	697a      	ldr	r2, [r7, #20]
 80090de:	4313      	orrs	r3, r2
 80090e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	f023 0304 	bic.w	r3, r3, #4
 80090e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4a1c      	ldr	r2, [pc, #112]	; (8009160 <TIM_OC1_SetConfig+0x10c>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d00f      	beq.n	8009112 <TIM_OC1_SetConfig+0xbe>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4a1b      	ldr	r2, [pc, #108]	; (8009164 <TIM_OC1_SetConfig+0x110>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d00b      	beq.n	8009112 <TIM_OC1_SetConfig+0xbe>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a1a      	ldr	r2, [pc, #104]	; (8009168 <TIM_OC1_SetConfig+0x114>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d007      	beq.n	8009112 <TIM_OC1_SetConfig+0xbe>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4a19      	ldr	r2, [pc, #100]	; (800916c <TIM_OC1_SetConfig+0x118>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d003      	beq.n	8009112 <TIM_OC1_SetConfig+0xbe>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4a18      	ldr	r2, [pc, #96]	; (8009170 <TIM_OC1_SetConfig+0x11c>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d111      	bne.n	8009136 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009118:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009120:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	695b      	ldr	r3, [r3, #20]
 8009126:	693a      	ldr	r2, [r7, #16]
 8009128:	4313      	orrs	r3, r2
 800912a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	699b      	ldr	r3, [r3, #24]
 8009130:	693a      	ldr	r2, [r7, #16]
 8009132:	4313      	orrs	r3, r2
 8009134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	693a      	ldr	r2, [r7, #16]
 800913a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	68fa      	ldr	r2, [r7, #12]
 8009140:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	685a      	ldr	r2, [r3, #4]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	697a      	ldr	r2, [r7, #20]
 800914e:	621a      	str	r2, [r3, #32]
}
 8009150:	bf00      	nop
 8009152:	371c      	adds	r7, #28
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr
 800915c:	fffeff8f 	.word	0xfffeff8f
 8009160:	40010000 	.word	0x40010000
 8009164:	40010400 	.word	0x40010400
 8009168:	40014000 	.word	0x40014000
 800916c:	40014400 	.word	0x40014400
 8009170:	40014800 	.word	0x40014800

08009174 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009174:	b480      	push	{r7}
 8009176:	b087      	sub	sp, #28
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a1b      	ldr	r3, [r3, #32]
 8009182:	f023 0210 	bic.w	r2, r3, #16
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a1b      	ldr	r3, [r3, #32]
 800918e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	699b      	ldr	r3, [r3, #24]
 800919a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	4b34      	ldr	r3, [pc, #208]	; (8009270 <TIM_OC2_SetConfig+0xfc>)
 80091a0:	4013      	ands	r3, r2
 80091a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	021b      	lsls	r3, r3, #8
 80091b2:	68fa      	ldr	r2, [r7, #12]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	f023 0320 	bic.w	r3, r3, #32
 80091be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	011b      	lsls	r3, r3, #4
 80091c6:	697a      	ldr	r2, [r7, #20]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a29      	ldr	r2, [pc, #164]	; (8009274 <TIM_OC2_SetConfig+0x100>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d003      	beq.n	80091dc <TIM_OC2_SetConfig+0x68>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a28      	ldr	r2, [pc, #160]	; (8009278 <TIM_OC2_SetConfig+0x104>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d10d      	bne.n	80091f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	011b      	lsls	r3, r3, #4
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a1e      	ldr	r2, [pc, #120]	; (8009274 <TIM_OC2_SetConfig+0x100>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d00f      	beq.n	8009220 <TIM_OC2_SetConfig+0xac>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a1d      	ldr	r2, [pc, #116]	; (8009278 <TIM_OC2_SetConfig+0x104>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d00b      	beq.n	8009220 <TIM_OC2_SetConfig+0xac>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a1c      	ldr	r2, [pc, #112]	; (800927c <TIM_OC2_SetConfig+0x108>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d007      	beq.n	8009220 <TIM_OC2_SetConfig+0xac>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a1b      	ldr	r2, [pc, #108]	; (8009280 <TIM_OC2_SetConfig+0x10c>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d003      	beq.n	8009220 <TIM_OC2_SetConfig+0xac>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a1a      	ldr	r2, [pc, #104]	; (8009284 <TIM_OC2_SetConfig+0x110>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d113      	bne.n	8009248 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009226:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800922e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	695b      	ldr	r3, [r3, #20]
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	4313      	orrs	r3, r2
 800923a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	699b      	ldr	r3, [r3, #24]
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	693a      	ldr	r2, [r7, #16]
 8009244:	4313      	orrs	r3, r2
 8009246:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	693a      	ldr	r2, [r7, #16]
 800924c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	68fa      	ldr	r2, [r7, #12]
 8009252:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	685a      	ldr	r2, [r3, #4]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	697a      	ldr	r2, [r7, #20]
 8009260:	621a      	str	r2, [r3, #32]
}
 8009262:	bf00      	nop
 8009264:	371c      	adds	r7, #28
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr
 800926e:	bf00      	nop
 8009270:	feff8fff 	.word	0xfeff8fff
 8009274:	40010000 	.word	0x40010000
 8009278:	40010400 	.word	0x40010400
 800927c:	40014000 	.word	0x40014000
 8009280:	40014400 	.word	0x40014400
 8009284:	40014800 	.word	0x40014800

08009288 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009288:	b480      	push	{r7}
 800928a:	b087      	sub	sp, #28
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a1b      	ldr	r3, [r3, #32]
 8009296:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6a1b      	ldr	r3, [r3, #32]
 80092a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	69db      	ldr	r3, [r3, #28]
 80092ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80092b0:	68fa      	ldr	r2, [r7, #12]
 80092b2:	4b33      	ldr	r3, [pc, #204]	; (8009380 <TIM_OC3_SetConfig+0xf8>)
 80092b4:	4013      	ands	r3, r2
 80092b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f023 0303 	bic.w	r3, r3, #3
 80092be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	4313      	orrs	r3, r2
 80092c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80092d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	021b      	lsls	r3, r3, #8
 80092d8:	697a      	ldr	r2, [r7, #20]
 80092da:	4313      	orrs	r3, r2
 80092dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a28      	ldr	r2, [pc, #160]	; (8009384 <TIM_OC3_SetConfig+0xfc>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d003      	beq.n	80092ee <TIM_OC3_SetConfig+0x66>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	4a27      	ldr	r2, [pc, #156]	; (8009388 <TIM_OC3_SetConfig+0x100>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d10d      	bne.n	800930a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80092f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	021b      	lsls	r3, r3, #8
 80092fc:	697a      	ldr	r2, [r7, #20]
 80092fe:	4313      	orrs	r3, r2
 8009300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009308:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4a1d      	ldr	r2, [pc, #116]	; (8009384 <TIM_OC3_SetConfig+0xfc>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d00f      	beq.n	8009332 <TIM_OC3_SetConfig+0xaa>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	4a1c      	ldr	r2, [pc, #112]	; (8009388 <TIM_OC3_SetConfig+0x100>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d00b      	beq.n	8009332 <TIM_OC3_SetConfig+0xaa>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	4a1b      	ldr	r2, [pc, #108]	; (800938c <TIM_OC3_SetConfig+0x104>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d007      	beq.n	8009332 <TIM_OC3_SetConfig+0xaa>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	4a1a      	ldr	r2, [pc, #104]	; (8009390 <TIM_OC3_SetConfig+0x108>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d003      	beq.n	8009332 <TIM_OC3_SetConfig+0xaa>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4a19      	ldr	r2, [pc, #100]	; (8009394 <TIM_OC3_SetConfig+0x10c>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d113      	bne.n	800935a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009338:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009340:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	695b      	ldr	r3, [r3, #20]
 8009346:	011b      	lsls	r3, r3, #4
 8009348:	693a      	ldr	r2, [r7, #16]
 800934a:	4313      	orrs	r3, r2
 800934c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	699b      	ldr	r3, [r3, #24]
 8009352:	011b      	lsls	r3, r3, #4
 8009354:	693a      	ldr	r2, [r7, #16]
 8009356:	4313      	orrs	r3, r2
 8009358:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	693a      	ldr	r2, [r7, #16]
 800935e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	68fa      	ldr	r2, [r7, #12]
 8009364:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	685a      	ldr	r2, [r3, #4]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	697a      	ldr	r2, [r7, #20]
 8009372:	621a      	str	r2, [r3, #32]
}
 8009374:	bf00      	nop
 8009376:	371c      	adds	r7, #28
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr
 8009380:	fffeff8f 	.word	0xfffeff8f
 8009384:	40010000 	.word	0x40010000
 8009388:	40010400 	.word	0x40010400
 800938c:	40014000 	.word	0x40014000
 8009390:	40014400 	.word	0x40014400
 8009394:	40014800 	.word	0x40014800

08009398 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009398:	b480      	push	{r7}
 800939a:	b087      	sub	sp, #28
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a1b      	ldr	r3, [r3, #32]
 80093a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a1b      	ldr	r3, [r3, #32]
 80093b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	69db      	ldr	r3, [r3, #28]
 80093be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	4b24      	ldr	r3, [pc, #144]	; (8009454 <TIM_OC4_SetConfig+0xbc>)
 80093c4:	4013      	ands	r3, r2
 80093c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	021b      	lsls	r3, r3, #8
 80093d6:	68fa      	ldr	r2, [r7, #12]
 80093d8:	4313      	orrs	r3, r2
 80093da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80093e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	031b      	lsls	r3, r3, #12
 80093ea:	693a      	ldr	r2, [r7, #16]
 80093ec:	4313      	orrs	r3, r2
 80093ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4a19      	ldr	r2, [pc, #100]	; (8009458 <TIM_OC4_SetConfig+0xc0>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d00f      	beq.n	8009418 <TIM_OC4_SetConfig+0x80>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a18      	ldr	r2, [pc, #96]	; (800945c <TIM_OC4_SetConfig+0xc4>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d00b      	beq.n	8009418 <TIM_OC4_SetConfig+0x80>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a17      	ldr	r2, [pc, #92]	; (8009460 <TIM_OC4_SetConfig+0xc8>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d007      	beq.n	8009418 <TIM_OC4_SetConfig+0x80>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4a16      	ldr	r2, [pc, #88]	; (8009464 <TIM_OC4_SetConfig+0xcc>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d003      	beq.n	8009418 <TIM_OC4_SetConfig+0x80>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4a15      	ldr	r2, [pc, #84]	; (8009468 <TIM_OC4_SetConfig+0xd0>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d109      	bne.n	800942c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800941e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	695b      	ldr	r3, [r3, #20]
 8009424:	019b      	lsls	r3, r3, #6
 8009426:	697a      	ldr	r2, [r7, #20]
 8009428:	4313      	orrs	r3, r2
 800942a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	697a      	ldr	r2, [r7, #20]
 8009430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	68fa      	ldr	r2, [r7, #12]
 8009436:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	685a      	ldr	r2, [r3, #4]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	693a      	ldr	r2, [r7, #16]
 8009444:	621a      	str	r2, [r3, #32]
}
 8009446:	bf00      	nop
 8009448:	371c      	adds	r7, #28
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
 8009452:	bf00      	nop
 8009454:	feff8fff 	.word	0xfeff8fff
 8009458:	40010000 	.word	0x40010000
 800945c:	40010400 	.word	0x40010400
 8009460:	40014000 	.word	0x40014000
 8009464:	40014400 	.word	0x40014400
 8009468:	40014800 	.word	0x40014800

0800946c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800946c:	b480      	push	{r7}
 800946e:	b087      	sub	sp, #28
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6a1b      	ldr	r3, [r3, #32]
 800947a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a1b      	ldr	r3, [r3, #32]
 8009486:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	4b21      	ldr	r3, [pc, #132]	; (800951c <TIM_OC5_SetConfig+0xb0>)
 8009498:	4013      	ands	r3, r2
 800949a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	68fa      	ldr	r2, [r7, #12]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80094ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	041b      	lsls	r3, r3, #16
 80094b4:	693a      	ldr	r2, [r7, #16]
 80094b6:	4313      	orrs	r3, r2
 80094b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a18      	ldr	r2, [pc, #96]	; (8009520 <TIM_OC5_SetConfig+0xb4>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d00f      	beq.n	80094e2 <TIM_OC5_SetConfig+0x76>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a17      	ldr	r2, [pc, #92]	; (8009524 <TIM_OC5_SetConfig+0xb8>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d00b      	beq.n	80094e2 <TIM_OC5_SetConfig+0x76>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a16      	ldr	r2, [pc, #88]	; (8009528 <TIM_OC5_SetConfig+0xbc>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d007      	beq.n	80094e2 <TIM_OC5_SetConfig+0x76>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a15      	ldr	r2, [pc, #84]	; (800952c <TIM_OC5_SetConfig+0xc0>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d003      	beq.n	80094e2 <TIM_OC5_SetConfig+0x76>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a14      	ldr	r2, [pc, #80]	; (8009530 <TIM_OC5_SetConfig+0xc4>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d109      	bne.n	80094f6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	695b      	ldr	r3, [r3, #20]
 80094ee:	021b      	lsls	r3, r3, #8
 80094f0:	697a      	ldr	r2, [r7, #20]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	697a      	ldr	r2, [r7, #20]
 80094fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	685a      	ldr	r2, [r3, #4]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	621a      	str	r2, [r3, #32]
}
 8009510:	bf00      	nop
 8009512:	371c      	adds	r7, #28
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr
 800951c:	fffeff8f 	.word	0xfffeff8f
 8009520:	40010000 	.word	0x40010000
 8009524:	40010400 	.word	0x40010400
 8009528:	40014000 	.word	0x40014000
 800952c:	40014400 	.word	0x40014400
 8009530:	40014800 	.word	0x40014800

08009534 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009534:	b480      	push	{r7}
 8009536:	b087      	sub	sp, #28
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a1b      	ldr	r3, [r3, #32]
 8009542:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a1b      	ldr	r3, [r3, #32]
 800954e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800955a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	4b22      	ldr	r3, [pc, #136]	; (80095e8 <TIM_OC6_SetConfig+0xb4>)
 8009560:	4013      	ands	r3, r2
 8009562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	021b      	lsls	r3, r3, #8
 800956a:	68fa      	ldr	r2, [r7, #12]
 800956c:	4313      	orrs	r3, r2
 800956e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009576:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	051b      	lsls	r3, r3, #20
 800957e:	693a      	ldr	r2, [r7, #16]
 8009580:	4313      	orrs	r3, r2
 8009582:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	4a19      	ldr	r2, [pc, #100]	; (80095ec <TIM_OC6_SetConfig+0xb8>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d00f      	beq.n	80095ac <TIM_OC6_SetConfig+0x78>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	4a18      	ldr	r2, [pc, #96]	; (80095f0 <TIM_OC6_SetConfig+0xbc>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d00b      	beq.n	80095ac <TIM_OC6_SetConfig+0x78>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	4a17      	ldr	r2, [pc, #92]	; (80095f4 <TIM_OC6_SetConfig+0xc0>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d007      	beq.n	80095ac <TIM_OC6_SetConfig+0x78>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a16      	ldr	r2, [pc, #88]	; (80095f8 <TIM_OC6_SetConfig+0xc4>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d003      	beq.n	80095ac <TIM_OC6_SetConfig+0x78>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a15      	ldr	r2, [pc, #84]	; (80095fc <TIM_OC6_SetConfig+0xc8>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d109      	bne.n	80095c0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80095b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	695b      	ldr	r3, [r3, #20]
 80095b8:	029b      	lsls	r3, r3, #10
 80095ba:	697a      	ldr	r2, [r7, #20]
 80095bc:	4313      	orrs	r3, r2
 80095be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	697a      	ldr	r2, [r7, #20]
 80095c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	685a      	ldr	r2, [r3, #4]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	693a      	ldr	r2, [r7, #16]
 80095d8:	621a      	str	r2, [r3, #32]
}
 80095da:	bf00      	nop
 80095dc:	371c      	adds	r7, #28
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	feff8fff 	.word	0xfeff8fff
 80095ec:	40010000 	.word	0x40010000
 80095f0:	40010400 	.word	0x40010400
 80095f4:	40014000 	.word	0x40014000
 80095f8:	40014400 	.word	0x40014400
 80095fc:	40014800 	.word	0x40014800

08009600 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009600:	b480      	push	{r7}
 8009602:	b087      	sub	sp, #28
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6a1b      	ldr	r3, [r3, #32]
 8009610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	f023 0201 	bic.w	r2, r3, #1
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	699b      	ldr	r3, [r3, #24]
 8009622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800962a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	011b      	lsls	r3, r3, #4
 8009630:	693a      	ldr	r2, [r7, #16]
 8009632:	4313      	orrs	r3, r2
 8009634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	f023 030a 	bic.w	r3, r3, #10
 800963c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800963e:	697a      	ldr	r2, [r7, #20]
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	4313      	orrs	r3, r2
 8009644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	693a      	ldr	r2, [r7, #16]
 800964a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	697a      	ldr	r2, [r7, #20]
 8009650:	621a      	str	r2, [r3, #32]
}
 8009652:	bf00      	nop
 8009654:	371c      	adds	r7, #28
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr

0800965e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800965e:	b480      	push	{r7}
 8009660:	b087      	sub	sp, #28
 8009662:	af00      	add	r7, sp, #0
 8009664:	60f8      	str	r0, [r7, #12]
 8009666:	60b9      	str	r1, [r7, #8]
 8009668:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6a1b      	ldr	r3, [r3, #32]
 800966e:	f023 0210 	bic.w	r2, r3, #16
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	699b      	ldr	r3, [r3, #24]
 800967a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6a1b      	ldr	r3, [r3, #32]
 8009680:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009688:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	031b      	lsls	r3, r3, #12
 800968e:	697a      	ldr	r2, [r7, #20]
 8009690:	4313      	orrs	r3, r2
 8009692:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800969a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	011b      	lsls	r3, r3, #4
 80096a0:	693a      	ldr	r2, [r7, #16]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	697a      	ldr	r2, [r7, #20]
 80096aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	693a      	ldr	r2, [r7, #16]
 80096b0:	621a      	str	r2, [r3, #32]
}
 80096b2:	bf00      	nop
 80096b4:	371c      	adds	r7, #28
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr
	...

080096c0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	4b09      	ldr	r3, [pc, #36]	; (80096f8 <TIM_ITRx_SetConfig+0x38>)
 80096d4:	4013      	ands	r3, r2
 80096d6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80096d8:	683a      	ldr	r2, [r7, #0]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	4313      	orrs	r3, r2
 80096de:	f043 0307 	orr.w	r3, r3, #7
 80096e2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	68fa      	ldr	r2, [r7, #12]
 80096e8:	609a      	str	r2, [r3, #8]
}
 80096ea:	bf00      	nop
 80096ec:	3714      	adds	r7, #20
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	ffcfff8f 	.word	0xffcfff8f

080096fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b087      	sub	sp, #28
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	607a      	str	r2, [r7, #4]
 8009708:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009716:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	021a      	lsls	r2, r3, #8
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	431a      	orrs	r2, r3
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	4313      	orrs	r3, r2
 8009724:	697a      	ldr	r2, [r7, #20]
 8009726:	4313      	orrs	r3, r2
 8009728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	697a      	ldr	r2, [r7, #20]
 800972e:	609a      	str	r2, [r3, #8]
}
 8009730:	bf00      	nop
 8009732:	371c      	adds	r7, #28
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800973c:	b480      	push	{r7}
 800973e:	b087      	sub	sp, #28
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	f003 031f 	and.w	r3, r3, #31
 800974e:	2201      	movs	r2, #1
 8009750:	fa02 f303 	lsl.w	r3, r2, r3
 8009754:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6a1a      	ldr	r2, [r3, #32]
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	43db      	mvns	r3, r3
 800975e:	401a      	ands	r2, r3
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6a1a      	ldr	r2, [r3, #32]
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	f003 031f 	and.w	r3, r3, #31
 800976e:	6879      	ldr	r1, [r7, #4]
 8009770:	fa01 f303 	lsl.w	r3, r1, r3
 8009774:	431a      	orrs	r2, r3
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	621a      	str	r2, [r3, #32]
}
 800977a:	bf00      	nop
 800977c:	371c      	adds	r7, #28
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr
	...

08009788 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009798:	2b01      	cmp	r3, #1
 800979a:	d101      	bne.n	80097a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800979c:	2302      	movs	r3, #2
 800979e:	e06d      	b.n	800987c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2202      	movs	r2, #2
 80097ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a30      	ldr	r2, [pc, #192]	; (8009888 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d004      	beq.n	80097d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a2f      	ldr	r2, [pc, #188]	; (800988c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d108      	bne.n	80097e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80097da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	68fa      	ldr	r2, [r7, #12]
 80097e2:	4313      	orrs	r3, r2
 80097e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	68fa      	ldr	r2, [r7, #12]
 80097f4:	4313      	orrs	r3, r2
 80097f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a20      	ldr	r2, [pc, #128]	; (8009888 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d022      	beq.n	8009850 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009812:	d01d      	beq.n	8009850 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a1d      	ldr	r2, [pc, #116]	; (8009890 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d018      	beq.n	8009850 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a1c      	ldr	r2, [pc, #112]	; (8009894 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d013      	beq.n	8009850 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a1a      	ldr	r2, [pc, #104]	; (8009898 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d00e      	beq.n	8009850 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a15      	ldr	r2, [pc, #84]	; (800988c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d009      	beq.n	8009850 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a16      	ldr	r2, [pc, #88]	; (800989c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d004      	beq.n	8009850 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a15      	ldr	r2, [pc, #84]	; (80098a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d10c      	bne.n	800986a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009856:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	68ba      	ldr	r2, [r7, #8]
 800985e:	4313      	orrs	r3, r2
 8009860:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	68ba      	ldr	r2, [r7, #8]
 8009868:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2201      	movs	r2, #1
 800986e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800987a:	2300      	movs	r3, #0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3714      	adds	r7, #20
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr
 8009888:	40010000 	.word	0x40010000
 800988c:	40010400 	.word	0x40010400
 8009890:	40000400 	.word	0x40000400
 8009894:	40000800 	.word	0x40000800
 8009898:	40000c00 	.word	0x40000c00
 800989c:	40001800 	.word	0x40001800
 80098a0:	40014000 	.word	0x40014000

080098a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d101      	bne.n	80098b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	e042      	b.n	800993c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d106      	bne.n	80098ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f7f8 fd63 	bl	8002394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2224      	movs	r2, #36	; 0x24
 80098d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f022 0201 	bic.w	r2, r2, #1
 80098e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 f8c2 	bl	8009a70 <UART_SetConfig>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d101      	bne.n	80098f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	e022      	b.n	800993c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d002      	beq.n	8009904 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 fe16 	bl	800a530 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	685a      	ldr	r2, [r3, #4]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009912:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	689a      	ldr	r2, [r3, #8]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009922:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f042 0201 	orr.w	r2, r2, #1
 8009932:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 fe9d 	bl	800a674 <UART_CheckIdleState>
 800993a:	4603      	mov	r3, r0
}
 800993c:	4618      	mov	r0, r3
 800993e:	3708      	adds	r7, #8
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b08a      	sub	sp, #40	; 0x28
 8009948:	af02      	add	r7, sp, #8
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	603b      	str	r3, [r7, #0]
 8009950:	4613      	mov	r3, r2
 8009952:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800995a:	2b20      	cmp	r3, #32
 800995c:	f040 8083 	bne.w	8009a66 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d002      	beq.n	800996c <HAL_UART_Transmit+0x28>
 8009966:	88fb      	ldrh	r3, [r7, #6]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d101      	bne.n	8009970 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	e07b      	b.n	8009a68 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009976:	2b01      	cmp	r3, #1
 8009978:	d101      	bne.n	800997e <HAL_UART_Transmit+0x3a>
 800997a:	2302      	movs	r3, #2
 800997c:	e074      	b.n	8009a68 <HAL_UART_Transmit+0x124>
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2201      	movs	r2, #1
 8009982:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2200      	movs	r2, #0
 800998a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2221      	movs	r2, #33	; 0x21
 8009992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009996:	f7f8 ff75 	bl	8002884 <HAL_GetTick>
 800999a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	88fa      	ldrh	r2, [r7, #6]
 80099a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	88fa      	ldrh	r2, [r7, #6]
 80099a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099b4:	d108      	bne.n	80099c8 <HAL_UART_Transmit+0x84>
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	691b      	ldr	r3, [r3, #16]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d104      	bne.n	80099c8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80099be:	2300      	movs	r3, #0
 80099c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	61bb      	str	r3, [r7, #24]
 80099c6:	e003      	b.n	80099d0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80099cc:	2300      	movs	r3, #0
 80099ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2200      	movs	r2, #0
 80099d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80099d8:	e02c      	b.n	8009a34 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	9300      	str	r3, [sp, #0]
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	2200      	movs	r2, #0
 80099e2:	2180      	movs	r1, #128	; 0x80
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	f000 fe90 	bl	800a70a <UART_WaitOnFlagUntilTimeout>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d001      	beq.n	80099f4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80099f0:	2303      	movs	r3, #3
 80099f2:	e039      	b.n	8009a68 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80099f4:	69fb      	ldr	r3, [r7, #28]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10b      	bne.n	8009a12 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80099fa:	69bb      	ldr	r3, [r7, #24]
 80099fc:	881b      	ldrh	r3, [r3, #0]
 80099fe:	461a      	mov	r2, r3
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a08:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	3302      	adds	r3, #2
 8009a0e:	61bb      	str	r3, [r7, #24]
 8009a10:	e007      	b.n	8009a22 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009a12:	69fb      	ldr	r3, [r7, #28]
 8009a14:	781a      	ldrb	r2, [r3, #0]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	b29a      	uxth	r2, r3
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1cc      	bne.n	80099da <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	9300      	str	r3, [sp, #0]
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	2200      	movs	r2, #0
 8009a48:	2140      	movs	r1, #64	; 0x40
 8009a4a:	68f8      	ldr	r0, [r7, #12]
 8009a4c:	f000 fe5d 	bl	800a70a <UART_WaitOnFlagUntilTimeout>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d001      	beq.n	8009a5a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009a56:	2303      	movs	r3, #3
 8009a58:	e006      	b.n	8009a68 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2220      	movs	r2, #32
 8009a5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009a62:	2300      	movs	r3, #0
 8009a64:	e000      	b.n	8009a68 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009a66:	2302      	movs	r3, #2
  }
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3720      	adds	r7, #32
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a70:	b5b0      	push	{r4, r5, r7, lr}
 8009a72:	b08e      	sub	sp, #56	; 0x38
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	689a      	ldr	r2, [r3, #8]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	691b      	ldr	r3, [r3, #16]
 8009a86:	431a      	orrs	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	695b      	ldr	r3, [r3, #20]
 8009a8c:	431a      	orrs	r2, r3
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	69db      	ldr	r3, [r3, #28]
 8009a92:	4313      	orrs	r3, r2
 8009a94:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	4bbf      	ldr	r3, [pc, #764]	; (8009d9c <UART_SetConfig+0x32c>)
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	6812      	ldr	r2, [r2, #0]
 8009aa4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009aa6:	430b      	orrs	r3, r1
 8009aa8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	68da      	ldr	r2, [r3, #12]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	430a      	orrs	r2, r1
 8009abe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	699b      	ldr	r3, [r3, #24]
 8009ac4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4ab5      	ldr	r2, [pc, #724]	; (8009da0 <UART_SetConfig+0x330>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d004      	beq.n	8009ada <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6a1b      	ldr	r3, [r3, #32]
 8009ad4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	689a      	ldr	r2, [r3, #8]
 8009ae0:	4bb0      	ldr	r3, [pc, #704]	; (8009da4 <UART_SetConfig+0x334>)
 8009ae2:	4013      	ands	r3, r2
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	6812      	ldr	r2, [r2, #0]
 8009ae8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009aea:	430b      	orrs	r3, r1
 8009aec:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af4:	f023 010f 	bic.w	r1, r3, #15
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	430a      	orrs	r2, r1
 8009b02:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4aa7      	ldr	r2, [pc, #668]	; (8009da8 <UART_SetConfig+0x338>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d176      	bne.n	8009bfc <UART_SetConfig+0x18c>
 8009b0e:	4ba7      	ldr	r3, [pc, #668]	; (8009dac <UART_SetConfig+0x33c>)
 8009b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b16:	2b28      	cmp	r3, #40	; 0x28
 8009b18:	d86c      	bhi.n	8009bf4 <UART_SetConfig+0x184>
 8009b1a:	a201      	add	r2, pc, #4	; (adr r2, 8009b20 <UART_SetConfig+0xb0>)
 8009b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b20:	08009bc5 	.word	0x08009bc5
 8009b24:	08009bf5 	.word	0x08009bf5
 8009b28:	08009bf5 	.word	0x08009bf5
 8009b2c:	08009bf5 	.word	0x08009bf5
 8009b30:	08009bf5 	.word	0x08009bf5
 8009b34:	08009bf5 	.word	0x08009bf5
 8009b38:	08009bf5 	.word	0x08009bf5
 8009b3c:	08009bf5 	.word	0x08009bf5
 8009b40:	08009bcd 	.word	0x08009bcd
 8009b44:	08009bf5 	.word	0x08009bf5
 8009b48:	08009bf5 	.word	0x08009bf5
 8009b4c:	08009bf5 	.word	0x08009bf5
 8009b50:	08009bf5 	.word	0x08009bf5
 8009b54:	08009bf5 	.word	0x08009bf5
 8009b58:	08009bf5 	.word	0x08009bf5
 8009b5c:	08009bf5 	.word	0x08009bf5
 8009b60:	08009bd5 	.word	0x08009bd5
 8009b64:	08009bf5 	.word	0x08009bf5
 8009b68:	08009bf5 	.word	0x08009bf5
 8009b6c:	08009bf5 	.word	0x08009bf5
 8009b70:	08009bf5 	.word	0x08009bf5
 8009b74:	08009bf5 	.word	0x08009bf5
 8009b78:	08009bf5 	.word	0x08009bf5
 8009b7c:	08009bf5 	.word	0x08009bf5
 8009b80:	08009bdd 	.word	0x08009bdd
 8009b84:	08009bf5 	.word	0x08009bf5
 8009b88:	08009bf5 	.word	0x08009bf5
 8009b8c:	08009bf5 	.word	0x08009bf5
 8009b90:	08009bf5 	.word	0x08009bf5
 8009b94:	08009bf5 	.word	0x08009bf5
 8009b98:	08009bf5 	.word	0x08009bf5
 8009b9c:	08009bf5 	.word	0x08009bf5
 8009ba0:	08009be5 	.word	0x08009be5
 8009ba4:	08009bf5 	.word	0x08009bf5
 8009ba8:	08009bf5 	.word	0x08009bf5
 8009bac:	08009bf5 	.word	0x08009bf5
 8009bb0:	08009bf5 	.word	0x08009bf5
 8009bb4:	08009bf5 	.word	0x08009bf5
 8009bb8:	08009bf5 	.word	0x08009bf5
 8009bbc:	08009bf5 	.word	0x08009bf5
 8009bc0:	08009bed 	.word	0x08009bed
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bca:	e222      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009bcc:	2304      	movs	r3, #4
 8009bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bd2:	e21e      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009bd4:	2308      	movs	r3, #8
 8009bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bda:	e21a      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009bdc:	2310      	movs	r3, #16
 8009bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009be2:	e216      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009be4:	2320      	movs	r3, #32
 8009be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bea:	e212      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009bec:	2340      	movs	r3, #64	; 0x40
 8009bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bf2:	e20e      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009bf4:	2380      	movs	r3, #128	; 0x80
 8009bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bfa:	e20a      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a6b      	ldr	r2, [pc, #428]	; (8009db0 <UART_SetConfig+0x340>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d130      	bne.n	8009c68 <UART_SetConfig+0x1f8>
 8009c06:	4b69      	ldr	r3, [pc, #420]	; (8009dac <UART_SetConfig+0x33c>)
 8009c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c0a:	f003 0307 	and.w	r3, r3, #7
 8009c0e:	2b05      	cmp	r3, #5
 8009c10:	d826      	bhi.n	8009c60 <UART_SetConfig+0x1f0>
 8009c12:	a201      	add	r2, pc, #4	; (adr r2, 8009c18 <UART_SetConfig+0x1a8>)
 8009c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c18:	08009c31 	.word	0x08009c31
 8009c1c:	08009c39 	.word	0x08009c39
 8009c20:	08009c41 	.word	0x08009c41
 8009c24:	08009c49 	.word	0x08009c49
 8009c28:	08009c51 	.word	0x08009c51
 8009c2c:	08009c59 	.word	0x08009c59
 8009c30:	2300      	movs	r3, #0
 8009c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c36:	e1ec      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009c38:	2304      	movs	r3, #4
 8009c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c3e:	e1e8      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009c40:	2308      	movs	r3, #8
 8009c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c46:	e1e4      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009c48:	2310      	movs	r3, #16
 8009c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c4e:	e1e0      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009c50:	2320      	movs	r3, #32
 8009c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c56:	e1dc      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009c58:	2340      	movs	r3, #64	; 0x40
 8009c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c5e:	e1d8      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009c60:	2380      	movs	r3, #128	; 0x80
 8009c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c66:	e1d4      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4a51      	ldr	r2, [pc, #324]	; (8009db4 <UART_SetConfig+0x344>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d130      	bne.n	8009cd4 <UART_SetConfig+0x264>
 8009c72:	4b4e      	ldr	r3, [pc, #312]	; (8009dac <UART_SetConfig+0x33c>)
 8009c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c76:	f003 0307 	and.w	r3, r3, #7
 8009c7a:	2b05      	cmp	r3, #5
 8009c7c:	d826      	bhi.n	8009ccc <UART_SetConfig+0x25c>
 8009c7e:	a201      	add	r2, pc, #4	; (adr r2, 8009c84 <UART_SetConfig+0x214>)
 8009c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c84:	08009c9d 	.word	0x08009c9d
 8009c88:	08009ca5 	.word	0x08009ca5
 8009c8c:	08009cad 	.word	0x08009cad
 8009c90:	08009cb5 	.word	0x08009cb5
 8009c94:	08009cbd 	.word	0x08009cbd
 8009c98:	08009cc5 	.word	0x08009cc5
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ca2:	e1b6      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009ca4:	2304      	movs	r3, #4
 8009ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009caa:	e1b2      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009cac:	2308      	movs	r3, #8
 8009cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cb2:	e1ae      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009cb4:	2310      	movs	r3, #16
 8009cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cba:	e1aa      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009cbc:	2320      	movs	r3, #32
 8009cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cc2:	e1a6      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009cc4:	2340      	movs	r3, #64	; 0x40
 8009cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cca:	e1a2      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009ccc:	2380      	movs	r3, #128	; 0x80
 8009cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cd2:	e19e      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a37      	ldr	r2, [pc, #220]	; (8009db8 <UART_SetConfig+0x348>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d130      	bne.n	8009d40 <UART_SetConfig+0x2d0>
 8009cde:	4b33      	ldr	r3, [pc, #204]	; (8009dac <UART_SetConfig+0x33c>)
 8009ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ce2:	f003 0307 	and.w	r3, r3, #7
 8009ce6:	2b05      	cmp	r3, #5
 8009ce8:	d826      	bhi.n	8009d38 <UART_SetConfig+0x2c8>
 8009cea:	a201      	add	r2, pc, #4	; (adr r2, 8009cf0 <UART_SetConfig+0x280>)
 8009cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cf0:	08009d09 	.word	0x08009d09
 8009cf4:	08009d11 	.word	0x08009d11
 8009cf8:	08009d19 	.word	0x08009d19
 8009cfc:	08009d21 	.word	0x08009d21
 8009d00:	08009d29 	.word	0x08009d29
 8009d04:	08009d31 	.word	0x08009d31
 8009d08:	2300      	movs	r3, #0
 8009d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d0e:	e180      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009d10:	2304      	movs	r3, #4
 8009d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d16:	e17c      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009d18:	2308      	movs	r3, #8
 8009d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d1e:	e178      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009d20:	2310      	movs	r3, #16
 8009d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d26:	e174      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009d28:	2320      	movs	r3, #32
 8009d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d2e:	e170      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009d30:	2340      	movs	r3, #64	; 0x40
 8009d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d36:	e16c      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009d38:	2380      	movs	r3, #128	; 0x80
 8009d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d3e:	e168      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a1d      	ldr	r2, [pc, #116]	; (8009dbc <UART_SetConfig+0x34c>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d142      	bne.n	8009dd0 <UART_SetConfig+0x360>
 8009d4a:	4b18      	ldr	r3, [pc, #96]	; (8009dac <UART_SetConfig+0x33c>)
 8009d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d4e:	f003 0307 	and.w	r3, r3, #7
 8009d52:	2b05      	cmp	r3, #5
 8009d54:	d838      	bhi.n	8009dc8 <UART_SetConfig+0x358>
 8009d56:	a201      	add	r2, pc, #4	; (adr r2, 8009d5c <UART_SetConfig+0x2ec>)
 8009d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d5c:	08009d75 	.word	0x08009d75
 8009d60:	08009d7d 	.word	0x08009d7d
 8009d64:	08009d85 	.word	0x08009d85
 8009d68:	08009d8d 	.word	0x08009d8d
 8009d6c:	08009d95 	.word	0x08009d95
 8009d70:	08009dc1 	.word	0x08009dc1
 8009d74:	2300      	movs	r3, #0
 8009d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d7a:	e14a      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009d7c:	2304      	movs	r3, #4
 8009d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d82:	e146      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009d84:	2308      	movs	r3, #8
 8009d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d8a:	e142      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009d8c:	2310      	movs	r3, #16
 8009d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d92:	e13e      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009d94:	2320      	movs	r3, #32
 8009d96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d9a:	e13a      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009d9c:	cfff69f3 	.word	0xcfff69f3
 8009da0:	58000c00 	.word	0x58000c00
 8009da4:	11fff4ff 	.word	0x11fff4ff
 8009da8:	40011000 	.word	0x40011000
 8009dac:	58024400 	.word	0x58024400
 8009db0:	40004400 	.word	0x40004400
 8009db4:	40004800 	.word	0x40004800
 8009db8:	40004c00 	.word	0x40004c00
 8009dbc:	40005000 	.word	0x40005000
 8009dc0:	2340      	movs	r3, #64	; 0x40
 8009dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dc6:	e124      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009dc8:	2380      	movs	r3, #128	; 0x80
 8009dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dce:	e120      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4acc      	ldr	r2, [pc, #816]	; (800a108 <UART_SetConfig+0x698>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d176      	bne.n	8009ec8 <UART_SetConfig+0x458>
 8009dda:	4bcc      	ldr	r3, [pc, #816]	; (800a10c <UART_SetConfig+0x69c>)
 8009ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009de2:	2b28      	cmp	r3, #40	; 0x28
 8009de4:	d86c      	bhi.n	8009ec0 <UART_SetConfig+0x450>
 8009de6:	a201      	add	r2, pc, #4	; (adr r2, 8009dec <UART_SetConfig+0x37c>)
 8009de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dec:	08009e91 	.word	0x08009e91
 8009df0:	08009ec1 	.word	0x08009ec1
 8009df4:	08009ec1 	.word	0x08009ec1
 8009df8:	08009ec1 	.word	0x08009ec1
 8009dfc:	08009ec1 	.word	0x08009ec1
 8009e00:	08009ec1 	.word	0x08009ec1
 8009e04:	08009ec1 	.word	0x08009ec1
 8009e08:	08009ec1 	.word	0x08009ec1
 8009e0c:	08009e99 	.word	0x08009e99
 8009e10:	08009ec1 	.word	0x08009ec1
 8009e14:	08009ec1 	.word	0x08009ec1
 8009e18:	08009ec1 	.word	0x08009ec1
 8009e1c:	08009ec1 	.word	0x08009ec1
 8009e20:	08009ec1 	.word	0x08009ec1
 8009e24:	08009ec1 	.word	0x08009ec1
 8009e28:	08009ec1 	.word	0x08009ec1
 8009e2c:	08009ea1 	.word	0x08009ea1
 8009e30:	08009ec1 	.word	0x08009ec1
 8009e34:	08009ec1 	.word	0x08009ec1
 8009e38:	08009ec1 	.word	0x08009ec1
 8009e3c:	08009ec1 	.word	0x08009ec1
 8009e40:	08009ec1 	.word	0x08009ec1
 8009e44:	08009ec1 	.word	0x08009ec1
 8009e48:	08009ec1 	.word	0x08009ec1
 8009e4c:	08009ea9 	.word	0x08009ea9
 8009e50:	08009ec1 	.word	0x08009ec1
 8009e54:	08009ec1 	.word	0x08009ec1
 8009e58:	08009ec1 	.word	0x08009ec1
 8009e5c:	08009ec1 	.word	0x08009ec1
 8009e60:	08009ec1 	.word	0x08009ec1
 8009e64:	08009ec1 	.word	0x08009ec1
 8009e68:	08009ec1 	.word	0x08009ec1
 8009e6c:	08009eb1 	.word	0x08009eb1
 8009e70:	08009ec1 	.word	0x08009ec1
 8009e74:	08009ec1 	.word	0x08009ec1
 8009e78:	08009ec1 	.word	0x08009ec1
 8009e7c:	08009ec1 	.word	0x08009ec1
 8009e80:	08009ec1 	.word	0x08009ec1
 8009e84:	08009ec1 	.word	0x08009ec1
 8009e88:	08009ec1 	.word	0x08009ec1
 8009e8c:	08009eb9 	.word	0x08009eb9
 8009e90:	2301      	movs	r3, #1
 8009e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e96:	e0bc      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009e98:	2304      	movs	r3, #4
 8009e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e9e:	e0b8      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009ea0:	2308      	movs	r3, #8
 8009ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ea6:	e0b4      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009ea8:	2310      	movs	r3, #16
 8009eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eae:	e0b0      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009eb0:	2320      	movs	r3, #32
 8009eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eb6:	e0ac      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009eb8:	2340      	movs	r3, #64	; 0x40
 8009eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ebe:	e0a8      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009ec0:	2380      	movs	r3, #128	; 0x80
 8009ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ec6:	e0a4      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a90      	ldr	r2, [pc, #576]	; (800a110 <UART_SetConfig+0x6a0>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d130      	bne.n	8009f34 <UART_SetConfig+0x4c4>
 8009ed2:	4b8e      	ldr	r3, [pc, #568]	; (800a10c <UART_SetConfig+0x69c>)
 8009ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ed6:	f003 0307 	and.w	r3, r3, #7
 8009eda:	2b05      	cmp	r3, #5
 8009edc:	d826      	bhi.n	8009f2c <UART_SetConfig+0x4bc>
 8009ede:	a201      	add	r2, pc, #4	; (adr r2, 8009ee4 <UART_SetConfig+0x474>)
 8009ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee4:	08009efd 	.word	0x08009efd
 8009ee8:	08009f05 	.word	0x08009f05
 8009eec:	08009f0d 	.word	0x08009f0d
 8009ef0:	08009f15 	.word	0x08009f15
 8009ef4:	08009f1d 	.word	0x08009f1d
 8009ef8:	08009f25 	.word	0x08009f25
 8009efc:	2300      	movs	r3, #0
 8009efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f02:	e086      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009f04:	2304      	movs	r3, #4
 8009f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f0a:	e082      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009f0c:	2308      	movs	r3, #8
 8009f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f12:	e07e      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009f14:	2310      	movs	r3, #16
 8009f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f1a:	e07a      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009f1c:	2320      	movs	r3, #32
 8009f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f22:	e076      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009f24:	2340      	movs	r3, #64	; 0x40
 8009f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f2a:	e072      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009f2c:	2380      	movs	r3, #128	; 0x80
 8009f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f32:	e06e      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a76      	ldr	r2, [pc, #472]	; (800a114 <UART_SetConfig+0x6a4>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d130      	bne.n	8009fa0 <UART_SetConfig+0x530>
 8009f3e:	4b73      	ldr	r3, [pc, #460]	; (800a10c <UART_SetConfig+0x69c>)
 8009f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f42:	f003 0307 	and.w	r3, r3, #7
 8009f46:	2b05      	cmp	r3, #5
 8009f48:	d826      	bhi.n	8009f98 <UART_SetConfig+0x528>
 8009f4a:	a201      	add	r2, pc, #4	; (adr r2, 8009f50 <UART_SetConfig+0x4e0>)
 8009f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f50:	08009f69 	.word	0x08009f69
 8009f54:	08009f71 	.word	0x08009f71
 8009f58:	08009f79 	.word	0x08009f79
 8009f5c:	08009f81 	.word	0x08009f81
 8009f60:	08009f89 	.word	0x08009f89
 8009f64:	08009f91 	.word	0x08009f91
 8009f68:	2300      	movs	r3, #0
 8009f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f6e:	e050      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009f70:	2304      	movs	r3, #4
 8009f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f76:	e04c      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009f78:	2308      	movs	r3, #8
 8009f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f7e:	e048      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009f80:	2310      	movs	r3, #16
 8009f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f86:	e044      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009f88:	2320      	movs	r3, #32
 8009f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f8e:	e040      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009f90:	2340      	movs	r3, #64	; 0x40
 8009f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f96:	e03c      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009f98:	2380      	movs	r3, #128	; 0x80
 8009f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f9e:	e038      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a5c      	ldr	r2, [pc, #368]	; (800a118 <UART_SetConfig+0x6a8>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d130      	bne.n	800a00c <UART_SetConfig+0x59c>
 8009faa:	4b58      	ldr	r3, [pc, #352]	; (800a10c <UART_SetConfig+0x69c>)
 8009fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fae:	f003 0307 	and.w	r3, r3, #7
 8009fb2:	2b05      	cmp	r3, #5
 8009fb4:	d826      	bhi.n	800a004 <UART_SetConfig+0x594>
 8009fb6:	a201      	add	r2, pc, #4	; (adr r2, 8009fbc <UART_SetConfig+0x54c>)
 8009fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fbc:	08009fd5 	.word	0x08009fd5
 8009fc0:	08009fdd 	.word	0x08009fdd
 8009fc4:	08009fe5 	.word	0x08009fe5
 8009fc8:	08009fed 	.word	0x08009fed
 8009fcc:	08009ff5 	.word	0x08009ff5
 8009fd0:	08009ffd 	.word	0x08009ffd
 8009fd4:	2302      	movs	r3, #2
 8009fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fda:	e01a      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009fdc:	2304      	movs	r3, #4
 8009fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fe2:	e016      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009fe4:	2308      	movs	r3, #8
 8009fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fea:	e012      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009fec:	2310      	movs	r3, #16
 8009fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ff2:	e00e      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009ff4:	2320      	movs	r3, #32
 8009ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ffa:	e00a      	b.n	800a012 <UART_SetConfig+0x5a2>
 8009ffc:	2340      	movs	r3, #64	; 0x40
 8009ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a002:	e006      	b.n	800a012 <UART_SetConfig+0x5a2>
 800a004:	2380      	movs	r3, #128	; 0x80
 800a006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a00a:	e002      	b.n	800a012 <UART_SetConfig+0x5a2>
 800a00c:	2380      	movs	r3, #128	; 0x80
 800a00e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a40      	ldr	r2, [pc, #256]	; (800a118 <UART_SetConfig+0x6a8>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	f040 80ef 	bne.w	800a1fc <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a01e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a022:	2b20      	cmp	r3, #32
 800a024:	dc46      	bgt.n	800a0b4 <UART_SetConfig+0x644>
 800a026:	2b02      	cmp	r3, #2
 800a028:	f2c0 8081 	blt.w	800a12e <UART_SetConfig+0x6be>
 800a02c:	3b02      	subs	r3, #2
 800a02e:	2b1e      	cmp	r3, #30
 800a030:	d87d      	bhi.n	800a12e <UART_SetConfig+0x6be>
 800a032:	a201      	add	r2, pc, #4	; (adr r2, 800a038 <UART_SetConfig+0x5c8>)
 800a034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a038:	0800a0bb 	.word	0x0800a0bb
 800a03c:	0800a12f 	.word	0x0800a12f
 800a040:	0800a0c3 	.word	0x0800a0c3
 800a044:	0800a12f 	.word	0x0800a12f
 800a048:	0800a12f 	.word	0x0800a12f
 800a04c:	0800a12f 	.word	0x0800a12f
 800a050:	0800a0d3 	.word	0x0800a0d3
 800a054:	0800a12f 	.word	0x0800a12f
 800a058:	0800a12f 	.word	0x0800a12f
 800a05c:	0800a12f 	.word	0x0800a12f
 800a060:	0800a12f 	.word	0x0800a12f
 800a064:	0800a12f 	.word	0x0800a12f
 800a068:	0800a12f 	.word	0x0800a12f
 800a06c:	0800a12f 	.word	0x0800a12f
 800a070:	0800a0e3 	.word	0x0800a0e3
 800a074:	0800a12f 	.word	0x0800a12f
 800a078:	0800a12f 	.word	0x0800a12f
 800a07c:	0800a12f 	.word	0x0800a12f
 800a080:	0800a12f 	.word	0x0800a12f
 800a084:	0800a12f 	.word	0x0800a12f
 800a088:	0800a12f 	.word	0x0800a12f
 800a08c:	0800a12f 	.word	0x0800a12f
 800a090:	0800a12f 	.word	0x0800a12f
 800a094:	0800a12f 	.word	0x0800a12f
 800a098:	0800a12f 	.word	0x0800a12f
 800a09c:	0800a12f 	.word	0x0800a12f
 800a0a0:	0800a12f 	.word	0x0800a12f
 800a0a4:	0800a12f 	.word	0x0800a12f
 800a0a8:	0800a12f 	.word	0x0800a12f
 800a0ac:	0800a12f 	.word	0x0800a12f
 800a0b0:	0800a121 	.word	0x0800a121
 800a0b4:	2b40      	cmp	r3, #64	; 0x40
 800a0b6:	d036      	beq.n	800a126 <UART_SetConfig+0x6b6>
 800a0b8:	e039      	b.n	800a12e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a0ba:	f7fd fcb7 	bl	8007a2c <HAL_RCCEx_GetD3PCLK1Freq>
 800a0be:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a0c0:	e03b      	b.n	800a13a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0c2:	f107 0314 	add.w	r3, r7, #20
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7fd fcc6 	bl	8007a58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0d0:	e033      	b.n	800a13a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0d2:	f107 0308 	add.w	r3, r7, #8
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7fd fe12 	bl	8007d00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0e0:	e02b      	b.n	800a13a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0e2:	4b0a      	ldr	r3, [pc, #40]	; (800a10c <UART_SetConfig+0x69c>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f003 0320 	and.w	r3, r3, #32
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d009      	beq.n	800a102 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0ee:	4b07      	ldr	r3, [pc, #28]	; (800a10c <UART_SetConfig+0x69c>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	08db      	lsrs	r3, r3, #3
 800a0f4:	f003 0303 	and.w	r3, r3, #3
 800a0f8:	4a08      	ldr	r2, [pc, #32]	; (800a11c <UART_SetConfig+0x6ac>)
 800a0fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a0fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a100:	e01b      	b.n	800a13a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800a102:	4b06      	ldr	r3, [pc, #24]	; (800a11c <UART_SetConfig+0x6ac>)
 800a104:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a106:	e018      	b.n	800a13a <UART_SetConfig+0x6ca>
 800a108:	40011400 	.word	0x40011400
 800a10c:	58024400 	.word	0x58024400
 800a110:	40007800 	.word	0x40007800
 800a114:	40007c00 	.word	0x40007c00
 800a118:	58000c00 	.word	0x58000c00
 800a11c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a120:	4bc4      	ldr	r3, [pc, #784]	; (800a434 <UART_SetConfig+0x9c4>)
 800a122:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a124:	e009      	b.n	800a13a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a12a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a12c:	e005      	b.n	800a13a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800a12e:	2300      	movs	r3, #0
 800a130:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a138:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	f000 81da 	beq.w	800a4f6 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a146:	4abc      	ldr	r2, [pc, #752]	; (800a438 <UART_SetConfig+0x9c8>)
 800a148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a14c:	461a      	mov	r2, r3
 800a14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a150:	fbb3 f3f2 	udiv	r3, r3, r2
 800a154:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	685a      	ldr	r2, [r3, #4]
 800a15a:	4613      	mov	r3, r2
 800a15c:	005b      	lsls	r3, r3, #1
 800a15e:	4413      	add	r3, r2
 800a160:	6a3a      	ldr	r2, [r7, #32]
 800a162:	429a      	cmp	r2, r3
 800a164:	d305      	bcc.n	800a172 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a16c:	6a3a      	ldr	r2, [r7, #32]
 800a16e:	429a      	cmp	r2, r3
 800a170:	d903      	bls.n	800a17a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800a172:	2301      	movs	r3, #1
 800a174:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a178:	e1bd      	b.n	800a4f6 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17c:	4618      	mov	r0, r3
 800a17e:	f04f 0100 	mov.w	r1, #0
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a186:	4aac      	ldr	r2, [pc, #688]	; (800a438 <UART_SetConfig+0x9c8>)
 800a188:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a18c:	b29a      	uxth	r2, r3
 800a18e:	f04f 0300 	mov.w	r3, #0
 800a192:	f7f6 f8fd 	bl	8000390 <__aeabi_uldivmod>
 800a196:	4602      	mov	r2, r0
 800a198:	460b      	mov	r3, r1
 800a19a:	4610      	mov	r0, r2
 800a19c:	4619      	mov	r1, r3
 800a19e:	f04f 0200 	mov.w	r2, #0
 800a1a2:	f04f 0300 	mov.w	r3, #0
 800a1a6:	020b      	lsls	r3, r1, #8
 800a1a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a1ac:	0202      	lsls	r2, r0, #8
 800a1ae:	6879      	ldr	r1, [r7, #4]
 800a1b0:	6849      	ldr	r1, [r1, #4]
 800a1b2:	0849      	lsrs	r1, r1, #1
 800a1b4:	4608      	mov	r0, r1
 800a1b6:	f04f 0100 	mov.w	r1, #0
 800a1ba:	1814      	adds	r4, r2, r0
 800a1bc:	eb43 0501 	adc.w	r5, r3, r1
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	f04f 0300 	mov.w	r3, #0
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	4629      	mov	r1, r5
 800a1ce:	f7f6 f8df 	bl	8000390 <__aeabi_uldivmod>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1e0:	d308      	bcc.n	800a1f4 <UART_SetConfig+0x784>
 800a1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1e8:	d204      	bcs.n	800a1f4 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1f0:	60da      	str	r2, [r3, #12]
 800a1f2:	e180      	b.n	800a4f6 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a1fa:	e17c      	b.n	800a4f6 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	69db      	ldr	r3, [r3, #28]
 800a200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a204:	f040 80be 	bne.w	800a384 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800a208:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a20c:	2b20      	cmp	r3, #32
 800a20e:	dc49      	bgt.n	800a2a4 <UART_SetConfig+0x834>
 800a210:	2b00      	cmp	r3, #0
 800a212:	db7c      	blt.n	800a30e <UART_SetConfig+0x89e>
 800a214:	2b20      	cmp	r3, #32
 800a216:	d87a      	bhi.n	800a30e <UART_SetConfig+0x89e>
 800a218:	a201      	add	r2, pc, #4	; (adr r2, 800a220 <UART_SetConfig+0x7b0>)
 800a21a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a21e:	bf00      	nop
 800a220:	0800a2ab 	.word	0x0800a2ab
 800a224:	0800a2b3 	.word	0x0800a2b3
 800a228:	0800a30f 	.word	0x0800a30f
 800a22c:	0800a30f 	.word	0x0800a30f
 800a230:	0800a2bb 	.word	0x0800a2bb
 800a234:	0800a30f 	.word	0x0800a30f
 800a238:	0800a30f 	.word	0x0800a30f
 800a23c:	0800a30f 	.word	0x0800a30f
 800a240:	0800a2cb 	.word	0x0800a2cb
 800a244:	0800a30f 	.word	0x0800a30f
 800a248:	0800a30f 	.word	0x0800a30f
 800a24c:	0800a30f 	.word	0x0800a30f
 800a250:	0800a30f 	.word	0x0800a30f
 800a254:	0800a30f 	.word	0x0800a30f
 800a258:	0800a30f 	.word	0x0800a30f
 800a25c:	0800a30f 	.word	0x0800a30f
 800a260:	0800a2db 	.word	0x0800a2db
 800a264:	0800a30f 	.word	0x0800a30f
 800a268:	0800a30f 	.word	0x0800a30f
 800a26c:	0800a30f 	.word	0x0800a30f
 800a270:	0800a30f 	.word	0x0800a30f
 800a274:	0800a30f 	.word	0x0800a30f
 800a278:	0800a30f 	.word	0x0800a30f
 800a27c:	0800a30f 	.word	0x0800a30f
 800a280:	0800a30f 	.word	0x0800a30f
 800a284:	0800a30f 	.word	0x0800a30f
 800a288:	0800a30f 	.word	0x0800a30f
 800a28c:	0800a30f 	.word	0x0800a30f
 800a290:	0800a30f 	.word	0x0800a30f
 800a294:	0800a30f 	.word	0x0800a30f
 800a298:	0800a30f 	.word	0x0800a30f
 800a29c:	0800a30f 	.word	0x0800a30f
 800a2a0:	0800a301 	.word	0x0800a301
 800a2a4:	2b40      	cmp	r3, #64	; 0x40
 800a2a6:	d02e      	beq.n	800a306 <UART_SetConfig+0x896>
 800a2a8:	e031      	b.n	800a30e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2aa:	f7fb ff81 	bl	80061b0 <HAL_RCC_GetPCLK1Freq>
 800a2ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a2b0:	e033      	b.n	800a31a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2b2:	f7fb ff93 	bl	80061dc <HAL_RCC_GetPCLK2Freq>
 800a2b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a2b8:	e02f      	b.n	800a31a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2ba:	f107 0314 	add.w	r3, r7, #20
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7fd fbca 	bl	8007a58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2c8:	e027      	b.n	800a31a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2ca:	f107 0308 	add.w	r3, r7, #8
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7fd fd16 	bl	8007d00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2d8:	e01f      	b.n	800a31a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2da:	4b58      	ldr	r3, [pc, #352]	; (800a43c <UART_SetConfig+0x9cc>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f003 0320 	and.w	r3, r3, #32
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d009      	beq.n	800a2fa <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2e6:	4b55      	ldr	r3, [pc, #340]	; (800a43c <UART_SetConfig+0x9cc>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	08db      	lsrs	r3, r3, #3
 800a2ec:	f003 0303 	and.w	r3, r3, #3
 800a2f0:	4a53      	ldr	r2, [pc, #332]	; (800a440 <UART_SetConfig+0x9d0>)
 800a2f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a2f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a2f8:	e00f      	b.n	800a31a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800a2fa:	4b51      	ldr	r3, [pc, #324]	; (800a440 <UART_SetConfig+0x9d0>)
 800a2fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2fe:	e00c      	b.n	800a31a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a300:	4b4c      	ldr	r3, [pc, #304]	; (800a434 <UART_SetConfig+0x9c4>)
 800a302:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a304:	e009      	b.n	800a31a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a30a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a30c:	e005      	b.n	800a31a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800a30e:	2300      	movs	r3, #0
 800a310:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a318:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f000 80ea 	beq.w	800a4f6 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a326:	4a44      	ldr	r2, [pc, #272]	; (800a438 <UART_SetConfig+0x9c8>)
 800a328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a32c:	461a      	mov	r2, r3
 800a32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a330:	fbb3 f3f2 	udiv	r3, r3, r2
 800a334:	005a      	lsls	r2, r3, #1
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	085b      	lsrs	r3, r3, #1
 800a33c:	441a      	add	r2, r3
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	fbb2 f3f3 	udiv	r3, r2, r3
 800a346:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34a:	2b0f      	cmp	r3, #15
 800a34c:	d916      	bls.n	800a37c <UART_SetConfig+0x90c>
 800a34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a354:	d212      	bcs.n	800a37c <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a358:	b29b      	uxth	r3, r3
 800a35a:	f023 030f 	bic.w	r3, r3, #15
 800a35e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a362:	085b      	lsrs	r3, r3, #1
 800a364:	b29b      	uxth	r3, r3
 800a366:	f003 0307 	and.w	r3, r3, #7
 800a36a:	b29a      	uxth	r2, r3
 800a36c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a36e:	4313      	orrs	r3, r2
 800a370:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a378:	60da      	str	r2, [r3, #12]
 800a37a:	e0bc      	b.n	800a4f6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a382:	e0b8      	b.n	800a4f6 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a384:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a388:	2b20      	cmp	r3, #32
 800a38a:	dc4b      	bgt.n	800a424 <UART_SetConfig+0x9b4>
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	f2c0 8087 	blt.w	800a4a0 <UART_SetConfig+0xa30>
 800a392:	2b20      	cmp	r3, #32
 800a394:	f200 8084 	bhi.w	800a4a0 <UART_SetConfig+0xa30>
 800a398:	a201      	add	r2, pc, #4	; (adr r2, 800a3a0 <UART_SetConfig+0x930>)
 800a39a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a39e:	bf00      	nop
 800a3a0:	0800a42b 	.word	0x0800a42b
 800a3a4:	0800a445 	.word	0x0800a445
 800a3a8:	0800a4a1 	.word	0x0800a4a1
 800a3ac:	0800a4a1 	.word	0x0800a4a1
 800a3b0:	0800a44d 	.word	0x0800a44d
 800a3b4:	0800a4a1 	.word	0x0800a4a1
 800a3b8:	0800a4a1 	.word	0x0800a4a1
 800a3bc:	0800a4a1 	.word	0x0800a4a1
 800a3c0:	0800a45d 	.word	0x0800a45d
 800a3c4:	0800a4a1 	.word	0x0800a4a1
 800a3c8:	0800a4a1 	.word	0x0800a4a1
 800a3cc:	0800a4a1 	.word	0x0800a4a1
 800a3d0:	0800a4a1 	.word	0x0800a4a1
 800a3d4:	0800a4a1 	.word	0x0800a4a1
 800a3d8:	0800a4a1 	.word	0x0800a4a1
 800a3dc:	0800a4a1 	.word	0x0800a4a1
 800a3e0:	0800a46d 	.word	0x0800a46d
 800a3e4:	0800a4a1 	.word	0x0800a4a1
 800a3e8:	0800a4a1 	.word	0x0800a4a1
 800a3ec:	0800a4a1 	.word	0x0800a4a1
 800a3f0:	0800a4a1 	.word	0x0800a4a1
 800a3f4:	0800a4a1 	.word	0x0800a4a1
 800a3f8:	0800a4a1 	.word	0x0800a4a1
 800a3fc:	0800a4a1 	.word	0x0800a4a1
 800a400:	0800a4a1 	.word	0x0800a4a1
 800a404:	0800a4a1 	.word	0x0800a4a1
 800a408:	0800a4a1 	.word	0x0800a4a1
 800a40c:	0800a4a1 	.word	0x0800a4a1
 800a410:	0800a4a1 	.word	0x0800a4a1
 800a414:	0800a4a1 	.word	0x0800a4a1
 800a418:	0800a4a1 	.word	0x0800a4a1
 800a41c:	0800a4a1 	.word	0x0800a4a1
 800a420:	0800a493 	.word	0x0800a493
 800a424:	2b40      	cmp	r3, #64	; 0x40
 800a426:	d037      	beq.n	800a498 <UART_SetConfig+0xa28>
 800a428:	e03a      	b.n	800a4a0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a42a:	f7fb fec1 	bl	80061b0 <HAL_RCC_GetPCLK1Freq>
 800a42e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a430:	e03c      	b.n	800a4ac <UART_SetConfig+0xa3c>
 800a432:	bf00      	nop
 800a434:	003d0900 	.word	0x003d0900
 800a438:	0800c164 	.word	0x0800c164
 800a43c:	58024400 	.word	0x58024400
 800a440:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a444:	f7fb feca 	bl	80061dc <HAL_RCC_GetPCLK2Freq>
 800a448:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a44a:	e02f      	b.n	800a4ac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a44c:	f107 0314 	add.w	r3, r7, #20
 800a450:	4618      	mov	r0, r3
 800a452:	f7fd fb01 	bl	8007a58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a45a:	e027      	b.n	800a4ac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a45c:	f107 0308 	add.w	r3, r7, #8
 800a460:	4618      	mov	r0, r3
 800a462:	f7fd fc4d 	bl	8007d00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a46a:	e01f      	b.n	800a4ac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a46c:	4b2c      	ldr	r3, [pc, #176]	; (800a520 <UART_SetConfig+0xab0>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f003 0320 	and.w	r3, r3, #32
 800a474:	2b00      	cmp	r3, #0
 800a476:	d009      	beq.n	800a48c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a478:	4b29      	ldr	r3, [pc, #164]	; (800a520 <UART_SetConfig+0xab0>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	08db      	lsrs	r3, r3, #3
 800a47e:	f003 0303 	and.w	r3, r3, #3
 800a482:	4a28      	ldr	r2, [pc, #160]	; (800a524 <UART_SetConfig+0xab4>)
 800a484:	fa22 f303 	lsr.w	r3, r2, r3
 800a488:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a48a:	e00f      	b.n	800a4ac <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800a48c:	4b25      	ldr	r3, [pc, #148]	; (800a524 <UART_SetConfig+0xab4>)
 800a48e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a490:	e00c      	b.n	800a4ac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a492:	4b25      	ldr	r3, [pc, #148]	; (800a528 <UART_SetConfig+0xab8>)
 800a494:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a496:	e009      	b.n	800a4ac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a498:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a49c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a49e:	e005      	b.n	800a4ac <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a4aa:	bf00      	nop
    }

    if (pclk != 0U)
 800a4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d021      	beq.n	800a4f6 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b6:	4a1d      	ldr	r2, [pc, #116]	; (800a52c <UART_SetConfig+0xabc>)
 800a4b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4bc:	461a      	mov	r2, r3
 800a4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c0:	fbb3 f2f2 	udiv	r2, r3, r2
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	085b      	lsrs	r3, r3, #1
 800a4ca:	441a      	add	r2, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4d4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d8:	2b0f      	cmp	r3, #15
 800a4da:	d909      	bls.n	800a4f0 <UART_SetConfig+0xa80>
 800a4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4e2:	d205      	bcs.n	800a4f0 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e6:	b29a      	uxth	r2, r3
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	60da      	str	r2, [r3, #12]
 800a4ee:	e002      	b.n	800a4f6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2201      	movs	r2, #1
 800a502:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2200      	movs	r2, #0
 800a50a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2200      	movs	r2, #0
 800a510:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a512:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a516:	4618      	mov	r0, r3
 800a518:	3738      	adds	r7, #56	; 0x38
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bdb0      	pop	{r4, r5, r7, pc}
 800a51e:	bf00      	nop
 800a520:	58024400 	.word	0x58024400
 800a524:	03d09000 	.word	0x03d09000
 800a528:	003d0900 	.word	0x003d0900
 800a52c:	0800c164 	.word	0x0800c164

0800a530 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a53c:	f003 0301 	and.w	r3, r3, #1
 800a540:	2b00      	cmp	r3, #0
 800a542:	d00a      	beq.n	800a55a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	430a      	orrs	r2, r1
 800a558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a55e:	f003 0302 	and.w	r3, r3, #2
 800a562:	2b00      	cmp	r3, #0
 800a564:	d00a      	beq.n	800a57c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	430a      	orrs	r2, r1
 800a57a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a580:	f003 0304 	and.w	r3, r3, #4
 800a584:	2b00      	cmp	r3, #0
 800a586:	d00a      	beq.n	800a59e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	430a      	orrs	r2, r1
 800a59c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a2:	f003 0308 	and.w	r3, r3, #8
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00a      	beq.n	800a5c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	430a      	orrs	r2, r1
 800a5be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c4:	f003 0310 	and.w	r3, r3, #16
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d00a      	beq.n	800a5e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	430a      	orrs	r2, r1
 800a5e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e6:	f003 0320 	and.w	r3, r3, #32
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d00a      	beq.n	800a604 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	430a      	orrs	r2, r1
 800a602:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d01a      	beq.n	800a646 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	430a      	orrs	r2, r1
 800a624:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a62a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a62e:	d10a      	bne.n	800a646 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	430a      	orrs	r2, r1
 800a644:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a64a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00a      	beq.n	800a668 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	430a      	orrs	r2, r1
 800a666:	605a      	str	r2, [r3, #4]
  }
}
 800a668:	bf00      	nop
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b086      	sub	sp, #24
 800a678:	af02      	add	r7, sp, #8
 800a67a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2200      	movs	r2, #0
 800a680:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a684:	f7f8 f8fe 	bl	8002884 <HAL_GetTick>
 800a688:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f003 0308 	and.w	r3, r3, #8
 800a694:	2b08      	cmp	r3, #8
 800a696:	d10e      	bne.n	800a6b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a698:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a69c:	9300      	str	r3, [sp, #0]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 f82f 	bl	800a70a <UART_WaitOnFlagUntilTimeout>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d001      	beq.n	800a6b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6b2:	2303      	movs	r3, #3
 800a6b4:	e025      	b.n	800a702 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f003 0304 	and.w	r3, r3, #4
 800a6c0:	2b04      	cmp	r3, #4
 800a6c2:	d10e      	bne.n	800a6e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6c8:	9300      	str	r3, [sp, #0]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 f819 	bl	800a70a <UART_WaitOnFlagUntilTimeout>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d001      	beq.n	800a6e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	e00f      	b.n	800a702 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2220      	movs	r2, #32
 800a6e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2220      	movs	r2, #32
 800a6ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b09c      	sub	sp, #112	; 0x70
 800a70e:	af00      	add	r7, sp, #0
 800a710:	60f8      	str	r0, [r7, #12]
 800a712:	60b9      	str	r1, [r7, #8]
 800a714:	603b      	str	r3, [r7, #0]
 800a716:	4613      	mov	r3, r2
 800a718:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a71a:	e0a9      	b.n	800a870 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a71c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a71e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a722:	f000 80a5 	beq.w	800a870 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a726:	f7f8 f8ad 	bl	8002884 <HAL_GetTick>
 800a72a:	4602      	mov	r2, r0
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	1ad3      	subs	r3, r2, r3
 800a730:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a732:	429a      	cmp	r2, r3
 800a734:	d302      	bcc.n	800a73c <UART_WaitOnFlagUntilTimeout+0x32>
 800a736:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d140      	bne.n	800a7be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a744:	e853 3f00 	ldrex	r3, [r3]
 800a748:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a74a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a74c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a750:	667b      	str	r3, [r7, #100]	; 0x64
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	461a      	mov	r2, r3
 800a758:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a75a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a75c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a760:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a762:	e841 2300 	strex	r3, r2, [r1]
 800a766:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d1e6      	bne.n	800a73c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	3308      	adds	r3, #8
 800a774:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a778:	e853 3f00 	ldrex	r3, [r3]
 800a77c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a780:	f023 0301 	bic.w	r3, r3, #1
 800a784:	663b      	str	r3, [r7, #96]	; 0x60
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	3308      	adds	r3, #8
 800a78c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a78e:	64ba      	str	r2, [r7, #72]	; 0x48
 800a790:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a792:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a794:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a796:	e841 2300 	strex	r3, r2, [r1]
 800a79a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a79c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d1e5      	bne.n	800a76e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2220      	movs	r2, #32
 800a7a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2220      	movs	r2, #32
 800a7ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a7ba:	2303      	movs	r3, #3
 800a7bc:	e069      	b.n	800a892 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f003 0304 	and.w	r3, r3, #4
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d051      	beq.n	800a870 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	69db      	ldr	r3, [r3, #28]
 800a7d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7da:	d149      	bne.n	800a870 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a7e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ee:	e853 3f00 	ldrex	r3, [r3]
 800a7f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a7fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	461a      	mov	r2, r3
 800a802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a804:	637b      	str	r3, [r7, #52]	; 0x34
 800a806:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a808:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a80a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a80c:	e841 2300 	strex	r3, r2, [r1]
 800a810:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a814:	2b00      	cmp	r3, #0
 800a816:	d1e6      	bne.n	800a7e6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	3308      	adds	r3, #8
 800a81e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	e853 3f00 	ldrex	r3, [r3]
 800a826:	613b      	str	r3, [r7, #16]
   return(result);
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	f023 0301 	bic.w	r3, r3, #1
 800a82e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	3308      	adds	r3, #8
 800a836:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a838:	623a      	str	r2, [r7, #32]
 800a83a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a83c:	69f9      	ldr	r1, [r7, #28]
 800a83e:	6a3a      	ldr	r2, [r7, #32]
 800a840:	e841 2300 	strex	r3, r2, [r1]
 800a844:	61bb      	str	r3, [r7, #24]
   return(result);
 800a846:	69bb      	ldr	r3, [r7, #24]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d1e5      	bne.n	800a818 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2220      	movs	r2, #32
 800a850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2220      	movs	r2, #32
 800a858:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2220      	movs	r2, #32
 800a860:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2200      	movs	r2, #0
 800a868:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a86c:	2303      	movs	r3, #3
 800a86e:	e010      	b.n	800a892 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	69da      	ldr	r2, [r3, #28]
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	4013      	ands	r3, r2
 800a87a:	68ba      	ldr	r2, [r7, #8]
 800a87c:	429a      	cmp	r2, r3
 800a87e:	bf0c      	ite	eq
 800a880:	2301      	moveq	r3, #1
 800a882:	2300      	movne	r3, #0
 800a884:	b2db      	uxtb	r3, r3
 800a886:	461a      	mov	r2, r3
 800a888:	79fb      	ldrb	r3, [r7, #7]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	f43f af46 	beq.w	800a71c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a890:	2300      	movs	r3, #0
}
 800a892:	4618      	mov	r0, r3
 800a894:	3770      	adds	r7, #112	; 0x70
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}

0800a89a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a89a:	b480      	push	{r7}
 800a89c:	b085      	sub	sp, #20
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d101      	bne.n	800a8b0 <HAL_UARTEx_DisableFifoMode+0x16>
 800a8ac:	2302      	movs	r3, #2
 800a8ae:	e027      	b.n	800a900 <HAL_UARTEx_DisableFifoMode+0x66>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2224      	movs	r2, #36	; 0x24
 800a8bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f022 0201 	bic.w	r2, r2, #1
 800a8d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a8de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	68fa      	ldr	r2, [r7, #12]
 800a8ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2220      	movs	r2, #32
 800a8f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a8fe:	2300      	movs	r3, #0
}
 800a900:	4618      	mov	r0, r3
 800a902:	3714      	adds	r7, #20
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr

0800a90c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d101      	bne.n	800a924 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a920:	2302      	movs	r3, #2
 800a922:	e02d      	b.n	800a980 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2201      	movs	r2, #1
 800a928:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2224      	movs	r2, #36	; 0x24
 800a930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	681a      	ldr	r2, [r3, #0]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f022 0201 	bic.w	r2, r2, #1
 800a94a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	683a      	ldr	r2, [r7, #0]
 800a95c:	430a      	orrs	r2, r1
 800a95e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 f84f 	bl	800aa04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2220      	movs	r2, #32
 800a972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2200      	movs	r2, #0
 800a97a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a97e:	2300      	movs	r3, #0
}
 800a980:	4618      	mov	r0, r3
 800a982:	3710      	adds	r7, #16
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d101      	bne.n	800a9a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a99c:	2302      	movs	r3, #2
 800a99e:	e02d      	b.n	800a9fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2224      	movs	r2, #36	; 0x24
 800a9ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	681a      	ldr	r2, [r3, #0]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f022 0201 	bic.w	r2, r2, #1
 800a9c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	683a      	ldr	r2, [r7, #0]
 800a9d8:	430a      	orrs	r2, r1
 800a9da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 f811 	bl	800aa04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	68fa      	ldr	r2, [r7, #12]
 800a9e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2220      	movs	r2, #32
 800a9ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a9fa:	2300      	movs	r3, #0
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b085      	sub	sp, #20
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d108      	bne.n	800aa26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2201      	movs	r2, #1
 800aa18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa24:	e031      	b.n	800aa8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa26:	2310      	movs	r3, #16
 800aa28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa2a:	2310      	movs	r3, #16
 800aa2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	689b      	ldr	r3, [r3, #8]
 800aa34:	0e5b      	lsrs	r3, r3, #25
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	f003 0307 	and.w	r3, r3, #7
 800aa3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	0f5b      	lsrs	r3, r3, #29
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	f003 0307 	and.w	r3, r3, #7
 800aa4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa4e:	7bbb      	ldrb	r3, [r7, #14]
 800aa50:	7b3a      	ldrb	r2, [r7, #12]
 800aa52:	4911      	ldr	r1, [pc, #68]	; (800aa98 <UARTEx_SetNbDataToProcess+0x94>)
 800aa54:	5c8a      	ldrb	r2, [r1, r2]
 800aa56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa5a:	7b3a      	ldrb	r2, [r7, #12]
 800aa5c:	490f      	ldr	r1, [pc, #60]	; (800aa9c <UARTEx_SetNbDataToProcess+0x98>)
 800aa5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa60:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa64:	b29a      	uxth	r2, r3
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa6c:	7bfb      	ldrb	r3, [r7, #15]
 800aa6e:	7b7a      	ldrb	r2, [r7, #13]
 800aa70:	4909      	ldr	r1, [pc, #36]	; (800aa98 <UARTEx_SetNbDataToProcess+0x94>)
 800aa72:	5c8a      	ldrb	r2, [r1, r2]
 800aa74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa78:	7b7a      	ldrb	r2, [r7, #13]
 800aa7a:	4908      	ldr	r1, [pc, #32]	; (800aa9c <UARTEx_SetNbDataToProcess+0x98>)
 800aa7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa7e:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa82:	b29a      	uxth	r2, r3
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aa8a:	bf00      	nop
 800aa8c:	3714      	adds	r7, #20
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop
 800aa98:	0800c17c 	.word	0x0800c17c
 800aa9c:	0800c184 	.word	0x0800c184

0800aaa0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aaa0:	b084      	sub	sp, #16
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b084      	sub	sp, #16
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
 800aaaa:	f107 001c 	add.w	r0, r7, #28
 800aaae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d120      	bne.n	800aafa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aabc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	68da      	ldr	r2, [r3, #12]
 800aac8:	4b2a      	ldr	r3, [pc, #168]	; (800ab74 <USB_CoreInit+0xd4>)
 800aaca:	4013      	ands	r3, r2
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800aadc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d105      	bne.n	800aaee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	68db      	ldr	r3, [r3, #12]
 800aae6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 faa8 	bl	800b044 <USB_CoreReset>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	73fb      	strb	r3, [r7, #15]
 800aaf8:	e01a      	b.n	800ab30 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	68db      	ldr	r3, [r3, #12]
 800aafe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 fa9c 	bl	800b044 <USB_CoreReset>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ab10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d106      	bne.n	800ab24 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	639a      	str	r2, [r3, #56]	; 0x38
 800ab22:	e005      	b.n	800ab30 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ab30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d116      	bne.n	800ab64 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab3a:	b29a      	uxth	r2, r3
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ab44:	4b0c      	ldr	r3, [pc, #48]	; (800ab78 <USB_CoreInit+0xd8>)
 800ab46:	4313      	orrs	r3, r2
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	689b      	ldr	r3, [r3, #8]
 800ab50:	f043 0206 	orr.w	r2, r3, #6
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	689b      	ldr	r3, [r3, #8]
 800ab5c:	f043 0220 	orr.w	r2, r3, #32
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ab64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3710      	adds	r7, #16
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab70:	b004      	add	sp, #16
 800ab72:	4770      	bx	lr
 800ab74:	ffbdffbf 	.word	0xffbdffbf
 800ab78:	03ee0000 	.word	0x03ee0000

0800ab7c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	f023 0201 	bic.w	r2, r3, #1
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ab90:	2300      	movs	r3, #0
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	370c      	adds	r7, #12
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr

0800ab9e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b084      	sub	sp, #16
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
 800aba6:	460b      	mov	r3, r1
 800aba8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800abaa:	2300      	movs	r3, #0
 800abac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	68db      	ldr	r3, [r3, #12]
 800abb2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800abba:	78fb      	ldrb	r3, [r7, #3]
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d115      	bne.n	800abec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800abcc:	2001      	movs	r0, #1
 800abce:	f7f7 fe65 	bl	800289c <HAL_Delay>
      ms++;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	3301      	adds	r3, #1
 800abd6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 fa25 	bl	800b028 <USB_GetMode>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d01e      	beq.n	800ac22 <USB_SetCurrentMode+0x84>
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2b31      	cmp	r3, #49	; 0x31
 800abe8:	d9f0      	bls.n	800abcc <USB_SetCurrentMode+0x2e>
 800abea:	e01a      	b.n	800ac22 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800abec:	78fb      	ldrb	r3, [r7, #3]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d115      	bne.n	800ac1e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	68db      	ldr	r3, [r3, #12]
 800abf6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800abfe:	2001      	movs	r0, #1
 800ac00:	f7f7 fe4c 	bl	800289c <HAL_Delay>
      ms++;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	3301      	adds	r3, #1
 800ac08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 fa0c 	bl	800b028 <USB_GetMode>
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d005      	beq.n	800ac22 <USB_SetCurrentMode+0x84>
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2b31      	cmp	r3, #49	; 0x31
 800ac1a:	d9f0      	bls.n	800abfe <USB_SetCurrentMode+0x60>
 800ac1c:	e001      	b.n	800ac22 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e005      	b.n	800ac2e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2b32      	cmp	r3, #50	; 0x32
 800ac26:	d101      	bne.n	800ac2c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	e000      	b.n	800ac2e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ac2c:	2300      	movs	r3, #0
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3710      	adds	r7, #16
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
	...

0800ac38 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ac38:	b084      	sub	sp, #16
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b086      	sub	sp, #24
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
 800ac42:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ac46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ac52:	2300      	movs	r3, #0
 800ac54:	613b      	str	r3, [r7, #16]
 800ac56:	e009      	b.n	800ac6c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	3340      	adds	r3, #64	; 0x40
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	4413      	add	r3, r2
 800ac62:	2200      	movs	r2, #0
 800ac64:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	613b      	str	r3, [r7, #16]
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	2b0e      	cmp	r3, #14
 800ac70:	d9f2      	bls.n	800ac58 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ac72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d11c      	bne.n	800acb2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac86:	f043 0302 	orr.w	r3, r3, #2
 800ac8a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac90:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	601a      	str	r2, [r3, #0]
 800acb0:	e005      	b.n	800acbe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800acc4:	461a      	mov	r2, r3
 800acc6:	2300      	movs	r3, #0
 800acc8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acd0:	4619      	mov	r1, r3
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acd8:	461a      	mov	r2, r3
 800acda:	680b      	ldr	r3, [r1, #0]
 800acdc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800acde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d10c      	bne.n	800acfe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ace4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d104      	bne.n	800acf4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800acea:	2100      	movs	r1, #0
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 f961 	bl	800afb4 <USB_SetDevSpeed>
 800acf2:	e008      	b.n	800ad06 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800acf4:	2101      	movs	r1, #1
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 f95c 	bl	800afb4 <USB_SetDevSpeed>
 800acfc:	e003      	b.n	800ad06 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800acfe:	2103      	movs	r1, #3
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 f957 	bl	800afb4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ad06:	2110      	movs	r1, #16
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 f8f3 	bl	800aef4 <USB_FlushTxFifo>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d001      	beq.n	800ad18 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ad14:	2301      	movs	r3, #1
 800ad16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 f91d 	bl	800af58 <USB_FlushRxFifo>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d001      	beq.n	800ad28 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ad24:	2301      	movs	r3, #1
 800ad26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad2e:	461a      	mov	r2, r3
 800ad30:	2300      	movs	r3, #0
 800ad32:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad46:	461a      	mov	r2, r3
 800ad48:	2300      	movs	r3, #0
 800ad4a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	613b      	str	r3, [r7, #16]
 800ad50:	e043      	b.n	800adda <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	015a      	lsls	r2, r3, #5
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	4413      	add	r3, r2
 800ad5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad68:	d118      	bne.n	800ad9c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d10a      	bne.n	800ad86 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	015a      	lsls	r2, r3, #5
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	4413      	add	r3, r2
 800ad78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ad82:	6013      	str	r3, [r2, #0]
 800ad84:	e013      	b.n	800adae <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	015a      	lsls	r2, r3, #5
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	4413      	add	r3, r2
 800ad8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad92:	461a      	mov	r2, r3
 800ad94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ad98:	6013      	str	r3, [r2, #0]
 800ad9a:	e008      	b.n	800adae <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	015a      	lsls	r2, r3, #5
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	4413      	add	r3, r2
 800ada4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ada8:	461a      	mov	r2, r3
 800adaa:	2300      	movs	r3, #0
 800adac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	015a      	lsls	r2, r3, #5
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	4413      	add	r3, r2
 800adb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adba:	461a      	mov	r2, r3
 800adbc:	2300      	movs	r3, #0
 800adbe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	015a      	lsls	r2, r3, #5
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	4413      	add	r3, r2
 800adc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adcc:	461a      	mov	r2, r3
 800adce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800add2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	3301      	adds	r3, #1
 800add8:	613b      	str	r3, [r7, #16]
 800adda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800addc:	693a      	ldr	r2, [r7, #16]
 800adde:	429a      	cmp	r2, r3
 800ade0:	d3b7      	bcc.n	800ad52 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ade2:	2300      	movs	r3, #0
 800ade4:	613b      	str	r3, [r7, #16]
 800ade6:	e043      	b.n	800ae70 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	015a      	lsls	r2, r3, #5
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	4413      	add	r3, r2
 800adf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800adfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800adfe:	d118      	bne.n	800ae32 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d10a      	bne.n	800ae1c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	015a      	lsls	r2, r3, #5
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae12:	461a      	mov	r2, r3
 800ae14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ae18:	6013      	str	r3, [r2, #0]
 800ae1a:	e013      	b.n	800ae44 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	015a      	lsls	r2, r3, #5
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	4413      	add	r3, r2
 800ae24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae28:	461a      	mov	r2, r3
 800ae2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ae2e:	6013      	str	r3, [r2, #0]
 800ae30:	e008      	b.n	800ae44 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	015a      	lsls	r2, r3, #5
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	4413      	add	r3, r2
 800ae3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae3e:	461a      	mov	r2, r3
 800ae40:	2300      	movs	r3, #0
 800ae42:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	015a      	lsls	r2, r3, #5
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	4413      	add	r3, r2
 800ae4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae50:	461a      	mov	r2, r3
 800ae52:	2300      	movs	r3, #0
 800ae54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	015a      	lsls	r2, r3, #5
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	4413      	add	r3, r2
 800ae5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae62:	461a      	mov	r2, r3
 800ae64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ae68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	613b      	str	r3, [r7, #16]
 800ae70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae72:	693a      	ldr	r2, [r7, #16]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d3b7      	bcc.n	800ade8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae7e:	691b      	ldr	r3, [r3, #16]
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae8a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ae98:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ae9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d105      	bne.n	800aeac <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	f043 0210 	orr.w	r2, r3, #16
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	699a      	ldr	r2, [r3, #24]
 800aeb0:	4b0e      	ldr	r3, [pc, #56]	; (800aeec <USB_DevInit+0x2b4>)
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aeb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d005      	beq.n	800aeca <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	699b      	ldr	r3, [r3, #24]
 800aec2:	f043 0208 	orr.w	r2, r3, #8
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aeca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d105      	bne.n	800aedc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	699a      	ldr	r2, [r3, #24]
 800aed4:	4b06      	ldr	r3, [pc, #24]	; (800aef0 <USB_DevInit+0x2b8>)
 800aed6:	4313      	orrs	r3, r2
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aedc:	7dfb      	ldrb	r3, [r7, #23]
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3718      	adds	r7, #24
 800aee2:	46bd      	mov	sp, r7
 800aee4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aee8:	b004      	add	sp, #16
 800aeea:	4770      	bx	lr
 800aeec:	803c3800 	.word	0x803c3800
 800aef0:	40000004 	.word	0x40000004

0800aef4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b085      	sub	sp, #20
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aefe:	2300      	movs	r3, #0
 800af00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	3301      	adds	r3, #1
 800af06:	60fb      	str	r3, [r7, #12]
 800af08:	4a12      	ldr	r2, [pc, #72]	; (800af54 <USB_FlushTxFifo+0x60>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d901      	bls.n	800af12 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800af0e:	2303      	movs	r3, #3
 800af10:	e01a      	b.n	800af48 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	691b      	ldr	r3, [r3, #16]
 800af16:	2b00      	cmp	r3, #0
 800af18:	daf3      	bge.n	800af02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800af1a:	2300      	movs	r3, #0
 800af1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	019b      	lsls	r3, r3, #6
 800af22:	f043 0220 	orr.w	r2, r3, #32
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	3301      	adds	r3, #1
 800af2e:	60fb      	str	r3, [r7, #12]
 800af30:	4a08      	ldr	r2, [pc, #32]	; (800af54 <USB_FlushTxFifo+0x60>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d901      	bls.n	800af3a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800af36:	2303      	movs	r3, #3
 800af38:	e006      	b.n	800af48 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	691b      	ldr	r3, [r3, #16]
 800af3e:	f003 0320 	and.w	r3, r3, #32
 800af42:	2b20      	cmp	r3, #32
 800af44:	d0f1      	beq.n	800af2a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800af46:	2300      	movs	r3, #0
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3714      	adds	r7, #20
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr
 800af54:	00030d40 	.word	0x00030d40

0800af58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af60:	2300      	movs	r3, #0
 800af62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	3301      	adds	r3, #1
 800af68:	60fb      	str	r3, [r7, #12]
 800af6a:	4a11      	ldr	r2, [pc, #68]	; (800afb0 <USB_FlushRxFifo+0x58>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d901      	bls.n	800af74 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800af70:	2303      	movs	r3, #3
 800af72:	e017      	b.n	800afa4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	691b      	ldr	r3, [r3, #16]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	daf3      	bge.n	800af64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800af7c:	2300      	movs	r3, #0
 800af7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2210      	movs	r2, #16
 800af84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	3301      	adds	r3, #1
 800af8a:	60fb      	str	r3, [r7, #12]
 800af8c:	4a08      	ldr	r2, [pc, #32]	; (800afb0 <USB_FlushRxFifo+0x58>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d901      	bls.n	800af96 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800af92:	2303      	movs	r3, #3
 800af94:	e006      	b.n	800afa4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	691b      	ldr	r3, [r3, #16]
 800af9a:	f003 0310 	and.w	r3, r3, #16
 800af9e:	2b10      	cmp	r3, #16
 800afa0:	d0f1      	beq.n	800af86 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800afa2:	2300      	movs	r3, #0
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3714      	adds	r7, #20
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr
 800afb0:	00030d40 	.word	0x00030d40

0800afb4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b085      	sub	sp, #20
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	460b      	mov	r3, r1
 800afbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afca:	681a      	ldr	r2, [r3, #0]
 800afcc:	78fb      	ldrb	r3, [r7, #3]
 800afce:	68f9      	ldr	r1, [r7, #12]
 800afd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800afd4:	4313      	orrs	r3, r2
 800afd6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800afd8:	2300      	movs	r3, #0
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3714      	adds	r7, #20
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr

0800afe6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800afe6:	b480      	push	{r7}
 800afe8:	b085      	sub	sp, #20
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	68fa      	ldr	r2, [r7, #12]
 800affc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b000:	f023 0303 	bic.w	r3, r3, #3
 800b004:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	68fa      	ldr	r2, [r7, #12]
 800b010:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b014:	f043 0302 	orr.w	r3, r3, #2
 800b018:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b01a:	2300      	movs	r3, #0
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3714      	adds	r7, #20
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b028:	b480      	push	{r7}
 800b02a:	b083      	sub	sp, #12
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	695b      	ldr	r3, [r3, #20]
 800b034:	f003 0301 	and.w	r3, r3, #1
}
 800b038:	4618      	mov	r0, r3
 800b03a:	370c      	adds	r7, #12
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr

0800b044 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b044:	b480      	push	{r7}
 800b046:	b085      	sub	sp, #20
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b04c:	2300      	movs	r3, #0
 800b04e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	3301      	adds	r3, #1
 800b054:	60fb      	str	r3, [r7, #12]
 800b056:	4a13      	ldr	r2, [pc, #76]	; (800b0a4 <USB_CoreReset+0x60>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d901      	bls.n	800b060 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800b05c:	2303      	movs	r3, #3
 800b05e:	e01a      	b.n	800b096 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	691b      	ldr	r3, [r3, #16]
 800b064:	2b00      	cmp	r3, #0
 800b066:	daf3      	bge.n	800b050 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b068:	2300      	movs	r3, #0
 800b06a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	f043 0201 	orr.w	r2, r3, #1
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	3301      	adds	r3, #1
 800b07c:	60fb      	str	r3, [r7, #12]
 800b07e:	4a09      	ldr	r2, [pc, #36]	; (800b0a4 <USB_CoreReset+0x60>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d901      	bls.n	800b088 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800b084:	2303      	movs	r3, #3
 800b086:	e006      	b.n	800b096 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	691b      	ldr	r3, [r3, #16]
 800b08c:	f003 0301 	and.w	r3, r3, #1
 800b090:	2b01      	cmp	r3, #1
 800b092:	d0f1      	beq.n	800b078 <USB_CoreReset+0x34>

  return HAL_OK;
 800b094:	2300      	movs	r3, #0
}
 800b096:	4618      	mov	r0, r3
 800b098:	3714      	adds	r7, #20
 800b09a:	46bd      	mov	sp, r7
 800b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a0:	4770      	bx	lr
 800b0a2:	bf00      	nop
 800b0a4:	00030d40 	.word	0x00030d40

0800b0a8 <__errno>:
 800b0a8:	4b01      	ldr	r3, [pc, #4]	; (800b0b0 <__errno+0x8>)
 800b0aa:	6818      	ldr	r0, [r3, #0]
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop
 800b0b0:	24000018 	.word	0x24000018

0800b0b4 <__libc_init_array>:
 800b0b4:	b570      	push	{r4, r5, r6, lr}
 800b0b6:	4d0d      	ldr	r5, [pc, #52]	; (800b0ec <__libc_init_array+0x38>)
 800b0b8:	4c0d      	ldr	r4, [pc, #52]	; (800b0f0 <__libc_init_array+0x3c>)
 800b0ba:	1b64      	subs	r4, r4, r5
 800b0bc:	10a4      	asrs	r4, r4, #2
 800b0be:	2600      	movs	r6, #0
 800b0c0:	42a6      	cmp	r6, r4
 800b0c2:	d109      	bne.n	800b0d8 <__libc_init_array+0x24>
 800b0c4:	4d0b      	ldr	r5, [pc, #44]	; (800b0f4 <__libc_init_array+0x40>)
 800b0c6:	4c0c      	ldr	r4, [pc, #48]	; (800b0f8 <__libc_init_array+0x44>)
 800b0c8:	f000 fc4e 	bl	800b968 <_init>
 800b0cc:	1b64      	subs	r4, r4, r5
 800b0ce:	10a4      	asrs	r4, r4, #2
 800b0d0:	2600      	movs	r6, #0
 800b0d2:	42a6      	cmp	r6, r4
 800b0d4:	d105      	bne.n	800b0e2 <__libc_init_array+0x2e>
 800b0d6:	bd70      	pop	{r4, r5, r6, pc}
 800b0d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0dc:	4798      	blx	r3
 800b0de:	3601      	adds	r6, #1
 800b0e0:	e7ee      	b.n	800b0c0 <__libc_init_array+0xc>
 800b0e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0e6:	4798      	blx	r3
 800b0e8:	3601      	adds	r6, #1
 800b0ea:	e7f2      	b.n	800b0d2 <__libc_init_array+0x1e>
 800b0ec:	0800c1c8 	.word	0x0800c1c8
 800b0f0:	0800c1c8 	.word	0x0800c1c8
 800b0f4:	0800c1c8 	.word	0x0800c1c8
 800b0f8:	0800c1cc 	.word	0x0800c1cc

0800b0fc <memcpy>:
 800b0fc:	440a      	add	r2, r1
 800b0fe:	4291      	cmp	r1, r2
 800b100:	f100 33ff 	add.w	r3, r0, #4294967295
 800b104:	d100      	bne.n	800b108 <memcpy+0xc>
 800b106:	4770      	bx	lr
 800b108:	b510      	push	{r4, lr}
 800b10a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b10e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b112:	4291      	cmp	r1, r2
 800b114:	d1f9      	bne.n	800b10a <memcpy+0xe>
 800b116:	bd10      	pop	{r4, pc}

0800b118 <memmove>:
 800b118:	4288      	cmp	r0, r1
 800b11a:	b510      	push	{r4, lr}
 800b11c:	eb01 0402 	add.w	r4, r1, r2
 800b120:	d902      	bls.n	800b128 <memmove+0x10>
 800b122:	4284      	cmp	r4, r0
 800b124:	4623      	mov	r3, r4
 800b126:	d807      	bhi.n	800b138 <memmove+0x20>
 800b128:	1e43      	subs	r3, r0, #1
 800b12a:	42a1      	cmp	r1, r4
 800b12c:	d008      	beq.n	800b140 <memmove+0x28>
 800b12e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b132:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b136:	e7f8      	b.n	800b12a <memmove+0x12>
 800b138:	4402      	add	r2, r0
 800b13a:	4601      	mov	r1, r0
 800b13c:	428a      	cmp	r2, r1
 800b13e:	d100      	bne.n	800b142 <memmove+0x2a>
 800b140:	bd10      	pop	{r4, pc}
 800b142:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b146:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b14a:	e7f7      	b.n	800b13c <memmove+0x24>

0800b14c <memset>:
 800b14c:	4402      	add	r2, r0
 800b14e:	4603      	mov	r3, r0
 800b150:	4293      	cmp	r3, r2
 800b152:	d100      	bne.n	800b156 <memset+0xa>
 800b154:	4770      	bx	lr
 800b156:	f803 1b01 	strb.w	r1, [r3], #1
 800b15a:	e7f9      	b.n	800b150 <memset+0x4>

0800b15c <siprintf>:
 800b15c:	b40e      	push	{r1, r2, r3}
 800b15e:	b500      	push	{lr}
 800b160:	b09c      	sub	sp, #112	; 0x70
 800b162:	ab1d      	add	r3, sp, #116	; 0x74
 800b164:	9002      	str	r0, [sp, #8]
 800b166:	9006      	str	r0, [sp, #24]
 800b168:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b16c:	4809      	ldr	r0, [pc, #36]	; (800b194 <siprintf+0x38>)
 800b16e:	9107      	str	r1, [sp, #28]
 800b170:	9104      	str	r1, [sp, #16]
 800b172:	4909      	ldr	r1, [pc, #36]	; (800b198 <siprintf+0x3c>)
 800b174:	f853 2b04 	ldr.w	r2, [r3], #4
 800b178:	9105      	str	r1, [sp, #20]
 800b17a:	6800      	ldr	r0, [r0, #0]
 800b17c:	9301      	str	r3, [sp, #4]
 800b17e:	a902      	add	r1, sp, #8
 800b180:	f000 f868 	bl	800b254 <_svfiprintf_r>
 800b184:	9b02      	ldr	r3, [sp, #8]
 800b186:	2200      	movs	r2, #0
 800b188:	701a      	strb	r2, [r3, #0]
 800b18a:	b01c      	add	sp, #112	; 0x70
 800b18c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b190:	b003      	add	sp, #12
 800b192:	4770      	bx	lr
 800b194:	24000018 	.word	0x24000018
 800b198:	ffff0208 	.word	0xffff0208

0800b19c <__ssputs_r>:
 800b19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1a0:	688e      	ldr	r6, [r1, #8]
 800b1a2:	429e      	cmp	r6, r3
 800b1a4:	4682      	mov	sl, r0
 800b1a6:	460c      	mov	r4, r1
 800b1a8:	4690      	mov	r8, r2
 800b1aa:	461f      	mov	r7, r3
 800b1ac:	d838      	bhi.n	800b220 <__ssputs_r+0x84>
 800b1ae:	898a      	ldrh	r2, [r1, #12]
 800b1b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b1b4:	d032      	beq.n	800b21c <__ssputs_r+0x80>
 800b1b6:	6825      	ldr	r5, [r4, #0]
 800b1b8:	6909      	ldr	r1, [r1, #16]
 800b1ba:	eba5 0901 	sub.w	r9, r5, r1
 800b1be:	6965      	ldr	r5, [r4, #20]
 800b1c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	444b      	add	r3, r9
 800b1cc:	106d      	asrs	r5, r5, #1
 800b1ce:	429d      	cmp	r5, r3
 800b1d0:	bf38      	it	cc
 800b1d2:	461d      	movcc	r5, r3
 800b1d4:	0553      	lsls	r3, r2, #21
 800b1d6:	d531      	bpl.n	800b23c <__ssputs_r+0xa0>
 800b1d8:	4629      	mov	r1, r5
 800b1da:	f000 fb1f 	bl	800b81c <_malloc_r>
 800b1de:	4606      	mov	r6, r0
 800b1e0:	b950      	cbnz	r0, 800b1f8 <__ssputs_r+0x5c>
 800b1e2:	230c      	movs	r3, #12
 800b1e4:	f8ca 3000 	str.w	r3, [sl]
 800b1e8:	89a3      	ldrh	r3, [r4, #12]
 800b1ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1ee:	81a3      	strh	r3, [r4, #12]
 800b1f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1f8:	6921      	ldr	r1, [r4, #16]
 800b1fa:	464a      	mov	r2, r9
 800b1fc:	f7ff ff7e 	bl	800b0fc <memcpy>
 800b200:	89a3      	ldrh	r3, [r4, #12]
 800b202:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b20a:	81a3      	strh	r3, [r4, #12]
 800b20c:	6126      	str	r6, [r4, #16]
 800b20e:	6165      	str	r5, [r4, #20]
 800b210:	444e      	add	r6, r9
 800b212:	eba5 0509 	sub.w	r5, r5, r9
 800b216:	6026      	str	r6, [r4, #0]
 800b218:	60a5      	str	r5, [r4, #8]
 800b21a:	463e      	mov	r6, r7
 800b21c:	42be      	cmp	r6, r7
 800b21e:	d900      	bls.n	800b222 <__ssputs_r+0x86>
 800b220:	463e      	mov	r6, r7
 800b222:	4632      	mov	r2, r6
 800b224:	6820      	ldr	r0, [r4, #0]
 800b226:	4641      	mov	r1, r8
 800b228:	f7ff ff76 	bl	800b118 <memmove>
 800b22c:	68a3      	ldr	r3, [r4, #8]
 800b22e:	6822      	ldr	r2, [r4, #0]
 800b230:	1b9b      	subs	r3, r3, r6
 800b232:	4432      	add	r2, r6
 800b234:	60a3      	str	r3, [r4, #8]
 800b236:	6022      	str	r2, [r4, #0]
 800b238:	2000      	movs	r0, #0
 800b23a:	e7db      	b.n	800b1f4 <__ssputs_r+0x58>
 800b23c:	462a      	mov	r2, r5
 800b23e:	f000 fb47 	bl	800b8d0 <_realloc_r>
 800b242:	4606      	mov	r6, r0
 800b244:	2800      	cmp	r0, #0
 800b246:	d1e1      	bne.n	800b20c <__ssputs_r+0x70>
 800b248:	6921      	ldr	r1, [r4, #16]
 800b24a:	4650      	mov	r0, sl
 800b24c:	f000 fa96 	bl	800b77c <_free_r>
 800b250:	e7c7      	b.n	800b1e2 <__ssputs_r+0x46>
	...

0800b254 <_svfiprintf_r>:
 800b254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b258:	4698      	mov	r8, r3
 800b25a:	898b      	ldrh	r3, [r1, #12]
 800b25c:	061b      	lsls	r3, r3, #24
 800b25e:	b09d      	sub	sp, #116	; 0x74
 800b260:	4607      	mov	r7, r0
 800b262:	460d      	mov	r5, r1
 800b264:	4614      	mov	r4, r2
 800b266:	d50e      	bpl.n	800b286 <_svfiprintf_r+0x32>
 800b268:	690b      	ldr	r3, [r1, #16]
 800b26a:	b963      	cbnz	r3, 800b286 <_svfiprintf_r+0x32>
 800b26c:	2140      	movs	r1, #64	; 0x40
 800b26e:	f000 fad5 	bl	800b81c <_malloc_r>
 800b272:	6028      	str	r0, [r5, #0]
 800b274:	6128      	str	r0, [r5, #16]
 800b276:	b920      	cbnz	r0, 800b282 <_svfiprintf_r+0x2e>
 800b278:	230c      	movs	r3, #12
 800b27a:	603b      	str	r3, [r7, #0]
 800b27c:	f04f 30ff 	mov.w	r0, #4294967295
 800b280:	e0d1      	b.n	800b426 <_svfiprintf_r+0x1d2>
 800b282:	2340      	movs	r3, #64	; 0x40
 800b284:	616b      	str	r3, [r5, #20]
 800b286:	2300      	movs	r3, #0
 800b288:	9309      	str	r3, [sp, #36]	; 0x24
 800b28a:	2320      	movs	r3, #32
 800b28c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b290:	f8cd 800c 	str.w	r8, [sp, #12]
 800b294:	2330      	movs	r3, #48	; 0x30
 800b296:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b440 <_svfiprintf_r+0x1ec>
 800b29a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b29e:	f04f 0901 	mov.w	r9, #1
 800b2a2:	4623      	mov	r3, r4
 800b2a4:	469a      	mov	sl, r3
 800b2a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2aa:	b10a      	cbz	r2, 800b2b0 <_svfiprintf_r+0x5c>
 800b2ac:	2a25      	cmp	r2, #37	; 0x25
 800b2ae:	d1f9      	bne.n	800b2a4 <_svfiprintf_r+0x50>
 800b2b0:	ebba 0b04 	subs.w	fp, sl, r4
 800b2b4:	d00b      	beq.n	800b2ce <_svfiprintf_r+0x7a>
 800b2b6:	465b      	mov	r3, fp
 800b2b8:	4622      	mov	r2, r4
 800b2ba:	4629      	mov	r1, r5
 800b2bc:	4638      	mov	r0, r7
 800b2be:	f7ff ff6d 	bl	800b19c <__ssputs_r>
 800b2c2:	3001      	adds	r0, #1
 800b2c4:	f000 80aa 	beq.w	800b41c <_svfiprintf_r+0x1c8>
 800b2c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2ca:	445a      	add	r2, fp
 800b2cc:	9209      	str	r2, [sp, #36]	; 0x24
 800b2ce:	f89a 3000 	ldrb.w	r3, [sl]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	f000 80a2 	beq.w	800b41c <_svfiprintf_r+0x1c8>
 800b2d8:	2300      	movs	r3, #0
 800b2da:	f04f 32ff 	mov.w	r2, #4294967295
 800b2de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2e2:	f10a 0a01 	add.w	sl, sl, #1
 800b2e6:	9304      	str	r3, [sp, #16]
 800b2e8:	9307      	str	r3, [sp, #28]
 800b2ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2ee:	931a      	str	r3, [sp, #104]	; 0x68
 800b2f0:	4654      	mov	r4, sl
 800b2f2:	2205      	movs	r2, #5
 800b2f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2f8:	4851      	ldr	r0, [pc, #324]	; (800b440 <_svfiprintf_r+0x1ec>)
 800b2fa:	f7f4 fff9 	bl	80002f0 <memchr>
 800b2fe:	9a04      	ldr	r2, [sp, #16]
 800b300:	b9d8      	cbnz	r0, 800b33a <_svfiprintf_r+0xe6>
 800b302:	06d0      	lsls	r0, r2, #27
 800b304:	bf44      	itt	mi
 800b306:	2320      	movmi	r3, #32
 800b308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b30c:	0711      	lsls	r1, r2, #28
 800b30e:	bf44      	itt	mi
 800b310:	232b      	movmi	r3, #43	; 0x2b
 800b312:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b316:	f89a 3000 	ldrb.w	r3, [sl]
 800b31a:	2b2a      	cmp	r3, #42	; 0x2a
 800b31c:	d015      	beq.n	800b34a <_svfiprintf_r+0xf6>
 800b31e:	9a07      	ldr	r2, [sp, #28]
 800b320:	4654      	mov	r4, sl
 800b322:	2000      	movs	r0, #0
 800b324:	f04f 0c0a 	mov.w	ip, #10
 800b328:	4621      	mov	r1, r4
 800b32a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b32e:	3b30      	subs	r3, #48	; 0x30
 800b330:	2b09      	cmp	r3, #9
 800b332:	d94e      	bls.n	800b3d2 <_svfiprintf_r+0x17e>
 800b334:	b1b0      	cbz	r0, 800b364 <_svfiprintf_r+0x110>
 800b336:	9207      	str	r2, [sp, #28]
 800b338:	e014      	b.n	800b364 <_svfiprintf_r+0x110>
 800b33a:	eba0 0308 	sub.w	r3, r0, r8
 800b33e:	fa09 f303 	lsl.w	r3, r9, r3
 800b342:	4313      	orrs	r3, r2
 800b344:	9304      	str	r3, [sp, #16]
 800b346:	46a2      	mov	sl, r4
 800b348:	e7d2      	b.n	800b2f0 <_svfiprintf_r+0x9c>
 800b34a:	9b03      	ldr	r3, [sp, #12]
 800b34c:	1d19      	adds	r1, r3, #4
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	9103      	str	r1, [sp, #12]
 800b352:	2b00      	cmp	r3, #0
 800b354:	bfbb      	ittet	lt
 800b356:	425b      	neglt	r3, r3
 800b358:	f042 0202 	orrlt.w	r2, r2, #2
 800b35c:	9307      	strge	r3, [sp, #28]
 800b35e:	9307      	strlt	r3, [sp, #28]
 800b360:	bfb8      	it	lt
 800b362:	9204      	strlt	r2, [sp, #16]
 800b364:	7823      	ldrb	r3, [r4, #0]
 800b366:	2b2e      	cmp	r3, #46	; 0x2e
 800b368:	d10c      	bne.n	800b384 <_svfiprintf_r+0x130>
 800b36a:	7863      	ldrb	r3, [r4, #1]
 800b36c:	2b2a      	cmp	r3, #42	; 0x2a
 800b36e:	d135      	bne.n	800b3dc <_svfiprintf_r+0x188>
 800b370:	9b03      	ldr	r3, [sp, #12]
 800b372:	1d1a      	adds	r2, r3, #4
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	9203      	str	r2, [sp, #12]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	bfb8      	it	lt
 800b37c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b380:	3402      	adds	r4, #2
 800b382:	9305      	str	r3, [sp, #20]
 800b384:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b450 <_svfiprintf_r+0x1fc>
 800b388:	7821      	ldrb	r1, [r4, #0]
 800b38a:	2203      	movs	r2, #3
 800b38c:	4650      	mov	r0, sl
 800b38e:	f7f4 ffaf 	bl	80002f0 <memchr>
 800b392:	b140      	cbz	r0, 800b3a6 <_svfiprintf_r+0x152>
 800b394:	2340      	movs	r3, #64	; 0x40
 800b396:	eba0 000a 	sub.w	r0, r0, sl
 800b39a:	fa03 f000 	lsl.w	r0, r3, r0
 800b39e:	9b04      	ldr	r3, [sp, #16]
 800b3a0:	4303      	orrs	r3, r0
 800b3a2:	3401      	adds	r4, #1
 800b3a4:	9304      	str	r3, [sp, #16]
 800b3a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3aa:	4826      	ldr	r0, [pc, #152]	; (800b444 <_svfiprintf_r+0x1f0>)
 800b3ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3b0:	2206      	movs	r2, #6
 800b3b2:	f7f4 ff9d 	bl	80002f0 <memchr>
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	d038      	beq.n	800b42c <_svfiprintf_r+0x1d8>
 800b3ba:	4b23      	ldr	r3, [pc, #140]	; (800b448 <_svfiprintf_r+0x1f4>)
 800b3bc:	bb1b      	cbnz	r3, 800b406 <_svfiprintf_r+0x1b2>
 800b3be:	9b03      	ldr	r3, [sp, #12]
 800b3c0:	3307      	adds	r3, #7
 800b3c2:	f023 0307 	bic.w	r3, r3, #7
 800b3c6:	3308      	adds	r3, #8
 800b3c8:	9303      	str	r3, [sp, #12]
 800b3ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3cc:	4433      	add	r3, r6
 800b3ce:	9309      	str	r3, [sp, #36]	; 0x24
 800b3d0:	e767      	b.n	800b2a2 <_svfiprintf_r+0x4e>
 800b3d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3d6:	460c      	mov	r4, r1
 800b3d8:	2001      	movs	r0, #1
 800b3da:	e7a5      	b.n	800b328 <_svfiprintf_r+0xd4>
 800b3dc:	2300      	movs	r3, #0
 800b3de:	3401      	adds	r4, #1
 800b3e0:	9305      	str	r3, [sp, #20]
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	f04f 0c0a 	mov.w	ip, #10
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3ee:	3a30      	subs	r2, #48	; 0x30
 800b3f0:	2a09      	cmp	r2, #9
 800b3f2:	d903      	bls.n	800b3fc <_svfiprintf_r+0x1a8>
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d0c5      	beq.n	800b384 <_svfiprintf_r+0x130>
 800b3f8:	9105      	str	r1, [sp, #20]
 800b3fa:	e7c3      	b.n	800b384 <_svfiprintf_r+0x130>
 800b3fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b400:	4604      	mov	r4, r0
 800b402:	2301      	movs	r3, #1
 800b404:	e7f0      	b.n	800b3e8 <_svfiprintf_r+0x194>
 800b406:	ab03      	add	r3, sp, #12
 800b408:	9300      	str	r3, [sp, #0]
 800b40a:	462a      	mov	r2, r5
 800b40c:	4b0f      	ldr	r3, [pc, #60]	; (800b44c <_svfiprintf_r+0x1f8>)
 800b40e:	a904      	add	r1, sp, #16
 800b410:	4638      	mov	r0, r7
 800b412:	f3af 8000 	nop.w
 800b416:	1c42      	adds	r2, r0, #1
 800b418:	4606      	mov	r6, r0
 800b41a:	d1d6      	bne.n	800b3ca <_svfiprintf_r+0x176>
 800b41c:	89ab      	ldrh	r3, [r5, #12]
 800b41e:	065b      	lsls	r3, r3, #25
 800b420:	f53f af2c 	bmi.w	800b27c <_svfiprintf_r+0x28>
 800b424:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b426:	b01d      	add	sp, #116	; 0x74
 800b428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b42c:	ab03      	add	r3, sp, #12
 800b42e:	9300      	str	r3, [sp, #0]
 800b430:	462a      	mov	r2, r5
 800b432:	4b06      	ldr	r3, [pc, #24]	; (800b44c <_svfiprintf_r+0x1f8>)
 800b434:	a904      	add	r1, sp, #16
 800b436:	4638      	mov	r0, r7
 800b438:	f000 f87a 	bl	800b530 <_printf_i>
 800b43c:	e7eb      	b.n	800b416 <_svfiprintf_r+0x1c2>
 800b43e:	bf00      	nop
 800b440:	0800c18c 	.word	0x0800c18c
 800b444:	0800c196 	.word	0x0800c196
 800b448:	00000000 	.word	0x00000000
 800b44c:	0800b19d 	.word	0x0800b19d
 800b450:	0800c192 	.word	0x0800c192

0800b454 <_printf_common>:
 800b454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b458:	4616      	mov	r6, r2
 800b45a:	4699      	mov	r9, r3
 800b45c:	688a      	ldr	r2, [r1, #8]
 800b45e:	690b      	ldr	r3, [r1, #16]
 800b460:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b464:	4293      	cmp	r3, r2
 800b466:	bfb8      	it	lt
 800b468:	4613      	movlt	r3, r2
 800b46a:	6033      	str	r3, [r6, #0]
 800b46c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b470:	4607      	mov	r7, r0
 800b472:	460c      	mov	r4, r1
 800b474:	b10a      	cbz	r2, 800b47a <_printf_common+0x26>
 800b476:	3301      	adds	r3, #1
 800b478:	6033      	str	r3, [r6, #0]
 800b47a:	6823      	ldr	r3, [r4, #0]
 800b47c:	0699      	lsls	r1, r3, #26
 800b47e:	bf42      	ittt	mi
 800b480:	6833      	ldrmi	r3, [r6, #0]
 800b482:	3302      	addmi	r3, #2
 800b484:	6033      	strmi	r3, [r6, #0]
 800b486:	6825      	ldr	r5, [r4, #0]
 800b488:	f015 0506 	ands.w	r5, r5, #6
 800b48c:	d106      	bne.n	800b49c <_printf_common+0x48>
 800b48e:	f104 0a19 	add.w	sl, r4, #25
 800b492:	68e3      	ldr	r3, [r4, #12]
 800b494:	6832      	ldr	r2, [r6, #0]
 800b496:	1a9b      	subs	r3, r3, r2
 800b498:	42ab      	cmp	r3, r5
 800b49a:	dc26      	bgt.n	800b4ea <_printf_common+0x96>
 800b49c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b4a0:	1e13      	subs	r3, r2, #0
 800b4a2:	6822      	ldr	r2, [r4, #0]
 800b4a4:	bf18      	it	ne
 800b4a6:	2301      	movne	r3, #1
 800b4a8:	0692      	lsls	r2, r2, #26
 800b4aa:	d42b      	bmi.n	800b504 <_printf_common+0xb0>
 800b4ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4b0:	4649      	mov	r1, r9
 800b4b2:	4638      	mov	r0, r7
 800b4b4:	47c0      	blx	r8
 800b4b6:	3001      	adds	r0, #1
 800b4b8:	d01e      	beq.n	800b4f8 <_printf_common+0xa4>
 800b4ba:	6823      	ldr	r3, [r4, #0]
 800b4bc:	68e5      	ldr	r5, [r4, #12]
 800b4be:	6832      	ldr	r2, [r6, #0]
 800b4c0:	f003 0306 	and.w	r3, r3, #6
 800b4c4:	2b04      	cmp	r3, #4
 800b4c6:	bf08      	it	eq
 800b4c8:	1aad      	subeq	r5, r5, r2
 800b4ca:	68a3      	ldr	r3, [r4, #8]
 800b4cc:	6922      	ldr	r2, [r4, #16]
 800b4ce:	bf0c      	ite	eq
 800b4d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4d4:	2500      	movne	r5, #0
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	bfc4      	itt	gt
 800b4da:	1a9b      	subgt	r3, r3, r2
 800b4dc:	18ed      	addgt	r5, r5, r3
 800b4de:	2600      	movs	r6, #0
 800b4e0:	341a      	adds	r4, #26
 800b4e2:	42b5      	cmp	r5, r6
 800b4e4:	d11a      	bne.n	800b51c <_printf_common+0xc8>
 800b4e6:	2000      	movs	r0, #0
 800b4e8:	e008      	b.n	800b4fc <_printf_common+0xa8>
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	4652      	mov	r2, sl
 800b4ee:	4649      	mov	r1, r9
 800b4f0:	4638      	mov	r0, r7
 800b4f2:	47c0      	blx	r8
 800b4f4:	3001      	adds	r0, #1
 800b4f6:	d103      	bne.n	800b500 <_printf_common+0xac>
 800b4f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b500:	3501      	adds	r5, #1
 800b502:	e7c6      	b.n	800b492 <_printf_common+0x3e>
 800b504:	18e1      	adds	r1, r4, r3
 800b506:	1c5a      	adds	r2, r3, #1
 800b508:	2030      	movs	r0, #48	; 0x30
 800b50a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b50e:	4422      	add	r2, r4
 800b510:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b514:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b518:	3302      	adds	r3, #2
 800b51a:	e7c7      	b.n	800b4ac <_printf_common+0x58>
 800b51c:	2301      	movs	r3, #1
 800b51e:	4622      	mov	r2, r4
 800b520:	4649      	mov	r1, r9
 800b522:	4638      	mov	r0, r7
 800b524:	47c0      	blx	r8
 800b526:	3001      	adds	r0, #1
 800b528:	d0e6      	beq.n	800b4f8 <_printf_common+0xa4>
 800b52a:	3601      	adds	r6, #1
 800b52c:	e7d9      	b.n	800b4e2 <_printf_common+0x8e>
	...

0800b530 <_printf_i>:
 800b530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b534:	460c      	mov	r4, r1
 800b536:	4691      	mov	r9, r2
 800b538:	7e27      	ldrb	r7, [r4, #24]
 800b53a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b53c:	2f78      	cmp	r7, #120	; 0x78
 800b53e:	4680      	mov	r8, r0
 800b540:	469a      	mov	sl, r3
 800b542:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b546:	d807      	bhi.n	800b558 <_printf_i+0x28>
 800b548:	2f62      	cmp	r7, #98	; 0x62
 800b54a:	d80a      	bhi.n	800b562 <_printf_i+0x32>
 800b54c:	2f00      	cmp	r7, #0
 800b54e:	f000 80d8 	beq.w	800b702 <_printf_i+0x1d2>
 800b552:	2f58      	cmp	r7, #88	; 0x58
 800b554:	f000 80a3 	beq.w	800b69e <_printf_i+0x16e>
 800b558:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b55c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b560:	e03a      	b.n	800b5d8 <_printf_i+0xa8>
 800b562:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b566:	2b15      	cmp	r3, #21
 800b568:	d8f6      	bhi.n	800b558 <_printf_i+0x28>
 800b56a:	a001      	add	r0, pc, #4	; (adr r0, 800b570 <_printf_i+0x40>)
 800b56c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b570:	0800b5c9 	.word	0x0800b5c9
 800b574:	0800b5dd 	.word	0x0800b5dd
 800b578:	0800b559 	.word	0x0800b559
 800b57c:	0800b559 	.word	0x0800b559
 800b580:	0800b559 	.word	0x0800b559
 800b584:	0800b559 	.word	0x0800b559
 800b588:	0800b5dd 	.word	0x0800b5dd
 800b58c:	0800b559 	.word	0x0800b559
 800b590:	0800b559 	.word	0x0800b559
 800b594:	0800b559 	.word	0x0800b559
 800b598:	0800b559 	.word	0x0800b559
 800b59c:	0800b6e9 	.word	0x0800b6e9
 800b5a0:	0800b60d 	.word	0x0800b60d
 800b5a4:	0800b6cb 	.word	0x0800b6cb
 800b5a8:	0800b559 	.word	0x0800b559
 800b5ac:	0800b559 	.word	0x0800b559
 800b5b0:	0800b70b 	.word	0x0800b70b
 800b5b4:	0800b559 	.word	0x0800b559
 800b5b8:	0800b60d 	.word	0x0800b60d
 800b5bc:	0800b559 	.word	0x0800b559
 800b5c0:	0800b559 	.word	0x0800b559
 800b5c4:	0800b6d3 	.word	0x0800b6d3
 800b5c8:	680b      	ldr	r3, [r1, #0]
 800b5ca:	1d1a      	adds	r2, r3, #4
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	600a      	str	r2, [r1, #0]
 800b5d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b5d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5d8:	2301      	movs	r3, #1
 800b5da:	e0a3      	b.n	800b724 <_printf_i+0x1f4>
 800b5dc:	6825      	ldr	r5, [r4, #0]
 800b5de:	6808      	ldr	r0, [r1, #0]
 800b5e0:	062e      	lsls	r6, r5, #24
 800b5e2:	f100 0304 	add.w	r3, r0, #4
 800b5e6:	d50a      	bpl.n	800b5fe <_printf_i+0xce>
 800b5e8:	6805      	ldr	r5, [r0, #0]
 800b5ea:	600b      	str	r3, [r1, #0]
 800b5ec:	2d00      	cmp	r5, #0
 800b5ee:	da03      	bge.n	800b5f8 <_printf_i+0xc8>
 800b5f0:	232d      	movs	r3, #45	; 0x2d
 800b5f2:	426d      	negs	r5, r5
 800b5f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5f8:	485e      	ldr	r0, [pc, #376]	; (800b774 <_printf_i+0x244>)
 800b5fa:	230a      	movs	r3, #10
 800b5fc:	e019      	b.n	800b632 <_printf_i+0x102>
 800b5fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b602:	6805      	ldr	r5, [r0, #0]
 800b604:	600b      	str	r3, [r1, #0]
 800b606:	bf18      	it	ne
 800b608:	b22d      	sxthne	r5, r5
 800b60a:	e7ef      	b.n	800b5ec <_printf_i+0xbc>
 800b60c:	680b      	ldr	r3, [r1, #0]
 800b60e:	6825      	ldr	r5, [r4, #0]
 800b610:	1d18      	adds	r0, r3, #4
 800b612:	6008      	str	r0, [r1, #0]
 800b614:	0628      	lsls	r0, r5, #24
 800b616:	d501      	bpl.n	800b61c <_printf_i+0xec>
 800b618:	681d      	ldr	r5, [r3, #0]
 800b61a:	e002      	b.n	800b622 <_printf_i+0xf2>
 800b61c:	0669      	lsls	r1, r5, #25
 800b61e:	d5fb      	bpl.n	800b618 <_printf_i+0xe8>
 800b620:	881d      	ldrh	r5, [r3, #0]
 800b622:	4854      	ldr	r0, [pc, #336]	; (800b774 <_printf_i+0x244>)
 800b624:	2f6f      	cmp	r7, #111	; 0x6f
 800b626:	bf0c      	ite	eq
 800b628:	2308      	moveq	r3, #8
 800b62a:	230a      	movne	r3, #10
 800b62c:	2100      	movs	r1, #0
 800b62e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b632:	6866      	ldr	r6, [r4, #4]
 800b634:	60a6      	str	r6, [r4, #8]
 800b636:	2e00      	cmp	r6, #0
 800b638:	bfa2      	ittt	ge
 800b63a:	6821      	ldrge	r1, [r4, #0]
 800b63c:	f021 0104 	bicge.w	r1, r1, #4
 800b640:	6021      	strge	r1, [r4, #0]
 800b642:	b90d      	cbnz	r5, 800b648 <_printf_i+0x118>
 800b644:	2e00      	cmp	r6, #0
 800b646:	d04d      	beq.n	800b6e4 <_printf_i+0x1b4>
 800b648:	4616      	mov	r6, r2
 800b64a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b64e:	fb03 5711 	mls	r7, r3, r1, r5
 800b652:	5dc7      	ldrb	r7, [r0, r7]
 800b654:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b658:	462f      	mov	r7, r5
 800b65a:	42bb      	cmp	r3, r7
 800b65c:	460d      	mov	r5, r1
 800b65e:	d9f4      	bls.n	800b64a <_printf_i+0x11a>
 800b660:	2b08      	cmp	r3, #8
 800b662:	d10b      	bne.n	800b67c <_printf_i+0x14c>
 800b664:	6823      	ldr	r3, [r4, #0]
 800b666:	07df      	lsls	r7, r3, #31
 800b668:	d508      	bpl.n	800b67c <_printf_i+0x14c>
 800b66a:	6923      	ldr	r3, [r4, #16]
 800b66c:	6861      	ldr	r1, [r4, #4]
 800b66e:	4299      	cmp	r1, r3
 800b670:	bfde      	ittt	le
 800b672:	2330      	movle	r3, #48	; 0x30
 800b674:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b678:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b67c:	1b92      	subs	r2, r2, r6
 800b67e:	6122      	str	r2, [r4, #16]
 800b680:	f8cd a000 	str.w	sl, [sp]
 800b684:	464b      	mov	r3, r9
 800b686:	aa03      	add	r2, sp, #12
 800b688:	4621      	mov	r1, r4
 800b68a:	4640      	mov	r0, r8
 800b68c:	f7ff fee2 	bl	800b454 <_printf_common>
 800b690:	3001      	adds	r0, #1
 800b692:	d14c      	bne.n	800b72e <_printf_i+0x1fe>
 800b694:	f04f 30ff 	mov.w	r0, #4294967295
 800b698:	b004      	add	sp, #16
 800b69a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b69e:	4835      	ldr	r0, [pc, #212]	; (800b774 <_printf_i+0x244>)
 800b6a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b6a4:	6823      	ldr	r3, [r4, #0]
 800b6a6:	680e      	ldr	r6, [r1, #0]
 800b6a8:	061f      	lsls	r7, r3, #24
 800b6aa:	f856 5b04 	ldr.w	r5, [r6], #4
 800b6ae:	600e      	str	r6, [r1, #0]
 800b6b0:	d514      	bpl.n	800b6dc <_printf_i+0x1ac>
 800b6b2:	07d9      	lsls	r1, r3, #31
 800b6b4:	bf44      	itt	mi
 800b6b6:	f043 0320 	orrmi.w	r3, r3, #32
 800b6ba:	6023      	strmi	r3, [r4, #0]
 800b6bc:	b91d      	cbnz	r5, 800b6c6 <_printf_i+0x196>
 800b6be:	6823      	ldr	r3, [r4, #0]
 800b6c0:	f023 0320 	bic.w	r3, r3, #32
 800b6c4:	6023      	str	r3, [r4, #0]
 800b6c6:	2310      	movs	r3, #16
 800b6c8:	e7b0      	b.n	800b62c <_printf_i+0xfc>
 800b6ca:	6823      	ldr	r3, [r4, #0]
 800b6cc:	f043 0320 	orr.w	r3, r3, #32
 800b6d0:	6023      	str	r3, [r4, #0]
 800b6d2:	2378      	movs	r3, #120	; 0x78
 800b6d4:	4828      	ldr	r0, [pc, #160]	; (800b778 <_printf_i+0x248>)
 800b6d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b6da:	e7e3      	b.n	800b6a4 <_printf_i+0x174>
 800b6dc:	065e      	lsls	r6, r3, #25
 800b6de:	bf48      	it	mi
 800b6e0:	b2ad      	uxthmi	r5, r5
 800b6e2:	e7e6      	b.n	800b6b2 <_printf_i+0x182>
 800b6e4:	4616      	mov	r6, r2
 800b6e6:	e7bb      	b.n	800b660 <_printf_i+0x130>
 800b6e8:	680b      	ldr	r3, [r1, #0]
 800b6ea:	6826      	ldr	r6, [r4, #0]
 800b6ec:	6960      	ldr	r0, [r4, #20]
 800b6ee:	1d1d      	adds	r5, r3, #4
 800b6f0:	600d      	str	r5, [r1, #0]
 800b6f2:	0635      	lsls	r5, r6, #24
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	d501      	bpl.n	800b6fc <_printf_i+0x1cc>
 800b6f8:	6018      	str	r0, [r3, #0]
 800b6fa:	e002      	b.n	800b702 <_printf_i+0x1d2>
 800b6fc:	0671      	lsls	r1, r6, #25
 800b6fe:	d5fb      	bpl.n	800b6f8 <_printf_i+0x1c8>
 800b700:	8018      	strh	r0, [r3, #0]
 800b702:	2300      	movs	r3, #0
 800b704:	6123      	str	r3, [r4, #16]
 800b706:	4616      	mov	r6, r2
 800b708:	e7ba      	b.n	800b680 <_printf_i+0x150>
 800b70a:	680b      	ldr	r3, [r1, #0]
 800b70c:	1d1a      	adds	r2, r3, #4
 800b70e:	600a      	str	r2, [r1, #0]
 800b710:	681e      	ldr	r6, [r3, #0]
 800b712:	6862      	ldr	r2, [r4, #4]
 800b714:	2100      	movs	r1, #0
 800b716:	4630      	mov	r0, r6
 800b718:	f7f4 fdea 	bl	80002f0 <memchr>
 800b71c:	b108      	cbz	r0, 800b722 <_printf_i+0x1f2>
 800b71e:	1b80      	subs	r0, r0, r6
 800b720:	6060      	str	r0, [r4, #4]
 800b722:	6863      	ldr	r3, [r4, #4]
 800b724:	6123      	str	r3, [r4, #16]
 800b726:	2300      	movs	r3, #0
 800b728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b72c:	e7a8      	b.n	800b680 <_printf_i+0x150>
 800b72e:	6923      	ldr	r3, [r4, #16]
 800b730:	4632      	mov	r2, r6
 800b732:	4649      	mov	r1, r9
 800b734:	4640      	mov	r0, r8
 800b736:	47d0      	blx	sl
 800b738:	3001      	adds	r0, #1
 800b73a:	d0ab      	beq.n	800b694 <_printf_i+0x164>
 800b73c:	6823      	ldr	r3, [r4, #0]
 800b73e:	079b      	lsls	r3, r3, #30
 800b740:	d413      	bmi.n	800b76a <_printf_i+0x23a>
 800b742:	68e0      	ldr	r0, [r4, #12]
 800b744:	9b03      	ldr	r3, [sp, #12]
 800b746:	4298      	cmp	r0, r3
 800b748:	bfb8      	it	lt
 800b74a:	4618      	movlt	r0, r3
 800b74c:	e7a4      	b.n	800b698 <_printf_i+0x168>
 800b74e:	2301      	movs	r3, #1
 800b750:	4632      	mov	r2, r6
 800b752:	4649      	mov	r1, r9
 800b754:	4640      	mov	r0, r8
 800b756:	47d0      	blx	sl
 800b758:	3001      	adds	r0, #1
 800b75a:	d09b      	beq.n	800b694 <_printf_i+0x164>
 800b75c:	3501      	adds	r5, #1
 800b75e:	68e3      	ldr	r3, [r4, #12]
 800b760:	9903      	ldr	r1, [sp, #12]
 800b762:	1a5b      	subs	r3, r3, r1
 800b764:	42ab      	cmp	r3, r5
 800b766:	dcf2      	bgt.n	800b74e <_printf_i+0x21e>
 800b768:	e7eb      	b.n	800b742 <_printf_i+0x212>
 800b76a:	2500      	movs	r5, #0
 800b76c:	f104 0619 	add.w	r6, r4, #25
 800b770:	e7f5      	b.n	800b75e <_printf_i+0x22e>
 800b772:	bf00      	nop
 800b774:	0800c19d 	.word	0x0800c19d
 800b778:	0800c1ae 	.word	0x0800c1ae

0800b77c <_free_r>:
 800b77c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b77e:	2900      	cmp	r1, #0
 800b780:	d048      	beq.n	800b814 <_free_r+0x98>
 800b782:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b786:	9001      	str	r0, [sp, #4]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	f1a1 0404 	sub.w	r4, r1, #4
 800b78e:	bfb8      	it	lt
 800b790:	18e4      	addlt	r4, r4, r3
 800b792:	f000 f8d3 	bl	800b93c <__malloc_lock>
 800b796:	4a20      	ldr	r2, [pc, #128]	; (800b818 <_free_r+0x9c>)
 800b798:	9801      	ldr	r0, [sp, #4]
 800b79a:	6813      	ldr	r3, [r2, #0]
 800b79c:	4615      	mov	r5, r2
 800b79e:	b933      	cbnz	r3, 800b7ae <_free_r+0x32>
 800b7a0:	6063      	str	r3, [r4, #4]
 800b7a2:	6014      	str	r4, [r2, #0]
 800b7a4:	b003      	add	sp, #12
 800b7a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7aa:	f000 b8cd 	b.w	800b948 <__malloc_unlock>
 800b7ae:	42a3      	cmp	r3, r4
 800b7b0:	d90b      	bls.n	800b7ca <_free_r+0x4e>
 800b7b2:	6821      	ldr	r1, [r4, #0]
 800b7b4:	1862      	adds	r2, r4, r1
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	bf04      	itt	eq
 800b7ba:	681a      	ldreq	r2, [r3, #0]
 800b7bc:	685b      	ldreq	r3, [r3, #4]
 800b7be:	6063      	str	r3, [r4, #4]
 800b7c0:	bf04      	itt	eq
 800b7c2:	1852      	addeq	r2, r2, r1
 800b7c4:	6022      	streq	r2, [r4, #0]
 800b7c6:	602c      	str	r4, [r5, #0]
 800b7c8:	e7ec      	b.n	800b7a4 <_free_r+0x28>
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	b10b      	cbz	r3, 800b7d4 <_free_r+0x58>
 800b7d0:	42a3      	cmp	r3, r4
 800b7d2:	d9fa      	bls.n	800b7ca <_free_r+0x4e>
 800b7d4:	6811      	ldr	r1, [r2, #0]
 800b7d6:	1855      	adds	r5, r2, r1
 800b7d8:	42a5      	cmp	r5, r4
 800b7da:	d10b      	bne.n	800b7f4 <_free_r+0x78>
 800b7dc:	6824      	ldr	r4, [r4, #0]
 800b7de:	4421      	add	r1, r4
 800b7e0:	1854      	adds	r4, r2, r1
 800b7e2:	42a3      	cmp	r3, r4
 800b7e4:	6011      	str	r1, [r2, #0]
 800b7e6:	d1dd      	bne.n	800b7a4 <_free_r+0x28>
 800b7e8:	681c      	ldr	r4, [r3, #0]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	6053      	str	r3, [r2, #4]
 800b7ee:	4421      	add	r1, r4
 800b7f0:	6011      	str	r1, [r2, #0]
 800b7f2:	e7d7      	b.n	800b7a4 <_free_r+0x28>
 800b7f4:	d902      	bls.n	800b7fc <_free_r+0x80>
 800b7f6:	230c      	movs	r3, #12
 800b7f8:	6003      	str	r3, [r0, #0]
 800b7fa:	e7d3      	b.n	800b7a4 <_free_r+0x28>
 800b7fc:	6825      	ldr	r5, [r4, #0]
 800b7fe:	1961      	adds	r1, r4, r5
 800b800:	428b      	cmp	r3, r1
 800b802:	bf04      	itt	eq
 800b804:	6819      	ldreq	r1, [r3, #0]
 800b806:	685b      	ldreq	r3, [r3, #4]
 800b808:	6063      	str	r3, [r4, #4]
 800b80a:	bf04      	itt	eq
 800b80c:	1949      	addeq	r1, r1, r5
 800b80e:	6021      	streq	r1, [r4, #0]
 800b810:	6054      	str	r4, [r2, #4]
 800b812:	e7c7      	b.n	800b7a4 <_free_r+0x28>
 800b814:	b003      	add	sp, #12
 800b816:	bd30      	pop	{r4, r5, pc}
 800b818:	240004a4 	.word	0x240004a4

0800b81c <_malloc_r>:
 800b81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b81e:	1ccd      	adds	r5, r1, #3
 800b820:	f025 0503 	bic.w	r5, r5, #3
 800b824:	3508      	adds	r5, #8
 800b826:	2d0c      	cmp	r5, #12
 800b828:	bf38      	it	cc
 800b82a:	250c      	movcc	r5, #12
 800b82c:	2d00      	cmp	r5, #0
 800b82e:	4606      	mov	r6, r0
 800b830:	db01      	blt.n	800b836 <_malloc_r+0x1a>
 800b832:	42a9      	cmp	r1, r5
 800b834:	d903      	bls.n	800b83e <_malloc_r+0x22>
 800b836:	230c      	movs	r3, #12
 800b838:	6033      	str	r3, [r6, #0]
 800b83a:	2000      	movs	r0, #0
 800b83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b83e:	f000 f87d 	bl	800b93c <__malloc_lock>
 800b842:	4921      	ldr	r1, [pc, #132]	; (800b8c8 <_malloc_r+0xac>)
 800b844:	680a      	ldr	r2, [r1, #0]
 800b846:	4614      	mov	r4, r2
 800b848:	b99c      	cbnz	r4, 800b872 <_malloc_r+0x56>
 800b84a:	4f20      	ldr	r7, [pc, #128]	; (800b8cc <_malloc_r+0xb0>)
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	b923      	cbnz	r3, 800b85a <_malloc_r+0x3e>
 800b850:	4621      	mov	r1, r4
 800b852:	4630      	mov	r0, r6
 800b854:	f000 f862 	bl	800b91c <_sbrk_r>
 800b858:	6038      	str	r0, [r7, #0]
 800b85a:	4629      	mov	r1, r5
 800b85c:	4630      	mov	r0, r6
 800b85e:	f000 f85d 	bl	800b91c <_sbrk_r>
 800b862:	1c43      	adds	r3, r0, #1
 800b864:	d123      	bne.n	800b8ae <_malloc_r+0x92>
 800b866:	230c      	movs	r3, #12
 800b868:	6033      	str	r3, [r6, #0]
 800b86a:	4630      	mov	r0, r6
 800b86c:	f000 f86c 	bl	800b948 <__malloc_unlock>
 800b870:	e7e3      	b.n	800b83a <_malloc_r+0x1e>
 800b872:	6823      	ldr	r3, [r4, #0]
 800b874:	1b5b      	subs	r3, r3, r5
 800b876:	d417      	bmi.n	800b8a8 <_malloc_r+0x8c>
 800b878:	2b0b      	cmp	r3, #11
 800b87a:	d903      	bls.n	800b884 <_malloc_r+0x68>
 800b87c:	6023      	str	r3, [r4, #0]
 800b87e:	441c      	add	r4, r3
 800b880:	6025      	str	r5, [r4, #0]
 800b882:	e004      	b.n	800b88e <_malloc_r+0x72>
 800b884:	6863      	ldr	r3, [r4, #4]
 800b886:	42a2      	cmp	r2, r4
 800b888:	bf0c      	ite	eq
 800b88a:	600b      	streq	r3, [r1, #0]
 800b88c:	6053      	strne	r3, [r2, #4]
 800b88e:	4630      	mov	r0, r6
 800b890:	f000 f85a 	bl	800b948 <__malloc_unlock>
 800b894:	f104 000b 	add.w	r0, r4, #11
 800b898:	1d23      	adds	r3, r4, #4
 800b89a:	f020 0007 	bic.w	r0, r0, #7
 800b89e:	1ac2      	subs	r2, r0, r3
 800b8a0:	d0cc      	beq.n	800b83c <_malloc_r+0x20>
 800b8a2:	1a1b      	subs	r3, r3, r0
 800b8a4:	50a3      	str	r3, [r4, r2]
 800b8a6:	e7c9      	b.n	800b83c <_malloc_r+0x20>
 800b8a8:	4622      	mov	r2, r4
 800b8aa:	6864      	ldr	r4, [r4, #4]
 800b8ac:	e7cc      	b.n	800b848 <_malloc_r+0x2c>
 800b8ae:	1cc4      	adds	r4, r0, #3
 800b8b0:	f024 0403 	bic.w	r4, r4, #3
 800b8b4:	42a0      	cmp	r0, r4
 800b8b6:	d0e3      	beq.n	800b880 <_malloc_r+0x64>
 800b8b8:	1a21      	subs	r1, r4, r0
 800b8ba:	4630      	mov	r0, r6
 800b8bc:	f000 f82e 	bl	800b91c <_sbrk_r>
 800b8c0:	3001      	adds	r0, #1
 800b8c2:	d1dd      	bne.n	800b880 <_malloc_r+0x64>
 800b8c4:	e7cf      	b.n	800b866 <_malloc_r+0x4a>
 800b8c6:	bf00      	nop
 800b8c8:	240004a4 	.word	0x240004a4
 800b8cc:	240004a8 	.word	0x240004a8

0800b8d0 <_realloc_r>:
 800b8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8d2:	4607      	mov	r7, r0
 800b8d4:	4614      	mov	r4, r2
 800b8d6:	460e      	mov	r6, r1
 800b8d8:	b921      	cbnz	r1, 800b8e4 <_realloc_r+0x14>
 800b8da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b8de:	4611      	mov	r1, r2
 800b8e0:	f7ff bf9c 	b.w	800b81c <_malloc_r>
 800b8e4:	b922      	cbnz	r2, 800b8f0 <_realloc_r+0x20>
 800b8e6:	f7ff ff49 	bl	800b77c <_free_r>
 800b8ea:	4625      	mov	r5, r4
 800b8ec:	4628      	mov	r0, r5
 800b8ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8f0:	f000 f830 	bl	800b954 <_malloc_usable_size_r>
 800b8f4:	42a0      	cmp	r0, r4
 800b8f6:	d20f      	bcs.n	800b918 <_realloc_r+0x48>
 800b8f8:	4621      	mov	r1, r4
 800b8fa:	4638      	mov	r0, r7
 800b8fc:	f7ff ff8e 	bl	800b81c <_malloc_r>
 800b900:	4605      	mov	r5, r0
 800b902:	2800      	cmp	r0, #0
 800b904:	d0f2      	beq.n	800b8ec <_realloc_r+0x1c>
 800b906:	4631      	mov	r1, r6
 800b908:	4622      	mov	r2, r4
 800b90a:	f7ff fbf7 	bl	800b0fc <memcpy>
 800b90e:	4631      	mov	r1, r6
 800b910:	4638      	mov	r0, r7
 800b912:	f7ff ff33 	bl	800b77c <_free_r>
 800b916:	e7e9      	b.n	800b8ec <_realloc_r+0x1c>
 800b918:	4635      	mov	r5, r6
 800b91a:	e7e7      	b.n	800b8ec <_realloc_r+0x1c>

0800b91c <_sbrk_r>:
 800b91c:	b538      	push	{r3, r4, r5, lr}
 800b91e:	4d06      	ldr	r5, [pc, #24]	; (800b938 <_sbrk_r+0x1c>)
 800b920:	2300      	movs	r3, #0
 800b922:	4604      	mov	r4, r0
 800b924:	4608      	mov	r0, r1
 800b926:	602b      	str	r3, [r5, #0]
 800b928:	f7f6 fe3e 	bl	80025a8 <_sbrk>
 800b92c:	1c43      	adds	r3, r0, #1
 800b92e:	d102      	bne.n	800b936 <_sbrk_r+0x1a>
 800b930:	682b      	ldr	r3, [r5, #0]
 800b932:	b103      	cbz	r3, 800b936 <_sbrk_r+0x1a>
 800b934:	6023      	str	r3, [r4, #0]
 800b936:	bd38      	pop	{r3, r4, r5, pc}
 800b938:	24000b5c 	.word	0x24000b5c

0800b93c <__malloc_lock>:
 800b93c:	4801      	ldr	r0, [pc, #4]	; (800b944 <__malloc_lock+0x8>)
 800b93e:	f000 b811 	b.w	800b964 <__retarget_lock_acquire_recursive>
 800b942:	bf00      	nop
 800b944:	24000b64 	.word	0x24000b64

0800b948 <__malloc_unlock>:
 800b948:	4801      	ldr	r0, [pc, #4]	; (800b950 <__malloc_unlock+0x8>)
 800b94a:	f000 b80c 	b.w	800b966 <__retarget_lock_release_recursive>
 800b94e:	bf00      	nop
 800b950:	24000b64 	.word	0x24000b64

0800b954 <_malloc_usable_size_r>:
 800b954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b958:	1f18      	subs	r0, r3, #4
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	bfbc      	itt	lt
 800b95e:	580b      	ldrlt	r3, [r1, r0]
 800b960:	18c0      	addlt	r0, r0, r3
 800b962:	4770      	bx	lr

0800b964 <__retarget_lock_acquire_recursive>:
 800b964:	4770      	bx	lr

0800b966 <__retarget_lock_release_recursive>:
 800b966:	4770      	bx	lr

0800b968 <_init>:
 800b968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b96a:	bf00      	nop
 800b96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b96e:	bc08      	pop	{r3}
 800b970:	469e      	mov	lr, r3
 800b972:	4770      	bx	lr

0800b974 <_fini>:
 800b974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b976:	bf00      	nop
 800b978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b97a:	bc08      	pop	{r3}
 800b97c:	469e      	mov	lr, r3
 800b97e:	4770      	bx	lr
