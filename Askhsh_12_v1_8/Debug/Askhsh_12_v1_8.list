
Askhsh_12_v1_8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c698  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003080  0800c938  0800c938  0001c938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f9b8  0800f9b8  0001f9b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f9c0  0800f9c0  0001f9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f9c4  0800f9c4  0001f9c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  24000000  0800f9c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002b74  24000098  0800fa60  00020098  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24002c0c  0800fa60  00022c0c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 10 .debug_info   00032b14  00000000  00000000  000200c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004b56  00000000  00000000  00052bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ad8  00000000  00000000  00057730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001958  00000000  00000000  00059208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f1a0  00000000  00000000  0005ab60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022764  00000000  00000000  00099d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017be78  00000000  00000000  000bc464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002382dc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000077e4  00000000  00000000  00238330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000098 	.word	0x24000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c920 	.word	0x0800c920

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400009c 	.word	0x2400009c
 80002dc:	0800c920 	.word	0x0800c920

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <delayUS_DWT>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void delayUS_DWT(volatile uint32_t microseconds)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000690:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <delayUS_DWT+0x40>)
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000696:	f006 fb4f 	bl	8006d38 <HAL_RCC_GetHCLKFreq>
 800069a:	4603      	mov	r3, r0
 800069c:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <delayUS_DWT+0x44>)
 800069e:	fba2 2303 	umull	r2, r3, r2, r3
 80006a2:	0c9b      	lsrs	r3, r3, #18
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	fb02 f303 	mul.w	r3, r2, r3
 80006aa:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80006ac:	bf00      	nop
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <delayUS_DWT+0x40>)
 80006b0:	685a      	ldr	r2, [r3, #4]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	1ad2      	subs	r2, r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d3f8      	bcc.n	80006ae <delayUS_DWT+0x26>
}
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	e0001000 	.word	0xe0001000
 80006cc:	431bde83 	.word	0x431bde83

080006d0 <writeSDA>:
#define HEX2BCD(v)	((v) % 10 + (v) / 10 * 16)
#define BCD2HEX(v)	((v) % 16 + (v) / 16 * 10)


// SDA Write(output) Mode
static void writeSDA(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SDA;
 80006d6:	2301      	movs	r3, #1
 80006d8:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80006de:	2302      	movs	r3, #2
 80006e0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4619      	mov	r1, r3
 80006e6:	4803      	ldr	r0, [pc, #12]	; (80006f4 <writeSDA+0x24>)
 80006e8:	f004 fa5a 	bl	8004ba0 <HAL_GPIO_Init>
	
}
 80006ec:	bf00      	nop
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	58021400 	.word	0x58021400

080006f8 <readSDA>:


// SDA Read(input) Mode
static void readSDA(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SDA;
 80006fe:	2301      	movs	r3, #1
 8000700:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_INPUT;
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8000706:	2302      	movs	r3, #2
 8000708:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800070a:	2302      	movs	r3, #2
 800070c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);	
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	4619      	mov	r1, r3
 8000712:	4803      	ldr	r0, [pc, #12]	; (8000720 <readSDA+0x28>)
 8000714:	f004 fa44 	bl	8004ba0 <HAL_GPIO_Init>
}
 8000718:	bf00      	nop
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	58021400 	.word	0x58021400

08000724 <DS1302_SendCmd>:


/* Отправка адреса или команды */
static void DS1302_SendCmd(uint8_t cmd) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i ++) 
 800072e:	2300      	movs	r3, #0
 8000730:	73fb      	strb	r3, [r7, #15]
 8000732:	e01e      	b.n	8000772 <DS1302_SendCmd+0x4e>
	{	
		//		DS1302_SDA = (bit)(addr & 1);
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA, (cmd & 1) ?  GPIO_PIN_SET :  GPIO_PIN_RESET);
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	461a      	mov	r2, r3
 800073e:	2101      	movs	r1, #1
 8000740:	4810      	ldr	r0, [pc, #64]	; (8000784 <DS1302_SendCmd+0x60>)
 8000742:	f004 fbf5 	bl	8004f30 <HAL_GPIO_WritePin>
		//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	2102      	movs	r1, #2
 800074a:	480e      	ldr	r0, [pc, #56]	; (8000784 <DS1302_SendCmd+0x60>)
 800074c:	f004 fbf0 	bl	8004f30 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff ff99 	bl	8000688 <delayUS_DWT>
		//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2102      	movs	r1, #2
 800075a:	480a      	ldr	r0, [pc, #40]	; (8000784 <DS1302_SendCmd+0x60>)
 800075c:	f004 fbe8 	bl	8004f30 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 8000760:	2001      	movs	r0, #1
 8000762:	f7ff ff91 	bl	8000688 <delayUS_DWT>
		cmd >>= 1;
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	085b      	lsrs	r3, r3, #1
 800076a:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i ++) 
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	3301      	adds	r3, #1
 8000770:	73fb      	strb	r3, [r7, #15]
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	2b07      	cmp	r3, #7
 8000776:	d9dd      	bls.n	8000734 <DS1302_SendCmd+0x10>
	}
}
 8000778:	bf00      	nop
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	58021400 	.word	0x58021400

08000788 <DS1302_WriteByte>:


/* Прочитать байт по адресу 'addr' */
static void DS1302_WriteByte(uint8_t addr, uint8_t d)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	460a      	mov	r2, r1
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	4613      	mov	r3, r2
 8000796:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	//	DS1302_RST = 1;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_SET);	
 8000798:	2201      	movs	r2, #1
 800079a:	2104      	movs	r1, #4
 800079c:	481c      	ldr	r0, [pc, #112]	; (8000810 <DS1302_WriteByte+0x88>)
 800079e:	f004 fbc7 	bl	8004f30 <HAL_GPIO_WritePin>
	
	//addr = addr & 0xFE;
	DS1302_SendCmd(addr);	// Отправка адреса
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ffbd 	bl	8000724 <DS1302_SendCmd>
	
	for (i = 0; i < 8; i ++) 
 80007aa:	2300      	movs	r3, #0
 80007ac:	73fb      	strb	r3, [r7, #15]
 80007ae:	e01e      	b.n	80007ee <DS1302_WriteByte+0x66>
	{
		//		DS1302_SDA = (bit)(d & 1);
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA, (d & 1) ?  GPIO_PIN_SET :  GPIO_PIN_RESET);
 80007b0:	79bb      	ldrb	r3, [r7, #6]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	461a      	mov	r2, r3
 80007ba:	2101      	movs	r1, #1
 80007bc:	4814      	ldr	r0, [pc, #80]	; (8000810 <DS1302_WriteByte+0x88>)
 80007be:	f004 fbb7 	bl	8004f30 <HAL_GPIO_WritePin>
		//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	2102      	movs	r1, #2
 80007c6:	4812      	ldr	r0, [pc, #72]	; (8000810 <DS1302_WriteByte+0x88>)
 80007c8:	f004 fbb2 	bl	8004f30 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 80007cc:	2001      	movs	r0, #1
 80007ce:	f7ff ff5b 	bl	8000688 <delayUS_DWT>
		//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2102      	movs	r1, #2
 80007d6:	480e      	ldr	r0, [pc, #56]	; (8000810 <DS1302_WriteByte+0x88>)
 80007d8:	f004 fbaa 	bl	8004f30 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 80007dc:	2001      	movs	r0, #1
 80007de:	f7ff ff53 	bl	8000688 <delayUS_DWT>
		d >>= 1;
 80007e2:	79bb      	ldrb	r3, [r7, #6]
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	71bb      	strb	r3, [r7, #6]
	for (i = 0; i < 8; i ++) 
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	3301      	adds	r3, #1
 80007ec:	73fb      	strb	r3, [r7, #15]
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2b07      	cmp	r3, #7
 80007f2:	d9dd      	bls.n	80007b0 <DS1302_WriteByte+0x28>
	}
	
	//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2104      	movs	r1, #4
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <DS1302_WriteByte+0x88>)
 80007fa:	f004 fb99 	bl	8004f30 <HAL_GPIO_WritePin>
	//	DS1302_SDA = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA,  GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2101      	movs	r1, #1
 8000802:	4803      	ldr	r0, [pc, #12]	; (8000810 <DS1302_WriteByte+0x88>)
 8000804:	f004 fb94 	bl	8004f30 <HAL_GPIO_WritePin>
}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	58021400 	.word	0x58021400

08000814 <DS1302_ReadByte>:
}


/* Reads a byte from addr */
static uint8_t DS1302_ReadByte(uint8_t addr)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t temp = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	73bb      	strb	r3, [r7, #14]

	//	DS1302_RST = 1;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_SET);	
 8000822:	2201      	movs	r2, #1
 8000824:	2104      	movs	r1, #4
 8000826:	4822      	ldr	r0, [pc, #136]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000828:	f004 fb82 	bl	8004f30 <HAL_GPIO_WritePin>
	addr = addr | 0x01; 	// Generate Read Address
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	71fb      	strb	r3, [r7, #7]

	DS1302_SendCmd(addr);	// Sends address
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff74 	bl	8000724 <DS1302_SendCmd>
	
	readSDA();
 800083c:	f7ff ff5c 	bl	80006f8 <readSDA>
	for (i = 0; i < 8; i ++) 
 8000840:	2300      	movs	r3, #0
 8000842:	73fb      	strb	r3, [r7, #15]
 8000844:	e020      	b.n	8000888 <DS1302_ReadByte+0x74>
	{
		temp >>= 1;
 8000846:	7bbb      	ldrb	r3, [r7, #14]
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	73bb      	strb	r3, [r7, #14]
		//		if(DS1302_SDA)
		if(HAL_GPIO_ReadPin(DS1302_GPIO, DS1302_SDA))
 800084c:	2101      	movs	r1, #1
 800084e:	4818      	ldr	r0, [pc, #96]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000850:	f004 fb56 	bl	8004f00 <HAL_GPIO_ReadPin>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d003      	beq.n	8000862 <DS1302_ReadByte+0x4e>
			temp |= 0x80;
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000860:	73bb      	strb	r3, [r7, #14]
		//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	2102      	movs	r1, #2
 8000866:	4812      	ldr	r0, [pc, #72]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000868:	f004 fb62 	bl	8004f30 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff ff0b 	bl	8000688 <delayUS_DWT>
		//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2102      	movs	r1, #2
 8000876:	480e      	ldr	r0, [pc, #56]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000878:	f004 fb5a 	bl	8004f30 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 800087c:	2001      	movs	r0, #1
 800087e:	f7ff ff03 	bl	8000688 <delayUS_DWT>
	for (i = 0; i < 8; i ++) 
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	3301      	adds	r3, #1
 8000886:	73fb      	strb	r3, [r7, #15]
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	2b07      	cmp	r3, #7
 800088c:	d9db      	bls.n	8000846 <DS1302_ReadByte+0x32>
	}
	writeSDA();
 800088e:	f7ff ff1f 	bl	80006d0 <writeSDA>

	//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2104      	movs	r1, #4
 8000896:	4806      	ldr	r0, [pc, #24]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000898:	f004 fb4a 	bl	8004f30 <HAL_GPIO_WritePin>
	//	DS1302_SDA = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA,  GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2101      	movs	r1, #1
 80008a0:	4803      	ldr	r0, [pc, #12]	; (80008b0 <DS1302_ReadByte+0x9c>)
 80008a2:	f004 fb45 	bl	8004f30 <HAL_GPIO_WritePin>
	return temp;
 80008a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	58021400 	.word	0x58021400

080008b4 <DS1302_ReadTime>:
}


/* Reads time byte by byte to 'buf' */
void DS1302_ReadTime(uint8_t *buf)  
{ 
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
   	uint8_t tmp;
	
	tmp = DS1302_ReadByte(DS1302_YEAR); 	
 80008bc:	208c      	movs	r0, #140	; 0x8c
 80008be:	f7ff ffa9 	bl	8000814 <DS1302_ReadByte>
 80008c2:	4603      	mov	r3, r0
 80008c4:	73fb      	strb	r3, [r7, #15]
	buf[1] = BCD2HEX(tmp);		 
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
 80008c8:	f003 030f 	and.w	r3, r3, #15
 80008cc:	b2d9      	uxtb	r1, r3
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	091b      	lsrs	r3, r3, #4
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	461a      	mov	r2, r3
 80008d6:	0092      	lsls	r2, r2, #2
 80008d8:	4413      	add	r3, r2
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	3301      	adds	r3, #1
 80008e2:	440a      	add	r2, r1
 80008e4:	b2d2      	uxtb	r2, r2
 80008e6:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_MONTH); 	
 80008e8:	2088      	movs	r0, #136	; 0x88
 80008ea:	f7ff ff93 	bl	8000814 <DS1302_ReadByte>
 80008ee:	4603      	mov	r3, r0
 80008f0:	73fb      	strb	r3, [r7, #15]
	buf[2] = BCD2HEX(tmp);	 
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
 80008f4:	f003 030f 	and.w	r3, r3, #15
 80008f8:	b2d9      	uxtb	r1, r3
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	091b      	lsrs	r3, r3, #4
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	461a      	mov	r2, r3
 8000902:	0092      	lsls	r2, r2, #2
 8000904:	4413      	add	r3, r2
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	b2da      	uxtb	r2, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	3302      	adds	r3, #2
 800090e:	440a      	add	r2, r1
 8000910:	b2d2      	uxtb	r2, r2
 8000912:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_DATE); 	
 8000914:	2086      	movs	r0, #134	; 0x86
 8000916:	f7ff ff7d 	bl	8000814 <DS1302_ReadByte>
 800091a:	4603      	mov	r3, r0
 800091c:	73fb      	strb	r3, [r7, #15]
	buf[3] = BCD2HEX(tmp);
 800091e:	7bfb      	ldrb	r3, [r7, #15]
 8000920:	f003 030f 	and.w	r3, r3, #15
 8000924:	b2d9      	uxtb	r1, r3
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	091b      	lsrs	r3, r3, #4
 800092a:	b2db      	uxtb	r3, r3
 800092c:	461a      	mov	r2, r3
 800092e:	0092      	lsls	r2, r2, #2
 8000930:	4413      	add	r3, r2
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	b2da      	uxtb	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3303      	adds	r3, #3
 800093a:	440a      	add	r2, r1
 800093c:	b2d2      	uxtb	r2, r2
 800093e:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_HOUR);		
 8000940:	2084      	movs	r0, #132	; 0x84
 8000942:	f7ff ff67 	bl	8000814 <DS1302_ReadByte>
 8000946:	4603      	mov	r3, r0
 8000948:	73fb      	strb	r3, [r7, #15]
	buf[4] = BCD2HEX(tmp);
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	f003 030f 	and.w	r3, r3, #15
 8000950:	b2d9      	uxtb	r1, r3
 8000952:	7bfb      	ldrb	r3, [r7, #15]
 8000954:	091b      	lsrs	r3, r3, #4
 8000956:	b2db      	uxtb	r3, r3
 8000958:	461a      	mov	r2, r3
 800095a:	0092      	lsls	r2, r2, #2
 800095c:	4413      	add	r3, r2
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	b2da      	uxtb	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3304      	adds	r3, #4
 8000966:	440a      	add	r2, r1
 8000968:	b2d2      	uxtb	r2, r2
 800096a:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_MIN);		
 800096c:	2082      	movs	r0, #130	; 0x82
 800096e:	f7ff ff51 	bl	8000814 <DS1302_ReadByte>
 8000972:	4603      	mov	r3, r0
 8000974:	73fb      	strb	r3, [r7, #15]
	buf[5] = BCD2HEX(tmp); 
 8000976:	7bfb      	ldrb	r3, [r7, #15]
 8000978:	f003 030f 	and.w	r3, r3, #15
 800097c:	b2d9      	uxtb	r1, r3
 800097e:	7bfb      	ldrb	r3, [r7, #15]
 8000980:	091b      	lsrs	r3, r3, #4
 8000982:	b2db      	uxtb	r3, r3
 8000984:	461a      	mov	r2, r3
 8000986:	0092      	lsls	r2, r2, #2
 8000988:	4413      	add	r3, r2
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	b2da      	uxtb	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	3305      	adds	r3, #5
 8000992:	440a      	add	r2, r1
 8000994:	b2d2      	uxtb	r2, r2
 8000996:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte((DS1302_SEC)) & 0x7F;
 8000998:	2080      	movs	r0, #128	; 0x80
 800099a:	f7ff ff3b 	bl	8000814 <DS1302_ReadByte>
 800099e:	4603      	mov	r3, r0
 80009a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009a4:	73fb      	strb	r3, [r7, #15]
	buf[6] = BCD2HEX(tmp);
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	f003 030f 	and.w	r3, r3, #15
 80009ac:	b2d9      	uxtb	r1, r3
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	091b      	lsrs	r3, r3, #4
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	461a      	mov	r2, r3
 80009b6:	0092      	lsls	r2, r2, #2
 80009b8:	4413      	add	r3, r2
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3306      	adds	r3, #6
 80009c2:	440a      	add	r2, r1
 80009c4:	b2d2      	uxtb	r2, r2
 80009c6:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_DAY);		
 80009c8:	208a      	movs	r0, #138	; 0x8a
 80009ca:	f7ff ff23 	bl	8000814 <DS1302_ReadByte>
 80009ce:	4603      	mov	r3, r0
 80009d0:	73fb      	strb	r3, [r7, #15]
	buf[7] = BCD2HEX(tmp);
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	f003 030f 	and.w	r3, r3, #15
 80009d8:	b2d9      	uxtb	r1, r3
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	091b      	lsrs	r3, r3, #4
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	461a      	mov	r2, r3
 80009e2:	0092      	lsls	r2, r2, #2
 80009e4:	4413      	add	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3307      	adds	r3, #7
 80009ee:	440a      	add	r2, r1
 80009f0:	b2d2      	uxtb	r2, r2
 80009f2:	701a      	strb	r2, [r3, #0]
}
 80009f4:	bf00      	nop
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <DS1302_Init>:


/* Инициализация */
void DS1302_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
	DWT_Delay_Init(); //Инициализация таймера для отсчета милисекунд
 8000a02:	f000 f929 	bl	8000c58 <DWT_Delay_Init>

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SCLK | DS1302_SDA | DS1302_RST;
 8000a06:	2307      	movs	r3, #7
 8000a08:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	4619      	mov	r1, r3
 8000a16:	480d      	ldr	r0, [pc, #52]	; (8000a4c <DS1302_Init+0x50>)
 8000a18:	f004 f8c2 	bl	8004ba0 <HAL_GPIO_Init>
	
	DS1302_WriteByte(DS1302_CHARGER, 0x00);			// Отключить Trickle Charger
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2090      	movs	r0, #144	; 0x90
 8000a20:	f7ff feb2 	bl	8000788 <DS1302_WriteByte>
		
	//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2104      	movs	r1, #4
 8000a28:	4808      	ldr	r0, [pc, #32]	; (8000a4c <DS1302_Init+0x50>)
 8000a2a:	f004 fa81 	bl	8004f30 <HAL_GPIO_WritePin>
	//	DS1302_SCK = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2102      	movs	r1, #2
 8000a32:	4806      	ldr	r0, [pc, #24]	; (8000a4c <DS1302_Init+0x50>)
 8000a34:	f004 fa7c 	bl	8004f30 <HAL_GPIO_WritePin>

	delayUS_DWT(10); // Меньше 10 мкс делать не стоит.
 8000a38:	200a      	movs	r0, #10
 8000a3a:	f7ff fe25 	bl	8000688 <delayUS_DWT>
	DS1302_ClockStart();
 8000a3e:	f000 f807 	bl	8000a50 <DS1302_ClockStart>
}
 8000a42:	bf00      	nop
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	58021400 	.word	0x58021400

08000a50 <DS1302_ClockStart>:

//Запуск часов.
//Изначально DS1302 в режиме HALT (остановлена, режим энергосбережения).
//Чтоб начался отсчет времени необходимо однократно выполнить эту функцию.
void DS1302_ClockStart(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
	uint8_t buf = 0x00;
 8000a56:	2300      	movs	r3, #0
 8000a58:	71fb      	strb	r3, [r7, #7]

	DS1302_WriteByte(DS1302_CONTROL, 0x00);			// Отключить защиту от записи
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	208e      	movs	r0, #142	; 0x8e
 8000a5e:	f7ff fe93 	bl	8000788 <DS1302_WriteByte>
	delayUS_DWT(1);
 8000a62:	2001      	movs	r0, #1
 8000a64:	f7ff fe10 	bl	8000688 <delayUS_DWT>

	buf = DS1302_ReadByte(DS1302_SEC) & 0x7F;		// Записываем в 8 бит 0. При этом сохраняем установленное значение секунд.
 8000a68:	2080      	movs	r0, #128	; 0x80
 8000a6a:	f7ff fed3 	bl	8000814 <DS1302_ReadByte>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a74:	71fb      	strb	r3, [r7, #7]
	DS1302_WriteByte(DS1302_SEC, buf);
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	2080      	movs	r0, #128	; 0x80
 8000a7c:	f7ff fe84 	bl	8000788 <DS1302_WriteByte>

	DS1302_WriteByte(DS1302_CONTROL, 0x80);			// Включить защиту от записи
 8000a80:	2180      	movs	r1, #128	; 0x80
 8000a82:	208e      	movs	r0, #142	; 0x8e
 8000a84:	f7ff fe80 	bl	8000788 <DS1302_WriteByte>
	delayUS_DWT(1);
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f7ff fdfd 	bl	8000688 <delayUS_DWT>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	460a      	mov	r2, r1
 8000aa0:	80fb      	strh	r3, [r7, #6]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 8000aa6:	88fa      	ldrh	r2, [r7, #6]
 8000aa8:	88bb      	ldrh	r3, [r7, #4]
 8000aaa:	4413      	add	r3, r2
 8000aac:	2b0f      	cmp	r3, #15
 8000aae:	dc01      	bgt.n	8000ab4 <bytestowrite+0x1e>
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	e003      	b.n	8000abc <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 8000ab4:	88bb      	ldrh	r3, [r7, #4]
 8000ab6:	f1c3 0310 	rsb	r3, r3, #16
 8000aba:	b29b      	uxth	r3, r3
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08e      	sub	sp, #56	; 0x38
 8000acc:	af04      	add	r7, sp, #16
 8000ace:	60ba      	str	r2, [r7, #8]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	81fb      	strh	r3, [r7, #14]
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	81bb      	strh	r3, [r7, #12]
 8000ada:	4613      	mov	r3, r2
 8000adc:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000ade:	2304      	movs	r3, #4
 8000ae0:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8000ae2:	89fb      	ldrh	r3, [r7, #14]
 8000ae4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000ae6:	88fa      	ldrh	r2, [r7, #6]
 8000ae8:	89bb      	ldrh	r3, [r7, #12]
 8000aea:	4413      	add	r3, r2
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	da00      	bge.n	8000af2 <EEPROM_Write+0x2a>
 8000af0:	330f      	adds	r3, #15
 8000af2:	111b      	asrs	r3, r3, #4
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	89fb      	ldrh	r3, [r7, #14]
 8000af8:	4413      	add	r3, r2
 8000afa:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 8000afc:	8b7a      	ldrh	r2, [r7, #26]
 8000afe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	3301      	adds	r3, #1
 8000b06:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
 8000b10:	e034      	b.n	8000b7c <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000b12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	b21a      	sxth	r2, r3
 8000b1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	b21b      	sxth	r3, r3
 8000b24:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 8000b26:	89ba      	ldrh	r2, [r7, #12]
 8000b28:	88fb      	ldrh	r3, [r7, #6]
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff ffb2 	bl	8000a96 <bytestowrite>
 8000b32:	4603      	mov	r3, r0
 8000b34:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 8000b36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b38:	68ba      	ldr	r2, [r7, #8]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	8af9      	ldrh	r1, [r7, #22]
 8000b3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b42:	9202      	str	r2, [sp, #8]
 8000b44:	8aba      	ldrh	r2, [r7, #20]
 8000b46:	9201      	str	r2, [sp, #4]
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	460a      	mov	r2, r1
 8000b4e:	21a0      	movs	r1, #160	; 0xa0
 8000b50:	480f      	ldr	r0, [pc, #60]	; (8000b90 <EEPROM_Write+0xc8>)
 8000b52:	f004 fa97 	bl	8005084 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8000b56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b58:	3301      	adds	r3, #1
 8000b5a:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 8000b60:	88fa      	ldrh	r2, [r7, #6]
 8000b62:	8abb      	ldrh	r3, [r7, #20]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 8000b68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000b6a:	8abb      	ldrh	r3, [r7, #20]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 8000b70:	2005      	movs	r0, #5
 8000b72:	f002 faed 	bl	8003150 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 8000b76:	6a3b      	ldr	r3, [r7, #32]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	623b      	str	r3, [r7, #32]
 8000b7c:	8b3b      	ldrh	r3, [r7, #24]
 8000b7e:	6a3a      	ldr	r2, [r7, #32]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	dbc6      	blt.n	8000b12 <EEPROM_Write+0x4a>
	}
}
 8000b84:	bf00      	nop
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	; 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	24000708 	.word	0x24000708

08000b94 <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08e      	sub	sp, #56	; 0x38
 8000b98:	af04      	add	r7, sp, #16
 8000b9a:	60ba      	str	r2, [r7, #8]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	81fb      	strh	r3, [r7, #14]
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	81bb      	strh	r3, [r7, #12]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000baa:	2304      	movs	r3, #4
 8000bac:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8000bae:	89fb      	ldrh	r3, [r7, #14]
 8000bb0:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000bb2:	88fa      	ldrh	r2, [r7, #6]
 8000bb4:	89bb      	ldrh	r3, [r7, #12]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	da00      	bge.n	8000bbe <EEPROM_Read+0x2a>
 8000bbc:	330f      	adds	r3, #15
 8000bbe:	111b      	asrs	r3, r3, #4
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	89fb      	ldrh	r3, [r7, #14]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8000bc8:	8b7a      	ldrh	r2, [r7, #26]
 8000bca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 8000bd8:	2300      	movs	r3, #0
 8000bda:	623b      	str	r3, [r7, #32]
 8000bdc:	e031      	b.n	8000c42 <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000bde:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	b21a      	sxth	r2, r3
 8000be8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 8000bf2:	89ba      	ldrh	r2, [r7, #12]
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff4c 	bl	8000a96 <bytestowrite>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 8000c02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c04:	68ba      	ldr	r2, [r7, #8]
 8000c06:	4413      	add	r3, r2
 8000c08:	8af9      	ldrh	r1, [r7, #22]
 8000c0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c0e:	9202      	str	r2, [sp, #8]
 8000c10:	8aba      	ldrh	r2, [r7, #20]
 8000c12:	9201      	str	r2, [sp, #4]
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	2302      	movs	r3, #2
 8000c18:	460a      	mov	r2, r1
 8000c1a:	21a0      	movs	r1, #160	; 0xa0
 8000c1c:	480d      	ldr	r0, [pc, #52]	; (8000c54 <EEPROM_Read+0xc0>)
 8000c1e:	f004 fb45 	bl	80052ac <HAL_I2C_Mem_Read>
		startPage += 1;
 8000c22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c24:	3301      	adds	r3, #1
 8000c26:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 8000c2c:	88fa      	ldrh	r2, [r7, #6]
 8000c2e:	8abb      	ldrh	r3, [r7, #20]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 8000c34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000c36:	8abb      	ldrh	r3, [r7, #20]
 8000c38:	4413      	add	r3, r2
 8000c3a:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 8000c3c:	6a3b      	ldr	r3, [r7, #32]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	623b      	str	r3, [r7, #32]
 8000c42:	8b3b      	ldrh	r3, [r7, #24]
 8000c44:	6a3a      	ldr	r2, [r7, #32]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	dbc9      	blt.n	8000bde <EEPROM_Read+0x4a>
	}
}
 8000c4a:	bf00      	nop
 8000c4c:	bf00      	nop
 8000c4e:	3728      	adds	r7, #40	; 0x28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	24000708 	.word	0x24000708

08000c58 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <DWT_Delay_Init+0x58>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	4a13      	ldr	r2, [pc, #76]	; (8000cb0 <DWT_Delay_Init+0x58>)
 8000c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c66:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <DWT_Delay_Init+0x58>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	4a10      	ldr	r2, [pc, #64]	; (8000cb0 <DWT_Delay_Init+0x58>)
 8000c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c72:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <DWT_Delay_Init+0x5c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <DWT_Delay_Init+0x5c>)
 8000c7a:	f023 0301 	bic.w	r3, r3, #1
 8000c7e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <DWT_Delay_Init+0x5c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <DWT_Delay_Init+0x5c>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <DWT_Delay_Init+0x5c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000c92:	bf00      	nop
     __ASM volatile ("NOP");
 8000c94:	bf00      	nop
     __ASM volatile ("NOP");
 8000c96:	bf00      	nop

     /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <DWT_Delay_Init+0x5c>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	e000      	b.n	8000ca6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000ca4:	2301      	movs	r3, #1
  }
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000edf0 	.word	0xe000edf0
 8000cb4:	e0001000 	.word	0xe0001000

08000cb8 <HAL_TIM_PeriodElapsedCallback>:
//    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
//}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM5)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a20      	ldr	r2, [pc, #128]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d137      	bne.n	8000d3a <HAL_TIM_PeriodElapsedCallback+0x82>
  {
	  counterclk++;
 8000cca:	4b20      	ldr	r3, [pc, #128]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	4a1e      	ldr	r2, [pc, #120]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000cd2:	6013      	str	r3, [r2, #0]
	  counter2++;
 8000cd4:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	4a1d      	ldr	r2, [pc, #116]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000cdc:	6013      	str	r3, [r2, #0]
	  countereeprom++;
 8000cde:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	4a1b      	ldr	r2, [pc, #108]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000ce6:	6013      	str	r3, [r2, #0]
	  adc_flag=0;
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
	  uartflag=0;
 8000cee:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
	  eepromflag=0;
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]

	  if(counterclk>=setTiming1)
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d305      	bcc.n	8000d12 <HAL_TIM_PeriodElapsedCallback+0x5a>
	  {
//	  dataloggerflag=1;

	  adc_flag=1;
 8000d06:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	601a      	str	r2, [r3, #0]
	  counterclk=0;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
	  }
	  if(counter2>=5)
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	d905      	bls.n	8000d26 <HAL_TIM_PeriodElapsedCallback+0x6e>
	  {
		  uartflag=1;
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]
		  counter2=0;
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
	  }
	  if(countereeprom>30)
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b1e      	cmp	r3, #30
 8000d2c:	d905      	bls.n	8000d3a <HAL_TIM_PeriodElapsedCallback+0x82>
	  {
		  eepromflag=1;
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	601a      	str	r2, [r3, #0]
		  countereeprom=0;
 8000d34:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
	  }
    // Code to execute every 1 second interval
    // Place your desired actions here
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40000c00 	.word	0x40000c00
 8000d4c:	240000e4 	.word	0x240000e4
 8000d50:	240000d8 	.word	0x240000d8
 8000d54:	240000e0 	.word	0x240000e0
 8000d58:	240000b4 	.word	0x240000b4
 8000d5c:	240000b8 	.word	0x240000b8
 8000d60:	240000dc 	.word	0x240000dc
 8000d64:	24000000 	.word	0x24000000

08000d68 <eepromWrite>:

void eepromWrite()
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,SET);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2180      	movs	r1, #128	; 0x80
 8000d72:	480f      	ldr	r0, [pc, #60]	; (8000db0 <eepromWrite+0x48>)
 8000d74:	f004 f8dc 	bl	8004f30 <HAL_GPIO_WritePin>
	  for (uint16_t i = 0; i < 10; i++) {
 8000d78:	2300      	movs	r3, #0
 8000d7a:	80fb      	strh	r3, [r7, #6]
 8000d7c:	e00b      	b.n	8000d96 <eepromWrite+0x2e>
	      EEPROM_Write(i, 0, (uint8_t*)&adcarray0[i], sizeof(int));
 8000d7e:	88f8      	ldrh	r0, [r7, #6]
 8000d80:	88fb      	ldrh	r3, [r7, #6]
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <eepromWrite+0x4c>)
 8000d86:	441a      	add	r2, r3
 8000d88:	2304      	movs	r3, #4
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	f7ff fe9c 	bl	8000ac8 <EEPROM_Write>
	  for (uint16_t i = 0; i < 10; i++) {
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	3301      	adds	r3, #1
 8000d94:	80fb      	strh	r3, [r7, #6]
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	2b09      	cmp	r3, #9
 8000d9a:	d9f0      	bls.n	8000d7e <eepromWrite+0x16>
	  }
	  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2180      	movs	r1, #128	; 0x80
 8000da0:	4803      	ldr	r0, [pc, #12]	; (8000db0 <eepromWrite+0x48>)
 8000da2:	f004 f8c5 	bl	8004f30 <HAL_GPIO_WritePin>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	58020400 	.word	0x58020400
 8000db4:	2400247c 	.word	0x2400247c

08000db8 <datalogger>:

void datalogger() ////5 lepta
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08e      	sub	sp, #56	; 0x38
 8000dbc:	af00      	add	r7, sp, #0


	HAL_Delay(500);
 8000dbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dc2:	f002 f9c5 	bl	8003150 <HAL_Delay>
	if(HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin)==1)
 8000dc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dca:	4864      	ldr	r0, [pc, #400]	; (8000f5c <datalogger+0x1a4>)
 8000dcc:	f004 f898 	bl	8004f00 <HAL_GPIO_ReadPin>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	f040 80bd 	bne.w	8000f52 <datalogger+0x19a>
	{
	for (i=0; i<100; i++) // 10 gia test  288 gia 5 lepta gia na bgalw ola ta apothikeumena apo to datalogger_array na ta metatrepsw kai na ta dw sto hyper terminal
 8000dd8:	4b61      	ldr	r3, [pc, #388]	; (8000f60 <datalogger+0x1a8>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	e0b0      	b.n	8000f42 <datalogger+0x18a>
	{

	char buffer2[50];
	ssd1306_Fill(Black);
 8000de0:	2000      	movs	r0, #0
 8000de2:	f001 fb5b 	bl	800249c <ssd1306_Fill>

	ssd1306_SetCursor(0, 0); // Position the cursor for the first line
 8000de6:	2100      	movs	r1, #0
 8000de8:	2000      	movs	r0, #0
 8000dea:	f001 fca5 	bl	8002738 <ssd1306_SetCursor>
	ssd1306_WriteString("DATA LOGGER", Font_11x18, White);
 8000dee:	4a5d      	ldr	r2, [pc, #372]	; (8000f64 <datalogger+0x1ac>)
 8000df0:	2301      	movs	r3, #1
 8000df2:	ca06      	ldmia	r2, {r1, r2}
 8000df4:	485c      	ldr	r0, [pc, #368]	; (8000f68 <datalogger+0x1b0>)
 8000df6:	f001 fc79 	bl	80026ec <ssd1306_WriteString>

	ssd1306_SetCursor(0, 20); // Position the cursor for the second line. Adjust the y-coordinate as needed based on your font size.
 8000dfa:	2114      	movs	r1, #20
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f001 fc9b 	bl	8002738 <ssd1306_SetCursor>
	ssd1306_WriteString("SENDING", Font_11x18, White);
 8000e02:	4a58      	ldr	r2, [pc, #352]	; (8000f64 <datalogger+0x1ac>)
 8000e04:	2301      	movs	r3, #1
 8000e06:	ca06      	ldmia	r2, {r1, r2}
 8000e08:	4858      	ldr	r0, [pc, #352]	; (8000f6c <datalogger+0x1b4>)
 8000e0a:	f001 fc6f 	bl	80026ec <ssd1306_WriteString>

	ssd1306_SetCursor(0, 40); // Position the cursor for the second line. Adjust the y-coordinate as needed based on your font size.
 8000e0e:	2128      	movs	r1, #40	; 0x28
 8000e10:	2000      	movs	r0, #0
 8000e12:	f001 fc91 	bl	8002738 <ssd1306_SetCursor>
	ssd1306_WriteString("TO PuTTY", Font_11x18, White);
 8000e16:	4a53      	ldr	r2, [pc, #332]	; (8000f64 <datalogger+0x1ac>)
 8000e18:	2301      	movs	r3, #1
 8000e1a:	ca06      	ldmia	r2, {r1, r2}
 8000e1c:	4854      	ldr	r0, [pc, #336]	; (8000f70 <datalogger+0x1b8>)
 8000e1e:	f001 fc65 	bl	80026ec <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8000e22:	f001 fb5f 	bl	80024e4 <ssd1306_UpdateScreen>
    sprintf(graphbuffer, "\n\r~~~~~~~~~~~~~~DATALOGGER~~~~~~~~~~~~~~~~\n\r");
 8000e26:	4953      	ldr	r1, [pc, #332]	; (8000f74 <datalogger+0x1bc>)
 8000e28:	4853      	ldr	r0, [pc, #332]	; (8000f78 <datalogger+0x1c0>)
 8000e2a:	f00b f96b 	bl	800c104 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)graphbuffer, strlen(graphbuffer), 100);
 8000e2e:	4852      	ldr	r0, [pc, #328]	; (8000f78 <datalogger+0x1c0>)
 8000e30:	f7ff fa56 	bl	80002e0 <strlen>
 8000e34:	4603      	mov	r3, r0
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	2364      	movs	r3, #100	; 0x64
 8000e3a:	494f      	ldr	r1, [pc, #316]	; (8000f78 <datalogger+0x1c0>)
 8000e3c:	484f      	ldr	r0, [pc, #316]	; (8000f7c <datalogger+0x1c4>)
 8000e3e:	f009 fd55 	bl	800a8ec <HAL_UART_Transmit>
    sprintf(graphTimeBuffer, "\n\r~~~~~~~~~~~~~~%s~~~~~~~~~~~~~~\n\r",TimeArray[i]);
 8000e42:	4b47      	ldr	r3, [pc, #284]	; (8000f60 <datalogger+0x1a8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2232      	movs	r2, #50	; 0x32
 8000e48:	fb02 f303 	mul.w	r3, r2, r3
 8000e4c:	4a4c      	ldr	r2, [pc, #304]	; (8000f80 <datalogger+0x1c8>)
 8000e4e:	4413      	add	r3, r2
 8000e50:	461a      	mov	r2, r3
 8000e52:	494c      	ldr	r1, [pc, #304]	; (8000f84 <datalogger+0x1cc>)
 8000e54:	484c      	ldr	r0, [pc, #304]	; (8000f88 <datalogger+0x1d0>)
 8000e56:	f00b f955 	bl	800c104 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)graphTimeBuffer, strlen(graphTimeBuffer), 100);
 8000e5a:	484b      	ldr	r0, [pc, #300]	; (8000f88 <datalogger+0x1d0>)
 8000e5c:	f7ff fa40 	bl	80002e0 <strlen>
 8000e60:	4603      	mov	r3, r0
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	2364      	movs	r3, #100	; 0x64
 8000e66:	4948      	ldr	r1, [pc, #288]	; (8000f88 <datalogger+0x1d0>)
 8000e68:	4844      	ldr	r0, [pc, #272]	; (8000f7c <datalogger+0x1c4>)
 8000e6a:	f009 fd3f 	bl	800a8ec <HAL_UART_Transmit>
    sprintf(datalogbuf0, "\n\r%d Channel 0  %2d\n\r", i,adcarray0[i]);
 8000e6e:	4b3c      	ldr	r3, [pc, #240]	; (8000f60 <datalogger+0x1a8>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	4b3b      	ldr	r3, [pc, #236]	; (8000f60 <datalogger+0x1a8>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4945      	ldr	r1, [pc, #276]	; (8000f8c <datalogger+0x1d4>)
 8000e78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e7c:	4944      	ldr	r1, [pc, #272]	; (8000f90 <datalogger+0x1d8>)
 8000e7e:	4845      	ldr	r0, [pc, #276]	; (8000f94 <datalogger+0x1dc>)
 8000e80:	f00b f940 	bl	800c104 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)datalogbuf0, strlen(datalogbuf0), 100);
 8000e84:	4843      	ldr	r0, [pc, #268]	; (8000f94 <datalogger+0x1dc>)
 8000e86:	f7ff fa2b 	bl	80002e0 <strlen>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	2364      	movs	r3, #100	; 0x64
 8000e90:	4940      	ldr	r1, [pc, #256]	; (8000f94 <datalogger+0x1dc>)
 8000e92:	483a      	ldr	r0, [pc, #232]	; (8000f7c <datalogger+0x1c4>)
 8000e94:	f009 fd2a 	bl	800a8ec <HAL_UART_Transmit>
    sprintf(datalogbuf1, "\n\r   Channel 1  %2d\n\r", adcarray1[i]);
 8000e98:	4b31      	ldr	r3, [pc, #196]	; (8000f60 <datalogger+0x1a8>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a3e      	ldr	r2, [pc, #248]	; (8000f98 <datalogger+0x1e0>)
 8000e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	493d      	ldr	r1, [pc, #244]	; (8000f9c <datalogger+0x1e4>)
 8000ea6:	483e      	ldr	r0, [pc, #248]	; (8000fa0 <datalogger+0x1e8>)
 8000ea8:	f00b f92c 	bl	800c104 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)datalogbuf1, strlen(datalogbuf1), 100);
 8000eac:	483c      	ldr	r0, [pc, #240]	; (8000fa0 <datalogger+0x1e8>)
 8000eae:	f7ff fa17 	bl	80002e0 <strlen>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	2364      	movs	r3, #100	; 0x64
 8000eb8:	4939      	ldr	r1, [pc, #228]	; (8000fa0 <datalogger+0x1e8>)
 8000eba:	4830      	ldr	r0, [pc, #192]	; (8000f7c <datalogger+0x1c4>)
 8000ebc:	f009 fd16 	bl	800a8ec <HAL_UART_Transmit>
    sprintf(datalogbuf4, "\n\r   Channel 4  %2d\n\r", adcarray4[i]);
 8000ec0:	4b27      	ldr	r3, [pc, #156]	; (8000f60 <datalogger+0x1a8>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a37      	ldr	r2, [pc, #220]	; (8000fa4 <datalogger+0x1ec>)
 8000ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4936      	ldr	r1, [pc, #216]	; (8000fa8 <datalogger+0x1f0>)
 8000ece:	4837      	ldr	r0, [pc, #220]	; (8000fac <datalogger+0x1f4>)
 8000ed0:	f00b f918 	bl	800c104 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)datalogbuf4, strlen(datalogbuf4), 100);
 8000ed4:	4835      	ldr	r0, [pc, #212]	; (8000fac <datalogger+0x1f4>)
 8000ed6:	f7ff fa03 	bl	80002e0 <strlen>
 8000eda:	4603      	mov	r3, r0
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	2364      	movs	r3, #100	; 0x64
 8000ee0:	4932      	ldr	r1, [pc, #200]	; (8000fac <datalogger+0x1f4>)
 8000ee2:	4826      	ldr	r0, [pc, #152]	; (8000f7c <datalogger+0x1c4>)
 8000ee4:	f009 fd02 	bl	800a8ec <HAL_UART_Transmit>
    sprintf(datalogbuf6, "\n\r   Channel 6  %2d\n\r", adcarray6[i]);
 8000ee8:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <datalogger+0x1a8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a30      	ldr	r2, [pc, #192]	; (8000fb0 <datalogger+0x1f8>)
 8000eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	492f      	ldr	r1, [pc, #188]	; (8000fb4 <datalogger+0x1fc>)
 8000ef6:	4830      	ldr	r0, [pc, #192]	; (8000fb8 <datalogger+0x200>)
 8000ef8:	f00b f904 	bl	800c104 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)datalogbuf6, strlen(datalogbuf6), 100);
 8000efc:	482e      	ldr	r0, [pc, #184]	; (8000fb8 <datalogger+0x200>)
 8000efe:	f7ff f9ef 	bl	80002e0 <strlen>
 8000f02:	4603      	mov	r3, r0
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	2364      	movs	r3, #100	; 0x64
 8000f08:	492b      	ldr	r1, [pc, #172]	; (8000fb8 <datalogger+0x200>)
 8000f0a:	481c      	ldr	r0, [pc, #112]	; (8000f7c <datalogger+0x1c4>)
 8000f0c:	f009 fcee 	bl	800a8ec <HAL_UART_Transmit>
    sprintf(datalogbuf7, "\n\r   Channel 7  %2d\n\r", adcarray7[i]);
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <datalogger+0x1a8>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a29      	ldr	r2, [pc, #164]	; (8000fbc <datalogger+0x204>)
 8000f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4928      	ldr	r1, [pc, #160]	; (8000fc0 <datalogger+0x208>)
 8000f1e:	4829      	ldr	r0, [pc, #164]	; (8000fc4 <datalogger+0x20c>)
 8000f20:	f00b f8f0 	bl	800c104 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)datalogbuf7, strlen(datalogbuf7), 100);
 8000f24:	4827      	ldr	r0, [pc, #156]	; (8000fc4 <datalogger+0x20c>)
 8000f26:	f7ff f9db 	bl	80002e0 <strlen>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	2364      	movs	r3, #100	; 0x64
 8000f30:	4924      	ldr	r1, [pc, #144]	; (8000fc4 <datalogger+0x20c>)
 8000f32:	4812      	ldr	r0, [pc, #72]	; (8000f7c <datalogger+0x1c4>)
 8000f34:	f009 fcda 	bl	800a8ec <HAL_UART_Transmit>
	for (i=0; i<100; i++) // 10 gia test  288 gia 5 lepta gia na bgalw ola ta apothikeumena apo to datalogger_array na ta metatrepsw kai na ta dw sto hyper terminal
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <datalogger+0x1a8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	4a08      	ldr	r2, [pc, #32]	; (8000f60 <datalogger+0x1a8>)
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <datalogger+0x1a8>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b63      	cmp	r3, #99	; 0x63
 8000f48:	f77f af4a 	ble.w	8000de0 <datalogger+0x28>


//    sprintf(datalogbuf2, " %c\n\r", datalogger_array_status[i]);
//    HAL_UART_Transmit(&huart3, (uint8_t*)datalogbuf2, strlen(datalogbuf2), 100);
	}
	ssd1306_Fill(Black);
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f001 faa5 	bl	800249c <ssd1306_Fill>

	}


}
 8000f52:	bf00      	nop
 8000f54:	3738      	adds	r7, #56	; 0x38
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	58020800 	.word	0x58020800
 8000f60:	240000bc 	.word	0x240000bc
 8000f64:	24000014 	.word	0x24000014
 8000f68:	0800c938 	.word	0x0800c938
 8000f6c:	0800c944 	.word	0x0800c944
 8000f70:	0800c94c 	.word	0x0800c94c
 8000f74:	0800c958 	.word	0x0800c958
 8000f78:	24002660 	.word	0x24002660
 8000f7c:	24000678 	.word	0x24000678
 8000f80:	24000ba8 	.word	0x24000ba8
 8000f84:	0800c988 	.word	0x0800c988
 8000f88:	240005ac 	.word	0x240005ac
 8000f8c:	2400247c 	.word	0x2400247c
 8000f90:	0800c9ac 	.word	0x0800c9ac
 8000f94:	240029d0 	.word	0x240029d0
 8000f98:	2400226c 	.word	0x2400226c
 8000f9c:	0800c9c4 	.word	0x0800c9c4
 8000fa0:	240026f8 	.word	0x240026f8
 8000fa4:	240027c0 	.word	0x240027c0
 8000fa8:	0800c9dc 	.word	0x0800c9dc
 8000fac:	24000614 	.word	0x24000614
 8000fb0:	24002a68 	.word	0x24002a68
 8000fb4:	0800c9f4 	.word	0x0800c9f4
 8000fb8:	24002208 	.word	0x24002208
 8000fbc:	24001fe0 	.word	0x24001fe0
 8000fc0:	0800ca0c 	.word	0x0800ca0c
 8000fc4:	240004fc 	.word	0x240004fc

08000fc8 <ADC_CH0_SELECT>:




void ADC_CH0_SELECT()
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
 8000fdc:	615a      	str	r2, [r3, #20]
 8000fde:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_0;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fe4:	2306      	movs	r3, #6
 8000fe6:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fec:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ff0:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4806      	ldr	r0, [pc, #24]	; (8001018 <ADC_CH0_SELECT+0x50>)
 8001000:	f002 febe 	bl	8003d80 <HAL_ADC_ConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <ADC_CH0_SELECT+0x46>
	  {
	    Error_Handler();
 800100a:	f001 f985 	bl	8002318 <Error_Handler>
	  }
}
 800100e:	bf00      	nop
 8001010:	3720      	adds	r7, #32
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	240021a4 	.word	0x240021a4

0800101c <ADC_CH1_SELECT>:
void ADC_CH1_SELECT()
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
 8001030:	615a      	str	r2, [r3, #20]
 8001032:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_1;
 8001034:	4b0d      	ldr	r3, [pc, #52]	; (800106c <ADC_CH1_SELECT+0x50>)
 8001036:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001038:	2306      	movs	r3, #6
 800103a:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800103c:	2301      	movs	r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001040:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001044:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001046:	2304      	movs	r3, #4
 8001048:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	4619      	mov	r1, r3
 8001052:	4807      	ldr	r0, [pc, #28]	; (8001070 <ADC_CH1_SELECT+0x54>)
 8001054:	f002 fe94 	bl	8003d80 <HAL_ADC_ConfigChannel>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <ADC_CH1_SELECT+0x46>
	  {
	    Error_Handler();
 800105e:	f001 f95b 	bl	8002318 <Error_Handler>
	  }
}
 8001062:	bf00      	nop
 8001064:	3720      	adds	r7, #32
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	04300002 	.word	0x04300002
 8001070:	240021a4 	.word	0x240021a4

08001074 <ADC_CH4_SELECT>:
void ADC_CH4_SELECT()
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
 8001088:	615a      	str	r2, [r3, #20]
 800108a:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_4;
 800108c:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <ADC_CH4_SELECT+0x50>)
 800108e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001090:	2306      	movs	r3, #6
 8001092:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001094:	2301      	movs	r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001098:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800109c:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800109e:	2304      	movs	r3, #4
 80010a0:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	4619      	mov	r1, r3
 80010aa:	4807      	ldr	r0, [pc, #28]	; (80010c8 <ADC_CH4_SELECT+0x54>)
 80010ac:	f002 fe68 	bl	8003d80 <HAL_ADC_ConfigChannel>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <ADC_CH4_SELECT+0x46>
	  {
	    Error_Handler();
 80010b6:	f001 f92f 	bl	8002318 <Error_Handler>
	  }
}
 80010ba:	bf00      	nop
 80010bc:	3720      	adds	r7, #32
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	10c00010 	.word	0x10c00010
 80010c8:	240021a4 	.word	0x240021a4

080010cc <ADC_CH6_SELECT>:
void ADC_CH6_SELECT()
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
 80010e0:	615a      	str	r2, [r3, #20]
 80010e2:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_6;
 80010e4:	4b0d      	ldr	r3, [pc, #52]	; (800111c <ADC_CH6_SELECT+0x50>)
 80010e6:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010e8:	2306      	movs	r3, #6
 80010ea:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ec:	2301      	movs	r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010f0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80010f4:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010f6:	2304      	movs	r3, #4
 80010f8:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4807      	ldr	r0, [pc, #28]	; (8001120 <ADC_CH6_SELECT+0x54>)
 8001104:	f002 fe3c 	bl	8003d80 <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <ADC_CH6_SELECT+0x46>
	  {
	    Error_Handler();
 800110e:	f001 f903 	bl	8002318 <Error_Handler>
	  }
}
 8001112:	bf00      	nop
 8001114:	3720      	adds	r7, #32
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	19200040 	.word	0x19200040
 8001120:	240021a4 	.word	0x240021a4

08001124 <ADC_CH7_SELECT>:
void ADC_CH7_SELECT()
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
 8001138:	615a      	str	r2, [r3, #20]
 800113a:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_7;
 800113c:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <ADC_CH7_SELECT+0x50>)
 800113e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001140:	2306      	movs	r3, #6
 8001142:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001144:	2301      	movs	r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001148:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800114c:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800114e:	2304      	movs	r3, #4
 8001150:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	4619      	mov	r1, r3
 800115a:	4807      	ldr	r0, [pc, #28]	; (8001178 <ADC_CH7_SELECT+0x54>)
 800115c:	f002 fe10 	bl	8003d80 <HAL_ADC_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <ADC_CH7_SELECT+0x46>
	  {
	    Error_Handler();
 8001166:	f001 f8d7 	bl	8002318 <Error_Handler>
	  }
}
 800116a:	bf00      	nop
 800116c:	3720      	adds	r7, #32
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	1d500080 	.word	0x1d500080
 8001178:	240021a4 	.word	0x240021a4

0800117c <ADC_TAKE_ALL>:

void ADC_TAKE_ALL()
{
 800117c:	b5b0      	push	{r4, r5, r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af04      	add	r7, sp, #16


	HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,SET);
 8001182:	2201      	movs	r2, #1
 8001184:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001188:	4866      	ldr	r0, [pc, #408]	; (8001324 <ADC_TAKE_ALL+0x1a8>)
 800118a:	f003 fed1 	bl	8004f30 <HAL_GPIO_WritePin>

	DS1302_ReadTime(time);
 800118e:	4866      	ldr	r0, [pc, #408]	; (8001328 <ADC_TAKE_ALL+0x1ac>)
 8001190:	f7ff fb90 	bl	80008b4 <DS1302_ReadTime>
	sprintf(timeBuffer2,"\n\r %2d/%2d/%2d %2d:%2d:%2d \n\r",time[1],time[2],time[3],time[4],time[5],time[6]);
 8001194:	4b64      	ldr	r3, [pc, #400]	; (8001328 <ADC_TAKE_ALL+0x1ac>)
 8001196:	785b      	ldrb	r3, [r3, #1]
 8001198:	461c      	mov	r4, r3
 800119a:	4b63      	ldr	r3, [pc, #396]	; (8001328 <ADC_TAKE_ALL+0x1ac>)
 800119c:	789b      	ldrb	r3, [r3, #2]
 800119e:	461d      	mov	r5, r3
 80011a0:	4b61      	ldr	r3, [pc, #388]	; (8001328 <ADC_TAKE_ALL+0x1ac>)
 80011a2:	78db      	ldrb	r3, [r3, #3]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b60      	ldr	r3, [pc, #384]	; (8001328 <ADC_TAKE_ALL+0x1ac>)
 80011a8:	791b      	ldrb	r3, [r3, #4]
 80011aa:	4619      	mov	r1, r3
 80011ac:	4b5e      	ldr	r3, [pc, #376]	; (8001328 <ADC_TAKE_ALL+0x1ac>)
 80011ae:	795b      	ldrb	r3, [r3, #5]
 80011b0:	4618      	mov	r0, r3
 80011b2:	4b5d      	ldr	r3, [pc, #372]	; (8001328 <ADC_TAKE_ALL+0x1ac>)
 80011b4:	799b      	ldrb	r3, [r3, #6]
 80011b6:	9303      	str	r3, [sp, #12]
 80011b8:	9002      	str	r0, [sp, #8]
 80011ba:	9101      	str	r1, [sp, #4]
 80011bc:	9200      	str	r2, [sp, #0]
 80011be:	462b      	mov	r3, r5
 80011c0:	4622      	mov	r2, r4
 80011c2:	495a      	ldr	r1, [pc, #360]	; (800132c <ADC_TAKE_ALL+0x1b0>)
 80011c4:	485a      	ldr	r0, [pc, #360]	; (8001330 <ADC_TAKE_ALL+0x1b4>)
 80011c6:	f00a ff9d 	bl	800c104 <siprintf>
	strcpy(TimeArray[counter1], timeBuffer2);
 80011ca:	4b5a      	ldr	r3, [pc, #360]	; (8001334 <ADC_TAKE_ALL+0x1b8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2232      	movs	r2, #50	; 0x32
 80011d0:	fb02 f303 	mul.w	r3, r2, r3
 80011d4:	4a58      	ldr	r2, [pc, #352]	; (8001338 <ADC_TAKE_ALL+0x1bc>)
 80011d6:	4413      	add	r3, r2
 80011d8:	4955      	ldr	r1, [pc, #340]	; (8001330 <ADC_TAKE_ALL+0x1b4>)
 80011da:	4618      	mov	r0, r3
 80011dc:	f00a ffb2 	bl	800c144 <strcpy>

    HAL_Delay(10);
 80011e0:	200a      	movs	r0, #10
 80011e2:	f001 ffb5 	bl	8003150 <HAL_Delay>
    ADC_CH0_SELECT();
 80011e6:	f7ff feef 	bl	8000fc8 <ADC_CH0_SELECT>
    HAL_ADC_Start(&hadc3);
 80011ea:	4854      	ldr	r0, [pc, #336]	; (800133c <ADC_TAKE_ALL+0x1c0>)
 80011ec:	f002 fbc8 	bl	8003980 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc3, 100);
 80011f0:	2164      	movs	r1, #100	; 0x64
 80011f2:	4852      	ldr	r0, [pc, #328]	; (800133c <ADC_TAKE_ALL+0x1c0>)
 80011f4:	f002 fcc2 	bl	8003b7c <HAL_ADC_PollForConversion>
    adcraw0 = HAL_ADC_GetValue(&hadc3);
 80011f8:	4850      	ldr	r0, [pc, #320]	; (800133c <ADC_TAKE_ALL+0x1c0>)
 80011fa:	f002 fdb3 	bl	8003d64 <HAL_ADC_GetValue>
 80011fe:	4603      	mov	r3, r0
 8001200:	461a      	mov	r2, r3
 8001202:	4b4f      	ldr	r3, [pc, #316]	; (8001340 <ADC_TAKE_ALL+0x1c4>)
 8001204:	601a      	str	r2, [r3, #0]
    adcarray0[counter1]=adcraw0;
 8001206:	4b4b      	ldr	r3, [pc, #300]	; (8001334 <ADC_TAKE_ALL+0x1b8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a4d      	ldr	r2, [pc, #308]	; (8001340 <ADC_TAKE_ALL+0x1c4>)
 800120c:	6812      	ldr	r2, [r2, #0]
 800120e:	494d      	ldr	r1, [pc, #308]	; (8001344 <ADC_TAKE_ALL+0x1c8>)
 8001210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    HAL_ADC_Stop(&hadc3);
 8001214:	4849      	ldr	r0, [pc, #292]	; (800133c <ADC_TAKE_ALL+0x1c0>)
 8001216:	f002 fc7d 	bl	8003b14 <HAL_ADC_Stop>
    HAL_Delay(10);
 800121a:	200a      	movs	r0, #10
 800121c:	f001 ff98 	bl	8003150 <HAL_Delay>
    ADC_CH1_SELECT();
 8001220:	f7ff fefc 	bl	800101c <ADC_CH1_SELECT>
    HAL_ADC_Start(&hadc3);
 8001224:	4845      	ldr	r0, [pc, #276]	; (800133c <ADC_TAKE_ALL+0x1c0>)
 8001226:	f002 fbab 	bl	8003980 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc3, 100);
 800122a:	2164      	movs	r1, #100	; 0x64
 800122c:	4843      	ldr	r0, [pc, #268]	; (800133c <ADC_TAKE_ALL+0x1c0>)
 800122e:	f002 fca5 	bl	8003b7c <HAL_ADC_PollForConversion>
    adcraw1 = HAL_ADC_GetValue(&hadc3);
 8001232:	4842      	ldr	r0, [pc, #264]	; (800133c <ADC_TAKE_ALL+0x1c0>)
 8001234:	f002 fd96 	bl	8003d64 <HAL_ADC_GetValue>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	4b42      	ldr	r3, [pc, #264]	; (8001348 <ADC_TAKE_ALL+0x1cc>)
 800123e:	601a      	str	r2, [r3, #0]
    adcarray1[counter1]=adcraw1;
 8001240:	4b3c      	ldr	r3, [pc, #240]	; (8001334 <ADC_TAKE_ALL+0x1b8>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a40      	ldr	r2, [pc, #256]	; (8001348 <ADC_TAKE_ALL+0x1cc>)
 8001246:	6812      	ldr	r2, [r2, #0]
 8001248:	4940      	ldr	r1, [pc, #256]	; (800134c <ADC_TAKE_ALL+0x1d0>)
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    HAL_ADC_Stop(&hadc3);
 800124e:	483b      	ldr	r0, [pc, #236]	; (800133c <ADC_TAKE_ALL+0x1c0>)
 8001250:	f002 fc60 	bl	8003b14 <HAL_ADC_Stop>
    HAL_Delay(10);
 8001254:	200a      	movs	r0, #10
 8001256:	f001 ff7b 	bl	8003150 <HAL_Delay>
    ADC_CH4_SELECT();
 800125a:	f7ff ff0b 	bl	8001074 <ADC_CH4_SELECT>
    HAL_ADC_Start(&hadc3);
 800125e:	4837      	ldr	r0, [pc, #220]	; (800133c <ADC_TAKE_ALL+0x1c0>)
 8001260:	f002 fb8e 	bl	8003980 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc3, 100);
 8001264:	2164      	movs	r1, #100	; 0x64
 8001266:	4835      	ldr	r0, [pc, #212]	; (800133c <ADC_TAKE_ALL+0x1c0>)
 8001268:	f002 fc88 	bl	8003b7c <HAL_ADC_PollForConversion>
    adcraw4 = HAL_ADC_GetValue(&hadc3);
 800126c:	4833      	ldr	r0, [pc, #204]	; (800133c <ADC_TAKE_ALL+0x1c0>)
 800126e:	f002 fd79 	bl	8003d64 <HAL_ADC_GetValue>
 8001272:	4603      	mov	r3, r0
 8001274:	461a      	mov	r2, r3
 8001276:	4b36      	ldr	r3, [pc, #216]	; (8001350 <ADC_TAKE_ALL+0x1d4>)
 8001278:	601a      	str	r2, [r3, #0]
    adcarray4[counter1]=adcraw4;
 800127a:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <ADC_TAKE_ALL+0x1b8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a34      	ldr	r2, [pc, #208]	; (8001350 <ADC_TAKE_ALL+0x1d4>)
 8001280:	6812      	ldr	r2, [r2, #0]
 8001282:	4934      	ldr	r1, [pc, #208]	; (8001354 <ADC_TAKE_ALL+0x1d8>)
 8001284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    HAL_ADC_Stop(&hadc3);
 8001288:	482c      	ldr	r0, [pc, #176]	; (800133c <ADC_TAKE_ALL+0x1c0>)
 800128a:	f002 fc43 	bl	8003b14 <HAL_ADC_Stop>
    HAL_Delay(10);
 800128e:	200a      	movs	r0, #10
 8001290:	f001 ff5e 	bl	8003150 <HAL_Delay>
    ADC_CH6_SELECT();
 8001294:	f7ff ff1a 	bl	80010cc <ADC_CH6_SELECT>
    HAL_ADC_Start(&hadc3);
 8001298:	4828      	ldr	r0, [pc, #160]	; (800133c <ADC_TAKE_ALL+0x1c0>)
 800129a:	f002 fb71 	bl	8003980 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc3, 100);
 800129e:	2164      	movs	r1, #100	; 0x64
 80012a0:	4826      	ldr	r0, [pc, #152]	; (800133c <ADC_TAKE_ALL+0x1c0>)
 80012a2:	f002 fc6b 	bl	8003b7c <HAL_ADC_PollForConversion>
    adcraw6 = HAL_ADC_GetValue(&hadc3);
 80012a6:	4825      	ldr	r0, [pc, #148]	; (800133c <ADC_TAKE_ALL+0x1c0>)
 80012a8:	f002 fd5c 	bl	8003d64 <HAL_ADC_GetValue>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b29      	ldr	r3, [pc, #164]	; (8001358 <ADC_TAKE_ALL+0x1dc>)
 80012b2:	601a      	str	r2, [r3, #0]
    adcarray6[counter1]=adcraw6;
 80012b4:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <ADC_TAKE_ALL+0x1b8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a27      	ldr	r2, [pc, #156]	; (8001358 <ADC_TAKE_ALL+0x1dc>)
 80012ba:	6812      	ldr	r2, [r2, #0]
 80012bc:	4927      	ldr	r1, [pc, #156]	; (800135c <ADC_TAKE_ALL+0x1e0>)
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    HAL_ADC_Stop(&hadc3);
 80012c2:	481e      	ldr	r0, [pc, #120]	; (800133c <ADC_TAKE_ALL+0x1c0>)
 80012c4:	f002 fc26 	bl	8003b14 <HAL_ADC_Stop>
    HAL_Delay(10);
 80012c8:	200a      	movs	r0, #10
 80012ca:	f001 ff41 	bl	8003150 <HAL_Delay>
    ADC_CH7_SELECT();
 80012ce:	f7ff ff29 	bl	8001124 <ADC_CH7_SELECT>
    HAL_ADC_Start(&hadc3);
 80012d2:	481a      	ldr	r0, [pc, #104]	; (800133c <ADC_TAKE_ALL+0x1c0>)
 80012d4:	f002 fb54 	bl	8003980 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc3, 100);
 80012d8:	2164      	movs	r1, #100	; 0x64
 80012da:	4818      	ldr	r0, [pc, #96]	; (800133c <ADC_TAKE_ALL+0x1c0>)
 80012dc:	f002 fc4e 	bl	8003b7c <HAL_ADC_PollForConversion>
    adcraw7 = HAL_ADC_GetValue(&hadc3);
 80012e0:	4816      	ldr	r0, [pc, #88]	; (800133c <ADC_TAKE_ALL+0x1c0>)
 80012e2:	f002 fd3f 	bl	8003d64 <HAL_ADC_GetValue>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <ADC_TAKE_ALL+0x1e4>)
 80012ec:	601a      	str	r2, [r3, #0]
    adcarray7[counter1]=adcraw7;
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <ADC_TAKE_ALL+0x1b8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a1b      	ldr	r2, [pc, #108]	; (8001360 <ADC_TAKE_ALL+0x1e4>)
 80012f4:	6812      	ldr	r2, [r2, #0]
 80012f6:	491b      	ldr	r1, [pc, #108]	; (8001364 <ADC_TAKE_ALL+0x1e8>)
 80012f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    HAL_ADC_Stop(&hadc3);
 80012fc:	480f      	ldr	r0, [pc, #60]	; (800133c <ADC_TAKE_ALL+0x1c0>)
 80012fe:	f002 fc09 	bl	8003b14 <HAL_ADC_Stop>
    HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001308:	4806      	ldr	r0, [pc, #24]	; (8001324 <ADC_TAKE_ALL+0x1a8>)
 800130a:	f003 fe11 	bl	8004f30 <HAL_GPIO_WritePin>

    counter1++;
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <ADC_TAKE_ALL+0x1b8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	3301      	adds	r3, #1
 8001314:	4a07      	ldr	r2, [pc, #28]	; (8001334 <ADC_TAKE_ALL+0x1b8>)
 8001316:	6013      	str	r3, [r2, #0]
    adc_flag=0;
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <ADC_TAKE_ALL+0x1ec>)
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	bdb0      	pop	{r4, r5, r7, pc}
 8001324:	58020400 	.word	0x58020400
 8001328:	24002658 	.word	0x24002658
 800132c:	0800ca24 	.word	0x0800ca24
 8001330:	2400275c 	.word	0x2400275c
 8001334:	240000d4 	.word	0x240000d4
 8001338:	24000ba8 	.word	0x24000ba8
 800133c:	240021a4 	.word	0x240021a4
 8001340:	240000c0 	.word	0x240000c0
 8001344:	2400247c 	.word	0x2400247c
 8001348:	240000c4 	.word	0x240000c4
 800134c:	2400226c 	.word	0x2400226c
 8001350:	240000c8 	.word	0x240000c8
 8001354:	240027c0 	.word	0x240027c0
 8001358:	240000cc 	.word	0x240000cc
 800135c:	24002a68 	.word	0x24002a68
 8001360:	240000d0 	.word	0x240000d0
 8001364:	24001fe0 	.word	0x24001fe0
 8001368:	240000b4 	.word	0x240000b4

0800136c <uarttrigger>:

void uarttrigger()
{
 800136c:	b5b0      	push	{r4, r5, r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af04      	add	r7, sp, #16
	DS1302_ReadTime(time);
 8001372:	4856      	ldr	r0, [pc, #344]	; (80014cc <uarttrigger+0x160>)
 8001374:	f7ff fa9e 	bl	80008b4 <DS1302_ReadTime>
	sprintf(timeBuffer,"\n\r %2d/%2d/%2d %2d:%2d:%2d \n\r",time[1],time[2],time[3],time[4],time[5],time[6]);
 8001378:	4b54      	ldr	r3, [pc, #336]	; (80014cc <uarttrigger+0x160>)
 800137a:	785b      	ldrb	r3, [r3, #1]
 800137c:	461c      	mov	r4, r3
 800137e:	4b53      	ldr	r3, [pc, #332]	; (80014cc <uarttrigger+0x160>)
 8001380:	789b      	ldrb	r3, [r3, #2]
 8001382:	461d      	mov	r5, r3
 8001384:	4b51      	ldr	r3, [pc, #324]	; (80014cc <uarttrigger+0x160>)
 8001386:	78db      	ldrb	r3, [r3, #3]
 8001388:	461a      	mov	r2, r3
 800138a:	4b50      	ldr	r3, [pc, #320]	; (80014cc <uarttrigger+0x160>)
 800138c:	791b      	ldrb	r3, [r3, #4]
 800138e:	4619      	mov	r1, r3
 8001390:	4b4e      	ldr	r3, [pc, #312]	; (80014cc <uarttrigger+0x160>)
 8001392:	795b      	ldrb	r3, [r3, #5]
 8001394:	4618      	mov	r0, r3
 8001396:	4b4d      	ldr	r3, [pc, #308]	; (80014cc <uarttrigger+0x160>)
 8001398:	799b      	ldrb	r3, [r3, #6]
 800139a:	9303      	str	r3, [sp, #12]
 800139c:	9002      	str	r0, [sp, #8]
 800139e:	9101      	str	r1, [sp, #4]
 80013a0:	9200      	str	r2, [sp, #0]
 80013a2:	462b      	mov	r3, r5
 80013a4:	4622      	mov	r2, r4
 80013a6:	494a      	ldr	r1, [pc, #296]	; (80014d0 <uarttrigger+0x164>)
 80013a8:	484a      	ldr	r0, [pc, #296]	; (80014d4 <uarttrigger+0x168>)
 80013aa:	f00a feab 	bl	800c104 <siprintf>


	HAL_UART_Transmit(&huart3, (uint8_t*)timeBuffer, strlen(timeBuffer), HAL_MAX_DELAY);
 80013ae:	4849      	ldr	r0, [pc, #292]	; (80014d4 <uarttrigger+0x168>)
 80013b0:	f7fe ff96 	bl	80002e0 <strlen>
 80013b4:	4603      	mov	r3, r0
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295
 80013bc:	4945      	ldr	r1, [pc, #276]	; (80014d4 <uarttrigger+0x168>)
 80013be:	4846      	ldr	r0, [pc, #280]	; (80014d8 <uarttrigger+0x16c>)
 80013c0:	f009 fa94 	bl	800a8ec <HAL_UART_Transmit>

	sprintf(uartBuf, "Encoder count: %d\r\n", (int)TIM4->CNT);
 80013c4:	4b45      	ldr	r3, [pc, #276]	; (80014dc <uarttrigger+0x170>)
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	461a      	mov	r2, r3
 80013ca:	4945      	ldr	r1, [pc, #276]	; (80014e0 <uarttrigger+0x174>)
 80013cc:	4845      	ldr	r0, [pc, #276]	; (80014e4 <uarttrigger+0x178>)
 80013ce:	f00a fe99 	bl	800c104 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 80013d2:	4844      	ldr	r0, [pc, #272]	; (80014e4 <uarttrigger+0x178>)
 80013d4:	f7fe ff84 	bl	80002e0 <strlen>
 80013d8:	4603      	mov	r3, r0
 80013da:	b29a      	uxth	r2, r3
 80013dc:	f04f 33ff 	mov.w	r3, #4294967295
 80013e0:	4940      	ldr	r1, [pc, #256]	; (80014e4 <uarttrigger+0x178>)
 80013e2:	483d      	ldr	r0, [pc, #244]	; (80014d8 <uarttrigger+0x16c>)
 80013e4:	f009 fa82 	bl	800a8ec <HAL_UART_Transmit>
    sprintf(buffer, "SetTime ADC:%ds\n", scaledTime);
 80013e8:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <uarttrigger+0x17c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	493f      	ldr	r1, [pc, #252]	; (80014ec <uarttrigger+0x180>)
 80013f0:	483f      	ldr	r0, [pc, #252]	; (80014f0 <uarttrigger+0x184>)
 80013f2:	f00a fe87 	bl	800c104 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80013f6:	483e      	ldr	r0, [pc, #248]	; (80014f0 <uarttrigger+0x184>)
 80013f8:	f7fe ff72 	bl	80002e0 <strlen>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b29a      	uxth	r2, r3
 8001400:	f04f 33ff 	mov.w	r3, #4294967295
 8001404:	493a      	ldr	r1, [pc, #232]	; (80014f0 <uarttrigger+0x184>)
 8001406:	4834      	ldr	r0, [pc, #208]	; (80014d8 <uarttrigger+0x16c>)
 8001408:	f009 fa70 	bl	800a8ec <HAL_UART_Transmit>

	sprintf(adcbuffer0,"\n\r Channel 0  %2d \n\r",adcraw0);
 800140c:	4b39      	ldr	r3, [pc, #228]	; (80014f4 <uarttrigger+0x188>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	4939      	ldr	r1, [pc, #228]	; (80014f8 <uarttrigger+0x18c>)
 8001414:	4839      	ldr	r0, [pc, #228]	; (80014fc <uarttrigger+0x190>)
 8001416:	f00a fe75 	bl	800c104 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer0, strlen(adcbuffer0), HAL_MAX_DELAY);
 800141a:	4838      	ldr	r0, [pc, #224]	; (80014fc <uarttrigger+0x190>)
 800141c:	f7fe ff60 	bl	80002e0 <strlen>
 8001420:	4603      	mov	r3, r0
 8001422:	b29a      	uxth	r2, r3
 8001424:	f04f 33ff 	mov.w	r3, #4294967295
 8001428:	4934      	ldr	r1, [pc, #208]	; (80014fc <uarttrigger+0x190>)
 800142a:	482b      	ldr	r0, [pc, #172]	; (80014d8 <uarttrigger+0x16c>)
 800142c:	f009 fa5e 	bl	800a8ec <HAL_UART_Transmit>
	sprintf(adcbuffer1,"\n\r Channel 1  %2d \n\r",adcraw1);
 8001430:	4b33      	ldr	r3, [pc, #204]	; (8001500 <uarttrigger+0x194>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	4933      	ldr	r1, [pc, #204]	; (8001504 <uarttrigger+0x198>)
 8001438:	4833      	ldr	r0, [pc, #204]	; (8001508 <uarttrigger+0x19c>)
 800143a:	f00a fe63 	bl	800c104 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer1, strlen(adcbuffer1), HAL_MAX_DELAY);
 800143e:	4832      	ldr	r0, [pc, #200]	; (8001508 <uarttrigger+0x19c>)
 8001440:	f7fe ff4e 	bl	80002e0 <strlen>
 8001444:	4603      	mov	r3, r0
 8001446:	b29a      	uxth	r2, r3
 8001448:	f04f 33ff 	mov.w	r3, #4294967295
 800144c:	492e      	ldr	r1, [pc, #184]	; (8001508 <uarttrigger+0x19c>)
 800144e:	4822      	ldr	r0, [pc, #136]	; (80014d8 <uarttrigger+0x16c>)
 8001450:	f009 fa4c 	bl	800a8ec <HAL_UART_Transmit>
	sprintf(adcbuffer4,"\n\r Channel 4  %2d \n\r",adcraw4);
 8001454:	4b2d      	ldr	r3, [pc, #180]	; (800150c <uarttrigger+0x1a0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	492d      	ldr	r1, [pc, #180]	; (8001510 <uarttrigger+0x1a4>)
 800145c:	482d      	ldr	r0, [pc, #180]	; (8001514 <uarttrigger+0x1a8>)
 800145e:	f00a fe51 	bl	800c104 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer4, strlen(adcbuffer4), HAL_MAX_DELAY);
 8001462:	482c      	ldr	r0, [pc, #176]	; (8001514 <uarttrigger+0x1a8>)
 8001464:	f7fe ff3c 	bl	80002e0 <strlen>
 8001468:	4603      	mov	r3, r0
 800146a:	b29a      	uxth	r2, r3
 800146c:	f04f 33ff 	mov.w	r3, #4294967295
 8001470:	4928      	ldr	r1, [pc, #160]	; (8001514 <uarttrigger+0x1a8>)
 8001472:	4819      	ldr	r0, [pc, #100]	; (80014d8 <uarttrigger+0x16c>)
 8001474:	f009 fa3a 	bl	800a8ec <HAL_UART_Transmit>
	sprintf(adcbuffer6,"\n\r Channel 6  %2d \n\r",adcraw6);
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <uarttrigger+0x1ac>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	4927      	ldr	r1, [pc, #156]	; (800151c <uarttrigger+0x1b0>)
 8001480:	4827      	ldr	r0, [pc, #156]	; (8001520 <uarttrigger+0x1b4>)
 8001482:	f00a fe3f 	bl	800c104 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer6, strlen(adcbuffer6), HAL_MAX_DELAY);
 8001486:	4826      	ldr	r0, [pc, #152]	; (8001520 <uarttrigger+0x1b4>)
 8001488:	f7fe ff2a 	bl	80002e0 <strlen>
 800148c:	4603      	mov	r3, r0
 800148e:	b29a      	uxth	r2, r3
 8001490:	f04f 33ff 	mov.w	r3, #4294967295
 8001494:	4922      	ldr	r1, [pc, #136]	; (8001520 <uarttrigger+0x1b4>)
 8001496:	4810      	ldr	r0, [pc, #64]	; (80014d8 <uarttrigger+0x16c>)
 8001498:	f009 fa28 	bl	800a8ec <HAL_UART_Transmit>
	sprintf(adcbuffer7,"\n\r Channel 7  %2d \n\r",adcraw7);
 800149c:	4b21      	ldr	r3, [pc, #132]	; (8001524 <uarttrigger+0x1b8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4921      	ldr	r1, [pc, #132]	; (8001528 <uarttrigger+0x1bc>)
 80014a4:	4821      	ldr	r0, [pc, #132]	; (800152c <uarttrigger+0x1c0>)
 80014a6:	f00a fe2d 	bl	800c104 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer7, strlen(adcbuffer7), HAL_MAX_DELAY);
 80014aa:	4820      	ldr	r0, [pc, #128]	; (800152c <uarttrigger+0x1c0>)
 80014ac:	f7fe ff18 	bl	80002e0 <strlen>
 80014b0:	4603      	mov	r3, r0
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295
 80014b8:	491c      	ldr	r1, [pc, #112]	; (800152c <uarttrigger+0x1c0>)
 80014ba:	4807      	ldr	r0, [pc, #28]	; (80014d8 <uarttrigger+0x16c>)
 80014bc:	f009 fa16 	bl	800a8ec <HAL_UART_Transmit>


	HAL_Delay(10);
 80014c0:	200a      	movs	r0, #10
 80014c2:	f001 fe45 	bl	8003150 <HAL_Delay>

}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bdb0      	pop	{r4, r5, r7, pc}
 80014cc:	24002658 	.word	0x24002658
 80014d0:	0800ca24 	.word	0x0800ca24
 80014d4:	24001f7c 	.word	0x24001f7c
 80014d8:	24000678 	.word	0x24000678
 80014dc:	40000800 	.word	0x40000800
 80014e0:	0800ca44 	.word	0x0800ca44
 80014e4:	240023fc 	.word	0x240023fc
 80014e8:	24002444 	.word	0x24002444
 80014ec:	0800ca58 	.word	0x0800ca58
 80014f0:	24002430 	.word	0x24002430
 80014f4:	240000c0 	.word	0x240000c0
 80014f8:	0800ca6c 	.word	0x0800ca6c
 80014fc:	24002a34 	.word	0x24002a34
 8001500:	240000c4 	.word	0x240000c4
 8001504:	0800ca84 	.word	0x0800ca84
 8001508:	240026c4 	.word	0x240026c4
 800150c:	240000c8 	.word	0x240000c8
 8001510:	0800ca9c 	.word	0x0800ca9c
 8001514:	24002448 	.word	0x24002448
 8001518:	240000cc 	.word	0x240000cc
 800151c:	0800cab4 	.word	0x0800cab4
 8001520:	24002170 	.word	0x24002170
 8001524:	240000d0 	.word	0x240000d0
 8001528:	0800cacc 	.word	0x0800cacc
 800152c:	24002950 	.word	0x24002950

08001530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08e      	sub	sp, #56	; 0x38
 8001534:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001536:	f001 fd79 	bl	800302c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800153a:	f000 fa07 	bl	800194c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800153e:	f000 fa85 	bl	8001a4c <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001542:	f000 fd57 	bl	8001ff4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001546:	f000 fcd7 	bl	8001ef8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800154a:	f000 fd21 	bl	8001f90 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800154e:	f000 fafb 	bl	8001b48 <MX_I2C1_Init>
  MX_ADC3_Init();
 8001552:	f000 fa97 	bl	8001a84 <MX_ADC3_Init>
  MX_TIM1_Init();
 8001556:	f000 fb37 	bl	8001bc8 <MX_TIM1_Init>
  MX_TIM3_Init();
 800155a:	f000 fb89 	bl	8001c70 <MX_TIM3_Init>
  MX_TIM4_Init();
 800155e:	f000 fbd7 	bl	8001d10 <MX_TIM4_Init>
  MX_TIM14_Init();
 8001562:	f000 fc7b 	bl	8001e5c <MX_TIM14_Init>
  MX_TIM5_Init();
 8001566:	f000 fc29 	bl	8001dbc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 800156a:	f000 ff2d 	bl	80023c8 <ssd1306_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 800156e:	482b      	ldr	r0, [pc, #172]	; (800161c <main+0xec>)
 8001570:	f007 fe1c 	bl	80091ac <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8001574:	482a      	ldr	r0, [pc, #168]	; (8001620 <main+0xf0>)
 8001576:	f007 fe19 	bl	80091ac <HAL_TIM_Base_Start_IT>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800157a:	201d      	movs	r0, #29
 800157c:	f003 faf5 	bl	8004b6a <HAL_NVIC_EnableIRQ>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001580:	213c      	movs	r1, #60	; 0x3c
 8001582:	4828      	ldr	r0, [pc, #160]	; (8001624 <main+0xf4>)
 8001584:	f008 f8a0 	bl	80096c8 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8001588:	2100      	movs	r1, #0
 800158a:	4827      	ldr	r0, [pc, #156]	; (8001628 <main+0xf8>)
 800158c:	f007 fee8 	bl	8009360 <HAL_TIM_PWM_Start>
  DS1302_Init();
 8001590:	f7ff fa34 	bl	80009fc <DS1302_Init>
  HAL_Delay(200);
 8001594:	20c8      	movs	r0, #200	; 0xc8
 8001596:	f001 fddb 	bl	8003150 <HAL_Delay>
	ssd1306_Fill(Black);
 800159a:	2000      	movs	r0, #0
 800159c:	f000 ff7e 	bl	800249c <ssd1306_Fill>

	ssd1306_SetCursor(0, 5); // Position the cursor for the first line
 80015a0:	2105      	movs	r1, #5
 80015a2:	2000      	movs	r0, #0
 80015a4:	f001 f8c8 	bl	8002738 <ssd1306_SetCursor>
	ssd1306_WriteString("Teletos", Font_16x26, White);
 80015a8:	4a20      	ldr	r2, [pc, #128]	; (800162c <main+0xfc>)
 80015aa:	2301      	movs	r3, #1
 80015ac:	ca06      	ldmia	r2, {r1, r2}
 80015ae:	4820      	ldr	r0, [pc, #128]	; (8001630 <main+0x100>)
 80015b0:	f001 f89c 	bl	80026ec <ssd1306_WriteString>

	ssd1306_SetCursor(0, 35); // Position the cursor for the first line
 80015b4:	2123      	movs	r1, #35	; 0x23
 80015b6:	2000      	movs	r0, #0
 80015b8:	f001 f8be 	bl	8002738 <ssd1306_SetCursor>
	ssd1306_WriteString("Embedded", Font_16x26, White);
 80015bc:	4a1b      	ldr	r2, [pc, #108]	; (800162c <main+0xfc>)
 80015be:	2301      	movs	r3, #1
 80015c0:	ca06      	ldmia	r2, {r1, r2}
 80015c2:	481c      	ldr	r0, [pc, #112]	; (8001634 <main+0x104>)
 80015c4:	f001 f892 	bl	80026ec <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80015c8:	f000 ff8c 	bl	80024e4 <ssd1306_UpdateScreen>
	 HAL_Delay(2000);
 80015cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015d0:	f001 fdbe 	bl	8003150 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  I2C_ScanBus();
	  if(HAL_GPIO_ReadPin(EEPROM_BUTTON_GPIO_Port, EEPROM_BUTTON_Pin)==0)
 80015d4:	2101      	movs	r1, #1
 80015d6:	4818      	ldr	r0, [pc, #96]	; (8001638 <main+0x108>)
 80015d8:	f003 fc92 	bl	8004f00 <HAL_GPIO_ReadPin>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d159      	bne.n	8001696 <main+0x166>
	  {
		  	ssd1306_Fill(Black);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f000 ff5a 	bl	800249c <ssd1306_Fill>
		  	ssd1306_SetCursor(0, 0); // Position the cursor for the first line
 80015e8:	2100      	movs	r1, #0
 80015ea:	2000      	movs	r0, #0
 80015ec:	f001 f8a4 	bl	8002738 <ssd1306_SetCursor>
		  	ssd1306_WriteString("EEPROM ", Font_11x18, White);
 80015f0:	4a12      	ldr	r2, [pc, #72]	; (800163c <main+0x10c>)
 80015f2:	2301      	movs	r3, #1
 80015f4:	ca06      	ldmia	r2, {r1, r2}
 80015f6:	4812      	ldr	r0, [pc, #72]	; (8001640 <main+0x110>)
 80015f8:	f001 f878 	bl	80026ec <ssd1306_WriteString>
		  	ssd1306_SetCursor(0, 20); // Position the cursor for the first line
 80015fc:	2114      	movs	r1, #20
 80015fe:	2000      	movs	r0, #0
 8001600:	f001 f89a 	bl	8002738 <ssd1306_SetCursor>
		  	ssd1306_WriteString("READ ", Font_11x18, White);
 8001604:	4a0d      	ldr	r2, [pc, #52]	; (800163c <main+0x10c>)
 8001606:	2301      	movs	r3, #1
 8001608:	ca06      	ldmia	r2, {r1, r2}
 800160a:	480e      	ldr	r0, [pc, #56]	; (8001644 <main+0x114>)
 800160c:	f001 f86e 	bl	80026ec <ssd1306_WriteString>
		  	ssd1306_UpdateScreen();
 8001610:	f000 ff68 	bl	80024e4 <ssd1306_UpdateScreen>
			for (uint16_t i = 0; i < 10; i++) {
 8001614:	2300      	movs	r3, #0
 8001616:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001618:	e037      	b.n	800168a <main+0x15a>
 800161a:	bf00      	nop
 800161c:	24001f30 	.word	0x24001f30
 8001620:	24000b5c 	.word	0x24000b5c
 8001624:	24000560 	.word	0x24000560
 8001628:	24002984 	.word	0x24002984
 800162c:	2400001c 	.word	0x2400001c
 8001630:	0800cae4 	.word	0x0800cae4
 8001634:	0800caec 	.word	0x0800caec
 8001638:	58021000 	.word	0x58021000
 800163c:	24000014 	.word	0x24000014
 8001640:	0800caf8 	.word	0x0800caf8
 8001644:	0800cb00 	.word	0x0800cb00
			    EEPROM_Read(i, 0, (uint8_t*)&adcarray0[i], sizeof(int));
 8001648:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 800164a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4aa4      	ldr	r2, [pc, #656]	; (80018e0 <main+0x3b0>)
 8001650:	441a      	add	r2, r3
 8001652:	2304      	movs	r3, #4
 8001654:	2100      	movs	r1, #0
 8001656:	f7ff fa9d 	bl	8000b94 <EEPROM_Read>

			    // Print the value using UART3
			    char uartBuffer[20];
			    sprintf(uartBuffer, "Value at index %d: %d\r\n", i, adcarray0[i]);
 800165a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800165c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800165e:	49a0      	ldr	r1, [pc, #640]	; (80018e0 <main+0x3b0>)
 8001660:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001664:	4638      	mov	r0, r7
 8001666:	499f      	ldr	r1, [pc, #636]	; (80018e4 <main+0x3b4>)
 8001668:	f00a fd4c 	bl	800c104 <siprintf>
			    HAL_UART_Transmit(&huart3, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 800166c:	463b      	mov	r3, r7
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe fe36 	bl	80002e0 <strlen>
 8001674:	4603      	mov	r3, r0
 8001676:	b29a      	uxth	r2, r3
 8001678:	4639      	mov	r1, r7
 800167a:	f04f 33ff 	mov.w	r3, #4294967295
 800167e:	489a      	ldr	r0, [pc, #616]	; (80018e8 <main+0x3b8>)
 8001680:	f009 f934 	bl	800a8ec <HAL_UART_Transmit>
			for (uint16_t i = 0; i < 10; i++) {
 8001684:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001686:	3301      	adds	r3, #1
 8001688:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800168a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800168c:	2b09      	cmp	r3, #9
 800168e:	d9db      	bls.n	8001648 <main+0x118>
				}
		  HAL_Delay(10);
 8001690:	200a      	movs	r0, #10
 8001692:	f001 fd5d 	bl	8003150 <HAL_Delay>
	  }
	  ssd1306_Fill(Black);
 8001696:	2000      	movs	r0, #0
 8001698:	f000 ff00 	bl	800249c <ssd1306_Fill>
	  if(uartflag==1)
 800169c:	4b93      	ldr	r3, [pc, #588]	; (80018ec <main+0x3bc>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d104      	bne.n	80016ae <main+0x17e>
	  {
		  uarttrigger();
 80016a4:	f7ff fe62 	bl	800136c <uarttrigger>
		  uartflag=0;
 80016a8:	4b90      	ldr	r3, [pc, #576]	; (80018ec <main+0x3bc>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
	  }
      encoderReading = TIM4->CNT;  // Original reading
 80016ae:	4b90      	ldr	r3, [pc, #576]	; (80018f0 <main+0x3c0>)
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	4a90      	ldr	r2, [pc, #576]	; (80018f4 <main+0x3c4>)
 80016b4:	6013      	str	r3, [r2, #0]
      int detents = encoderReading / ENCODER_STEP;
 80016b6:	4b8f      	ldr	r3, [pc, #572]	; (80018f4 <main+0x3c4>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	4b8f      	ldr	r3, [pc, #572]	; (80018f8 <main+0x3c8>)
 80016bc:	fba3 1302 	umull	r1, r3, r3, r2
 80016c0:	1ad2      	subs	r2, r2, r3
 80016c2:	0852      	lsrs	r2, r2, #1
 80016c4:	4413      	add	r3, r2
 80016c6:	095b      	lsrs	r3, r3, #5
 80016c8:	62bb      	str	r3, [r7, #40]	; 0x28
      scaledTime = MIN_TIME + (detents * TIME_STEP);
 80016ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016cc:	4613      	mov	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	3301      	adds	r3, #1
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b88      	ldr	r3, [pc, #544]	; (80018fc <main+0x3cc>)
 80016da:	601a      	str	r2, [r3, #0]
      if (scaledTime > MAX_TIME) {
 80016dc:	4b87      	ldr	r3, [pc, #540]	; (80018fc <main+0x3cc>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80016e4:	d902      	bls.n	80016ec <main+0x1bc>
          scaledTime = MIN_TIME;
 80016e6:	4b85      	ldr	r3, [pc, #532]	; (80018fc <main+0x3cc>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	601a      	str	r2, [r3, #0]
      }
      if (scaledTime > MIN_TIME) {
 80016ec:	4b83      	ldr	r3, [pc, #524]	; (80018fc <main+0x3cc>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d904      	bls.n	80016fe <main+0x1ce>
          scaledTime = scaledTime-MIN_TIME;
 80016f4:	4b81      	ldr	r3, [pc, #516]	; (80018fc <main+0x3cc>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	4a80      	ldr	r2, [pc, #512]	; (80018fc <main+0x3cc>)
 80016fc:	6013      	str	r3, [r2, #0]
      }
      if((encoderReading>1018)&&(encoderReading<=1024))
 80016fe:	4b7d      	ldr	r3, [pc, #500]	; (80018f4 <main+0x3c4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f240 32fa 	movw	r2, #1018	; 0x3fa
 8001706:	4293      	cmp	r3, r2
 8001708:	d908      	bls.n	800171c <main+0x1ec>
 800170a:	4b7a      	ldr	r3, [pc, #488]	; (80018f4 <main+0x3c4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001712:	d803      	bhi.n	800171c <main+0x1ec>
      {
    	  scaledTime=300;
 8001714:	4b79      	ldr	r3, [pc, #484]	; (80018fc <main+0x3cc>)
 8001716:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800171a:	601a      	str	r2, [r3, #0]


      // Round to the nearest multiple of 10


      setTiming1=(scaledTime);
 800171c:	4b77      	ldr	r3, [pc, #476]	; (80018fc <main+0x3cc>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a77      	ldr	r2, [pc, #476]	; (8001900 <main+0x3d0>)
 8001722:	6013      	str	r3, [r2, #0]
      // Now scaledTime should be in the range of 1 second to 300 seconds
      sprintf(buffer, "SetTime ADC:%ds\n", scaledTime);
 8001724:	4b75      	ldr	r3, [pc, #468]	; (80018fc <main+0x3cc>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4976      	ldr	r1, [pc, #472]	; (8001904 <main+0x3d4>)
 800172c:	4876      	ldr	r0, [pc, #472]	; (8001908 <main+0x3d8>)
 800172e:	f00a fce9 	bl	800c104 <siprintf>

      ssd1306_SetCursor(13,56); // Adjust these values according to where you want the text to start
 8001732:	2138      	movs	r1, #56	; 0x38
 8001734:	200d      	movs	r0, #13
 8001736:	f000 ffff 	bl	8002738 <ssd1306_SetCursor>
      ssd1306_WriteString(buffer, Font_6x8, White); // Replace with your font and color choice
 800173a:	4a74      	ldr	r2, [pc, #464]	; (800190c <main+0x3dc>)
 800173c:	2301      	movs	r3, #1
 800173e:	ca06      	ldmia	r2, {r1, r2}
 8001740:	4871      	ldr	r0, [pc, #452]	; (8001908 <main+0x3d8>)
 8001742:	f000 ffd3 	bl	80026ec <ssd1306_WriteString>


      // take all the adc measurements
      if(counter1>99)
 8001746:	4b72      	ldr	r3, [pc, #456]	; (8001910 <main+0x3e0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b63      	cmp	r3, #99	; 0x63
 800174c:	d902      	bls.n	8001754 <main+0x224>
      {
    	  counter1=0;
 800174e:	4b70      	ldr	r3, [pc, #448]	; (8001910 <main+0x3e0>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
      }

      if(adc_flag==1)
 8001754:	4b6f      	ldr	r3, [pc, #444]	; (8001914 <main+0x3e4>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d104      	bne.n	8001766 <main+0x236>
      {

    	  ADC_TAKE_ALL();
 800175c:	f7ff fd0e 	bl	800117c <ADC_TAKE_ALL>
    	  adc_flag=0;
 8001760:	4b6c      	ldr	r3, [pc, #432]	; (8001914 <main+0x3e4>)
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]

      }
      int barHeight1 = ((adcraw0 * (DISPLAY_HEIGHT - START_Y-ELEVATION)) / ADC_MAX);
 8001766:	4b6c      	ldr	r3, [pc, #432]	; (8001918 <main+0x3e8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	222c      	movs	r2, #44	; 0x2c
 800176c:	fb02 f303 	mul.w	r3, r2, r3
 8001770:	4a6a      	ldr	r2, [pc, #424]	; (800191c <main+0x3ec>)
 8001772:	fb82 1203 	smull	r1, r2, r2, r3
 8001776:	441a      	add	r2, r3
 8001778:	12d2      	asrs	r2, r2, #11
 800177a:	17db      	asrs	r3, r3, #31
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
      int barHeight2 = ((adcraw1 * (DISPLAY_HEIGHT - START_Y-ELEVATION)) / ADC_MAX);
 8001780:	4b67      	ldr	r3, [pc, #412]	; (8001920 <main+0x3f0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	222c      	movs	r2, #44	; 0x2c
 8001786:	fb02 f303 	mul.w	r3, r2, r3
 800178a:	4a64      	ldr	r2, [pc, #400]	; (800191c <main+0x3ec>)
 800178c:	fb82 1203 	smull	r1, r2, r2, r3
 8001790:	441a      	add	r2, r3
 8001792:	12d2      	asrs	r2, r2, #11
 8001794:	17db      	asrs	r3, r3, #31
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	623b      	str	r3, [r7, #32]
      int barHeight3 = ((adcraw4 * (DISPLAY_HEIGHT - START_Y-ELEVATION)) / ADC_MAX);
 800179a:	4b62      	ldr	r3, [pc, #392]	; (8001924 <main+0x3f4>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	222c      	movs	r2, #44	; 0x2c
 80017a0:	fb02 f303 	mul.w	r3, r2, r3
 80017a4:	4a5d      	ldr	r2, [pc, #372]	; (800191c <main+0x3ec>)
 80017a6:	fb82 1203 	smull	r1, r2, r2, r3
 80017aa:	441a      	add	r2, r3
 80017ac:	12d2      	asrs	r2, r2, #11
 80017ae:	17db      	asrs	r3, r3, #31
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	61fb      	str	r3, [r7, #28]
      int barHeight4 = ((adcraw6 * (DISPLAY_HEIGHT - START_Y-ELEVATION)) / ADC_MAX);
 80017b4:	4b5c      	ldr	r3, [pc, #368]	; (8001928 <main+0x3f8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	222c      	movs	r2, #44	; 0x2c
 80017ba:	fb02 f303 	mul.w	r3, r2, r3
 80017be:	4a57      	ldr	r2, [pc, #348]	; (800191c <main+0x3ec>)
 80017c0:	fb82 1203 	smull	r1, r2, r2, r3
 80017c4:	441a      	add	r2, r3
 80017c6:	12d2      	asrs	r2, r2, #11
 80017c8:	17db      	asrs	r3, r3, #31
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	61bb      	str	r3, [r7, #24]
      int barHeight5 = ((adcraw7 * (DISPLAY_HEIGHT - START_Y-ELEVATION)) / ADC_MAX);
 80017ce:	4b57      	ldr	r3, [pc, #348]	; (800192c <main+0x3fc>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	222c      	movs	r2, #44	; 0x2c
 80017d4:	fb02 f303 	mul.w	r3, r2, r3
 80017d8:	4a50      	ldr	r2, [pc, #320]	; (800191c <main+0x3ec>)
 80017da:	fb82 1203 	smull	r1, r2, r2, r3
 80017de:	441a      	add	r2, r3
 80017e0:	12d2      	asrs	r2, r2, #11
 80017e2:	17db      	asrs	r3, r3, #31
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	617b      	str	r3, [r7, #20]

      // Draw a filled rectangle for each bar
      ssd1306_DrawFilledRectangle(START_X + (0 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - barHeight1-ELEVATION, BAR_WIDTH, barHeight1, White);
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	f1c3 0136 	rsb	r1, r3, #54	; 0x36
 80017ee:	2301      	movs	r3, #1
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	2205      	movs	r2, #5
 80017f6:	2014      	movs	r0, #20
 80017f8:	f000 ffb6 	bl	8002768 <ssd1306_DrawFilledRectangle>
      ssd1306_DrawFilledRectangle(START_X + (1 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - barHeight2-ELEVATION, BAR_WIDTH, barHeight2, White);
 80017fc:	6a3b      	ldr	r3, [r7, #32]
 80017fe:	f1c3 0136 	rsb	r1, r3, #54	; 0x36
 8001802:	2301      	movs	r3, #1
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	6a3b      	ldr	r3, [r7, #32]
 8001808:	2205      	movs	r2, #5
 800180a:	202b      	movs	r0, #43	; 0x2b
 800180c:	f000 ffac 	bl	8002768 <ssd1306_DrawFilledRectangle>
      ssd1306_DrawFilledRectangle(START_X + (2 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - barHeight3-ELEVATION, BAR_WIDTH, barHeight3, White);
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f1c3 0136 	rsb	r1, r3, #54	; 0x36
 8001816:	2301      	movs	r3, #1
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	2205      	movs	r2, #5
 800181e:	2042      	movs	r0, #66	; 0x42
 8001820:	f000 ffa2 	bl	8002768 <ssd1306_DrawFilledRectangle>
      ssd1306_DrawFilledRectangle(START_X + (3 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - barHeight4-ELEVATION, BAR_WIDTH, barHeight4, White);
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	f1c3 0136 	rsb	r1, r3, #54	; 0x36
 800182a:	2301      	movs	r3, #1
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	2205      	movs	r2, #5
 8001832:	2059      	movs	r0, #89	; 0x59
 8001834:	f000 ff98 	bl	8002768 <ssd1306_DrawFilledRectangle>
      ssd1306_DrawFilledRectangle(START_X + (4 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - barHeight5-ELEVATION, BAR_WIDTH, barHeight5, White);
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f1c3 0136 	rsb	r1, r3, #54	; 0x36
 800183e:	2301      	movs	r3, #1
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	2205      	movs	r2, #5
 8001846:	2070      	movs	r0, #112	; 0x70
 8001848:	f000 ff8e 	bl	8002768 <ssd1306_DrawFilledRectangle>

      // Label for each bar
      ssd1306_SetCursor(START_X + (0 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - ELEVATION-45- 8);  // Assumes a font height
 800184c:	2101      	movs	r1, #1
 800184e:	2014      	movs	r0, #20
 8001850:	f000 ff72 	bl	8002738 <ssd1306_SetCursor>
      ssd1306_WriteString("0", Font_6x8, White);  // Replace with your font
 8001854:	4a2d      	ldr	r2, [pc, #180]	; (800190c <main+0x3dc>)
 8001856:	2301      	movs	r3, #1
 8001858:	ca06      	ldmia	r2, {r1, r2}
 800185a:	4835      	ldr	r0, [pc, #212]	; (8001930 <main+0x400>)
 800185c:	f000 ff46 	bl	80026ec <ssd1306_WriteString>
      ssd1306_SetCursor(START_X + (1 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - ELEVATION-45- 8);  // Assumes a font height
 8001860:	2101      	movs	r1, #1
 8001862:	202b      	movs	r0, #43	; 0x2b
 8001864:	f000 ff68 	bl	8002738 <ssd1306_SetCursor>
      ssd1306_WriteString("1", Font_6x8, White);  // Replace with your font
 8001868:	4a28      	ldr	r2, [pc, #160]	; (800190c <main+0x3dc>)
 800186a:	2301      	movs	r3, #1
 800186c:	ca06      	ldmia	r2, {r1, r2}
 800186e:	4831      	ldr	r0, [pc, #196]	; (8001934 <main+0x404>)
 8001870:	f000 ff3c 	bl	80026ec <ssd1306_WriteString>
      ssd1306_SetCursor(START_X + (2 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - ELEVATION-45- 8);  // Assumes a font height
 8001874:	2101      	movs	r1, #1
 8001876:	2042      	movs	r0, #66	; 0x42
 8001878:	f000 ff5e 	bl	8002738 <ssd1306_SetCursor>
      ssd1306_WriteString("4", Font_6x8, White);  // Replace with your font
 800187c:	4a23      	ldr	r2, [pc, #140]	; (800190c <main+0x3dc>)
 800187e:	2301      	movs	r3, #1
 8001880:	ca06      	ldmia	r2, {r1, r2}
 8001882:	482d      	ldr	r0, [pc, #180]	; (8001938 <main+0x408>)
 8001884:	f000 ff32 	bl	80026ec <ssd1306_WriteString>
      ssd1306_SetCursor(START_X + (3 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - ELEVATION-45- 8);  // Assumes a font height
 8001888:	2101      	movs	r1, #1
 800188a:	2059      	movs	r0, #89	; 0x59
 800188c:	f000 ff54 	bl	8002738 <ssd1306_SetCursor>
      ssd1306_WriteString("6", Font_6x8, White);  // Replace with your font
 8001890:	4a1e      	ldr	r2, [pc, #120]	; (800190c <main+0x3dc>)
 8001892:	2301      	movs	r3, #1
 8001894:	ca06      	ldmia	r2, {r1, r2}
 8001896:	4829      	ldr	r0, [pc, #164]	; (800193c <main+0x40c>)
 8001898:	f000 ff28 	bl	80026ec <ssd1306_WriteString>
      ssd1306_SetCursor(START_X + (4 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - ELEVATION-45- 8);  // Assumes a font height
 800189c:	2101      	movs	r1, #1
 800189e:	2070      	movs	r0, #112	; 0x70
 80018a0:	f000 ff4a 	bl	8002738 <ssd1306_SetCursor>
      ssd1306_WriteString("7", Font_6x8, White);  // Replace with your font
 80018a4:	4a19      	ldr	r2, [pc, #100]	; (800190c <main+0x3dc>)
 80018a6:	2301      	movs	r3, #1
 80018a8:	ca06      	ldmia	r2, {r1, r2}
 80018aa:	4825      	ldr	r0, [pc, #148]	; (8001940 <main+0x410>)
 80018ac:	f000 ff1e 	bl	80026ec <ssd1306_WriteString>

      ssd1306_UpdateScreen();
 80018b0:	f000 fe18 	bl	80024e4 <ssd1306_UpdateScreen>

      if(HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin)==1)
 80018b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b8:	4822      	ldr	r0, [pc, #136]	; (8001944 <main+0x414>)
 80018ba:	f003 fb21 	bl	8004f00 <HAL_GPIO_ReadPin>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <main+0x398>
      {
    	  datalogger();
 80018c4:	f7ff fa78 	bl	8000db8 <datalogger>
      }

      if(eepromflag==1)
 80018c8:	4b1f      	ldr	r3, [pc, #124]	; (8001948 <main+0x418>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	f47f ae81 	bne.w	80015d4 <main+0xa4>
      {
    	  eepromWrite();
 80018d2:	f7ff fa49 	bl	8000d68 <eepromWrite>
    	  eepromflag=0;
 80018d6:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <main+0x418>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
  {
 80018dc:	e67a      	b.n	80015d4 <main+0xa4>
 80018de:	bf00      	nop
 80018e0:	2400247c 	.word	0x2400247c
 80018e4:	0800cb08 	.word	0x0800cb08
 80018e8:	24000678 	.word	0x24000678
 80018ec:	240000b8 	.word	0x240000b8
 80018f0:	40000800 	.word	0x40000800
 80018f4:	24000610 	.word	0x24000610
 80018f8:	d41d41d5 	.word	0xd41d41d5
 80018fc:	24002444 	.word	0x24002444
 8001900:	24000000 	.word	0x24000000
 8001904:	0800ca58 	.word	0x0800ca58
 8001908:	24002430 	.word	0x24002430
 800190c:	24000004 	.word	0x24000004
 8001910:	240000d4 	.word	0x240000d4
 8001914:	240000b4 	.word	0x240000b4
 8001918:	240000c0 	.word	0x240000c0
 800191c:	80080081 	.word	0x80080081
 8001920:	240000c4 	.word	0x240000c4
 8001924:	240000c8 	.word	0x240000c8
 8001928:	240000cc 	.word	0x240000cc
 800192c:	240000d0 	.word	0x240000d0
 8001930:	0800cb20 	.word	0x0800cb20
 8001934:	0800cb24 	.word	0x0800cb24
 8001938:	0800cb28 	.word	0x0800cb28
 800193c:	0800cb2c 	.word	0x0800cb2c
 8001940:	0800cb30 	.word	0x0800cb30
 8001944:	58020800 	.word	0x58020800
 8001948:	240000dc 	.word	0x240000dc

0800194c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b09c      	sub	sp, #112	; 0x70
 8001950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001956:	224c      	movs	r2, #76	; 0x4c
 8001958:	2100      	movs	r1, #0
 800195a:	4618      	mov	r0, r3
 800195c:	f00a fbca 	bl	800c0f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	2220      	movs	r2, #32
 8001964:	2100      	movs	r1, #0
 8001966:	4618      	mov	r0, r3
 8001968:	f00a fbc4 	bl	800c0f4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800196c:	2002      	movs	r0, #2
 800196e:	f004 fa3d 	bl	8005dec <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001972:	2300      	movs	r3, #0
 8001974:	603b      	str	r3, [r7, #0]
 8001976:	4b33      	ldr	r3, [pc, #204]	; (8001a44 <SystemClock_Config+0xf8>)
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	4a32      	ldr	r2, [pc, #200]	; (8001a44 <SystemClock_Config+0xf8>)
 800197c:	f023 0301 	bic.w	r3, r3, #1
 8001980:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001982:	4b30      	ldr	r3, [pc, #192]	; (8001a44 <SystemClock_Config+0xf8>)
 8001984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	4b2e      	ldr	r3, [pc, #184]	; (8001a48 <SystemClock_Config+0xfc>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001994:	4a2c      	ldr	r2, [pc, #176]	; (8001a48 <SystemClock_Config+0xfc>)
 8001996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800199a:	6193      	str	r3, [r2, #24]
 800199c:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <SystemClock_Config+0xfc>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019a4:	603b      	str	r3, [r7, #0]
 80019a6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80019a8:	bf00      	nop
 80019aa:	4b27      	ldr	r3, [pc, #156]	; (8001a48 <SystemClock_Config+0xfc>)
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019b6:	d1f8      	bne.n	80019aa <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSI;
 80019b8:	2312      	movs	r3, #18
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 80019bc:	2309      	movs	r3, #9
 80019be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019c0:	2340      	movs	r3, #64	; 0x40
 80019c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80019c8:	2320      	movs	r3, #32
 80019ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019cc:	2302      	movs	r3, #2
 80019ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 80019d0:	2301      	movs	r3, #1
 80019d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019d4:	2301      	movs	r3, #1
 80019d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 37;
 80019d8:	2325      	movs	r3, #37	; 0x25
 80019da:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80019dc:	2302      	movs	r3, #2
 80019de:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80019e0:	2303      	movs	r3, #3
 80019e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019e4:	2302      	movs	r3, #2
 80019e6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80019e8:	2308      	movs	r3, #8
 80019ea:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f8:	4618      	mov	r0, r3
 80019fa:	f004 fa41 	bl	8005e80 <HAL_RCC_OscConfig>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001a04:	f000 fc88 	bl	8002318 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a08:	233f      	movs	r3, #63	; 0x3f
 8001a0a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f004 fe53 	bl	80066d8 <HAL_RCC_ClockConfig>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8001a38:	f000 fc6e 	bl	8002318 <Error_Handler>
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	3770      	adds	r7, #112	; 0x70
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	58000400 	.word	0x58000400
 8001a48:	58024800 	.word	0x58024800

08001a4c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b0b0      	sub	sp, #192	; 0xc0
 8001a50:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	22bc      	movs	r2, #188	; 0xbc
 8001a56:	2100      	movs	r1, #0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f00a fb4b 	bl	800c0f4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8001a5e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001a62:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001a64:	2300      	movs	r3, #0
 8001a66:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f005 f9c0 	bl	8006df0 <HAL_RCCEx_PeriphCLKConfig>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 8001a76:	f000 fc4f 	bl	8002318 <Error_Handler>
  }
}
 8001a7a:	bf00      	nop
 8001a7c:	37c0      	adds	r7, #192	; 0xc0
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b088      	sub	sp, #32
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
 8001a98:	615a      	str	r2, [r3, #20]
 8001a9a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8001a9c:	4b28      	ldr	r3, [pc, #160]	; (8001b40 <MX_ADC3_Init+0xbc>)
 8001a9e:	4a29      	ldr	r2, [pc, #164]	; (8001b44 <MX_ADC3_Init+0xc0>)
 8001aa0:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001aa2:	4b27      	ldr	r3, [pc, #156]	; (8001b40 <MX_ADC3_Init+0xbc>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001aa8:	4b25      	ldr	r3, [pc, #148]	; (8001b40 <MX_ADC3_Init+0xbc>)
 8001aaa:	2208      	movs	r2, #8
 8001aac:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001aae:	4b24      	ldr	r3, [pc, #144]	; (8001b40 <MX_ADC3_Init+0xbc>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ab4:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <MX_ADC3_Init+0xbc>)
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001aba:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <MX_ADC3_Init+0xbc>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001ac0:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <MX_ADC3_Init+0xbc>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8001ac6:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <MX_ADC3_Init+0xbc>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001acc:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <MX_ADC3_Init+0xbc>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ad2:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <MX_ADC3_Init+0xbc>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ad8:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <MX_ADC3_Init+0xbc>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <MX_ADC3_Init+0xbc>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001ae4:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <MX_ADC3_Init+0xbc>)
 8001ae6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aea:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <MX_ADC3_Init+0xbc>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <MX_ADC3_Init+0xbc>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001afa:	4811      	ldr	r0, [pc, #68]	; (8001b40 <MX_ADC3_Init+0xbc>)
 8001afc:	f001 fda0 	bl	8003640 <HAL_ADC_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8001b06:	f000 fc07 	bl	8002318 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b0e:	2306      	movs	r3, #6
 8001b10:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001b12:	2301      	movs	r3, #1
 8001b14:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b16:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001b1a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	4619      	mov	r1, r3
 8001b28:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_ADC3_Init+0xbc>)
 8001b2a:	f002 f929 	bl	8003d80 <HAL_ADC_ConfigChannel>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8001b34:	f000 fbf0 	bl	8002318 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001b38:	bf00      	nop
 8001b3a:	3720      	adds	r7, #32
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	240021a4 	.word	0x240021a4
 8001b44:	58026000 	.word	0x58026000

08001b48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <MX_I2C1_Init+0x74>)
 8001b4e:	4a1c      	ldr	r2, [pc, #112]	; (8001bc0 <MX_I2C1_Init+0x78>)
 8001b50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B0DCFB;
 8001b52:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <MX_I2C1_Init+0x74>)
 8001b54:	4a1b      	ldr	r2, [pc, #108]	; (8001bc4 <MX_I2C1_Init+0x7c>)
 8001b56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b58:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <MX_I2C1_Init+0x74>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b5e:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <MX_I2C1_Init+0x74>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b64:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <MX_I2C1_Init+0x74>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b6a:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <MX_I2C1_Init+0x74>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b70:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <MX_I2C1_Init+0x74>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b76:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <MX_I2C1_Init+0x74>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <MX_I2C1_Init+0x74>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b82:	480e      	ldr	r0, [pc, #56]	; (8001bbc <MX_I2C1_Init+0x74>)
 8001b84:	f003 f9ee 	bl	8004f64 <HAL_I2C_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b8e:	f000 fbc3 	bl	8002318 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b92:	2100      	movs	r1, #0
 8001b94:	4809      	ldr	r0, [pc, #36]	; (8001bbc <MX_I2C1_Init+0x74>)
 8001b96:	f003 ff49 	bl	8005a2c <HAL_I2CEx_ConfigAnalogFilter>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ba0:	f000 fbba 	bl	8002318 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4805      	ldr	r0, [pc, #20]	; (8001bbc <MX_I2C1_Init+0x74>)
 8001ba8:	f003 ff8b 	bl	8005ac2 <HAL_I2CEx_ConfigDigitalFilter>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001bb2:	f000 fbb1 	bl	8002318 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	24000708 	.word	0x24000708
 8001bc0:	40005400 	.word	0x40005400
 8001bc4:	10b0dcfb 	.word	0x10b0dcfb

08001bc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bce:	f107 0310 	add.w	r3, r7, #16
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001be6:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <MX_TIM1_Init+0xa0>)
 8001be8:	4a20      	ldr	r2, [pc, #128]	; (8001c6c <MX_TIM1_Init+0xa4>)
 8001bea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001bec:	4b1e      	ldr	r3, [pc, #120]	; (8001c68 <MX_TIM1_Init+0xa0>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <MX_TIM1_Init+0xa0>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <MX_TIM1_Init+0xa0>)
 8001bfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bfe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c00:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <MX_TIM1_Init+0xa0>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c06:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <MX_TIM1_Init+0xa0>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0c:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <MX_TIM1_Init+0xa0>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c12:	4815      	ldr	r0, [pc, #84]	; (8001c68 <MX_TIM1_Init+0xa0>)
 8001c14:	f007 fa72 	bl	80090fc <HAL_TIM_Base_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001c1e:	f000 fb7b 	bl	8002318 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c28:	f107 0310 	add.w	r3, r7, #16
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	480e      	ldr	r0, [pc, #56]	; (8001c68 <MX_TIM1_Init+0xa0>)
 8001c30:	f008 f80c 	bl	8009c4c <HAL_TIM_ConfigClockSource>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001c3a:	f000 fb6d 	bl	8002318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c4a:	1d3b      	adds	r3, r7, #4
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4806      	ldr	r0, [pc, #24]	; (8001c68 <MX_TIM1_Init+0xa0>)
 8001c50:	f008 fd50 	bl	800a6f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001c5a:	f000 fb5d 	bl	8002318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c5e:	bf00      	nop
 8001c60:	3720      	adds	r7, #32
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	2400260c 	.word	0x2400260c
 8001c6c:	40010000 	.word	0x40010000

08001c70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
//
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c76:	f107 0310 	add.w	r3, r7, #16
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */
//
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c8e:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <MX_TIM3_Init+0x98>)
 8001c90:	4a1e      	ldr	r2, [pc, #120]	; (8001d0c <MX_TIM3_Init+0x9c>)
 8001c92:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000-1;
 8001c94:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <MX_TIM3_Init+0x98>)
 8001c96:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8001c9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9c:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <MX_TIM3_Init+0x98>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8001ca2:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <MX_TIM3_Init+0x98>)
 8001ca4:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ca8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001caa:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <MX_TIM3_Init+0x98>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb0:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <MX_TIM3_Init+0x98>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cb6:	4814      	ldr	r0, [pc, #80]	; (8001d08 <MX_TIM3_Init+0x98>)
 8001cb8:	f007 fa20 	bl	80090fc <HAL_TIM_Base_Init>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001cc2:	f000 fb29 	bl	8002318 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ccc:	f107 0310 	add.w	r3, r7, #16
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	480d      	ldr	r0, [pc, #52]	; (8001d08 <MX_TIM3_Init+0x98>)
 8001cd4:	f007 ffba 	bl	8009c4c <HAL_TIM_ConfigClockSource>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001cde:	f000 fb1b 	bl	8002318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	4619      	mov	r1, r3
 8001cee:	4806      	ldr	r0, [pc, #24]	; (8001d08 <MX_TIM3_Init+0x98>)
 8001cf0:	f008 fd00 	bl	800a6f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001cfa:	f000 fb0d 	bl	8002318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
//
  /* USER CODE END TIM3_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	3720      	adds	r7, #32
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	24001f30 	.word	0x24001f30
 8001d0c:	40000400 	.word	0x40000400

08001d10 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08c      	sub	sp, #48	; 0x30
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d16:	f107 030c 	add.w	r3, r7, #12
 8001d1a:	2224      	movs	r2, #36	; 0x24
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f00a f9e8 	bl	800c0f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d24:	463b      	mov	r3, r7
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d2e:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <MX_TIM4_Init+0xa4>)
 8001d30:	4a21      	ldr	r2, [pc, #132]	; (8001db8 <MX_TIM4_Init+0xa8>)
 8001d32:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d34:	4b1f      	ldr	r3, [pc, #124]	; (8001db4 <MX_TIM4_Init+0xa4>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3a:	4b1e      	ldr	r3, [pc, #120]	; (8001db4 <MX_TIM4_Init+0xa4>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1024;
 8001d40:	4b1c      	ldr	r3, [pc, #112]	; (8001db4 <MX_TIM4_Init+0xa4>)
 8001d42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d46:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d48:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <MX_TIM4_Init+0xa4>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d4e:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <MX_TIM4_Init+0xa4>)
 8001d50:	2280      	movs	r2, #128	; 0x80
 8001d52:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d54:	2303      	movs	r3, #3
 8001d56:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d78:	f107 030c 	add.w	r3, r7, #12
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	480d      	ldr	r0, [pc, #52]	; (8001db4 <MX_TIM4_Init+0xa4>)
 8001d80:	f007 fbfc 	bl	800957c <HAL_TIM_Encoder_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001d8a:	f000 fac5 	bl	8002318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d96:	463b      	mov	r3, r7
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4806      	ldr	r0, [pc, #24]	; (8001db4 <MX_TIM4_Init+0xa4>)
 8001d9c:	f008 fcaa 	bl	800a6f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001da6:	f000 fab7 	bl	8002318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001daa:	bf00      	nop
 8001dac:	3730      	adds	r7, #48	; 0x30
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	24000560 	.word	0x24000560
 8001db8:	40000800 	.word	0x40000800

08001dbc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dc2:	f107 0310 	add.w	r3, r7, #16
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001dda:	4b1e      	ldr	r3, [pc, #120]	; (8001e54 <MX_TIM5_Init+0x98>)
 8001ddc:	4a1e      	ldr	r2, [pc, #120]	; (8001e58 <MX_TIM5_Init+0x9c>)
 8001dde:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 32000-1;
 8001de0:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <MX_TIM5_Init+0x98>)
 8001de2:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8001de6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de8:	4b1a      	ldr	r3, [pc, #104]	; (8001e54 <MX_TIM5_Init+0x98>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8001dee:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <MX_TIM5_Init+0x98>)
 8001df0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001df4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df6:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <MX_TIM5_Init+0x98>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfc:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <MX_TIM5_Init+0x98>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001e02:	4814      	ldr	r0, [pc, #80]	; (8001e54 <MX_TIM5_Init+0x98>)
 8001e04:	f007 f97a 	bl	80090fc <HAL_TIM_Base_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001e0e:	f000 fa83 	bl	8002318 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e18:	f107 0310 	add.w	r3, r7, #16
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	480d      	ldr	r0, [pc, #52]	; (8001e54 <MX_TIM5_Init+0x98>)
 8001e20:	f007 ff14 	bl	8009c4c <HAL_TIM_ConfigClockSource>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001e2a:	f000 fa75 	bl	8002318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4806      	ldr	r0, [pc, #24]	; (8001e54 <MX_TIM5_Init+0x98>)
 8001e3c:	f008 fc5a 	bl	800a6f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001e46:	f000 fa67 	bl	8002318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e4a:	bf00      	nop
 8001e4c:	3720      	adds	r7, #32
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	24000b5c 	.word	0x24000b5c
 8001e58:	40000c00 	.word	0x40000c00

08001e5c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
 8001e70:	615a      	str	r2, [r3, #20]
 8001e72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001e74:	4b1e      	ldr	r3, [pc, #120]	; (8001ef0 <MX_TIM14_Init+0x94>)
 8001e76:	4a1f      	ldr	r2, [pc, #124]	; (8001ef4 <MX_TIM14_Init+0x98>)
 8001e78:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001e7a:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <MX_TIM14_Init+0x94>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e80:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <MX_TIM14_Init+0x94>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1024;
 8001e86:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <MX_TIM14_Init+0x94>)
 8001e88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e8c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e8e:	4b18      	ldr	r3, [pc, #96]	; (8001ef0 <MX_TIM14_Init+0x94>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e94:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <MX_TIM14_Init+0x94>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001e9a:	4815      	ldr	r0, [pc, #84]	; (8001ef0 <MX_TIM14_Init+0x94>)
 8001e9c:	f007 f92e 	bl	80090fc <HAL_TIM_Base_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001ea6:	f000 fa37 	bl	8002318 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001eaa:	4811      	ldr	r0, [pc, #68]	; (8001ef0 <MX_TIM14_Init+0x94>)
 8001eac:	f007 f9f6 	bl	800929c <HAL_TIM_PWM_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001eb6:	f000 fa2f 	bl	8002318 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eba:	2360      	movs	r3, #96	; 0x60
 8001ebc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	2200      	movs	r2, #0
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4807      	ldr	r0, [pc, #28]	; (8001ef0 <MX_TIM14_Init+0x94>)
 8001ed2:	f007 fda7 	bl	8009a24 <HAL_TIM_PWM_ConfigChannel>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001edc:	f000 fa1c 	bl	8002318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001ee0:	4803      	ldr	r0, [pc, #12]	; (8001ef0 <MX_TIM14_Init+0x94>)
 8001ee2:	f000 fe61 	bl	8002ba8 <HAL_TIM_MspPostInit>

}
 8001ee6:	bf00      	nop
 8001ee8:	3720      	adds	r7, #32
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	24002984 	.word	0x24002984
 8001ef4:	40002000 	.word	0x40002000

08001ef8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001efc:	4b22      	ldr	r3, [pc, #136]	; (8001f88 <MX_USART3_UART_Init+0x90>)
 8001efe:	4a23      	ldr	r2, [pc, #140]	; (8001f8c <MX_USART3_UART_Init+0x94>)
 8001f00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f02:	4b21      	ldr	r3, [pc, #132]	; (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f0a:	4b1f      	ldr	r3, [pc, #124]	; (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f10:	4b1d      	ldr	r3, [pc, #116]	; (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f16:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f1c:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f1e:	220c      	movs	r2, #12
 8001f20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f22:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f28:	4b17      	ldr	r3, [pc, #92]	; (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f2e:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f34:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f3a:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f40:	4811      	ldr	r0, [pc, #68]	; (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f42:	f008 fc83 	bl	800a84c <HAL_UART_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001f4c:	f000 f9e4 	bl	8002318 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f50:	2100      	movs	r1, #0
 8001f52:	480d      	ldr	r0, [pc, #52]	; (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f54:	f009 fcae 	bl	800b8b4 <HAL_UARTEx_SetTxFifoThreshold>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001f5e:	f000 f9db 	bl	8002318 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f62:	2100      	movs	r1, #0
 8001f64:	4808      	ldr	r0, [pc, #32]	; (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f66:	f009 fce3 	bl	800b930 <HAL_UARTEx_SetRxFifoThreshold>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001f70:	f000 f9d2 	bl	8002318 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f74:	4804      	ldr	r0, [pc, #16]	; (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f76:	f009 fc64 	bl	800b842 <HAL_UARTEx_DisableFifoMode>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001f80:	f000 f9ca 	bl	8002318 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	24000678 	.word	0x24000678
 8001f8c:	40004800 	.word	0x40004800

08001f90 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001f94:	4b15      	ldr	r3, [pc, #84]	; (8001fec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f96:	4a16      	ldr	r2, [pc, #88]	; (8001ff0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001f98:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001f9a:	4b14      	ldr	r3, [pc, #80]	; (8001fec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f9c:	2209      	movs	r2, #9
 8001f9e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001fa0:	4b12      	ldr	r3, [pc, #72]	; (8001fec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001fa6:	4b11      	ldr	r3, [pc, #68]	; (8001fec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001fac:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001fae:	2202      	movs	r2, #2
 8001fb0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001fc4:	4b09      	ldr	r3, [pc, #36]	; (8001fec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001fd6:	4805      	ldr	r0, [pc, #20]	; (8001fec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001fd8:	f003 fdbf 	bl	8005b5a <HAL_PCD_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001fe2:	f000 f999 	bl	8002318 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	24000754 	.word	0x24000754
 8001ff0:	40080000 	.word	0x40080000

08001ff4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08e      	sub	sp, #56	; 0x38
 8001ff8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]
 8002008:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800200a:	4bbb      	ldr	r3, [pc, #748]	; (80022f8 <MX_GPIO_Init+0x304>)
 800200c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002010:	4ab9      	ldr	r2, [pc, #740]	; (80022f8 <MX_GPIO_Init+0x304>)
 8002012:	f043 0310 	orr.w	r3, r3, #16
 8002016:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800201a:	4bb7      	ldr	r3, [pc, #732]	; (80022f8 <MX_GPIO_Init+0x304>)
 800201c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002020:	f003 0310 	and.w	r3, r3, #16
 8002024:	623b      	str	r3, [r7, #32]
 8002026:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002028:	4bb3      	ldr	r3, [pc, #716]	; (80022f8 <MX_GPIO_Init+0x304>)
 800202a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800202e:	4ab2      	ldr	r2, [pc, #712]	; (80022f8 <MX_GPIO_Init+0x304>)
 8002030:	f043 0304 	orr.w	r3, r3, #4
 8002034:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002038:	4baf      	ldr	r3, [pc, #700]	; (80022f8 <MX_GPIO_Init+0x304>)
 800203a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	61fb      	str	r3, [r7, #28]
 8002044:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002046:	4bac      	ldr	r3, [pc, #688]	; (80022f8 <MX_GPIO_Init+0x304>)
 8002048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800204c:	4aaa      	ldr	r2, [pc, #680]	; (80022f8 <MX_GPIO_Init+0x304>)
 800204e:	f043 0320 	orr.w	r3, r3, #32
 8002052:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002056:	4ba8      	ldr	r3, [pc, #672]	; (80022f8 <MX_GPIO_Init+0x304>)
 8002058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800205c:	f003 0320 	and.w	r3, r3, #32
 8002060:	61bb      	str	r3, [r7, #24]
 8002062:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002064:	4ba4      	ldr	r3, [pc, #656]	; (80022f8 <MX_GPIO_Init+0x304>)
 8002066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800206a:	4aa3      	ldr	r2, [pc, #652]	; (80022f8 <MX_GPIO_Init+0x304>)
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002074:	4ba0      	ldr	r3, [pc, #640]	; (80022f8 <MX_GPIO_Init+0x304>)
 8002076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800207a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002082:	4b9d      	ldr	r3, [pc, #628]	; (80022f8 <MX_GPIO_Init+0x304>)
 8002084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002088:	4a9b      	ldr	r2, [pc, #620]	; (80022f8 <MX_GPIO_Init+0x304>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002092:	4b99      	ldr	r3, [pc, #612]	; (80022f8 <MX_GPIO_Init+0x304>)
 8002094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a0:	4b95      	ldr	r3, [pc, #596]	; (80022f8 <MX_GPIO_Init+0x304>)
 80020a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a6:	4a94      	ldr	r2, [pc, #592]	; (80022f8 <MX_GPIO_Init+0x304>)
 80020a8:	f043 0302 	orr.w	r3, r3, #2
 80020ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020b0:	4b91      	ldr	r3, [pc, #580]	; (80022f8 <MX_GPIO_Init+0x304>)
 80020b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020be:	4b8e      	ldr	r3, [pc, #568]	; (80022f8 <MX_GPIO_Init+0x304>)
 80020c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c4:	4a8c      	ldr	r2, [pc, #560]	; (80022f8 <MX_GPIO_Init+0x304>)
 80020c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020ce:	4b8a      	ldr	r3, [pc, #552]	; (80022f8 <MX_GPIO_Init+0x304>)
 80020d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020dc:	4b86      	ldr	r3, [pc, #536]	; (80022f8 <MX_GPIO_Init+0x304>)
 80020de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e2:	4a85      	ldr	r2, [pc, #532]	; (80022f8 <MX_GPIO_Init+0x304>)
 80020e4:	f043 0308 	orr.w	r3, r3, #8
 80020e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020ec:	4b82      	ldr	r3, [pc, #520]	; (80022f8 <MX_GPIO_Init+0x304>)
 80020ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, RTC_CLK_Pin|RTC_RST_Pin, GPIO_PIN_RESET);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2106      	movs	r1, #6
 80020fe:	487f      	ldr	r0, [pc, #508]	; (80022fc <MX_GPIO_Init+0x308>)
 8002100:	f002 ff16 	bl	8004f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002104:	2200      	movs	r2, #0
 8002106:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800210a:	487d      	ldr	r0, [pc, #500]	; (8002300 <MX_GPIO_Init+0x30c>)
 800210c:	f002 ff10 	bl	8004f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002110:	2200      	movs	r2, #0
 8002112:	2140      	movs	r1, #64	; 0x40
 8002114:	487b      	ldr	r0, [pc, #492]	; (8002304 <MX_GPIO_Init+0x310>)
 8002116:	f002 ff0b 	bl	8004f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800211a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002120:	2303      	movs	r3, #3
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800212c:	4619      	mov	r1, r3
 800212e:	4876      	ldr	r0, [pc, #472]	; (8002308 <MX_GPIO_Init+0x314>)
 8002130:	f002 fd36 	bl	8004ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002134:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800213a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800213e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002148:	4619      	mov	r1, r3
 800214a:	4870      	ldr	r0, [pc, #448]	; (800230c <MX_GPIO_Init+0x318>)
 800214c:	f002 fd28 	bl	8004ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RTC_IO_Pin */
  GPIO_InitStruct.Pin = RTC_IO_Pin;
 8002150:	2301      	movs	r3, #1
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002154:	2300      	movs	r3, #0
 8002156:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RTC_IO_GPIO_Port, &GPIO_InitStruct);
 800215c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002160:	4619      	mov	r1, r3
 8002162:	4866      	ldr	r0, [pc, #408]	; (80022fc <MX_GPIO_Init+0x308>)
 8002164:	f002 fd1c 	bl	8004ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RTC_CLK_Pin RTC_RST_Pin */
  GPIO_InitStruct.Pin = RTC_CLK_Pin|RTC_RST_Pin;
 8002168:	2306      	movs	r3, #6
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800216c:	2301      	movs	r3, #1
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002174:	2300      	movs	r3, #0
 8002176:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800217c:	4619      	mov	r1, r3
 800217e:	485f      	ldr	r0, [pc, #380]	; (80022fc <MX_GPIO_Init+0x308>)
 8002180:	f002 fd0e 	bl	8004ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF4 PF6 PF7
                           PF11 PF12 PF13 PF14
                           PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
 8002184:	f64f 03d8 	movw	r3, #63704	; 0xf8d8
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800218a:	2303      	movs	r3, #3
 800218c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002196:	4619      	mov	r1, r3
 8002198:	4858      	ldr	r0, [pc, #352]	; (80022fc <MX_GPIO_Init+0x308>)
 800219a:	f002 fd01 	bl	8004ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800219e:	f641 73f1 	movw	r3, #8177	; 0x1ff1
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021a4:	2303      	movs	r3, #3
 80021a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b0:	4619      	mov	r1, r3
 80021b2:	4856      	ldr	r0, [pc, #344]	; (800230c <MX_GPIO_Init+0x318>)
 80021b4:	f002 fcf4 	bl	8004ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDC_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 80021b8:	2302      	movs	r3, #2
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021bc:	2302      	movs	r3, #2
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c4:	2300      	movs	r3, #0
 80021c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021c8:	230b      	movs	r3, #11
 80021ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 80021cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d0:	4619      	mov	r1, r3
 80021d2:	484e      	ldr	r0, [pc, #312]	; (800230c <MX_GPIO_Init+0x318>)
 80021d4:	f002 fce4 	bl	8004ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80021d8:	f248 03ff 	movw	r3, #33023	; 0x80ff
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021de:	2303      	movs	r3, #3
 80021e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ea:	4619      	mov	r1, r3
 80021ec:	4848      	ldr	r0, [pc, #288]	; (8002310 <MX_GPIO_Init+0x31c>)
 80021ee:	f002 fcd7 	bl	8004ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB15 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80021f2:	f649 4377 	movw	r3, #40055	; 0x9c77
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021f8:	2303      	movs	r3, #3
 80021fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002204:	4619      	mov	r1, r3
 8002206:	483e      	ldr	r0, [pc, #248]	; (8002300 <MX_GPIO_Init+0x30c>)
 8002208:	f002 fcca 	bl	8004ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG8 PG9
                           PG10 PG12 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800220c:	f24d 733f 	movw	r3, #55103	; 0xd73f
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002212:	2303      	movs	r3, #3
 8002214:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800221a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800221e:	4619      	mov	r1, r3
 8002220:	4838      	ldr	r0, [pc, #224]	; (8002304 <MX_GPIO_Init+0x310>)
 8002222:	f002 fcbd 	bl	8004ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002226:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002234:	2300      	movs	r3, #0
 8002236:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002238:	230b      	movs	r3, #11
 800223a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800223c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002240:	4619      	mov	r1, r3
 8002242:	482f      	ldr	r0, [pc, #188]	; (8002300 <MX_GPIO_Init+0x30c>)
 8002244:	f002 fcac 	bl	8004ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002248:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224e:	2301      	movs	r3, #1
 8002250:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002256:	2300      	movs	r3, #0
 8002258:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225e:	4619      	mov	r1, r3
 8002260:	4827      	ldr	r0, [pc, #156]	; (8002300 <MX_GPIO_Init+0x30c>)
 8002262:	f002 fc9d 	bl	8004ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15
 8002266:	f64c 43ff 	movw	r3, #52479	; 0xccff
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800226c:	2303      	movs	r3, #3
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002278:	4619      	mov	r1, r3
 800227a:	4826      	ldr	r0, [pc, #152]	; (8002314 <MX_GPIO_Init+0x320>)
 800227c:	f002 fc90 	bl	8004ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002280:	2340      	movs	r3, #64	; 0x40
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002284:	2301      	movs	r3, #1
 8002286:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228c:	2300      	movs	r3, #0
 800228e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002294:	4619      	mov	r1, r3
 8002296:	481b      	ldr	r0, [pc, #108]	; (8002304 <MX_GPIO_Init+0x310>)
 8002298:	f002 fc82 	bl	8004ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a0:	2300      	movs	r3, #0
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80022a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ac:	4619      	mov	r1, r3
 80022ae:	4815      	ldr	r0, [pc, #84]	; (8002304 <MX_GPIO_Init+0x310>)
 80022b0:	f002 fc76 	bl	8004ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80022b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ba:	2302      	movs	r3, #2
 80022bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c2:	2300      	movs	r3, #0
 80022c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022c6:	230b      	movs	r3, #11
 80022c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ce:	4619      	mov	r1, r3
 80022d0:	480c      	ldr	r0, [pc, #48]	; (8002304 <MX_GPIO_Init+0x310>)
 80022d2:	f002 fc65 	bl	8004ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EEPROM_BUTTON_Pin */
  GPIO_InitStruct.Pin = EEPROM_BUTTON_Pin;
 80022d6:	2301      	movs	r3, #1
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EEPROM_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80022e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e8:	4619      	mov	r1, r3
 80022ea:	4807      	ldr	r0, [pc, #28]	; (8002308 <MX_GPIO_Init+0x314>)
 80022ec:	f002 fc58 	bl	8004ba0 <HAL_GPIO_Init>

}
 80022f0:	bf00      	nop
 80022f2:	3738      	adds	r7, #56	; 0x38
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	58024400 	.word	0x58024400
 80022fc:	58021400 	.word	0x58021400
 8002300:	58020400 	.word	0x58020400
 8002304:	58021800 	.word	0x58021800
 8002308:	58021000 	.word	0x58021000
 800230c:	58020800 	.word	0x58020800
 8002310:	58020000 	.word	0x58020000
 8002314:	58020c00 	.word	0x58020c00

08002318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    char buffer[20];

    ssd1306_Fill(Black);
 800231e:	2000      	movs	r0, #0
 8002320:	f000 f8bc 	bl	800249c <ssd1306_Fill>

    sprintf(buffer, "gGMTXMMMMMMMMMMMM\n");
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	4909      	ldr	r1, [pc, #36]	; (800234c <Error_Handler+0x34>)
 8002328:	4618      	mov	r0, r3
 800232a:	f009 feeb 	bl	800c104 <siprintf>
    ssd1306_SetCursor(0,0); // Adjust these values according to where you want the text to start
 800232e:	2100      	movs	r1, #0
 8002330:	2000      	movs	r0, #0
 8002332:	f000 fa01 	bl	8002738 <ssd1306_SetCursor>
    ssd1306_WriteString(buffer, Font_7x10, White); // Replace with your font and color choice
 8002336:	4a06      	ldr	r2, [pc, #24]	; (8002350 <Error_Handler+0x38>)
 8002338:	1d38      	adds	r0, r7, #4
 800233a:	2301      	movs	r3, #1
 800233c:	ca06      	ldmia	r2, {r1, r2}
 800233e:	f000 f9d5 	bl	80026ec <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8002342:	f000 f8cf 	bl	80024e4 <ssd1306_UpdateScreen>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002346:	b672      	cpsid	i
}
 8002348:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800234a:	e7fe      	b.n	800234a <Error_Handler+0x32>
 800234c:	0800cb34 	.word	0x0800cb34
 8002350:	2400000c 	.word	0x2400000c

08002354 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af04      	add	r7, sp, #16
 800236a:	4603      	mov	r3, r0
 800236c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800236e:	f04f 33ff 	mov.w	r3, #4294967295
 8002372:	9302      	str	r3, [sp, #8]
 8002374:	2301      	movs	r3, #1
 8002376:	9301      	str	r3, [sp, #4]
 8002378:	1dfb      	adds	r3, r7, #7
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	2301      	movs	r3, #1
 800237e:	2200      	movs	r2, #0
 8002380:	2178      	movs	r1, #120	; 0x78
 8002382:	4803      	ldr	r0, [pc, #12]	; (8002390 <ssd1306_WriteCommand+0x2c>)
 8002384:	f002 fe7e 	bl	8005084 <HAL_I2C_Mem_Write>
}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	24000708 	.word	0x24000708

08002394 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af04      	add	r7, sp, #16
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	f04f 32ff 	mov.w	r2, #4294967295
 80023a6:	9202      	str	r2, [sp, #8]
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	2301      	movs	r3, #1
 80023b0:	2240      	movs	r2, #64	; 0x40
 80023b2:	2178      	movs	r1, #120	; 0x78
 80023b4:	4803      	ldr	r0, [pc, #12]	; (80023c4 <ssd1306_WriteData+0x30>)
 80023b6:	f002 fe65 	bl	8005084 <HAL_I2C_Mem_Write>
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	24000708 	.word	0x24000708

080023c8 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80023cc:	f7ff ffc2 	bl	8002354 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80023d0:	2064      	movs	r0, #100	; 0x64
 80023d2:	f000 febd 	bl	8003150 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80023d6:	2000      	movs	r0, #0
 80023d8:	f000 fa0c 	bl	80027f4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80023dc:	2020      	movs	r0, #32
 80023de:	f7ff ffc1 	bl	8002364 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80023e2:	2000      	movs	r0, #0
 80023e4:	f7ff ffbe 	bl	8002364 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80023e8:	20b0      	movs	r0, #176	; 0xb0
 80023ea:	f7ff ffbb 	bl	8002364 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80023ee:	20c8      	movs	r0, #200	; 0xc8
 80023f0:	f7ff ffb8 	bl	8002364 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80023f4:	2000      	movs	r0, #0
 80023f6:	f7ff ffb5 	bl	8002364 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80023fa:	2010      	movs	r0, #16
 80023fc:	f7ff ffb2 	bl	8002364 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002400:	2040      	movs	r0, #64	; 0x40
 8002402:	f7ff ffaf 	bl	8002364 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002406:	20ff      	movs	r0, #255	; 0xff
 8002408:	f000 f9e1 	bl	80027ce <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800240c:	20a1      	movs	r0, #161	; 0xa1
 800240e:	f7ff ffa9 	bl	8002364 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002412:	20a6      	movs	r0, #166	; 0xa6
 8002414:	f7ff ffa6 	bl	8002364 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002418:	20a8      	movs	r0, #168	; 0xa8
 800241a:	f7ff ffa3 	bl	8002364 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800241e:	203f      	movs	r0, #63	; 0x3f
 8002420:	f7ff ffa0 	bl	8002364 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002424:	20a4      	movs	r0, #164	; 0xa4
 8002426:	f7ff ff9d 	bl	8002364 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800242a:	20d3      	movs	r0, #211	; 0xd3
 800242c:	f7ff ff9a 	bl	8002364 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002430:	2000      	movs	r0, #0
 8002432:	f7ff ff97 	bl	8002364 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002436:	20d5      	movs	r0, #213	; 0xd5
 8002438:	f7ff ff94 	bl	8002364 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800243c:	20f0      	movs	r0, #240	; 0xf0
 800243e:	f7ff ff91 	bl	8002364 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002442:	20d9      	movs	r0, #217	; 0xd9
 8002444:	f7ff ff8e 	bl	8002364 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002448:	2022      	movs	r0, #34	; 0x22
 800244a:	f7ff ff8b 	bl	8002364 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800244e:	20da      	movs	r0, #218	; 0xda
 8002450:	f7ff ff88 	bl	8002364 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002454:	2012      	movs	r0, #18
 8002456:	f7ff ff85 	bl	8002364 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800245a:	20db      	movs	r0, #219	; 0xdb
 800245c:	f7ff ff82 	bl	8002364 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002460:	2020      	movs	r0, #32
 8002462:	f7ff ff7f 	bl	8002364 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002466:	208d      	movs	r0, #141	; 0x8d
 8002468:	f7ff ff7c 	bl	8002364 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800246c:	2014      	movs	r0, #20
 800246e:	f7ff ff79 	bl	8002364 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002472:	2001      	movs	r0, #1
 8002474:	f000 f9be 	bl	80027f4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002478:	2000      	movs	r0, #0
 800247a:	f000 f80f 	bl	800249c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800247e:	f000 f831 	bl	80024e4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002482:	4b05      	ldr	r3, [pc, #20]	; (8002498 <ssd1306_Init+0xd0>)
 8002484:	2200      	movs	r2, #0
 8002486:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <ssd1306_Init+0xd0>)
 800248a:	2200      	movs	r2, #0
 800248c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800248e:	4b02      	ldr	r3, [pc, #8]	; (8002498 <ssd1306_Init+0xd0>)
 8002490:	2201      	movs	r2, #1
 8002492:	711a      	strb	r2, [r3, #4]
}
 8002494:	bf00      	nop
 8002496:	bd80      	pop	{r7, pc}
 8002498:	240004e8 	.word	0x240004e8

0800249c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	e00d      	b.n	80024c8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <ssd1306_Fill+0x1a>
 80024b2:	2100      	movs	r1, #0
 80024b4:	e000      	b.n	80024b8 <ssd1306_Fill+0x1c>
 80024b6:	21ff      	movs	r1, #255	; 0xff
 80024b8:	4a09      	ldr	r2, [pc, #36]	; (80024e0 <ssd1306_Fill+0x44>)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4413      	add	r3, r2
 80024be:	460a      	mov	r2, r1
 80024c0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	3301      	adds	r3, #1
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ce:	d3ed      	bcc.n	80024ac <ssd1306_Fill+0x10>
    }
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	240000e8 	.word	0x240000e8

080024e4 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80024ea:	2300      	movs	r3, #0
 80024ec:	71fb      	strb	r3, [r7, #7]
 80024ee:	e016      	b.n	800251e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	3b50      	subs	r3, #80	; 0x50
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff ff34 	bl	8002364 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80024fc:	2000      	movs	r0, #0
 80024fe:	f7ff ff31 	bl	8002364 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002502:	2010      	movs	r0, #16
 8002504:	f7ff ff2e 	bl	8002364 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	01db      	lsls	r3, r3, #7
 800250c:	4a08      	ldr	r2, [pc, #32]	; (8002530 <ssd1306_UpdateScreen+0x4c>)
 800250e:	4413      	add	r3, r2
 8002510:	2180      	movs	r1, #128	; 0x80
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff ff3e 	bl	8002394 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	3301      	adds	r3, #1
 800251c:	71fb      	strb	r3, [r7, #7]
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	2b07      	cmp	r3, #7
 8002522:	d9e5      	bls.n	80024f0 <ssd1306_UpdateScreen+0xc>
    }
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	240000e8 	.word	0x240000e8

08002534 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	71fb      	strb	r3, [r7, #7]
 800253e:	460b      	mov	r3, r1
 8002540:	71bb      	strb	r3, [r7, #6]
 8002542:	4613      	mov	r3, r2
 8002544:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	2b00      	cmp	r3, #0
 800254c:	db3d      	blt.n	80025ca <ssd1306_DrawPixel+0x96>
 800254e:	79bb      	ldrb	r3, [r7, #6]
 8002550:	2b3f      	cmp	r3, #63	; 0x3f
 8002552:	d83a      	bhi.n	80025ca <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002554:	797b      	ldrb	r3, [r7, #5]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d11a      	bne.n	8002590 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800255a:	79fa      	ldrb	r2, [r7, #7]
 800255c:	79bb      	ldrb	r3, [r7, #6]
 800255e:	08db      	lsrs	r3, r3, #3
 8002560:	b2d8      	uxtb	r0, r3
 8002562:	4603      	mov	r3, r0
 8002564:	01db      	lsls	r3, r3, #7
 8002566:	4413      	add	r3, r2
 8002568:	4a1b      	ldr	r2, [pc, #108]	; (80025d8 <ssd1306_DrawPixel+0xa4>)
 800256a:	5cd3      	ldrb	r3, [r2, r3]
 800256c:	b25a      	sxtb	r2, r3
 800256e:	79bb      	ldrb	r3, [r7, #6]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	2101      	movs	r1, #1
 8002576:	fa01 f303 	lsl.w	r3, r1, r3
 800257a:	b25b      	sxtb	r3, r3
 800257c:	4313      	orrs	r3, r2
 800257e:	b259      	sxtb	r1, r3
 8002580:	79fa      	ldrb	r2, [r7, #7]
 8002582:	4603      	mov	r3, r0
 8002584:	01db      	lsls	r3, r3, #7
 8002586:	4413      	add	r3, r2
 8002588:	b2c9      	uxtb	r1, r1
 800258a:	4a13      	ldr	r2, [pc, #76]	; (80025d8 <ssd1306_DrawPixel+0xa4>)
 800258c:	54d1      	strb	r1, [r2, r3]
 800258e:	e01d      	b.n	80025cc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002590:	79fa      	ldrb	r2, [r7, #7]
 8002592:	79bb      	ldrb	r3, [r7, #6]
 8002594:	08db      	lsrs	r3, r3, #3
 8002596:	b2d8      	uxtb	r0, r3
 8002598:	4603      	mov	r3, r0
 800259a:	01db      	lsls	r3, r3, #7
 800259c:	4413      	add	r3, r2
 800259e:	4a0e      	ldr	r2, [pc, #56]	; (80025d8 <ssd1306_DrawPixel+0xa4>)
 80025a0:	5cd3      	ldrb	r3, [r2, r3]
 80025a2:	b25a      	sxtb	r2, r3
 80025a4:	79bb      	ldrb	r3, [r7, #6]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	2101      	movs	r1, #1
 80025ac:	fa01 f303 	lsl.w	r3, r1, r3
 80025b0:	b25b      	sxtb	r3, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	b25b      	sxtb	r3, r3
 80025b6:	4013      	ands	r3, r2
 80025b8:	b259      	sxtb	r1, r3
 80025ba:	79fa      	ldrb	r2, [r7, #7]
 80025bc:	4603      	mov	r3, r0
 80025be:	01db      	lsls	r3, r3, #7
 80025c0:	4413      	add	r3, r2
 80025c2:	b2c9      	uxtb	r1, r1
 80025c4:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <ssd1306_DrawPixel+0xa4>)
 80025c6:	54d1      	strb	r1, [r2, r3]
 80025c8:	e000      	b.n	80025cc <ssd1306_DrawPixel+0x98>
        return;
 80025ca:	bf00      	nop
    }
}
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	240000e8 	.word	0x240000e8

080025dc <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80025dc:	b590      	push	{r4, r7, lr}
 80025de:	b089      	sub	sp, #36	; 0x24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4604      	mov	r4, r0
 80025e4:	1d38      	adds	r0, r7, #4
 80025e6:	e880 0006 	stmia.w	r0, {r1, r2}
 80025ea:	461a      	mov	r2, r3
 80025ec:	4623      	mov	r3, r4
 80025ee:	73fb      	strb	r3, [r7, #15]
 80025f0:	4613      	mov	r3, r2
 80025f2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	2b1f      	cmp	r3, #31
 80025f8:	d902      	bls.n	8002600 <ssd1306_WriteChar+0x24>
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
 80025fc:	2b7e      	cmp	r3, #126	; 0x7e
 80025fe:	d901      	bls.n	8002604 <ssd1306_WriteChar+0x28>
        return 0;
 8002600:	2300      	movs	r3, #0
 8002602:	e06d      	b.n	80026e0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002604:	4b38      	ldr	r3, [pc, #224]	; (80026e8 <ssd1306_WriteChar+0x10c>)
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	461a      	mov	r2, r3
 800260a:	793b      	ldrb	r3, [r7, #4]
 800260c:	4413      	add	r3, r2
 800260e:	2b80      	cmp	r3, #128	; 0x80
 8002610:	dc06      	bgt.n	8002620 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002612:	4b35      	ldr	r3, [pc, #212]	; (80026e8 <ssd1306_WriteChar+0x10c>)
 8002614:	885b      	ldrh	r3, [r3, #2]
 8002616:	461a      	mov	r2, r3
 8002618:	797b      	ldrb	r3, [r7, #5]
 800261a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800261c:	2b40      	cmp	r3, #64	; 0x40
 800261e:	dd01      	ble.n	8002624 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002620:	2300      	movs	r3, #0
 8002622:	e05d      	b.n	80026e0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002624:	2300      	movs	r3, #0
 8002626:	61fb      	str	r3, [r7, #28]
 8002628:	e04c      	b.n	80026c4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	3b20      	subs	r3, #32
 8002630:	7979      	ldrb	r1, [r7, #5]
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4619      	mov	r1, r3
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	440b      	add	r3, r1
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002644:	2300      	movs	r3, #0
 8002646:	61bb      	str	r3, [r7, #24]
 8002648:	e034      	b.n	80026b4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d012      	beq.n	8002680 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800265a:	4b23      	ldr	r3, [pc, #140]	; (80026e8 <ssd1306_WriteChar+0x10c>)
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	b2da      	uxtb	r2, r3
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	4413      	add	r3, r2
 8002666:	b2d8      	uxtb	r0, r3
 8002668:	4b1f      	ldr	r3, [pc, #124]	; (80026e8 <ssd1306_WriteChar+0x10c>)
 800266a:	885b      	ldrh	r3, [r3, #2]
 800266c:	b2da      	uxtb	r2, r3
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	4413      	add	r3, r2
 8002674:	b2db      	uxtb	r3, r3
 8002676:	7bba      	ldrb	r2, [r7, #14]
 8002678:	4619      	mov	r1, r3
 800267a:	f7ff ff5b 	bl	8002534 <ssd1306_DrawPixel>
 800267e:	e016      	b.n	80026ae <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002680:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <ssd1306_WriteChar+0x10c>)
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	b2da      	uxtb	r2, r3
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	b2db      	uxtb	r3, r3
 800268a:	4413      	add	r3, r2
 800268c:	b2d8      	uxtb	r0, r3
 800268e:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <ssd1306_WriteChar+0x10c>)
 8002690:	885b      	ldrh	r3, [r3, #2]
 8002692:	b2da      	uxtb	r2, r3
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	b2db      	uxtb	r3, r3
 8002698:	4413      	add	r3, r2
 800269a:	b2d9      	uxtb	r1, r3
 800269c:	7bbb      	ldrb	r3, [r7, #14]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	bf0c      	ite	eq
 80026a2:	2301      	moveq	r3, #1
 80026a4:	2300      	movne	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	461a      	mov	r2, r3
 80026aa:	f7ff ff43 	bl	8002534 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	3301      	adds	r3, #1
 80026b2:	61bb      	str	r3, [r7, #24]
 80026b4:	793b      	ldrb	r3, [r7, #4]
 80026b6:	461a      	mov	r2, r3
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d3c5      	bcc.n	800264a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	3301      	adds	r3, #1
 80026c2:	61fb      	str	r3, [r7, #28]
 80026c4:	797b      	ldrb	r3, [r7, #5]
 80026c6:	461a      	mov	r2, r3
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d3ad      	bcc.n	800262a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <ssd1306_WriteChar+0x10c>)
 80026d0:	881a      	ldrh	r2, [r3, #0]
 80026d2:	793b      	ldrb	r3, [r7, #4]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	4413      	add	r3, r2
 80026d8:	b29a      	uxth	r2, r3
 80026da:	4b03      	ldr	r3, [pc, #12]	; (80026e8 <ssd1306_WriteChar+0x10c>)
 80026dc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80026de:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3724      	adds	r7, #36	; 0x24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd90      	pop	{r4, r7, pc}
 80026e8:	240004e8 	.word	0x240004e8

080026ec <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	1d38      	adds	r0, r7, #4
 80026f6:	e880 0006 	stmia.w	r0, {r1, r2}
 80026fa:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80026fc:	e012      	b.n	8002724 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	7818      	ldrb	r0, [r3, #0]
 8002702:	78fb      	ldrb	r3, [r7, #3]
 8002704:	1d3a      	adds	r2, r7, #4
 8002706:	ca06      	ldmia	r2, {r1, r2}
 8002708:	f7ff ff68 	bl	80025dc <ssd1306_WriteChar>
 800270c:	4603      	mov	r3, r0
 800270e:	461a      	mov	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d002      	beq.n	800271e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	e008      	b.n	8002730 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	3301      	adds	r3, #1
 8002722:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1e8      	bne.n	80026fe <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	781b      	ldrb	r3, [r3, #0]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	460a      	mov	r2, r1
 8002742:	71fb      	strb	r3, [r7, #7]
 8002744:	4613      	mov	r3, r2
 8002746:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	b29a      	uxth	r2, r3
 800274c:	4b05      	ldr	r3, [pc, #20]	; (8002764 <ssd1306_SetCursor+0x2c>)
 800274e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002750:	79bb      	ldrb	r3, [r7, #6]
 8002752:	b29a      	uxth	r2, r3
 8002754:	4b03      	ldr	r3, [pc, #12]	; (8002764 <ssd1306_SetCursor+0x2c>)
 8002756:	805a      	strh	r2, [r3, #2]
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	240004e8 	.word	0x240004e8

08002768 <ssd1306_DrawFilledRectangle>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_DrawFilledRectangle(uint8_t x, uint8_t y, uint8_t width, uint8_t height, SSD1306_COLOR color) {
 8002768:	b590      	push	{r4, r7, lr}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	4604      	mov	r4, r0
 8002770:	4608      	mov	r0, r1
 8002772:	4611      	mov	r1, r2
 8002774:	461a      	mov	r2, r3
 8002776:	4623      	mov	r3, r4
 8002778:	71fb      	strb	r3, [r7, #7]
 800277a:	4603      	mov	r3, r0
 800277c:	71bb      	strb	r3, [r7, #6]
 800277e:	460b      	mov	r3, r1
 8002780:	717b      	strb	r3, [r7, #5]
 8002782:	4613      	mov	r3, r2
 8002784:	713b      	strb	r3, [r7, #4]
    uint8_t i, j;
    for (i = x; i < x + width; i++) {
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	73fb      	strb	r3, [r7, #15]
 800278a:	e015      	b.n	80027b8 <ssd1306_DrawFilledRectangle+0x50>
        for (j = y; j < y + height; j++) {
 800278c:	79bb      	ldrb	r3, [r7, #6]
 800278e:	73bb      	strb	r3, [r7, #14]
 8002790:	e009      	b.n	80027a6 <ssd1306_DrawFilledRectangle+0x3e>
            ssd1306_DrawPixel(i, j, color);
 8002792:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002796:	7bb9      	ldrb	r1, [r7, #14]
 8002798:	7bfb      	ldrb	r3, [r7, #15]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff feca 	bl	8002534 <ssd1306_DrawPixel>
        for (j = y; j < y + height; j++) {
 80027a0:	7bbb      	ldrb	r3, [r7, #14]
 80027a2:	3301      	adds	r3, #1
 80027a4:	73bb      	strb	r3, [r7, #14]
 80027a6:	7bba      	ldrb	r2, [r7, #14]
 80027a8:	79b9      	ldrb	r1, [r7, #6]
 80027aa:	793b      	ldrb	r3, [r7, #4]
 80027ac:	440b      	add	r3, r1
 80027ae:	429a      	cmp	r2, r3
 80027b0:	dbef      	blt.n	8002792 <ssd1306_DrawFilledRectangle+0x2a>
    for (i = x; i < x + width; i++) {
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
 80027b4:	3301      	adds	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
 80027b8:	7bfa      	ldrb	r2, [r7, #15]
 80027ba:	79f9      	ldrb	r1, [r7, #7]
 80027bc:	797b      	ldrb	r3, [r7, #5]
 80027be:	440b      	add	r3, r1
 80027c0:	429a      	cmp	r2, r3
 80027c2:	dbe3      	blt.n	800278c <ssd1306_DrawFilledRectangle+0x24>
        }
    }
}
 80027c4:	bf00      	nop
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd90      	pop	{r4, r7, pc}

080027ce <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	4603      	mov	r3, r0
 80027d6:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80027d8:	2381      	movs	r3, #129	; 0x81
 80027da:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fdc0 	bl	8002364 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fdbc 	bl	8002364 <ssd1306_WriteCommand>
}
 80027ec:	bf00      	nop
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d005      	beq.n	8002810 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002804:	23af      	movs	r3, #175	; 0xaf
 8002806:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002808:	4b08      	ldr	r3, [pc, #32]	; (800282c <ssd1306_SetDisplayOn+0x38>)
 800280a:	2201      	movs	r2, #1
 800280c:	715a      	strb	r2, [r3, #5]
 800280e:	e004      	b.n	800281a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002810:	23ae      	movs	r3, #174	; 0xae
 8002812:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <ssd1306_SetDisplayOn+0x38>)
 8002816:	2200      	movs	r2, #0
 8002818:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800281a:	7bfb      	ldrb	r3, [r7, #15]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff fda1 	bl	8002364 <ssd1306_WriteCommand>
}
 8002822:	bf00      	nop
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	240004e8 	.word	0x240004e8

08002830 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002836:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <HAL_MspInit+0x30>)
 8002838:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800283c:	4a08      	ldr	r2, [pc, #32]	; (8002860 <HAL_MspInit+0x30>)
 800283e:	f043 0302 	orr.w	r3, r3, #2
 8002842:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002846:	4b06      	ldr	r3, [pc, #24]	; (8002860 <HAL_MspInit+0x30>)
 8002848:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	607b      	str	r3, [r7, #4]
 8002852:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	58024400 	.word	0x58024400

08002864 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b0ba      	sub	sp, #232	; 0xe8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800287c:	f107 0318 	add.w	r3, r7, #24
 8002880:	22bc      	movs	r2, #188	; 0xbc
 8002882:	2100      	movs	r1, #0
 8002884:	4618      	mov	r0, r3
 8002886:	f009 fc35 	bl	800c0f4 <memset>
  if(hadc->Instance==ADC3)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a30      	ldr	r2, [pc, #192]	; (8002950 <HAL_ADC_MspInit+0xec>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d159      	bne.n	8002948 <HAL_ADC_MspInit+0xe4>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002894:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002898:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 800289a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800289e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028a2:	f107 0318 	add.w	r3, r7, #24
 80028a6:	4618      	mov	r0, r3
 80028a8:	f004 faa2 	bl	8006df0 <HAL_RCCEx_PeriphCLKConfig>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80028b2:	f7ff fd31 	bl	8002318 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80028b6:	4b27      	ldr	r3, [pc, #156]	; (8002954 <HAL_ADC_MspInit+0xf0>)
 80028b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028bc:	4a25      	ldr	r2, [pc, #148]	; (8002954 <HAL_ADC_MspInit+0xf0>)
 80028be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028c6:	4b23      	ldr	r3, [pc, #140]	; (8002954 <HAL_ADC_MspInit+0xf0>)
 80028c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028d4:	4b1f      	ldr	r3, [pc, #124]	; (8002954 <HAL_ADC_MspInit+0xf0>)
 80028d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028da:	4a1e      	ldr	r2, [pc, #120]	; (8002954 <HAL_ADC_MspInit+0xf0>)
 80028dc:	f043 0320 	orr.w	r3, r3, #32
 80028e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028e4:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <HAL_ADC_MspInit+0xf0>)
 80028e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028ea:	f003 0320 	and.w	r3, r3, #32
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028f2:	4b18      	ldr	r3, [pc, #96]	; (8002954 <HAL_ADC_MspInit+0xf0>)
 80028f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028f8:	4a16      	ldr	r2, [pc, #88]	; (8002954 <HAL_ADC_MspInit+0xf0>)
 80028fa:	f043 0304 	orr.w	r3, r3, #4
 80028fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002902:	4b14      	ldr	r3, [pc, #80]	; (8002954 <HAL_ADC_MspInit+0xf0>)
 8002904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	68fb      	ldr	r3, [r7, #12]
    PF8     ------> ADC3_INP7
    PF10     ------> ADC3_INP6
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_10;
 8002910:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8002914:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002918:	2303      	movs	r3, #3
 800291a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	2300      	movs	r3, #0
 8002920:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002924:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002928:	4619      	mov	r1, r3
 800292a:	480b      	ldr	r0, [pc, #44]	; (8002958 <HAL_ADC_MspInit+0xf4>)
 800292c:	f002 f938 	bl	8004ba0 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002930:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002934:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002938:	f000 fc3a 	bl	80031b0 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800293c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002940:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002944:	f000 fc34 	bl	80031b0 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002948:	bf00      	nop
 800294a:	37e8      	adds	r7, #232	; 0xe8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	58026000 	.word	0x58026000
 8002954:	58024400 	.word	0x58024400
 8002958:	58021400 	.word	0x58021400

0800295c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b0b8      	sub	sp, #224	; 0xe0
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002964:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002974:	f107 0310 	add.w	r3, r7, #16
 8002978:	22bc      	movs	r2, #188	; 0xbc
 800297a:	2100      	movs	r1, #0
 800297c:	4618      	mov	r0, r3
 800297e:	f009 fbb9 	bl	800c0f4 <memset>
  if(hi2c->Instance==I2C1)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a25      	ldr	r2, [pc, #148]	; (8002a1c <HAL_I2C_MspInit+0xc0>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d143      	bne.n	8002a14 <HAL_I2C_MspInit+0xb8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800298c:	2308      	movs	r3, #8
 800298e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_HSI;
 8002990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002994:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002998:	f107 0310 	add.w	r3, r7, #16
 800299c:	4618      	mov	r0, r3
 800299e:	f004 fa27 	bl	8006df0 <HAL_RCCEx_PeriphCLKConfig>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80029a8:	f7ff fcb6 	bl	8002318 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ac:	4b1c      	ldr	r3, [pc, #112]	; (8002a20 <HAL_I2C_MspInit+0xc4>)
 80029ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029b2:	4a1b      	ldr	r2, [pc, #108]	; (8002a20 <HAL_I2C_MspInit+0xc4>)
 80029b4:	f043 0302 	orr.w	r3, r3, #2
 80029b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029bc:	4b18      	ldr	r3, [pc, #96]	; (8002a20 <HAL_I2C_MspInit+0xc4>)
 80029be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029d2:	2312      	movs	r3, #18
 80029d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029d8:	2301      	movs	r3, #1
 80029da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029de:	2302      	movs	r3, #2
 80029e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029e4:	2304      	movs	r3, #4
 80029e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029ee:	4619      	mov	r1, r3
 80029f0:	480c      	ldr	r0, [pc, #48]	; (8002a24 <HAL_I2C_MspInit+0xc8>)
 80029f2:	f002 f8d5 	bl	8004ba0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029f6:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <HAL_I2C_MspInit+0xc4>)
 80029f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029fc:	4a08      	ldr	r2, [pc, #32]	; (8002a20 <HAL_I2C_MspInit+0xc4>)
 80029fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a06:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <HAL_I2C_MspInit+0xc4>)
 8002a08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a14:	bf00      	nop
 8002a16:	37e0      	adds	r7, #224	; 0xe0
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40005400 	.word	0x40005400
 8002a20:	58024400 	.word	0x58024400
 8002a24:	58020400 	.word	0x58020400

08002a28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a32      	ldr	r2, [pc, #200]	; (8002b00 <HAL_TIM_Base_MspInit+0xd8>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d10f      	bne.n	8002a5a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a3a:	4b32      	ldr	r3, [pc, #200]	; (8002b04 <HAL_TIM_Base_MspInit+0xdc>)
 8002a3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a40:	4a30      	ldr	r2, [pc, #192]	; (8002b04 <HAL_TIM_Base_MspInit+0xdc>)
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002a4a:	4b2e      	ldr	r3, [pc, #184]	; (8002b04 <HAL_TIM_Base_MspInit+0xdc>)
 8002a4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002a58:	e04d      	b.n	8002af6 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM3)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a2a      	ldr	r2, [pc, #168]	; (8002b08 <HAL_TIM_Base_MspInit+0xe0>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d117      	bne.n	8002a94 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a64:	4b27      	ldr	r3, [pc, #156]	; (8002b04 <HAL_TIM_Base_MspInit+0xdc>)
 8002a66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a6a:	4a26      	ldr	r2, [pc, #152]	; (8002b04 <HAL_TIM_Base_MspInit+0xdc>)
 8002a6c:	f043 0302 	orr.w	r3, r3, #2
 8002a70:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a74:	4b23      	ldr	r3, [pc, #140]	; (8002b04 <HAL_TIM_Base_MspInit+0xdc>)
 8002a76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a82:	2200      	movs	r2, #0
 8002a84:	2100      	movs	r1, #0
 8002a86:	201d      	movs	r0, #29
 8002a88:	f002 f855 	bl	8004b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a8c:	201d      	movs	r0, #29
 8002a8e:	f002 f86c 	bl	8004b6a <HAL_NVIC_EnableIRQ>
}
 8002a92:	e030      	b.n	8002af6 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM5)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a1c      	ldr	r2, [pc, #112]	; (8002b0c <HAL_TIM_Base_MspInit+0xe4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d117      	bne.n	8002ace <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a9e:	4b19      	ldr	r3, [pc, #100]	; (8002b04 <HAL_TIM_Base_MspInit+0xdc>)
 8002aa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002aa4:	4a17      	ldr	r2, [pc, #92]	; (8002b04 <HAL_TIM_Base_MspInit+0xdc>)
 8002aa6:	f043 0308 	orr.w	r3, r3, #8
 8002aaa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002aae:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <HAL_TIM_Base_MspInit+0xdc>)
 8002ab0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002abc:	2200      	movs	r2, #0
 8002abe:	2100      	movs	r1, #0
 8002ac0:	2032      	movs	r0, #50	; 0x32
 8002ac2:	f002 f838 	bl	8004b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002ac6:	2032      	movs	r0, #50	; 0x32
 8002ac8:	f002 f84f 	bl	8004b6a <HAL_NVIC_EnableIRQ>
}
 8002acc:	e013      	b.n	8002af6 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM14)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a0f      	ldr	r2, [pc, #60]	; (8002b10 <HAL_TIM_Base_MspInit+0xe8>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d10e      	bne.n	8002af6 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002ad8:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <HAL_TIM_Base_MspInit+0xdc>)
 8002ada:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ade:	4a09      	ldr	r2, [pc, #36]	; (8002b04 <HAL_TIM_Base_MspInit+0xdc>)
 8002ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_TIM_Base_MspInit+0xdc>)
 8002aea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	68bb      	ldr	r3, [r7, #8]
}
 8002af6:	bf00      	nop
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40010000 	.word	0x40010000
 8002b04:	58024400 	.word	0x58024400
 8002b08:	40000400 	.word	0x40000400
 8002b0c:	40000c00 	.word	0x40000c00
 8002b10:	40002000 	.word	0x40002000

08002b14 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08a      	sub	sp, #40	; 0x28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b1c:	f107 0314 	add.w	r3, r7, #20
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	60da      	str	r2, [r3, #12]
 8002b2a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a1a      	ldr	r2, [pc, #104]	; (8002b9c <HAL_TIM_Encoder_MspInit+0x88>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d12e      	bne.n	8002b94 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b36:	4b1a      	ldr	r3, [pc, #104]	; (8002ba0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002b38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b3c:	4a18      	ldr	r2, [pc, #96]	; (8002ba0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002b3e:	f043 0304 	orr.w	r3, r3, #4
 8002b42:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b46:	4b16      	ldr	r3, [pc, #88]	; (8002ba0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002b48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	613b      	str	r3, [r7, #16]
 8002b52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b54:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b5a:	4a11      	ldr	r2, [pc, #68]	; (8002ba0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002b5c:	f043 0308 	orr.w	r3, r3, #8
 8002b60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b64:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002b72:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b80:	2300      	movs	r3, #0
 8002b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b84:	2302      	movs	r3, #2
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b88:	f107 0314 	add.w	r3, r7, #20
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4805      	ldr	r0, [pc, #20]	; (8002ba4 <HAL_TIM_Encoder_MspInit+0x90>)
 8002b90:	f002 f806 	bl	8004ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002b94:	bf00      	nop
 8002b96:	3728      	adds	r7, #40	; 0x28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40000800 	.word	0x40000800
 8002ba0:	58024400 	.word	0x58024400
 8002ba4:	58020c00 	.word	0x58020c00

08002ba8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb0:	f107 030c 	add.w	r3, r7, #12
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	60da      	str	r2, [r3, #12]
 8002bbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM14)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a13      	ldr	r2, [pc, #76]	; (8002c14 <HAL_TIM_MspPostInit+0x6c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d11f      	bne.n	8002c0a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bca:	4b13      	ldr	r3, [pc, #76]	; (8002c18 <HAL_TIM_MspPostInit+0x70>)
 8002bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bd0:	4a11      	ldr	r2, [pc, #68]	; (8002c18 <HAL_TIM_MspPostInit+0x70>)
 8002bd2:	f043 0320 	orr.w	r3, r3, #32
 8002bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bda:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <HAL_TIM_MspPostInit+0x70>)
 8002bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002be0:	f003 0320 	and.w	r3, r3, #32
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PF9     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002bfa:	2309      	movs	r3, #9
 8002bfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bfe:	f107 030c 	add.w	r3, r7, #12
 8002c02:	4619      	mov	r1, r3
 8002c04:	4805      	ldr	r0, [pc, #20]	; (8002c1c <HAL_TIM_MspPostInit+0x74>)
 8002c06:	f001 ffcb 	bl	8004ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002c0a:	bf00      	nop
 8002c0c:	3720      	adds	r7, #32
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40002000 	.word	0x40002000
 8002c18:	58024400 	.word	0x58024400
 8002c1c:	58021400 	.word	0x58021400

08002c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b0b8      	sub	sp, #224	; 0xe0
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c28:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	60da      	str	r2, [r3, #12]
 8002c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c38:	f107 0310 	add.w	r3, r7, #16
 8002c3c:	22bc      	movs	r2, #188	; 0xbc
 8002c3e:	2100      	movs	r1, #0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f009 fa57 	bl	800c0f4 <memset>
  if(huart->Instance==USART3)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a25      	ldr	r2, [pc, #148]	; (8002ce0 <HAL_UART_MspInit+0xc0>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d142      	bne.n	8002cd6 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002c50:	2302      	movs	r3, #2
 8002c52:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002c54:	2300      	movs	r3, #0
 8002c56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c5a:	f107 0310 	add.w	r3, r7, #16
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f004 f8c6 	bl	8006df0 <HAL_RCCEx_PeriphCLKConfig>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002c6a:	f7ff fb55 	bl	8002318 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ce4 <HAL_UART_MspInit+0xc4>)
 8002c70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c74:	4a1b      	ldr	r2, [pc, #108]	; (8002ce4 <HAL_UART_MspInit+0xc4>)
 8002c76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c7e:	4b19      	ldr	r3, [pc, #100]	; (8002ce4 <HAL_UART_MspInit+0xc4>)
 8002c80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c8c:	4b15      	ldr	r3, [pc, #84]	; (8002ce4 <HAL_UART_MspInit+0xc4>)
 8002c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c92:	4a14      	ldr	r2, [pc, #80]	; (8002ce4 <HAL_UART_MspInit+0xc4>)
 8002c94:	f043 0308 	orr.w	r3, r3, #8
 8002c98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c9c:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <HAL_UART_MspInit+0xc4>)
 8002c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	60bb      	str	r3, [r7, #8]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002caa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cc4:	2307      	movs	r3, #7
 8002cc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4805      	ldr	r0, [pc, #20]	; (8002ce8 <HAL_UART_MspInit+0xc8>)
 8002cd2:	f001 ff65 	bl	8004ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002cd6:	bf00      	nop
 8002cd8:	37e0      	adds	r7, #224	; 0xe0
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40004800 	.word	0x40004800
 8002ce4:	58024400 	.word	0x58024400
 8002ce8:	58020c00 	.word	0x58020c00

08002cec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b0b8      	sub	sp, #224	; 0xe0
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	60da      	str	r2, [r3, #12]
 8002d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d04:	f107 0310 	add.w	r3, r7, #16
 8002d08:	22bc      	movs	r2, #188	; 0xbc
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f009 f9f1 	bl	800c0f4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a2f      	ldr	r2, [pc, #188]	; (8002dd4 <HAL_PCD_MspInit+0xe8>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d156      	bne.n	8002dca <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002d1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d20:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002d22:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d2a:	f107 0310 	add.w	r3, r7, #16
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f004 f85e 	bl	8006df0 <HAL_RCCEx_PeriphCLKConfig>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8002d3a:	f7ff faed 	bl	8002318 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002d3e:	f003 f88f 	bl	8005e60 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d42:	4b25      	ldr	r3, [pc, #148]	; (8002dd8 <HAL_PCD_MspInit+0xec>)
 8002d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d48:	4a23      	ldr	r2, [pc, #140]	; (8002dd8 <HAL_PCD_MspInit+0xec>)
 8002d4a:	f043 0301 	orr.w	r3, r3, #1
 8002d4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d52:	4b21      	ldr	r3, [pc, #132]	; (8002dd8 <HAL_PCD_MspInit+0xec>)
 8002d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002d60:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002d64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d74:	2300      	movs	r3, #0
 8002d76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002d7a:	230a      	movs	r3, #10
 8002d7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d84:	4619      	mov	r1, r3
 8002d86:	4815      	ldr	r0, [pc, #84]	; (8002ddc <HAL_PCD_MspInit+0xf0>)
 8002d88:	f001 ff0a 	bl	8004ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d94:	2300      	movs	r3, #0
 8002d96:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002da0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002da4:	4619      	mov	r1, r3
 8002da6:	480d      	ldr	r0, [pc, #52]	; (8002ddc <HAL_PCD_MspInit+0xf0>)
 8002da8:	f001 fefa 	bl	8004ba0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002dac:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <HAL_PCD_MspInit+0xec>)
 8002dae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002db2:	4a09      	ldr	r2, [pc, #36]	; (8002dd8 <HAL_PCD_MspInit+0xec>)
 8002db4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002db8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002dbc:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_PCD_MspInit+0xec>)
 8002dbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002dc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dc6:	60bb      	str	r3, [r7, #8]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002dca:	bf00      	nop
 8002dcc:	37e0      	adds	r7, #224	; 0xe0
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40080000 	.word	0x40080000
 8002dd8:	58024400 	.word	0x58024400
 8002ddc:	58020000 	.word	0x58020000

08002de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002de4:	e7fe      	b.n	8002de4 <NMI_Handler+0x4>

08002de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002de6:	b480      	push	{r7}
 8002de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dea:	e7fe      	b.n	8002dea <HardFault_Handler+0x4>

08002dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002df0:	e7fe      	b.n	8002df0 <MemManage_Handler+0x4>

08002df2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002df2:	b480      	push	{r7}
 8002df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002df6:	e7fe      	b.n	8002df6 <BusFault_Handler+0x4>

08002df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dfc:	e7fe      	b.n	8002dfc <UsageFault_Handler+0x4>

08002dfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e10:	bf00      	nop
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e2c:	f000 f970 	bl	8003110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e30:	bf00      	nop
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e38:	4802      	ldr	r0, [pc, #8]	; (8002e44 <TIM3_IRQHandler+0x10>)
 8002e3a:	f006 fcd3 	bl	80097e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	24001f30 	.word	0x24001f30

08002e48 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002e4c:	4802      	ldr	r0, [pc, #8]	; (8002e58 <TIM5_IRQHandler+0x10>)
 8002e4e:	f006 fcc9 	bl	80097e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	24000b5c 	.word	0x24000b5c

08002e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e64:	4a14      	ldr	r2, [pc, #80]	; (8002eb8 <_sbrk+0x5c>)
 8002e66:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <_sbrk+0x60>)
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e70:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <_sbrk+0x64>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d102      	bne.n	8002e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e78:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <_sbrk+0x64>)
 8002e7a:	4a12      	ldr	r2, [pc, #72]	; (8002ec4 <_sbrk+0x68>)
 8002e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e7e:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <_sbrk+0x64>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4413      	add	r3, r2
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d207      	bcs.n	8002e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e8c:	f009 f8e0 	bl	800c050 <__errno>
 8002e90:	4603      	mov	r3, r0
 8002e92:	220c      	movs	r2, #12
 8002e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e96:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9a:	e009      	b.n	8002eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e9c:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <_sbrk+0x64>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ea2:	4b07      	ldr	r3, [pc, #28]	; (8002ec0 <_sbrk+0x64>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	4a05      	ldr	r2, [pc, #20]	; (8002ec0 <_sbrk+0x64>)
 8002eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eae:	68fb      	ldr	r3, [r7, #12]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	24080000 	.word	0x24080000
 8002ebc:	00000400 	.word	0x00000400
 8002ec0:	240004f0 	.word	0x240004f0
 8002ec4:	24002c10 	.word	0x24002c10

08002ec8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ecc:	4b37      	ldr	r3, [pc, #220]	; (8002fac <SystemInit+0xe4>)
 8002ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed2:	4a36      	ldr	r2, [pc, #216]	; (8002fac <SystemInit+0xe4>)
 8002ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002edc:	4b34      	ldr	r3, [pc, #208]	; (8002fb0 <SystemInit+0xe8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 030f 	and.w	r3, r3, #15
 8002ee4:	2b06      	cmp	r3, #6
 8002ee6:	d807      	bhi.n	8002ef8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002ee8:	4b31      	ldr	r3, [pc, #196]	; (8002fb0 <SystemInit+0xe8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f023 030f 	bic.w	r3, r3, #15
 8002ef0:	4a2f      	ldr	r2, [pc, #188]	; (8002fb0 <SystemInit+0xe8>)
 8002ef2:	f043 0307 	orr.w	r3, r3, #7
 8002ef6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002ef8:	4b2e      	ldr	r3, [pc, #184]	; (8002fb4 <SystemInit+0xec>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a2d      	ldr	r2, [pc, #180]	; (8002fb4 <SystemInit+0xec>)
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002f04:	4b2b      	ldr	r3, [pc, #172]	; (8002fb4 <SystemInit+0xec>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002f0a:	4b2a      	ldr	r3, [pc, #168]	; (8002fb4 <SystemInit+0xec>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	4929      	ldr	r1, [pc, #164]	; (8002fb4 <SystemInit+0xec>)
 8002f10:	4b29      	ldr	r3, [pc, #164]	; (8002fb8 <SystemInit+0xf0>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f16:	4b26      	ldr	r3, [pc, #152]	; (8002fb0 <SystemInit+0xe8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d007      	beq.n	8002f32 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f22:	4b23      	ldr	r3, [pc, #140]	; (8002fb0 <SystemInit+0xe8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f023 030f 	bic.w	r3, r3, #15
 8002f2a:	4a21      	ldr	r2, [pc, #132]	; (8002fb0 <SystemInit+0xe8>)
 8002f2c:	f043 0307 	orr.w	r3, r3, #7
 8002f30:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002f32:	4b20      	ldr	r3, [pc, #128]	; (8002fb4 <SystemInit+0xec>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002f38:	4b1e      	ldr	r3, [pc, #120]	; (8002fb4 <SystemInit+0xec>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002f3e:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <SystemInit+0xec>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002f44:	4b1b      	ldr	r3, [pc, #108]	; (8002fb4 <SystemInit+0xec>)
 8002f46:	4a1d      	ldr	r2, [pc, #116]	; (8002fbc <SystemInit+0xf4>)
 8002f48:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002f4a:	4b1a      	ldr	r3, [pc, #104]	; (8002fb4 <SystemInit+0xec>)
 8002f4c:	4a1c      	ldr	r2, [pc, #112]	; (8002fc0 <SystemInit+0xf8>)
 8002f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002f50:	4b18      	ldr	r3, [pc, #96]	; (8002fb4 <SystemInit+0xec>)
 8002f52:	4a1c      	ldr	r2, [pc, #112]	; (8002fc4 <SystemInit+0xfc>)
 8002f54:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002f56:	4b17      	ldr	r3, [pc, #92]	; (8002fb4 <SystemInit+0xec>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002f5c:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <SystemInit+0xec>)
 8002f5e:	4a19      	ldr	r2, [pc, #100]	; (8002fc4 <SystemInit+0xfc>)
 8002f60:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002f62:	4b14      	ldr	r3, [pc, #80]	; (8002fb4 <SystemInit+0xec>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002f68:	4b12      	ldr	r3, [pc, #72]	; (8002fb4 <SystemInit+0xec>)
 8002f6a:	4a16      	ldr	r2, [pc, #88]	; (8002fc4 <SystemInit+0xfc>)
 8002f6c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002f6e:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <SystemInit+0xec>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f74:	4b0f      	ldr	r3, [pc, #60]	; (8002fb4 <SystemInit+0xec>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a0e      	ldr	r2, [pc, #56]	; (8002fb4 <SystemInit+0xec>)
 8002f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002f80:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <SystemInit+0xec>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002f86:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <SystemInit+0x100>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <SystemInit+0x104>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f92:	d202      	bcs.n	8002f9a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002f94:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <SystemInit+0x108>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002f9a:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <SystemInit+0x10c>)
 8002f9c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002fa0:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002fa2:	bf00      	nop
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	e000ed00 	.word	0xe000ed00
 8002fb0:	52002000 	.word	0x52002000
 8002fb4:	58024400 	.word	0x58024400
 8002fb8:	eaf6ed7f 	.word	0xeaf6ed7f
 8002fbc:	02020200 	.word	0x02020200
 8002fc0:	01ff0000 	.word	0x01ff0000
 8002fc4:	01010280 	.word	0x01010280
 8002fc8:	5c001000 	.word	0x5c001000
 8002fcc:	ffff0000 	.word	0xffff0000
 8002fd0:	51008108 	.word	0x51008108
 8002fd4:	52004000 	.word	0x52004000

08002fd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002fd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003010 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002fdc:	f7ff ff74 	bl	8002ec8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fe0:	480c      	ldr	r0, [pc, #48]	; (8003014 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fe2:	490d      	ldr	r1, [pc, #52]	; (8003018 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fe4:	4a0d      	ldr	r2, [pc, #52]	; (800301c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fe8:	e002      	b.n	8002ff0 <LoopCopyDataInit>

08002fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fee:	3304      	adds	r3, #4

08002ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ff4:	d3f9      	bcc.n	8002fea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ff6:	4a0a      	ldr	r2, [pc, #40]	; (8003020 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ff8:	4c0a      	ldr	r4, [pc, #40]	; (8003024 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ffc:	e001      	b.n	8003002 <LoopFillZerobss>

08002ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003000:	3204      	adds	r2, #4

08003002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003004:	d3fb      	bcc.n	8002ffe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003006:	f009 f829 	bl	800c05c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800300a:	f7fe fa91 	bl	8001530 <main>
  bx  lr
 800300e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003010:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003014:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003018:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 800301c:	0800f9c8 	.word	0x0800f9c8
  ldr r2, =_sbss
 8003020:	24000098 	.word	0x24000098
  ldr r4, =_ebss
 8003024:	24002c0c 	.word	0x24002c0c

08003028 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003028:	e7fe      	b.n	8003028 <ADC3_IRQHandler>
	...

0800302c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003032:	2003      	movs	r0, #3
 8003034:	f001 fd74 	bl	8004b20 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003038:	f003 fd04 	bl	8006a44 <HAL_RCC_GetSysClockFreq>
 800303c:	4602      	mov	r2, r0
 800303e:	4b15      	ldr	r3, [pc, #84]	; (8003094 <HAL_Init+0x68>)
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	4913      	ldr	r1, [pc, #76]	; (8003098 <HAL_Init+0x6c>)
 800304a:	5ccb      	ldrb	r3, [r1, r3]
 800304c:	f003 031f 	and.w	r3, r3, #31
 8003050:	fa22 f303 	lsr.w	r3, r2, r3
 8003054:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003056:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <HAL_Init+0x68>)
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	4a0e      	ldr	r2, [pc, #56]	; (8003098 <HAL_Init+0x6c>)
 8003060:	5cd3      	ldrb	r3, [r2, r3]
 8003062:	f003 031f 	and.w	r3, r3, #31
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	fa22 f303 	lsr.w	r3, r2, r3
 800306c:	4a0b      	ldr	r2, [pc, #44]	; (800309c <HAL_Init+0x70>)
 800306e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003070:	4a0b      	ldr	r2, [pc, #44]	; (80030a0 <HAL_Init+0x74>)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003076:	2000      	movs	r0, #0
 8003078:	f000 f814 	bl	80030a4 <HAL_InitTick>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e002      	b.n	800308c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003086:	f7ff fbd3 	bl	8002830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	58024400 	.word	0x58024400
 8003098:	0800f94c 	.word	0x0800f94c
 800309c:	24000028 	.word	0x24000028
 80030a0:	24000024 	.word	0x24000024

080030a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80030ac:	4b15      	ldr	r3, [pc, #84]	; (8003104 <HAL_InitTick+0x60>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e021      	b.n	80030fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80030b8:	4b13      	ldr	r3, [pc, #76]	; (8003108 <HAL_InitTick+0x64>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	4b11      	ldr	r3, [pc, #68]	; (8003104 <HAL_InitTick+0x60>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	4619      	mov	r1, r3
 80030c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80030ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ce:	4618      	mov	r0, r3
 80030d0:	f001 fd59 	bl	8004b86 <HAL_SYSTICK_Config>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e00e      	b.n	80030fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b0f      	cmp	r3, #15
 80030e2:	d80a      	bhi.n	80030fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030e4:	2200      	movs	r2, #0
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	f04f 30ff 	mov.w	r0, #4294967295
 80030ec:	f001 fd23 	bl	8004b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030f0:	4a06      	ldr	r2, [pc, #24]	; (800310c <HAL_InitTick+0x68>)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	e000      	b.n	80030fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	24000030 	.word	0x24000030
 8003108:	24000024 	.word	0x24000024
 800310c:	2400002c 	.word	0x2400002c

08003110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003114:	4b06      	ldr	r3, [pc, #24]	; (8003130 <HAL_IncTick+0x20>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	461a      	mov	r2, r3
 800311a:	4b06      	ldr	r3, [pc, #24]	; (8003134 <HAL_IncTick+0x24>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4413      	add	r3, r2
 8003120:	4a04      	ldr	r2, [pc, #16]	; (8003134 <HAL_IncTick+0x24>)
 8003122:	6013      	str	r3, [r2, #0]
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	24000030 	.word	0x24000030
 8003134:	24002bf8 	.word	0x24002bf8

08003138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  return uwTick;
 800313c:	4b03      	ldr	r3, [pc, #12]	; (800314c <HAL_GetTick+0x14>)
 800313e:	681b      	ldr	r3, [r3, #0]
}
 8003140:	4618      	mov	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	24002bf8 	.word	0x24002bf8

08003150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003158:	f7ff ffee 	bl	8003138 <HAL_GetTick>
 800315c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003168:	d005      	beq.n	8003176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800316a:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <HAL_Delay+0x44>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4413      	add	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003176:	bf00      	nop
 8003178:	f7ff ffde 	bl	8003138 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	429a      	cmp	r2, r3
 8003186:	d8f7      	bhi.n	8003178 <HAL_Delay+0x28>
  {
  }
}
 8003188:	bf00      	nop
 800318a:	bf00      	nop
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	24000030 	.word	0x24000030

08003198 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800319c:	4b03      	ldr	r3, [pc, #12]	; (80031ac <HAL_GetREVID+0x14>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	0c1b      	lsrs	r3, r3, #16
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	5c001000 	.word	0x5c001000

080031b0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80031ba:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	43db      	mvns	r3, r3
 80031c2:	401a      	ands	r2, r3
 80031c4:	4904      	ldr	r1, [pc, #16]	; (80031d8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	604b      	str	r3, [r1, #4]
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	58000400 	.word	0x58000400

080031dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	431a      	orrs	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	609a      	str	r2, [r3, #8]
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	609a      	str	r2, [r3, #8]
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003238:	4618      	mov	r0, r3
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003244:	b480      	push	{r7}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	3360      	adds	r3, #96	; 0x60
 8003256:	461a      	mov	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	430b      	orrs	r3, r1
 8003272:	431a      	orrs	r2, r3
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003278:	bf00      	nop
 800327a:	371c      	adds	r7, #28
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f003 031f 	and.w	r3, r3, #31
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	fa01 f303 	lsl.w	r3, r1, r3
 80032a4:	431a      	orrs	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	611a      	str	r2, [r3, #16]
}
 80032aa:	bf00      	nop
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b087      	sub	sp, #28
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	60f8      	str	r0, [r7, #12]
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	3360      	adds	r3, #96	; 0x60
 80032c6:	461a      	mov	r2, r3
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	431a      	orrs	r2, r3
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	601a      	str	r2, [r3, #0]
  }
}
 80032e0:	bf00      	nop
 80032e2:	371c      	adds	r7, #28
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003312:	b480      	push	{r7}
 8003314:	b087      	sub	sp, #28
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	3330      	adds	r3, #48	; 0x30
 8003322:	461a      	mov	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	0a1b      	lsrs	r3, r3, #8
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	4413      	add	r3, r2
 8003330:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	211f      	movs	r1, #31
 800333e:	fa01 f303 	lsl.w	r3, r1, r3
 8003342:	43db      	mvns	r3, r3
 8003344:	401a      	ands	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	0e9b      	lsrs	r3, r3, #26
 800334a:	f003 011f 	and.w	r1, r3, #31
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f003 031f 	and.w	r3, r3, #31
 8003354:	fa01 f303 	lsl.w	r3, r1, r3
 8003358:	431a      	orrs	r2, r3
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800335e:	bf00      	nop
 8003360:	371c      	adds	r7, #28
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800336a:	b480      	push	{r7}
 800336c:	b087      	sub	sp, #28
 800336e:	af00      	add	r7, sp, #0
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	3314      	adds	r3, #20
 800337a:	461a      	mov	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	0e5b      	lsrs	r3, r3, #25
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	4413      	add	r3, r2
 8003388:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	0d1b      	lsrs	r3, r3, #20
 8003392:	f003 031f 	and.w	r3, r3, #31
 8003396:	2107      	movs	r1, #7
 8003398:	fa01 f303 	lsl.w	r3, r1, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	401a      	ands	r2, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	0d1b      	lsrs	r3, r3, #20
 80033a4:	f003 031f 	and.w	r3, r3, #31
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	fa01 f303 	lsl.w	r3, r1, r3
 80033ae:	431a      	orrs	r2, r3
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80033b4:	bf00      	nop
 80033b6:	371c      	adds	r7, #28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033d8:	43db      	mvns	r3, r3
 80033da:	401a      	ands	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f003 0318 	and.w	r3, r3, #24
 80033e2:	4908      	ldr	r1, [pc, #32]	; (8003404 <LL_ADC_SetChannelSingleDiff+0x44>)
 80033e4:	40d9      	lsrs	r1, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	400b      	ands	r3, r1
 80033ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033ee:	431a      	orrs	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80033f6:	bf00      	nop
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	000fffff 	.word	0x000fffff

08003408 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 031f 	and.w	r3, r3, #31
}
 8003418:	4618      	mov	r0, r3
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003434:	4618      	mov	r0, r3
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	4b04      	ldr	r3, [pc, #16]	; (8003460 <LL_ADC_DisableDeepPowerDown+0x20>)
 800344e:	4013      	ands	r3, r2
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6093      	str	r3, [r2, #8]
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	5fffffc0 	.word	0x5fffffc0

08003464 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003474:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003478:	d101      	bne.n	800347e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <LL_ADC_EnableInternalRegulator+0x24>)
 800349a:	4013      	ands	r3, r2
 800349c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	6fffffc0 	.word	0x6fffffc0

080034b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034c8:	d101      	bne.n	80034ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80034ca:	2301      	movs	r3, #1
 80034cc:	e000      	b.n	80034d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	4b05      	ldr	r3, [pc, #20]	; (8003500 <LL_ADC_Enable+0x24>)
 80034ea:	4013      	ands	r3, r2
 80034ec:	f043 0201 	orr.w	r2, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	7fffffc0 	.word	0x7fffffc0

08003504 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <LL_ADC_Disable+0x24>)
 8003512:	4013      	ands	r3, r2
 8003514:	f043 0202 	orr.w	r2, r3, #2
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	7fffffc0 	.word	0x7fffffc0

0800352c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <LL_ADC_IsEnabled+0x18>
 8003540:	2301      	movs	r3, #1
 8003542:	e000      	b.n	8003546 <LL_ADC_IsEnabled+0x1a>
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b02      	cmp	r3, #2
 8003564:	d101      	bne.n	800356a <LL_ADC_IsDisableOngoing+0x18>
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <LL_ADC_IsDisableOngoing+0x1a>
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	4b05      	ldr	r3, [pc, #20]	; (800359c <LL_ADC_REG_StartConversion+0x24>)
 8003586:	4013      	ands	r3, r2
 8003588:	f043 0204 	orr.w	r2, r3, #4
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	7fffffc0 	.word	0x7fffffc0

080035a0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <LL_ADC_REG_StopConversion+0x24>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	f043 0210 	orr.w	r2, r3, #16
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	7fffffc0 	.word	0x7fffffc0

080035c8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d101      	bne.n	80035e0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80035dc:	2301      	movs	r3, #1
 80035de:	e000      	b.n	80035e2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <LL_ADC_INJ_StopConversion+0x24>)
 80035fe:	4013      	ands	r3, r2
 8003600:	f043 0220 	orr.w	r2, r3, #32
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	7fffffc0 	.word	0x7fffffc0

08003618 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 0308 	and.w	r3, r3, #8
 8003628:	2b08      	cmp	r3, #8
 800362a:	d101      	bne.n	8003630 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800362c:	2301      	movs	r3, #1
 800362e:	e000      	b.n	8003632 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003640:	b590      	push	{r4, r7, lr}
 8003642:	b089      	sub	sp, #36	; 0x24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003648:	2300      	movs	r3, #0
 800364a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800364c:	2300      	movs	r3, #0
 800364e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e18e      	b.n	8003978 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003664:	2b00      	cmp	r3, #0
 8003666:	d109      	bne.n	800367c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff f8fb 	bl	8002864 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff feef 	bl	8003464 <LL_ADC_IsDeepPowerDownEnabled>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d004      	beq.n	8003696 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff fed5 	bl	8003440 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff ff0a 	bl	80034b4 <LL_ADC_IsInternalRegulatorEnabled>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d114      	bne.n	80036d0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff feee 	bl	800348c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036b0:	4b9a      	ldr	r3, [pc, #616]	; (800391c <HAL_ADC_Init+0x2dc>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	099b      	lsrs	r3, r3, #6
 80036b6:	4a9a      	ldr	r2, [pc, #616]	; (8003920 <HAL_ADC_Init+0x2e0>)
 80036b8:	fba2 2303 	umull	r2, r3, r2, r3
 80036bc:	099b      	lsrs	r3, r3, #6
 80036be:	3301      	adds	r3, #1
 80036c0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80036c2:	e002      	b.n	80036ca <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f9      	bne.n	80036c4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff feed 	bl	80034b4 <LL_ADC_IsInternalRegulatorEnabled>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10d      	bne.n	80036fc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e4:	f043 0210 	orr.w	r2, r3, #16
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f0:	f043 0201 	orr.w	r2, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff ff61 	bl	80035c8 <LL_ADC_REG_IsConversionOngoing>
 8003706:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	2b00      	cmp	r3, #0
 8003712:	f040 8128 	bne.w	8003966 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	2b00      	cmp	r3, #0
 800371a:	f040 8124 	bne.w	8003966 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003722:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003726:	f043 0202 	orr.w	r2, r3, #2
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff fefa 	bl	800352c <LL_ADC_IsEnabled>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d136      	bne.n	80037ac <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a78      	ldr	r2, [pc, #480]	; (8003924 <HAL_ADC_Init+0x2e4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d004      	beq.n	8003752 <HAL_ADC_Init+0x112>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a76      	ldr	r2, [pc, #472]	; (8003928 <HAL_ADC_Init+0x2e8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d10e      	bne.n	8003770 <HAL_ADC_Init+0x130>
 8003752:	4874      	ldr	r0, [pc, #464]	; (8003924 <HAL_ADC_Init+0x2e4>)
 8003754:	f7ff feea 	bl	800352c <LL_ADC_IsEnabled>
 8003758:	4604      	mov	r4, r0
 800375a:	4873      	ldr	r0, [pc, #460]	; (8003928 <HAL_ADC_Init+0x2e8>)
 800375c:	f7ff fee6 	bl	800352c <LL_ADC_IsEnabled>
 8003760:	4603      	mov	r3, r0
 8003762:	4323      	orrs	r3, r4
 8003764:	2b00      	cmp	r3, #0
 8003766:	bf0c      	ite	eq
 8003768:	2301      	moveq	r3, #1
 800376a:	2300      	movne	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	e008      	b.n	8003782 <HAL_ADC_Init+0x142>
 8003770:	486e      	ldr	r0, [pc, #440]	; (800392c <HAL_ADC_Init+0x2ec>)
 8003772:	f7ff fedb 	bl	800352c <LL_ADC_IsEnabled>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	bf0c      	ite	eq
 800377c:	2301      	moveq	r3, #1
 800377e:	2300      	movne	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d012      	beq.n	80037ac <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a66      	ldr	r2, [pc, #408]	; (8003924 <HAL_ADC_Init+0x2e4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d004      	beq.n	800379a <HAL_ADC_Init+0x15a>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a64      	ldr	r2, [pc, #400]	; (8003928 <HAL_ADC_Init+0x2e8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d101      	bne.n	800379e <HAL_ADC_Init+0x15e>
 800379a:	4a65      	ldr	r2, [pc, #404]	; (8003930 <HAL_ADC_Init+0x2f0>)
 800379c:	e000      	b.n	80037a0 <HAL_ADC_Init+0x160>
 800379e:	4a65      	ldr	r2, [pc, #404]	; (8003934 <HAL_ADC_Init+0x2f4>)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	4619      	mov	r1, r3
 80037a6:	4610      	mov	r0, r2
 80037a8:	f7ff fd18 	bl	80031dc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80037ac:	f7ff fcf4 	bl	8003198 <HAL_GetREVID>
 80037b0:	4603      	mov	r3, r0
 80037b2:	f241 0203 	movw	r2, #4099	; 0x1003
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d914      	bls.n	80037e4 <HAL_ADC_Init+0x1a4>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b10      	cmp	r3, #16
 80037c0:	d110      	bne.n	80037e4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	7d5b      	ldrb	r3, [r3, #21]
 80037c6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80037cc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80037d2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	7f1b      	ldrb	r3, [r3, #28]
 80037d8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80037da:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80037dc:	f043 030c 	orr.w	r3, r3, #12
 80037e0:	61bb      	str	r3, [r7, #24]
 80037e2:	e00d      	b.n	8003800 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	7d5b      	ldrb	r3, [r3, #21]
 80037e8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80037ee:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80037f4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	7f1b      	ldrb	r3, [r3, #28]
 80037fa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80037fc:	4313      	orrs	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	7f1b      	ldrb	r3, [r3, #28]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d106      	bne.n	8003816 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	3b01      	subs	r3, #1
 800380e:	045b      	lsls	r3, r3, #17
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4313      	orrs	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	2b00      	cmp	r3, #0
 800381c:	d009      	beq.n	8003832 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4313      	orrs	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	4b3f      	ldr	r3, [pc, #252]	; (8003938 <HAL_ADC_Init+0x2f8>)
 800383a:	4013      	ands	r3, r2
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6812      	ldr	r2, [r2, #0]
 8003840:	69b9      	ldr	r1, [r7, #24]
 8003842:	430b      	orrs	r3, r1
 8003844:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff febc 	bl	80035c8 <LL_ADC_REG_IsConversionOngoing>
 8003850:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff fede 	bl	8003618 <LL_ADC_INJ_IsConversionOngoing>
 800385c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d14a      	bne.n	80038fa <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d147      	bne.n	80038fa <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	7d1b      	ldrb	r3, [r3, #20]
 800386e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003874:	4313      	orrs	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	4b2f      	ldr	r3, [pc, #188]	; (800393c <HAL_ADC_Init+0x2fc>)
 8003880:	4013      	ands	r3, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6812      	ldr	r2, [r2, #0]
 8003886:	69b9      	ldr	r1, [r7, #24]
 8003888:	430b      	orrs	r3, r1
 800388a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003892:	2b01      	cmp	r3, #1
 8003894:	d11b      	bne.n	80038ce <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	4b27      	ldr	r3, [pc, #156]	; (8003940 <HAL_ADC_Init+0x300>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038aa:	3a01      	subs	r2, #1
 80038ac:	0411      	lsls	r1, r2, #16
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80038b2:	4311      	orrs	r1, r2
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80038b8:	4311      	orrs	r1, r2
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80038be:	430a      	orrs	r2, r1
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0201 	orr.w	r2, r2, #1
 80038ca:	611a      	str	r2, [r3, #16]
 80038cc:	e007      	b.n	80038de <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0201 	bic.w	r2, r2, #1
 80038dc:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 ff39 	bl	800476c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d120      	bne.n	8003944 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003908:	f023 010f 	bic.w	r1, r3, #15
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	1e5a      	subs	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	631a      	str	r2, [r3, #48]	; 0x30
 800391a:	e01b      	b.n	8003954 <HAL_ADC_Init+0x314>
 800391c:	24000024 	.word	0x24000024
 8003920:	053e2d63 	.word	0x053e2d63
 8003924:	40022000 	.word	0x40022000
 8003928:	40022100 	.word	0x40022100
 800392c:	58026000 	.word	0x58026000
 8003930:	40022300 	.word	0x40022300
 8003934:	58026300 	.word	0x58026300
 8003938:	fff0c003 	.word	0xfff0c003
 800393c:	ffffbffc 	.word	0xffffbffc
 8003940:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 020f 	bic.w	r2, r2, #15
 8003952:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003958:	f023 0303 	bic.w	r3, r3, #3
 800395c:	f043 0201 	orr.w	r2, r3, #1
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	655a      	str	r2, [r3, #84]	; 0x54
 8003964:	e007      	b.n	8003976 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396a:	f043 0210 	orr.w	r2, r3, #16
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003976:	7ffb      	ldrb	r3, [r7, #31]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3724      	adds	r7, #36	; 0x24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd90      	pop	{r4, r7, pc}

08003980 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a5c      	ldr	r2, [pc, #368]	; (8003b00 <HAL_ADC_Start+0x180>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d004      	beq.n	800399c <HAL_ADC_Start+0x1c>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a5b      	ldr	r2, [pc, #364]	; (8003b04 <HAL_ADC_Start+0x184>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d101      	bne.n	80039a0 <HAL_ADC_Start+0x20>
 800399c:	4b5a      	ldr	r3, [pc, #360]	; (8003b08 <HAL_ADC_Start+0x188>)
 800399e:	e000      	b.n	80039a2 <HAL_ADC_Start+0x22>
 80039a0:	4b5a      	ldr	r3, [pc, #360]	; (8003b0c <HAL_ADC_Start+0x18c>)
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff fd30 	bl	8003408 <LL_ADC_GetMultimode>
 80039a8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff fe0a 	bl	80035c8 <LL_ADC_REG_IsConversionOngoing>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f040 809a 	bne.w	8003af0 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d101      	bne.n	80039ca <HAL_ADC_Start+0x4a>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e095      	b.n	8003af6 <HAL_ADC_Start+0x176>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fde0 	bl	8004598 <ADC_Enable>
 80039d8:	4603      	mov	r3, r0
 80039da:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80039dc:	7dfb      	ldrb	r3, [r7, #23]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f040 8081 	bne.w	8003ae6 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039e8:	4b49      	ldr	r3, [pc, #292]	; (8003b10 <HAL_ADC_Start+0x190>)
 80039ea:	4013      	ands	r3, r2
 80039ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a42      	ldr	r2, [pc, #264]	; (8003b04 <HAL_ADC_Start+0x184>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d002      	beq.n	8003a04 <HAL_ADC_Start+0x84>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	e000      	b.n	8003a06 <HAL_ADC_Start+0x86>
 8003a04:	4b3e      	ldr	r3, [pc, #248]	; (8003b00 <HAL_ADC_Start+0x180>)
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6812      	ldr	r2, [r2, #0]
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d002      	beq.n	8003a14 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d105      	bne.n	8003a20 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a18:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2c:	d106      	bne.n	8003a3c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a32:	f023 0206 	bic.w	r2, r3, #6
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	659a      	str	r2, [r3, #88]	; 0x58
 8003a3a:	e002      	b.n	8003a42 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	221c      	movs	r2, #28
 8003a48:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a2b      	ldr	r2, [pc, #172]	; (8003b04 <HAL_ADC_Start+0x184>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d002      	beq.n	8003a62 <HAL_ADC_Start+0xe2>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	e000      	b.n	8003a64 <HAL_ADC_Start+0xe4>
 8003a62:	4b27      	ldr	r3, [pc, #156]	; (8003b00 <HAL_ADC_Start+0x180>)
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6812      	ldr	r2, [r2, #0]
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d008      	beq.n	8003a7e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	2b05      	cmp	r3, #5
 8003a76:	d002      	beq.n	8003a7e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	2b09      	cmp	r3, #9
 8003a7c:	d114      	bne.n	8003aa8 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d007      	beq.n	8003a9c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff fd69 	bl	8003578 <LL_ADC_REG_StartConversion>
 8003aa6:	e025      	b.n	8003af4 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a12      	ldr	r2, [pc, #72]	; (8003b04 <HAL_ADC_Start+0x184>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d002      	beq.n	8003ac4 <HAL_ADC_Start+0x144>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	e000      	b.n	8003ac6 <HAL_ADC_Start+0x146>
 8003ac4:	4b0e      	ldr	r3, [pc, #56]	; (8003b00 <HAL_ADC_Start+0x180>)
 8003ac6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00f      	beq.n	8003af4 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003adc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	655a      	str	r2, [r3, #84]	; 0x54
 8003ae4:	e006      	b.n	8003af4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003aee:	e001      	b.n	8003af4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003af0:	2302      	movs	r3, #2
 8003af2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3718      	adds	r7, #24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40022000 	.word	0x40022000
 8003b04:	40022100 	.word	0x40022100
 8003b08:	40022300 	.word	0x40022300
 8003b0c:	58026300 	.word	0x58026300
 8003b10:	fffff0fe 	.word	0xfffff0fe

08003b14 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d101      	bne.n	8003b2a <HAL_ADC_Stop+0x16>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e021      	b.n	8003b6e <HAL_ADC_Stop+0x5a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003b32:	2103      	movs	r1, #3
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 fc73 	bl	8004420 <ADC_ConversionStop>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10f      	bne.n	8003b64 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fdb1 	bl	80046ac <ADC_Disable>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d107      	bne.n	8003b64 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b58:	4b07      	ldr	r3, [pc, #28]	; (8003b78 <HAL_ADC_Stop+0x64>)
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	f043 0201 	orr.w	r2, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	ffffeefe 	.word	0xffffeefe

08003b7c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a72      	ldr	r2, [pc, #456]	; (8003d54 <HAL_ADC_PollForConversion+0x1d8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d004      	beq.n	8003b9a <HAL_ADC_PollForConversion+0x1e>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a70      	ldr	r2, [pc, #448]	; (8003d58 <HAL_ADC_PollForConversion+0x1dc>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d101      	bne.n	8003b9e <HAL_ADC_PollForConversion+0x22>
 8003b9a:	4b70      	ldr	r3, [pc, #448]	; (8003d5c <HAL_ADC_PollForConversion+0x1e0>)
 8003b9c:	e000      	b.n	8003ba0 <HAL_ADC_PollForConversion+0x24>
 8003b9e:	4b70      	ldr	r3, [pc, #448]	; (8003d60 <HAL_ADC_PollForConversion+0x1e4>)
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff fc31 	bl	8003408 <LL_ADC_GetMultimode>
 8003ba6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d102      	bne.n	8003bb6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003bb0:	2308      	movs	r3, #8
 8003bb2:	61fb      	str	r3, [r7, #28]
 8003bb4:	e037      	b.n	8003c26 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d005      	beq.n	8003bc8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2b05      	cmp	r3, #5
 8003bc0:	d002      	beq.n	8003bc8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2b09      	cmp	r3, #9
 8003bc6:	d111      	bne.n	8003bec <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d007      	beq.n	8003be6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bda:	f043 0220 	orr.w	r2, r3, #32
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e0b1      	b.n	8003d4a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003be6:	2304      	movs	r3, #4
 8003be8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003bea:	e01c      	b.n	8003c26 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a58      	ldr	r2, [pc, #352]	; (8003d54 <HAL_ADC_PollForConversion+0x1d8>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d004      	beq.n	8003c00 <HAL_ADC_PollForConversion+0x84>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a57      	ldr	r2, [pc, #348]	; (8003d58 <HAL_ADC_PollForConversion+0x1dc>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d101      	bne.n	8003c04 <HAL_ADC_PollForConversion+0x88>
 8003c00:	4b56      	ldr	r3, [pc, #344]	; (8003d5c <HAL_ADC_PollForConversion+0x1e0>)
 8003c02:	e000      	b.n	8003c06 <HAL_ADC_PollForConversion+0x8a>
 8003c04:	4b56      	ldr	r3, [pc, #344]	; (8003d60 <HAL_ADC_PollForConversion+0x1e4>)
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7ff fc0c 	bl	8003424 <LL_ADC_GetMultiDMATransfer>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d007      	beq.n	8003c22 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c16:	f043 0220 	orr.w	r2, r3, #32
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e093      	b.n	8003d4a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003c22:	2304      	movs	r3, #4
 8003c24:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003c26:	f7ff fa87 	bl	8003138 <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003c2c:	e021      	b.n	8003c72 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c34:	d01d      	beq.n	8003c72 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003c36:	f7ff fa7f 	bl	8003138 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d302      	bcc.n	8003c4c <HAL_ADC_PollForConversion+0xd0>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d112      	bne.n	8003c72 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10b      	bne.n	8003c72 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5e:	f043 0204 	orr.w	r2, r3, #4
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e06b      	b.n	8003d4a <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0d6      	beq.n	8003c2e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff fb2b 	bl	80032ec <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d01c      	beq.n	8003cd6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	7d5b      	ldrb	r3, [r3, #21]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d118      	bne.n	8003cd6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d111      	bne.n	8003cd6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d105      	bne.n	8003cd6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cce:	f043 0201 	orr.w	r2, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a1f      	ldr	r2, [pc, #124]	; (8003d58 <HAL_ADC_PollForConversion+0x1dc>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d002      	beq.n	8003ce6 <HAL_ADC_PollForConversion+0x16a>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	e000      	b.n	8003ce8 <HAL_ADC_PollForConversion+0x16c>
 8003ce6:	4b1b      	ldr	r3, [pc, #108]	; (8003d54 <HAL_ADC_PollForConversion+0x1d8>)
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d008      	beq.n	8003d02 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d005      	beq.n	8003d02 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2b05      	cmp	r3, #5
 8003cfa:	d002      	beq.n	8003d02 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	2b09      	cmp	r3, #9
 8003d00:	d104      	bne.n	8003d0c <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	61bb      	str	r3, [r7, #24]
 8003d0a:	e00c      	b.n	8003d26 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a11      	ldr	r2, [pc, #68]	; (8003d58 <HAL_ADC_PollForConversion+0x1dc>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d002      	beq.n	8003d1c <HAL_ADC_PollForConversion+0x1a0>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	e000      	b.n	8003d1e <HAL_ADC_PollForConversion+0x1a2>
 8003d1c:	4b0d      	ldr	r3, [pc, #52]	; (8003d54 <HAL_ADC_PollForConversion+0x1d8>)
 8003d1e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d104      	bne.n	8003d36 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2208      	movs	r2, #8
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	e008      	b.n	8003d48 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d103      	bne.n	8003d48 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	220c      	movs	r2, #12
 8003d46:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3720      	adds	r7, #32
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40022000 	.word	0x40022000
 8003d58:	40022100 	.word	0x40022100
 8003d5c:	40022300 	.word	0x40022300
 8003d60:	58026300 	.word	0x58026300

08003d64 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
	...

08003d80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d80:	b590      	push	{r4, r7, lr}
 8003d82:	b0a1      	sub	sp, #132	; 0x84
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003d90:	2300      	movs	r3, #0
 8003d92:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	4a9d      	ldr	r2, [pc, #628]	; (8004010 <HAL_ADC_ConfigChannel+0x290>)
 8003d9a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d101      	bne.n	8003daa <HAL_ADC_ConfigChannel+0x2a>
 8003da6:	2302      	movs	r3, #2
 8003da8:	e321      	b.n	80043ee <HAL_ADC_ConfigChannel+0x66e>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fc06 	bl	80035c8 <LL_ADC_REG_IsConversionOngoing>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f040 8306 	bne.w	80043d0 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d108      	bne.n	8003de2 <HAL_ADC_ConfigChannel+0x62>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	0e9b      	lsrs	r3, r3, #26
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	2201      	movs	r2, #1
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	e016      	b.n	8003e10 <HAL_ADC_ConfigChannel+0x90>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dea:	fa93 f3a3 	rbit	r3, r3
 8003dee:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003df0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003df2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003df4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003dfa:	2320      	movs	r3, #32
 8003dfc:	e003      	b.n	8003e06 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003dfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e00:	fab3 f383 	clz	r3, r3
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	f003 031f 	and.w	r3, r3, #31
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	69d1      	ldr	r1, [r2, #28]
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6812      	ldr	r2, [r2, #0]
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	6859      	ldr	r1, [r3, #4]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	f7ff fa71 	bl	8003312 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff fbc7 	bl	80035c8 <LL_ADC_REG_IsConversionOngoing>
 8003e3a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff fbe9 	bl	8003618 <LL_ADC_INJ_IsConversionOngoing>
 8003e46:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f040 80b3 	bne.w	8003fb6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f040 80af 	bne.w	8003fb6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	6819      	ldr	r1, [r3, #0]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	461a      	mov	r2, r3
 8003e66:	f7ff fa80 	bl	800336a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003e6a:	4b6a      	ldr	r3, [pc, #424]	; (8004014 <HAL_ADC_ConfigChannel+0x294>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003e72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e76:	d10b      	bne.n	8003e90 <HAL_ADC_ConfigChannel+0x110>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	695a      	ldr	r2, [r3, #20]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	089b      	lsrs	r3, r3, #2
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	e01d      	b.n	8003ecc <HAL_ADC_ConfigChannel+0x14c>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f003 0310 	and.w	r3, r3, #16
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10b      	bne.n	8003eb6 <HAL_ADC_ConfigChannel+0x136>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	695a      	ldr	r2, [r3, #20]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	089b      	lsrs	r3, r3, #2
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	e00a      	b.n	8003ecc <HAL_ADC_ConfigChannel+0x14c>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	695a      	ldr	r2, [r3, #20]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	089b      	lsrs	r3, r3, #2
 8003ec2:	f003 0304 	and.w	r3, r3, #4
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d027      	beq.n	8003f26 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6818      	ldr	r0, [r3, #0]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	6919      	ldr	r1, [r3, #16]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ee4:	f7ff f9ae 	bl	8003244 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6818      	ldr	r0, [r3, #0]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	6919      	ldr	r1, [r3, #16]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	7e5b      	ldrb	r3, [r3, #25]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d102      	bne.n	8003efe <HAL_ADC_ConfigChannel+0x17e>
 8003ef8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003efc:	e000      	b.n	8003f00 <HAL_ADC_ConfigChannel+0x180>
 8003efe:	2300      	movs	r3, #0
 8003f00:	461a      	mov	r2, r3
 8003f02:	f7ff f9d8 	bl	80032b6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6818      	ldr	r0, [r3, #0]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	6919      	ldr	r1, [r3, #16]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	7e1b      	ldrb	r3, [r3, #24]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d102      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x19c>
 8003f16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f1a:	e000      	b.n	8003f1e <HAL_ADC_ConfigChannel+0x19e>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f7ff f9b0 	bl	8003284 <LL_ADC_SetDataRightShift>
 8003f24:	e047      	b.n	8003fb6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	069b      	lsls	r3, r3, #26
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d107      	bne.n	8003f4a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f48:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	069b      	lsls	r3, r3, #26
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d107      	bne.n	8003f6e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f6c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	069b      	lsls	r3, r3, #26
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d107      	bne.n	8003f92 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f90:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	069b      	lsls	r3, r3, #26
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d107      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003fb4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff fab6 	bl	800352c <LL_ADC_IsEnabled>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f040 820d 	bne.w	80043e2 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6818      	ldr	r0, [r3, #0]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	6819      	ldr	r1, [r3, #0]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	f7ff f9f3 	bl	80033c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	4a0c      	ldr	r2, [pc, #48]	; (8004010 <HAL_ADC_ConfigChannel+0x290>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	f040 8133 	bne.w	800424c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d110      	bne.n	8004018 <HAL_ADC_ConfigChannel+0x298>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	0e9b      	lsrs	r3, r3, #26
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	f003 031f 	and.w	r3, r3, #31
 8004002:	2b09      	cmp	r3, #9
 8004004:	bf94      	ite	ls
 8004006:	2301      	movls	r3, #1
 8004008:	2300      	movhi	r3, #0
 800400a:	b2db      	uxtb	r3, r3
 800400c:	e01e      	b.n	800404c <HAL_ADC_ConfigChannel+0x2cc>
 800400e:	bf00      	nop
 8004010:	47ff0000 	.word	0x47ff0000
 8004014:	5c001000 	.word	0x5c001000
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004020:	fa93 f3a3 	rbit	r3, r3
 8004024:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004026:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004028:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800402a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004030:	2320      	movs	r3, #32
 8004032:	e003      	b.n	800403c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004036:	fab3 f383 	clz	r3, r3
 800403a:	b2db      	uxtb	r3, r3
 800403c:	3301      	adds	r3, #1
 800403e:	f003 031f 	and.w	r3, r3, #31
 8004042:	2b09      	cmp	r3, #9
 8004044:	bf94      	ite	ls
 8004046:	2301      	movls	r3, #1
 8004048:	2300      	movhi	r3, #0
 800404a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800404c:	2b00      	cmp	r3, #0
 800404e:	d079      	beq.n	8004144 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004058:	2b00      	cmp	r3, #0
 800405a:	d107      	bne.n	800406c <HAL_ADC_ConfigChannel+0x2ec>
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	0e9b      	lsrs	r3, r3, #26
 8004062:	3301      	adds	r3, #1
 8004064:	069b      	lsls	r3, r3, #26
 8004066:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800406a:	e015      	b.n	8004098 <HAL_ADC_ConfigChannel+0x318>
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004074:	fa93 f3a3 	rbit	r3, r3
 8004078:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800407a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800407c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800407e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004084:	2320      	movs	r3, #32
 8004086:	e003      	b.n	8004090 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800408a:	fab3 f383 	clz	r3, r3
 800408e:	b2db      	uxtb	r3, r3
 8004090:	3301      	adds	r3, #1
 8004092:	069b      	lsls	r3, r3, #26
 8004094:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d109      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x338>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	0e9b      	lsrs	r3, r3, #26
 80040aa:	3301      	adds	r3, #1
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	2101      	movs	r1, #1
 80040b2:	fa01 f303 	lsl.w	r3, r1, r3
 80040b6:	e017      	b.n	80040e8 <HAL_ADC_ConfigChannel+0x368>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c0:	fa93 f3a3 	rbit	r3, r3
 80040c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80040c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040c8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80040ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80040d0:	2320      	movs	r3, #32
 80040d2:	e003      	b.n	80040dc <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80040d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040d6:	fab3 f383 	clz	r3, r3
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	3301      	adds	r3, #1
 80040de:	f003 031f 	and.w	r3, r3, #31
 80040e2:	2101      	movs	r1, #1
 80040e4:	fa01 f303 	lsl.w	r3, r1, r3
 80040e8:	ea42 0103 	orr.w	r1, r2, r3
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10a      	bne.n	800410e <HAL_ADC_ConfigChannel+0x38e>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	0e9b      	lsrs	r3, r3, #26
 80040fe:	3301      	adds	r3, #1
 8004100:	f003 021f 	and.w	r2, r3, #31
 8004104:	4613      	mov	r3, r2
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	4413      	add	r3, r2
 800410a:	051b      	lsls	r3, r3, #20
 800410c:	e018      	b.n	8004140 <HAL_ADC_ConfigChannel+0x3c0>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004116:	fa93 f3a3 	rbit	r3, r3
 800411a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800411c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8004126:	2320      	movs	r3, #32
 8004128:	e003      	b.n	8004132 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800412a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412c:	fab3 f383 	clz	r3, r3
 8004130:	b2db      	uxtb	r3, r3
 8004132:	3301      	adds	r3, #1
 8004134:	f003 021f 	and.w	r2, r3, #31
 8004138:	4613      	mov	r3, r2
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	4413      	add	r3, r2
 800413e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004140:	430b      	orrs	r3, r1
 8004142:	e07e      	b.n	8004242 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800414c:	2b00      	cmp	r3, #0
 800414e:	d107      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x3e0>
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	0e9b      	lsrs	r3, r3, #26
 8004156:	3301      	adds	r3, #1
 8004158:	069b      	lsls	r3, r3, #26
 800415a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800415e:	e015      	b.n	800418c <HAL_ADC_ConfigChannel+0x40c>
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004168:	fa93 f3a3 	rbit	r3, r3
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004178:	2320      	movs	r3, #32
 800417a:	e003      	b.n	8004184 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800417c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417e:	fab3 f383 	clz	r3, r3
 8004182:	b2db      	uxtb	r3, r3
 8004184:	3301      	adds	r3, #1
 8004186:	069b      	lsls	r3, r3, #26
 8004188:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004194:	2b00      	cmp	r3, #0
 8004196:	d109      	bne.n	80041ac <HAL_ADC_ConfigChannel+0x42c>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	0e9b      	lsrs	r3, r3, #26
 800419e:	3301      	adds	r3, #1
 80041a0:	f003 031f 	and.w	r3, r3, #31
 80041a4:	2101      	movs	r1, #1
 80041a6:	fa01 f303 	lsl.w	r3, r1, r3
 80041aa:	e017      	b.n	80041dc <HAL_ADC_ConfigChannel+0x45c>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	fa93 f3a3 	rbit	r3, r3
 80041b8:	61bb      	str	r3, [r7, #24]
  return result;
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80041c4:	2320      	movs	r3, #32
 80041c6:	e003      	b.n	80041d0 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	fab3 f383 	clz	r3, r3
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	3301      	adds	r3, #1
 80041d2:	f003 031f 	and.w	r3, r3, #31
 80041d6:	2101      	movs	r1, #1
 80041d8:	fa01 f303 	lsl.w	r3, r1, r3
 80041dc:	ea42 0103 	orr.w	r1, r2, r3
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10d      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x488>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	0e9b      	lsrs	r3, r3, #26
 80041f2:	3301      	adds	r3, #1
 80041f4:	f003 021f 	and.w	r2, r3, #31
 80041f8:	4613      	mov	r3, r2
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	4413      	add	r3, r2
 80041fe:	3b1e      	subs	r3, #30
 8004200:	051b      	lsls	r3, r3, #20
 8004202:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004206:	e01b      	b.n	8004240 <HAL_ADC_ConfigChannel+0x4c0>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	fa93 f3a3 	rbit	r3, r3
 8004214:	60fb      	str	r3, [r7, #12]
  return result;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004220:	2320      	movs	r3, #32
 8004222:	e003      	b.n	800422c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	fab3 f383 	clz	r3, r3
 800422a:	b2db      	uxtb	r3, r3
 800422c:	3301      	adds	r3, #1
 800422e:	f003 021f 	and.w	r2, r3, #31
 8004232:	4613      	mov	r3, r2
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	4413      	add	r3, r2
 8004238:	3b1e      	subs	r3, #30
 800423a:	051b      	lsls	r3, r3, #20
 800423c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004240:	430b      	orrs	r3, r1
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	6892      	ldr	r2, [r2, #8]
 8004246:	4619      	mov	r1, r3
 8004248:	f7ff f88f 	bl	800336a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	f280 80c6 	bge.w	80043e2 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a67      	ldr	r2, [pc, #412]	; (80043f8 <HAL_ADC_ConfigChannel+0x678>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d004      	beq.n	800426a <HAL_ADC_ConfigChannel+0x4ea>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a65      	ldr	r2, [pc, #404]	; (80043fc <HAL_ADC_ConfigChannel+0x67c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d101      	bne.n	800426e <HAL_ADC_ConfigChannel+0x4ee>
 800426a:	4b65      	ldr	r3, [pc, #404]	; (8004400 <HAL_ADC_ConfigChannel+0x680>)
 800426c:	e000      	b.n	8004270 <HAL_ADC_ConfigChannel+0x4f0>
 800426e:	4b65      	ldr	r3, [pc, #404]	; (8004404 <HAL_ADC_ConfigChannel+0x684>)
 8004270:	4618      	mov	r0, r3
 8004272:	f7fe ffd9 	bl	8003228 <LL_ADC_GetCommonPathInternalCh>
 8004276:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a5e      	ldr	r2, [pc, #376]	; (80043f8 <HAL_ADC_ConfigChannel+0x678>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d004      	beq.n	800428c <HAL_ADC_ConfigChannel+0x50c>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a5d      	ldr	r2, [pc, #372]	; (80043fc <HAL_ADC_ConfigChannel+0x67c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d10e      	bne.n	80042aa <HAL_ADC_ConfigChannel+0x52a>
 800428c:	485a      	ldr	r0, [pc, #360]	; (80043f8 <HAL_ADC_ConfigChannel+0x678>)
 800428e:	f7ff f94d 	bl	800352c <LL_ADC_IsEnabled>
 8004292:	4604      	mov	r4, r0
 8004294:	4859      	ldr	r0, [pc, #356]	; (80043fc <HAL_ADC_ConfigChannel+0x67c>)
 8004296:	f7ff f949 	bl	800352c <LL_ADC_IsEnabled>
 800429a:	4603      	mov	r3, r0
 800429c:	4323      	orrs	r3, r4
 800429e:	2b00      	cmp	r3, #0
 80042a0:	bf0c      	ite	eq
 80042a2:	2301      	moveq	r3, #1
 80042a4:	2300      	movne	r3, #0
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	e008      	b.n	80042bc <HAL_ADC_ConfigChannel+0x53c>
 80042aa:	4857      	ldr	r0, [pc, #348]	; (8004408 <HAL_ADC_ConfigChannel+0x688>)
 80042ac:	f7ff f93e 	bl	800352c <LL_ADC_IsEnabled>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	bf0c      	ite	eq
 80042b6:	2301      	moveq	r3, #1
 80042b8:	2300      	movne	r3, #0
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d07d      	beq.n	80043bc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a51      	ldr	r2, [pc, #324]	; (800440c <HAL_ADC_ConfigChannel+0x68c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d130      	bne.n	800432c <HAL_ADC_ConfigChannel+0x5ac>
 80042ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d12b      	bne.n	800432c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a4b      	ldr	r2, [pc, #300]	; (8004408 <HAL_ADC_ConfigChannel+0x688>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	f040 8081 	bne.w	80043e2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a44      	ldr	r2, [pc, #272]	; (80043f8 <HAL_ADC_ConfigChannel+0x678>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d004      	beq.n	80042f4 <HAL_ADC_ConfigChannel+0x574>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a43      	ldr	r2, [pc, #268]	; (80043fc <HAL_ADC_ConfigChannel+0x67c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d101      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x578>
 80042f4:	4a42      	ldr	r2, [pc, #264]	; (8004400 <HAL_ADC_ConfigChannel+0x680>)
 80042f6:	e000      	b.n	80042fa <HAL_ADC_ConfigChannel+0x57a>
 80042f8:	4a42      	ldr	r2, [pc, #264]	; (8004404 <HAL_ADC_ConfigChannel+0x684>)
 80042fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004300:	4619      	mov	r1, r3
 8004302:	4610      	mov	r0, r2
 8004304:	f7fe ff7d 	bl	8003202 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004308:	4b41      	ldr	r3, [pc, #260]	; (8004410 <HAL_ADC_ConfigChannel+0x690>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	099b      	lsrs	r3, r3, #6
 800430e:	4a41      	ldr	r2, [pc, #260]	; (8004414 <HAL_ADC_ConfigChannel+0x694>)
 8004310:	fba2 2303 	umull	r2, r3, r2, r3
 8004314:	099b      	lsrs	r3, r3, #6
 8004316:	3301      	adds	r3, #1
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800431c:	e002      	b.n	8004324 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	3b01      	subs	r3, #1
 8004322:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1f9      	bne.n	800431e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800432a:	e05a      	b.n	80043e2 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a39      	ldr	r2, [pc, #228]	; (8004418 <HAL_ADC_ConfigChannel+0x698>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d11e      	bne.n	8004374 <HAL_ADC_ConfigChannel+0x5f4>
 8004336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d119      	bne.n	8004374 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a30      	ldr	r2, [pc, #192]	; (8004408 <HAL_ADC_ConfigChannel+0x688>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d14b      	bne.n	80043e2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a2a      	ldr	r2, [pc, #168]	; (80043f8 <HAL_ADC_ConfigChannel+0x678>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d004      	beq.n	800435e <HAL_ADC_ConfigChannel+0x5de>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a28      	ldr	r2, [pc, #160]	; (80043fc <HAL_ADC_ConfigChannel+0x67c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d101      	bne.n	8004362 <HAL_ADC_ConfigChannel+0x5e2>
 800435e:	4a28      	ldr	r2, [pc, #160]	; (8004400 <HAL_ADC_ConfigChannel+0x680>)
 8004360:	e000      	b.n	8004364 <HAL_ADC_ConfigChannel+0x5e4>
 8004362:	4a28      	ldr	r2, [pc, #160]	; (8004404 <HAL_ADC_ConfigChannel+0x684>)
 8004364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800436a:	4619      	mov	r1, r3
 800436c:	4610      	mov	r0, r2
 800436e:	f7fe ff48 	bl	8003202 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004372:	e036      	b.n	80043e2 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a28      	ldr	r2, [pc, #160]	; (800441c <HAL_ADC_ConfigChannel+0x69c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d131      	bne.n	80043e2 <HAL_ADC_ConfigChannel+0x662>
 800437e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004380:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d12c      	bne.n	80043e2 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a1e      	ldr	r2, [pc, #120]	; (8004408 <HAL_ADC_ConfigChannel+0x688>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d127      	bne.n	80043e2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a18      	ldr	r2, [pc, #96]	; (80043f8 <HAL_ADC_ConfigChannel+0x678>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d004      	beq.n	80043a6 <HAL_ADC_ConfigChannel+0x626>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a16      	ldr	r2, [pc, #88]	; (80043fc <HAL_ADC_ConfigChannel+0x67c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d101      	bne.n	80043aa <HAL_ADC_ConfigChannel+0x62a>
 80043a6:	4a16      	ldr	r2, [pc, #88]	; (8004400 <HAL_ADC_ConfigChannel+0x680>)
 80043a8:	e000      	b.n	80043ac <HAL_ADC_ConfigChannel+0x62c>
 80043aa:	4a16      	ldr	r2, [pc, #88]	; (8004404 <HAL_ADC_ConfigChannel+0x684>)
 80043ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043b2:	4619      	mov	r1, r3
 80043b4:	4610      	mov	r0, r2
 80043b6:	f7fe ff24 	bl	8003202 <LL_ADC_SetCommonPathInternalCh>
 80043ba:	e012      	b.n	80043e2 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c0:	f043 0220 	orr.w	r2, r3, #32
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80043ce:	e008      	b.n	80043e2 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d4:	f043 0220 	orr.w	r2, r3, #32
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80043ea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3784      	adds	r7, #132	; 0x84
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd90      	pop	{r4, r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40022000 	.word	0x40022000
 80043fc:	40022100 	.word	0x40022100
 8004400:	40022300 	.word	0x40022300
 8004404:	58026300 	.word	0x58026300
 8004408:	58026000 	.word	0x58026000
 800440c:	cb840000 	.word	0xcb840000
 8004410:	24000024 	.word	0x24000024
 8004414:	053e2d63 	.word	0x053e2d63
 8004418:	c7520000 	.word	0xc7520000
 800441c:	cfb80000 	.word	0xcfb80000

08004420 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800442a:	2300      	movs	r3, #0
 800442c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff f8c6 	bl	80035c8 <LL_ADC_REG_IsConversionOngoing>
 800443c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff f8e8 	bl	8003618 <LL_ADC_INJ_IsConversionOngoing>
 8004448:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d103      	bne.n	8004458 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 8098 	beq.w	8004588 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d02a      	beq.n	80044bc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	7d5b      	ldrb	r3, [r3, #21]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d126      	bne.n	80044bc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	7d1b      	ldrb	r3, [r3, #20]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d122      	bne.n	80044bc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004476:	2301      	movs	r3, #1
 8004478:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800447a:	e014      	b.n	80044a6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	4a45      	ldr	r2, [pc, #276]	; (8004594 <ADC_ConversionStop+0x174>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d90d      	bls.n	80044a0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004488:	f043 0210 	orr.w	r2, r3, #16
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004494:	f043 0201 	orr.w	r2, r3, #1
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e074      	b.n	800458a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	3301      	adds	r3, #1
 80044a4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b0:	2b40      	cmp	r3, #64	; 0x40
 80044b2:	d1e3      	bne.n	800447c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2240      	movs	r2, #64	; 0x40
 80044ba:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d014      	beq.n	80044ec <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff f87e 	bl	80035c8 <LL_ADC_REG_IsConversionOngoing>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00c      	beq.n	80044ec <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff f83b 	bl	8003552 <LL_ADC_IsDisableOngoing>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d104      	bne.n	80044ec <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff f85a 	bl	80035a0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d014      	beq.n	800451c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff f88e 	bl	8003618 <LL_ADC_INJ_IsConversionOngoing>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00c      	beq.n	800451c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff f823 	bl	8003552 <LL_ADC_IsDisableOngoing>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d104      	bne.n	800451c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff f86a 	bl	80035f0 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	2b02      	cmp	r3, #2
 8004520:	d005      	beq.n	800452e <ADC_ConversionStop+0x10e>
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	2b03      	cmp	r3, #3
 8004526:	d105      	bne.n	8004534 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004528:	230c      	movs	r3, #12
 800452a:	617b      	str	r3, [r7, #20]
        break;
 800452c:	e005      	b.n	800453a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800452e:	2308      	movs	r3, #8
 8004530:	617b      	str	r3, [r7, #20]
        break;
 8004532:	e002      	b.n	800453a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004534:	2304      	movs	r3, #4
 8004536:	617b      	str	r3, [r7, #20]
        break;
 8004538:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800453a:	f7fe fdfd 	bl	8003138 <HAL_GetTick>
 800453e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004540:	e01b      	b.n	800457a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004542:	f7fe fdf9 	bl	8003138 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b05      	cmp	r3, #5
 800454e:	d914      	bls.n	800457a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	4013      	ands	r3, r2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00d      	beq.n	800457a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004562:	f043 0210 	orr.w	r2, r3, #16
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456e:	f043 0201 	orr.w	r2, r3, #1
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e007      	b.n	800458a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	4013      	ands	r3, r2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1dc      	bne.n	8004542 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3720      	adds	r7, #32
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	000cdbff 	.word	0x000cdbff

08004598 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7fe ffc1 	bl	800352c <LL_ADC_IsEnabled>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d16e      	bne.n	800468e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	4b38      	ldr	r3, [pc, #224]	; (8004698 <ADC_Enable+0x100>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00d      	beq.n	80045da <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c2:	f043 0210 	orr.w	r2, r3, #16
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ce:	f043 0201 	orr.w	r2, r3, #1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e05a      	b.n	8004690 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fe ff7c 	bl	80034dc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80045e4:	f7fe fda8 	bl	8003138 <HAL_GetTick>
 80045e8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a2b      	ldr	r2, [pc, #172]	; (800469c <ADC_Enable+0x104>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d004      	beq.n	80045fe <ADC_Enable+0x66>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a29      	ldr	r2, [pc, #164]	; (80046a0 <ADC_Enable+0x108>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d101      	bne.n	8004602 <ADC_Enable+0x6a>
 80045fe:	4b29      	ldr	r3, [pc, #164]	; (80046a4 <ADC_Enable+0x10c>)
 8004600:	e000      	b.n	8004604 <ADC_Enable+0x6c>
 8004602:	4b29      	ldr	r3, [pc, #164]	; (80046a8 <ADC_Enable+0x110>)
 8004604:	4618      	mov	r0, r3
 8004606:	f7fe feff 	bl	8003408 <LL_ADC_GetMultimode>
 800460a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a23      	ldr	r2, [pc, #140]	; (80046a0 <ADC_Enable+0x108>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d002      	beq.n	800461c <ADC_Enable+0x84>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	e000      	b.n	800461e <ADC_Enable+0x86>
 800461c:	4b1f      	ldr	r3, [pc, #124]	; (800469c <ADC_Enable+0x104>)
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6812      	ldr	r2, [r2, #0]
 8004622:	4293      	cmp	r3, r2
 8004624:	d02c      	beq.n	8004680 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d130      	bne.n	800468e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800462c:	e028      	b.n	8004680 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f7fe ff7a 	bl	800352c <LL_ADC_IsEnabled>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d104      	bne.n	8004648 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f7fe ff4a 	bl	80034dc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004648:	f7fe fd76 	bl	8003138 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d914      	bls.n	8004680 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b01      	cmp	r3, #1
 8004662:	d00d      	beq.n	8004680 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004668:	f043 0210 	orr.w	r2, r3, #16
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004674:	f043 0201 	orr.w	r2, r3, #1
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e007      	b.n	8004690 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b01      	cmp	r3, #1
 800468c:	d1cf      	bne.n	800462e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	8000003f 	.word	0x8000003f
 800469c:	40022000 	.word	0x40022000
 80046a0:	40022100 	.word	0x40022100
 80046a4:	40022300 	.word	0x40022300
 80046a8:	58026300 	.word	0x58026300

080046ac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fe ff4a 	bl	8003552 <LL_ADC_IsDisableOngoing>
 80046be:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7fe ff31 	bl	800352c <LL_ADC_IsEnabled>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d047      	beq.n	8004760 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d144      	bne.n	8004760 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f003 030d 	and.w	r3, r3, #13
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d10c      	bne.n	80046fe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fe ff0b 	bl	8003504 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2203      	movs	r2, #3
 80046f4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80046f6:	f7fe fd1f 	bl	8003138 <HAL_GetTick>
 80046fa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80046fc:	e029      	b.n	8004752 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004702:	f043 0210 	orr.w	r2, r3, #16
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470e:	f043 0201 	orr.w	r2, r3, #1
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e023      	b.n	8004762 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800471a:	f7fe fd0d 	bl	8003138 <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d914      	bls.n	8004752 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00d      	beq.n	8004752 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473a:	f043 0210 	orr.w	r2, r3, #16
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004746:	f043 0201 	orr.w	r2, r3, #1
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e007      	b.n	8004762 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1dc      	bne.n	800471a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
	...

0800476c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a79      	ldr	r2, [pc, #484]	; (8004960 <ADC_ConfigureBoostMode+0x1f4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d004      	beq.n	8004788 <ADC_ConfigureBoostMode+0x1c>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a78      	ldr	r2, [pc, #480]	; (8004964 <ADC_ConfigureBoostMode+0x1f8>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d109      	bne.n	800479c <ADC_ConfigureBoostMode+0x30>
 8004788:	4b77      	ldr	r3, [pc, #476]	; (8004968 <ADC_ConfigureBoostMode+0x1fc>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004790:	2b00      	cmp	r3, #0
 8004792:	bf14      	ite	ne
 8004794:	2301      	movne	r3, #1
 8004796:	2300      	moveq	r3, #0
 8004798:	b2db      	uxtb	r3, r3
 800479a:	e008      	b.n	80047ae <ADC_ConfigureBoostMode+0x42>
 800479c:	4b73      	ldr	r3, [pc, #460]	; (800496c <ADC_ConfigureBoostMode+0x200>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	bf14      	ite	ne
 80047a8:	2301      	movne	r3, #1
 80047aa:	2300      	moveq	r3, #0
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d01c      	beq.n	80047ec <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80047b2:	f002 fac1 	bl	8006d38 <HAL_RCC_GetHCLKFreq>
 80047b6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80047c0:	d010      	beq.n	80047e4 <ADC_ConfigureBoostMode+0x78>
 80047c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80047c6:	d871      	bhi.n	80048ac <ADC_ConfigureBoostMode+0x140>
 80047c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047cc:	d002      	beq.n	80047d4 <ADC_ConfigureBoostMode+0x68>
 80047ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047d2:	d16b      	bne.n	80048ac <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	0c1b      	lsrs	r3, r3, #16
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e0:	60fb      	str	r3, [r7, #12]
        break;
 80047e2:	e066      	b.n	80048b2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	089b      	lsrs	r3, r3, #2
 80047e8:	60fb      	str	r3, [r7, #12]
        break;
 80047ea:	e062      	b.n	80048b2 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80047ec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80047f0:	f003 fa3e 	bl	8007c70 <HAL_RCCEx_GetPeriphCLKFreq>
 80047f4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80047fe:	d051      	beq.n	80048a4 <ADC_ConfigureBoostMode+0x138>
 8004800:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004804:	d854      	bhi.n	80048b0 <ADC_ConfigureBoostMode+0x144>
 8004806:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800480a:	d047      	beq.n	800489c <ADC_ConfigureBoostMode+0x130>
 800480c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004810:	d84e      	bhi.n	80048b0 <ADC_ConfigureBoostMode+0x144>
 8004812:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004816:	d03d      	beq.n	8004894 <ADC_ConfigureBoostMode+0x128>
 8004818:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800481c:	d848      	bhi.n	80048b0 <ADC_ConfigureBoostMode+0x144>
 800481e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004822:	d033      	beq.n	800488c <ADC_ConfigureBoostMode+0x120>
 8004824:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004828:	d842      	bhi.n	80048b0 <ADC_ConfigureBoostMode+0x144>
 800482a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800482e:	d029      	beq.n	8004884 <ADC_ConfigureBoostMode+0x118>
 8004830:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004834:	d83c      	bhi.n	80048b0 <ADC_ConfigureBoostMode+0x144>
 8004836:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800483a:	d01a      	beq.n	8004872 <ADC_ConfigureBoostMode+0x106>
 800483c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004840:	d836      	bhi.n	80048b0 <ADC_ConfigureBoostMode+0x144>
 8004842:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004846:	d014      	beq.n	8004872 <ADC_ConfigureBoostMode+0x106>
 8004848:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800484c:	d830      	bhi.n	80048b0 <ADC_ConfigureBoostMode+0x144>
 800484e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004852:	d00e      	beq.n	8004872 <ADC_ConfigureBoostMode+0x106>
 8004854:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004858:	d82a      	bhi.n	80048b0 <ADC_ConfigureBoostMode+0x144>
 800485a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800485e:	d008      	beq.n	8004872 <ADC_ConfigureBoostMode+0x106>
 8004860:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004864:	d824      	bhi.n	80048b0 <ADC_ConfigureBoostMode+0x144>
 8004866:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800486a:	d002      	beq.n	8004872 <ADC_ConfigureBoostMode+0x106>
 800486c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004870:	d11e      	bne.n	80048b0 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	0c9b      	lsrs	r3, r3, #18
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004880:	60fb      	str	r3, [r7, #12]
        break;
 8004882:	e016      	b.n	80048b2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	091b      	lsrs	r3, r3, #4
 8004888:	60fb      	str	r3, [r7, #12]
        break;
 800488a:	e012      	b.n	80048b2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	60fb      	str	r3, [r7, #12]
        break;
 8004892:	e00e      	b.n	80048b2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	099b      	lsrs	r3, r3, #6
 8004898:	60fb      	str	r3, [r7, #12]
        break;
 800489a:	e00a      	b.n	80048b2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	09db      	lsrs	r3, r3, #7
 80048a0:	60fb      	str	r3, [r7, #12]
        break;
 80048a2:	e006      	b.n	80048b2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	0a1b      	lsrs	r3, r3, #8
 80048a8:	60fb      	str	r3, [r7, #12]
        break;
 80048aa:	e002      	b.n	80048b2 <ADC_ConfigureBoostMode+0x146>
        break;
 80048ac:	bf00      	nop
 80048ae:	e000      	b.n	80048b2 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80048b0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80048b2:	f7fe fc71 	bl	8003198 <HAL_GetREVID>
 80048b6:	4603      	mov	r3, r0
 80048b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80048bc:	4293      	cmp	r3, r2
 80048be:	d815      	bhi.n	80048ec <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4a2b      	ldr	r2, [pc, #172]	; (8004970 <ADC_ConfigureBoostMode+0x204>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d908      	bls.n	80048da <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048d6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80048d8:	e03e      	b.n	8004958 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048e8:	609a      	str	r2, [r3, #8]
}
 80048ea:	e035      	b.n	8004958 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	085b      	lsrs	r3, r3, #1
 80048f0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4a1f      	ldr	r2, [pc, #124]	; (8004974 <ADC_ConfigureBoostMode+0x208>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d808      	bhi.n	800490c <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004908:	609a      	str	r2, [r3, #8]
}
 800490a:	e025      	b.n	8004958 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4a1a      	ldr	r2, [pc, #104]	; (8004978 <ADC_ConfigureBoostMode+0x20c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d80a      	bhi.n	800492a <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004926:	609a      	str	r2, [r3, #8]
}
 8004928:	e016      	b.n	8004958 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4a13      	ldr	r2, [pc, #76]	; (800497c <ADC_ConfigureBoostMode+0x210>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d80a      	bhi.n	8004948 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004944:	609a      	str	r2, [r3, #8]
}
 8004946:	e007      	b.n	8004958 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689a      	ldr	r2, [r3, #8]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004956:	609a      	str	r2, [r3, #8]
}
 8004958:	bf00      	nop
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40022000 	.word	0x40022000
 8004964:	40022100 	.word	0x40022100
 8004968:	40022300 	.word	0x40022300
 800496c:	58026300 	.word	0x58026300
 8004970:	01312d00 	.word	0x01312d00
 8004974:	005f5e10 	.word	0x005f5e10
 8004978:	00bebc20 	.word	0x00bebc20
 800497c:	017d7840 	.word	0x017d7840

08004980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004990:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <__NVIC_SetPriorityGrouping+0x40>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800499c:	4013      	ands	r3, r2
 800499e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80049a8:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <__NVIC_SetPriorityGrouping+0x44>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049ae:	4a04      	ldr	r2, [pc, #16]	; (80049c0 <__NVIC_SetPriorityGrouping+0x40>)
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	60d3      	str	r3, [r2, #12]
}
 80049b4:	bf00      	nop
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	e000ed00 	.word	0xe000ed00
 80049c4:	05fa0000 	.word	0x05fa0000

080049c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049cc:	4b04      	ldr	r3, [pc, #16]	; (80049e0 <__NVIC_GetPriorityGrouping+0x18>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	0a1b      	lsrs	r3, r3, #8
 80049d2:	f003 0307 	and.w	r3, r3, #7
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	e000ed00 	.word	0xe000ed00

080049e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	4603      	mov	r3, r0
 80049ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80049ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	db0b      	blt.n	8004a0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049f6:	88fb      	ldrh	r3, [r7, #6]
 80049f8:	f003 021f 	and.w	r2, r3, #31
 80049fc:	4907      	ldr	r1, [pc, #28]	; (8004a1c <__NVIC_EnableIRQ+0x38>)
 80049fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a02:	095b      	lsrs	r3, r3, #5
 8004a04:	2001      	movs	r0, #1
 8004a06:	fa00 f202 	lsl.w	r2, r0, r2
 8004a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	e000e100 	.word	0xe000e100

08004a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	6039      	str	r1, [r7, #0]
 8004a2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	db0a      	blt.n	8004a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	490c      	ldr	r1, [pc, #48]	; (8004a6c <__NVIC_SetPriority+0x4c>)
 8004a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a3e:	0112      	lsls	r2, r2, #4
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	440b      	add	r3, r1
 8004a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a48:	e00a      	b.n	8004a60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	4908      	ldr	r1, [pc, #32]	; (8004a70 <__NVIC_SetPriority+0x50>)
 8004a50:	88fb      	ldrh	r3, [r7, #6]
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	3b04      	subs	r3, #4
 8004a58:	0112      	lsls	r2, r2, #4
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	761a      	strb	r2, [r3, #24]
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	e000e100 	.word	0xe000e100
 8004a70:	e000ed00 	.word	0xe000ed00

08004a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b089      	sub	sp, #36	; 0x24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	f1c3 0307 	rsb	r3, r3, #7
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	bf28      	it	cs
 8004a92:	2304      	movcs	r3, #4
 8004a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	2b06      	cmp	r3, #6
 8004a9c:	d902      	bls.n	8004aa4 <NVIC_EncodePriority+0x30>
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	3b03      	subs	r3, #3
 8004aa2:	e000      	b.n	8004aa6 <NVIC_EncodePriority+0x32>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab2:	43da      	mvns	r2, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	401a      	ands	r2, r3
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004abc:	f04f 31ff 	mov.w	r1, #4294967295
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac6:	43d9      	mvns	r1, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004acc:	4313      	orrs	r3, r2
         );
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3724      	adds	r7, #36	; 0x24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
	...

08004adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004aec:	d301      	bcc.n	8004af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004aee:	2301      	movs	r3, #1
 8004af0:	e00f      	b.n	8004b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004af2:	4a0a      	ldr	r2, [pc, #40]	; (8004b1c <SysTick_Config+0x40>)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004afa:	210f      	movs	r1, #15
 8004afc:	f04f 30ff 	mov.w	r0, #4294967295
 8004b00:	f7ff ff8e 	bl	8004a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b04:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <SysTick_Config+0x40>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b0a:	4b04      	ldr	r3, [pc, #16]	; (8004b1c <SysTick_Config+0x40>)
 8004b0c:	2207      	movs	r2, #7
 8004b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	e000e010 	.word	0xe000e010

08004b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f7ff ff29 	bl	8004980 <__NVIC_SetPriorityGrouping>
}
 8004b2e:	bf00      	nop
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b086      	sub	sp, #24
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	60b9      	str	r1, [r7, #8]
 8004b40:	607a      	str	r2, [r7, #4]
 8004b42:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b44:	f7ff ff40 	bl	80049c8 <__NVIC_GetPriorityGrouping>
 8004b48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	68b9      	ldr	r1, [r7, #8]
 8004b4e:	6978      	ldr	r0, [r7, #20]
 8004b50:	f7ff ff90 	bl	8004a74 <NVIC_EncodePriority>
 8004b54:	4602      	mov	r2, r0
 8004b56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff ff5f 	bl	8004a20 <__NVIC_SetPriority>
}
 8004b62:	bf00      	nop
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b082      	sub	sp, #8
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	4603      	mov	r3, r0
 8004b72:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff ff33 	bl	80049e4 <__NVIC_EnableIRQ>
}
 8004b7e:	bf00      	nop
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b082      	sub	sp, #8
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7ff ffa4 	bl	8004adc <SysTick_Config>
 8004b94:	4603      	mov	r3, r0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
	...

08004ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b089      	sub	sp, #36	; 0x24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004bae:	4b89      	ldr	r3, [pc, #548]	; (8004dd4 <HAL_GPIO_Init+0x234>)
 8004bb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004bb2:	e194      	b.n	8004ede <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	2101      	movs	r1, #1
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 8186 	beq.w	8004ed8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f003 0303 	and.w	r3, r3, #3
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d005      	beq.n	8004be4 <HAL_GPIO_Init+0x44>
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f003 0303 	and.w	r3, r3, #3
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d130      	bne.n	8004c46 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	2203      	movs	r2, #3
 8004bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf4:	43db      	mvns	r3, r3
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	68da      	ldr	r2, [r3, #12]
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	fa02 f303 	lsl.w	r3, r2, r3
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	43db      	mvns	r3, r3
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	4013      	ands	r3, r2
 8004c28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	091b      	lsrs	r3, r3, #4
 8004c30:	f003 0201 	and.w	r2, r3, #1
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d017      	beq.n	8004c82 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	005b      	lsls	r3, r3, #1
 8004c5c:	2203      	movs	r2, #3
 8004c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c62:	43db      	mvns	r3, r3
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	4013      	ands	r3, r2
 8004c68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	fa02 f303 	lsl.w	r3, r2, r3
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d123      	bne.n	8004cd6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	08da      	lsrs	r2, r3, #3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3208      	adds	r2, #8
 8004c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	220f      	movs	r2, #15
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	43db      	mvns	r3, r3
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	691a      	ldr	r2, [r3, #16]
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	08da      	lsrs	r2, r3, #3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3208      	adds	r2, #8
 8004cd0:	69b9      	ldr	r1, [r7, #24]
 8004cd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	005b      	lsls	r3, r3, #1
 8004ce0:	2203      	movs	r2, #3
 8004ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce6:	43db      	mvns	r3, r3
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	4013      	ands	r3, r2
 8004cec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f003 0203 	and.w	r2, r3, #3
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 80e0 	beq.w	8004ed8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d18:	4b2f      	ldr	r3, [pc, #188]	; (8004dd8 <HAL_GPIO_Init+0x238>)
 8004d1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d1e:	4a2e      	ldr	r2, [pc, #184]	; (8004dd8 <HAL_GPIO_Init+0x238>)
 8004d20:	f043 0302 	orr.w	r3, r3, #2
 8004d24:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004d28:	4b2b      	ldr	r3, [pc, #172]	; (8004dd8 <HAL_GPIO_Init+0x238>)
 8004d2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d36:	4a29      	ldr	r2, [pc, #164]	; (8004ddc <HAL_GPIO_Init+0x23c>)
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	089b      	lsrs	r3, r3, #2
 8004d3c:	3302      	adds	r3, #2
 8004d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	220f      	movs	r2, #15
 8004d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d52:	43db      	mvns	r3, r3
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	4013      	ands	r3, r2
 8004d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a20      	ldr	r2, [pc, #128]	; (8004de0 <HAL_GPIO_Init+0x240>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d052      	beq.n	8004e08 <HAL_GPIO_Init+0x268>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a1f      	ldr	r2, [pc, #124]	; (8004de4 <HAL_GPIO_Init+0x244>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d031      	beq.n	8004dce <HAL_GPIO_Init+0x22e>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a1e      	ldr	r2, [pc, #120]	; (8004de8 <HAL_GPIO_Init+0x248>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d02b      	beq.n	8004dca <HAL_GPIO_Init+0x22a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a1d      	ldr	r2, [pc, #116]	; (8004dec <HAL_GPIO_Init+0x24c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d025      	beq.n	8004dc6 <HAL_GPIO_Init+0x226>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a1c      	ldr	r2, [pc, #112]	; (8004df0 <HAL_GPIO_Init+0x250>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d01f      	beq.n	8004dc2 <HAL_GPIO_Init+0x222>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a1b      	ldr	r2, [pc, #108]	; (8004df4 <HAL_GPIO_Init+0x254>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d019      	beq.n	8004dbe <HAL_GPIO_Init+0x21e>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a1a      	ldr	r2, [pc, #104]	; (8004df8 <HAL_GPIO_Init+0x258>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d013      	beq.n	8004dba <HAL_GPIO_Init+0x21a>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a19      	ldr	r2, [pc, #100]	; (8004dfc <HAL_GPIO_Init+0x25c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d00d      	beq.n	8004db6 <HAL_GPIO_Init+0x216>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a18      	ldr	r2, [pc, #96]	; (8004e00 <HAL_GPIO_Init+0x260>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d007      	beq.n	8004db2 <HAL_GPIO_Init+0x212>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a17      	ldr	r2, [pc, #92]	; (8004e04 <HAL_GPIO_Init+0x264>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d101      	bne.n	8004dae <HAL_GPIO_Init+0x20e>
 8004daa:	2309      	movs	r3, #9
 8004dac:	e02d      	b.n	8004e0a <HAL_GPIO_Init+0x26a>
 8004dae:	230a      	movs	r3, #10
 8004db0:	e02b      	b.n	8004e0a <HAL_GPIO_Init+0x26a>
 8004db2:	2308      	movs	r3, #8
 8004db4:	e029      	b.n	8004e0a <HAL_GPIO_Init+0x26a>
 8004db6:	2307      	movs	r3, #7
 8004db8:	e027      	b.n	8004e0a <HAL_GPIO_Init+0x26a>
 8004dba:	2306      	movs	r3, #6
 8004dbc:	e025      	b.n	8004e0a <HAL_GPIO_Init+0x26a>
 8004dbe:	2305      	movs	r3, #5
 8004dc0:	e023      	b.n	8004e0a <HAL_GPIO_Init+0x26a>
 8004dc2:	2304      	movs	r3, #4
 8004dc4:	e021      	b.n	8004e0a <HAL_GPIO_Init+0x26a>
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e01f      	b.n	8004e0a <HAL_GPIO_Init+0x26a>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	e01d      	b.n	8004e0a <HAL_GPIO_Init+0x26a>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e01b      	b.n	8004e0a <HAL_GPIO_Init+0x26a>
 8004dd2:	bf00      	nop
 8004dd4:	58000080 	.word	0x58000080
 8004dd8:	58024400 	.word	0x58024400
 8004ddc:	58000400 	.word	0x58000400
 8004de0:	58020000 	.word	0x58020000
 8004de4:	58020400 	.word	0x58020400
 8004de8:	58020800 	.word	0x58020800
 8004dec:	58020c00 	.word	0x58020c00
 8004df0:	58021000 	.word	0x58021000
 8004df4:	58021400 	.word	0x58021400
 8004df8:	58021800 	.word	0x58021800
 8004dfc:	58021c00 	.word	0x58021c00
 8004e00:	58022000 	.word	0x58022000
 8004e04:	58022400 	.word	0x58022400
 8004e08:	2300      	movs	r3, #0
 8004e0a:	69fa      	ldr	r2, [r7, #28]
 8004e0c:	f002 0203 	and.w	r2, r2, #3
 8004e10:	0092      	lsls	r2, r2, #2
 8004e12:	4093      	lsls	r3, r2
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e1a:	4938      	ldr	r1, [pc, #224]	; (8004efc <HAL_GPIO_Init+0x35c>)
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	089b      	lsrs	r3, r3, #2
 8004e20:	3302      	adds	r3, #2
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	43db      	mvns	r3, r3
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	4013      	ands	r3, r2
 8004e38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004e4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	43db      	mvns	r3, r3
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	4013      	ands	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d003      	beq.n	8004e7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004e7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	43db      	mvns	r3, r3
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	4013      	ands	r3, r2
 8004e92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	43db      	mvns	r3, r3
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	3301      	adds	r3, #1
 8004edc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f47f ae63 	bne.w	8004bb4 <HAL_GPIO_Init+0x14>
  }
}
 8004eee:	bf00      	nop
 8004ef0:	bf00      	nop
 8004ef2:	3724      	adds	r7, #36	; 0x24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	58000400 	.word	0x58000400

08004f00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691a      	ldr	r2, [r3, #16]
 8004f10:	887b      	ldrh	r3, [r7, #2]
 8004f12:	4013      	ands	r3, r2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d002      	beq.n	8004f1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	73fb      	strb	r3, [r7, #15]
 8004f1c:	e001      	b.n	8004f22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3714      	adds	r7, #20
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	460b      	mov	r3, r1
 8004f3a:	807b      	strh	r3, [r7, #2]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f40:	787b      	ldrb	r3, [r7, #1]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f46:	887a      	ldrh	r2, [r7, #2]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004f4c:	e003      	b.n	8004f56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004f4e:	887b      	ldrh	r3, [r7, #2]
 8004f50:	041a      	lsls	r2, r3, #16
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	619a      	str	r2, [r3, #24]
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
	...

08004f64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e07f      	b.n	8005076 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7fd fce6 	bl	800295c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2224      	movs	r2, #36	; 0x24
 8004f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0201 	bic.w	r2, r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004fb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d107      	bne.n	8004fde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fda:	609a      	str	r2, [r3, #8]
 8004fdc:	e006      	b.n	8004fec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004fea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d104      	bne.n	8004ffe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ffc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6859      	ldr	r1, [r3, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	4b1d      	ldr	r3, [pc, #116]	; (8005080 <HAL_I2C_Init+0x11c>)
 800500a:	430b      	orrs	r3, r1
 800500c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800501c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691a      	ldr	r2, [r3, #16]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	69d9      	ldr	r1, [r3, #28]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a1a      	ldr	r2, [r3, #32]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0201 	orr.w	r2, r2, #1
 8005056:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2220      	movs	r2, #32
 8005062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	02008000 	.word	0x02008000

08005084 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b088      	sub	sp, #32
 8005088:	af02      	add	r7, sp, #8
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	4608      	mov	r0, r1
 800508e:	4611      	mov	r1, r2
 8005090:	461a      	mov	r2, r3
 8005092:	4603      	mov	r3, r0
 8005094:	817b      	strh	r3, [r7, #10]
 8005096:	460b      	mov	r3, r1
 8005098:	813b      	strh	r3, [r7, #8]
 800509a:	4613      	mov	r3, r2
 800509c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b20      	cmp	r3, #32
 80050a8:	f040 80f9 	bne.w	800529e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d002      	beq.n	80050b8 <HAL_I2C_Mem_Write+0x34>
 80050b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d105      	bne.n	80050c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e0ed      	b.n	80052a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d101      	bne.n	80050d2 <HAL_I2C_Mem_Write+0x4e>
 80050ce:	2302      	movs	r3, #2
 80050d0:	e0e6      	b.n	80052a0 <HAL_I2C_Mem_Write+0x21c>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80050da:	f7fe f82d 	bl	8003138 <HAL_GetTick>
 80050de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	2319      	movs	r3, #25
 80050e6:	2201      	movs	r2, #1
 80050e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 fac3 	bl	8005678 <I2C_WaitOnFlagUntilTimeout>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e0d1      	b.n	80052a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2221      	movs	r2, #33	; 0x21
 8005100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2240      	movs	r2, #64	; 0x40
 8005108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6a3a      	ldr	r2, [r7, #32]
 8005116:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800511c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005124:	88f8      	ldrh	r0, [r7, #6]
 8005126:	893a      	ldrh	r2, [r7, #8]
 8005128:	8979      	ldrh	r1, [r7, #10]
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	9301      	str	r3, [sp, #4]
 800512e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	4603      	mov	r3, r0
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 f9d3 	bl	80054e0 <I2C_RequestMemoryWrite>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d005      	beq.n	800514c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e0a9      	b.n	80052a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005150:	b29b      	uxth	r3, r3
 8005152:	2bff      	cmp	r3, #255	; 0xff
 8005154:	d90e      	bls.n	8005174 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	22ff      	movs	r2, #255	; 0xff
 800515a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005160:	b2da      	uxtb	r2, r3
 8005162:	8979      	ldrh	r1, [r7, #10]
 8005164:	2300      	movs	r3, #0
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 fc2b 	bl	80059c8 <I2C_TransferConfig>
 8005172:	e00f      	b.n	8005194 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005178:	b29a      	uxth	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005182:	b2da      	uxtb	r2, r3
 8005184:	8979      	ldrh	r1, [r7, #10]
 8005186:	2300      	movs	r3, #0
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 fc1a 	bl	80059c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 faad 	bl	80056f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e07b      	b.n	80052a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	781a      	ldrb	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d0:	3b01      	subs	r3, #1
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051dc:	b29b      	uxth	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d034      	beq.n	800524c <HAL_I2C_Mem_Write+0x1c8>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d130      	bne.n	800524c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f0:	2200      	movs	r2, #0
 80051f2:	2180      	movs	r1, #128	; 0x80
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 fa3f 	bl	8005678 <I2C_WaitOnFlagUntilTimeout>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e04d      	b.n	80052a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005208:	b29b      	uxth	r3, r3
 800520a:	2bff      	cmp	r3, #255	; 0xff
 800520c:	d90e      	bls.n	800522c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	22ff      	movs	r2, #255	; 0xff
 8005212:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005218:	b2da      	uxtb	r2, r3
 800521a:	8979      	ldrh	r1, [r7, #10]
 800521c:	2300      	movs	r3, #0
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f000 fbcf 	bl	80059c8 <I2C_TransferConfig>
 800522a:	e00f      	b.n	800524c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005230:	b29a      	uxth	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800523a:	b2da      	uxtb	r2, r3
 800523c:	8979      	ldrh	r1, [r7, #10]
 800523e:	2300      	movs	r3, #0
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f000 fbbe 	bl	80059c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005250:	b29b      	uxth	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d19e      	bne.n	8005194 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 fa8c 	bl	8005778 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e01a      	b.n	80052a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2220      	movs	r2, #32
 8005270:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6859      	ldr	r1, [r3, #4]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	4b0a      	ldr	r3, [pc, #40]	; (80052a8 <HAL_I2C_Mem_Write+0x224>)
 800527e:	400b      	ands	r3, r1
 8005280:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2220      	movs	r2, #32
 8005286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	e000      	b.n	80052a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800529e:	2302      	movs	r3, #2
  }
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3718      	adds	r7, #24
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	fe00e800 	.word	0xfe00e800

080052ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af02      	add	r7, sp, #8
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	4608      	mov	r0, r1
 80052b6:	4611      	mov	r1, r2
 80052b8:	461a      	mov	r2, r3
 80052ba:	4603      	mov	r3, r0
 80052bc:	817b      	strh	r3, [r7, #10]
 80052be:	460b      	mov	r3, r1
 80052c0:	813b      	strh	r3, [r7, #8]
 80052c2:	4613      	mov	r3, r2
 80052c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b20      	cmp	r3, #32
 80052d0:	f040 80fd 	bne.w	80054ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <HAL_I2C_Mem_Read+0x34>
 80052da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d105      	bne.n	80052ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e0f1      	b.n	80054d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d101      	bne.n	80052fa <HAL_I2C_Mem_Read+0x4e>
 80052f6:	2302      	movs	r3, #2
 80052f8:	e0ea      	b.n	80054d0 <HAL_I2C_Mem_Read+0x224>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005302:	f7fd ff19 	bl	8003138 <HAL_GetTick>
 8005306:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	2319      	movs	r3, #25
 800530e:	2201      	movs	r2, #1
 8005310:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 f9af 	bl	8005678 <I2C_WaitOnFlagUntilTimeout>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e0d5      	b.n	80054d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2222      	movs	r2, #34	; 0x22
 8005328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2240      	movs	r2, #64	; 0x40
 8005330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a3a      	ldr	r2, [r7, #32]
 800533e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005344:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800534c:	88f8      	ldrh	r0, [r7, #6]
 800534e:	893a      	ldrh	r2, [r7, #8]
 8005350:	8979      	ldrh	r1, [r7, #10]
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	9301      	str	r3, [sp, #4]
 8005356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	4603      	mov	r3, r0
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 f913 	bl	8005588 <I2C_RequestMemoryRead>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d005      	beq.n	8005374 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e0ad      	b.n	80054d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005378:	b29b      	uxth	r3, r3
 800537a:	2bff      	cmp	r3, #255	; 0xff
 800537c:	d90e      	bls.n	800539c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	22ff      	movs	r2, #255	; 0xff
 8005382:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005388:	b2da      	uxtb	r2, r3
 800538a:	8979      	ldrh	r1, [r7, #10]
 800538c:	4b52      	ldr	r3, [pc, #328]	; (80054d8 <HAL_I2C_Mem_Read+0x22c>)
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 fb17 	bl	80059c8 <I2C_TransferConfig>
 800539a:	e00f      	b.n	80053bc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	8979      	ldrh	r1, [r7, #10]
 80053ae:	4b4a      	ldr	r3, [pc, #296]	; (80054d8 <HAL_I2C_Mem_Read+0x22c>)
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 fb06 	bl	80059c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c2:	2200      	movs	r2, #0
 80053c4:	2104      	movs	r1, #4
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 f956 	bl	8005678 <I2C_WaitOnFlagUntilTimeout>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e07c      	b.n	80054d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	b2d2      	uxtb	r2, r2
 80053e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f2:	3b01      	subs	r3, #1
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053fe:	b29b      	uxth	r3, r3
 8005400:	3b01      	subs	r3, #1
 8005402:	b29a      	uxth	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540c:	b29b      	uxth	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d034      	beq.n	800547c <HAL_I2C_Mem_Read+0x1d0>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005416:	2b00      	cmp	r3, #0
 8005418:	d130      	bne.n	800547c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005420:	2200      	movs	r2, #0
 8005422:	2180      	movs	r1, #128	; 0x80
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f000 f927 	bl	8005678 <I2C_WaitOnFlagUntilTimeout>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e04d      	b.n	80054d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005438:	b29b      	uxth	r3, r3
 800543a:	2bff      	cmp	r3, #255	; 0xff
 800543c:	d90e      	bls.n	800545c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	22ff      	movs	r2, #255	; 0xff
 8005442:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005448:	b2da      	uxtb	r2, r3
 800544a:	8979      	ldrh	r1, [r7, #10]
 800544c:	2300      	movs	r3, #0
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 fab7 	bl	80059c8 <I2C_TransferConfig>
 800545a:	e00f      	b.n	800547c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005460:	b29a      	uxth	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800546a:	b2da      	uxtb	r2, r3
 800546c:	8979      	ldrh	r1, [r7, #10]
 800546e:	2300      	movs	r3, #0
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 faa6 	bl	80059c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005480:	b29b      	uxth	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d19a      	bne.n	80053bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 f974 	bl	8005778 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e01a      	b.n	80054d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2220      	movs	r2, #32
 80054a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6859      	ldr	r1, [r3, #4]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	4b0b      	ldr	r3, [pc, #44]	; (80054dc <HAL_I2C_Mem_Read+0x230>)
 80054ae:	400b      	ands	r3, r1
 80054b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2220      	movs	r2, #32
 80054b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	e000      	b.n	80054d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80054ce:	2302      	movs	r3, #2
  }
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3718      	adds	r7, #24
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	80002400 	.word	0x80002400
 80054dc:	fe00e800 	.word	0xfe00e800

080054e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af02      	add	r7, sp, #8
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	4608      	mov	r0, r1
 80054ea:	4611      	mov	r1, r2
 80054ec:	461a      	mov	r2, r3
 80054ee:	4603      	mov	r3, r0
 80054f0:	817b      	strh	r3, [r7, #10]
 80054f2:	460b      	mov	r3, r1
 80054f4:	813b      	strh	r3, [r7, #8]
 80054f6:	4613      	mov	r3, r2
 80054f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80054fa:	88fb      	ldrh	r3, [r7, #6]
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	8979      	ldrh	r1, [r7, #10]
 8005500:	4b20      	ldr	r3, [pc, #128]	; (8005584 <I2C_RequestMemoryWrite+0xa4>)
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 fa5d 	bl	80059c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800550e:	69fa      	ldr	r2, [r7, #28]
 8005510:	69b9      	ldr	r1, [r7, #24]
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 f8f0 	bl	80056f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e02c      	b.n	800557c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005522:	88fb      	ldrh	r3, [r7, #6]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d105      	bne.n	8005534 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005528:	893b      	ldrh	r3, [r7, #8]
 800552a:	b2da      	uxtb	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	629a      	str	r2, [r3, #40]	; 0x28
 8005532:	e015      	b.n	8005560 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005534:	893b      	ldrh	r3, [r7, #8]
 8005536:	0a1b      	lsrs	r3, r3, #8
 8005538:	b29b      	uxth	r3, r3
 800553a:	b2da      	uxtb	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005542:	69fa      	ldr	r2, [r7, #28]
 8005544:	69b9      	ldr	r1, [r7, #24]
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 f8d6 	bl	80056f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e012      	b.n	800557c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005556:	893b      	ldrh	r3, [r7, #8]
 8005558:	b2da      	uxtb	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	2200      	movs	r2, #0
 8005568:	2180      	movs	r1, #128	; 0x80
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f000 f884 	bl	8005678 <I2C_WaitOnFlagUntilTimeout>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e000      	b.n	800557c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	80002000 	.word	0x80002000

08005588 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af02      	add	r7, sp, #8
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	4608      	mov	r0, r1
 8005592:	4611      	mov	r1, r2
 8005594:	461a      	mov	r2, r3
 8005596:	4603      	mov	r3, r0
 8005598:	817b      	strh	r3, [r7, #10]
 800559a:	460b      	mov	r3, r1
 800559c:	813b      	strh	r3, [r7, #8]
 800559e:	4613      	mov	r3, r2
 80055a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80055a2:	88fb      	ldrh	r3, [r7, #6]
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	8979      	ldrh	r1, [r7, #10]
 80055a8:	4b20      	ldr	r3, [pc, #128]	; (800562c <I2C_RequestMemoryRead+0xa4>)
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	2300      	movs	r3, #0
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 fa0a 	bl	80059c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055b4:	69fa      	ldr	r2, [r7, #28]
 80055b6:	69b9      	ldr	r1, [r7, #24]
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f000 f89d 	bl	80056f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e02c      	b.n	8005622 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055c8:	88fb      	ldrh	r3, [r7, #6]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d105      	bne.n	80055da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055ce:	893b      	ldrh	r3, [r7, #8]
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	629a      	str	r2, [r3, #40]	; 0x28
 80055d8:	e015      	b.n	8005606 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80055da:	893b      	ldrh	r3, [r7, #8]
 80055dc:	0a1b      	lsrs	r3, r3, #8
 80055de:	b29b      	uxth	r3, r3
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055e8:	69fa      	ldr	r2, [r7, #28]
 80055ea:	69b9      	ldr	r1, [r7, #24]
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f000 f883 	bl	80056f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e012      	b.n	8005622 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055fc:	893b      	ldrh	r3, [r7, #8]
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	2200      	movs	r2, #0
 800560e:	2140      	movs	r1, #64	; 0x40
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 f831 	bl	8005678 <I2C_WaitOnFlagUntilTimeout>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e000      	b.n	8005622 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	80002000 	.word	0x80002000

08005630 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b02      	cmp	r3, #2
 8005644:	d103      	bne.n	800564e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2200      	movs	r2, #0
 800564c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b01      	cmp	r3, #1
 800565a:	d007      	beq.n	800566c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699a      	ldr	r2, [r3, #24]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 0201 	orr.w	r2, r2, #1
 800566a:	619a      	str	r2, [r3, #24]
  }
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	603b      	str	r3, [r7, #0]
 8005684:	4613      	mov	r3, r2
 8005686:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005688:	e022      	b.n	80056d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005690:	d01e      	beq.n	80056d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005692:	f7fd fd51 	bl	8003138 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d302      	bcc.n	80056a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d113      	bne.n	80056d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ac:	f043 0220 	orr.w	r2, r3, #32
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2220      	movs	r2, #32
 80056b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e00f      	b.n	80056f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699a      	ldr	r2, [r3, #24]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	4013      	ands	r3, r2
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	429a      	cmp	r2, r3
 80056de:	bf0c      	ite	eq
 80056e0:	2301      	moveq	r3, #1
 80056e2:	2300      	movne	r3, #0
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	461a      	mov	r2, r3
 80056e8:	79fb      	ldrb	r3, [r7, #7]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d0cd      	beq.n	800568a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005704:	e02c      	b.n	8005760 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	68b9      	ldr	r1, [r7, #8]
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 f870 	bl	80057f0 <I2C_IsErrorOccurred>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e02a      	b.n	8005770 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005720:	d01e      	beq.n	8005760 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005722:	f7fd fd09 	bl	8003138 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	429a      	cmp	r2, r3
 8005730:	d302      	bcc.n	8005738 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d113      	bne.n	8005760 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573c:	f043 0220 	orr.w	r2, r3, #32
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2220      	movs	r2, #32
 8005748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e007      	b.n	8005770 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b02      	cmp	r3, #2
 800576c:	d1cb      	bne.n	8005706 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005784:	e028      	b.n	80057d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	68b9      	ldr	r1, [r7, #8]
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f000 f830 	bl	80057f0 <I2C_IsErrorOccurred>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e026      	b.n	80057e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800579a:	f7fd fccd 	bl	8003138 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d302      	bcc.n	80057b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d113      	bne.n	80057d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b4:	f043 0220 	orr.w	r2, r3, #32
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e007      	b.n	80057e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	f003 0320 	and.w	r3, r3, #32
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	d1cf      	bne.n	8005786 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b08a      	sub	sp, #40	; 0x28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800580a:	2300      	movs	r3, #0
 800580c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	f003 0310 	and.w	r3, r3, #16
 8005818:	2b00      	cmp	r3, #0
 800581a:	d075      	beq.n	8005908 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2210      	movs	r2, #16
 8005822:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005824:	e056      	b.n	80058d4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582c:	d052      	beq.n	80058d4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800582e:	f7fd fc83 	bl	8003138 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	429a      	cmp	r2, r3
 800583c:	d302      	bcc.n	8005844 <I2C_IsErrorOccurred+0x54>
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d147      	bne.n	80058d4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800584e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005856:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005862:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005866:	d12e      	bne.n	80058c6 <I2C_IsErrorOccurred+0xd6>
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800586e:	d02a      	beq.n	80058c6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005870:	7cfb      	ldrb	r3, [r7, #19]
 8005872:	2b20      	cmp	r3, #32
 8005874:	d027      	beq.n	80058c6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005884:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005886:	f7fd fc57 	bl	8003138 <HAL_GetTick>
 800588a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800588c:	e01b      	b.n	80058c6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800588e:	f7fd fc53 	bl	8003138 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	2b19      	cmp	r3, #25
 800589a:	d914      	bls.n	80058c6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a0:	f043 0220 	orr.w	r2, r3, #32
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2220      	movs	r2, #32
 80058ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	f003 0320 	and.w	r3, r3, #32
 80058d0:	2b20      	cmp	r3, #32
 80058d2:	d1dc      	bne.n	800588e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	f003 0320 	and.w	r3, r3, #32
 80058de:	2b20      	cmp	r3, #32
 80058e0:	d003      	beq.n	80058ea <I2C_IsErrorOccurred+0xfa>
 80058e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d09d      	beq.n	8005826 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80058ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d103      	bne.n	80058fa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2220      	movs	r2, #32
 80058f8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	f043 0304 	orr.w	r3, r3, #4
 8005900:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00b      	beq.n	8005932 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	f043 0301 	orr.w	r3, r3, #1
 8005920:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f44f 7280 	mov.w	r2, #256	; 0x100
 800592a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00b      	beq.n	8005954 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	f043 0308 	orr.w	r3, r3, #8
 8005942:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800594c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00b      	beq.n	8005976 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	f043 0302 	orr.w	r3, r3, #2
 8005964:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800596e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005976:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800597a:	2b00      	cmp	r3, #0
 800597c:	d01c      	beq.n	80059b8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f7ff fe56 	bl	8005630 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6859      	ldr	r1, [r3, #4]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	4b0d      	ldr	r3, [pc, #52]	; (80059c4 <I2C_IsErrorOccurred+0x1d4>)
 8005990:	400b      	ands	r3, r1
 8005992:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	431a      	orrs	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2220      	movs	r2, #32
 80059a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80059b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3728      	adds	r7, #40	; 0x28
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	fe00e800 	.word	0xfe00e800

080059c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	607b      	str	r3, [r7, #4]
 80059d2:	460b      	mov	r3, r1
 80059d4:	817b      	strh	r3, [r7, #10]
 80059d6:	4613      	mov	r3, r2
 80059d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059da:	897b      	ldrh	r3, [r7, #10]
 80059dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80059e0:	7a7b      	ldrb	r3, [r7, #9]
 80059e2:	041b      	lsls	r3, r3, #16
 80059e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059e8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059f6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	6a3b      	ldr	r3, [r7, #32]
 8005a00:	0d5b      	lsrs	r3, r3, #21
 8005a02:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005a06:	4b08      	ldr	r3, [pc, #32]	; (8005a28 <I2C_TransferConfig+0x60>)
 8005a08:	430b      	orrs	r3, r1
 8005a0a:	43db      	mvns	r3, r3
 8005a0c:	ea02 0103 	and.w	r1, r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005a1a:	bf00      	nop
 8005a1c:	371c      	adds	r7, #28
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	03ff63ff 	.word	0x03ff63ff

08005a2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b20      	cmp	r3, #32
 8005a40:	d138      	bne.n	8005ab4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d101      	bne.n	8005a50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	e032      	b.n	8005ab6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2224      	movs	r2, #36	; 0x24
 8005a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 0201 	bic.w	r2, r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6819      	ldr	r1, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f042 0201 	orr.w	r2, r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	e000      	b.n	8005ab6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ab4:	2302      	movs	r3, #2
  }
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b085      	sub	sp, #20
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b20      	cmp	r3, #32
 8005ad6:	d139      	bne.n	8005b4c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d101      	bne.n	8005ae6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	e033      	b.n	8005b4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2224      	movs	r2, #36	; 0x24
 8005af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f022 0201 	bic.w	r2, r2, #1
 8005b04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005b14:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	021b      	lsls	r3, r3, #8
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f042 0201 	orr.w	r2, r2, #1
 8005b36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	e000      	b.n	8005b4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b4c:	2302      	movs	r3, #2
  }
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005b5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b5c:	b08f      	sub	sp, #60	; 0x3c
 8005b5e:	af0a      	add	r7, sp, #40	; 0x28
 8005b60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e116      	b.n	8005d9a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d106      	bne.n	8005b8c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7fd f8b0 	bl	8002cec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2203      	movs	r2, #3
 8005b90:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d102      	bne.n	8005ba6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f005 ffba 	bl	800bb24 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	603b      	str	r3, [r7, #0]
 8005bb6:	687e      	ldr	r6, [r7, #4]
 8005bb8:	466d      	mov	r5, sp
 8005bba:	f106 0410 	add.w	r4, r6, #16
 8005bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005bc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005bc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005bca:	e885 0003 	stmia.w	r5, {r0, r1}
 8005bce:	1d33      	adds	r3, r6, #4
 8005bd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005bd2:	6838      	ldr	r0, [r7, #0]
 8005bd4:	f005 ff38 	bl	800ba48 <USB_CoreInit>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d005      	beq.n	8005bea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2202      	movs	r2, #2
 8005be2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e0d7      	b.n	8005d9a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2100      	movs	r1, #0
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f005 ffa8 	bl	800bb46 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	73fb      	strb	r3, [r7, #15]
 8005bfa:	e04a      	b.n	8005c92 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005bfc:	7bfa      	ldrb	r2, [r7, #15]
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	4613      	mov	r3, r2
 8005c02:	00db      	lsls	r3, r3, #3
 8005c04:	1a9b      	subs	r3, r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	440b      	add	r3, r1
 8005c0a:	333d      	adds	r3, #61	; 0x3d
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005c10:	7bfa      	ldrb	r2, [r7, #15]
 8005c12:	6879      	ldr	r1, [r7, #4]
 8005c14:	4613      	mov	r3, r2
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	1a9b      	subs	r3, r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	440b      	add	r3, r1
 8005c1e:	333c      	adds	r3, #60	; 0x3c
 8005c20:	7bfa      	ldrb	r2, [r7, #15]
 8005c22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005c24:	7bfa      	ldrb	r2, [r7, #15]
 8005c26:	7bfb      	ldrb	r3, [r7, #15]
 8005c28:	b298      	uxth	r0, r3
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	00db      	lsls	r3, r3, #3
 8005c30:	1a9b      	subs	r3, r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	440b      	add	r3, r1
 8005c36:	3342      	adds	r3, #66	; 0x42
 8005c38:	4602      	mov	r2, r0
 8005c3a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005c3c:	7bfa      	ldrb	r2, [r7, #15]
 8005c3e:	6879      	ldr	r1, [r7, #4]
 8005c40:	4613      	mov	r3, r2
 8005c42:	00db      	lsls	r3, r3, #3
 8005c44:	1a9b      	subs	r3, r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	440b      	add	r3, r1
 8005c4a:	333f      	adds	r3, #63	; 0x3f
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005c50:	7bfa      	ldrb	r2, [r7, #15]
 8005c52:	6879      	ldr	r1, [r7, #4]
 8005c54:	4613      	mov	r3, r2
 8005c56:	00db      	lsls	r3, r3, #3
 8005c58:	1a9b      	subs	r3, r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	440b      	add	r3, r1
 8005c5e:	3344      	adds	r3, #68	; 0x44
 8005c60:	2200      	movs	r2, #0
 8005c62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005c64:	7bfa      	ldrb	r2, [r7, #15]
 8005c66:	6879      	ldr	r1, [r7, #4]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	1a9b      	subs	r3, r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	440b      	add	r3, r1
 8005c72:	3348      	adds	r3, #72	; 0x48
 8005c74:	2200      	movs	r2, #0
 8005c76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005c78:	7bfa      	ldrb	r2, [r7, #15]
 8005c7a:	6879      	ldr	r1, [r7, #4]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	1a9b      	subs	r3, r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	440b      	add	r3, r1
 8005c86:	3350      	adds	r3, #80	; 0x50
 8005c88:	2200      	movs	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	73fb      	strb	r3, [r7, #15]
 8005c92:	7bfa      	ldrb	r2, [r7, #15]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d3af      	bcc.n	8005bfc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	73fb      	strb	r3, [r7, #15]
 8005ca0:	e044      	b.n	8005d2c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005ca2:	7bfa      	ldrb	r2, [r7, #15]
 8005ca4:	6879      	ldr	r1, [r7, #4]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	00db      	lsls	r3, r3, #3
 8005caa:	1a9b      	subs	r3, r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	440b      	add	r3, r1
 8005cb0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005cb8:	7bfa      	ldrb	r2, [r7, #15]
 8005cba:	6879      	ldr	r1, [r7, #4]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	1a9b      	subs	r3, r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	440b      	add	r3, r1
 8005cc6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005cca:	7bfa      	ldrb	r2, [r7, #15]
 8005ccc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005cce:	7bfa      	ldrb	r2, [r7, #15]
 8005cd0:	6879      	ldr	r1, [r7, #4]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	00db      	lsls	r3, r3, #3
 8005cd6:	1a9b      	subs	r3, r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	440b      	add	r3, r1
 8005cdc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005ce4:	7bfa      	ldrb	r2, [r7, #15]
 8005ce6:	6879      	ldr	r1, [r7, #4]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	00db      	lsls	r3, r3, #3
 8005cec:	1a9b      	subs	r3, r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	440b      	add	r3, r1
 8005cf2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005cfa:	7bfa      	ldrb	r2, [r7, #15]
 8005cfc:	6879      	ldr	r1, [r7, #4]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	00db      	lsls	r3, r3, #3
 8005d02:	1a9b      	subs	r3, r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	440b      	add	r3, r1
 8005d08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005d10:	7bfa      	ldrb	r2, [r7, #15]
 8005d12:	6879      	ldr	r1, [r7, #4]
 8005d14:	4613      	mov	r3, r2
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	1a9b      	subs	r3, r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	440b      	add	r3, r1
 8005d1e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005d22:	2200      	movs	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d26:	7bfb      	ldrb	r3, [r7, #15]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	73fb      	strb	r3, [r7, #15]
 8005d2c:	7bfa      	ldrb	r2, [r7, #15]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d3b5      	bcc.n	8005ca2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	603b      	str	r3, [r7, #0]
 8005d3c:	687e      	ldr	r6, [r7, #4]
 8005d3e:	466d      	mov	r5, sp
 8005d40:	f106 0410 	add.w	r4, r6, #16
 8005d44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005d50:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d54:	1d33      	adds	r3, r6, #4
 8005d56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d58:	6838      	ldr	r0, [r7, #0]
 8005d5a:	f005 ff41 	bl	800bbe0 <USB_DevInit>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d005      	beq.n	8005d70 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e014      	b.n	8005d9a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d102      	bne.n	8005d8e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f80b 	bl	8005da4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f006 f8fb 	bl	800bf8e <USB_DevDisconnect>

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005da4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dd2:	4b05      	ldr	r3, [pc, #20]	; (8005de8 <HAL_PCDEx_ActivateLPM+0x44>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	10000003 	.word	0x10000003

08005dec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005df4:	4b19      	ldr	r3, [pc, #100]	; (8005e5c <HAL_PWREx_ConfigSupply+0x70>)
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f003 0304 	and.w	r3, r3, #4
 8005dfc:	2b04      	cmp	r3, #4
 8005dfe:	d00a      	beq.n	8005e16 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005e00:	4b16      	ldr	r3, [pc, #88]	; (8005e5c <HAL_PWREx_ConfigSupply+0x70>)
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f003 0307 	and.w	r3, r3, #7
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d001      	beq.n	8005e12 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e01f      	b.n	8005e52 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005e12:	2300      	movs	r3, #0
 8005e14:	e01d      	b.n	8005e52 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005e16:	4b11      	ldr	r3, [pc, #68]	; (8005e5c <HAL_PWREx_ConfigSupply+0x70>)
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f023 0207 	bic.w	r2, r3, #7
 8005e1e:	490f      	ldr	r1, [pc, #60]	; (8005e5c <HAL_PWREx_ConfigSupply+0x70>)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005e26:	f7fd f987 	bl	8003138 <HAL_GetTick>
 8005e2a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e2c:	e009      	b.n	8005e42 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005e2e:	f7fd f983 	bl	8003138 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e3c:	d901      	bls.n	8005e42 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e007      	b.n	8005e52 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e42:	4b06      	ldr	r3, [pc, #24]	; (8005e5c <HAL_PWREx_ConfigSupply+0x70>)
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e4e:	d1ee      	bne.n	8005e2e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	58024800 	.word	0x58024800

08005e60 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005e60:	b480      	push	{r7}
 8005e62:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005e64:	4b05      	ldr	r3, [pc, #20]	; (8005e7c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	4a04      	ldr	r2, [pc, #16]	; (8005e7c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005e6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e6e:	60d3      	str	r3, [r2, #12]
}
 8005e70:	bf00      	nop
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	58024800 	.word	0x58024800

08005e80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b08c      	sub	sp, #48	; 0x30
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d102      	bne.n	8005e94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	f000 bc1c 	b.w	80066cc <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 8087 	beq.w	8005fb0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ea2:	4b9e      	ldr	r3, [pc, #632]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005eac:	4b9b      	ldr	r3, [pc, #620]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8005eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb4:	2b10      	cmp	r3, #16
 8005eb6:	d007      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x48>
 8005eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eba:	2b18      	cmp	r3, #24
 8005ebc:	d110      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x60>
 8005ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec0:	f003 0303 	and.w	r3, r3, #3
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d10b      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ec8:	4b94      	ldr	r3, [pc, #592]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d06c      	beq.n	8005fae <HAL_RCC_OscConfig+0x12e>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d168      	bne.n	8005fae <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e3f5      	b.n	80066cc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ee8:	d106      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x78>
 8005eea:	4b8c      	ldr	r3, [pc, #560]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a8b      	ldr	r2, [pc, #556]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8005ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ef4:	6013      	str	r3, [r2, #0]
 8005ef6:	e02e      	b.n	8005f56 <HAL_RCC_OscConfig+0xd6>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d10c      	bne.n	8005f1a <HAL_RCC_OscConfig+0x9a>
 8005f00:	4b86      	ldr	r3, [pc, #536]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a85      	ldr	r2, [pc, #532]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8005f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f0a:	6013      	str	r3, [r2, #0]
 8005f0c:	4b83      	ldr	r3, [pc, #524]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a82      	ldr	r2, [pc, #520]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8005f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f16:	6013      	str	r3, [r2, #0]
 8005f18:	e01d      	b.n	8005f56 <HAL_RCC_OscConfig+0xd6>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f22:	d10c      	bne.n	8005f3e <HAL_RCC_OscConfig+0xbe>
 8005f24:	4b7d      	ldr	r3, [pc, #500]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a7c      	ldr	r2, [pc, #496]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8005f2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f2e:	6013      	str	r3, [r2, #0]
 8005f30:	4b7a      	ldr	r3, [pc, #488]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a79      	ldr	r2, [pc, #484]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8005f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f3a:	6013      	str	r3, [r2, #0]
 8005f3c:	e00b      	b.n	8005f56 <HAL_RCC_OscConfig+0xd6>
 8005f3e:	4b77      	ldr	r3, [pc, #476]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a76      	ldr	r2, [pc, #472]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8005f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f48:	6013      	str	r3, [r2, #0]
 8005f4a:	4b74      	ldr	r3, [pc, #464]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a73      	ldr	r2, [pc, #460]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8005f50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f54:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d013      	beq.n	8005f86 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f5e:	f7fd f8eb 	bl	8003138 <HAL_GetTick>
 8005f62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f64:	e008      	b.n	8005f78 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f66:	f7fd f8e7 	bl	8003138 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	2b64      	cmp	r3, #100	; 0x64
 8005f72:	d901      	bls.n	8005f78 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e3a9      	b.n	80066cc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f78:	4b68      	ldr	r3, [pc, #416]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0f0      	beq.n	8005f66 <HAL_RCC_OscConfig+0xe6>
 8005f84:	e014      	b.n	8005fb0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f86:	f7fd f8d7 	bl	8003138 <HAL_GetTick>
 8005f8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f8c:	e008      	b.n	8005fa0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f8e:	f7fd f8d3 	bl	8003138 <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	2b64      	cmp	r3, #100	; 0x64
 8005f9a:	d901      	bls.n	8005fa0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e395      	b.n	80066cc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005fa0:	4b5e      	ldr	r3, [pc, #376]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1f0      	bne.n	8005f8e <HAL_RCC_OscConfig+0x10e>
 8005fac:	e000      	b.n	8005fb0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0302 	and.w	r3, r3, #2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 80ca 	beq.w	8006152 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fbe:	4b57      	ldr	r3, [pc, #348]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fc6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005fc8:	4b54      	ldr	r3, [pc, #336]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8005fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fcc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d007      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x164>
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	2b18      	cmp	r3, #24
 8005fd8:	d156      	bne.n	8006088 <HAL_RCC_OscConfig+0x208>
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	f003 0303 	and.w	r3, r3, #3
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d151      	bne.n	8006088 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fe4:	4b4d      	ldr	r3, [pc, #308]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0304 	and.w	r3, r3, #4
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d005      	beq.n	8005ffc <HAL_RCC_OscConfig+0x17c>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e367      	b.n	80066cc <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005ffc:	4b47      	ldr	r3, [pc, #284]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f023 0219 	bic.w	r2, r3, #25
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	4944      	ldr	r1, [pc, #272]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 800600a:	4313      	orrs	r3, r2
 800600c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800600e:	f7fd f893 	bl	8003138 <HAL_GetTick>
 8006012:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006014:	e008      	b.n	8006028 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006016:	f7fd f88f 	bl	8003138 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d901      	bls.n	8006028 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e351      	b.n	80066cc <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006028:	4b3c      	ldr	r3, [pc, #240]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0304 	and.w	r3, r3, #4
 8006030:	2b00      	cmp	r3, #0
 8006032:	d0f0      	beq.n	8006016 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006034:	f7fd f8b0 	bl	8003198 <HAL_GetREVID>
 8006038:	4603      	mov	r3, r0
 800603a:	f241 0203 	movw	r2, #4099	; 0x1003
 800603e:	4293      	cmp	r3, r2
 8006040:	d817      	bhi.n	8006072 <HAL_RCC_OscConfig+0x1f2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	2b40      	cmp	r3, #64	; 0x40
 8006048:	d108      	bne.n	800605c <HAL_RCC_OscConfig+0x1dc>
 800604a:	4b34      	ldr	r3, [pc, #208]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006052:	4a32      	ldr	r2, [pc, #200]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8006054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006058:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800605a:	e07a      	b.n	8006152 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800605c:	4b2f      	ldr	r3, [pc, #188]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	031b      	lsls	r3, r3, #12
 800606a:	492c      	ldr	r1, [pc, #176]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 800606c:	4313      	orrs	r3, r2
 800606e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006070:	e06f      	b.n	8006152 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006072:	4b2a      	ldr	r3, [pc, #168]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	061b      	lsls	r3, r3, #24
 8006080:	4926      	ldr	r1, [pc, #152]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8006082:	4313      	orrs	r3, r2
 8006084:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006086:	e064      	b.n	8006152 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d047      	beq.n	8006120 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006090:	4b22      	ldr	r3, [pc, #136]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f023 0219 	bic.w	r2, r3, #25
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	491f      	ldr	r1, [pc, #124]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a2:	f7fd f849 	bl	8003138 <HAL_GetTick>
 80060a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060a8:	e008      	b.n	80060bc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060aa:	f7fd f845 	bl	8003138 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d901      	bls.n	80060bc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e307      	b.n	80066cc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060bc:	4b17      	ldr	r3, [pc, #92]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0304 	and.w	r3, r3, #4
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d0f0      	beq.n	80060aa <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060c8:	f7fd f866 	bl	8003198 <HAL_GetREVID>
 80060cc:	4603      	mov	r3, r0
 80060ce:	f241 0203 	movw	r2, #4099	; 0x1003
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d817      	bhi.n	8006106 <HAL_RCC_OscConfig+0x286>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	2b40      	cmp	r3, #64	; 0x40
 80060dc:	d108      	bne.n	80060f0 <HAL_RCC_OscConfig+0x270>
 80060de:	4b0f      	ldr	r3, [pc, #60]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80060e6:	4a0d      	ldr	r2, [pc, #52]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 80060e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060ec:	6053      	str	r3, [r2, #4]
 80060ee:	e030      	b.n	8006152 <HAL_RCC_OscConfig+0x2d2>
 80060f0:	4b0a      	ldr	r3, [pc, #40]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	031b      	lsls	r3, r3, #12
 80060fe:	4907      	ldr	r1, [pc, #28]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8006100:	4313      	orrs	r3, r2
 8006102:	604b      	str	r3, [r1, #4]
 8006104:	e025      	b.n	8006152 <HAL_RCC_OscConfig+0x2d2>
 8006106:	4b05      	ldr	r3, [pc, #20]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	061b      	lsls	r3, r3, #24
 8006114:	4901      	ldr	r1, [pc, #4]	; (800611c <HAL_RCC_OscConfig+0x29c>)
 8006116:	4313      	orrs	r3, r2
 8006118:	604b      	str	r3, [r1, #4]
 800611a:	e01a      	b.n	8006152 <HAL_RCC_OscConfig+0x2d2>
 800611c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006120:	4b9e      	ldr	r3, [pc, #632]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a9d      	ldr	r2, [pc, #628]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 8006126:	f023 0301 	bic.w	r3, r3, #1
 800612a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800612c:	f7fd f804 	bl	8003138 <HAL_GetTick>
 8006130:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006132:	e008      	b.n	8006146 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006134:	f7fd f800 	bl	8003138 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e2c2      	b.n	80066cc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006146:	4b95      	ldr	r3, [pc, #596]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0304 	and.w	r3, r3, #4
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1f0      	bne.n	8006134 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0310 	and.w	r3, r3, #16
 800615a:	2b00      	cmp	r3, #0
 800615c:	f000 80a9 	beq.w	80062b2 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006160:	4b8e      	ldr	r3, [pc, #568]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006168:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800616a:	4b8c      	ldr	r3, [pc, #560]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 800616c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	2b08      	cmp	r3, #8
 8006174:	d007      	beq.n	8006186 <HAL_RCC_OscConfig+0x306>
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	2b18      	cmp	r3, #24
 800617a:	d13a      	bne.n	80061f2 <HAL_RCC_OscConfig+0x372>
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	f003 0303 	and.w	r3, r3, #3
 8006182:	2b01      	cmp	r3, #1
 8006184:	d135      	bne.n	80061f2 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006186:	4b85      	ldr	r3, [pc, #532]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800618e:	2b00      	cmp	r3, #0
 8006190:	d005      	beq.n	800619e <HAL_RCC_OscConfig+0x31e>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	2b80      	cmp	r3, #128	; 0x80
 8006198:	d001      	beq.n	800619e <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e296      	b.n	80066cc <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800619e:	f7fc fffb 	bl	8003198 <HAL_GetREVID>
 80061a2:	4603      	mov	r3, r0
 80061a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d817      	bhi.n	80061dc <HAL_RCC_OscConfig+0x35c>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	2b20      	cmp	r3, #32
 80061b2:	d108      	bne.n	80061c6 <HAL_RCC_OscConfig+0x346>
 80061b4:	4b79      	ldr	r3, [pc, #484]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80061bc:	4a77      	ldr	r2, [pc, #476]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 80061be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061c2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061c4:	e075      	b.n	80062b2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061c6:	4b75      	ldr	r3, [pc, #468]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	069b      	lsls	r3, r3, #26
 80061d4:	4971      	ldr	r1, [pc, #452]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061da:	e06a      	b.n	80062b2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061dc:	4b6f      	ldr	r3, [pc, #444]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a1b      	ldr	r3, [r3, #32]
 80061e8:	061b      	lsls	r3, r3, #24
 80061ea:	496c      	ldr	r1, [pc, #432]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061f0:	e05f      	b.n	80062b2 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d042      	beq.n	8006280 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80061fa:	4b68      	ldr	r3, [pc, #416]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a67      	ldr	r2, [pc, #412]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 8006200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006206:	f7fc ff97 	bl	8003138 <HAL_GetTick>
 800620a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800620c:	e008      	b.n	8006220 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800620e:	f7fc ff93 	bl	8003138 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	2b02      	cmp	r3, #2
 800621a:	d901      	bls.n	8006220 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e255      	b.n	80066cc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006220:	4b5e      	ldr	r3, [pc, #376]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006228:	2b00      	cmp	r3, #0
 800622a:	d0f0      	beq.n	800620e <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800622c:	f7fc ffb4 	bl	8003198 <HAL_GetREVID>
 8006230:	4603      	mov	r3, r0
 8006232:	f241 0203 	movw	r2, #4099	; 0x1003
 8006236:	4293      	cmp	r3, r2
 8006238:	d817      	bhi.n	800626a <HAL_RCC_OscConfig+0x3ea>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	2b20      	cmp	r3, #32
 8006240:	d108      	bne.n	8006254 <HAL_RCC_OscConfig+0x3d4>
 8006242:	4b56      	ldr	r3, [pc, #344]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800624a:	4a54      	ldr	r2, [pc, #336]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 800624c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006250:	6053      	str	r3, [r2, #4]
 8006252:	e02e      	b.n	80062b2 <HAL_RCC_OscConfig+0x432>
 8006254:	4b51      	ldr	r3, [pc, #324]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	069b      	lsls	r3, r3, #26
 8006262:	494e      	ldr	r1, [pc, #312]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 8006264:	4313      	orrs	r3, r2
 8006266:	604b      	str	r3, [r1, #4]
 8006268:	e023      	b.n	80062b2 <HAL_RCC_OscConfig+0x432>
 800626a:	4b4c      	ldr	r3, [pc, #304]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	061b      	lsls	r3, r3, #24
 8006278:	4948      	ldr	r1, [pc, #288]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 800627a:	4313      	orrs	r3, r2
 800627c:	60cb      	str	r3, [r1, #12]
 800627e:	e018      	b.n	80062b2 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006280:	4b46      	ldr	r3, [pc, #280]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a45      	ldr	r2, [pc, #276]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 8006286:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800628a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800628c:	f7fc ff54 	bl	8003138 <HAL_GetTick>
 8006290:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006292:	e008      	b.n	80062a6 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006294:	f7fc ff50 	bl	8003138 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d901      	bls.n	80062a6 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e212      	b.n	80066cc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80062a6:	4b3d      	ldr	r3, [pc, #244]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1f0      	bne.n	8006294 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0308 	and.w	r3, r3, #8
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d036      	beq.n	800632c <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d019      	beq.n	80062fa <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062c6:	4b35      	ldr	r3, [pc, #212]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 80062c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ca:	4a34      	ldr	r2, [pc, #208]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 80062cc:	f043 0301 	orr.w	r3, r3, #1
 80062d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062d2:	f7fc ff31 	bl	8003138 <HAL_GetTick>
 80062d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80062d8:	e008      	b.n	80062ec <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062da:	f7fc ff2d 	bl	8003138 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d901      	bls.n	80062ec <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e1ef      	b.n	80066cc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80062ec:	4b2b      	ldr	r3, [pc, #172]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 80062ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d0f0      	beq.n	80062da <HAL_RCC_OscConfig+0x45a>
 80062f8:	e018      	b.n	800632c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062fa:	4b28      	ldr	r3, [pc, #160]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 80062fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062fe:	4a27      	ldr	r2, [pc, #156]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 8006300:	f023 0301 	bic.w	r3, r3, #1
 8006304:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006306:	f7fc ff17 	bl	8003138 <HAL_GetTick>
 800630a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800630c:	e008      	b.n	8006320 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800630e:	f7fc ff13 	bl	8003138 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	2b02      	cmp	r3, #2
 800631a:	d901      	bls.n	8006320 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e1d5      	b.n	80066cc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006320:	4b1e      	ldr	r3, [pc, #120]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 8006322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1f0      	bne.n	800630e <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0320 	and.w	r3, r3, #32
 8006334:	2b00      	cmp	r3, #0
 8006336:	d039      	beq.n	80063ac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d019      	beq.n	8006374 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006340:	4b16      	ldr	r3, [pc, #88]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a15      	ldr	r2, [pc, #84]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 8006346:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800634a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800634c:	f7fc fef4 	bl	8003138 <HAL_GetTick>
 8006350:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006352:	e008      	b.n	8006366 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006354:	f7fc fef0 	bl	8003138 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	2b02      	cmp	r3, #2
 8006360:	d901      	bls.n	8006366 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e1b2      	b.n	80066cc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006366:	4b0d      	ldr	r3, [pc, #52]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d0f0      	beq.n	8006354 <HAL_RCC_OscConfig+0x4d4>
 8006372:	e01b      	b.n	80063ac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006374:	4b09      	ldr	r3, [pc, #36]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a08      	ldr	r2, [pc, #32]	; (800639c <HAL_RCC_OscConfig+0x51c>)
 800637a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800637e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006380:	f7fc feda 	bl	8003138 <HAL_GetTick>
 8006384:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006386:	e00b      	b.n	80063a0 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006388:	f7fc fed6 	bl	8003138 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b02      	cmp	r3, #2
 8006394:	d904      	bls.n	80063a0 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e198      	b.n	80066cc <HAL_RCC_OscConfig+0x84c>
 800639a:	bf00      	nop
 800639c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063a0:	4ba3      	ldr	r3, [pc, #652]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1ed      	bne.n	8006388 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0304 	and.w	r3, r3, #4
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 8081 	beq.w	80064bc <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80063ba:	4b9e      	ldr	r3, [pc, #632]	; (8006634 <HAL_RCC_OscConfig+0x7b4>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a9d      	ldr	r2, [pc, #628]	; (8006634 <HAL_RCC_OscConfig+0x7b4>)
 80063c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063c6:	f7fc feb7 	bl	8003138 <HAL_GetTick>
 80063ca:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063cc:	e008      	b.n	80063e0 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80063ce:	f7fc feb3 	bl	8003138 <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	2b64      	cmp	r3, #100	; 0x64
 80063da:	d901      	bls.n	80063e0 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e175      	b.n	80066cc <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063e0:	4b94      	ldr	r3, [pc, #592]	; (8006634 <HAL_RCC_OscConfig+0x7b4>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d0f0      	beq.n	80063ce <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d106      	bne.n	8006402 <HAL_RCC_OscConfig+0x582>
 80063f4:	4b8e      	ldr	r3, [pc, #568]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 80063f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f8:	4a8d      	ldr	r2, [pc, #564]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 80063fa:	f043 0301 	orr.w	r3, r3, #1
 80063fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006400:	e02d      	b.n	800645e <HAL_RCC_OscConfig+0x5de>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10c      	bne.n	8006424 <HAL_RCC_OscConfig+0x5a4>
 800640a:	4b89      	ldr	r3, [pc, #548]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 800640c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800640e:	4a88      	ldr	r2, [pc, #544]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 8006410:	f023 0301 	bic.w	r3, r3, #1
 8006414:	6713      	str	r3, [r2, #112]	; 0x70
 8006416:	4b86      	ldr	r3, [pc, #536]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 8006418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800641a:	4a85      	ldr	r2, [pc, #532]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 800641c:	f023 0304 	bic.w	r3, r3, #4
 8006420:	6713      	str	r3, [r2, #112]	; 0x70
 8006422:	e01c      	b.n	800645e <HAL_RCC_OscConfig+0x5de>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	2b05      	cmp	r3, #5
 800642a:	d10c      	bne.n	8006446 <HAL_RCC_OscConfig+0x5c6>
 800642c:	4b80      	ldr	r3, [pc, #512]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 800642e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006430:	4a7f      	ldr	r2, [pc, #508]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 8006432:	f043 0304 	orr.w	r3, r3, #4
 8006436:	6713      	str	r3, [r2, #112]	; 0x70
 8006438:	4b7d      	ldr	r3, [pc, #500]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 800643a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800643c:	4a7c      	ldr	r2, [pc, #496]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 800643e:	f043 0301 	orr.w	r3, r3, #1
 8006442:	6713      	str	r3, [r2, #112]	; 0x70
 8006444:	e00b      	b.n	800645e <HAL_RCC_OscConfig+0x5de>
 8006446:	4b7a      	ldr	r3, [pc, #488]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 8006448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800644a:	4a79      	ldr	r2, [pc, #484]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 800644c:	f023 0301 	bic.w	r3, r3, #1
 8006450:	6713      	str	r3, [r2, #112]	; 0x70
 8006452:	4b77      	ldr	r3, [pc, #476]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 8006454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006456:	4a76      	ldr	r2, [pc, #472]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 8006458:	f023 0304 	bic.w	r3, r3, #4
 800645c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d015      	beq.n	8006492 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006466:	f7fc fe67 	bl	8003138 <HAL_GetTick>
 800646a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800646c:	e00a      	b.n	8006484 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800646e:	f7fc fe63 	bl	8003138 <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	f241 3288 	movw	r2, #5000	; 0x1388
 800647c:	4293      	cmp	r3, r2
 800647e:	d901      	bls.n	8006484 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e123      	b.n	80066cc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006484:	4b6a      	ldr	r3, [pc, #424]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 8006486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	2b00      	cmp	r3, #0
 800648e:	d0ee      	beq.n	800646e <HAL_RCC_OscConfig+0x5ee>
 8006490:	e014      	b.n	80064bc <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006492:	f7fc fe51 	bl	8003138 <HAL_GetTick>
 8006496:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006498:	e00a      	b.n	80064b0 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800649a:	f7fc fe4d 	bl	8003138 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d901      	bls.n	80064b0 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e10d      	b.n	80066cc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80064b0:	4b5f      	ldr	r3, [pc, #380]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 80064b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b4:	f003 0302 	and.w	r3, r3, #2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1ee      	bne.n	800649a <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 8102 	beq.w	80066ca <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80064c6:	4b5a      	ldr	r3, [pc, #360]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064ce:	2b18      	cmp	r3, #24
 80064d0:	f000 80bd 	beq.w	800664e <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d8:	2b02      	cmp	r3, #2
 80064da:	f040 8095 	bne.w	8006608 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064de:	4b54      	ldr	r3, [pc, #336]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a53      	ldr	r2, [pc, #332]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 80064e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ea:	f7fc fe25 	bl	8003138 <HAL_GetTick>
 80064ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064f0:	e008      	b.n	8006504 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064f2:	f7fc fe21 	bl	8003138 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d901      	bls.n	8006504 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e0e3      	b.n	80066cc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006504:	4b4a      	ldr	r3, [pc, #296]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1f0      	bne.n	80064f2 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006510:	4b47      	ldr	r3, [pc, #284]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 8006512:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006514:	4b48      	ldr	r3, [pc, #288]	; (8006638 <HAL_RCC_OscConfig+0x7b8>)
 8006516:	4013      	ands	r3, r2
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006520:	0112      	lsls	r2, r2, #4
 8006522:	430a      	orrs	r2, r1
 8006524:	4942      	ldr	r1, [pc, #264]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 8006526:	4313      	orrs	r3, r2
 8006528:	628b      	str	r3, [r1, #40]	; 0x28
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652e:	3b01      	subs	r3, #1
 8006530:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006538:	3b01      	subs	r3, #1
 800653a:	025b      	lsls	r3, r3, #9
 800653c:	b29b      	uxth	r3, r3
 800653e:	431a      	orrs	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006544:	3b01      	subs	r3, #1
 8006546:	041b      	lsls	r3, r3, #16
 8006548:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800654c:	431a      	orrs	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006552:	3b01      	subs	r3, #1
 8006554:	061b      	lsls	r3, r3, #24
 8006556:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800655a:	4935      	ldr	r1, [pc, #212]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 800655c:	4313      	orrs	r3, r2
 800655e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006560:	4b33      	ldr	r3, [pc, #204]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 8006562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006564:	4a32      	ldr	r2, [pc, #200]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 8006566:	f023 0301 	bic.w	r3, r3, #1
 800656a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800656c:	4b30      	ldr	r3, [pc, #192]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 800656e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006570:	4b32      	ldr	r3, [pc, #200]	; (800663c <HAL_RCC_OscConfig+0x7bc>)
 8006572:	4013      	ands	r3, r2
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006578:	00d2      	lsls	r2, r2, #3
 800657a:	492d      	ldr	r1, [pc, #180]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 800657c:	4313      	orrs	r3, r2
 800657e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006580:	4b2b      	ldr	r3, [pc, #172]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 8006582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006584:	f023 020c 	bic.w	r2, r3, #12
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	4928      	ldr	r1, [pc, #160]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 800658e:	4313      	orrs	r3, r2
 8006590:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006592:	4b27      	ldr	r3, [pc, #156]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 8006594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006596:	f023 0202 	bic.w	r2, r3, #2
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800659e:	4924      	ldr	r1, [pc, #144]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80065a4:	4b22      	ldr	r3, [pc, #136]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 80065a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a8:	4a21      	ldr	r2, [pc, #132]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 80065aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065b0:	4b1f      	ldr	r3, [pc, #124]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 80065b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b4:	4a1e      	ldr	r2, [pc, #120]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 80065b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80065bc:	4b1c      	ldr	r3, [pc, #112]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 80065be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c0:	4a1b      	ldr	r2, [pc, #108]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 80065c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80065c8:	4b19      	ldr	r3, [pc, #100]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 80065ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065cc:	4a18      	ldr	r2, [pc, #96]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 80065ce:	f043 0301 	orr.w	r3, r3, #1
 80065d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065d4:	4b16      	ldr	r3, [pc, #88]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a15      	ldr	r2, [pc, #84]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 80065da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e0:	f7fc fdaa 	bl	8003138 <HAL_GetTick>
 80065e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065e6:	e008      	b.n	80065fa <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065e8:	f7fc fda6 	bl	8003138 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d901      	bls.n	80065fa <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e068      	b.n	80066cc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065fa:	4b0d      	ldr	r3, [pc, #52]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d0f0      	beq.n	80065e8 <HAL_RCC_OscConfig+0x768>
 8006606:	e060      	b.n	80066ca <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006608:	4b09      	ldr	r3, [pc, #36]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a08      	ldr	r2, [pc, #32]	; (8006630 <HAL_RCC_OscConfig+0x7b0>)
 800660e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006614:	f7fc fd90 	bl	8003138 <HAL_GetTick>
 8006618:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800661a:	e011      	b.n	8006640 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800661c:	f7fc fd8c 	bl	8003138 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	2b02      	cmp	r3, #2
 8006628:	d90a      	bls.n	8006640 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e04e      	b.n	80066cc <HAL_RCC_OscConfig+0x84c>
 800662e:	bf00      	nop
 8006630:	58024400 	.word	0x58024400
 8006634:	58024800 	.word	0x58024800
 8006638:	fffffc0c 	.word	0xfffffc0c
 800663c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006640:	4b24      	ldr	r3, [pc, #144]	; (80066d4 <HAL_RCC_OscConfig+0x854>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1e7      	bne.n	800661c <HAL_RCC_OscConfig+0x79c>
 800664c:	e03d      	b.n	80066ca <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800664e:	4b21      	ldr	r3, [pc, #132]	; (80066d4 <HAL_RCC_OscConfig+0x854>)
 8006650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006652:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006654:	4b1f      	ldr	r3, [pc, #124]	; (80066d4 <HAL_RCC_OscConfig+0x854>)
 8006656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006658:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	2b01      	cmp	r3, #1
 8006660:	d031      	beq.n	80066c6 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	f003 0203 	and.w	r2, r3, #3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800666c:	429a      	cmp	r2, r3
 800666e:	d12a      	bne.n	80066c6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	091b      	lsrs	r3, r3, #4
 8006674:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800667c:	429a      	cmp	r2, r3
 800667e:	d122      	bne.n	80066c6 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800668c:	429a      	cmp	r2, r3
 800668e:	d11a      	bne.n	80066c6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	0a5b      	lsrs	r3, r3, #9
 8006694:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800669e:	429a      	cmp	r2, r3
 80066a0:	d111      	bne.n	80066c6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	0c1b      	lsrs	r3, r3, #16
 80066a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ae:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d108      	bne.n	80066c6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	0e1b      	lsrs	r3, r3, #24
 80066b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d001      	beq.n	80066ca <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e000      	b.n	80066cc <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3730      	adds	r7, #48	; 0x30
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	58024400 	.word	0x58024400

080066d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e19c      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066ec:	4b8a      	ldr	r3, [pc, #552]	; (8006918 <HAL_RCC_ClockConfig+0x240>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 030f 	and.w	r3, r3, #15
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d910      	bls.n	800671c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066fa:	4b87      	ldr	r3, [pc, #540]	; (8006918 <HAL_RCC_ClockConfig+0x240>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f023 020f 	bic.w	r2, r3, #15
 8006702:	4985      	ldr	r1, [pc, #532]	; (8006918 <HAL_RCC_ClockConfig+0x240>)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	4313      	orrs	r3, r2
 8006708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800670a:	4b83      	ldr	r3, [pc, #524]	; (8006918 <HAL_RCC_ClockConfig+0x240>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d001      	beq.n	800671c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e184      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0304 	and.w	r3, r3, #4
 8006724:	2b00      	cmp	r3, #0
 8006726:	d010      	beq.n	800674a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691a      	ldr	r2, [r3, #16]
 800672c:	4b7b      	ldr	r3, [pc, #492]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006734:	429a      	cmp	r2, r3
 8006736:	d908      	bls.n	800674a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006738:	4b78      	ldr	r3, [pc, #480]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	4975      	ldr	r1, [pc, #468]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 8006746:	4313      	orrs	r3, r2
 8006748:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0308 	and.w	r3, r3, #8
 8006752:	2b00      	cmp	r3, #0
 8006754:	d010      	beq.n	8006778 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	695a      	ldr	r2, [r3, #20]
 800675a:	4b70      	ldr	r3, [pc, #448]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006762:	429a      	cmp	r2, r3
 8006764:	d908      	bls.n	8006778 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006766:	4b6d      	ldr	r3, [pc, #436]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	496a      	ldr	r1, [pc, #424]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 8006774:	4313      	orrs	r3, r2
 8006776:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0310 	and.w	r3, r3, #16
 8006780:	2b00      	cmp	r3, #0
 8006782:	d010      	beq.n	80067a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	699a      	ldr	r2, [r3, #24]
 8006788:	4b64      	ldr	r3, [pc, #400]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006790:	429a      	cmp	r2, r3
 8006792:	d908      	bls.n	80067a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006794:	4b61      	ldr	r3, [pc, #388]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	495e      	ldr	r1, [pc, #376]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0320 	and.w	r3, r3, #32
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d010      	beq.n	80067d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	69da      	ldr	r2, [r3, #28]
 80067b6:	4b59      	ldr	r3, [pc, #356]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067be:	429a      	cmp	r2, r3
 80067c0:	d908      	bls.n	80067d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80067c2:	4b56      	ldr	r3, [pc, #344]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	4953      	ldr	r1, [pc, #332]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d010      	beq.n	8006802 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68da      	ldr	r2, [r3, #12]
 80067e4:	4b4d      	ldr	r3, [pc, #308]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	f003 030f 	and.w	r3, r3, #15
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d908      	bls.n	8006802 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067f0:	4b4a      	ldr	r3, [pc, #296]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	f023 020f 	bic.w	r2, r3, #15
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	4947      	ldr	r1, [pc, #284]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	2b00      	cmp	r3, #0
 800680c:	d055      	beq.n	80068ba <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800680e:	4b43      	ldr	r3, [pc, #268]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	4940      	ldr	r1, [pc, #256]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 800681c:	4313      	orrs	r3, r2
 800681e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	2b02      	cmp	r3, #2
 8006826:	d107      	bne.n	8006838 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006828:	4b3c      	ldr	r3, [pc, #240]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d121      	bne.n	8006878 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e0f6      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	2b03      	cmp	r3, #3
 800683e:	d107      	bne.n	8006850 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006840:	4b36      	ldr	r3, [pc, #216]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d115      	bne.n	8006878 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e0ea      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d107      	bne.n	8006868 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006858:	4b30      	ldr	r3, [pc, #192]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006860:	2b00      	cmp	r3, #0
 8006862:	d109      	bne.n	8006878 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e0de      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006868:	4b2c      	ldr	r3, [pc, #176]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e0d6      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006878:	4b28      	ldr	r3, [pc, #160]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	f023 0207 	bic.w	r2, r3, #7
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	4925      	ldr	r1, [pc, #148]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 8006886:	4313      	orrs	r3, r2
 8006888:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800688a:	f7fc fc55 	bl	8003138 <HAL_GetTick>
 800688e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006890:	e00a      	b.n	80068a8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006892:	f7fc fc51 	bl	8003138 <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	f241 3288 	movw	r2, #5000	; 0x1388
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d901      	bls.n	80068a8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e0be      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068a8:	4b1c      	ldr	r3, [pc, #112]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	00db      	lsls	r3, r3, #3
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d1eb      	bne.n	8006892 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d010      	beq.n	80068e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68da      	ldr	r2, [r3, #12]
 80068ca:	4b14      	ldr	r3, [pc, #80]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	f003 030f 	and.w	r3, r3, #15
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d208      	bcs.n	80068e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068d6:	4b11      	ldr	r3, [pc, #68]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	f023 020f 	bic.w	r2, r3, #15
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	490e      	ldr	r1, [pc, #56]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068e8:	4b0b      	ldr	r3, [pc, #44]	; (8006918 <HAL_RCC_ClockConfig+0x240>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 030f 	and.w	r3, r3, #15
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d214      	bcs.n	8006920 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068f6:	4b08      	ldr	r3, [pc, #32]	; (8006918 <HAL_RCC_ClockConfig+0x240>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f023 020f 	bic.w	r2, r3, #15
 80068fe:	4906      	ldr	r1, [pc, #24]	; (8006918 <HAL_RCC_ClockConfig+0x240>)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	4313      	orrs	r3, r2
 8006904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006906:	4b04      	ldr	r3, [pc, #16]	; (8006918 <HAL_RCC_ClockConfig+0x240>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 030f 	and.w	r3, r3, #15
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	429a      	cmp	r2, r3
 8006912:	d005      	beq.n	8006920 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e086      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>
 8006918:	52002000 	.word	0x52002000
 800691c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	2b00      	cmp	r3, #0
 800692a:	d010      	beq.n	800694e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691a      	ldr	r2, [r3, #16]
 8006930:	4b3f      	ldr	r3, [pc, #252]	; (8006a30 <HAL_RCC_ClockConfig+0x358>)
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006938:	429a      	cmp	r2, r3
 800693a:	d208      	bcs.n	800694e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800693c:	4b3c      	ldr	r3, [pc, #240]	; (8006a30 <HAL_RCC_ClockConfig+0x358>)
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	4939      	ldr	r1, [pc, #228]	; (8006a30 <HAL_RCC_ClockConfig+0x358>)
 800694a:	4313      	orrs	r3, r2
 800694c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0308 	and.w	r3, r3, #8
 8006956:	2b00      	cmp	r3, #0
 8006958:	d010      	beq.n	800697c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	695a      	ldr	r2, [r3, #20]
 800695e:	4b34      	ldr	r3, [pc, #208]	; (8006a30 <HAL_RCC_ClockConfig+0x358>)
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006966:	429a      	cmp	r2, r3
 8006968:	d208      	bcs.n	800697c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800696a:	4b31      	ldr	r3, [pc, #196]	; (8006a30 <HAL_RCC_ClockConfig+0x358>)
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	492e      	ldr	r1, [pc, #184]	; (8006a30 <HAL_RCC_ClockConfig+0x358>)
 8006978:	4313      	orrs	r3, r2
 800697a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0310 	and.w	r3, r3, #16
 8006984:	2b00      	cmp	r3, #0
 8006986:	d010      	beq.n	80069aa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	699a      	ldr	r2, [r3, #24]
 800698c:	4b28      	ldr	r3, [pc, #160]	; (8006a30 <HAL_RCC_ClockConfig+0x358>)
 800698e:	69db      	ldr	r3, [r3, #28]
 8006990:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006994:	429a      	cmp	r2, r3
 8006996:	d208      	bcs.n	80069aa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006998:	4b25      	ldr	r3, [pc, #148]	; (8006a30 <HAL_RCC_ClockConfig+0x358>)
 800699a:	69db      	ldr	r3, [r3, #28]
 800699c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	4922      	ldr	r1, [pc, #136]	; (8006a30 <HAL_RCC_ClockConfig+0x358>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0320 	and.w	r3, r3, #32
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d010      	beq.n	80069d8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	69da      	ldr	r2, [r3, #28]
 80069ba:	4b1d      	ldr	r3, [pc, #116]	; (8006a30 <HAL_RCC_ClockConfig+0x358>)
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d208      	bcs.n	80069d8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80069c6:	4b1a      	ldr	r3, [pc, #104]	; (8006a30 <HAL_RCC_ClockConfig+0x358>)
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	4917      	ldr	r1, [pc, #92]	; (8006a30 <HAL_RCC_ClockConfig+0x358>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80069d8:	f000 f834 	bl	8006a44 <HAL_RCC_GetSysClockFreq>
 80069dc:	4602      	mov	r2, r0
 80069de:	4b14      	ldr	r3, [pc, #80]	; (8006a30 <HAL_RCC_ClockConfig+0x358>)
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	0a1b      	lsrs	r3, r3, #8
 80069e4:	f003 030f 	and.w	r3, r3, #15
 80069e8:	4912      	ldr	r1, [pc, #72]	; (8006a34 <HAL_RCC_ClockConfig+0x35c>)
 80069ea:	5ccb      	ldrb	r3, [r1, r3]
 80069ec:	f003 031f 	and.w	r3, r3, #31
 80069f0:	fa22 f303 	lsr.w	r3, r2, r3
 80069f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069f6:	4b0e      	ldr	r3, [pc, #56]	; (8006a30 <HAL_RCC_ClockConfig+0x358>)
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	f003 030f 	and.w	r3, r3, #15
 80069fe:	4a0d      	ldr	r2, [pc, #52]	; (8006a34 <HAL_RCC_ClockConfig+0x35c>)
 8006a00:	5cd3      	ldrb	r3, [r2, r3]
 8006a02:	f003 031f 	and.w	r3, r3, #31
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	fa22 f303 	lsr.w	r3, r2, r3
 8006a0c:	4a0a      	ldr	r2, [pc, #40]	; (8006a38 <HAL_RCC_ClockConfig+0x360>)
 8006a0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a10:	4a0a      	ldr	r2, [pc, #40]	; (8006a3c <HAL_RCC_ClockConfig+0x364>)
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006a16:	4b0a      	ldr	r3, [pc, #40]	; (8006a40 <HAL_RCC_ClockConfig+0x368>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7fc fb42 	bl	80030a4 <HAL_InitTick>
 8006a20:	4603      	mov	r3, r0
 8006a22:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3718      	adds	r7, #24
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	58024400 	.word	0x58024400
 8006a34:	0800f94c 	.word	0x0800f94c
 8006a38:	24000028 	.word	0x24000028
 8006a3c:	24000024 	.word	0x24000024
 8006a40:	2400002c 	.word	0x2400002c

08006a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b089      	sub	sp, #36	; 0x24
 8006a48:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a4a:	4bb3      	ldr	r3, [pc, #716]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a52:	2b18      	cmp	r3, #24
 8006a54:	f200 8155 	bhi.w	8006d02 <HAL_RCC_GetSysClockFreq+0x2be>
 8006a58:	a201      	add	r2, pc, #4	; (adr r2, 8006a60 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5e:	bf00      	nop
 8006a60:	08006ac5 	.word	0x08006ac5
 8006a64:	08006d03 	.word	0x08006d03
 8006a68:	08006d03 	.word	0x08006d03
 8006a6c:	08006d03 	.word	0x08006d03
 8006a70:	08006d03 	.word	0x08006d03
 8006a74:	08006d03 	.word	0x08006d03
 8006a78:	08006d03 	.word	0x08006d03
 8006a7c:	08006d03 	.word	0x08006d03
 8006a80:	08006aeb 	.word	0x08006aeb
 8006a84:	08006d03 	.word	0x08006d03
 8006a88:	08006d03 	.word	0x08006d03
 8006a8c:	08006d03 	.word	0x08006d03
 8006a90:	08006d03 	.word	0x08006d03
 8006a94:	08006d03 	.word	0x08006d03
 8006a98:	08006d03 	.word	0x08006d03
 8006a9c:	08006d03 	.word	0x08006d03
 8006aa0:	08006af1 	.word	0x08006af1
 8006aa4:	08006d03 	.word	0x08006d03
 8006aa8:	08006d03 	.word	0x08006d03
 8006aac:	08006d03 	.word	0x08006d03
 8006ab0:	08006d03 	.word	0x08006d03
 8006ab4:	08006d03 	.word	0x08006d03
 8006ab8:	08006d03 	.word	0x08006d03
 8006abc:	08006d03 	.word	0x08006d03
 8006ac0:	08006af7 	.word	0x08006af7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ac4:	4b94      	ldr	r3, [pc, #592]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0320 	and.w	r3, r3, #32
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d009      	beq.n	8006ae4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ad0:	4b91      	ldr	r3, [pc, #580]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	08db      	lsrs	r3, r3, #3
 8006ad6:	f003 0303 	and.w	r3, r3, #3
 8006ada:	4a90      	ldr	r2, [pc, #576]	; (8006d1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006adc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006ae2:	e111      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006ae4:	4b8d      	ldr	r3, [pc, #564]	; (8006d1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ae6:	61bb      	str	r3, [r7, #24]
    break;
 8006ae8:	e10e      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006aea:	4b8d      	ldr	r3, [pc, #564]	; (8006d20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006aec:	61bb      	str	r3, [r7, #24]
    break;
 8006aee:	e10b      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006af0:	4b8c      	ldr	r3, [pc, #560]	; (8006d24 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006af2:	61bb      	str	r3, [r7, #24]
    break;
 8006af4:	e108      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006af6:	4b88      	ldr	r3, [pc, #544]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afa:	f003 0303 	and.w	r3, r3, #3
 8006afe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006b00:	4b85      	ldr	r3, [pc, #532]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b04:	091b      	lsrs	r3, r3, #4
 8006b06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b0a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b0c:	4b82      	ldr	r3, [pc, #520]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006b16:	4b80      	ldr	r3, [pc, #512]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b1a:	08db      	lsrs	r3, r3, #3
 8006b1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	fb02 f303 	mul.w	r3, r2, r3
 8006b26:	ee07 3a90 	vmov	s15, r3
 8006b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 80e1 	beq.w	8006cfc <HAL_RCC_GetSysClockFreq+0x2b8>
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	f000 8083 	beq.w	8006c48 <HAL_RCC_GetSysClockFreq+0x204>
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	f200 80a1 	bhi.w	8006c8c <HAL_RCC_GetSysClockFreq+0x248>
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d003      	beq.n	8006b58 <HAL_RCC_GetSysClockFreq+0x114>
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d056      	beq.n	8006c04 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006b56:	e099      	b.n	8006c8c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b58:	4b6f      	ldr	r3, [pc, #444]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0320 	and.w	r3, r3, #32
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d02d      	beq.n	8006bc0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b64:	4b6c      	ldr	r3, [pc, #432]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	08db      	lsrs	r3, r3, #3
 8006b6a:	f003 0303 	and.w	r3, r3, #3
 8006b6e:	4a6b      	ldr	r2, [pc, #428]	; (8006d1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b70:	fa22 f303 	lsr.w	r3, r2, r3
 8006b74:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	ee07 3a90 	vmov	s15, r3
 8006b7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	ee07 3a90 	vmov	s15, r3
 8006b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b8e:	4b62      	ldr	r3, [pc, #392]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b96:	ee07 3a90 	vmov	s15, r3
 8006b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ba2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006bbe:	e087      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	ee07 3a90 	vmov	s15, r3
 8006bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bca:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006d2c <HAL_RCC_GetSysClockFreq+0x2e8>
 8006bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bd2:	4b51      	ldr	r3, [pc, #324]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bda:	ee07 3a90 	vmov	s15, r3
 8006bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006be2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006be6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c02:	e065      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	ee07 3a90 	vmov	s15, r3
 8006c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c0e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006d30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c16:	4b40      	ldr	r3, [pc, #256]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c1e:	ee07 3a90 	vmov	s15, r3
 8006c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c26:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c2a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c46:	e043      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	ee07 3a90 	vmov	s15, r3
 8006c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c52:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006d34 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c5a:	4b2f      	ldr	r3, [pc, #188]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c62:	ee07 3a90 	vmov	s15, r3
 8006c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c6e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c8a:	e021      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	ee07 3a90 	vmov	s15, r3
 8006c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c96:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006d30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c9e:	4b1e      	ldr	r3, [pc, #120]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca6:	ee07 3a90 	vmov	s15, r3
 8006caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cae:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cb2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cce:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006cd0:	4b11      	ldr	r3, [pc, #68]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd4:	0a5b      	lsrs	r3, r3, #9
 8006cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cda:	3301      	adds	r3, #1
 8006cdc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	ee07 3a90 	vmov	s15, r3
 8006ce4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ce8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cf4:	ee17 3a90 	vmov	r3, s15
 8006cf8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006cfa:	e005      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	61bb      	str	r3, [r7, #24]
    break;
 8006d00:	e002      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006d02:	4b07      	ldr	r3, [pc, #28]	; (8006d20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d04:	61bb      	str	r3, [r7, #24]
    break;
 8006d06:	bf00      	nop
  }

  return sysclockfreq;
 8006d08:	69bb      	ldr	r3, [r7, #24]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3724      	adds	r7, #36	; 0x24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	58024400 	.word	0x58024400
 8006d1c:	03d09000 	.word	0x03d09000
 8006d20:	003d0900 	.word	0x003d0900
 8006d24:	007a1200 	.word	0x007a1200
 8006d28:	46000000 	.word	0x46000000
 8006d2c:	4c742400 	.word	0x4c742400
 8006d30:	4a742400 	.word	0x4a742400
 8006d34:	4af42400 	.word	0x4af42400

08006d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006d3e:	f7ff fe81 	bl	8006a44 <HAL_RCC_GetSysClockFreq>
 8006d42:	4602      	mov	r2, r0
 8006d44:	4b10      	ldr	r3, [pc, #64]	; (8006d88 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	0a1b      	lsrs	r3, r3, #8
 8006d4a:	f003 030f 	and.w	r3, r3, #15
 8006d4e:	490f      	ldr	r1, [pc, #60]	; (8006d8c <HAL_RCC_GetHCLKFreq+0x54>)
 8006d50:	5ccb      	ldrb	r3, [r1, r3]
 8006d52:	f003 031f 	and.w	r3, r3, #31
 8006d56:	fa22 f303 	lsr.w	r3, r2, r3
 8006d5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d5c:	4b0a      	ldr	r3, [pc, #40]	; (8006d88 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	f003 030f 	and.w	r3, r3, #15
 8006d64:	4a09      	ldr	r2, [pc, #36]	; (8006d8c <HAL_RCC_GetHCLKFreq+0x54>)
 8006d66:	5cd3      	ldrb	r3, [r2, r3]
 8006d68:	f003 031f 	and.w	r3, r3, #31
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d72:	4a07      	ldr	r2, [pc, #28]	; (8006d90 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d74:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d76:	4a07      	ldr	r2, [pc, #28]	; (8006d94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006d7c:	4b04      	ldr	r3, [pc, #16]	; (8006d90 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	58024400 	.word	0x58024400
 8006d8c:	0800f94c 	.word	0x0800f94c
 8006d90:	24000028 	.word	0x24000028
 8006d94:	24000024 	.word	0x24000024

08006d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006d9c:	f7ff ffcc 	bl	8006d38 <HAL_RCC_GetHCLKFreq>
 8006da0:	4602      	mov	r2, r0
 8006da2:	4b06      	ldr	r3, [pc, #24]	; (8006dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006da4:	69db      	ldr	r3, [r3, #28]
 8006da6:	091b      	lsrs	r3, r3, #4
 8006da8:	f003 0307 	and.w	r3, r3, #7
 8006dac:	4904      	ldr	r1, [pc, #16]	; (8006dc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006dae:	5ccb      	ldrb	r3, [r1, r3]
 8006db0:	f003 031f 	and.w	r3, r3, #31
 8006db4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	58024400 	.word	0x58024400
 8006dc0:	0800f94c 	.word	0x0800f94c

08006dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006dc8:	f7ff ffb6 	bl	8006d38 <HAL_RCC_GetHCLKFreq>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	4b06      	ldr	r3, [pc, #24]	; (8006de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	0a1b      	lsrs	r3, r3, #8
 8006dd4:	f003 0307 	and.w	r3, r3, #7
 8006dd8:	4904      	ldr	r1, [pc, #16]	; (8006dec <HAL_RCC_GetPCLK2Freq+0x28>)
 8006dda:	5ccb      	ldrb	r3, [r1, r3]
 8006ddc:	f003 031f 	and.w	r3, r3, #31
 8006de0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	58024400 	.word	0x58024400
 8006dec:	0800f94c 	.word	0x0800f94c

08006df0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b086      	sub	sp, #24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006df8:	2300      	movs	r3, #0
 8006dfa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d03f      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e14:	d02a      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006e16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e1a:	d824      	bhi.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006e1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e20:	d018      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006e22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e26:	d81e      	bhi.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d003      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006e2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e30:	d007      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006e32:	e018      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e34:	4bab      	ldr	r3, [pc, #684]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e38:	4aaa      	ldr	r2, [pc, #680]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006e40:	e015      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	3304      	adds	r3, #4
 8006e46:	2102      	movs	r1, #2
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f001 fff3 	bl	8008e34 <RCCEx_PLL2_Config>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006e52:	e00c      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	3324      	adds	r3, #36	; 0x24
 8006e58:	2102      	movs	r1, #2
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f002 f89c 	bl	8008f98 <RCCEx_PLL3_Config>
 8006e60:	4603      	mov	r3, r0
 8006e62:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006e64:	e003      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	75fb      	strb	r3, [r7, #23]
      break;
 8006e6a:	e000      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006e6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e6e:	7dfb      	ldrb	r3, [r7, #23]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d109      	bne.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006e74:	4b9b      	ldr	r3, [pc, #620]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e80:	4998      	ldr	r1, [pc, #608]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	650b      	str	r3, [r1, #80]	; 0x50
 8006e86:	e001      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e88:	7dfb      	ldrb	r3, [r7, #23]
 8006e8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d03d      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9c:	2b04      	cmp	r3, #4
 8006e9e:	d826      	bhi.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006ea0:	a201      	add	r2, pc, #4	; (adr r2, 8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea6:	bf00      	nop
 8006ea8:	08006ebd 	.word	0x08006ebd
 8006eac:	08006ecb 	.word	0x08006ecb
 8006eb0:	08006edd 	.word	0x08006edd
 8006eb4:	08006ef5 	.word	0x08006ef5
 8006eb8:	08006ef5 	.word	0x08006ef5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ebc:	4b89      	ldr	r3, [pc, #548]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec0:	4a88      	ldr	r2, [pc, #544]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ec6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ec8:	e015      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	3304      	adds	r3, #4
 8006ece:	2100      	movs	r1, #0
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f001 ffaf 	bl	8008e34 <RCCEx_PLL2_Config>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006eda:	e00c      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	3324      	adds	r3, #36	; 0x24
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f002 f858 	bl	8008f98 <RCCEx_PLL3_Config>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006eec:	e003      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ef2:	e000      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006ef4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ef6:	7dfb      	ldrb	r3, [r7, #23]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d109      	bne.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006efc:	4b79      	ldr	r3, [pc, #484]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f00:	f023 0207 	bic.w	r2, r3, #7
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f08:	4976      	ldr	r1, [pc, #472]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	650b      	str	r3, [r1, #80]	; 0x50
 8006f0e:	e001      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f10:	7dfb      	ldrb	r3, [r7, #23]
 8006f12:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d042      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f28:	d02b      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f2e:	d825      	bhi.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006f30:	2bc0      	cmp	r3, #192	; 0xc0
 8006f32:	d028      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006f34:	2bc0      	cmp	r3, #192	; 0xc0
 8006f36:	d821      	bhi.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006f38:	2b80      	cmp	r3, #128	; 0x80
 8006f3a:	d016      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006f3c:	2b80      	cmp	r3, #128	; 0x80
 8006f3e:	d81d      	bhi.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d002      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006f44:	2b40      	cmp	r3, #64	; 0x40
 8006f46:	d007      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006f48:	e018      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f4a:	4b66      	ldr	r3, [pc, #408]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4e:	4a65      	ldr	r2, [pc, #404]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006f56:	e017      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	3304      	adds	r3, #4
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f001 ff68 	bl	8008e34 <RCCEx_PLL2_Config>
 8006f64:	4603      	mov	r3, r0
 8006f66:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006f68:	e00e      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	3324      	adds	r3, #36	; 0x24
 8006f6e:	2100      	movs	r1, #0
 8006f70:	4618      	mov	r0, r3
 8006f72:	f002 f811 	bl	8008f98 <RCCEx_PLL3_Config>
 8006f76:	4603      	mov	r3, r0
 8006f78:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006f7a:	e005      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f80:	e002      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006f82:	bf00      	nop
 8006f84:	e000      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006f86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f88:	7dfb      	ldrb	r3, [r7, #23]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d109      	bne.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006f8e:	4b55      	ldr	r3, [pc, #340]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f92:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f9a:	4952      	ldr	r1, [pc, #328]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	650b      	str	r3, [r1, #80]	; 0x50
 8006fa0:	e001      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa2:	7dfb      	ldrb	r3, [r7, #23]
 8006fa4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d049      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006fb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fbc:	d030      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006fbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fc2:	d82a      	bhi.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006fc4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006fc8:	d02c      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006fca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006fce:	d824      	bhi.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006fd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fd4:	d018      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006fd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fda:	d81e      	bhi.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d003      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006fe0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fe4:	d007      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006fe6:	e018      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fe8:	4b3e      	ldr	r3, [pc, #248]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fec:	4a3d      	ldr	r2, [pc, #244]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ff2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ff4:	e017      	b.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	3304      	adds	r3, #4
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f001 ff19 	bl	8008e34 <RCCEx_PLL2_Config>
 8007002:	4603      	mov	r3, r0
 8007004:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007006:	e00e      	b.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	3324      	adds	r3, #36	; 0x24
 800700c:	2100      	movs	r1, #0
 800700e:	4618      	mov	r0, r3
 8007010:	f001 ffc2 	bl	8008f98 <RCCEx_PLL3_Config>
 8007014:	4603      	mov	r3, r0
 8007016:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007018:	e005      	b.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	75fb      	strb	r3, [r7, #23]
      break;
 800701e:	e002      	b.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007020:	bf00      	nop
 8007022:	e000      	b.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007024:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007026:	7dfb      	ldrb	r3, [r7, #23]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10a      	bne.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800702c:	4b2d      	ldr	r3, [pc, #180]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800702e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007030:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800703a:	492a      	ldr	r1, [pc, #168]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800703c:	4313      	orrs	r3, r2
 800703e:	658b      	str	r3, [r1, #88]	; 0x58
 8007040:	e001      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007042:	7dfb      	ldrb	r3, [r7, #23]
 8007044:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800704e:	2b00      	cmp	r3, #0
 8007050:	d04c      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007058:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800705c:	d030      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800705e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007062:	d82a      	bhi.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007064:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007068:	d02c      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800706a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800706e:	d824      	bhi.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007070:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007074:	d018      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007076:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800707a:	d81e      	bhi.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800707c:	2b00      	cmp	r3, #0
 800707e:	d003      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007084:	d007      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007086:	e018      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007088:	4b16      	ldr	r3, [pc, #88]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800708a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708c:	4a15      	ldr	r2, [pc, #84]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800708e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007092:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007094:	e017      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	3304      	adds	r3, #4
 800709a:	2100      	movs	r1, #0
 800709c:	4618      	mov	r0, r3
 800709e:	f001 fec9 	bl	8008e34 <RCCEx_PLL2_Config>
 80070a2:	4603      	mov	r3, r0
 80070a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80070a6:	e00e      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	3324      	adds	r3, #36	; 0x24
 80070ac:	2100      	movs	r1, #0
 80070ae:	4618      	mov	r0, r3
 80070b0:	f001 ff72 	bl	8008f98 <RCCEx_PLL3_Config>
 80070b4:	4603      	mov	r3, r0
 80070b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80070b8:	e005      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	75fb      	strb	r3, [r7, #23]
      break;
 80070be:	e002      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80070c0:	bf00      	nop
 80070c2:	e000      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80070c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070c6:	7dfb      	ldrb	r3, [r7, #23]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10d      	bne.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80070cc:	4b05      	ldr	r3, [pc, #20]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070d0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80070da:	4902      	ldr	r1, [pc, #8]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070dc:	4313      	orrs	r3, r2
 80070de:	658b      	str	r3, [r1, #88]	; 0x58
 80070e0:	e004      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80070e2:	bf00      	nop
 80070e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e8:	7dfb      	ldrb	r3, [r7, #23]
 80070ea:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d032      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070fc:	2b30      	cmp	r3, #48	; 0x30
 80070fe:	d01c      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007100:	2b30      	cmp	r3, #48	; 0x30
 8007102:	d817      	bhi.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007104:	2b20      	cmp	r3, #32
 8007106:	d00c      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007108:	2b20      	cmp	r3, #32
 800710a:	d813      	bhi.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800710c:	2b00      	cmp	r3, #0
 800710e:	d016      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007110:	2b10      	cmp	r3, #16
 8007112:	d10f      	bne.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007114:	4baf      	ldr	r3, [pc, #700]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007118:	4aae      	ldr	r2, [pc, #696]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800711a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800711e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007120:	e00e      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	3304      	adds	r3, #4
 8007126:	2102      	movs	r1, #2
 8007128:	4618      	mov	r0, r3
 800712a:	f001 fe83 	bl	8008e34 <RCCEx_PLL2_Config>
 800712e:	4603      	mov	r3, r0
 8007130:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007132:	e005      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	75fb      	strb	r3, [r7, #23]
      break;
 8007138:	e002      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800713a:	bf00      	nop
 800713c:	e000      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800713e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007140:	7dfb      	ldrb	r3, [r7, #23]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d109      	bne.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007146:	4ba3      	ldr	r3, [pc, #652]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800714a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007152:	49a0      	ldr	r1, [pc, #640]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007154:	4313      	orrs	r3, r2
 8007156:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007158:	e001      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800715a:	7dfb      	ldrb	r3, [r7, #23]
 800715c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d047      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800716e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007172:	d030      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007174:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007178:	d82a      	bhi.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800717a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800717e:	d02c      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007180:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007184:	d824      	bhi.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800718a:	d018      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800718c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007190:	d81e      	bhi.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007192:	2b00      	cmp	r3, #0
 8007194:	d003      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800719a:	d007      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800719c:	e018      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800719e:	4b8d      	ldr	r3, [pc, #564]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80071a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a2:	4a8c      	ldr	r2, [pc, #560]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80071a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80071aa:	e017      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	3304      	adds	r3, #4
 80071b0:	2100      	movs	r1, #0
 80071b2:	4618      	mov	r0, r3
 80071b4:	f001 fe3e 	bl	8008e34 <RCCEx_PLL2_Config>
 80071b8:	4603      	mov	r3, r0
 80071ba:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80071bc:	e00e      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	3324      	adds	r3, #36	; 0x24
 80071c2:	2100      	movs	r1, #0
 80071c4:	4618      	mov	r0, r3
 80071c6:	f001 fee7 	bl	8008f98 <RCCEx_PLL3_Config>
 80071ca:	4603      	mov	r3, r0
 80071cc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80071ce:	e005      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	75fb      	strb	r3, [r7, #23]
      break;
 80071d4:	e002      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80071d6:	bf00      	nop
 80071d8:	e000      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80071da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071dc:	7dfb      	ldrb	r3, [r7, #23]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d109      	bne.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80071e2:	4b7c      	ldr	r3, [pc, #496]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80071e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071e6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ee:	4979      	ldr	r1, [pc, #484]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80071f0:	4313      	orrs	r3, r2
 80071f2:	650b      	str	r3, [r1, #80]	; 0x50
 80071f4:	e001      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f6:	7dfb      	ldrb	r3, [r7, #23]
 80071f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d049      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800720a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800720e:	d02e      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007210:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007214:	d828      	bhi.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007216:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800721a:	d02a      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800721c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007220:	d822      	bhi.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007222:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007226:	d026      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007228:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800722c:	d81c      	bhi.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800722e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007232:	d010      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007234:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007238:	d816      	bhi.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800723a:	2b00      	cmp	r3, #0
 800723c:	d01d      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800723e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007242:	d111      	bne.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	3304      	adds	r3, #4
 8007248:	2101      	movs	r1, #1
 800724a:	4618      	mov	r0, r3
 800724c:	f001 fdf2 	bl	8008e34 <RCCEx_PLL2_Config>
 8007250:	4603      	mov	r3, r0
 8007252:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007254:	e012      	b.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	3324      	adds	r3, #36	; 0x24
 800725a:	2101      	movs	r1, #1
 800725c:	4618      	mov	r0, r3
 800725e:	f001 fe9b 	bl	8008f98 <RCCEx_PLL3_Config>
 8007262:	4603      	mov	r3, r0
 8007264:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007266:	e009      	b.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	75fb      	strb	r3, [r7, #23]
      break;
 800726c:	e006      	b.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800726e:	bf00      	nop
 8007270:	e004      	b.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007272:	bf00      	nop
 8007274:	e002      	b.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007276:	bf00      	nop
 8007278:	e000      	b.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800727a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800727c:	7dfb      	ldrb	r3, [r7, #23]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d109      	bne.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007282:	4b54      	ldr	r3, [pc, #336]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007286:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800728e:	4951      	ldr	r1, [pc, #324]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007290:	4313      	orrs	r3, r2
 8007292:	650b      	str	r3, [r1, #80]	; 0x50
 8007294:	e001      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007296:	7dfb      	ldrb	r3, [r7, #23]
 8007298:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d04b      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072b0:	d02e      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80072b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072b6:	d828      	bhi.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80072b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072bc:	d02a      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80072be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072c2:	d822      	bhi.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80072c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072c8:	d026      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80072ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072ce:	d81c      	bhi.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80072d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072d4:	d010      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80072d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072da:	d816      	bhi.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d01d      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80072e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072e4:	d111      	bne.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	3304      	adds	r3, #4
 80072ea:	2101      	movs	r1, #1
 80072ec:	4618      	mov	r0, r3
 80072ee:	f001 fda1 	bl	8008e34 <RCCEx_PLL2_Config>
 80072f2:	4603      	mov	r3, r0
 80072f4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80072f6:	e012      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	3324      	adds	r3, #36	; 0x24
 80072fc:	2101      	movs	r1, #1
 80072fe:	4618      	mov	r0, r3
 8007300:	f001 fe4a 	bl	8008f98 <RCCEx_PLL3_Config>
 8007304:	4603      	mov	r3, r0
 8007306:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007308:	e009      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	75fb      	strb	r3, [r7, #23]
      break;
 800730e:	e006      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007310:	bf00      	nop
 8007312:	e004      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007314:	bf00      	nop
 8007316:	e002      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007318:	bf00      	nop
 800731a:	e000      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800731c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800731e:	7dfb      	ldrb	r3, [r7, #23]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10a      	bne.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007324:	4b2b      	ldr	r3, [pc, #172]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007328:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007332:	4928      	ldr	r1, [pc, #160]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007334:	4313      	orrs	r3, r2
 8007336:	658b      	str	r3, [r1, #88]	; 0x58
 8007338:	e001      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800733a:	7dfb      	ldrb	r3, [r7, #23]
 800733c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d02f      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800734e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007352:	d00e      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007358:	d814      	bhi.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800735a:	2b00      	cmp	r3, #0
 800735c:	d015      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800735e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007362:	d10f      	bne.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007364:	4b1b      	ldr	r3, [pc, #108]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007368:	4a1a      	ldr	r2, [pc, #104]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800736a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800736e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007370:	e00c      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	3304      	adds	r3, #4
 8007376:	2101      	movs	r1, #1
 8007378:	4618      	mov	r0, r3
 800737a:	f001 fd5b 	bl	8008e34 <RCCEx_PLL2_Config>
 800737e:	4603      	mov	r3, r0
 8007380:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007382:	e003      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	75fb      	strb	r3, [r7, #23]
      break;
 8007388:	e000      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800738a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800738c:	7dfb      	ldrb	r3, [r7, #23]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d109      	bne.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007392:	4b10      	ldr	r3, [pc, #64]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007396:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800739e:	490d      	ldr	r1, [pc, #52]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073a0:	4313      	orrs	r3, r2
 80073a2:	650b      	str	r3, [r1, #80]	; 0x50
 80073a4:	e001      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a6:	7dfb      	ldrb	r3, [r7, #23]
 80073a8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d033      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ba:	2b03      	cmp	r3, #3
 80073bc:	d81c      	bhi.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80073be:	a201      	add	r2, pc, #4	; (adr r2, 80073c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80073c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c4:	080073ff 	.word	0x080073ff
 80073c8:	080073d9 	.word	0x080073d9
 80073cc:	080073e7 	.word	0x080073e7
 80073d0:	080073ff 	.word	0x080073ff
 80073d4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073d8:	4bb8      	ldr	r3, [pc, #736]	; (80076bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073dc:	4ab7      	ldr	r2, [pc, #732]	; (80076bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80073e4:	e00c      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	3304      	adds	r3, #4
 80073ea:	2102      	movs	r1, #2
 80073ec:	4618      	mov	r0, r3
 80073ee:	f001 fd21 	bl	8008e34 <RCCEx_PLL2_Config>
 80073f2:	4603      	mov	r3, r0
 80073f4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80073f6:	e003      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	75fb      	strb	r3, [r7, #23]
      break;
 80073fc:	e000      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80073fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007400:	7dfb      	ldrb	r3, [r7, #23]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d109      	bne.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007406:	4bad      	ldr	r3, [pc, #692]	; (80076bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800740a:	f023 0203 	bic.w	r2, r3, #3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007412:	49aa      	ldr	r1, [pc, #680]	; (80076bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007414:	4313      	orrs	r3, r2
 8007416:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007418:	e001      	b.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800741a:	7dfb      	ldrb	r3, [r7, #23]
 800741c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007426:	2b00      	cmp	r3, #0
 8007428:	f000 8086 	beq.w	8007538 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800742c:	4ba4      	ldr	r3, [pc, #656]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4aa3      	ldr	r2, [pc, #652]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007436:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007438:	f7fb fe7e 	bl	8003138 <HAL_GetTick>
 800743c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800743e:	e009      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007440:	f7fb fe7a 	bl	8003138 <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	2b64      	cmp	r3, #100	; 0x64
 800744c:	d902      	bls.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	75fb      	strb	r3, [r7, #23]
        break;
 8007452:	e005      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007454:	4b9a      	ldr	r3, [pc, #616]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800745c:	2b00      	cmp	r3, #0
 800745e:	d0ef      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007460:	7dfb      	ldrb	r3, [r7, #23]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d166      	bne.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007466:	4b95      	ldr	r3, [pc, #596]	; (80076bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007468:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007470:	4053      	eors	r3, r2
 8007472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007476:	2b00      	cmp	r3, #0
 8007478:	d013      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800747a:	4b90      	ldr	r3, [pc, #576]	; (80076bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800747c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800747e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007482:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007484:	4b8d      	ldr	r3, [pc, #564]	; (80076bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007488:	4a8c      	ldr	r2, [pc, #560]	; (80076bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800748a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800748e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007490:	4b8a      	ldr	r3, [pc, #552]	; (80076bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007494:	4a89      	ldr	r2, [pc, #548]	; (80076bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800749a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800749c:	4a87      	ldr	r2, [pc, #540]	; (80076bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074ac:	d115      	bne.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ae:	f7fb fe43 	bl	8003138 <HAL_GetTick>
 80074b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074b4:	e00b      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074b6:	f7fb fe3f 	bl	8003138 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d902      	bls.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80074c8:	2303      	movs	r3, #3
 80074ca:	75fb      	strb	r3, [r7, #23]
            break;
 80074cc:	e005      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074ce:	4b7b      	ldr	r3, [pc, #492]	; (80076bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d2:	f003 0302 	and.w	r3, r3, #2
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d0ed      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80074da:	7dfb      	ldrb	r3, [r7, #23]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d126      	bne.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074ee:	d10d      	bne.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80074f0:	4b72      	ldr	r3, [pc, #456]	; (80076bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074fe:	0919      	lsrs	r1, r3, #4
 8007500:	4b70      	ldr	r3, [pc, #448]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007502:	400b      	ands	r3, r1
 8007504:	496d      	ldr	r1, [pc, #436]	; (80076bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007506:	4313      	orrs	r3, r2
 8007508:	610b      	str	r3, [r1, #16]
 800750a:	e005      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800750c:	4b6b      	ldr	r3, [pc, #428]	; (80076bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	4a6a      	ldr	r2, [pc, #424]	; (80076bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007512:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007516:	6113      	str	r3, [r2, #16]
 8007518:	4b68      	ldr	r3, [pc, #416]	; (80076bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800751a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007526:	4965      	ldr	r1, [pc, #404]	; (80076bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007528:	4313      	orrs	r3, r2
 800752a:	670b      	str	r3, [r1, #112]	; 0x70
 800752c:	e004      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800752e:	7dfb      	ldrb	r3, [r7, #23]
 8007530:	75bb      	strb	r3, [r7, #22]
 8007532:	e001      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007534:	7dfb      	ldrb	r3, [r7, #23]
 8007536:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0301 	and.w	r3, r3, #1
 8007540:	2b00      	cmp	r3, #0
 8007542:	d07e      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007548:	2b28      	cmp	r3, #40	; 0x28
 800754a:	d867      	bhi.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800754c:	a201      	add	r2, pc, #4	; (adr r2, 8007554 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800754e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007552:	bf00      	nop
 8007554:	08007623 	.word	0x08007623
 8007558:	0800761d 	.word	0x0800761d
 800755c:	0800761d 	.word	0x0800761d
 8007560:	0800761d 	.word	0x0800761d
 8007564:	0800761d 	.word	0x0800761d
 8007568:	0800761d 	.word	0x0800761d
 800756c:	0800761d 	.word	0x0800761d
 8007570:	0800761d 	.word	0x0800761d
 8007574:	080075f9 	.word	0x080075f9
 8007578:	0800761d 	.word	0x0800761d
 800757c:	0800761d 	.word	0x0800761d
 8007580:	0800761d 	.word	0x0800761d
 8007584:	0800761d 	.word	0x0800761d
 8007588:	0800761d 	.word	0x0800761d
 800758c:	0800761d 	.word	0x0800761d
 8007590:	0800761d 	.word	0x0800761d
 8007594:	0800760b 	.word	0x0800760b
 8007598:	0800761d 	.word	0x0800761d
 800759c:	0800761d 	.word	0x0800761d
 80075a0:	0800761d 	.word	0x0800761d
 80075a4:	0800761d 	.word	0x0800761d
 80075a8:	0800761d 	.word	0x0800761d
 80075ac:	0800761d 	.word	0x0800761d
 80075b0:	0800761d 	.word	0x0800761d
 80075b4:	08007623 	.word	0x08007623
 80075b8:	0800761d 	.word	0x0800761d
 80075bc:	0800761d 	.word	0x0800761d
 80075c0:	0800761d 	.word	0x0800761d
 80075c4:	0800761d 	.word	0x0800761d
 80075c8:	0800761d 	.word	0x0800761d
 80075cc:	0800761d 	.word	0x0800761d
 80075d0:	0800761d 	.word	0x0800761d
 80075d4:	08007623 	.word	0x08007623
 80075d8:	0800761d 	.word	0x0800761d
 80075dc:	0800761d 	.word	0x0800761d
 80075e0:	0800761d 	.word	0x0800761d
 80075e4:	0800761d 	.word	0x0800761d
 80075e8:	0800761d 	.word	0x0800761d
 80075ec:	0800761d 	.word	0x0800761d
 80075f0:	0800761d 	.word	0x0800761d
 80075f4:	08007623 	.word	0x08007623
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	3304      	adds	r3, #4
 80075fc:	2101      	movs	r1, #1
 80075fe:	4618      	mov	r0, r3
 8007600:	f001 fc18 	bl	8008e34 <RCCEx_PLL2_Config>
 8007604:	4603      	mov	r3, r0
 8007606:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007608:	e00c      	b.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	3324      	adds	r3, #36	; 0x24
 800760e:	2101      	movs	r1, #1
 8007610:	4618      	mov	r0, r3
 8007612:	f001 fcc1 	bl	8008f98 <RCCEx_PLL3_Config>
 8007616:	4603      	mov	r3, r0
 8007618:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800761a:	e003      	b.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	75fb      	strb	r3, [r7, #23]
      break;
 8007620:	e000      	b.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007622:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007624:	7dfb      	ldrb	r3, [r7, #23]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d109      	bne.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800762a:	4b24      	ldr	r3, [pc, #144]	; (80076bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800762c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800762e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007636:	4921      	ldr	r1, [pc, #132]	; (80076bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007638:	4313      	orrs	r3, r2
 800763a:	654b      	str	r3, [r1, #84]	; 0x54
 800763c:	e001      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800763e:	7dfb      	ldrb	r3, [r7, #23]
 8007640:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0302 	and.w	r3, r3, #2
 800764a:	2b00      	cmp	r3, #0
 800764c:	d03e      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007652:	2b05      	cmp	r3, #5
 8007654:	d820      	bhi.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8007656:	a201      	add	r2, pc, #4	; (adr r2, 800765c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8007658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765c:	0800769f 	.word	0x0800769f
 8007660:	08007675 	.word	0x08007675
 8007664:	08007687 	.word	0x08007687
 8007668:	0800769f 	.word	0x0800769f
 800766c:	0800769f 	.word	0x0800769f
 8007670:	0800769f 	.word	0x0800769f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3304      	adds	r3, #4
 8007678:	2101      	movs	r1, #1
 800767a:	4618      	mov	r0, r3
 800767c:	f001 fbda 	bl	8008e34 <RCCEx_PLL2_Config>
 8007680:	4603      	mov	r3, r0
 8007682:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007684:	e00c      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	3324      	adds	r3, #36	; 0x24
 800768a:	2101      	movs	r1, #1
 800768c:	4618      	mov	r0, r3
 800768e:	f001 fc83 	bl	8008f98 <RCCEx_PLL3_Config>
 8007692:	4603      	mov	r3, r0
 8007694:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007696:	e003      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	75fb      	strb	r3, [r7, #23]
      break;
 800769c:	e000      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800769e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076a0:	7dfb      	ldrb	r3, [r7, #23]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d110      	bne.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80076a6:	4b05      	ldr	r3, [pc, #20]	; (80076bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076aa:	f023 0207 	bic.w	r2, r3, #7
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076b2:	4902      	ldr	r1, [pc, #8]	; (80076bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076b4:	4313      	orrs	r3, r2
 80076b6:	654b      	str	r3, [r1, #84]	; 0x54
 80076b8:	e008      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80076ba:	bf00      	nop
 80076bc:	58024400 	.word	0x58024400
 80076c0:	58024800 	.word	0x58024800
 80076c4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c8:	7dfb      	ldrb	r3, [r7, #23]
 80076ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 0304 	and.w	r3, r3, #4
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d039      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076de:	2b05      	cmp	r3, #5
 80076e0:	d820      	bhi.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80076e2:	a201      	add	r2, pc, #4	; (adr r2, 80076e8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80076e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e8:	0800772b 	.word	0x0800772b
 80076ec:	08007701 	.word	0x08007701
 80076f0:	08007713 	.word	0x08007713
 80076f4:	0800772b 	.word	0x0800772b
 80076f8:	0800772b 	.word	0x0800772b
 80076fc:	0800772b 	.word	0x0800772b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	3304      	adds	r3, #4
 8007704:	2101      	movs	r1, #1
 8007706:	4618      	mov	r0, r3
 8007708:	f001 fb94 	bl	8008e34 <RCCEx_PLL2_Config>
 800770c:	4603      	mov	r3, r0
 800770e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007710:	e00c      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	3324      	adds	r3, #36	; 0x24
 8007716:	2101      	movs	r1, #1
 8007718:	4618      	mov	r0, r3
 800771a:	f001 fc3d 	bl	8008f98 <RCCEx_PLL3_Config>
 800771e:	4603      	mov	r3, r0
 8007720:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007722:	e003      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	75fb      	strb	r3, [r7, #23]
      break;
 8007728:	e000      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800772a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800772c:	7dfb      	ldrb	r3, [r7, #23]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10a      	bne.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007732:	4bb7      	ldr	r3, [pc, #732]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007736:	f023 0207 	bic.w	r2, r3, #7
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007740:	49b3      	ldr	r1, [pc, #716]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007742:	4313      	orrs	r3, r2
 8007744:	658b      	str	r3, [r1, #88]	; 0x58
 8007746:	e001      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007748:	7dfb      	ldrb	r3, [r7, #23]
 800774a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0320 	and.w	r3, r3, #32
 8007754:	2b00      	cmp	r3, #0
 8007756:	d04b      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800775e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007762:	d02e      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007764:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007768:	d828      	bhi.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800776a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800776e:	d02a      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007774:	d822      	bhi.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007776:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800777a:	d026      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800777c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007780:	d81c      	bhi.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007782:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007786:	d010      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800778c:	d816      	bhi.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800778e:	2b00      	cmp	r3, #0
 8007790:	d01d      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007792:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007796:	d111      	bne.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	3304      	adds	r3, #4
 800779c:	2100      	movs	r1, #0
 800779e:	4618      	mov	r0, r3
 80077a0:	f001 fb48 	bl	8008e34 <RCCEx_PLL2_Config>
 80077a4:	4603      	mov	r3, r0
 80077a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80077a8:	e012      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	3324      	adds	r3, #36	; 0x24
 80077ae:	2102      	movs	r1, #2
 80077b0:	4618      	mov	r0, r3
 80077b2:	f001 fbf1 	bl	8008f98 <RCCEx_PLL3_Config>
 80077b6:	4603      	mov	r3, r0
 80077b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80077ba:	e009      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	75fb      	strb	r3, [r7, #23]
      break;
 80077c0:	e006      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80077c2:	bf00      	nop
 80077c4:	e004      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80077c6:	bf00      	nop
 80077c8:	e002      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80077ca:	bf00      	nop
 80077cc:	e000      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80077ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077d0:	7dfb      	ldrb	r3, [r7, #23]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10a      	bne.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077d6:	4b8e      	ldr	r3, [pc, #568]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80077d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077da:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077e4:	498a      	ldr	r1, [pc, #552]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	654b      	str	r3, [r1, #84]	; 0x54
 80077ea:	e001      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ec:	7dfb      	ldrb	r3, [r7, #23]
 80077ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d04b      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007802:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007806:	d02e      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007808:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800780c:	d828      	bhi.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800780e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007812:	d02a      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007818:	d822      	bhi.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800781a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800781e:	d026      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007820:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007824:	d81c      	bhi.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800782a:	d010      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800782c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007830:	d816      	bhi.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007832:	2b00      	cmp	r3, #0
 8007834:	d01d      	beq.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800783a:	d111      	bne.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	3304      	adds	r3, #4
 8007840:	2100      	movs	r1, #0
 8007842:	4618      	mov	r0, r3
 8007844:	f001 faf6 	bl	8008e34 <RCCEx_PLL2_Config>
 8007848:	4603      	mov	r3, r0
 800784a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800784c:	e012      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	3324      	adds	r3, #36	; 0x24
 8007852:	2102      	movs	r1, #2
 8007854:	4618      	mov	r0, r3
 8007856:	f001 fb9f 	bl	8008f98 <RCCEx_PLL3_Config>
 800785a:	4603      	mov	r3, r0
 800785c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800785e:	e009      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	75fb      	strb	r3, [r7, #23]
      break;
 8007864:	e006      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007866:	bf00      	nop
 8007868:	e004      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800786a:	bf00      	nop
 800786c:	e002      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800786e:	bf00      	nop
 8007870:	e000      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007872:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007874:	7dfb      	ldrb	r3, [r7, #23]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10a      	bne.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800787a:	4b65      	ldr	r3, [pc, #404]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800787c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800787e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007888:	4961      	ldr	r1, [pc, #388]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800788a:	4313      	orrs	r3, r2
 800788c:	658b      	str	r3, [r1, #88]	; 0x58
 800788e:	e001      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007890:	7dfb      	ldrb	r3, [r7, #23]
 8007892:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800789c:	2b00      	cmp	r3, #0
 800789e:	d04b      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80078aa:	d02e      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80078ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80078b0:	d828      	bhi.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80078b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078b6:	d02a      	beq.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80078b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078bc:	d822      	bhi.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80078be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80078c2:	d026      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80078c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80078c8:	d81c      	bhi.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80078ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078ce:	d010      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80078d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078d4:	d816      	bhi.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d01d      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80078da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078de:	d111      	bne.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	3304      	adds	r3, #4
 80078e4:	2100      	movs	r1, #0
 80078e6:	4618      	mov	r0, r3
 80078e8:	f001 faa4 	bl	8008e34 <RCCEx_PLL2_Config>
 80078ec:	4603      	mov	r3, r0
 80078ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80078f0:	e012      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	3324      	adds	r3, #36	; 0x24
 80078f6:	2102      	movs	r1, #2
 80078f8:	4618      	mov	r0, r3
 80078fa:	f001 fb4d 	bl	8008f98 <RCCEx_PLL3_Config>
 80078fe:	4603      	mov	r3, r0
 8007900:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007902:	e009      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	75fb      	strb	r3, [r7, #23]
      break;
 8007908:	e006      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800790a:	bf00      	nop
 800790c:	e004      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800790e:	bf00      	nop
 8007910:	e002      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007912:	bf00      	nop
 8007914:	e000      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007916:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007918:	7dfb      	ldrb	r3, [r7, #23]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10a      	bne.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800791e:	4b3c      	ldr	r3, [pc, #240]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007922:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800792c:	4938      	ldr	r1, [pc, #224]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800792e:	4313      	orrs	r3, r2
 8007930:	658b      	str	r3, [r1, #88]	; 0x58
 8007932:	e001      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007934:	7dfb      	ldrb	r3, [r7, #23]
 8007936:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0308 	and.w	r3, r3, #8
 8007940:	2b00      	cmp	r3, #0
 8007942:	d01a      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800794a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800794e:	d10a      	bne.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	3324      	adds	r3, #36	; 0x24
 8007954:	2102      	movs	r1, #2
 8007956:	4618      	mov	r0, r3
 8007958:	f001 fb1e 	bl	8008f98 <RCCEx_PLL3_Config>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007966:	4b2a      	ldr	r3, [pc, #168]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800796a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007974:	4926      	ldr	r1, [pc, #152]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007976:	4313      	orrs	r3, r2
 8007978:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0310 	and.w	r3, r3, #16
 8007982:	2b00      	cmp	r3, #0
 8007984:	d01a      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800798c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007990:	d10a      	bne.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	3324      	adds	r3, #36	; 0x24
 8007996:	2102      	movs	r1, #2
 8007998:	4618      	mov	r0, r3
 800799a:	f001 fafd 	bl	8008f98 <RCCEx_PLL3_Config>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d001      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80079a8:	4b19      	ldr	r3, [pc, #100]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80079aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079b6:	4916      	ldr	r1, [pc, #88]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80079b8:	4313      	orrs	r3, r2
 80079ba:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d036      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80079ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079d2:	d01f      	beq.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80079d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079d8:	d817      	bhi.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d003      	beq.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80079de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079e2:	d009      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80079e4:	e011      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	3304      	adds	r3, #4
 80079ea:	2100      	movs	r1, #0
 80079ec:	4618      	mov	r0, r3
 80079ee:	f001 fa21 	bl	8008e34 <RCCEx_PLL2_Config>
 80079f2:	4603      	mov	r3, r0
 80079f4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80079f6:	e00e      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	3324      	adds	r3, #36	; 0x24
 80079fc:	2102      	movs	r1, #2
 80079fe:	4618      	mov	r0, r3
 8007a00:	f001 faca 	bl	8008f98 <RCCEx_PLL3_Config>
 8007a04:	4603      	mov	r3, r0
 8007a06:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007a08:	e005      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	75fb      	strb	r3, [r7, #23]
      break;
 8007a0e:	e002      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007a10:	58024400 	.word	0x58024400
      break;
 8007a14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a16:	7dfb      	ldrb	r3, [r7, #23]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10a      	bne.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a1c:	4b93      	ldr	r3, [pc, #588]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a2a:	4990      	ldr	r1, [pc, #576]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	658b      	str	r3, [r1, #88]	; 0x58
 8007a30:	e001      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a32:	7dfb      	ldrb	r3, [r7, #23]
 8007a34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d033      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a4c:	d01c      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007a4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a52:	d816      	bhi.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007a54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a58:	d003      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007a5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a5e:	d007      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007a60:	e00f      	b.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a62:	4b82      	ldr	r3, [pc, #520]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a66:	4a81      	ldr	r2, [pc, #516]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007a6e:	e00c      	b.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	3324      	adds	r3, #36	; 0x24
 8007a74:	2101      	movs	r1, #1
 8007a76:	4618      	mov	r0, r3
 8007a78:	f001 fa8e 	bl	8008f98 <RCCEx_PLL3_Config>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007a80:	e003      	b.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	75fb      	strb	r3, [r7, #23]
      break;
 8007a86:	e000      	b.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007a88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a8a:	7dfb      	ldrb	r3, [r7, #23]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10a      	bne.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a90:	4b76      	ldr	r3, [pc, #472]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a9e:	4973      	ldr	r1, [pc, #460]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	654b      	str	r3, [r1, #84]	; 0x54
 8007aa4:	e001      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aa6:	7dfb      	ldrb	r3, [r7, #23]
 8007aa8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d029      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d003      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ac2:	d007      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007ac4:	e00f      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ac6:	4b69      	ldr	r3, [pc, #420]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aca:	4a68      	ldr	r2, [pc, #416]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ad0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007ad2:	e00b      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	3304      	adds	r3, #4
 8007ad8:	2102      	movs	r1, #2
 8007ada:	4618      	mov	r0, r3
 8007adc:	f001 f9aa 	bl	8008e34 <RCCEx_PLL2_Config>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007ae4:	e002      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	75fb      	strb	r3, [r7, #23]
      break;
 8007aea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007aec:	7dfb      	ldrb	r3, [r7, #23]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d109      	bne.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007af2:	4b5e      	ldr	r3, [pc, #376]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007af6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007afe:	495b      	ldr	r1, [pc, #364]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b00:	4313      	orrs	r3, r2
 8007b02:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007b04:	e001      	b.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b06:	7dfb      	ldrb	r3, [r7, #23]
 8007b08:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00a      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	3324      	adds	r3, #36	; 0x24
 8007b1a:	2102      	movs	r1, #2
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f001 fa3b 	bl	8008f98 <RCCEx_PLL3_Config>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d001      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d030      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b40:	d017      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007b42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b46:	d811      	bhi.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b4c:	d013      	beq.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007b4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b52:	d80b      	bhi.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d010      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b5c:	d106      	bne.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b5e:	4b43      	ldr	r3, [pc, #268]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b62:	4a42      	ldr	r2, [pc, #264]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007b6a:	e007      	b.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b70:	e004      	b.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007b72:	bf00      	nop
 8007b74:	e002      	b.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007b76:	bf00      	nop
 8007b78:	e000      	b.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007b7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b7c:	7dfb      	ldrb	r3, [r7, #23]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d109      	bne.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b82:	4b3a      	ldr	r3, [pc, #232]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b8e:	4937      	ldr	r1, [pc, #220]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b90:	4313      	orrs	r3, r2
 8007b92:	654b      	str	r3, [r1, #84]	; 0x54
 8007b94:	e001      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b96:	7dfb      	ldrb	r3, [r7, #23]
 8007b98:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d008      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007ba6:	4b31      	ldr	r3, [pc, #196]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007baa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bb2:	492e      	ldr	r1, [pc, #184]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d009      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007bc4:	4b29      	ldr	r3, [pc, #164]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007bd2:	4926      	ldr	r1, [pc, #152]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d008      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007be4:	4b21      	ldr	r3, [pc, #132]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007be8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bf0:	491e      	ldr	r1, [pc, #120]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00d      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007c02:	4b1a      	ldr	r3, [pc, #104]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	4a19      	ldr	r2, [pc, #100]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c0c:	6113      	str	r3, [r2, #16]
 8007c0e:	4b17      	ldr	r3, [pc, #92]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c10:	691a      	ldr	r2, [r3, #16]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007c18:	4914      	ldr	r1, [pc, #80]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	da08      	bge.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007c26:	4b11      	ldr	r3, [pc, #68]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c32:	490e      	ldr	r1, [pc, #56]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c34:	4313      	orrs	r3, r2
 8007c36:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d009      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c44:	4b09      	ldr	r3, [pc, #36]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c52:	4906      	ldr	r1, [pc, #24]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c54:	4313      	orrs	r3, r2
 8007c56:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007c58:	7dbb      	ldrb	r3, [r7, #22]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d101      	bne.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	e000      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3718      	adds	r7, #24
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	58024400 	.word	0x58024400

08007c70 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b090      	sub	sp, #64	; 0x40
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c7e:	f040 8095 	bne.w	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007c82:	4bae      	ldr	r3, [pc, #696]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c86:	f003 0307 	and.w	r3, r3, #7
 8007c8a:	633b      	str	r3, [r7, #48]	; 0x30
 8007c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8e:	2b04      	cmp	r3, #4
 8007c90:	f200 8088 	bhi.w	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007c94:	a201      	add	r2, pc, #4	; (adr r2, 8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8007c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c9a:	bf00      	nop
 8007c9c:	08007cb1 	.word	0x08007cb1
 8007ca0:	08007cd9 	.word	0x08007cd9
 8007ca4:	08007d01 	.word	0x08007d01
 8007ca8:	08007d9d 	.word	0x08007d9d
 8007cac:	08007d29 	.word	0x08007d29

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cb0:	4ba2      	ldr	r3, [pc, #648]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cbc:	d108      	bne.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f000 ff64 	bl	8008b90 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ccc:	f000 bc95 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cd4:	f000 bc91 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cd8:	4b98      	ldr	r3, [pc, #608]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ce0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ce4:	d108      	bne.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ce6:	f107 0318 	add.w	r3, r7, #24
 8007cea:	4618      	mov	r0, r3
 8007cec:	f000 fca8 	bl	8008640 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007cf4:	f000 bc81 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cfc:	f000 bc7d 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d00:	4b8e      	ldr	r3, [pc, #568]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d0c:	d108      	bne.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d0e:	f107 030c 	add.w	r3, r7, #12
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 fde8 	bl	80088e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d1c:	f000 bc6d 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007d20:	2300      	movs	r3, #0
 8007d22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d24:	f000 bc69 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007d28:	4b84      	ldr	r3, [pc, #528]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d30:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d32:	4b82      	ldr	r3, [pc, #520]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 0304 	and.w	r3, r3, #4
 8007d3a:	2b04      	cmp	r3, #4
 8007d3c:	d10c      	bne.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8007d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d109      	bne.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d44:	4b7d      	ldr	r3, [pc, #500]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	08db      	lsrs	r3, r3, #3
 8007d4a:	f003 0303 	and.w	r3, r3, #3
 8007d4e:	4a7c      	ldr	r2, [pc, #496]	; (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8007d50:	fa22 f303 	lsr.w	r3, r2, r3
 8007d54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d56:	e01f      	b.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d58:	4b78      	ldr	r3, [pc, #480]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d64:	d106      	bne.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d6c:	d102      	bne.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007d6e:	4b75      	ldr	r3, [pc, #468]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007d70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d72:	e011      	b.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d74:	4b71      	ldr	r3, [pc, #452]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d80:	d106      	bne.n	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8007d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d88:	d102      	bne.n	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007d8a:	4b6f      	ldr	r3, [pc, #444]	; (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8007d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d8e:	e003      	b.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007d90:	2300      	movs	r3, #0
 8007d92:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007d94:	f000 bc31 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007d98:	f000 bc2f 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007d9c:	4b6b      	ldr	r3, [pc, #428]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007da0:	f000 bc2b 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007da4:	2300      	movs	r3, #0
 8007da6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007da8:	f000 bc27 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007db2:	f040 8095 	bne.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007db6:	4b61      	ldr	r3, [pc, #388]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dba:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007dbe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dc6:	d04d      	beq.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8007dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dce:	f200 8084 	bhi.w	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd4:	2bc0      	cmp	r3, #192	; 0xc0
 8007dd6:	d07d      	beq.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dda:	2bc0      	cmp	r3, #192	; 0xc0
 8007ddc:	d87d      	bhi.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de0:	2b80      	cmp	r3, #128	; 0x80
 8007de2:	d02d      	beq.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8007de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de6:	2b80      	cmp	r3, #128	; 0x80
 8007de8:	d877      	bhi.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d003      	beq.n	8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8007df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df2:	2b40      	cmp	r3, #64	; 0x40
 8007df4:	d012      	beq.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8007df6:	e070      	b.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007df8:	4b50      	ldr	r3, [pc, #320]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e04:	d107      	bne.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 fec0 	bl	8008b90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e14:	e3f1      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007e16:	2300      	movs	r3, #0
 8007e18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e1a:	e3ee      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e1c:	4b47      	ldr	r3, [pc, #284]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e28:	d107      	bne.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e2a:	f107 0318 	add.w	r3, r7, #24
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 fc06 	bl	8008640 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e38:	e3df      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e3e:	e3dc      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e40:	4b3e      	ldr	r3, [pc, #248]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e4c:	d107      	bne.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e4e:	f107 030c 	add.w	r3, r7, #12
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 fd48 	bl	80088e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e5c:	e3cd      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e62:	e3ca      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007e64:	4b35      	ldr	r3, [pc, #212]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e6c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e6e:	4b33      	ldr	r3, [pc, #204]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 0304 	and.w	r3, r3, #4
 8007e76:	2b04      	cmp	r3, #4
 8007e78:	d10c      	bne.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8007e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d109      	bne.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e80:	4b2e      	ldr	r3, [pc, #184]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	08db      	lsrs	r3, r3, #3
 8007e86:	f003 0303 	and.w	r3, r3, #3
 8007e8a:	4a2d      	ldr	r2, [pc, #180]	; (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8007e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e92:	e01e      	b.n	8007ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e94:	4b29      	ldr	r3, [pc, #164]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ea0:	d106      	bne.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8007ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ea8:	d102      	bne.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007eaa:	4b26      	ldr	r3, [pc, #152]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007eac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007eae:	e010      	b.n	8007ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007eb0:	4b22      	ldr	r3, [pc, #136]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ebc:	d106      	bne.n	8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8007ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ec4:	d102      	bne.n	8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007ec6:	4b20      	ldr	r3, [pc, #128]	; (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8007ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007eca:	e002      	b.n	8007ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007ed0:	e393      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007ed2:	e392      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007ed4:	4b1d      	ldr	r3, [pc, #116]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ed8:	e38f      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ede:	e38c      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ee6:	f040 80a7 	bne.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007eea:	4b14      	ldr	r3, [pc, #80]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eee:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007ef2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007efa:	d05f      	beq.n	8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f02:	f200 8096 	bhi.w	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f08:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f0c:	f000 808e 	beq.w	800802c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8007f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f12:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f16:	f200 808c 	bhi.w	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f20:	d03a      	beq.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f28:	f200 8083 	bhi.w	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00e      	beq.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8007f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f38:	d01c      	beq.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8007f3a:	e07a      	b.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007f3c:	58024400 	.word	0x58024400
 8007f40:	03d09000 	.word	0x03d09000
 8007f44:	003d0900 	.word	0x003d0900
 8007f48:	007a1200 	.word	0x007a1200
 8007f4c:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f50:	4baa      	ldr	r3, [pc, #680]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f5c:	d107      	bne.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f62:	4618      	mov	r0, r3
 8007f64:	f000 fe14 	bl	8008b90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007f6c:	e345      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f72:	e342      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f74:	4ba1      	ldr	r3, [pc, #644]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f80:	d107      	bne.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f82:	f107 0318 	add.w	r3, r7, #24
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 fb5a 	bl	8008640 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007f90:	e333      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007f92:	2300      	movs	r3, #0
 8007f94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f96:	e330      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f98:	4b98      	ldr	r3, [pc, #608]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fa4:	d107      	bne.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fa6:	f107 030c 	add.w	r3, r7, #12
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 fc9c 	bl	80088e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007fb4:	e321      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fba:	e31e      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007fbc:	4b8f      	ldr	r3, [pc, #572]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007fc4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fc6:	4b8d      	ldr	r3, [pc, #564]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 0304 	and.w	r3, r3, #4
 8007fce:	2b04      	cmp	r3, #4
 8007fd0:	d10c      	bne.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8007fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d109      	bne.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007fd8:	4b88      	ldr	r3, [pc, #544]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	08db      	lsrs	r3, r3, #3
 8007fde:	f003 0303 	and.w	r3, r3, #3
 8007fe2:	4a87      	ldr	r2, [pc, #540]	; (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8007fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fea:	e01e      	b.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007fec:	4b83      	ldr	r3, [pc, #524]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ff8:	d106      	bne.n	8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8007ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ffc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008000:	d102      	bne.n	8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008002:	4b80      	ldr	r3, [pc, #512]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008004:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008006:	e010      	b.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008008:	4b7c      	ldr	r3, [pc, #496]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008010:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008014:	d106      	bne.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8008016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800801c:	d102      	bne.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800801e:	4b7a      	ldr	r3, [pc, #488]	; (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008020:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008022:	e002      	b.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008024:	2300      	movs	r3, #0
 8008026:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008028:	e2e7      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800802a:	e2e6      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800802c:	4b77      	ldr	r3, [pc, #476]	; (800820c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800802e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008030:	e2e3      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008032:	2300      	movs	r3, #0
 8008034:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008036:	e2e0      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800803e:	f040 809c 	bne.w	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008042:	4b6e      	ldr	r3, [pc, #440]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008046:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800804a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800804c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008052:	d054      	beq.n	80080fe <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8008054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008056:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800805a:	f200 808b 	bhi.w	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800805e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008060:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008064:	f000 8083 	beq.w	800816e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8008068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800806e:	f200 8081 	bhi.w	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008078:	d02f      	beq.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800807a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008080:	d878      	bhi.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008084:	2b00      	cmp	r3, #0
 8008086:	d004      	beq.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800808e:	d012      	beq.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008090:	e070      	b.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008092:	4b5a      	ldr	r3, [pc, #360]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800809a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800809e:	d107      	bne.n	80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080a4:	4618      	mov	r0, r3
 80080a6:	f000 fd73 	bl	8008b90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80080ae:	e2a4      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80080b0:	2300      	movs	r3, #0
 80080b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080b4:	e2a1      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080b6:	4b51      	ldr	r3, [pc, #324]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080c2:	d107      	bne.n	80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080c4:	f107 0318 	add.w	r3, r7, #24
 80080c8:	4618      	mov	r0, r3
 80080ca:	f000 fab9 	bl	8008640 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80080d2:	e292      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80080d4:	2300      	movs	r3, #0
 80080d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080d8:	e28f      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80080da:	4b48      	ldr	r3, [pc, #288]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080e6:	d107      	bne.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080e8:	f107 030c 	add.w	r3, r7, #12
 80080ec:	4618      	mov	r0, r3
 80080ee:	f000 fbfb 	bl	80088e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80080f6:	e280      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80080f8:	2300      	movs	r3, #0
 80080fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080fc:	e27d      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80080fe:	4b3f      	ldr	r3, [pc, #252]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008102:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008106:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008108:	4b3c      	ldr	r3, [pc, #240]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 0304 	and.w	r3, r3, #4
 8008110:	2b04      	cmp	r3, #4
 8008112:	d10c      	bne.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008116:	2b00      	cmp	r3, #0
 8008118:	d109      	bne.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800811a:	4b38      	ldr	r3, [pc, #224]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	08db      	lsrs	r3, r3, #3
 8008120:	f003 0303 	and.w	r3, r3, #3
 8008124:	4a36      	ldr	r2, [pc, #216]	; (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008126:	fa22 f303 	lsr.w	r3, r2, r3
 800812a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800812c:	e01e      	b.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800812e:	4b33      	ldr	r3, [pc, #204]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800813a:	d106      	bne.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800813c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800813e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008142:	d102      	bne.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008144:	4b2f      	ldr	r3, [pc, #188]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008146:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008148:	e010      	b.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800814a:	4b2c      	ldr	r3, [pc, #176]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008152:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008156:	d106      	bne.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8008158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800815a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800815e:	d102      	bne.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008160:	4b29      	ldr	r3, [pc, #164]	; (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008162:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008164:	e002      	b.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008166:	2300      	movs	r3, #0
 8008168:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800816a:	e246      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800816c:	e245      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800816e:	4b27      	ldr	r3, [pc, #156]	; (800820c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008170:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008172:	e242      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008174:	2300      	movs	r3, #0
 8008176:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008178:	e23f      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008180:	f040 80a8 	bne.w	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008184:	4b1d      	ldr	r3, [pc, #116]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008188:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800818c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800818e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008190:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008194:	d060      	beq.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8008196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008198:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800819c:	f200 8097 	bhi.w	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80081a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081a6:	f000 808f 	beq.w	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80081aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081b0:	f200 808d 	bhi.w	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80081b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081ba:	d03b      	beq.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 80081bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081c2:	f200 8084 	bhi.w	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80081c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d004      	beq.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80081cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081d2:	d01d      	beq.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 80081d4:	e07b      	b.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80081d6:	4b09      	ldr	r3, [pc, #36]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081e2:	d107      	bne.n	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 fcd1 	bl	8008b90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80081f2:	e202      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80081f4:	2300      	movs	r3, #0
 80081f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081f8:	e1ff      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80081fa:	bf00      	nop
 80081fc:	58024400 	.word	0x58024400
 8008200:	03d09000 	.word	0x03d09000
 8008204:	003d0900 	.word	0x003d0900
 8008208:	007a1200 	.word	0x007a1200
 800820c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008210:	4ba3      	ldr	r3, [pc, #652]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008218:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800821c:	d107      	bne.n	800822e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800821e:	f107 0318 	add.w	r3, r7, #24
 8008222:	4618      	mov	r0, r3
 8008224:	f000 fa0c 	bl	8008640 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800822c:	e1e5      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800822e:	2300      	movs	r3, #0
 8008230:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008232:	e1e2      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008234:	4b9a      	ldr	r3, [pc, #616]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800823c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008240:	d107      	bne.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008242:	f107 030c 	add.w	r3, r7, #12
 8008246:	4618      	mov	r0, r3
 8008248:	f000 fb4e 	bl	80088e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008250:	e1d3      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008252:	2300      	movs	r3, #0
 8008254:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008256:	e1d0      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008258:	4b91      	ldr	r3, [pc, #580]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800825a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800825c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008260:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008262:	4b8f      	ldr	r3, [pc, #572]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 0304 	and.w	r3, r3, #4
 800826a:	2b04      	cmp	r3, #4
 800826c:	d10c      	bne.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800826e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008270:	2b00      	cmp	r3, #0
 8008272:	d109      	bne.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008274:	4b8a      	ldr	r3, [pc, #552]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	08db      	lsrs	r3, r3, #3
 800827a:	f003 0303 	and.w	r3, r3, #3
 800827e:	4a89      	ldr	r2, [pc, #548]	; (80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008280:	fa22 f303 	lsr.w	r3, r2, r3
 8008284:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008286:	e01e      	b.n	80082c6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008288:	4b85      	ldr	r3, [pc, #532]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008294:	d106      	bne.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8008296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008298:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800829c:	d102      	bne.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800829e:	4b82      	ldr	r3, [pc, #520]	; (80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80082a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082a2:	e010      	b.n	80082c6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082a4:	4b7e      	ldr	r3, [pc, #504]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082b0:	d106      	bne.n	80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80082b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082b8:	d102      	bne.n	80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80082ba:	4b7c      	ldr	r3, [pc, #496]	; (80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80082bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082be:	e002      	b.n	80082c6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80082c0:	2300      	movs	r3, #0
 80082c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80082c4:	e199      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80082c6:	e198      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80082c8:	4b79      	ldr	r3, [pc, #484]	; (80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80082ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082cc:	e195      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80082ce:	2300      	movs	r3, #0
 80082d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082d2:	e192      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80082da:	d173      	bne.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80082dc:	4b70      	ldr	r3, [pc, #448]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80082de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80082e4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80082e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082ec:	d02f      	beq.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80082ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082f4:	d863      	bhi.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80082f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d004      	beq.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80082fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008302:	d012      	beq.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8008304:	e05b      	b.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008306:	4b66      	ldr	r3, [pc, #408]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800830e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008312:	d107      	bne.n	8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008314:	f107 0318 	add.w	r3, r7, #24
 8008318:	4618      	mov	r0, r3
 800831a:	f000 f991 	bl	8008640 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008322:	e16a      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008324:	2300      	movs	r3, #0
 8008326:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008328:	e167      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800832a:	4b5d      	ldr	r3, [pc, #372]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008332:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008336:	d107      	bne.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008338:	f107 030c 	add.w	r3, r7, #12
 800833c:	4618      	mov	r0, r3
 800833e:	f000 fad3 	bl	80088e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008346:	e158      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008348:	2300      	movs	r3, #0
 800834a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800834c:	e155      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800834e:	4b54      	ldr	r3, [pc, #336]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008352:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008356:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008358:	4b51      	ldr	r3, [pc, #324]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f003 0304 	and.w	r3, r3, #4
 8008360:	2b04      	cmp	r3, #4
 8008362:	d10c      	bne.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8008364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008366:	2b00      	cmp	r3, #0
 8008368:	d109      	bne.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800836a:	4b4d      	ldr	r3, [pc, #308]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	08db      	lsrs	r3, r3, #3
 8008370:	f003 0303 	and.w	r3, r3, #3
 8008374:	4a4b      	ldr	r2, [pc, #300]	; (80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008376:	fa22 f303 	lsr.w	r3, r2, r3
 800837a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800837c:	e01e      	b.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800837e:	4b48      	ldr	r3, [pc, #288]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800838a:	d106      	bne.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800838c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800838e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008392:	d102      	bne.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008394:	4b44      	ldr	r3, [pc, #272]	; (80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008398:	e010      	b.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800839a:	4b41      	ldr	r3, [pc, #260]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083a6:	d106      	bne.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80083a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083ae:	d102      	bne.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80083b0:	4b3e      	ldr	r3, [pc, #248]	; (80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80083b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083b4:	e002      	b.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80083b6:	2300      	movs	r3, #0
 80083b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80083ba:	e11e      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80083bc:	e11d      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80083be:	2300      	movs	r3, #0
 80083c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083c2:	e11a      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083ca:	d133      	bne.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80083cc:	4b34      	ldr	r3, [pc, #208]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80083ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083d4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80083d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d004      	beq.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 80083dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083e2:	d012      	beq.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80083e4:	e023      	b.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80083e6:	4b2e      	ldr	r3, [pc, #184]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083f2:	d107      	bne.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083f8:	4618      	mov	r0, r3
 80083fa:	f000 fbc9 	bl	8008b90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008400:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008402:	e0fa      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008404:	2300      	movs	r3, #0
 8008406:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008408:	e0f7      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800840a:	4b25      	ldr	r3, [pc, #148]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008412:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008416:	d107      	bne.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008418:	f107 0318 	add.w	r3, r7, #24
 800841c:	4618      	mov	r0, r3
 800841e:	f000 f90f 	bl	8008640 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008422:	6a3b      	ldr	r3, [r7, #32]
 8008424:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008426:	e0e8      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008428:	2300      	movs	r3, #0
 800842a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800842c:	e0e5      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800842e:	2300      	movs	r3, #0
 8008430:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008432:	e0e2      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800843a:	f040 808f 	bne.w	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800843e:	4b18      	ldr	r3, [pc, #96]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008442:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008446:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800844e:	d075      	beq.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8008450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008452:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008456:	d87e      	bhi.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800845e:	d060      	beq.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8008460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008466:	d876      	bhi.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800846e:	d045      	beq.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8008470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008472:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008476:	d86e      	bhi.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800847e:	d02b      	beq.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8008480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008482:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008486:	d866      	bhi.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848a:	2b00      	cmp	r3, #0
 800848c:	d004      	beq.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800848e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008490:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008494:	d00e      	beq.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008496:	e05e      	b.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008498:	f000 f8bc 	bl	8008614 <HAL_RCCEx_GetD3PCLK1Freq>
 800849c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800849e:	e0ac      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80084a0:	58024400 	.word	0x58024400
 80084a4:	03d09000 	.word	0x03d09000
 80084a8:	003d0900 	.word	0x003d0900
 80084ac:	007a1200 	.word	0x007a1200
 80084b0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084b4:	4b53      	ldr	r3, [pc, #332]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084c0:	d107      	bne.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084c2:	f107 0318 	add.w	r3, r7, #24
 80084c6:	4618      	mov	r0, r3
 80084c8:	f000 f8ba 	bl	8008640 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80084d0:	e093      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084d2:	2300      	movs	r3, #0
 80084d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084d6:	e090      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084d8:	4b4a      	ldr	r3, [pc, #296]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084e4:	d107      	bne.n	80084f6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084e6:	f107 030c 	add.w	r3, r7, #12
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 f9fc 	bl	80088e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80084f4:	e081      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084f6:	2300      	movs	r3, #0
 80084f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084fa:	e07e      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80084fc:	4b41      	ldr	r3, [pc, #260]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 0304 	and.w	r3, r3, #4
 8008504:	2b04      	cmp	r3, #4
 8008506:	d109      	bne.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008508:	4b3e      	ldr	r3, [pc, #248]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	08db      	lsrs	r3, r3, #3
 800850e:	f003 0303 	and.w	r3, r3, #3
 8008512:	4a3d      	ldr	r2, [pc, #244]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008514:	fa22 f303 	lsr.w	r3, r2, r3
 8008518:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800851a:	e06e      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800851c:	2300      	movs	r3, #0
 800851e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008520:	e06b      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008522:	4b38      	ldr	r3, [pc, #224]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800852a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800852e:	d102      	bne.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8008530:	4b36      	ldr	r3, [pc, #216]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008532:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008534:	e061      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008536:	2300      	movs	r3, #0
 8008538:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800853a:	e05e      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800853c:	4b31      	ldr	r3, [pc, #196]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008544:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008548:	d102      	bne.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800854a:	4b31      	ldr	r3, [pc, #196]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800854c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800854e:	e054      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008550:	2300      	movs	r3, #0
 8008552:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008554:	e051      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008556:	2300      	movs	r3, #0
 8008558:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800855a:	e04e      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008562:	d148      	bne.n	80085f6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008564:	4b27      	ldr	r3, [pc, #156]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008568:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800856c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800856e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008574:	d02a      	beq.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800857c:	d838      	bhi.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800857e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008580:	2b00      	cmp	r3, #0
 8008582:	d004      	beq.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008586:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800858a:	d00d      	beq.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800858c:	e030      	b.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800858e:	4b1d      	ldr	r3, [pc, #116]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008596:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800859a:	d102      	bne.n	80085a2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800859c:	4b1c      	ldr	r3, [pc, #112]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800859e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80085a0:	e02b      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085a2:	2300      	movs	r3, #0
 80085a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085a6:	e028      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80085a8:	4b16      	ldr	r3, [pc, #88]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085b4:	d107      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 fae8 	bl	8008b90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80085c4:	e019      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085c6:	2300      	movs	r3, #0
 80085c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085ca:	e016      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085cc:	4b0d      	ldr	r3, [pc, #52]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085d8:	d107      	bne.n	80085ea <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085da:	f107 0318 	add.w	r3, r7, #24
 80085de:	4618      	mov	r0, r3
 80085e0:	f000 f82e 	bl	8008640 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80085e8:	e007      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085ea:	2300      	movs	r3, #0
 80085ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085ee:	e004      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80085f0:	2300      	movs	r3, #0
 80085f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085f4:	e001      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 80085f6:	2300      	movs	r3, #0
 80085f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80085fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3740      	adds	r7, #64	; 0x40
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	58024400 	.word	0x58024400
 8008608:	03d09000 	.word	0x03d09000
 800860c:	003d0900 	.word	0x003d0900
 8008610:	007a1200 	.word	0x007a1200

08008614 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008618:	f7fe fb8e 	bl	8006d38 <HAL_RCC_GetHCLKFreq>
 800861c:	4602      	mov	r2, r0
 800861e:	4b06      	ldr	r3, [pc, #24]	; (8008638 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	091b      	lsrs	r3, r3, #4
 8008624:	f003 0307 	and.w	r3, r3, #7
 8008628:	4904      	ldr	r1, [pc, #16]	; (800863c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800862a:	5ccb      	ldrb	r3, [r1, r3]
 800862c:	f003 031f 	and.w	r3, r3, #31
 8008630:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008634:	4618      	mov	r0, r3
 8008636:	bd80      	pop	{r7, pc}
 8008638:	58024400 	.word	0x58024400
 800863c:	0800f94c 	.word	0x0800f94c

08008640 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008640:	b480      	push	{r7}
 8008642:	b089      	sub	sp, #36	; 0x24
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008648:	4ba1      	ldr	r3, [pc, #644]	; (80088d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800864a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800864c:	f003 0303 	and.w	r3, r3, #3
 8008650:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008652:	4b9f      	ldr	r3, [pc, #636]	; (80088d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008656:	0b1b      	lsrs	r3, r3, #12
 8008658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800865c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800865e:	4b9c      	ldr	r3, [pc, #624]	; (80088d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008662:	091b      	lsrs	r3, r3, #4
 8008664:	f003 0301 	and.w	r3, r3, #1
 8008668:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800866a:	4b99      	ldr	r3, [pc, #612]	; (80088d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800866c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800866e:	08db      	lsrs	r3, r3, #3
 8008670:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008674:	693a      	ldr	r2, [r7, #16]
 8008676:	fb02 f303 	mul.w	r3, r2, r3
 800867a:	ee07 3a90 	vmov	s15, r3
 800867e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008682:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	2b00      	cmp	r3, #0
 800868a:	f000 8111 	beq.w	80088b0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	2b02      	cmp	r3, #2
 8008692:	f000 8083 	beq.w	800879c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	2b02      	cmp	r3, #2
 800869a:	f200 80a1 	bhi.w	80087e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d003      	beq.n	80086ac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d056      	beq.n	8008758 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80086aa:	e099      	b.n	80087e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086ac:	4b88      	ldr	r3, [pc, #544]	; (80088d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0320 	and.w	r3, r3, #32
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d02d      	beq.n	8008714 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80086b8:	4b85      	ldr	r3, [pc, #532]	; (80088d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	08db      	lsrs	r3, r3, #3
 80086be:	f003 0303 	and.w	r3, r3, #3
 80086c2:	4a84      	ldr	r2, [pc, #528]	; (80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80086c4:	fa22 f303 	lsr.w	r3, r2, r3
 80086c8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	ee07 3a90 	vmov	s15, r3
 80086d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	ee07 3a90 	vmov	s15, r3
 80086da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086e2:	4b7b      	ldr	r3, [pc, #492]	; (80088d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ea:	ee07 3a90 	vmov	s15, r3
 80086ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80086f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80088d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800870a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800870e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008712:	e087      	b.n	8008824 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	ee07 3a90 	vmov	s15, r3
 800871a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800871e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80088dc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008726:	4b6a      	ldr	r3, [pc, #424]	; (80088d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800872e:	ee07 3a90 	vmov	s15, r3
 8008732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008736:	ed97 6a03 	vldr	s12, [r7, #12]
 800873a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80088d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800873e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800874a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800874e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008752:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008756:	e065      	b.n	8008824 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	ee07 3a90 	vmov	s15, r3
 800875e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008762:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80088e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800876a:	4b59      	ldr	r3, [pc, #356]	; (80088d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800876c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008772:	ee07 3a90 	vmov	s15, r3
 8008776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800877a:	ed97 6a03 	vldr	s12, [r7, #12]
 800877e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80088d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800878a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800878e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008796:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800879a:	e043      	b.n	8008824 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	ee07 3a90 	vmov	s15, r3
 80087a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80088e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80087aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ae:	4b48      	ldr	r3, [pc, #288]	; (80088d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087b6:	ee07 3a90 	vmov	s15, r3
 80087ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087be:	ed97 6a03 	vldr	s12, [r7, #12]
 80087c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80088d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087de:	e021      	b.n	8008824 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	ee07 3a90 	vmov	s15, r3
 80087e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80088e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80087ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087f2:	4b37      	ldr	r3, [pc, #220]	; (80088d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087fa:	ee07 3a90 	vmov	s15, r3
 80087fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008802:	ed97 6a03 	vldr	s12, [r7, #12]
 8008806:	eddf 5a34 	vldr	s11, [pc, #208]	; 80088d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800880a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800880e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800881a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800881e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008822:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008824:	4b2a      	ldr	r3, [pc, #168]	; (80088d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008828:	0a5b      	lsrs	r3, r3, #9
 800882a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800882e:	ee07 3a90 	vmov	s15, r3
 8008832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008836:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800883a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800883e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800884a:	ee17 2a90 	vmov	r2, s15
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008852:	4b1f      	ldr	r3, [pc, #124]	; (80088d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008856:	0c1b      	lsrs	r3, r3, #16
 8008858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800885c:	ee07 3a90 	vmov	s15, r3
 8008860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008864:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008868:	ee37 7a87 	vadd.f32	s14, s15, s14
 800886c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008878:	ee17 2a90 	vmov	r2, s15
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008880:	4b13      	ldr	r3, [pc, #76]	; (80088d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008884:	0e1b      	lsrs	r3, r3, #24
 8008886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800888a:	ee07 3a90 	vmov	s15, r3
 800888e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008892:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008896:	ee37 7a87 	vadd.f32	s14, s15, s14
 800889a:	edd7 6a07 	vldr	s13, [r7, #28]
 800889e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088a6:	ee17 2a90 	vmov	r2, s15
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80088ae:	e008      	b.n	80088c2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	609a      	str	r2, [r3, #8]
}
 80088c2:	bf00      	nop
 80088c4:	3724      	adds	r7, #36	; 0x24
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	58024400 	.word	0x58024400
 80088d4:	03d09000 	.word	0x03d09000
 80088d8:	46000000 	.word	0x46000000
 80088dc:	4c742400 	.word	0x4c742400
 80088e0:	4a742400 	.word	0x4a742400
 80088e4:	4af42400 	.word	0x4af42400

080088e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b089      	sub	sp, #36	; 0x24
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088f0:	4ba1      	ldr	r3, [pc, #644]	; (8008b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f4:	f003 0303 	and.w	r3, r3, #3
 80088f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80088fa:	4b9f      	ldr	r3, [pc, #636]	; (8008b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fe:	0d1b      	lsrs	r3, r3, #20
 8008900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008904:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008906:	4b9c      	ldr	r3, [pc, #624]	; (8008b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890a:	0a1b      	lsrs	r3, r3, #8
 800890c:	f003 0301 	and.w	r3, r3, #1
 8008910:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008912:	4b99      	ldr	r3, [pc, #612]	; (8008b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008916:	08db      	lsrs	r3, r3, #3
 8008918:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800891c:	693a      	ldr	r2, [r7, #16]
 800891e:	fb02 f303 	mul.w	r3, r2, r3
 8008922:	ee07 3a90 	vmov	s15, r3
 8008926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800892a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	2b00      	cmp	r3, #0
 8008932:	f000 8111 	beq.w	8008b58 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	2b02      	cmp	r3, #2
 800893a:	f000 8083 	beq.w	8008a44 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	2b02      	cmp	r3, #2
 8008942:	f200 80a1 	bhi.w	8008a88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d003      	beq.n	8008954 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	2b01      	cmp	r3, #1
 8008950:	d056      	beq.n	8008a00 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008952:	e099      	b.n	8008a88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008954:	4b88      	ldr	r3, [pc, #544]	; (8008b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 0320 	and.w	r3, r3, #32
 800895c:	2b00      	cmp	r3, #0
 800895e:	d02d      	beq.n	80089bc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008960:	4b85      	ldr	r3, [pc, #532]	; (8008b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	08db      	lsrs	r3, r3, #3
 8008966:	f003 0303 	and.w	r3, r3, #3
 800896a:	4a84      	ldr	r2, [pc, #528]	; (8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800896c:	fa22 f303 	lsr.w	r3, r2, r3
 8008970:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	ee07 3a90 	vmov	s15, r3
 8008978:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	ee07 3a90 	vmov	s15, r3
 8008982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800898a:	4b7b      	ldr	r3, [pc, #492]	; (8008b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800898c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008992:	ee07 3a90 	vmov	s15, r3
 8008996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800899a:	ed97 6a03 	vldr	s12, [r7, #12]
 800899e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008b80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80089ba:	e087      	b.n	8008acc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	ee07 3a90 	vmov	s15, r3
 80089c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008b84 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80089ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ce:	4b6a      	ldr	r3, [pc, #424]	; (8008b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089d6:	ee07 3a90 	vmov	s15, r3
 80089da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089de:	ed97 6a03 	vldr	s12, [r7, #12]
 80089e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008b80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089fe:	e065      	b.n	8008acc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	ee07 3a90 	vmov	s15, r3
 8008a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a0a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008b88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a12:	4b59      	ldr	r3, [pc, #356]	; (8008b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a1a:	ee07 3a90 	vmov	s15, r3
 8008a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a22:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a26:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008b80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a42:	e043      	b.n	8008acc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	ee07 3a90 	vmov	s15, r3
 8008a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a4e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008b8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a56:	4b48      	ldr	r3, [pc, #288]	; (8008b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a5e:	ee07 3a90 	vmov	s15, r3
 8008a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a6a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008b80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a86:	e021      	b.n	8008acc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	ee07 3a90 	vmov	s15, r3
 8008a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a92:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008b88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a9a:	4b37      	ldr	r3, [pc, #220]	; (8008b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aa2:	ee07 3a90 	vmov	s15, r3
 8008aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008aae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008b80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ac6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008aca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008acc:	4b2a      	ldr	r3, [pc, #168]	; (8008b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad0:	0a5b      	lsrs	r3, r3, #9
 8008ad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ad6:	ee07 3a90 	vmov	s15, r3
 8008ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ade:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ae2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ae6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008aea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008af2:	ee17 2a90 	vmov	r2, s15
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008afa:	4b1f      	ldr	r3, [pc, #124]	; (8008b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afe:	0c1b      	lsrs	r3, r3, #16
 8008b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b04:	ee07 3a90 	vmov	s15, r3
 8008b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b14:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b20:	ee17 2a90 	vmov	r2, s15
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008b28:	4b13      	ldr	r3, [pc, #76]	; (8008b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b2c:	0e1b      	lsrs	r3, r3, #24
 8008b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b32:	ee07 3a90 	vmov	s15, r3
 8008b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b42:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b4e:	ee17 2a90 	vmov	r2, s15
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008b56:	e008      	b.n	8008b6a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	609a      	str	r2, [r3, #8]
}
 8008b6a:	bf00      	nop
 8008b6c:	3724      	adds	r7, #36	; 0x24
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	58024400 	.word	0x58024400
 8008b7c:	03d09000 	.word	0x03d09000
 8008b80:	46000000 	.word	0x46000000
 8008b84:	4c742400 	.word	0x4c742400
 8008b88:	4a742400 	.word	0x4a742400
 8008b8c:	4af42400 	.word	0x4af42400

08008b90 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b089      	sub	sp, #36	; 0x24
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b98:	4ba0      	ldr	r3, [pc, #640]	; (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b9c:	f003 0303 	and.w	r3, r3, #3
 8008ba0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008ba2:	4b9e      	ldr	r3, [pc, #632]	; (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba6:	091b      	lsrs	r3, r3, #4
 8008ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bac:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008bae:	4b9b      	ldr	r3, [pc, #620]	; (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb2:	f003 0301 	and.w	r3, r3, #1
 8008bb6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008bb8:	4b98      	ldr	r3, [pc, #608]	; (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bbc:	08db      	lsrs	r3, r3, #3
 8008bbe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008bc2:	693a      	ldr	r2, [r7, #16]
 8008bc4:	fb02 f303 	mul.w	r3, r2, r3
 8008bc8:	ee07 3a90 	vmov	s15, r3
 8008bcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bd0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	f000 8111 	beq.w	8008dfe <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	f000 8083 	beq.w	8008cea <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	2b02      	cmp	r3, #2
 8008be8:	f200 80a1 	bhi.w	8008d2e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d003      	beq.n	8008bfa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d056      	beq.n	8008ca6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008bf8:	e099      	b.n	8008d2e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bfa:	4b88      	ldr	r3, [pc, #544]	; (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 0320 	and.w	r3, r3, #32
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d02d      	beq.n	8008c62 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c06:	4b85      	ldr	r3, [pc, #532]	; (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	08db      	lsrs	r3, r3, #3
 8008c0c:	f003 0303 	and.w	r3, r3, #3
 8008c10:	4a83      	ldr	r2, [pc, #524]	; (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008c12:	fa22 f303 	lsr.w	r3, r2, r3
 8008c16:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	ee07 3a90 	vmov	s15, r3
 8008c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	ee07 3a90 	vmov	s15, r3
 8008c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c30:	4b7a      	ldr	r3, [pc, #488]	; (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c38:	ee07 3a90 	vmov	s15, r3
 8008c3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c40:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c44:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008e24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c5c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008c60:	e087      	b.n	8008d72 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	ee07 3a90 	vmov	s15, r3
 8008c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c6c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008e28 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008c70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c74:	4b69      	ldr	r3, [pc, #420]	; (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c7c:	ee07 3a90 	vmov	s15, r3
 8008c80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c84:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c88:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008e24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ca0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ca4:	e065      	b.n	8008d72 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	ee07 3a90 	vmov	s15, r3
 8008cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cb0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008e2c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008cb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cb8:	4b58      	ldr	r3, [pc, #352]	; (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cc0:	ee07 3a90 	vmov	s15, r3
 8008cc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cc8:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ccc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008e24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008cd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ce4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ce8:	e043      	b.n	8008d72 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	ee07 3a90 	vmov	s15, r3
 8008cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cf4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008e30 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008cf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cfc:	4b47      	ldr	r3, [pc, #284]	; (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d04:	ee07 3a90 	vmov	s15, r3
 8008d08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d10:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008e24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d28:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d2c:	e021      	b.n	8008d72 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	ee07 3a90 	vmov	s15, r3
 8008d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d38:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008e28 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008d3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d40:	4b36      	ldr	r3, [pc, #216]	; (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d48:	ee07 3a90 	vmov	s15, r3
 8008d4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d50:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d54:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008e24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d6c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d70:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008d72:	4b2a      	ldr	r3, [pc, #168]	; (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d76:	0a5b      	lsrs	r3, r3, #9
 8008d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d7c:	ee07 3a90 	vmov	s15, r3
 8008d80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d98:	ee17 2a90 	vmov	r2, s15
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008da0:	4b1e      	ldr	r3, [pc, #120]	; (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da4:	0c1b      	lsrs	r3, r3, #16
 8008da6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008daa:	ee07 3a90 	vmov	s15, r3
 8008dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008db2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008db6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dba:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dc6:	ee17 2a90 	vmov	r2, s15
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008dce:	4b13      	ldr	r3, [pc, #76]	; (8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd2:	0e1b      	lsrs	r3, r3, #24
 8008dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dd8:	ee07 3a90 	vmov	s15, r3
 8008ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008de0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008de4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008de8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008df0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008df4:	ee17 2a90 	vmov	r2, s15
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008dfc:	e008      	b.n	8008e10 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	609a      	str	r2, [r3, #8]
}
 8008e10:	bf00      	nop
 8008e12:	3724      	adds	r7, #36	; 0x24
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr
 8008e1c:	58024400 	.word	0x58024400
 8008e20:	03d09000 	.word	0x03d09000
 8008e24:	46000000 	.word	0x46000000
 8008e28:	4c742400 	.word	0x4c742400
 8008e2c:	4a742400 	.word	0x4a742400
 8008e30:	4af42400 	.word	0x4af42400

08008e34 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e42:	4b53      	ldr	r3, [pc, #332]	; (8008f90 <RCCEx_PLL2_Config+0x15c>)
 8008e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e46:	f003 0303 	and.w	r3, r3, #3
 8008e4a:	2b03      	cmp	r3, #3
 8008e4c:	d101      	bne.n	8008e52 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e099      	b.n	8008f86 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008e52:	4b4f      	ldr	r3, [pc, #316]	; (8008f90 <RCCEx_PLL2_Config+0x15c>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a4e      	ldr	r2, [pc, #312]	; (8008f90 <RCCEx_PLL2_Config+0x15c>)
 8008e58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e5e:	f7fa f96b 	bl	8003138 <HAL_GetTick>
 8008e62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e64:	e008      	b.n	8008e78 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008e66:	f7fa f967 	bl	8003138 <HAL_GetTick>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	1ad3      	subs	r3, r2, r3
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d901      	bls.n	8008e78 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e74:	2303      	movs	r3, #3
 8008e76:	e086      	b.n	8008f86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e78:	4b45      	ldr	r3, [pc, #276]	; (8008f90 <RCCEx_PLL2_Config+0x15c>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d1f0      	bne.n	8008e66 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008e84:	4b42      	ldr	r3, [pc, #264]	; (8008f90 <RCCEx_PLL2_Config+0x15c>)
 8008e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e88:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	031b      	lsls	r3, r3, #12
 8008e92:	493f      	ldr	r1, [pc, #252]	; (8008f90 <RCCEx_PLL2_Config+0x15c>)
 8008e94:	4313      	orrs	r3, r2
 8008e96:	628b      	str	r3, [r1, #40]	; 0x28
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	3b01      	subs	r3, #1
 8008e9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	025b      	lsls	r3, r3, #9
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	431a      	orrs	r2, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	041b      	lsls	r3, r3, #16
 8008eb6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008eba:	431a      	orrs	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	3b01      	subs	r3, #1
 8008ec2:	061b      	lsls	r3, r3, #24
 8008ec4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ec8:	4931      	ldr	r1, [pc, #196]	; (8008f90 <RCCEx_PLL2_Config+0x15c>)
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008ece:	4b30      	ldr	r3, [pc, #192]	; (8008f90 <RCCEx_PLL2_Config+0x15c>)
 8008ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	695b      	ldr	r3, [r3, #20]
 8008eda:	492d      	ldr	r1, [pc, #180]	; (8008f90 <RCCEx_PLL2_Config+0x15c>)
 8008edc:	4313      	orrs	r3, r2
 8008ede:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008ee0:	4b2b      	ldr	r3, [pc, #172]	; (8008f90 <RCCEx_PLL2_Config+0x15c>)
 8008ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee4:	f023 0220 	bic.w	r2, r3, #32
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	699b      	ldr	r3, [r3, #24]
 8008eec:	4928      	ldr	r1, [pc, #160]	; (8008f90 <RCCEx_PLL2_Config+0x15c>)
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008ef2:	4b27      	ldr	r3, [pc, #156]	; (8008f90 <RCCEx_PLL2_Config+0x15c>)
 8008ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef6:	4a26      	ldr	r2, [pc, #152]	; (8008f90 <RCCEx_PLL2_Config+0x15c>)
 8008ef8:	f023 0310 	bic.w	r3, r3, #16
 8008efc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008efe:	4b24      	ldr	r3, [pc, #144]	; (8008f90 <RCCEx_PLL2_Config+0x15c>)
 8008f00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f02:	4b24      	ldr	r3, [pc, #144]	; (8008f94 <RCCEx_PLL2_Config+0x160>)
 8008f04:	4013      	ands	r3, r2
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	69d2      	ldr	r2, [r2, #28]
 8008f0a:	00d2      	lsls	r2, r2, #3
 8008f0c:	4920      	ldr	r1, [pc, #128]	; (8008f90 <RCCEx_PLL2_Config+0x15c>)
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008f12:	4b1f      	ldr	r3, [pc, #124]	; (8008f90 <RCCEx_PLL2_Config+0x15c>)
 8008f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f16:	4a1e      	ldr	r2, [pc, #120]	; (8008f90 <RCCEx_PLL2_Config+0x15c>)
 8008f18:	f043 0310 	orr.w	r3, r3, #16
 8008f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d106      	bne.n	8008f32 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008f24:	4b1a      	ldr	r3, [pc, #104]	; (8008f90 <RCCEx_PLL2_Config+0x15c>)
 8008f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f28:	4a19      	ldr	r2, [pc, #100]	; (8008f90 <RCCEx_PLL2_Config+0x15c>)
 8008f2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f30:	e00f      	b.n	8008f52 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d106      	bne.n	8008f46 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008f38:	4b15      	ldr	r3, [pc, #84]	; (8008f90 <RCCEx_PLL2_Config+0x15c>)
 8008f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3c:	4a14      	ldr	r2, [pc, #80]	; (8008f90 <RCCEx_PLL2_Config+0x15c>)
 8008f3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f44:	e005      	b.n	8008f52 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008f46:	4b12      	ldr	r3, [pc, #72]	; (8008f90 <RCCEx_PLL2_Config+0x15c>)
 8008f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4a:	4a11      	ldr	r2, [pc, #68]	; (8008f90 <RCCEx_PLL2_Config+0x15c>)
 8008f4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008f52:	4b0f      	ldr	r3, [pc, #60]	; (8008f90 <RCCEx_PLL2_Config+0x15c>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a0e      	ldr	r2, [pc, #56]	; (8008f90 <RCCEx_PLL2_Config+0x15c>)
 8008f58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f5e:	f7fa f8eb 	bl	8003138 <HAL_GetTick>
 8008f62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f64:	e008      	b.n	8008f78 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008f66:	f7fa f8e7 	bl	8003138 <HAL_GetTick>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	1ad3      	subs	r3, r2, r3
 8008f70:	2b02      	cmp	r3, #2
 8008f72:	d901      	bls.n	8008f78 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f74:	2303      	movs	r3, #3
 8008f76:	e006      	b.n	8008f86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f78:	4b05      	ldr	r3, [pc, #20]	; (8008f90 <RCCEx_PLL2_Config+0x15c>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d0f0      	beq.n	8008f66 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	58024400 	.word	0x58024400
 8008f94:	ffff0007 	.word	0xffff0007

08008f98 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008fa6:	4b53      	ldr	r3, [pc, #332]	; (80090f4 <RCCEx_PLL3_Config+0x15c>)
 8008fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008faa:	f003 0303 	and.w	r3, r3, #3
 8008fae:	2b03      	cmp	r3, #3
 8008fb0:	d101      	bne.n	8008fb6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e099      	b.n	80090ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008fb6:	4b4f      	ldr	r3, [pc, #316]	; (80090f4 <RCCEx_PLL3_Config+0x15c>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a4e      	ldr	r2, [pc, #312]	; (80090f4 <RCCEx_PLL3_Config+0x15c>)
 8008fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fc2:	f7fa f8b9 	bl	8003138 <HAL_GetTick>
 8008fc6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008fc8:	e008      	b.n	8008fdc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008fca:	f7fa f8b5 	bl	8003138 <HAL_GetTick>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	1ad3      	subs	r3, r2, r3
 8008fd4:	2b02      	cmp	r3, #2
 8008fd6:	d901      	bls.n	8008fdc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	e086      	b.n	80090ea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008fdc:	4b45      	ldr	r3, [pc, #276]	; (80090f4 <RCCEx_PLL3_Config+0x15c>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d1f0      	bne.n	8008fca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008fe8:	4b42      	ldr	r3, [pc, #264]	; (80090f4 <RCCEx_PLL3_Config+0x15c>)
 8008fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	051b      	lsls	r3, r3, #20
 8008ff6:	493f      	ldr	r1, [pc, #252]	; (80090f4 <RCCEx_PLL3_Config+0x15c>)
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	628b      	str	r3, [r1, #40]	; 0x28
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	3b01      	subs	r3, #1
 8009002:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	3b01      	subs	r3, #1
 800900c:	025b      	lsls	r3, r3, #9
 800900e:	b29b      	uxth	r3, r3
 8009010:	431a      	orrs	r2, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	3b01      	subs	r3, #1
 8009018:	041b      	lsls	r3, r3, #16
 800901a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800901e:	431a      	orrs	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	3b01      	subs	r3, #1
 8009026:	061b      	lsls	r3, r3, #24
 8009028:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800902c:	4931      	ldr	r1, [pc, #196]	; (80090f4 <RCCEx_PLL3_Config+0x15c>)
 800902e:	4313      	orrs	r3, r2
 8009030:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009032:	4b30      	ldr	r3, [pc, #192]	; (80090f4 <RCCEx_PLL3_Config+0x15c>)
 8009034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009036:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	695b      	ldr	r3, [r3, #20]
 800903e:	492d      	ldr	r1, [pc, #180]	; (80090f4 <RCCEx_PLL3_Config+0x15c>)
 8009040:	4313      	orrs	r3, r2
 8009042:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009044:	4b2b      	ldr	r3, [pc, #172]	; (80090f4 <RCCEx_PLL3_Config+0x15c>)
 8009046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009048:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	699b      	ldr	r3, [r3, #24]
 8009050:	4928      	ldr	r1, [pc, #160]	; (80090f4 <RCCEx_PLL3_Config+0x15c>)
 8009052:	4313      	orrs	r3, r2
 8009054:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009056:	4b27      	ldr	r3, [pc, #156]	; (80090f4 <RCCEx_PLL3_Config+0x15c>)
 8009058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905a:	4a26      	ldr	r2, [pc, #152]	; (80090f4 <RCCEx_PLL3_Config+0x15c>)
 800905c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009060:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009062:	4b24      	ldr	r3, [pc, #144]	; (80090f4 <RCCEx_PLL3_Config+0x15c>)
 8009064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009066:	4b24      	ldr	r3, [pc, #144]	; (80090f8 <RCCEx_PLL3_Config+0x160>)
 8009068:	4013      	ands	r3, r2
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	69d2      	ldr	r2, [r2, #28]
 800906e:	00d2      	lsls	r2, r2, #3
 8009070:	4920      	ldr	r1, [pc, #128]	; (80090f4 <RCCEx_PLL3_Config+0x15c>)
 8009072:	4313      	orrs	r3, r2
 8009074:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009076:	4b1f      	ldr	r3, [pc, #124]	; (80090f4 <RCCEx_PLL3_Config+0x15c>)
 8009078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907a:	4a1e      	ldr	r2, [pc, #120]	; (80090f4 <RCCEx_PLL3_Config+0x15c>)
 800907c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009080:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d106      	bne.n	8009096 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009088:	4b1a      	ldr	r3, [pc, #104]	; (80090f4 <RCCEx_PLL3_Config+0x15c>)
 800908a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908c:	4a19      	ldr	r2, [pc, #100]	; (80090f4 <RCCEx_PLL3_Config+0x15c>)
 800908e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009092:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009094:	e00f      	b.n	80090b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	2b01      	cmp	r3, #1
 800909a:	d106      	bne.n	80090aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800909c:	4b15      	ldr	r3, [pc, #84]	; (80090f4 <RCCEx_PLL3_Config+0x15c>)
 800909e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a0:	4a14      	ldr	r2, [pc, #80]	; (80090f4 <RCCEx_PLL3_Config+0x15c>)
 80090a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80090a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80090a8:	e005      	b.n	80090b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80090aa:	4b12      	ldr	r3, [pc, #72]	; (80090f4 <RCCEx_PLL3_Config+0x15c>)
 80090ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ae:	4a11      	ldr	r2, [pc, #68]	; (80090f4 <RCCEx_PLL3_Config+0x15c>)
 80090b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80090b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80090b6:	4b0f      	ldr	r3, [pc, #60]	; (80090f4 <RCCEx_PLL3_Config+0x15c>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a0e      	ldr	r2, [pc, #56]	; (80090f4 <RCCEx_PLL3_Config+0x15c>)
 80090bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090c2:	f7fa f839 	bl	8003138 <HAL_GetTick>
 80090c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80090c8:	e008      	b.n	80090dc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80090ca:	f7fa f835 	bl	8003138 <HAL_GetTick>
 80090ce:	4602      	mov	r2, r0
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	1ad3      	subs	r3, r2, r3
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d901      	bls.n	80090dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80090d8:	2303      	movs	r3, #3
 80090da:	e006      	b.n	80090ea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80090dc:	4b05      	ldr	r3, [pc, #20]	; (80090f4 <RCCEx_PLL3_Config+0x15c>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d0f0      	beq.n	80090ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80090e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	bf00      	nop
 80090f4:	58024400 	.word	0x58024400
 80090f8:	ffff0007 	.word	0xffff0007

080090fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d101      	bne.n	800910e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e049      	b.n	80091a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b00      	cmp	r3, #0
 8009118:	d106      	bne.n	8009128 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f7f9 fc80 	bl	8002a28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2202      	movs	r2, #2
 800912c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	3304      	adds	r3, #4
 8009138:	4619      	mov	r1, r3
 800913a:	4610      	mov	r0, r2
 800913c:	f000 fea6 	bl	8009e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
	...

080091ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d001      	beq.n	80091c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	e054      	b.n	800926e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2202      	movs	r2, #2
 80091c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68da      	ldr	r2, [r3, #12]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f042 0201 	orr.w	r2, r2, #1
 80091da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a26      	ldr	r2, [pc, #152]	; (800927c <HAL_TIM_Base_Start_IT+0xd0>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d022      	beq.n	800922c <HAL_TIM_Base_Start_IT+0x80>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091ee:	d01d      	beq.n	800922c <HAL_TIM_Base_Start_IT+0x80>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a22      	ldr	r2, [pc, #136]	; (8009280 <HAL_TIM_Base_Start_IT+0xd4>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d018      	beq.n	800922c <HAL_TIM_Base_Start_IT+0x80>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a21      	ldr	r2, [pc, #132]	; (8009284 <HAL_TIM_Base_Start_IT+0xd8>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d013      	beq.n	800922c <HAL_TIM_Base_Start_IT+0x80>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a1f      	ldr	r2, [pc, #124]	; (8009288 <HAL_TIM_Base_Start_IT+0xdc>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d00e      	beq.n	800922c <HAL_TIM_Base_Start_IT+0x80>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a1e      	ldr	r2, [pc, #120]	; (800928c <HAL_TIM_Base_Start_IT+0xe0>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d009      	beq.n	800922c <HAL_TIM_Base_Start_IT+0x80>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a1c      	ldr	r2, [pc, #112]	; (8009290 <HAL_TIM_Base_Start_IT+0xe4>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d004      	beq.n	800922c <HAL_TIM_Base_Start_IT+0x80>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a1b      	ldr	r2, [pc, #108]	; (8009294 <HAL_TIM_Base_Start_IT+0xe8>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d115      	bne.n	8009258 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	689a      	ldr	r2, [r3, #8]
 8009232:	4b19      	ldr	r3, [pc, #100]	; (8009298 <HAL_TIM_Base_Start_IT+0xec>)
 8009234:	4013      	ands	r3, r2
 8009236:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2b06      	cmp	r3, #6
 800923c:	d015      	beq.n	800926a <HAL_TIM_Base_Start_IT+0xbe>
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009244:	d011      	beq.n	800926a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f042 0201 	orr.w	r2, r2, #1
 8009254:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009256:	e008      	b.n	800926a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f042 0201 	orr.w	r2, r2, #1
 8009266:	601a      	str	r2, [r3, #0]
 8009268:	e000      	b.n	800926c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800926a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3714      	adds	r7, #20
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	40010000 	.word	0x40010000
 8009280:	40000400 	.word	0x40000400
 8009284:	40000800 	.word	0x40000800
 8009288:	40000c00 	.word	0x40000c00
 800928c:	40010400 	.word	0x40010400
 8009290:	40001800 	.word	0x40001800
 8009294:	40014000 	.word	0x40014000
 8009298:	00010007 	.word	0x00010007

0800929c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d101      	bne.n	80092ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	e049      	b.n	8009342 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d106      	bne.n	80092c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 f841 	bl	800934a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2202      	movs	r2, #2
 80092cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	3304      	adds	r3, #4
 80092d8:	4619      	mov	r1, r3
 80092da:	4610      	mov	r0, r2
 80092dc:	f000 fdd6 	bl	8009e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009340:	2300      	movs	r3, #0
}
 8009342:	4618      	mov	r0, r3
 8009344:	3708      	adds	r7, #8
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800934a:	b480      	push	{r7}
 800934c:	b083      	sub	sp, #12
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009352:	bf00      	nop
 8009354:	370c      	adds	r7, #12
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
	...

08009360 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d109      	bne.n	8009384 <HAL_TIM_PWM_Start+0x24>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009376:	b2db      	uxtb	r3, r3
 8009378:	2b01      	cmp	r3, #1
 800937a:	bf14      	ite	ne
 800937c:	2301      	movne	r3, #1
 800937e:	2300      	moveq	r3, #0
 8009380:	b2db      	uxtb	r3, r3
 8009382:	e03c      	b.n	80093fe <HAL_TIM_PWM_Start+0x9e>
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	2b04      	cmp	r3, #4
 8009388:	d109      	bne.n	800939e <HAL_TIM_PWM_Start+0x3e>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009390:	b2db      	uxtb	r3, r3
 8009392:	2b01      	cmp	r3, #1
 8009394:	bf14      	ite	ne
 8009396:	2301      	movne	r3, #1
 8009398:	2300      	moveq	r3, #0
 800939a:	b2db      	uxtb	r3, r3
 800939c:	e02f      	b.n	80093fe <HAL_TIM_PWM_Start+0x9e>
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	2b08      	cmp	r3, #8
 80093a2:	d109      	bne.n	80093b8 <HAL_TIM_PWM_Start+0x58>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	bf14      	ite	ne
 80093b0:	2301      	movne	r3, #1
 80093b2:	2300      	moveq	r3, #0
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	e022      	b.n	80093fe <HAL_TIM_PWM_Start+0x9e>
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	2b0c      	cmp	r3, #12
 80093bc:	d109      	bne.n	80093d2 <HAL_TIM_PWM_Start+0x72>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	bf14      	ite	ne
 80093ca:	2301      	movne	r3, #1
 80093cc:	2300      	moveq	r3, #0
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	e015      	b.n	80093fe <HAL_TIM_PWM_Start+0x9e>
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	2b10      	cmp	r3, #16
 80093d6:	d109      	bne.n	80093ec <HAL_TIM_PWM_Start+0x8c>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	bf14      	ite	ne
 80093e4:	2301      	movne	r3, #1
 80093e6:	2300      	moveq	r3, #0
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	e008      	b.n	80093fe <HAL_TIM_PWM_Start+0x9e>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	bf14      	ite	ne
 80093f8:	2301      	movne	r3, #1
 80093fa:	2300      	moveq	r3, #0
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d001      	beq.n	8009406 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009402:	2301      	movs	r3, #1
 8009404:	e0a1      	b.n	800954a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d104      	bne.n	8009416 <HAL_TIM_PWM_Start+0xb6>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2202      	movs	r2, #2
 8009410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009414:	e023      	b.n	800945e <HAL_TIM_PWM_Start+0xfe>
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	2b04      	cmp	r3, #4
 800941a:	d104      	bne.n	8009426 <HAL_TIM_PWM_Start+0xc6>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2202      	movs	r2, #2
 8009420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009424:	e01b      	b.n	800945e <HAL_TIM_PWM_Start+0xfe>
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	2b08      	cmp	r3, #8
 800942a:	d104      	bne.n	8009436 <HAL_TIM_PWM_Start+0xd6>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2202      	movs	r2, #2
 8009430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009434:	e013      	b.n	800945e <HAL_TIM_PWM_Start+0xfe>
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	2b0c      	cmp	r3, #12
 800943a:	d104      	bne.n	8009446 <HAL_TIM_PWM_Start+0xe6>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2202      	movs	r2, #2
 8009440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009444:	e00b      	b.n	800945e <HAL_TIM_PWM_Start+0xfe>
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	2b10      	cmp	r3, #16
 800944a:	d104      	bne.n	8009456 <HAL_TIM_PWM_Start+0xf6>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2202      	movs	r2, #2
 8009450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009454:	e003      	b.n	800945e <HAL_TIM_PWM_Start+0xfe>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2202      	movs	r2, #2
 800945a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2201      	movs	r2, #1
 8009464:	6839      	ldr	r1, [r7, #0]
 8009466:	4618      	mov	r0, r3
 8009468:	f001 f91e 	bl	800a6a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a38      	ldr	r2, [pc, #224]	; (8009554 <HAL_TIM_PWM_Start+0x1f4>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d013      	beq.n	800949e <HAL_TIM_PWM_Start+0x13e>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a37      	ldr	r2, [pc, #220]	; (8009558 <HAL_TIM_PWM_Start+0x1f8>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d00e      	beq.n	800949e <HAL_TIM_PWM_Start+0x13e>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a35      	ldr	r2, [pc, #212]	; (800955c <HAL_TIM_PWM_Start+0x1fc>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d009      	beq.n	800949e <HAL_TIM_PWM_Start+0x13e>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a34      	ldr	r2, [pc, #208]	; (8009560 <HAL_TIM_PWM_Start+0x200>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d004      	beq.n	800949e <HAL_TIM_PWM_Start+0x13e>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a32      	ldr	r2, [pc, #200]	; (8009564 <HAL_TIM_PWM_Start+0x204>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d101      	bne.n	80094a2 <HAL_TIM_PWM_Start+0x142>
 800949e:	2301      	movs	r3, #1
 80094a0:	e000      	b.n	80094a4 <HAL_TIM_PWM_Start+0x144>
 80094a2:	2300      	movs	r3, #0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d007      	beq.n	80094b8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094b6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a25      	ldr	r2, [pc, #148]	; (8009554 <HAL_TIM_PWM_Start+0x1f4>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d022      	beq.n	8009508 <HAL_TIM_PWM_Start+0x1a8>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094ca:	d01d      	beq.n	8009508 <HAL_TIM_PWM_Start+0x1a8>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a25      	ldr	r2, [pc, #148]	; (8009568 <HAL_TIM_PWM_Start+0x208>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d018      	beq.n	8009508 <HAL_TIM_PWM_Start+0x1a8>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a24      	ldr	r2, [pc, #144]	; (800956c <HAL_TIM_PWM_Start+0x20c>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d013      	beq.n	8009508 <HAL_TIM_PWM_Start+0x1a8>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a22      	ldr	r2, [pc, #136]	; (8009570 <HAL_TIM_PWM_Start+0x210>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d00e      	beq.n	8009508 <HAL_TIM_PWM_Start+0x1a8>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a1a      	ldr	r2, [pc, #104]	; (8009558 <HAL_TIM_PWM_Start+0x1f8>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d009      	beq.n	8009508 <HAL_TIM_PWM_Start+0x1a8>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a1e      	ldr	r2, [pc, #120]	; (8009574 <HAL_TIM_PWM_Start+0x214>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d004      	beq.n	8009508 <HAL_TIM_PWM_Start+0x1a8>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a16      	ldr	r2, [pc, #88]	; (800955c <HAL_TIM_PWM_Start+0x1fc>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d115      	bne.n	8009534 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	689a      	ldr	r2, [r3, #8]
 800950e:	4b1a      	ldr	r3, [pc, #104]	; (8009578 <HAL_TIM_PWM_Start+0x218>)
 8009510:	4013      	ands	r3, r2
 8009512:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2b06      	cmp	r3, #6
 8009518:	d015      	beq.n	8009546 <HAL_TIM_PWM_Start+0x1e6>
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009520:	d011      	beq.n	8009546 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f042 0201 	orr.w	r2, r2, #1
 8009530:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009532:	e008      	b.n	8009546 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f042 0201 	orr.w	r2, r2, #1
 8009542:	601a      	str	r2, [r3, #0]
 8009544:	e000      	b.n	8009548 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009546:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	40010000 	.word	0x40010000
 8009558:	40010400 	.word	0x40010400
 800955c:	40014000 	.word	0x40014000
 8009560:	40014400 	.word	0x40014400
 8009564:	40014800 	.word	0x40014800
 8009568:	40000400 	.word	0x40000400
 800956c:	40000800 	.word	0x40000800
 8009570:	40000c00 	.word	0x40000c00
 8009574:	40001800 	.word	0x40001800
 8009578:	00010007 	.word	0x00010007

0800957c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b086      	sub	sp, #24
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d101      	bne.n	8009590 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e08f      	b.n	80096b0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009596:	b2db      	uxtb	r3, r3
 8009598:	2b00      	cmp	r3, #0
 800959a:	d106      	bne.n	80095aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2200      	movs	r2, #0
 80095a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f7f9 fab5 	bl	8002b14 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2202      	movs	r2, #2
 80095ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	6899      	ldr	r1, [r3, #8]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	4b3e      	ldr	r3, [pc, #248]	; (80096b8 <HAL_TIM_Encoder_Init+0x13c>)
 80095be:	400b      	ands	r3, r1
 80095c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	3304      	adds	r3, #4
 80095ca:	4619      	mov	r1, r3
 80095cc:	4610      	mov	r0, r2
 80095ce:	f000 fc5d 	bl	8009e8c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	6a1b      	ldr	r3, [r3, #32]
 80095e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	697a      	ldr	r2, [r7, #20]
 80095f0:	4313      	orrs	r3, r2
 80095f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80095f4:	693a      	ldr	r2, [r7, #16]
 80095f6:	4b31      	ldr	r3, [pc, #196]	; (80096bc <HAL_TIM_Encoder_Init+0x140>)
 80095f8:	4013      	ands	r3, r2
 80095fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	689a      	ldr	r2, [r3, #8]
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	021b      	lsls	r3, r3, #8
 8009606:	4313      	orrs	r3, r2
 8009608:	693a      	ldr	r2, [r7, #16]
 800960a:	4313      	orrs	r3, r2
 800960c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800960e:	693a      	ldr	r2, [r7, #16]
 8009610:	4b2b      	ldr	r3, [pc, #172]	; (80096c0 <HAL_TIM_Encoder_Init+0x144>)
 8009612:	4013      	ands	r3, r2
 8009614:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009616:	693a      	ldr	r2, [r7, #16]
 8009618:	4b2a      	ldr	r3, [pc, #168]	; (80096c4 <HAL_TIM_Encoder_Init+0x148>)
 800961a:	4013      	ands	r3, r2
 800961c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	68da      	ldr	r2, [r3, #12]
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	69db      	ldr	r3, [r3, #28]
 8009626:	021b      	lsls	r3, r3, #8
 8009628:	4313      	orrs	r3, r2
 800962a:	693a      	ldr	r2, [r7, #16]
 800962c:	4313      	orrs	r3, r2
 800962e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	011a      	lsls	r2, r3, #4
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	6a1b      	ldr	r3, [r3, #32]
 800963a:	031b      	lsls	r3, r3, #12
 800963c:	4313      	orrs	r3, r2
 800963e:	693a      	ldr	r2, [r7, #16]
 8009640:	4313      	orrs	r3, r2
 8009642:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800964a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009652:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	685a      	ldr	r2, [r3, #4]
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	695b      	ldr	r3, [r3, #20]
 800965c:	011b      	lsls	r3, r3, #4
 800965e:	4313      	orrs	r3, r2
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	4313      	orrs	r3, r2
 8009664:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	697a      	ldr	r2, [r7, #20]
 800966c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	693a      	ldr	r2, [r7, #16]
 8009674:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2201      	movs	r2, #1
 8009682:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2201      	movs	r2, #1
 800968a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2201      	movs	r2, #1
 8009692:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2201      	movs	r2, #1
 800969a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2201      	movs	r2, #1
 80096a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2201      	movs	r2, #1
 80096aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3718      	adds	r7, #24
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	fffebff8 	.word	0xfffebff8
 80096bc:	fffffcfc 	.word	0xfffffcfc
 80096c0:	fffff3f3 	.word	0xfffff3f3
 80096c4:	ffff0f0f 	.word	0xffff0f0f

080096c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80096e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d110      	bne.n	800971a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80096f8:	7bfb      	ldrb	r3, [r7, #15]
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d102      	bne.n	8009704 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80096fe:	7b7b      	ldrb	r3, [r7, #13]
 8009700:	2b01      	cmp	r3, #1
 8009702:	d001      	beq.n	8009708 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009704:	2301      	movs	r3, #1
 8009706:	e069      	b.n	80097dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2202      	movs	r2, #2
 800970c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2202      	movs	r2, #2
 8009714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009718:	e031      	b.n	800977e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	2b04      	cmp	r3, #4
 800971e:	d110      	bne.n	8009742 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009720:	7bbb      	ldrb	r3, [r7, #14]
 8009722:	2b01      	cmp	r3, #1
 8009724:	d102      	bne.n	800972c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009726:	7b3b      	ldrb	r3, [r7, #12]
 8009728:	2b01      	cmp	r3, #1
 800972a:	d001      	beq.n	8009730 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800972c:	2301      	movs	r3, #1
 800972e:	e055      	b.n	80097dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2202      	movs	r2, #2
 8009734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2202      	movs	r2, #2
 800973c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009740:	e01d      	b.n	800977e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009742:	7bfb      	ldrb	r3, [r7, #15]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d108      	bne.n	800975a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009748:	7bbb      	ldrb	r3, [r7, #14]
 800974a:	2b01      	cmp	r3, #1
 800974c:	d105      	bne.n	800975a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800974e:	7b7b      	ldrb	r3, [r7, #13]
 8009750:	2b01      	cmp	r3, #1
 8009752:	d102      	bne.n	800975a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009754:	7b3b      	ldrb	r3, [r7, #12]
 8009756:	2b01      	cmp	r3, #1
 8009758:	d001      	beq.n	800975e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e03e      	b.n	80097dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2202      	movs	r2, #2
 8009762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2202      	movs	r2, #2
 800976a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2202      	movs	r2, #2
 8009772:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2202      	movs	r2, #2
 800977a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d003      	beq.n	800978c <HAL_TIM_Encoder_Start+0xc4>
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	2b04      	cmp	r3, #4
 8009788:	d008      	beq.n	800979c <HAL_TIM_Encoder_Start+0xd4>
 800978a:	e00f      	b.n	80097ac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2201      	movs	r2, #1
 8009792:	2100      	movs	r1, #0
 8009794:	4618      	mov	r0, r3
 8009796:	f000 ff87 	bl	800a6a8 <TIM_CCxChannelCmd>
      break;
 800979a:	e016      	b.n	80097ca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2201      	movs	r2, #1
 80097a2:	2104      	movs	r1, #4
 80097a4:	4618      	mov	r0, r3
 80097a6:	f000 ff7f 	bl	800a6a8 <TIM_CCxChannelCmd>
      break;
 80097aa:	e00e      	b.n	80097ca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	2201      	movs	r2, #1
 80097b2:	2100      	movs	r1, #0
 80097b4:	4618      	mov	r0, r3
 80097b6:	f000 ff77 	bl	800a6a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2201      	movs	r2, #1
 80097c0:	2104      	movs	r1, #4
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 ff70 	bl	800a6a8 <TIM_CCxChannelCmd>
      break;
 80097c8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f042 0201 	orr.w	r2, r2, #1
 80097d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3710      	adds	r7, #16
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	691b      	ldr	r3, [r3, #16]
 80097f2:	f003 0302 	and.w	r3, r3, #2
 80097f6:	2b02      	cmp	r3, #2
 80097f8:	d122      	bne.n	8009840 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	f003 0302 	and.w	r3, r3, #2
 8009804:	2b02      	cmp	r3, #2
 8009806:	d11b      	bne.n	8009840 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f06f 0202 	mvn.w	r2, #2
 8009810:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2201      	movs	r2, #1
 8009816:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	699b      	ldr	r3, [r3, #24]
 800981e:	f003 0303 	and.w	r3, r3, #3
 8009822:	2b00      	cmp	r3, #0
 8009824:	d003      	beq.n	800982e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 fb12 	bl	8009e50 <HAL_TIM_IC_CaptureCallback>
 800982c:	e005      	b.n	800983a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 fb04 	bl	8009e3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 fb15 	bl	8009e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	f003 0304 	and.w	r3, r3, #4
 800984a:	2b04      	cmp	r3, #4
 800984c:	d122      	bne.n	8009894 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	f003 0304 	and.w	r3, r3, #4
 8009858:	2b04      	cmp	r3, #4
 800985a:	d11b      	bne.n	8009894 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f06f 0204 	mvn.w	r2, #4
 8009864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2202      	movs	r2, #2
 800986a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	699b      	ldr	r3, [r3, #24]
 8009872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009876:	2b00      	cmp	r3, #0
 8009878:	d003      	beq.n	8009882 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 fae8 	bl	8009e50 <HAL_TIM_IC_CaptureCallback>
 8009880:	e005      	b.n	800988e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 fada 	bl	8009e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 faeb 	bl	8009e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	691b      	ldr	r3, [r3, #16]
 800989a:	f003 0308 	and.w	r3, r3, #8
 800989e:	2b08      	cmp	r3, #8
 80098a0:	d122      	bne.n	80098e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	f003 0308 	and.w	r3, r3, #8
 80098ac:	2b08      	cmp	r3, #8
 80098ae:	d11b      	bne.n	80098e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f06f 0208 	mvn.w	r2, #8
 80098b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2204      	movs	r2, #4
 80098be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	69db      	ldr	r3, [r3, #28]
 80098c6:	f003 0303 	and.w	r3, r3, #3
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d003      	beq.n	80098d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 fabe 	bl	8009e50 <HAL_TIM_IC_CaptureCallback>
 80098d4:	e005      	b.n	80098e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 fab0 	bl	8009e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 fac1 	bl	8009e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	f003 0310 	and.w	r3, r3, #16
 80098f2:	2b10      	cmp	r3, #16
 80098f4:	d122      	bne.n	800993c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	f003 0310 	and.w	r3, r3, #16
 8009900:	2b10      	cmp	r3, #16
 8009902:	d11b      	bne.n	800993c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f06f 0210 	mvn.w	r2, #16
 800990c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2208      	movs	r2, #8
 8009912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	69db      	ldr	r3, [r3, #28]
 800991a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800991e:	2b00      	cmp	r3, #0
 8009920:	d003      	beq.n	800992a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 fa94 	bl	8009e50 <HAL_TIM_IC_CaptureCallback>
 8009928:	e005      	b.n	8009936 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 fa86 	bl	8009e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 fa97 	bl	8009e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	691b      	ldr	r3, [r3, #16]
 8009942:	f003 0301 	and.w	r3, r3, #1
 8009946:	2b01      	cmp	r3, #1
 8009948:	d10e      	bne.n	8009968 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	f003 0301 	and.w	r3, r3, #1
 8009954:	2b01      	cmp	r3, #1
 8009956:	d107      	bne.n	8009968 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f06f 0201 	mvn.w	r2, #1
 8009960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f7f7 f9a8 	bl	8000cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009972:	2b80      	cmp	r3, #128	; 0x80
 8009974:	d10e      	bne.n	8009994 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009980:	2b80      	cmp	r3, #128	; 0x80
 8009982:	d107      	bne.n	8009994 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800998c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 ff48 	bl	800a824 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	691b      	ldr	r3, [r3, #16]
 800999a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800999e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099a2:	d10e      	bne.n	80099c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099ae:	2b80      	cmp	r3, #128	; 0x80
 80099b0:	d107      	bne.n	80099c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80099ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 ff3b 	bl	800a838 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	691b      	ldr	r3, [r3, #16]
 80099c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099cc:	2b40      	cmp	r3, #64	; 0x40
 80099ce:	d10e      	bne.n	80099ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099da:	2b40      	cmp	r3, #64	; 0x40
 80099dc:	d107      	bne.n	80099ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80099e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 fa45 	bl	8009e78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	691b      	ldr	r3, [r3, #16]
 80099f4:	f003 0320 	and.w	r3, r3, #32
 80099f8:	2b20      	cmp	r3, #32
 80099fa:	d10e      	bne.n	8009a1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	f003 0320 	and.w	r3, r3, #32
 8009a06:	2b20      	cmp	r3, #32
 8009a08:	d107      	bne.n	8009a1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f06f 0220 	mvn.w	r2, #32
 8009a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 fefb 	bl	800a810 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a1a:	bf00      	nop
 8009a1c:	3708      	adds	r7, #8
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
	...

08009a24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b086      	sub	sp, #24
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	60b9      	str	r1, [r7, #8]
 8009a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a30:	2300      	movs	r3, #0
 8009a32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d101      	bne.n	8009a42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009a3e:	2302      	movs	r3, #2
 8009a40:	e0ff      	b.n	8009c42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2201      	movs	r2, #1
 8009a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2b14      	cmp	r3, #20
 8009a4e:	f200 80f0 	bhi.w	8009c32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009a52:	a201      	add	r2, pc, #4	; (adr r2, 8009a58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a58:	08009aad 	.word	0x08009aad
 8009a5c:	08009c33 	.word	0x08009c33
 8009a60:	08009c33 	.word	0x08009c33
 8009a64:	08009c33 	.word	0x08009c33
 8009a68:	08009aed 	.word	0x08009aed
 8009a6c:	08009c33 	.word	0x08009c33
 8009a70:	08009c33 	.word	0x08009c33
 8009a74:	08009c33 	.word	0x08009c33
 8009a78:	08009b2f 	.word	0x08009b2f
 8009a7c:	08009c33 	.word	0x08009c33
 8009a80:	08009c33 	.word	0x08009c33
 8009a84:	08009c33 	.word	0x08009c33
 8009a88:	08009b6f 	.word	0x08009b6f
 8009a8c:	08009c33 	.word	0x08009c33
 8009a90:	08009c33 	.word	0x08009c33
 8009a94:	08009c33 	.word	0x08009c33
 8009a98:	08009bb1 	.word	0x08009bb1
 8009a9c:	08009c33 	.word	0x08009c33
 8009aa0:	08009c33 	.word	0x08009c33
 8009aa4:	08009c33 	.word	0x08009c33
 8009aa8:	08009bf1 	.word	0x08009bf1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	68b9      	ldr	r1, [r7, #8]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f000 fa84 	bl	8009fc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	699a      	ldr	r2, [r3, #24]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f042 0208 	orr.w	r2, r2, #8
 8009ac6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	699a      	ldr	r2, [r3, #24]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f022 0204 	bic.w	r2, r2, #4
 8009ad6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	6999      	ldr	r1, [r3, #24]
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	691a      	ldr	r2, [r3, #16]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	430a      	orrs	r2, r1
 8009ae8:	619a      	str	r2, [r3, #24]
      break;
 8009aea:	e0a5      	b.n	8009c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	68b9      	ldr	r1, [r7, #8]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 faf4 	bl	800a0e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	699a      	ldr	r2, [r3, #24]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	699a      	ldr	r2, [r3, #24]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	6999      	ldr	r1, [r3, #24]
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	021a      	lsls	r2, r3, #8
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	430a      	orrs	r2, r1
 8009b2a:	619a      	str	r2, [r3, #24]
      break;
 8009b2c:	e084      	b.n	8009c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68b9      	ldr	r1, [r7, #8]
 8009b34:	4618      	mov	r0, r3
 8009b36:	f000 fb5d 	bl	800a1f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	69da      	ldr	r2, [r3, #28]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f042 0208 	orr.w	r2, r2, #8
 8009b48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	69da      	ldr	r2, [r3, #28]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f022 0204 	bic.w	r2, r2, #4
 8009b58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	69d9      	ldr	r1, [r3, #28]
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	691a      	ldr	r2, [r3, #16]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	430a      	orrs	r2, r1
 8009b6a:	61da      	str	r2, [r3, #28]
      break;
 8009b6c:	e064      	b.n	8009c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	68b9      	ldr	r1, [r7, #8]
 8009b74:	4618      	mov	r0, r3
 8009b76:	f000 fbc5 	bl	800a304 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	69da      	ldr	r2, [r3, #28]
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	69da      	ldr	r2, [r3, #28]
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	69d9      	ldr	r1, [r3, #28]
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	691b      	ldr	r3, [r3, #16]
 8009ba4:	021a      	lsls	r2, r3, #8
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	430a      	orrs	r2, r1
 8009bac:	61da      	str	r2, [r3, #28]
      break;
 8009bae:	e043      	b.n	8009c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	68b9      	ldr	r1, [r7, #8]
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f000 fc0e 	bl	800a3d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f042 0208 	orr.w	r2, r2, #8
 8009bca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f022 0204 	bic.w	r2, r2, #4
 8009bda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	691a      	ldr	r2, [r3, #16]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	430a      	orrs	r2, r1
 8009bec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009bee:	e023      	b.n	8009c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	68b9      	ldr	r1, [r7, #8]
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f000 fc52 	bl	800a4a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	021a      	lsls	r2, r3, #8
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	430a      	orrs	r2, r1
 8009c2e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009c30:	e002      	b.n	8009c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	75fb      	strb	r3, [r7, #23]
      break;
 8009c36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3718      	adds	r7, #24
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop

08009c4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009c56:	2300      	movs	r3, #0
 8009c58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d101      	bne.n	8009c68 <HAL_TIM_ConfigClockSource+0x1c>
 8009c64:	2302      	movs	r3, #2
 8009c66:	e0dc      	b.n	8009e22 <HAL_TIM_ConfigClockSource+0x1d6>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2202      	movs	r2, #2
 8009c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c80:	68ba      	ldr	r2, [r7, #8]
 8009c82:	4b6a      	ldr	r3, [pc, #424]	; (8009e2c <HAL_TIM_ConfigClockSource+0x1e0>)
 8009c84:	4013      	ands	r3, r2
 8009c86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	68ba      	ldr	r2, [r7, #8]
 8009c96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a64      	ldr	r2, [pc, #400]	; (8009e30 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	f000 80a9 	beq.w	8009df6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009ca4:	4a62      	ldr	r2, [pc, #392]	; (8009e30 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	f200 80ae 	bhi.w	8009e08 <HAL_TIM_ConfigClockSource+0x1bc>
 8009cac:	4a61      	ldr	r2, [pc, #388]	; (8009e34 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	f000 80a1 	beq.w	8009df6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009cb4:	4a5f      	ldr	r2, [pc, #380]	; (8009e34 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	f200 80a6 	bhi.w	8009e08 <HAL_TIM_ConfigClockSource+0x1bc>
 8009cbc:	4a5e      	ldr	r2, [pc, #376]	; (8009e38 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	f000 8099 	beq.w	8009df6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009cc4:	4a5c      	ldr	r2, [pc, #368]	; (8009e38 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	f200 809e 	bhi.w	8009e08 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ccc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009cd0:	f000 8091 	beq.w	8009df6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009cd4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009cd8:	f200 8096 	bhi.w	8009e08 <HAL_TIM_ConfigClockSource+0x1bc>
 8009cdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ce0:	f000 8089 	beq.w	8009df6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009ce4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ce8:	f200 808e 	bhi.w	8009e08 <HAL_TIM_ConfigClockSource+0x1bc>
 8009cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cf0:	d03e      	beq.n	8009d70 <HAL_TIM_ConfigClockSource+0x124>
 8009cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cf6:	f200 8087 	bhi.w	8009e08 <HAL_TIM_ConfigClockSource+0x1bc>
 8009cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cfe:	f000 8086 	beq.w	8009e0e <HAL_TIM_ConfigClockSource+0x1c2>
 8009d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d06:	d87f      	bhi.n	8009e08 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d08:	2b70      	cmp	r3, #112	; 0x70
 8009d0a:	d01a      	beq.n	8009d42 <HAL_TIM_ConfigClockSource+0xf6>
 8009d0c:	2b70      	cmp	r3, #112	; 0x70
 8009d0e:	d87b      	bhi.n	8009e08 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d10:	2b60      	cmp	r3, #96	; 0x60
 8009d12:	d050      	beq.n	8009db6 <HAL_TIM_ConfigClockSource+0x16a>
 8009d14:	2b60      	cmp	r3, #96	; 0x60
 8009d16:	d877      	bhi.n	8009e08 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d18:	2b50      	cmp	r3, #80	; 0x50
 8009d1a:	d03c      	beq.n	8009d96 <HAL_TIM_ConfigClockSource+0x14a>
 8009d1c:	2b50      	cmp	r3, #80	; 0x50
 8009d1e:	d873      	bhi.n	8009e08 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d20:	2b40      	cmp	r3, #64	; 0x40
 8009d22:	d058      	beq.n	8009dd6 <HAL_TIM_ConfigClockSource+0x18a>
 8009d24:	2b40      	cmp	r3, #64	; 0x40
 8009d26:	d86f      	bhi.n	8009e08 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d28:	2b30      	cmp	r3, #48	; 0x30
 8009d2a:	d064      	beq.n	8009df6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009d2c:	2b30      	cmp	r3, #48	; 0x30
 8009d2e:	d86b      	bhi.n	8009e08 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d30:	2b20      	cmp	r3, #32
 8009d32:	d060      	beq.n	8009df6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009d34:	2b20      	cmp	r3, #32
 8009d36:	d867      	bhi.n	8009e08 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d05c      	beq.n	8009df6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009d3c:	2b10      	cmp	r3, #16
 8009d3e:	d05a      	beq.n	8009df6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009d40:	e062      	b.n	8009e08 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6818      	ldr	r0, [r3, #0]
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	6899      	ldr	r1, [r3, #8]
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	685a      	ldr	r2, [r3, #4]
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	f000 fc89 	bl	800a668 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009d64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	609a      	str	r2, [r3, #8]
      break;
 8009d6e:	e04f      	b.n	8009e10 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6818      	ldr	r0, [r3, #0]
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	6899      	ldr	r1, [r3, #8]
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	685a      	ldr	r2, [r3, #4]
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	f000 fc72 	bl	800a668 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	689a      	ldr	r2, [r3, #8]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d92:	609a      	str	r2, [r3, #8]
      break;
 8009d94:	e03c      	b.n	8009e10 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6818      	ldr	r0, [r3, #0]
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	6859      	ldr	r1, [r3, #4]
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	68db      	ldr	r3, [r3, #12]
 8009da2:	461a      	mov	r2, r3
 8009da4:	f000 fbe2 	bl	800a56c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2150      	movs	r1, #80	; 0x50
 8009dae:	4618      	mov	r0, r3
 8009db0:	f000 fc3c 	bl	800a62c <TIM_ITRx_SetConfig>
      break;
 8009db4:	e02c      	b.n	8009e10 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6818      	ldr	r0, [r3, #0]
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	6859      	ldr	r1, [r3, #4]
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	f000 fc01 	bl	800a5ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2160      	movs	r1, #96	; 0x60
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f000 fc2c 	bl	800a62c <TIM_ITRx_SetConfig>
      break;
 8009dd4:	e01c      	b.n	8009e10 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6818      	ldr	r0, [r3, #0]
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	6859      	ldr	r1, [r3, #4]
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	461a      	mov	r2, r3
 8009de4:	f000 fbc2 	bl	800a56c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2140      	movs	r1, #64	; 0x40
 8009dee:	4618      	mov	r0, r3
 8009df0:	f000 fc1c 	bl	800a62c <TIM_ITRx_SetConfig>
      break;
 8009df4:	e00c      	b.n	8009e10 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4619      	mov	r1, r3
 8009e00:	4610      	mov	r0, r2
 8009e02:	f000 fc13 	bl	800a62c <TIM_ITRx_SetConfig>
      break;
 8009e06:	e003      	b.n	8009e10 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e0c:	e000      	b.n	8009e10 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009e0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2201      	movs	r2, #1
 8009e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	ffceff88 	.word	0xffceff88
 8009e30:	00100040 	.word	0x00100040
 8009e34:	00100030 	.word	0x00100030
 8009e38:	00100020 	.word	0x00100020

08009e3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e44:	bf00      	nop
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e58:	bf00      	nop
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e6c:	bf00      	nop
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e80:	bf00      	nop
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4a40      	ldr	r2, [pc, #256]	; (8009fa0 <TIM_Base_SetConfig+0x114>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d013      	beq.n	8009ecc <TIM_Base_SetConfig+0x40>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eaa:	d00f      	beq.n	8009ecc <TIM_Base_SetConfig+0x40>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4a3d      	ldr	r2, [pc, #244]	; (8009fa4 <TIM_Base_SetConfig+0x118>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d00b      	beq.n	8009ecc <TIM_Base_SetConfig+0x40>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4a3c      	ldr	r2, [pc, #240]	; (8009fa8 <TIM_Base_SetConfig+0x11c>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d007      	beq.n	8009ecc <TIM_Base_SetConfig+0x40>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4a3b      	ldr	r2, [pc, #236]	; (8009fac <TIM_Base_SetConfig+0x120>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d003      	beq.n	8009ecc <TIM_Base_SetConfig+0x40>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4a3a      	ldr	r2, [pc, #232]	; (8009fb0 <TIM_Base_SetConfig+0x124>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d108      	bne.n	8009ede <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	4a2f      	ldr	r2, [pc, #188]	; (8009fa0 <TIM_Base_SetConfig+0x114>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d01f      	beq.n	8009f26 <TIM_Base_SetConfig+0x9a>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eec:	d01b      	beq.n	8009f26 <TIM_Base_SetConfig+0x9a>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4a2c      	ldr	r2, [pc, #176]	; (8009fa4 <TIM_Base_SetConfig+0x118>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d017      	beq.n	8009f26 <TIM_Base_SetConfig+0x9a>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4a2b      	ldr	r2, [pc, #172]	; (8009fa8 <TIM_Base_SetConfig+0x11c>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d013      	beq.n	8009f26 <TIM_Base_SetConfig+0x9a>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	4a2a      	ldr	r2, [pc, #168]	; (8009fac <TIM_Base_SetConfig+0x120>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d00f      	beq.n	8009f26 <TIM_Base_SetConfig+0x9a>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4a29      	ldr	r2, [pc, #164]	; (8009fb0 <TIM_Base_SetConfig+0x124>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d00b      	beq.n	8009f26 <TIM_Base_SetConfig+0x9a>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a28      	ldr	r2, [pc, #160]	; (8009fb4 <TIM_Base_SetConfig+0x128>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d007      	beq.n	8009f26 <TIM_Base_SetConfig+0x9a>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4a27      	ldr	r2, [pc, #156]	; (8009fb8 <TIM_Base_SetConfig+0x12c>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d003      	beq.n	8009f26 <TIM_Base_SetConfig+0x9a>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4a26      	ldr	r2, [pc, #152]	; (8009fbc <TIM_Base_SetConfig+0x130>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d108      	bne.n	8009f38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	68fa      	ldr	r2, [r7, #12]
 8009f34:	4313      	orrs	r3, r2
 8009f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	695b      	ldr	r3, [r3, #20]
 8009f42:	4313      	orrs	r3, r2
 8009f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	689a      	ldr	r2, [r3, #8]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	4a10      	ldr	r2, [pc, #64]	; (8009fa0 <TIM_Base_SetConfig+0x114>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d00f      	beq.n	8009f84 <TIM_Base_SetConfig+0xf8>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	4a12      	ldr	r2, [pc, #72]	; (8009fb0 <TIM_Base_SetConfig+0x124>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d00b      	beq.n	8009f84 <TIM_Base_SetConfig+0xf8>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4a11      	ldr	r2, [pc, #68]	; (8009fb4 <TIM_Base_SetConfig+0x128>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d007      	beq.n	8009f84 <TIM_Base_SetConfig+0xf8>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4a10      	ldr	r2, [pc, #64]	; (8009fb8 <TIM_Base_SetConfig+0x12c>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d003      	beq.n	8009f84 <TIM_Base_SetConfig+0xf8>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4a0f      	ldr	r2, [pc, #60]	; (8009fbc <TIM_Base_SetConfig+0x130>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d103      	bne.n	8009f8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	691a      	ldr	r2, [r3, #16]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	615a      	str	r2, [r3, #20]
}
 8009f92:	bf00      	nop
 8009f94:	3714      	adds	r7, #20
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr
 8009f9e:	bf00      	nop
 8009fa0:	40010000 	.word	0x40010000
 8009fa4:	40000400 	.word	0x40000400
 8009fa8:	40000800 	.word	0x40000800
 8009fac:	40000c00 	.word	0x40000c00
 8009fb0:	40010400 	.word	0x40010400
 8009fb4:	40014000 	.word	0x40014000
 8009fb8:	40014400 	.word	0x40014400
 8009fbc:	40014800 	.word	0x40014800

08009fc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b087      	sub	sp, #28
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a1b      	ldr	r3, [r3, #32]
 8009fce:	f023 0201 	bic.w	r2, r3, #1
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6a1b      	ldr	r3, [r3, #32]
 8009fda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	699b      	ldr	r3, [r3, #24]
 8009fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	4b37      	ldr	r3, [pc, #220]	; (800a0c8 <TIM_OC1_SetConfig+0x108>)
 8009fec:	4013      	ands	r3, r2
 8009fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f023 0303 	bic.w	r3, r3, #3
 8009ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	68fa      	ldr	r2, [r7, #12]
 8009ffe:	4313      	orrs	r3, r2
 800a000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	f023 0302 	bic.w	r3, r3, #2
 800a008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	697a      	ldr	r2, [r7, #20]
 800a010:	4313      	orrs	r3, r2
 800a012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a2d      	ldr	r2, [pc, #180]	; (800a0cc <TIM_OC1_SetConfig+0x10c>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d00f      	beq.n	800a03c <TIM_OC1_SetConfig+0x7c>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a2c      	ldr	r2, [pc, #176]	; (800a0d0 <TIM_OC1_SetConfig+0x110>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d00b      	beq.n	800a03c <TIM_OC1_SetConfig+0x7c>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4a2b      	ldr	r2, [pc, #172]	; (800a0d4 <TIM_OC1_SetConfig+0x114>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d007      	beq.n	800a03c <TIM_OC1_SetConfig+0x7c>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4a2a      	ldr	r2, [pc, #168]	; (800a0d8 <TIM_OC1_SetConfig+0x118>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d003      	beq.n	800a03c <TIM_OC1_SetConfig+0x7c>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	4a29      	ldr	r2, [pc, #164]	; (800a0dc <TIM_OC1_SetConfig+0x11c>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d10c      	bne.n	800a056 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	f023 0308 	bic.w	r3, r3, #8
 800a042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	697a      	ldr	r2, [r7, #20]
 800a04a:	4313      	orrs	r3, r2
 800a04c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	f023 0304 	bic.w	r3, r3, #4
 800a054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4a1c      	ldr	r2, [pc, #112]	; (800a0cc <TIM_OC1_SetConfig+0x10c>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d00f      	beq.n	800a07e <TIM_OC1_SetConfig+0xbe>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a1b      	ldr	r2, [pc, #108]	; (800a0d0 <TIM_OC1_SetConfig+0x110>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d00b      	beq.n	800a07e <TIM_OC1_SetConfig+0xbe>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a1a      	ldr	r2, [pc, #104]	; (800a0d4 <TIM_OC1_SetConfig+0x114>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d007      	beq.n	800a07e <TIM_OC1_SetConfig+0xbe>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4a19      	ldr	r2, [pc, #100]	; (800a0d8 <TIM_OC1_SetConfig+0x118>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d003      	beq.n	800a07e <TIM_OC1_SetConfig+0xbe>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	4a18      	ldr	r2, [pc, #96]	; (800a0dc <TIM_OC1_SetConfig+0x11c>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d111      	bne.n	800a0a2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a08c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	695b      	ldr	r3, [r3, #20]
 800a092:	693a      	ldr	r2, [r7, #16]
 800a094:	4313      	orrs	r3, r2
 800a096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	699b      	ldr	r3, [r3, #24]
 800a09c:	693a      	ldr	r2, [r7, #16]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	693a      	ldr	r2, [r7, #16]
 800a0a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	68fa      	ldr	r2, [r7, #12]
 800a0ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	685a      	ldr	r2, [r3, #4]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	697a      	ldr	r2, [r7, #20]
 800a0ba:	621a      	str	r2, [r3, #32]
}
 800a0bc:	bf00      	nop
 800a0be:	371c      	adds	r7, #28
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr
 800a0c8:	fffeff8f 	.word	0xfffeff8f
 800a0cc:	40010000 	.word	0x40010000
 800a0d0:	40010400 	.word	0x40010400
 800a0d4:	40014000 	.word	0x40014000
 800a0d8:	40014400 	.word	0x40014400
 800a0dc:	40014800 	.word	0x40014800

0800a0e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b087      	sub	sp, #28
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6a1b      	ldr	r3, [r3, #32]
 800a0ee:	f023 0210 	bic.w	r2, r3, #16
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a1b      	ldr	r3, [r3, #32]
 800a0fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	699b      	ldr	r3, [r3, #24]
 800a106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	4b34      	ldr	r3, [pc, #208]	; (800a1dc <TIM_OC2_SetConfig+0xfc>)
 800a10c:	4013      	ands	r3, r2
 800a10e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	021b      	lsls	r3, r3, #8
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	4313      	orrs	r3, r2
 800a122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	f023 0320 	bic.w	r3, r3, #32
 800a12a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	011b      	lsls	r3, r3, #4
 800a132:	697a      	ldr	r2, [r7, #20]
 800a134:	4313      	orrs	r3, r2
 800a136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	4a29      	ldr	r2, [pc, #164]	; (800a1e0 <TIM_OC2_SetConfig+0x100>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d003      	beq.n	800a148 <TIM_OC2_SetConfig+0x68>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	4a28      	ldr	r2, [pc, #160]	; (800a1e4 <TIM_OC2_SetConfig+0x104>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d10d      	bne.n	800a164 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a14e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	68db      	ldr	r3, [r3, #12]
 800a154:	011b      	lsls	r3, r3, #4
 800a156:	697a      	ldr	r2, [r7, #20]
 800a158:	4313      	orrs	r3, r2
 800a15a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a162:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a1e      	ldr	r2, [pc, #120]	; (800a1e0 <TIM_OC2_SetConfig+0x100>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d00f      	beq.n	800a18c <TIM_OC2_SetConfig+0xac>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4a1d      	ldr	r2, [pc, #116]	; (800a1e4 <TIM_OC2_SetConfig+0x104>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d00b      	beq.n	800a18c <TIM_OC2_SetConfig+0xac>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a1c      	ldr	r2, [pc, #112]	; (800a1e8 <TIM_OC2_SetConfig+0x108>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d007      	beq.n	800a18c <TIM_OC2_SetConfig+0xac>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4a1b      	ldr	r2, [pc, #108]	; (800a1ec <TIM_OC2_SetConfig+0x10c>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d003      	beq.n	800a18c <TIM_OC2_SetConfig+0xac>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	4a1a      	ldr	r2, [pc, #104]	; (800a1f0 <TIM_OC2_SetConfig+0x110>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d113      	bne.n	800a1b4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a192:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a19a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	695b      	ldr	r3, [r3, #20]
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	693a      	ldr	r2, [r7, #16]
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	699b      	ldr	r3, [r3, #24]
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	693a      	ldr	r2, [r7, #16]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	693a      	ldr	r2, [r7, #16]
 800a1b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	685a      	ldr	r2, [r3, #4]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	697a      	ldr	r2, [r7, #20]
 800a1cc:	621a      	str	r2, [r3, #32]
}
 800a1ce:	bf00      	nop
 800a1d0:	371c      	adds	r7, #28
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr
 800a1da:	bf00      	nop
 800a1dc:	feff8fff 	.word	0xfeff8fff
 800a1e0:	40010000 	.word	0x40010000
 800a1e4:	40010400 	.word	0x40010400
 800a1e8:	40014000 	.word	0x40014000
 800a1ec:	40014400 	.word	0x40014400
 800a1f0:	40014800 	.word	0x40014800

0800a1f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b087      	sub	sp, #28
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6a1b      	ldr	r3, [r3, #32]
 800a202:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a1b      	ldr	r3, [r3, #32]
 800a20e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	69db      	ldr	r3, [r3, #28]
 800a21a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a21c:	68fa      	ldr	r2, [r7, #12]
 800a21e:	4b33      	ldr	r3, [pc, #204]	; (800a2ec <TIM_OC3_SetConfig+0xf8>)
 800a220:	4013      	ands	r3, r2
 800a222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f023 0303 	bic.w	r3, r3, #3
 800a22a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	4313      	orrs	r3, r2
 800a234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a23c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	021b      	lsls	r3, r3, #8
 800a244:	697a      	ldr	r2, [r7, #20]
 800a246:	4313      	orrs	r3, r2
 800a248:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4a28      	ldr	r2, [pc, #160]	; (800a2f0 <TIM_OC3_SetConfig+0xfc>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d003      	beq.n	800a25a <TIM_OC3_SetConfig+0x66>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	4a27      	ldr	r2, [pc, #156]	; (800a2f4 <TIM_OC3_SetConfig+0x100>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d10d      	bne.n	800a276 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a260:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	68db      	ldr	r3, [r3, #12]
 800a266:	021b      	lsls	r3, r3, #8
 800a268:	697a      	ldr	r2, [r7, #20]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	4a1d      	ldr	r2, [pc, #116]	; (800a2f0 <TIM_OC3_SetConfig+0xfc>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d00f      	beq.n	800a29e <TIM_OC3_SetConfig+0xaa>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	4a1c      	ldr	r2, [pc, #112]	; (800a2f4 <TIM_OC3_SetConfig+0x100>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d00b      	beq.n	800a29e <TIM_OC3_SetConfig+0xaa>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	4a1b      	ldr	r2, [pc, #108]	; (800a2f8 <TIM_OC3_SetConfig+0x104>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d007      	beq.n	800a29e <TIM_OC3_SetConfig+0xaa>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	4a1a      	ldr	r2, [pc, #104]	; (800a2fc <TIM_OC3_SetConfig+0x108>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d003      	beq.n	800a29e <TIM_OC3_SetConfig+0xaa>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	4a19      	ldr	r2, [pc, #100]	; (800a300 <TIM_OC3_SetConfig+0x10c>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d113      	bne.n	800a2c6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	695b      	ldr	r3, [r3, #20]
 800a2b2:	011b      	lsls	r3, r3, #4
 800a2b4:	693a      	ldr	r2, [r7, #16]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	699b      	ldr	r3, [r3, #24]
 800a2be:	011b      	lsls	r3, r3, #4
 800a2c0:	693a      	ldr	r2, [r7, #16]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	693a      	ldr	r2, [r7, #16]
 800a2ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	68fa      	ldr	r2, [r7, #12]
 800a2d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	685a      	ldr	r2, [r3, #4]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	697a      	ldr	r2, [r7, #20]
 800a2de:	621a      	str	r2, [r3, #32]
}
 800a2e0:	bf00      	nop
 800a2e2:	371c      	adds	r7, #28
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr
 800a2ec:	fffeff8f 	.word	0xfffeff8f
 800a2f0:	40010000 	.word	0x40010000
 800a2f4:	40010400 	.word	0x40010400
 800a2f8:	40014000 	.word	0x40014000
 800a2fc:	40014400 	.word	0x40014400
 800a300:	40014800 	.word	0x40014800

0800a304 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a304:	b480      	push	{r7}
 800a306:	b087      	sub	sp, #28
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a1b      	ldr	r3, [r3, #32]
 800a312:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6a1b      	ldr	r3, [r3, #32]
 800a31e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	69db      	ldr	r3, [r3, #28]
 800a32a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	4b24      	ldr	r3, [pc, #144]	; (800a3c0 <TIM_OC4_SetConfig+0xbc>)
 800a330:	4013      	ands	r3, r2
 800a332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a33a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	021b      	lsls	r3, r3, #8
 800a342:	68fa      	ldr	r2, [r7, #12]
 800a344:	4313      	orrs	r3, r2
 800a346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a34e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	031b      	lsls	r3, r3, #12
 800a356:	693a      	ldr	r2, [r7, #16]
 800a358:	4313      	orrs	r3, r2
 800a35a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	4a19      	ldr	r2, [pc, #100]	; (800a3c4 <TIM_OC4_SetConfig+0xc0>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d00f      	beq.n	800a384 <TIM_OC4_SetConfig+0x80>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	4a18      	ldr	r2, [pc, #96]	; (800a3c8 <TIM_OC4_SetConfig+0xc4>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d00b      	beq.n	800a384 <TIM_OC4_SetConfig+0x80>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	4a17      	ldr	r2, [pc, #92]	; (800a3cc <TIM_OC4_SetConfig+0xc8>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d007      	beq.n	800a384 <TIM_OC4_SetConfig+0x80>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	4a16      	ldr	r2, [pc, #88]	; (800a3d0 <TIM_OC4_SetConfig+0xcc>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d003      	beq.n	800a384 <TIM_OC4_SetConfig+0x80>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	4a15      	ldr	r2, [pc, #84]	; (800a3d4 <TIM_OC4_SetConfig+0xd0>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d109      	bne.n	800a398 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a38a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	695b      	ldr	r3, [r3, #20]
 800a390:	019b      	lsls	r3, r3, #6
 800a392:	697a      	ldr	r2, [r7, #20]
 800a394:	4313      	orrs	r3, r2
 800a396:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	697a      	ldr	r2, [r7, #20]
 800a39c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	68fa      	ldr	r2, [r7, #12]
 800a3a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	685a      	ldr	r2, [r3, #4]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	621a      	str	r2, [r3, #32]
}
 800a3b2:	bf00      	nop
 800a3b4:	371c      	adds	r7, #28
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	feff8fff 	.word	0xfeff8fff
 800a3c4:	40010000 	.word	0x40010000
 800a3c8:	40010400 	.word	0x40010400
 800a3cc:	40014000 	.word	0x40014000
 800a3d0:	40014400 	.word	0x40014400
 800a3d4:	40014800 	.word	0x40014800

0800a3d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b087      	sub	sp, #28
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a1b      	ldr	r3, [r3, #32]
 800a3e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a1b      	ldr	r3, [r3, #32]
 800a3f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a400:	68fa      	ldr	r2, [r7, #12]
 800a402:	4b21      	ldr	r3, [pc, #132]	; (800a488 <TIM_OC5_SetConfig+0xb0>)
 800a404:	4013      	ands	r3, r2
 800a406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	68fa      	ldr	r2, [r7, #12]
 800a40e:	4313      	orrs	r3, r2
 800a410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a418:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	041b      	lsls	r3, r3, #16
 800a420:	693a      	ldr	r2, [r7, #16]
 800a422:	4313      	orrs	r3, r2
 800a424:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a18      	ldr	r2, [pc, #96]	; (800a48c <TIM_OC5_SetConfig+0xb4>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d00f      	beq.n	800a44e <TIM_OC5_SetConfig+0x76>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a17      	ldr	r2, [pc, #92]	; (800a490 <TIM_OC5_SetConfig+0xb8>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d00b      	beq.n	800a44e <TIM_OC5_SetConfig+0x76>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a16      	ldr	r2, [pc, #88]	; (800a494 <TIM_OC5_SetConfig+0xbc>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d007      	beq.n	800a44e <TIM_OC5_SetConfig+0x76>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4a15      	ldr	r2, [pc, #84]	; (800a498 <TIM_OC5_SetConfig+0xc0>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d003      	beq.n	800a44e <TIM_OC5_SetConfig+0x76>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	4a14      	ldr	r2, [pc, #80]	; (800a49c <TIM_OC5_SetConfig+0xc4>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d109      	bne.n	800a462 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a454:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	695b      	ldr	r3, [r3, #20]
 800a45a:	021b      	lsls	r3, r3, #8
 800a45c:	697a      	ldr	r2, [r7, #20]
 800a45e:	4313      	orrs	r3, r2
 800a460:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	697a      	ldr	r2, [r7, #20]
 800a466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	68fa      	ldr	r2, [r7, #12]
 800a46c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	685a      	ldr	r2, [r3, #4]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	693a      	ldr	r2, [r7, #16]
 800a47a:	621a      	str	r2, [r3, #32]
}
 800a47c:	bf00      	nop
 800a47e:	371c      	adds	r7, #28
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr
 800a488:	fffeff8f 	.word	0xfffeff8f
 800a48c:	40010000 	.word	0x40010000
 800a490:	40010400 	.word	0x40010400
 800a494:	40014000 	.word	0x40014000
 800a498:	40014400 	.word	0x40014400
 800a49c:	40014800 	.word	0x40014800

0800a4a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b087      	sub	sp, #28
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6a1b      	ldr	r3, [r3, #32]
 800a4ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6a1b      	ldr	r3, [r3, #32]
 800a4ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a4c8:	68fa      	ldr	r2, [r7, #12]
 800a4ca:	4b22      	ldr	r3, [pc, #136]	; (800a554 <TIM_OC6_SetConfig+0xb4>)
 800a4cc:	4013      	ands	r3, r2
 800a4ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	021b      	lsls	r3, r3, #8
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a4e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	051b      	lsls	r3, r3, #20
 800a4ea:	693a      	ldr	r2, [r7, #16]
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4a19      	ldr	r2, [pc, #100]	; (800a558 <TIM_OC6_SetConfig+0xb8>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d00f      	beq.n	800a518 <TIM_OC6_SetConfig+0x78>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	4a18      	ldr	r2, [pc, #96]	; (800a55c <TIM_OC6_SetConfig+0xbc>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d00b      	beq.n	800a518 <TIM_OC6_SetConfig+0x78>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	4a17      	ldr	r2, [pc, #92]	; (800a560 <TIM_OC6_SetConfig+0xc0>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d007      	beq.n	800a518 <TIM_OC6_SetConfig+0x78>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	4a16      	ldr	r2, [pc, #88]	; (800a564 <TIM_OC6_SetConfig+0xc4>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d003      	beq.n	800a518 <TIM_OC6_SetConfig+0x78>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	4a15      	ldr	r2, [pc, #84]	; (800a568 <TIM_OC6_SetConfig+0xc8>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d109      	bne.n	800a52c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a51e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	695b      	ldr	r3, [r3, #20]
 800a524:	029b      	lsls	r3, r3, #10
 800a526:	697a      	ldr	r2, [r7, #20]
 800a528:	4313      	orrs	r3, r2
 800a52a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	697a      	ldr	r2, [r7, #20]
 800a530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	685a      	ldr	r2, [r3, #4]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	693a      	ldr	r2, [r7, #16]
 800a544:	621a      	str	r2, [r3, #32]
}
 800a546:	bf00      	nop
 800a548:	371c      	adds	r7, #28
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop
 800a554:	feff8fff 	.word	0xfeff8fff
 800a558:	40010000 	.word	0x40010000
 800a55c:	40010400 	.word	0x40010400
 800a560:	40014000 	.word	0x40014000
 800a564:	40014400 	.word	0x40014400
 800a568:	40014800 	.word	0x40014800

0800a56c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b087      	sub	sp, #28
 800a570:	af00      	add	r7, sp, #0
 800a572:	60f8      	str	r0, [r7, #12]
 800a574:	60b9      	str	r1, [r7, #8]
 800a576:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6a1b      	ldr	r3, [r3, #32]
 800a57c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	6a1b      	ldr	r3, [r3, #32]
 800a582:	f023 0201 	bic.w	r2, r3, #1
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	699b      	ldr	r3, [r3, #24]
 800a58e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	011b      	lsls	r3, r3, #4
 800a59c:	693a      	ldr	r2, [r7, #16]
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	f023 030a 	bic.w	r3, r3, #10
 800a5a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a5aa:	697a      	ldr	r2, [r7, #20]
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	693a      	ldr	r2, [r7, #16]
 800a5b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	697a      	ldr	r2, [r7, #20]
 800a5bc:	621a      	str	r2, [r3, #32]
}
 800a5be:	bf00      	nop
 800a5c0:	371c      	adds	r7, #28
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr

0800a5ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5ca:	b480      	push	{r7}
 800a5cc:	b087      	sub	sp, #28
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	60f8      	str	r0, [r7, #12]
 800a5d2:	60b9      	str	r1, [r7, #8]
 800a5d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	6a1b      	ldr	r3, [r3, #32]
 800a5da:	f023 0210 	bic.w	r2, r3, #16
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	699b      	ldr	r3, [r3, #24]
 800a5e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	6a1b      	ldr	r3, [r3, #32]
 800a5ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a5f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	031b      	lsls	r3, r3, #12
 800a5fa:	697a      	ldr	r2, [r7, #20]
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a606:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	011b      	lsls	r3, r3, #4
 800a60c:	693a      	ldr	r2, [r7, #16]
 800a60e:	4313      	orrs	r3, r2
 800a610:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	697a      	ldr	r2, [r7, #20]
 800a616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	693a      	ldr	r2, [r7, #16]
 800a61c:	621a      	str	r2, [r3, #32]
}
 800a61e:	bf00      	nop
 800a620:	371c      	adds	r7, #28
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr
	...

0800a62c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b085      	sub	sp, #20
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	4b09      	ldr	r3, [pc, #36]	; (800a664 <TIM_ITRx_SetConfig+0x38>)
 800a640:	4013      	ands	r3, r2
 800a642:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a644:	683a      	ldr	r2, [r7, #0]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	4313      	orrs	r3, r2
 800a64a:	f043 0307 	orr.w	r3, r3, #7
 800a64e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	68fa      	ldr	r2, [r7, #12]
 800a654:	609a      	str	r2, [r3, #8]
}
 800a656:	bf00      	nop
 800a658:	3714      	adds	r7, #20
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr
 800a662:	bf00      	nop
 800a664:	ffcfff8f 	.word	0xffcfff8f

0800a668 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a668:	b480      	push	{r7}
 800a66a:	b087      	sub	sp, #28
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	607a      	str	r2, [r7, #4]
 800a674:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a682:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	021a      	lsls	r2, r3, #8
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	431a      	orrs	r2, r3
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	4313      	orrs	r3, r2
 800a690:	697a      	ldr	r2, [r7, #20]
 800a692:	4313      	orrs	r3, r2
 800a694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	697a      	ldr	r2, [r7, #20]
 800a69a:	609a      	str	r2, [r3, #8]
}
 800a69c:	bf00      	nop
 800a69e:	371c      	adds	r7, #28
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b087      	sub	sp, #28
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	f003 031f 	and.w	r3, r3, #31
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a6c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	6a1a      	ldr	r2, [r3, #32]
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	43db      	mvns	r3, r3
 800a6ca:	401a      	ands	r2, r3
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6a1a      	ldr	r2, [r3, #32]
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	f003 031f 	and.w	r3, r3, #31
 800a6da:	6879      	ldr	r1, [r7, #4]
 800a6dc:	fa01 f303 	lsl.w	r3, r1, r3
 800a6e0:	431a      	orrs	r2, r3
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	621a      	str	r2, [r3, #32]
}
 800a6e6:	bf00      	nop
 800a6e8:	371c      	adds	r7, #28
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr
	...

0800a6f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b085      	sub	sp, #20
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a704:	2b01      	cmp	r3, #1
 800a706:	d101      	bne.n	800a70c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a708:	2302      	movs	r3, #2
 800a70a:	e06d      	b.n	800a7e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2201      	movs	r2, #1
 800a710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2202      	movs	r2, #2
 800a718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a30      	ldr	r2, [pc, #192]	; (800a7f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d004      	beq.n	800a740 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4a2f      	ldr	r2, [pc, #188]	; (800a7f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d108      	bne.n	800a752 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a746:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	4313      	orrs	r3, r2
 800a750:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a758:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	68fa      	ldr	r2, [r7, #12]
 800a760:	4313      	orrs	r3, r2
 800a762:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a20      	ldr	r2, [pc, #128]	; (800a7f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d022      	beq.n	800a7bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a77e:	d01d      	beq.n	800a7bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a1d      	ldr	r2, [pc, #116]	; (800a7fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d018      	beq.n	800a7bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a1c      	ldr	r2, [pc, #112]	; (800a800 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d013      	beq.n	800a7bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a1a      	ldr	r2, [pc, #104]	; (800a804 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d00e      	beq.n	800a7bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a15      	ldr	r2, [pc, #84]	; (800a7f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d009      	beq.n	800a7bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a16      	ldr	r2, [pc, #88]	; (800a808 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d004      	beq.n	800a7bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a15      	ldr	r2, [pc, #84]	; (800a80c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d10c      	bne.n	800a7d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	68ba      	ldr	r2, [r7, #8]
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	68ba      	ldr	r2, [r7, #8]
 800a7d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2201      	movs	r2, #1
 800a7da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7e6:	2300      	movs	r3, #0
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3714      	adds	r7, #20
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr
 800a7f4:	40010000 	.word	0x40010000
 800a7f8:	40010400 	.word	0x40010400
 800a7fc:	40000400 	.word	0x40000400
 800a800:	40000800 	.word	0x40000800
 800a804:	40000c00 	.word	0x40000c00
 800a808:	40001800 	.word	0x40001800
 800a80c:	40014000 	.word	0x40014000

0800a810 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a818:	bf00      	nop
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a82c:	bf00      	nop
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a840:	bf00      	nop
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d101      	bne.n	800a85e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	e042      	b.n	800a8e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a864:	2b00      	cmp	r3, #0
 800a866:	d106      	bne.n	800a876 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2200      	movs	r2, #0
 800a86c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f7f8 f9d5 	bl	8002c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2224      	movs	r2, #36	; 0x24
 800a87a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f022 0201 	bic.w	r2, r2, #1
 800a88c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 f8c2 	bl	800aa18 <UART_SetConfig>
 800a894:	4603      	mov	r3, r0
 800a896:	2b01      	cmp	r3, #1
 800a898:	d101      	bne.n	800a89e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a89a:	2301      	movs	r3, #1
 800a89c:	e022      	b.n	800a8e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d002      	beq.n	800a8ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 fe16 	bl	800b4d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	685a      	ldr	r2, [r3, #4]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a8ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	689a      	ldr	r2, [r3, #8]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a8ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f042 0201 	orr.w	r2, r2, #1
 800a8da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 fe9d 	bl	800b61c <UART_CheckIdleState>
 800a8e2:	4603      	mov	r3, r0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3708      	adds	r7, #8
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b08a      	sub	sp, #40	; 0x28
 800a8f0:	af02      	add	r7, sp, #8
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	603b      	str	r3, [r7, #0]
 800a8f8:	4613      	mov	r3, r2
 800a8fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a902:	2b20      	cmp	r3, #32
 800a904:	f040 8083 	bne.w	800aa0e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d002      	beq.n	800a914 <HAL_UART_Transmit+0x28>
 800a90e:	88fb      	ldrh	r3, [r7, #6]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d101      	bne.n	800a918 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a914:	2301      	movs	r3, #1
 800a916:	e07b      	b.n	800aa10 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d101      	bne.n	800a926 <HAL_UART_Transmit+0x3a>
 800a922:	2302      	movs	r3, #2
 800a924:	e074      	b.n	800aa10 <HAL_UART_Transmit+0x124>
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2201      	movs	r2, #1
 800a92a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2200      	movs	r2, #0
 800a932:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2221      	movs	r2, #33	; 0x21
 800a93a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a93e:	f7f8 fbfb 	bl	8003138 <HAL_GetTick>
 800a942:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	88fa      	ldrh	r2, [r7, #6]
 800a948:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	88fa      	ldrh	r2, [r7, #6]
 800a950:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a95c:	d108      	bne.n	800a970 <HAL_UART_Transmit+0x84>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	691b      	ldr	r3, [r3, #16]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d104      	bne.n	800a970 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a966:	2300      	movs	r3, #0
 800a968:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	61bb      	str	r3, [r7, #24]
 800a96e:	e003      	b.n	800a978 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a974:	2300      	movs	r3, #0
 800a976:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a980:	e02c      	b.n	800a9dc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	9300      	str	r3, [sp, #0]
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	2200      	movs	r2, #0
 800a98a:	2180      	movs	r1, #128	; 0x80
 800a98c:	68f8      	ldr	r0, [r7, #12]
 800a98e:	f000 fe90 	bl	800b6b2 <UART_WaitOnFlagUntilTimeout>
 800a992:	4603      	mov	r3, r0
 800a994:	2b00      	cmp	r3, #0
 800a996:	d001      	beq.n	800a99c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a998:	2303      	movs	r3, #3
 800a99a:	e039      	b.n	800aa10 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a99c:	69fb      	ldr	r3, [r7, #28]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d10b      	bne.n	800a9ba <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a9a2:	69bb      	ldr	r3, [r7, #24]
 800a9a4:	881b      	ldrh	r3, [r3, #0]
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a9b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a9b2:	69bb      	ldr	r3, [r7, #24]
 800a9b4:	3302      	adds	r3, #2
 800a9b6:	61bb      	str	r3, [r7, #24]
 800a9b8:	e007      	b.n	800a9ca <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	781a      	ldrb	r2, [r3, #0]
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a9c4:	69fb      	ldr	r3, [r7, #28]
 800a9c6:	3301      	adds	r3, #1
 800a9c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	3b01      	subs	r3, #1
 800a9d4:	b29a      	uxth	r2, r3
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d1cc      	bne.n	800a982 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	9300      	str	r3, [sp, #0]
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	2140      	movs	r1, #64	; 0x40
 800a9f2:	68f8      	ldr	r0, [r7, #12]
 800a9f4:	f000 fe5d 	bl	800b6b2 <UART_WaitOnFlagUntilTimeout>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d001      	beq.n	800aa02 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a9fe:	2303      	movs	r3, #3
 800aa00:	e006      	b.n	800aa10 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2220      	movs	r2, #32
 800aa06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	e000      	b.n	800aa10 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800aa0e:	2302      	movs	r3, #2
  }
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3720      	adds	r7, #32
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa18:	b5b0      	push	{r4, r5, r7, lr}
 800aa1a:	b08e      	sub	sp, #56	; 0x38
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa20:	2300      	movs	r3, #0
 800aa22:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	689a      	ldr	r2, [r3, #8]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	691b      	ldr	r3, [r3, #16]
 800aa2e:	431a      	orrs	r2, r3
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	695b      	ldr	r3, [r3, #20]
 800aa34:	431a      	orrs	r2, r3
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	69db      	ldr	r3, [r3, #28]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	4bbf      	ldr	r3, [pc, #764]	; (800ad44 <UART_SetConfig+0x32c>)
 800aa46:	4013      	ands	r3, r2
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	6812      	ldr	r2, [r2, #0]
 800aa4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aa4e:	430b      	orrs	r3, r1
 800aa50:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	68da      	ldr	r2, [r3, #12]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	430a      	orrs	r2, r1
 800aa66:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	699b      	ldr	r3, [r3, #24]
 800aa6c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4ab5      	ldr	r2, [pc, #724]	; (800ad48 <UART_SetConfig+0x330>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d004      	beq.n	800aa82 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6a1b      	ldr	r3, [r3, #32]
 800aa7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	689a      	ldr	r2, [r3, #8]
 800aa88:	4bb0      	ldr	r3, [pc, #704]	; (800ad4c <UART_SetConfig+0x334>)
 800aa8a:	4013      	ands	r3, r2
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	6812      	ldr	r2, [r2, #0]
 800aa90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aa92:	430b      	orrs	r3, r1
 800aa94:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa9c:	f023 010f 	bic.w	r1, r3, #15
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	430a      	orrs	r2, r1
 800aaaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4aa7      	ldr	r2, [pc, #668]	; (800ad50 <UART_SetConfig+0x338>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d176      	bne.n	800aba4 <UART_SetConfig+0x18c>
 800aab6:	4ba7      	ldr	r3, [pc, #668]	; (800ad54 <UART_SetConfig+0x33c>)
 800aab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aabe:	2b28      	cmp	r3, #40	; 0x28
 800aac0:	d86c      	bhi.n	800ab9c <UART_SetConfig+0x184>
 800aac2:	a201      	add	r2, pc, #4	; (adr r2, 800aac8 <UART_SetConfig+0xb0>)
 800aac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac8:	0800ab6d 	.word	0x0800ab6d
 800aacc:	0800ab9d 	.word	0x0800ab9d
 800aad0:	0800ab9d 	.word	0x0800ab9d
 800aad4:	0800ab9d 	.word	0x0800ab9d
 800aad8:	0800ab9d 	.word	0x0800ab9d
 800aadc:	0800ab9d 	.word	0x0800ab9d
 800aae0:	0800ab9d 	.word	0x0800ab9d
 800aae4:	0800ab9d 	.word	0x0800ab9d
 800aae8:	0800ab75 	.word	0x0800ab75
 800aaec:	0800ab9d 	.word	0x0800ab9d
 800aaf0:	0800ab9d 	.word	0x0800ab9d
 800aaf4:	0800ab9d 	.word	0x0800ab9d
 800aaf8:	0800ab9d 	.word	0x0800ab9d
 800aafc:	0800ab9d 	.word	0x0800ab9d
 800ab00:	0800ab9d 	.word	0x0800ab9d
 800ab04:	0800ab9d 	.word	0x0800ab9d
 800ab08:	0800ab7d 	.word	0x0800ab7d
 800ab0c:	0800ab9d 	.word	0x0800ab9d
 800ab10:	0800ab9d 	.word	0x0800ab9d
 800ab14:	0800ab9d 	.word	0x0800ab9d
 800ab18:	0800ab9d 	.word	0x0800ab9d
 800ab1c:	0800ab9d 	.word	0x0800ab9d
 800ab20:	0800ab9d 	.word	0x0800ab9d
 800ab24:	0800ab9d 	.word	0x0800ab9d
 800ab28:	0800ab85 	.word	0x0800ab85
 800ab2c:	0800ab9d 	.word	0x0800ab9d
 800ab30:	0800ab9d 	.word	0x0800ab9d
 800ab34:	0800ab9d 	.word	0x0800ab9d
 800ab38:	0800ab9d 	.word	0x0800ab9d
 800ab3c:	0800ab9d 	.word	0x0800ab9d
 800ab40:	0800ab9d 	.word	0x0800ab9d
 800ab44:	0800ab9d 	.word	0x0800ab9d
 800ab48:	0800ab8d 	.word	0x0800ab8d
 800ab4c:	0800ab9d 	.word	0x0800ab9d
 800ab50:	0800ab9d 	.word	0x0800ab9d
 800ab54:	0800ab9d 	.word	0x0800ab9d
 800ab58:	0800ab9d 	.word	0x0800ab9d
 800ab5c:	0800ab9d 	.word	0x0800ab9d
 800ab60:	0800ab9d 	.word	0x0800ab9d
 800ab64:	0800ab9d 	.word	0x0800ab9d
 800ab68:	0800ab95 	.word	0x0800ab95
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab72:	e222      	b.n	800afba <UART_SetConfig+0x5a2>
 800ab74:	2304      	movs	r3, #4
 800ab76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab7a:	e21e      	b.n	800afba <UART_SetConfig+0x5a2>
 800ab7c:	2308      	movs	r3, #8
 800ab7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab82:	e21a      	b.n	800afba <UART_SetConfig+0x5a2>
 800ab84:	2310      	movs	r3, #16
 800ab86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab8a:	e216      	b.n	800afba <UART_SetConfig+0x5a2>
 800ab8c:	2320      	movs	r3, #32
 800ab8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab92:	e212      	b.n	800afba <UART_SetConfig+0x5a2>
 800ab94:	2340      	movs	r3, #64	; 0x40
 800ab96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab9a:	e20e      	b.n	800afba <UART_SetConfig+0x5a2>
 800ab9c:	2380      	movs	r3, #128	; 0x80
 800ab9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aba2:	e20a      	b.n	800afba <UART_SetConfig+0x5a2>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a6b      	ldr	r2, [pc, #428]	; (800ad58 <UART_SetConfig+0x340>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d130      	bne.n	800ac10 <UART_SetConfig+0x1f8>
 800abae:	4b69      	ldr	r3, [pc, #420]	; (800ad54 <UART_SetConfig+0x33c>)
 800abb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abb2:	f003 0307 	and.w	r3, r3, #7
 800abb6:	2b05      	cmp	r3, #5
 800abb8:	d826      	bhi.n	800ac08 <UART_SetConfig+0x1f0>
 800abba:	a201      	add	r2, pc, #4	; (adr r2, 800abc0 <UART_SetConfig+0x1a8>)
 800abbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc0:	0800abd9 	.word	0x0800abd9
 800abc4:	0800abe1 	.word	0x0800abe1
 800abc8:	0800abe9 	.word	0x0800abe9
 800abcc:	0800abf1 	.word	0x0800abf1
 800abd0:	0800abf9 	.word	0x0800abf9
 800abd4:	0800ac01 	.word	0x0800ac01
 800abd8:	2300      	movs	r3, #0
 800abda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abde:	e1ec      	b.n	800afba <UART_SetConfig+0x5a2>
 800abe0:	2304      	movs	r3, #4
 800abe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abe6:	e1e8      	b.n	800afba <UART_SetConfig+0x5a2>
 800abe8:	2308      	movs	r3, #8
 800abea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abee:	e1e4      	b.n	800afba <UART_SetConfig+0x5a2>
 800abf0:	2310      	movs	r3, #16
 800abf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abf6:	e1e0      	b.n	800afba <UART_SetConfig+0x5a2>
 800abf8:	2320      	movs	r3, #32
 800abfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abfe:	e1dc      	b.n	800afba <UART_SetConfig+0x5a2>
 800ac00:	2340      	movs	r3, #64	; 0x40
 800ac02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac06:	e1d8      	b.n	800afba <UART_SetConfig+0x5a2>
 800ac08:	2380      	movs	r3, #128	; 0x80
 800ac0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac0e:	e1d4      	b.n	800afba <UART_SetConfig+0x5a2>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a51      	ldr	r2, [pc, #324]	; (800ad5c <UART_SetConfig+0x344>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d130      	bne.n	800ac7c <UART_SetConfig+0x264>
 800ac1a:	4b4e      	ldr	r3, [pc, #312]	; (800ad54 <UART_SetConfig+0x33c>)
 800ac1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac1e:	f003 0307 	and.w	r3, r3, #7
 800ac22:	2b05      	cmp	r3, #5
 800ac24:	d826      	bhi.n	800ac74 <UART_SetConfig+0x25c>
 800ac26:	a201      	add	r2, pc, #4	; (adr r2, 800ac2c <UART_SetConfig+0x214>)
 800ac28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac2c:	0800ac45 	.word	0x0800ac45
 800ac30:	0800ac4d 	.word	0x0800ac4d
 800ac34:	0800ac55 	.word	0x0800ac55
 800ac38:	0800ac5d 	.word	0x0800ac5d
 800ac3c:	0800ac65 	.word	0x0800ac65
 800ac40:	0800ac6d 	.word	0x0800ac6d
 800ac44:	2300      	movs	r3, #0
 800ac46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac4a:	e1b6      	b.n	800afba <UART_SetConfig+0x5a2>
 800ac4c:	2304      	movs	r3, #4
 800ac4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac52:	e1b2      	b.n	800afba <UART_SetConfig+0x5a2>
 800ac54:	2308      	movs	r3, #8
 800ac56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac5a:	e1ae      	b.n	800afba <UART_SetConfig+0x5a2>
 800ac5c:	2310      	movs	r3, #16
 800ac5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac62:	e1aa      	b.n	800afba <UART_SetConfig+0x5a2>
 800ac64:	2320      	movs	r3, #32
 800ac66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac6a:	e1a6      	b.n	800afba <UART_SetConfig+0x5a2>
 800ac6c:	2340      	movs	r3, #64	; 0x40
 800ac6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac72:	e1a2      	b.n	800afba <UART_SetConfig+0x5a2>
 800ac74:	2380      	movs	r3, #128	; 0x80
 800ac76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac7a:	e19e      	b.n	800afba <UART_SetConfig+0x5a2>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a37      	ldr	r2, [pc, #220]	; (800ad60 <UART_SetConfig+0x348>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d130      	bne.n	800ace8 <UART_SetConfig+0x2d0>
 800ac86:	4b33      	ldr	r3, [pc, #204]	; (800ad54 <UART_SetConfig+0x33c>)
 800ac88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac8a:	f003 0307 	and.w	r3, r3, #7
 800ac8e:	2b05      	cmp	r3, #5
 800ac90:	d826      	bhi.n	800ace0 <UART_SetConfig+0x2c8>
 800ac92:	a201      	add	r2, pc, #4	; (adr r2, 800ac98 <UART_SetConfig+0x280>)
 800ac94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac98:	0800acb1 	.word	0x0800acb1
 800ac9c:	0800acb9 	.word	0x0800acb9
 800aca0:	0800acc1 	.word	0x0800acc1
 800aca4:	0800acc9 	.word	0x0800acc9
 800aca8:	0800acd1 	.word	0x0800acd1
 800acac:	0800acd9 	.word	0x0800acd9
 800acb0:	2300      	movs	r3, #0
 800acb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acb6:	e180      	b.n	800afba <UART_SetConfig+0x5a2>
 800acb8:	2304      	movs	r3, #4
 800acba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acbe:	e17c      	b.n	800afba <UART_SetConfig+0x5a2>
 800acc0:	2308      	movs	r3, #8
 800acc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acc6:	e178      	b.n	800afba <UART_SetConfig+0x5a2>
 800acc8:	2310      	movs	r3, #16
 800acca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acce:	e174      	b.n	800afba <UART_SetConfig+0x5a2>
 800acd0:	2320      	movs	r3, #32
 800acd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acd6:	e170      	b.n	800afba <UART_SetConfig+0x5a2>
 800acd8:	2340      	movs	r3, #64	; 0x40
 800acda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acde:	e16c      	b.n	800afba <UART_SetConfig+0x5a2>
 800ace0:	2380      	movs	r3, #128	; 0x80
 800ace2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ace6:	e168      	b.n	800afba <UART_SetConfig+0x5a2>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a1d      	ldr	r2, [pc, #116]	; (800ad64 <UART_SetConfig+0x34c>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d142      	bne.n	800ad78 <UART_SetConfig+0x360>
 800acf2:	4b18      	ldr	r3, [pc, #96]	; (800ad54 <UART_SetConfig+0x33c>)
 800acf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acf6:	f003 0307 	and.w	r3, r3, #7
 800acfa:	2b05      	cmp	r3, #5
 800acfc:	d838      	bhi.n	800ad70 <UART_SetConfig+0x358>
 800acfe:	a201      	add	r2, pc, #4	; (adr r2, 800ad04 <UART_SetConfig+0x2ec>)
 800ad00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad04:	0800ad1d 	.word	0x0800ad1d
 800ad08:	0800ad25 	.word	0x0800ad25
 800ad0c:	0800ad2d 	.word	0x0800ad2d
 800ad10:	0800ad35 	.word	0x0800ad35
 800ad14:	0800ad3d 	.word	0x0800ad3d
 800ad18:	0800ad69 	.word	0x0800ad69
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad22:	e14a      	b.n	800afba <UART_SetConfig+0x5a2>
 800ad24:	2304      	movs	r3, #4
 800ad26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad2a:	e146      	b.n	800afba <UART_SetConfig+0x5a2>
 800ad2c:	2308      	movs	r3, #8
 800ad2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad32:	e142      	b.n	800afba <UART_SetConfig+0x5a2>
 800ad34:	2310      	movs	r3, #16
 800ad36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad3a:	e13e      	b.n	800afba <UART_SetConfig+0x5a2>
 800ad3c:	2320      	movs	r3, #32
 800ad3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad42:	e13a      	b.n	800afba <UART_SetConfig+0x5a2>
 800ad44:	cfff69f3 	.word	0xcfff69f3
 800ad48:	58000c00 	.word	0x58000c00
 800ad4c:	11fff4ff 	.word	0x11fff4ff
 800ad50:	40011000 	.word	0x40011000
 800ad54:	58024400 	.word	0x58024400
 800ad58:	40004400 	.word	0x40004400
 800ad5c:	40004800 	.word	0x40004800
 800ad60:	40004c00 	.word	0x40004c00
 800ad64:	40005000 	.word	0x40005000
 800ad68:	2340      	movs	r3, #64	; 0x40
 800ad6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad6e:	e124      	b.n	800afba <UART_SetConfig+0x5a2>
 800ad70:	2380      	movs	r3, #128	; 0x80
 800ad72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad76:	e120      	b.n	800afba <UART_SetConfig+0x5a2>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4acc      	ldr	r2, [pc, #816]	; (800b0b0 <UART_SetConfig+0x698>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d176      	bne.n	800ae70 <UART_SetConfig+0x458>
 800ad82:	4bcc      	ldr	r3, [pc, #816]	; (800b0b4 <UART_SetConfig+0x69c>)
 800ad84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad8a:	2b28      	cmp	r3, #40	; 0x28
 800ad8c:	d86c      	bhi.n	800ae68 <UART_SetConfig+0x450>
 800ad8e:	a201      	add	r2, pc, #4	; (adr r2, 800ad94 <UART_SetConfig+0x37c>)
 800ad90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad94:	0800ae39 	.word	0x0800ae39
 800ad98:	0800ae69 	.word	0x0800ae69
 800ad9c:	0800ae69 	.word	0x0800ae69
 800ada0:	0800ae69 	.word	0x0800ae69
 800ada4:	0800ae69 	.word	0x0800ae69
 800ada8:	0800ae69 	.word	0x0800ae69
 800adac:	0800ae69 	.word	0x0800ae69
 800adb0:	0800ae69 	.word	0x0800ae69
 800adb4:	0800ae41 	.word	0x0800ae41
 800adb8:	0800ae69 	.word	0x0800ae69
 800adbc:	0800ae69 	.word	0x0800ae69
 800adc0:	0800ae69 	.word	0x0800ae69
 800adc4:	0800ae69 	.word	0x0800ae69
 800adc8:	0800ae69 	.word	0x0800ae69
 800adcc:	0800ae69 	.word	0x0800ae69
 800add0:	0800ae69 	.word	0x0800ae69
 800add4:	0800ae49 	.word	0x0800ae49
 800add8:	0800ae69 	.word	0x0800ae69
 800addc:	0800ae69 	.word	0x0800ae69
 800ade0:	0800ae69 	.word	0x0800ae69
 800ade4:	0800ae69 	.word	0x0800ae69
 800ade8:	0800ae69 	.word	0x0800ae69
 800adec:	0800ae69 	.word	0x0800ae69
 800adf0:	0800ae69 	.word	0x0800ae69
 800adf4:	0800ae51 	.word	0x0800ae51
 800adf8:	0800ae69 	.word	0x0800ae69
 800adfc:	0800ae69 	.word	0x0800ae69
 800ae00:	0800ae69 	.word	0x0800ae69
 800ae04:	0800ae69 	.word	0x0800ae69
 800ae08:	0800ae69 	.word	0x0800ae69
 800ae0c:	0800ae69 	.word	0x0800ae69
 800ae10:	0800ae69 	.word	0x0800ae69
 800ae14:	0800ae59 	.word	0x0800ae59
 800ae18:	0800ae69 	.word	0x0800ae69
 800ae1c:	0800ae69 	.word	0x0800ae69
 800ae20:	0800ae69 	.word	0x0800ae69
 800ae24:	0800ae69 	.word	0x0800ae69
 800ae28:	0800ae69 	.word	0x0800ae69
 800ae2c:	0800ae69 	.word	0x0800ae69
 800ae30:	0800ae69 	.word	0x0800ae69
 800ae34:	0800ae61 	.word	0x0800ae61
 800ae38:	2301      	movs	r3, #1
 800ae3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae3e:	e0bc      	b.n	800afba <UART_SetConfig+0x5a2>
 800ae40:	2304      	movs	r3, #4
 800ae42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae46:	e0b8      	b.n	800afba <UART_SetConfig+0x5a2>
 800ae48:	2308      	movs	r3, #8
 800ae4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae4e:	e0b4      	b.n	800afba <UART_SetConfig+0x5a2>
 800ae50:	2310      	movs	r3, #16
 800ae52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae56:	e0b0      	b.n	800afba <UART_SetConfig+0x5a2>
 800ae58:	2320      	movs	r3, #32
 800ae5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae5e:	e0ac      	b.n	800afba <UART_SetConfig+0x5a2>
 800ae60:	2340      	movs	r3, #64	; 0x40
 800ae62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae66:	e0a8      	b.n	800afba <UART_SetConfig+0x5a2>
 800ae68:	2380      	movs	r3, #128	; 0x80
 800ae6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae6e:	e0a4      	b.n	800afba <UART_SetConfig+0x5a2>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a90      	ldr	r2, [pc, #576]	; (800b0b8 <UART_SetConfig+0x6a0>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d130      	bne.n	800aedc <UART_SetConfig+0x4c4>
 800ae7a:	4b8e      	ldr	r3, [pc, #568]	; (800b0b4 <UART_SetConfig+0x69c>)
 800ae7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae7e:	f003 0307 	and.w	r3, r3, #7
 800ae82:	2b05      	cmp	r3, #5
 800ae84:	d826      	bhi.n	800aed4 <UART_SetConfig+0x4bc>
 800ae86:	a201      	add	r2, pc, #4	; (adr r2, 800ae8c <UART_SetConfig+0x474>)
 800ae88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae8c:	0800aea5 	.word	0x0800aea5
 800ae90:	0800aead 	.word	0x0800aead
 800ae94:	0800aeb5 	.word	0x0800aeb5
 800ae98:	0800aebd 	.word	0x0800aebd
 800ae9c:	0800aec5 	.word	0x0800aec5
 800aea0:	0800aecd 	.word	0x0800aecd
 800aea4:	2300      	movs	r3, #0
 800aea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeaa:	e086      	b.n	800afba <UART_SetConfig+0x5a2>
 800aeac:	2304      	movs	r3, #4
 800aeae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeb2:	e082      	b.n	800afba <UART_SetConfig+0x5a2>
 800aeb4:	2308      	movs	r3, #8
 800aeb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeba:	e07e      	b.n	800afba <UART_SetConfig+0x5a2>
 800aebc:	2310      	movs	r3, #16
 800aebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aec2:	e07a      	b.n	800afba <UART_SetConfig+0x5a2>
 800aec4:	2320      	movs	r3, #32
 800aec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeca:	e076      	b.n	800afba <UART_SetConfig+0x5a2>
 800aecc:	2340      	movs	r3, #64	; 0x40
 800aece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aed2:	e072      	b.n	800afba <UART_SetConfig+0x5a2>
 800aed4:	2380      	movs	r3, #128	; 0x80
 800aed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeda:	e06e      	b.n	800afba <UART_SetConfig+0x5a2>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a76      	ldr	r2, [pc, #472]	; (800b0bc <UART_SetConfig+0x6a4>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d130      	bne.n	800af48 <UART_SetConfig+0x530>
 800aee6:	4b73      	ldr	r3, [pc, #460]	; (800b0b4 <UART_SetConfig+0x69c>)
 800aee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeea:	f003 0307 	and.w	r3, r3, #7
 800aeee:	2b05      	cmp	r3, #5
 800aef0:	d826      	bhi.n	800af40 <UART_SetConfig+0x528>
 800aef2:	a201      	add	r2, pc, #4	; (adr r2, 800aef8 <UART_SetConfig+0x4e0>)
 800aef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef8:	0800af11 	.word	0x0800af11
 800aefc:	0800af19 	.word	0x0800af19
 800af00:	0800af21 	.word	0x0800af21
 800af04:	0800af29 	.word	0x0800af29
 800af08:	0800af31 	.word	0x0800af31
 800af0c:	0800af39 	.word	0x0800af39
 800af10:	2300      	movs	r3, #0
 800af12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af16:	e050      	b.n	800afba <UART_SetConfig+0x5a2>
 800af18:	2304      	movs	r3, #4
 800af1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af1e:	e04c      	b.n	800afba <UART_SetConfig+0x5a2>
 800af20:	2308      	movs	r3, #8
 800af22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af26:	e048      	b.n	800afba <UART_SetConfig+0x5a2>
 800af28:	2310      	movs	r3, #16
 800af2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af2e:	e044      	b.n	800afba <UART_SetConfig+0x5a2>
 800af30:	2320      	movs	r3, #32
 800af32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af36:	e040      	b.n	800afba <UART_SetConfig+0x5a2>
 800af38:	2340      	movs	r3, #64	; 0x40
 800af3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af3e:	e03c      	b.n	800afba <UART_SetConfig+0x5a2>
 800af40:	2380      	movs	r3, #128	; 0x80
 800af42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af46:	e038      	b.n	800afba <UART_SetConfig+0x5a2>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a5c      	ldr	r2, [pc, #368]	; (800b0c0 <UART_SetConfig+0x6a8>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d130      	bne.n	800afb4 <UART_SetConfig+0x59c>
 800af52:	4b58      	ldr	r3, [pc, #352]	; (800b0b4 <UART_SetConfig+0x69c>)
 800af54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af56:	f003 0307 	and.w	r3, r3, #7
 800af5a:	2b05      	cmp	r3, #5
 800af5c:	d826      	bhi.n	800afac <UART_SetConfig+0x594>
 800af5e:	a201      	add	r2, pc, #4	; (adr r2, 800af64 <UART_SetConfig+0x54c>)
 800af60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af64:	0800af7d 	.word	0x0800af7d
 800af68:	0800af85 	.word	0x0800af85
 800af6c:	0800af8d 	.word	0x0800af8d
 800af70:	0800af95 	.word	0x0800af95
 800af74:	0800af9d 	.word	0x0800af9d
 800af78:	0800afa5 	.word	0x0800afa5
 800af7c:	2302      	movs	r3, #2
 800af7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af82:	e01a      	b.n	800afba <UART_SetConfig+0x5a2>
 800af84:	2304      	movs	r3, #4
 800af86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af8a:	e016      	b.n	800afba <UART_SetConfig+0x5a2>
 800af8c:	2308      	movs	r3, #8
 800af8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af92:	e012      	b.n	800afba <UART_SetConfig+0x5a2>
 800af94:	2310      	movs	r3, #16
 800af96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af9a:	e00e      	b.n	800afba <UART_SetConfig+0x5a2>
 800af9c:	2320      	movs	r3, #32
 800af9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afa2:	e00a      	b.n	800afba <UART_SetConfig+0x5a2>
 800afa4:	2340      	movs	r3, #64	; 0x40
 800afa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afaa:	e006      	b.n	800afba <UART_SetConfig+0x5a2>
 800afac:	2380      	movs	r3, #128	; 0x80
 800afae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afb2:	e002      	b.n	800afba <UART_SetConfig+0x5a2>
 800afb4:	2380      	movs	r3, #128	; 0x80
 800afb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	4a40      	ldr	r2, [pc, #256]	; (800b0c0 <UART_SetConfig+0x6a8>)
 800afc0:	4293      	cmp	r3, r2
 800afc2:	f040 80ef 	bne.w	800b1a4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800afc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800afca:	2b20      	cmp	r3, #32
 800afcc:	dc46      	bgt.n	800b05c <UART_SetConfig+0x644>
 800afce:	2b02      	cmp	r3, #2
 800afd0:	f2c0 8081 	blt.w	800b0d6 <UART_SetConfig+0x6be>
 800afd4:	3b02      	subs	r3, #2
 800afd6:	2b1e      	cmp	r3, #30
 800afd8:	d87d      	bhi.n	800b0d6 <UART_SetConfig+0x6be>
 800afda:	a201      	add	r2, pc, #4	; (adr r2, 800afe0 <UART_SetConfig+0x5c8>)
 800afdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe0:	0800b063 	.word	0x0800b063
 800afe4:	0800b0d7 	.word	0x0800b0d7
 800afe8:	0800b06b 	.word	0x0800b06b
 800afec:	0800b0d7 	.word	0x0800b0d7
 800aff0:	0800b0d7 	.word	0x0800b0d7
 800aff4:	0800b0d7 	.word	0x0800b0d7
 800aff8:	0800b07b 	.word	0x0800b07b
 800affc:	0800b0d7 	.word	0x0800b0d7
 800b000:	0800b0d7 	.word	0x0800b0d7
 800b004:	0800b0d7 	.word	0x0800b0d7
 800b008:	0800b0d7 	.word	0x0800b0d7
 800b00c:	0800b0d7 	.word	0x0800b0d7
 800b010:	0800b0d7 	.word	0x0800b0d7
 800b014:	0800b0d7 	.word	0x0800b0d7
 800b018:	0800b08b 	.word	0x0800b08b
 800b01c:	0800b0d7 	.word	0x0800b0d7
 800b020:	0800b0d7 	.word	0x0800b0d7
 800b024:	0800b0d7 	.word	0x0800b0d7
 800b028:	0800b0d7 	.word	0x0800b0d7
 800b02c:	0800b0d7 	.word	0x0800b0d7
 800b030:	0800b0d7 	.word	0x0800b0d7
 800b034:	0800b0d7 	.word	0x0800b0d7
 800b038:	0800b0d7 	.word	0x0800b0d7
 800b03c:	0800b0d7 	.word	0x0800b0d7
 800b040:	0800b0d7 	.word	0x0800b0d7
 800b044:	0800b0d7 	.word	0x0800b0d7
 800b048:	0800b0d7 	.word	0x0800b0d7
 800b04c:	0800b0d7 	.word	0x0800b0d7
 800b050:	0800b0d7 	.word	0x0800b0d7
 800b054:	0800b0d7 	.word	0x0800b0d7
 800b058:	0800b0c9 	.word	0x0800b0c9
 800b05c:	2b40      	cmp	r3, #64	; 0x40
 800b05e:	d036      	beq.n	800b0ce <UART_SetConfig+0x6b6>
 800b060:	e039      	b.n	800b0d6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b062:	f7fd fad7 	bl	8008614 <HAL_RCCEx_GetD3PCLK1Freq>
 800b066:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b068:	e03b      	b.n	800b0e2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b06a:	f107 0314 	add.w	r3, r7, #20
 800b06e:	4618      	mov	r0, r3
 800b070:	f7fd fae6 	bl	8008640 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b074:	69bb      	ldr	r3, [r7, #24]
 800b076:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b078:	e033      	b.n	800b0e2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b07a:	f107 0308 	add.w	r3, r7, #8
 800b07e:	4618      	mov	r0, r3
 800b080:	f7fd fc32 	bl	80088e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b088:	e02b      	b.n	800b0e2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b08a:	4b0a      	ldr	r3, [pc, #40]	; (800b0b4 <UART_SetConfig+0x69c>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f003 0320 	and.w	r3, r3, #32
 800b092:	2b00      	cmp	r3, #0
 800b094:	d009      	beq.n	800b0aa <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b096:	4b07      	ldr	r3, [pc, #28]	; (800b0b4 <UART_SetConfig+0x69c>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	08db      	lsrs	r3, r3, #3
 800b09c:	f003 0303 	and.w	r3, r3, #3
 800b0a0:	4a08      	ldr	r2, [pc, #32]	; (800b0c4 <UART_SetConfig+0x6ac>)
 800b0a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b0a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b0a8:	e01b      	b.n	800b0e2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800b0aa:	4b06      	ldr	r3, [pc, #24]	; (800b0c4 <UART_SetConfig+0x6ac>)
 800b0ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b0ae:	e018      	b.n	800b0e2 <UART_SetConfig+0x6ca>
 800b0b0:	40011400 	.word	0x40011400
 800b0b4:	58024400 	.word	0x58024400
 800b0b8:	40007800 	.word	0x40007800
 800b0bc:	40007c00 	.word	0x40007c00
 800b0c0:	58000c00 	.word	0x58000c00
 800b0c4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b0c8:	4bc4      	ldr	r3, [pc, #784]	; (800b3dc <UART_SetConfig+0x9c4>)
 800b0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b0cc:	e009      	b.n	800b0e2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b0d4:	e005      	b.n	800b0e2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b0e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	f000 81da 	beq.w	800b49e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ee:	4abc      	ldr	r2, [pc, #752]	; (800b3e0 <UART_SetConfig+0x9c8>)
 800b0f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0fc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	685a      	ldr	r2, [r3, #4]
 800b102:	4613      	mov	r3, r2
 800b104:	005b      	lsls	r3, r3, #1
 800b106:	4413      	add	r3, r2
 800b108:	6a3a      	ldr	r2, [r7, #32]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d305      	bcc.n	800b11a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b114:	6a3a      	ldr	r2, [r7, #32]
 800b116:	429a      	cmp	r2, r3
 800b118:	d903      	bls.n	800b122 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800b11a:	2301      	movs	r3, #1
 800b11c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b120:	e1bd      	b.n	800b49e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b124:	4618      	mov	r0, r3
 800b126:	f04f 0100 	mov.w	r1, #0
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b12e:	4aac      	ldr	r2, [pc, #688]	; (800b3e0 <UART_SetConfig+0x9c8>)
 800b130:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b134:	b29a      	uxth	r2, r3
 800b136:	f04f 0300 	mov.w	r3, #0
 800b13a:	f7f5 f929 	bl	8000390 <__aeabi_uldivmod>
 800b13e:	4602      	mov	r2, r0
 800b140:	460b      	mov	r3, r1
 800b142:	4610      	mov	r0, r2
 800b144:	4619      	mov	r1, r3
 800b146:	f04f 0200 	mov.w	r2, #0
 800b14a:	f04f 0300 	mov.w	r3, #0
 800b14e:	020b      	lsls	r3, r1, #8
 800b150:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b154:	0202      	lsls	r2, r0, #8
 800b156:	6879      	ldr	r1, [r7, #4]
 800b158:	6849      	ldr	r1, [r1, #4]
 800b15a:	0849      	lsrs	r1, r1, #1
 800b15c:	4608      	mov	r0, r1
 800b15e:	f04f 0100 	mov.w	r1, #0
 800b162:	1814      	adds	r4, r2, r0
 800b164:	eb43 0501 	adc.w	r5, r3, r1
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	461a      	mov	r2, r3
 800b16e:	f04f 0300 	mov.w	r3, #0
 800b172:	4620      	mov	r0, r4
 800b174:	4629      	mov	r1, r5
 800b176:	f7f5 f90b 	bl	8000390 <__aeabi_uldivmod>
 800b17a:	4602      	mov	r2, r0
 800b17c:	460b      	mov	r3, r1
 800b17e:	4613      	mov	r3, r2
 800b180:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b184:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b188:	d308      	bcc.n	800b19c <UART_SetConfig+0x784>
 800b18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b190:	d204      	bcs.n	800b19c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b198:	60da      	str	r2, [r3, #12]
 800b19a:	e180      	b.n	800b49e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800b19c:	2301      	movs	r3, #1
 800b19e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b1a2:	e17c      	b.n	800b49e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	69db      	ldr	r3, [r3, #28]
 800b1a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1ac:	f040 80be 	bne.w	800b32c <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800b1b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b1b4:	2b20      	cmp	r3, #32
 800b1b6:	dc49      	bgt.n	800b24c <UART_SetConfig+0x834>
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	db7c      	blt.n	800b2b6 <UART_SetConfig+0x89e>
 800b1bc:	2b20      	cmp	r3, #32
 800b1be:	d87a      	bhi.n	800b2b6 <UART_SetConfig+0x89e>
 800b1c0:	a201      	add	r2, pc, #4	; (adr r2, 800b1c8 <UART_SetConfig+0x7b0>)
 800b1c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1c6:	bf00      	nop
 800b1c8:	0800b253 	.word	0x0800b253
 800b1cc:	0800b25b 	.word	0x0800b25b
 800b1d0:	0800b2b7 	.word	0x0800b2b7
 800b1d4:	0800b2b7 	.word	0x0800b2b7
 800b1d8:	0800b263 	.word	0x0800b263
 800b1dc:	0800b2b7 	.word	0x0800b2b7
 800b1e0:	0800b2b7 	.word	0x0800b2b7
 800b1e4:	0800b2b7 	.word	0x0800b2b7
 800b1e8:	0800b273 	.word	0x0800b273
 800b1ec:	0800b2b7 	.word	0x0800b2b7
 800b1f0:	0800b2b7 	.word	0x0800b2b7
 800b1f4:	0800b2b7 	.word	0x0800b2b7
 800b1f8:	0800b2b7 	.word	0x0800b2b7
 800b1fc:	0800b2b7 	.word	0x0800b2b7
 800b200:	0800b2b7 	.word	0x0800b2b7
 800b204:	0800b2b7 	.word	0x0800b2b7
 800b208:	0800b283 	.word	0x0800b283
 800b20c:	0800b2b7 	.word	0x0800b2b7
 800b210:	0800b2b7 	.word	0x0800b2b7
 800b214:	0800b2b7 	.word	0x0800b2b7
 800b218:	0800b2b7 	.word	0x0800b2b7
 800b21c:	0800b2b7 	.word	0x0800b2b7
 800b220:	0800b2b7 	.word	0x0800b2b7
 800b224:	0800b2b7 	.word	0x0800b2b7
 800b228:	0800b2b7 	.word	0x0800b2b7
 800b22c:	0800b2b7 	.word	0x0800b2b7
 800b230:	0800b2b7 	.word	0x0800b2b7
 800b234:	0800b2b7 	.word	0x0800b2b7
 800b238:	0800b2b7 	.word	0x0800b2b7
 800b23c:	0800b2b7 	.word	0x0800b2b7
 800b240:	0800b2b7 	.word	0x0800b2b7
 800b244:	0800b2b7 	.word	0x0800b2b7
 800b248:	0800b2a9 	.word	0x0800b2a9
 800b24c:	2b40      	cmp	r3, #64	; 0x40
 800b24e:	d02e      	beq.n	800b2ae <UART_SetConfig+0x896>
 800b250:	e031      	b.n	800b2b6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b252:	f7fb fda1 	bl	8006d98 <HAL_RCC_GetPCLK1Freq>
 800b256:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b258:	e033      	b.n	800b2c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b25a:	f7fb fdb3 	bl	8006dc4 <HAL_RCC_GetPCLK2Freq>
 800b25e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b260:	e02f      	b.n	800b2c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b262:	f107 0314 	add.w	r3, r7, #20
 800b266:	4618      	mov	r0, r3
 800b268:	f7fd f9ea 	bl	8008640 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b26c:	69bb      	ldr	r3, [r7, #24]
 800b26e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b270:	e027      	b.n	800b2c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b272:	f107 0308 	add.w	r3, r7, #8
 800b276:	4618      	mov	r0, r3
 800b278:	f7fd fb36 	bl	80088e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b280:	e01f      	b.n	800b2c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b282:	4b58      	ldr	r3, [pc, #352]	; (800b3e4 <UART_SetConfig+0x9cc>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f003 0320 	and.w	r3, r3, #32
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d009      	beq.n	800b2a2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b28e:	4b55      	ldr	r3, [pc, #340]	; (800b3e4 <UART_SetConfig+0x9cc>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	08db      	lsrs	r3, r3, #3
 800b294:	f003 0303 	and.w	r3, r3, #3
 800b298:	4a53      	ldr	r2, [pc, #332]	; (800b3e8 <UART_SetConfig+0x9d0>)
 800b29a:	fa22 f303 	lsr.w	r3, r2, r3
 800b29e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b2a0:	e00f      	b.n	800b2c2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800b2a2:	4b51      	ldr	r3, [pc, #324]	; (800b3e8 <UART_SetConfig+0x9d0>)
 800b2a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b2a6:	e00c      	b.n	800b2c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b2a8:	4b4c      	ldr	r3, [pc, #304]	; (800b3dc <UART_SetConfig+0x9c4>)
 800b2aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b2ac:	e009      	b.n	800b2c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b2b4:	e005      	b.n	800b2c2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b2c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	f000 80ea 	beq.w	800b49e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ce:	4a44      	ldr	r2, [pc, #272]	; (800b3e0 <UART_SetConfig+0x9c8>)
 800b2d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2dc:	005a      	lsls	r2, r3, #1
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	085b      	lsrs	r3, r3, #1
 800b2e4:	441a      	add	r2, r3
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2ee:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f2:	2b0f      	cmp	r3, #15
 800b2f4:	d916      	bls.n	800b324 <UART_SetConfig+0x90c>
 800b2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2fc:	d212      	bcs.n	800b324 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b300:	b29b      	uxth	r3, r3
 800b302:	f023 030f 	bic.w	r3, r3, #15
 800b306:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30a:	085b      	lsrs	r3, r3, #1
 800b30c:	b29b      	uxth	r3, r3
 800b30e:	f003 0307 	and.w	r3, r3, #7
 800b312:	b29a      	uxth	r2, r3
 800b314:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b316:	4313      	orrs	r3, r2
 800b318:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b320:	60da      	str	r2, [r3, #12]
 800b322:	e0bc      	b.n	800b49e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b324:	2301      	movs	r3, #1
 800b326:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b32a:	e0b8      	b.n	800b49e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b32c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b330:	2b20      	cmp	r3, #32
 800b332:	dc4b      	bgt.n	800b3cc <UART_SetConfig+0x9b4>
 800b334:	2b00      	cmp	r3, #0
 800b336:	f2c0 8087 	blt.w	800b448 <UART_SetConfig+0xa30>
 800b33a:	2b20      	cmp	r3, #32
 800b33c:	f200 8084 	bhi.w	800b448 <UART_SetConfig+0xa30>
 800b340:	a201      	add	r2, pc, #4	; (adr r2, 800b348 <UART_SetConfig+0x930>)
 800b342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b346:	bf00      	nop
 800b348:	0800b3d3 	.word	0x0800b3d3
 800b34c:	0800b3ed 	.word	0x0800b3ed
 800b350:	0800b449 	.word	0x0800b449
 800b354:	0800b449 	.word	0x0800b449
 800b358:	0800b3f5 	.word	0x0800b3f5
 800b35c:	0800b449 	.word	0x0800b449
 800b360:	0800b449 	.word	0x0800b449
 800b364:	0800b449 	.word	0x0800b449
 800b368:	0800b405 	.word	0x0800b405
 800b36c:	0800b449 	.word	0x0800b449
 800b370:	0800b449 	.word	0x0800b449
 800b374:	0800b449 	.word	0x0800b449
 800b378:	0800b449 	.word	0x0800b449
 800b37c:	0800b449 	.word	0x0800b449
 800b380:	0800b449 	.word	0x0800b449
 800b384:	0800b449 	.word	0x0800b449
 800b388:	0800b415 	.word	0x0800b415
 800b38c:	0800b449 	.word	0x0800b449
 800b390:	0800b449 	.word	0x0800b449
 800b394:	0800b449 	.word	0x0800b449
 800b398:	0800b449 	.word	0x0800b449
 800b39c:	0800b449 	.word	0x0800b449
 800b3a0:	0800b449 	.word	0x0800b449
 800b3a4:	0800b449 	.word	0x0800b449
 800b3a8:	0800b449 	.word	0x0800b449
 800b3ac:	0800b449 	.word	0x0800b449
 800b3b0:	0800b449 	.word	0x0800b449
 800b3b4:	0800b449 	.word	0x0800b449
 800b3b8:	0800b449 	.word	0x0800b449
 800b3bc:	0800b449 	.word	0x0800b449
 800b3c0:	0800b449 	.word	0x0800b449
 800b3c4:	0800b449 	.word	0x0800b449
 800b3c8:	0800b43b 	.word	0x0800b43b
 800b3cc:	2b40      	cmp	r3, #64	; 0x40
 800b3ce:	d037      	beq.n	800b440 <UART_SetConfig+0xa28>
 800b3d0:	e03a      	b.n	800b448 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b3d2:	f7fb fce1 	bl	8006d98 <HAL_RCC_GetPCLK1Freq>
 800b3d6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b3d8:	e03c      	b.n	800b454 <UART_SetConfig+0xa3c>
 800b3da:	bf00      	nop
 800b3dc:	003d0900 	.word	0x003d0900
 800b3e0:	0800f95c 	.word	0x0800f95c
 800b3e4:	58024400 	.word	0x58024400
 800b3e8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b3ec:	f7fb fcea 	bl	8006dc4 <HAL_RCC_GetPCLK2Freq>
 800b3f0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b3f2:	e02f      	b.n	800b454 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3f4:	f107 0314 	add.w	r3, r7, #20
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f7fd f921 	bl	8008640 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b3fe:	69bb      	ldr	r3, [r7, #24]
 800b400:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b402:	e027      	b.n	800b454 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b404:	f107 0308 	add.w	r3, r7, #8
 800b408:	4618      	mov	r0, r3
 800b40a:	f7fd fa6d 	bl	80088e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b412:	e01f      	b.n	800b454 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b414:	4b2c      	ldr	r3, [pc, #176]	; (800b4c8 <UART_SetConfig+0xab0>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f003 0320 	and.w	r3, r3, #32
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d009      	beq.n	800b434 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b420:	4b29      	ldr	r3, [pc, #164]	; (800b4c8 <UART_SetConfig+0xab0>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	08db      	lsrs	r3, r3, #3
 800b426:	f003 0303 	and.w	r3, r3, #3
 800b42a:	4a28      	ldr	r2, [pc, #160]	; (800b4cc <UART_SetConfig+0xab4>)
 800b42c:	fa22 f303 	lsr.w	r3, r2, r3
 800b430:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b432:	e00f      	b.n	800b454 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800b434:	4b25      	ldr	r3, [pc, #148]	; (800b4cc <UART_SetConfig+0xab4>)
 800b436:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b438:	e00c      	b.n	800b454 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b43a:	4b25      	ldr	r3, [pc, #148]	; (800b4d0 <UART_SetConfig+0xab8>)
 800b43c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b43e:	e009      	b.n	800b454 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b440:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b444:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b446:	e005      	b.n	800b454 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800b448:	2300      	movs	r3, #0
 800b44a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b44c:	2301      	movs	r3, #1
 800b44e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b452:	bf00      	nop
    }

    if (pclk != 0U)
 800b454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b456:	2b00      	cmp	r3, #0
 800b458:	d021      	beq.n	800b49e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45e:	4a1d      	ldr	r2, [pc, #116]	; (800b4d4 <UART_SetConfig+0xabc>)
 800b460:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b464:	461a      	mov	r2, r3
 800b466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b468:	fbb3 f2f2 	udiv	r2, r3, r2
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	085b      	lsrs	r3, r3, #1
 800b472:	441a      	add	r2, r3
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	fbb2 f3f3 	udiv	r3, r2, r3
 800b47c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b480:	2b0f      	cmp	r3, #15
 800b482:	d909      	bls.n	800b498 <UART_SetConfig+0xa80>
 800b484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b48a:	d205      	bcs.n	800b498 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b48e:	b29a      	uxth	r2, r3
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	60da      	str	r2, [r3, #12]
 800b496:	e002      	b.n	800b49e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b498:	2301      	movs	r3, #1
 800b49a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b4ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3738      	adds	r7, #56	; 0x38
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bdb0      	pop	{r4, r5, r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	58024400 	.word	0x58024400
 800b4cc:	03d09000 	.word	0x03d09000
 800b4d0:	003d0900 	.word	0x003d0900
 800b4d4:	0800f95c 	.word	0x0800f95c

0800b4d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b083      	sub	sp, #12
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4e4:	f003 0301 	and.w	r3, r3, #1
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d00a      	beq.n	800b502 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	430a      	orrs	r2, r1
 800b500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b506:	f003 0302 	and.w	r3, r3, #2
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d00a      	beq.n	800b524 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	430a      	orrs	r2, r1
 800b522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b528:	f003 0304 	and.w	r3, r3, #4
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d00a      	beq.n	800b546 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	430a      	orrs	r2, r1
 800b544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b54a:	f003 0308 	and.w	r3, r3, #8
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00a      	beq.n	800b568 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	430a      	orrs	r2, r1
 800b566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b56c:	f003 0310 	and.w	r3, r3, #16
 800b570:	2b00      	cmp	r3, #0
 800b572:	d00a      	beq.n	800b58a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	430a      	orrs	r2, r1
 800b588:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b58e:	f003 0320 	and.w	r3, r3, #32
 800b592:	2b00      	cmp	r3, #0
 800b594:	d00a      	beq.n	800b5ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	689b      	ldr	r3, [r3, #8]
 800b59c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	430a      	orrs	r2, r1
 800b5aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d01a      	beq.n	800b5ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	430a      	orrs	r2, r1
 800b5cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5d6:	d10a      	bne.n	800b5ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	430a      	orrs	r2, r1
 800b5ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d00a      	beq.n	800b610 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	430a      	orrs	r2, r1
 800b60e:	605a      	str	r2, [r3, #4]
  }
}
 800b610:	bf00      	nop
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b086      	sub	sp, #24
 800b620:	af02      	add	r7, sp, #8
 800b622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b62c:	f7f7 fd84 	bl	8003138 <HAL_GetTick>
 800b630:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f003 0308 	and.w	r3, r3, #8
 800b63c:	2b08      	cmp	r3, #8
 800b63e:	d10e      	bne.n	800b65e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b640:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b644:	9300      	str	r3, [sp, #0]
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2200      	movs	r2, #0
 800b64a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 f82f 	bl	800b6b2 <UART_WaitOnFlagUntilTimeout>
 800b654:	4603      	mov	r3, r0
 800b656:	2b00      	cmp	r3, #0
 800b658:	d001      	beq.n	800b65e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b65a:	2303      	movs	r3, #3
 800b65c:	e025      	b.n	800b6aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f003 0304 	and.w	r3, r3, #4
 800b668:	2b04      	cmp	r3, #4
 800b66a:	d10e      	bne.n	800b68a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b66c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b670:	9300      	str	r3, [sp, #0]
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2200      	movs	r2, #0
 800b676:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 f819 	bl	800b6b2 <UART_WaitOnFlagUntilTimeout>
 800b680:	4603      	mov	r3, r0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d001      	beq.n	800b68a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b686:	2303      	movs	r3, #3
 800b688:	e00f      	b.n	800b6aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2220      	movs	r2, #32
 800b68e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2220      	movs	r2, #32
 800b696:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2200      	movs	r2, #0
 800b69e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b6a8:	2300      	movs	r3, #0
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}

0800b6b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b6b2:	b580      	push	{r7, lr}
 800b6b4:	b09c      	sub	sp, #112	; 0x70
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	60f8      	str	r0, [r7, #12]
 800b6ba:	60b9      	str	r1, [r7, #8]
 800b6bc:	603b      	str	r3, [r7, #0]
 800b6be:	4613      	mov	r3, r2
 800b6c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6c2:	e0a9      	b.n	800b818 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b6c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b6c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ca:	f000 80a5 	beq.w	800b818 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6ce:	f7f7 fd33 	bl	8003138 <HAL_GetTick>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	1ad3      	subs	r3, r2, r3
 800b6d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d302      	bcc.n	800b6e4 <UART_WaitOnFlagUntilTimeout+0x32>
 800b6de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d140      	bne.n	800b766 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6ec:	e853 3f00 	ldrex	r3, [r3]
 800b6f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b6f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b6f8:	667b      	str	r3, [r7, #100]	; 0x64
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	461a      	mov	r2, r3
 800b700:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b702:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b704:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b706:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b708:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b70a:	e841 2300 	strex	r3, r2, [r1]
 800b70e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b712:	2b00      	cmp	r3, #0
 800b714:	d1e6      	bne.n	800b6e4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	3308      	adds	r3, #8
 800b71c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b71e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b720:	e853 3f00 	ldrex	r3, [r3]
 800b724:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b728:	f023 0301 	bic.w	r3, r3, #1
 800b72c:	663b      	str	r3, [r7, #96]	; 0x60
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	3308      	adds	r3, #8
 800b734:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b736:	64ba      	str	r2, [r7, #72]	; 0x48
 800b738:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b73a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b73c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b73e:	e841 2300 	strex	r3, r2, [r1]
 800b742:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b746:	2b00      	cmp	r3, #0
 800b748:	d1e5      	bne.n	800b716 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2220      	movs	r2, #32
 800b74e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2220      	movs	r2, #32
 800b756:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2200      	movs	r2, #0
 800b75e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b762:	2303      	movs	r3, #3
 800b764:	e069      	b.n	800b83a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f003 0304 	and.w	r3, r3, #4
 800b770:	2b00      	cmp	r3, #0
 800b772:	d051      	beq.n	800b818 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	69db      	ldr	r3, [r3, #28]
 800b77a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b77e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b782:	d149      	bne.n	800b818 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b78c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b796:	e853 3f00 	ldrex	r3, [r3]
 800b79a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b7a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	461a      	mov	r2, r3
 800b7aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7ac:	637b      	str	r3, [r7, #52]	; 0x34
 800b7ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b7b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b7b4:	e841 2300 	strex	r3, r2, [r1]
 800b7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d1e6      	bne.n	800b78e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	3308      	adds	r3, #8
 800b7c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	e853 3f00 	ldrex	r3, [r3]
 800b7ce:	613b      	str	r3, [r7, #16]
   return(result);
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	f023 0301 	bic.w	r3, r3, #1
 800b7d6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	3308      	adds	r3, #8
 800b7de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b7e0:	623a      	str	r2, [r7, #32]
 800b7e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e4:	69f9      	ldr	r1, [r7, #28]
 800b7e6:	6a3a      	ldr	r2, [r7, #32]
 800b7e8:	e841 2300 	strex	r3, r2, [r1]
 800b7ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800b7ee:	69bb      	ldr	r3, [r7, #24]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d1e5      	bne.n	800b7c0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2220      	movs	r2, #32
 800b7f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2220      	movs	r2, #32
 800b800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2220      	movs	r2, #32
 800b808:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2200      	movs	r2, #0
 800b810:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b814:	2303      	movs	r3, #3
 800b816:	e010      	b.n	800b83a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	69da      	ldr	r2, [r3, #28]
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	4013      	ands	r3, r2
 800b822:	68ba      	ldr	r2, [r7, #8]
 800b824:	429a      	cmp	r2, r3
 800b826:	bf0c      	ite	eq
 800b828:	2301      	moveq	r3, #1
 800b82a:	2300      	movne	r3, #0
 800b82c:	b2db      	uxtb	r3, r3
 800b82e:	461a      	mov	r2, r3
 800b830:	79fb      	ldrb	r3, [r7, #7]
 800b832:	429a      	cmp	r2, r3
 800b834:	f43f af46 	beq.w	800b6c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b838:	2300      	movs	r3, #0
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3770      	adds	r7, #112	; 0x70
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b842:	b480      	push	{r7}
 800b844:	b085      	sub	sp, #20
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b850:	2b01      	cmp	r3, #1
 800b852:	d101      	bne.n	800b858 <HAL_UARTEx_DisableFifoMode+0x16>
 800b854:	2302      	movs	r3, #2
 800b856:	e027      	b.n	800b8a8 <HAL_UARTEx_DisableFifoMode+0x66>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2224      	movs	r2, #36	; 0x24
 800b864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	681a      	ldr	r2, [r3, #0]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f022 0201 	bic.w	r2, r2, #1
 800b87e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b886:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2200      	movs	r2, #0
 800b88c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	68fa      	ldr	r2, [r7, #12]
 800b894:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2220      	movs	r2, #32
 800b89a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b8a6:	2300      	movs	r3, #0
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3714      	adds	r7, #20
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	d101      	bne.n	800b8cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b8c8:	2302      	movs	r3, #2
 800b8ca:	e02d      	b.n	800b928 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2224      	movs	r2, #36	; 0x24
 800b8d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	681a      	ldr	r2, [r3, #0]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f022 0201 	bic.w	r2, r2, #1
 800b8f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	683a      	ldr	r2, [r7, #0]
 800b904:	430a      	orrs	r2, r1
 800b906:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 f84f 	bl	800b9ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	68fa      	ldr	r2, [r7, #12]
 800b914:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2220      	movs	r2, #32
 800b91a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2200      	movs	r2, #0
 800b922:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b926:	2300      	movs	r3, #0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3710      	adds	r7, #16
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b940:	2b01      	cmp	r3, #1
 800b942:	d101      	bne.n	800b948 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b944:	2302      	movs	r3, #2
 800b946:	e02d      	b.n	800b9a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2201      	movs	r2, #1
 800b94c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2224      	movs	r2, #36	; 0x24
 800b954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	681a      	ldr	r2, [r3, #0]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f022 0201 	bic.w	r2, r2, #1
 800b96e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	689b      	ldr	r3, [r3, #8]
 800b976:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	683a      	ldr	r2, [r7, #0]
 800b980:	430a      	orrs	r2, r1
 800b982:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f000 f811 	bl	800b9ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	68fa      	ldr	r2, [r7, #12]
 800b990:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2220      	movs	r2, #32
 800b996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2200      	movs	r2, #0
 800b99e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b9a2:	2300      	movs	r3, #0
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3710      	adds	r7, #16
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b085      	sub	sp, #20
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d108      	bne.n	800b9ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b9cc:	e031      	b.n	800ba32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b9ce:	2310      	movs	r3, #16
 800b9d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b9d2:	2310      	movs	r3, #16
 800b9d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	689b      	ldr	r3, [r3, #8]
 800b9dc:	0e5b      	lsrs	r3, r3, #25
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	f003 0307 	and.w	r3, r3, #7
 800b9e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	689b      	ldr	r3, [r3, #8]
 800b9ec:	0f5b      	lsrs	r3, r3, #29
 800b9ee:	b2db      	uxtb	r3, r3
 800b9f0:	f003 0307 	and.w	r3, r3, #7
 800b9f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b9f6:	7bbb      	ldrb	r3, [r7, #14]
 800b9f8:	7b3a      	ldrb	r2, [r7, #12]
 800b9fa:	4911      	ldr	r1, [pc, #68]	; (800ba40 <UARTEx_SetNbDataToProcess+0x94>)
 800b9fc:	5c8a      	ldrb	r2, [r1, r2]
 800b9fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ba02:	7b3a      	ldrb	r2, [r7, #12]
 800ba04:	490f      	ldr	r1, [pc, #60]	; (800ba44 <UARTEx_SetNbDataToProcess+0x98>)
 800ba06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba08:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba0c:	b29a      	uxth	r2, r3
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba14:	7bfb      	ldrb	r3, [r7, #15]
 800ba16:	7b7a      	ldrb	r2, [r7, #13]
 800ba18:	4909      	ldr	r1, [pc, #36]	; (800ba40 <UARTEx_SetNbDataToProcess+0x94>)
 800ba1a:	5c8a      	ldrb	r2, [r1, r2]
 800ba1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ba20:	7b7a      	ldrb	r2, [r7, #13]
 800ba22:	4908      	ldr	r1, [pc, #32]	; (800ba44 <UARTEx_SetNbDataToProcess+0x98>)
 800ba24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba26:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba2a:	b29a      	uxth	r2, r3
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ba32:	bf00      	nop
 800ba34:	3714      	adds	r7, #20
 800ba36:	46bd      	mov	sp, r7
 800ba38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3c:	4770      	bx	lr
 800ba3e:	bf00      	nop
 800ba40:	0800f974 	.word	0x0800f974
 800ba44:	0800f97c 	.word	0x0800f97c

0800ba48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ba48:	b084      	sub	sp, #16
 800ba4a:	b580      	push	{r7, lr}
 800ba4c:	b084      	sub	sp, #16
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
 800ba52:	f107 001c 	add.w	r0, r7, #28
 800ba56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ba5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d120      	bne.n	800baa2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	68da      	ldr	r2, [r3, #12]
 800ba70:	4b2a      	ldr	r3, [pc, #168]	; (800bb1c <USB_CoreInit+0xd4>)
 800ba72:	4013      	ands	r3, r2
 800ba74:	687a      	ldr	r2, [r7, #4]
 800ba76:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	68db      	ldr	r3, [r3, #12]
 800ba7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ba84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d105      	bne.n	800ba96 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	68db      	ldr	r3, [r3, #12]
 800ba8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f000 faa8 	bl	800bfec <USB_CoreReset>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	73fb      	strb	r3, [r7, #15]
 800baa0:	e01a      	b.n	800bad8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	68db      	ldr	r3, [r3, #12]
 800baa6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 fa9c 	bl	800bfec <USB_CoreReset>
 800bab4:	4603      	mov	r3, r0
 800bab6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800baba:	2b00      	cmp	r3, #0
 800babc:	d106      	bne.n	800bacc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bac2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	639a      	str	r2, [r3, #56]	; 0x38
 800baca:	e005      	b.n	800bad8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bad0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bada:	2b01      	cmp	r3, #1
 800badc:	d116      	bne.n	800bb0c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bae2:	b29a      	uxth	r2, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800baec:	4b0c      	ldr	r3, [pc, #48]	; (800bb20 <USB_CoreInit+0xd8>)
 800baee:	4313      	orrs	r3, r2
 800baf0:	687a      	ldr	r2, [r7, #4]
 800baf2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	f043 0206 	orr.w	r2, r3, #6
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	f043 0220 	orr.w	r2, r3, #32
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bb0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3710      	adds	r7, #16
 800bb12:	46bd      	mov	sp, r7
 800bb14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bb18:	b004      	add	sp, #16
 800bb1a:	4770      	bx	lr
 800bb1c:	ffbdffbf 	.word	0xffbdffbf
 800bb20:	03ee0000 	.word	0x03ee0000

0800bb24 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b083      	sub	sp, #12
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	689b      	ldr	r3, [r3, #8]
 800bb30:	f023 0201 	bic.w	r2, r3, #1
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bb38:	2300      	movs	r3, #0
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	370c      	adds	r7, #12
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr

0800bb46 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bb46:	b580      	push	{r7, lr}
 800bb48:	b084      	sub	sp, #16
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
 800bb4e:	460b      	mov	r3, r1
 800bb50:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bb52:	2300      	movs	r3, #0
 800bb54:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bb62:	78fb      	ldrb	r3, [r7, #3]
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d115      	bne.n	800bb94 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	68db      	ldr	r3, [r3, #12]
 800bb6c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bb74:	2001      	movs	r0, #1
 800bb76:	f7f7 faeb 	bl	8003150 <HAL_Delay>
      ms++;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f000 fa25 	bl	800bfd0 <USB_GetMode>
 800bb86:	4603      	mov	r3, r0
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d01e      	beq.n	800bbca <USB_SetCurrentMode+0x84>
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	2b31      	cmp	r3, #49	; 0x31
 800bb90:	d9f0      	bls.n	800bb74 <USB_SetCurrentMode+0x2e>
 800bb92:	e01a      	b.n	800bbca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bb94:	78fb      	ldrb	r3, [r7, #3]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d115      	bne.n	800bbc6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bba6:	2001      	movs	r0, #1
 800bba8:	f7f7 fad2 	bl	8003150 <HAL_Delay>
      ms++;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	3301      	adds	r3, #1
 800bbb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 fa0c 	bl	800bfd0 <USB_GetMode>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d005      	beq.n	800bbca <USB_SetCurrentMode+0x84>
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2b31      	cmp	r3, #49	; 0x31
 800bbc2:	d9f0      	bls.n	800bba6 <USB_SetCurrentMode+0x60>
 800bbc4:	e001      	b.n	800bbca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	e005      	b.n	800bbd6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	2b32      	cmp	r3, #50	; 0x32
 800bbce:	d101      	bne.n	800bbd4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	e000      	b.n	800bbd6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bbd4:	2300      	movs	r3, #0
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3710      	adds	r7, #16
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
	...

0800bbe0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bbe0:	b084      	sub	sp, #16
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b086      	sub	sp, #24
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
 800bbea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bbee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	613b      	str	r3, [r7, #16]
 800bbfe:	e009      	b.n	800bc14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	3340      	adds	r3, #64	; 0x40
 800bc06:	009b      	lsls	r3, r3, #2
 800bc08:	4413      	add	r3, r2
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	3301      	adds	r3, #1
 800bc12:	613b      	str	r3, [r7, #16]
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	2b0e      	cmp	r3, #14
 800bc18:	d9f2      	bls.n	800bc00 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bc1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d11c      	bne.n	800bc5a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	68fa      	ldr	r2, [r7, #12]
 800bc2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc2e:	f043 0302 	orr.w	r3, r3, #2
 800bc32:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc38:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	601a      	str	r2, [r3, #0]
 800bc58:	e005      	b.n	800bc66 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	2300      	movs	r3, #0
 800bc70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc78:	4619      	mov	r1, r3
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc80:	461a      	mov	r2, r3
 800bc82:	680b      	ldr	r3, [r1, #0]
 800bc84:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bc86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	d10c      	bne.n	800bca6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d104      	bne.n	800bc9c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bc92:	2100      	movs	r1, #0
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f000 f961 	bl	800bf5c <USB_SetDevSpeed>
 800bc9a:	e008      	b.n	800bcae <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bc9c:	2101      	movs	r1, #1
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 f95c 	bl	800bf5c <USB_SetDevSpeed>
 800bca4:	e003      	b.n	800bcae <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bca6:	2103      	movs	r1, #3
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f000 f957 	bl	800bf5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bcae:	2110      	movs	r1, #16
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f000 f8f3 	bl	800be9c <USB_FlushTxFifo>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d001      	beq.n	800bcc0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f000 f91d 	bl	800bf00 <USB_FlushRxFifo>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d001      	beq.n	800bcd0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800bccc:	2301      	movs	r3, #1
 800bcce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	2300      	movs	r3, #0
 800bcda:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bce2:	461a      	mov	r2, r3
 800bce4:	2300      	movs	r3, #0
 800bce6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcee:	461a      	mov	r2, r3
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	613b      	str	r3, [r7, #16]
 800bcf8:	e043      	b.n	800bd82 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	015a      	lsls	r2, r3, #5
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	4413      	add	r3, r2
 800bd02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd10:	d118      	bne.n	800bd44 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d10a      	bne.n	800bd2e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	015a      	lsls	r2, r3, #5
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	4413      	add	r3, r2
 800bd20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd24:	461a      	mov	r2, r3
 800bd26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bd2a:	6013      	str	r3, [r2, #0]
 800bd2c:	e013      	b.n	800bd56 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	015a      	lsls	r2, r3, #5
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	4413      	add	r3, r2
 800bd36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bd40:	6013      	str	r3, [r2, #0]
 800bd42:	e008      	b.n	800bd56 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	015a      	lsls	r2, r3, #5
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	4413      	add	r3, r2
 800bd4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd50:	461a      	mov	r2, r3
 800bd52:	2300      	movs	r3, #0
 800bd54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	015a      	lsls	r2, r3, #5
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd62:	461a      	mov	r2, r3
 800bd64:	2300      	movs	r3, #0
 800bd66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	015a      	lsls	r2, r3, #5
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	4413      	add	r3, r2
 800bd70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd74:	461a      	mov	r2, r3
 800bd76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bd7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	3301      	adds	r3, #1
 800bd80:	613b      	str	r3, [r7, #16]
 800bd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd84:	693a      	ldr	r2, [r7, #16]
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d3b7      	bcc.n	800bcfa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	613b      	str	r3, [r7, #16]
 800bd8e:	e043      	b.n	800be18 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	015a      	lsls	r2, r3, #5
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	4413      	add	r3, r2
 800bd98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bda2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bda6:	d118      	bne.n	800bdda <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d10a      	bne.n	800bdc4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	015a      	lsls	r2, r3, #5
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	4413      	add	r3, r2
 800bdb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdba:	461a      	mov	r2, r3
 800bdbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bdc0:	6013      	str	r3, [r2, #0]
 800bdc2:	e013      	b.n	800bdec <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	015a      	lsls	r2, r3, #5
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	4413      	add	r3, r2
 800bdcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bdd6:	6013      	str	r3, [r2, #0]
 800bdd8:	e008      	b.n	800bdec <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	015a      	lsls	r2, r3, #5
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	4413      	add	r3, r2
 800bde2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bde6:	461a      	mov	r2, r3
 800bde8:	2300      	movs	r3, #0
 800bdea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	015a      	lsls	r2, r3, #5
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	015a      	lsls	r2, r3, #5
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	4413      	add	r3, r2
 800be06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be0a:	461a      	mov	r2, r3
 800be0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800be10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	3301      	adds	r3, #1
 800be16:	613b      	str	r3, [r7, #16]
 800be18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1a:	693a      	ldr	r2, [r7, #16]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d3b7      	bcc.n	800bd90 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be26:	691b      	ldr	r3, [r3, #16]
 800be28:	68fa      	ldr	r2, [r7, #12]
 800be2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800be2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be32:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2200      	movs	r2, #0
 800be38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800be40:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800be42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be44:	2b00      	cmp	r3, #0
 800be46:	d105      	bne.n	800be54 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	699b      	ldr	r3, [r3, #24]
 800be4c:	f043 0210 	orr.w	r2, r3, #16
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	699a      	ldr	r2, [r3, #24]
 800be58:	4b0e      	ldr	r3, [pc, #56]	; (800be94 <USB_DevInit+0x2b4>)
 800be5a:	4313      	orrs	r3, r2
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800be60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be62:	2b00      	cmp	r3, #0
 800be64:	d005      	beq.n	800be72 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	699b      	ldr	r3, [r3, #24]
 800be6a:	f043 0208 	orr.w	r2, r3, #8
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800be72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be74:	2b01      	cmp	r3, #1
 800be76:	d105      	bne.n	800be84 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	699a      	ldr	r2, [r3, #24]
 800be7c:	4b06      	ldr	r3, [pc, #24]	; (800be98 <USB_DevInit+0x2b8>)
 800be7e:	4313      	orrs	r3, r2
 800be80:	687a      	ldr	r2, [r7, #4]
 800be82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800be84:	7dfb      	ldrb	r3, [r7, #23]
}
 800be86:	4618      	mov	r0, r3
 800be88:	3718      	adds	r7, #24
 800be8a:	46bd      	mov	sp, r7
 800be8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be90:	b004      	add	sp, #16
 800be92:	4770      	bx	lr
 800be94:	803c3800 	.word	0x803c3800
 800be98:	40000004 	.word	0x40000004

0800be9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b085      	sub	sp, #20
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bea6:	2300      	movs	r3, #0
 800bea8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	3301      	adds	r3, #1
 800beae:	60fb      	str	r3, [r7, #12]
 800beb0:	4a12      	ldr	r2, [pc, #72]	; (800befc <USB_FlushTxFifo+0x60>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d901      	bls.n	800beba <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800beb6:	2303      	movs	r3, #3
 800beb8:	e01a      	b.n	800bef0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	691b      	ldr	r3, [r3, #16]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	daf3      	bge.n	800beaa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bec2:	2300      	movs	r3, #0
 800bec4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	019b      	lsls	r3, r3, #6
 800beca:	f043 0220 	orr.w	r2, r3, #32
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	3301      	adds	r3, #1
 800bed6:	60fb      	str	r3, [r7, #12]
 800bed8:	4a08      	ldr	r2, [pc, #32]	; (800befc <USB_FlushTxFifo+0x60>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d901      	bls.n	800bee2 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800bede:	2303      	movs	r3, #3
 800bee0:	e006      	b.n	800bef0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	691b      	ldr	r3, [r3, #16]
 800bee6:	f003 0320 	and.w	r3, r3, #32
 800beea:	2b20      	cmp	r3, #32
 800beec:	d0f1      	beq.n	800bed2 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800beee:	2300      	movs	r3, #0
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	3714      	adds	r7, #20
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr
 800befc:	00030d40 	.word	0x00030d40

0800bf00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b085      	sub	sp, #20
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	3301      	adds	r3, #1
 800bf10:	60fb      	str	r3, [r7, #12]
 800bf12:	4a11      	ldr	r2, [pc, #68]	; (800bf58 <USB_FlushRxFifo+0x58>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d901      	bls.n	800bf1c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800bf18:	2303      	movs	r3, #3
 800bf1a:	e017      	b.n	800bf4c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	691b      	ldr	r3, [r3, #16]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	daf3      	bge.n	800bf0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bf24:	2300      	movs	r3, #0
 800bf26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2210      	movs	r2, #16
 800bf2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	3301      	adds	r3, #1
 800bf32:	60fb      	str	r3, [r7, #12]
 800bf34:	4a08      	ldr	r2, [pc, #32]	; (800bf58 <USB_FlushRxFifo+0x58>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d901      	bls.n	800bf3e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800bf3a:	2303      	movs	r3, #3
 800bf3c:	e006      	b.n	800bf4c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	691b      	ldr	r3, [r3, #16]
 800bf42:	f003 0310 	and.w	r3, r3, #16
 800bf46:	2b10      	cmp	r3, #16
 800bf48:	d0f1      	beq.n	800bf2e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800bf4a:	2300      	movs	r3, #0
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3714      	adds	r7, #20
 800bf50:	46bd      	mov	sp, r7
 800bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf56:	4770      	bx	lr
 800bf58:	00030d40 	.word	0x00030d40

0800bf5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b085      	sub	sp, #20
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	460b      	mov	r3, r1
 800bf66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	78fb      	ldrb	r3, [r7, #3]
 800bf76:	68f9      	ldr	r1, [r7, #12]
 800bf78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf7c:	4313      	orrs	r3, r2
 800bf7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bf80:	2300      	movs	r3, #0
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3714      	adds	r7, #20
 800bf86:	46bd      	mov	sp, r7
 800bf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8c:	4770      	bx	lr

0800bf8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bf8e:	b480      	push	{r7}
 800bf90:	b085      	sub	sp, #20
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	68fa      	ldr	r2, [r7, #12]
 800bfa4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bfa8:	f023 0303 	bic.w	r3, r3, #3
 800bfac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	68fa      	ldr	r2, [r7, #12]
 800bfb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bfbc:	f043 0302 	orr.w	r3, r3, #2
 800bfc0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bfc2:	2300      	movs	r3, #0
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3714      	adds	r7, #20
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfce:	4770      	bx	lr

0800bfd0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b083      	sub	sp, #12
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	695b      	ldr	r3, [r3, #20]
 800bfdc:	f003 0301 	and.w	r3, r3, #1
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	370c      	adds	r7, #12
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr

0800bfec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b085      	sub	sp, #20
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bff4:	2300      	movs	r3, #0
 800bff6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	3301      	adds	r3, #1
 800bffc:	60fb      	str	r3, [r7, #12]
 800bffe:	4a13      	ldr	r2, [pc, #76]	; (800c04c <USB_CoreReset+0x60>)
 800c000:	4293      	cmp	r3, r2
 800c002:	d901      	bls.n	800c008 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800c004:	2303      	movs	r3, #3
 800c006:	e01a      	b.n	800c03e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	691b      	ldr	r3, [r3, #16]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	daf3      	bge.n	800bff8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c010:	2300      	movs	r3, #0
 800c012:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	691b      	ldr	r3, [r3, #16]
 800c018:	f043 0201 	orr.w	r2, r3, #1
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	3301      	adds	r3, #1
 800c024:	60fb      	str	r3, [r7, #12]
 800c026:	4a09      	ldr	r2, [pc, #36]	; (800c04c <USB_CoreReset+0x60>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d901      	bls.n	800c030 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800c02c:	2303      	movs	r3, #3
 800c02e:	e006      	b.n	800c03e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	691b      	ldr	r3, [r3, #16]
 800c034:	f003 0301 	and.w	r3, r3, #1
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d0f1      	beq.n	800c020 <USB_CoreReset+0x34>

  return HAL_OK;
 800c03c:	2300      	movs	r3, #0
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3714      	adds	r7, #20
 800c042:	46bd      	mov	sp, r7
 800c044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c048:	4770      	bx	lr
 800c04a:	bf00      	nop
 800c04c:	00030d40 	.word	0x00030d40

0800c050 <__errno>:
 800c050:	4b01      	ldr	r3, [pc, #4]	; (800c058 <__errno+0x8>)
 800c052:	6818      	ldr	r0, [r3, #0]
 800c054:	4770      	bx	lr
 800c056:	bf00      	nop
 800c058:	24000034 	.word	0x24000034

0800c05c <__libc_init_array>:
 800c05c:	b570      	push	{r4, r5, r6, lr}
 800c05e:	4d0d      	ldr	r5, [pc, #52]	; (800c094 <__libc_init_array+0x38>)
 800c060:	4c0d      	ldr	r4, [pc, #52]	; (800c098 <__libc_init_array+0x3c>)
 800c062:	1b64      	subs	r4, r4, r5
 800c064:	10a4      	asrs	r4, r4, #2
 800c066:	2600      	movs	r6, #0
 800c068:	42a6      	cmp	r6, r4
 800c06a:	d109      	bne.n	800c080 <__libc_init_array+0x24>
 800c06c:	4d0b      	ldr	r5, [pc, #44]	; (800c09c <__libc_init_array+0x40>)
 800c06e:	4c0c      	ldr	r4, [pc, #48]	; (800c0a0 <__libc_init_array+0x44>)
 800c070:	f000 fc56 	bl	800c920 <_init>
 800c074:	1b64      	subs	r4, r4, r5
 800c076:	10a4      	asrs	r4, r4, #2
 800c078:	2600      	movs	r6, #0
 800c07a:	42a6      	cmp	r6, r4
 800c07c:	d105      	bne.n	800c08a <__libc_init_array+0x2e>
 800c07e:	bd70      	pop	{r4, r5, r6, pc}
 800c080:	f855 3b04 	ldr.w	r3, [r5], #4
 800c084:	4798      	blx	r3
 800c086:	3601      	adds	r6, #1
 800c088:	e7ee      	b.n	800c068 <__libc_init_array+0xc>
 800c08a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c08e:	4798      	blx	r3
 800c090:	3601      	adds	r6, #1
 800c092:	e7f2      	b.n	800c07a <__libc_init_array+0x1e>
 800c094:	0800f9c0 	.word	0x0800f9c0
 800c098:	0800f9c0 	.word	0x0800f9c0
 800c09c:	0800f9c0 	.word	0x0800f9c0
 800c0a0:	0800f9c4 	.word	0x0800f9c4

0800c0a4 <memcpy>:
 800c0a4:	440a      	add	r2, r1
 800c0a6:	4291      	cmp	r1, r2
 800c0a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0ac:	d100      	bne.n	800c0b0 <memcpy+0xc>
 800c0ae:	4770      	bx	lr
 800c0b0:	b510      	push	{r4, lr}
 800c0b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0ba:	4291      	cmp	r1, r2
 800c0bc:	d1f9      	bne.n	800c0b2 <memcpy+0xe>
 800c0be:	bd10      	pop	{r4, pc}

0800c0c0 <memmove>:
 800c0c0:	4288      	cmp	r0, r1
 800c0c2:	b510      	push	{r4, lr}
 800c0c4:	eb01 0402 	add.w	r4, r1, r2
 800c0c8:	d902      	bls.n	800c0d0 <memmove+0x10>
 800c0ca:	4284      	cmp	r4, r0
 800c0cc:	4623      	mov	r3, r4
 800c0ce:	d807      	bhi.n	800c0e0 <memmove+0x20>
 800c0d0:	1e43      	subs	r3, r0, #1
 800c0d2:	42a1      	cmp	r1, r4
 800c0d4:	d008      	beq.n	800c0e8 <memmove+0x28>
 800c0d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c0de:	e7f8      	b.n	800c0d2 <memmove+0x12>
 800c0e0:	4402      	add	r2, r0
 800c0e2:	4601      	mov	r1, r0
 800c0e4:	428a      	cmp	r2, r1
 800c0e6:	d100      	bne.n	800c0ea <memmove+0x2a>
 800c0e8:	bd10      	pop	{r4, pc}
 800c0ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c0ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c0f2:	e7f7      	b.n	800c0e4 <memmove+0x24>

0800c0f4 <memset>:
 800c0f4:	4402      	add	r2, r0
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d100      	bne.n	800c0fe <memset+0xa>
 800c0fc:	4770      	bx	lr
 800c0fe:	f803 1b01 	strb.w	r1, [r3], #1
 800c102:	e7f9      	b.n	800c0f8 <memset+0x4>

0800c104 <siprintf>:
 800c104:	b40e      	push	{r1, r2, r3}
 800c106:	b500      	push	{lr}
 800c108:	b09c      	sub	sp, #112	; 0x70
 800c10a:	ab1d      	add	r3, sp, #116	; 0x74
 800c10c:	9002      	str	r0, [sp, #8]
 800c10e:	9006      	str	r0, [sp, #24]
 800c110:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c114:	4809      	ldr	r0, [pc, #36]	; (800c13c <siprintf+0x38>)
 800c116:	9107      	str	r1, [sp, #28]
 800c118:	9104      	str	r1, [sp, #16]
 800c11a:	4909      	ldr	r1, [pc, #36]	; (800c140 <siprintf+0x3c>)
 800c11c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c120:	9105      	str	r1, [sp, #20]
 800c122:	6800      	ldr	r0, [r0, #0]
 800c124:	9301      	str	r3, [sp, #4]
 800c126:	a902      	add	r1, sp, #8
 800c128:	f000 f870 	bl	800c20c <_svfiprintf_r>
 800c12c:	9b02      	ldr	r3, [sp, #8]
 800c12e:	2200      	movs	r2, #0
 800c130:	701a      	strb	r2, [r3, #0]
 800c132:	b01c      	add	sp, #112	; 0x70
 800c134:	f85d eb04 	ldr.w	lr, [sp], #4
 800c138:	b003      	add	sp, #12
 800c13a:	4770      	bx	lr
 800c13c:	24000034 	.word	0x24000034
 800c140:	ffff0208 	.word	0xffff0208

0800c144 <strcpy>:
 800c144:	4603      	mov	r3, r0
 800c146:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c14a:	f803 2b01 	strb.w	r2, [r3], #1
 800c14e:	2a00      	cmp	r2, #0
 800c150:	d1f9      	bne.n	800c146 <strcpy+0x2>
 800c152:	4770      	bx	lr

0800c154 <__ssputs_r>:
 800c154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c158:	688e      	ldr	r6, [r1, #8]
 800c15a:	429e      	cmp	r6, r3
 800c15c:	4682      	mov	sl, r0
 800c15e:	460c      	mov	r4, r1
 800c160:	4690      	mov	r8, r2
 800c162:	461f      	mov	r7, r3
 800c164:	d838      	bhi.n	800c1d8 <__ssputs_r+0x84>
 800c166:	898a      	ldrh	r2, [r1, #12]
 800c168:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c16c:	d032      	beq.n	800c1d4 <__ssputs_r+0x80>
 800c16e:	6825      	ldr	r5, [r4, #0]
 800c170:	6909      	ldr	r1, [r1, #16]
 800c172:	eba5 0901 	sub.w	r9, r5, r1
 800c176:	6965      	ldr	r5, [r4, #20]
 800c178:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c17c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c180:	3301      	adds	r3, #1
 800c182:	444b      	add	r3, r9
 800c184:	106d      	asrs	r5, r5, #1
 800c186:	429d      	cmp	r5, r3
 800c188:	bf38      	it	cc
 800c18a:	461d      	movcc	r5, r3
 800c18c:	0553      	lsls	r3, r2, #21
 800c18e:	d531      	bpl.n	800c1f4 <__ssputs_r+0xa0>
 800c190:	4629      	mov	r1, r5
 800c192:	f000 fb1f 	bl	800c7d4 <_malloc_r>
 800c196:	4606      	mov	r6, r0
 800c198:	b950      	cbnz	r0, 800c1b0 <__ssputs_r+0x5c>
 800c19a:	230c      	movs	r3, #12
 800c19c:	f8ca 3000 	str.w	r3, [sl]
 800c1a0:	89a3      	ldrh	r3, [r4, #12]
 800c1a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1a6:	81a3      	strh	r3, [r4, #12]
 800c1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1b0:	6921      	ldr	r1, [r4, #16]
 800c1b2:	464a      	mov	r2, r9
 800c1b4:	f7ff ff76 	bl	800c0a4 <memcpy>
 800c1b8:	89a3      	ldrh	r3, [r4, #12]
 800c1ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c1be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1c2:	81a3      	strh	r3, [r4, #12]
 800c1c4:	6126      	str	r6, [r4, #16]
 800c1c6:	6165      	str	r5, [r4, #20]
 800c1c8:	444e      	add	r6, r9
 800c1ca:	eba5 0509 	sub.w	r5, r5, r9
 800c1ce:	6026      	str	r6, [r4, #0]
 800c1d0:	60a5      	str	r5, [r4, #8]
 800c1d2:	463e      	mov	r6, r7
 800c1d4:	42be      	cmp	r6, r7
 800c1d6:	d900      	bls.n	800c1da <__ssputs_r+0x86>
 800c1d8:	463e      	mov	r6, r7
 800c1da:	4632      	mov	r2, r6
 800c1dc:	6820      	ldr	r0, [r4, #0]
 800c1de:	4641      	mov	r1, r8
 800c1e0:	f7ff ff6e 	bl	800c0c0 <memmove>
 800c1e4:	68a3      	ldr	r3, [r4, #8]
 800c1e6:	6822      	ldr	r2, [r4, #0]
 800c1e8:	1b9b      	subs	r3, r3, r6
 800c1ea:	4432      	add	r2, r6
 800c1ec:	60a3      	str	r3, [r4, #8]
 800c1ee:	6022      	str	r2, [r4, #0]
 800c1f0:	2000      	movs	r0, #0
 800c1f2:	e7db      	b.n	800c1ac <__ssputs_r+0x58>
 800c1f4:	462a      	mov	r2, r5
 800c1f6:	f000 fb47 	bl	800c888 <_realloc_r>
 800c1fa:	4606      	mov	r6, r0
 800c1fc:	2800      	cmp	r0, #0
 800c1fe:	d1e1      	bne.n	800c1c4 <__ssputs_r+0x70>
 800c200:	6921      	ldr	r1, [r4, #16]
 800c202:	4650      	mov	r0, sl
 800c204:	f000 fa96 	bl	800c734 <_free_r>
 800c208:	e7c7      	b.n	800c19a <__ssputs_r+0x46>
	...

0800c20c <_svfiprintf_r>:
 800c20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c210:	4698      	mov	r8, r3
 800c212:	898b      	ldrh	r3, [r1, #12]
 800c214:	061b      	lsls	r3, r3, #24
 800c216:	b09d      	sub	sp, #116	; 0x74
 800c218:	4607      	mov	r7, r0
 800c21a:	460d      	mov	r5, r1
 800c21c:	4614      	mov	r4, r2
 800c21e:	d50e      	bpl.n	800c23e <_svfiprintf_r+0x32>
 800c220:	690b      	ldr	r3, [r1, #16]
 800c222:	b963      	cbnz	r3, 800c23e <_svfiprintf_r+0x32>
 800c224:	2140      	movs	r1, #64	; 0x40
 800c226:	f000 fad5 	bl	800c7d4 <_malloc_r>
 800c22a:	6028      	str	r0, [r5, #0]
 800c22c:	6128      	str	r0, [r5, #16]
 800c22e:	b920      	cbnz	r0, 800c23a <_svfiprintf_r+0x2e>
 800c230:	230c      	movs	r3, #12
 800c232:	603b      	str	r3, [r7, #0]
 800c234:	f04f 30ff 	mov.w	r0, #4294967295
 800c238:	e0d1      	b.n	800c3de <_svfiprintf_r+0x1d2>
 800c23a:	2340      	movs	r3, #64	; 0x40
 800c23c:	616b      	str	r3, [r5, #20]
 800c23e:	2300      	movs	r3, #0
 800c240:	9309      	str	r3, [sp, #36]	; 0x24
 800c242:	2320      	movs	r3, #32
 800c244:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c248:	f8cd 800c 	str.w	r8, [sp, #12]
 800c24c:	2330      	movs	r3, #48	; 0x30
 800c24e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c3f8 <_svfiprintf_r+0x1ec>
 800c252:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c256:	f04f 0901 	mov.w	r9, #1
 800c25a:	4623      	mov	r3, r4
 800c25c:	469a      	mov	sl, r3
 800c25e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c262:	b10a      	cbz	r2, 800c268 <_svfiprintf_r+0x5c>
 800c264:	2a25      	cmp	r2, #37	; 0x25
 800c266:	d1f9      	bne.n	800c25c <_svfiprintf_r+0x50>
 800c268:	ebba 0b04 	subs.w	fp, sl, r4
 800c26c:	d00b      	beq.n	800c286 <_svfiprintf_r+0x7a>
 800c26e:	465b      	mov	r3, fp
 800c270:	4622      	mov	r2, r4
 800c272:	4629      	mov	r1, r5
 800c274:	4638      	mov	r0, r7
 800c276:	f7ff ff6d 	bl	800c154 <__ssputs_r>
 800c27a:	3001      	adds	r0, #1
 800c27c:	f000 80aa 	beq.w	800c3d4 <_svfiprintf_r+0x1c8>
 800c280:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c282:	445a      	add	r2, fp
 800c284:	9209      	str	r2, [sp, #36]	; 0x24
 800c286:	f89a 3000 	ldrb.w	r3, [sl]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	f000 80a2 	beq.w	800c3d4 <_svfiprintf_r+0x1c8>
 800c290:	2300      	movs	r3, #0
 800c292:	f04f 32ff 	mov.w	r2, #4294967295
 800c296:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c29a:	f10a 0a01 	add.w	sl, sl, #1
 800c29e:	9304      	str	r3, [sp, #16]
 800c2a0:	9307      	str	r3, [sp, #28]
 800c2a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2a6:	931a      	str	r3, [sp, #104]	; 0x68
 800c2a8:	4654      	mov	r4, sl
 800c2aa:	2205      	movs	r2, #5
 800c2ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2b0:	4851      	ldr	r0, [pc, #324]	; (800c3f8 <_svfiprintf_r+0x1ec>)
 800c2b2:	f7f4 f81d 	bl	80002f0 <memchr>
 800c2b6:	9a04      	ldr	r2, [sp, #16]
 800c2b8:	b9d8      	cbnz	r0, 800c2f2 <_svfiprintf_r+0xe6>
 800c2ba:	06d0      	lsls	r0, r2, #27
 800c2bc:	bf44      	itt	mi
 800c2be:	2320      	movmi	r3, #32
 800c2c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2c4:	0711      	lsls	r1, r2, #28
 800c2c6:	bf44      	itt	mi
 800c2c8:	232b      	movmi	r3, #43	; 0x2b
 800c2ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2ce:	f89a 3000 	ldrb.w	r3, [sl]
 800c2d2:	2b2a      	cmp	r3, #42	; 0x2a
 800c2d4:	d015      	beq.n	800c302 <_svfiprintf_r+0xf6>
 800c2d6:	9a07      	ldr	r2, [sp, #28]
 800c2d8:	4654      	mov	r4, sl
 800c2da:	2000      	movs	r0, #0
 800c2dc:	f04f 0c0a 	mov.w	ip, #10
 800c2e0:	4621      	mov	r1, r4
 800c2e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2e6:	3b30      	subs	r3, #48	; 0x30
 800c2e8:	2b09      	cmp	r3, #9
 800c2ea:	d94e      	bls.n	800c38a <_svfiprintf_r+0x17e>
 800c2ec:	b1b0      	cbz	r0, 800c31c <_svfiprintf_r+0x110>
 800c2ee:	9207      	str	r2, [sp, #28]
 800c2f0:	e014      	b.n	800c31c <_svfiprintf_r+0x110>
 800c2f2:	eba0 0308 	sub.w	r3, r0, r8
 800c2f6:	fa09 f303 	lsl.w	r3, r9, r3
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	9304      	str	r3, [sp, #16]
 800c2fe:	46a2      	mov	sl, r4
 800c300:	e7d2      	b.n	800c2a8 <_svfiprintf_r+0x9c>
 800c302:	9b03      	ldr	r3, [sp, #12]
 800c304:	1d19      	adds	r1, r3, #4
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	9103      	str	r1, [sp, #12]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	bfbb      	ittet	lt
 800c30e:	425b      	neglt	r3, r3
 800c310:	f042 0202 	orrlt.w	r2, r2, #2
 800c314:	9307      	strge	r3, [sp, #28]
 800c316:	9307      	strlt	r3, [sp, #28]
 800c318:	bfb8      	it	lt
 800c31a:	9204      	strlt	r2, [sp, #16]
 800c31c:	7823      	ldrb	r3, [r4, #0]
 800c31e:	2b2e      	cmp	r3, #46	; 0x2e
 800c320:	d10c      	bne.n	800c33c <_svfiprintf_r+0x130>
 800c322:	7863      	ldrb	r3, [r4, #1]
 800c324:	2b2a      	cmp	r3, #42	; 0x2a
 800c326:	d135      	bne.n	800c394 <_svfiprintf_r+0x188>
 800c328:	9b03      	ldr	r3, [sp, #12]
 800c32a:	1d1a      	adds	r2, r3, #4
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	9203      	str	r2, [sp, #12]
 800c330:	2b00      	cmp	r3, #0
 800c332:	bfb8      	it	lt
 800c334:	f04f 33ff 	movlt.w	r3, #4294967295
 800c338:	3402      	adds	r4, #2
 800c33a:	9305      	str	r3, [sp, #20]
 800c33c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c408 <_svfiprintf_r+0x1fc>
 800c340:	7821      	ldrb	r1, [r4, #0]
 800c342:	2203      	movs	r2, #3
 800c344:	4650      	mov	r0, sl
 800c346:	f7f3 ffd3 	bl	80002f0 <memchr>
 800c34a:	b140      	cbz	r0, 800c35e <_svfiprintf_r+0x152>
 800c34c:	2340      	movs	r3, #64	; 0x40
 800c34e:	eba0 000a 	sub.w	r0, r0, sl
 800c352:	fa03 f000 	lsl.w	r0, r3, r0
 800c356:	9b04      	ldr	r3, [sp, #16]
 800c358:	4303      	orrs	r3, r0
 800c35a:	3401      	adds	r4, #1
 800c35c:	9304      	str	r3, [sp, #16]
 800c35e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c362:	4826      	ldr	r0, [pc, #152]	; (800c3fc <_svfiprintf_r+0x1f0>)
 800c364:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c368:	2206      	movs	r2, #6
 800c36a:	f7f3 ffc1 	bl	80002f0 <memchr>
 800c36e:	2800      	cmp	r0, #0
 800c370:	d038      	beq.n	800c3e4 <_svfiprintf_r+0x1d8>
 800c372:	4b23      	ldr	r3, [pc, #140]	; (800c400 <_svfiprintf_r+0x1f4>)
 800c374:	bb1b      	cbnz	r3, 800c3be <_svfiprintf_r+0x1b2>
 800c376:	9b03      	ldr	r3, [sp, #12]
 800c378:	3307      	adds	r3, #7
 800c37a:	f023 0307 	bic.w	r3, r3, #7
 800c37e:	3308      	adds	r3, #8
 800c380:	9303      	str	r3, [sp, #12]
 800c382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c384:	4433      	add	r3, r6
 800c386:	9309      	str	r3, [sp, #36]	; 0x24
 800c388:	e767      	b.n	800c25a <_svfiprintf_r+0x4e>
 800c38a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c38e:	460c      	mov	r4, r1
 800c390:	2001      	movs	r0, #1
 800c392:	e7a5      	b.n	800c2e0 <_svfiprintf_r+0xd4>
 800c394:	2300      	movs	r3, #0
 800c396:	3401      	adds	r4, #1
 800c398:	9305      	str	r3, [sp, #20]
 800c39a:	4619      	mov	r1, r3
 800c39c:	f04f 0c0a 	mov.w	ip, #10
 800c3a0:	4620      	mov	r0, r4
 800c3a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3a6:	3a30      	subs	r2, #48	; 0x30
 800c3a8:	2a09      	cmp	r2, #9
 800c3aa:	d903      	bls.n	800c3b4 <_svfiprintf_r+0x1a8>
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d0c5      	beq.n	800c33c <_svfiprintf_r+0x130>
 800c3b0:	9105      	str	r1, [sp, #20]
 800c3b2:	e7c3      	b.n	800c33c <_svfiprintf_r+0x130>
 800c3b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3b8:	4604      	mov	r4, r0
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	e7f0      	b.n	800c3a0 <_svfiprintf_r+0x194>
 800c3be:	ab03      	add	r3, sp, #12
 800c3c0:	9300      	str	r3, [sp, #0]
 800c3c2:	462a      	mov	r2, r5
 800c3c4:	4b0f      	ldr	r3, [pc, #60]	; (800c404 <_svfiprintf_r+0x1f8>)
 800c3c6:	a904      	add	r1, sp, #16
 800c3c8:	4638      	mov	r0, r7
 800c3ca:	f3af 8000 	nop.w
 800c3ce:	1c42      	adds	r2, r0, #1
 800c3d0:	4606      	mov	r6, r0
 800c3d2:	d1d6      	bne.n	800c382 <_svfiprintf_r+0x176>
 800c3d4:	89ab      	ldrh	r3, [r5, #12]
 800c3d6:	065b      	lsls	r3, r3, #25
 800c3d8:	f53f af2c 	bmi.w	800c234 <_svfiprintf_r+0x28>
 800c3dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3de:	b01d      	add	sp, #116	; 0x74
 800c3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3e4:	ab03      	add	r3, sp, #12
 800c3e6:	9300      	str	r3, [sp, #0]
 800c3e8:	462a      	mov	r2, r5
 800c3ea:	4b06      	ldr	r3, [pc, #24]	; (800c404 <_svfiprintf_r+0x1f8>)
 800c3ec:	a904      	add	r1, sp, #16
 800c3ee:	4638      	mov	r0, r7
 800c3f0:	f000 f87a 	bl	800c4e8 <_printf_i>
 800c3f4:	e7eb      	b.n	800c3ce <_svfiprintf_r+0x1c2>
 800c3f6:	bf00      	nop
 800c3f8:	0800f984 	.word	0x0800f984
 800c3fc:	0800f98e 	.word	0x0800f98e
 800c400:	00000000 	.word	0x00000000
 800c404:	0800c155 	.word	0x0800c155
 800c408:	0800f98a 	.word	0x0800f98a

0800c40c <_printf_common>:
 800c40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c410:	4616      	mov	r6, r2
 800c412:	4699      	mov	r9, r3
 800c414:	688a      	ldr	r2, [r1, #8]
 800c416:	690b      	ldr	r3, [r1, #16]
 800c418:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c41c:	4293      	cmp	r3, r2
 800c41e:	bfb8      	it	lt
 800c420:	4613      	movlt	r3, r2
 800c422:	6033      	str	r3, [r6, #0]
 800c424:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c428:	4607      	mov	r7, r0
 800c42a:	460c      	mov	r4, r1
 800c42c:	b10a      	cbz	r2, 800c432 <_printf_common+0x26>
 800c42e:	3301      	adds	r3, #1
 800c430:	6033      	str	r3, [r6, #0]
 800c432:	6823      	ldr	r3, [r4, #0]
 800c434:	0699      	lsls	r1, r3, #26
 800c436:	bf42      	ittt	mi
 800c438:	6833      	ldrmi	r3, [r6, #0]
 800c43a:	3302      	addmi	r3, #2
 800c43c:	6033      	strmi	r3, [r6, #0]
 800c43e:	6825      	ldr	r5, [r4, #0]
 800c440:	f015 0506 	ands.w	r5, r5, #6
 800c444:	d106      	bne.n	800c454 <_printf_common+0x48>
 800c446:	f104 0a19 	add.w	sl, r4, #25
 800c44a:	68e3      	ldr	r3, [r4, #12]
 800c44c:	6832      	ldr	r2, [r6, #0]
 800c44e:	1a9b      	subs	r3, r3, r2
 800c450:	42ab      	cmp	r3, r5
 800c452:	dc26      	bgt.n	800c4a2 <_printf_common+0x96>
 800c454:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c458:	1e13      	subs	r3, r2, #0
 800c45a:	6822      	ldr	r2, [r4, #0]
 800c45c:	bf18      	it	ne
 800c45e:	2301      	movne	r3, #1
 800c460:	0692      	lsls	r2, r2, #26
 800c462:	d42b      	bmi.n	800c4bc <_printf_common+0xb0>
 800c464:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c468:	4649      	mov	r1, r9
 800c46a:	4638      	mov	r0, r7
 800c46c:	47c0      	blx	r8
 800c46e:	3001      	adds	r0, #1
 800c470:	d01e      	beq.n	800c4b0 <_printf_common+0xa4>
 800c472:	6823      	ldr	r3, [r4, #0]
 800c474:	68e5      	ldr	r5, [r4, #12]
 800c476:	6832      	ldr	r2, [r6, #0]
 800c478:	f003 0306 	and.w	r3, r3, #6
 800c47c:	2b04      	cmp	r3, #4
 800c47e:	bf08      	it	eq
 800c480:	1aad      	subeq	r5, r5, r2
 800c482:	68a3      	ldr	r3, [r4, #8]
 800c484:	6922      	ldr	r2, [r4, #16]
 800c486:	bf0c      	ite	eq
 800c488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c48c:	2500      	movne	r5, #0
 800c48e:	4293      	cmp	r3, r2
 800c490:	bfc4      	itt	gt
 800c492:	1a9b      	subgt	r3, r3, r2
 800c494:	18ed      	addgt	r5, r5, r3
 800c496:	2600      	movs	r6, #0
 800c498:	341a      	adds	r4, #26
 800c49a:	42b5      	cmp	r5, r6
 800c49c:	d11a      	bne.n	800c4d4 <_printf_common+0xc8>
 800c49e:	2000      	movs	r0, #0
 800c4a0:	e008      	b.n	800c4b4 <_printf_common+0xa8>
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	4652      	mov	r2, sl
 800c4a6:	4649      	mov	r1, r9
 800c4a8:	4638      	mov	r0, r7
 800c4aa:	47c0      	blx	r8
 800c4ac:	3001      	adds	r0, #1
 800c4ae:	d103      	bne.n	800c4b8 <_printf_common+0xac>
 800c4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4b8:	3501      	adds	r5, #1
 800c4ba:	e7c6      	b.n	800c44a <_printf_common+0x3e>
 800c4bc:	18e1      	adds	r1, r4, r3
 800c4be:	1c5a      	adds	r2, r3, #1
 800c4c0:	2030      	movs	r0, #48	; 0x30
 800c4c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c4c6:	4422      	add	r2, r4
 800c4c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c4cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c4d0:	3302      	adds	r3, #2
 800c4d2:	e7c7      	b.n	800c464 <_printf_common+0x58>
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	4622      	mov	r2, r4
 800c4d8:	4649      	mov	r1, r9
 800c4da:	4638      	mov	r0, r7
 800c4dc:	47c0      	blx	r8
 800c4de:	3001      	adds	r0, #1
 800c4e0:	d0e6      	beq.n	800c4b0 <_printf_common+0xa4>
 800c4e2:	3601      	adds	r6, #1
 800c4e4:	e7d9      	b.n	800c49a <_printf_common+0x8e>
	...

0800c4e8 <_printf_i>:
 800c4e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c4ec:	460c      	mov	r4, r1
 800c4ee:	4691      	mov	r9, r2
 800c4f0:	7e27      	ldrb	r7, [r4, #24]
 800c4f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c4f4:	2f78      	cmp	r7, #120	; 0x78
 800c4f6:	4680      	mov	r8, r0
 800c4f8:	469a      	mov	sl, r3
 800c4fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c4fe:	d807      	bhi.n	800c510 <_printf_i+0x28>
 800c500:	2f62      	cmp	r7, #98	; 0x62
 800c502:	d80a      	bhi.n	800c51a <_printf_i+0x32>
 800c504:	2f00      	cmp	r7, #0
 800c506:	f000 80d8 	beq.w	800c6ba <_printf_i+0x1d2>
 800c50a:	2f58      	cmp	r7, #88	; 0x58
 800c50c:	f000 80a3 	beq.w	800c656 <_printf_i+0x16e>
 800c510:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c514:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c518:	e03a      	b.n	800c590 <_printf_i+0xa8>
 800c51a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c51e:	2b15      	cmp	r3, #21
 800c520:	d8f6      	bhi.n	800c510 <_printf_i+0x28>
 800c522:	a001      	add	r0, pc, #4	; (adr r0, 800c528 <_printf_i+0x40>)
 800c524:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c528:	0800c581 	.word	0x0800c581
 800c52c:	0800c595 	.word	0x0800c595
 800c530:	0800c511 	.word	0x0800c511
 800c534:	0800c511 	.word	0x0800c511
 800c538:	0800c511 	.word	0x0800c511
 800c53c:	0800c511 	.word	0x0800c511
 800c540:	0800c595 	.word	0x0800c595
 800c544:	0800c511 	.word	0x0800c511
 800c548:	0800c511 	.word	0x0800c511
 800c54c:	0800c511 	.word	0x0800c511
 800c550:	0800c511 	.word	0x0800c511
 800c554:	0800c6a1 	.word	0x0800c6a1
 800c558:	0800c5c5 	.word	0x0800c5c5
 800c55c:	0800c683 	.word	0x0800c683
 800c560:	0800c511 	.word	0x0800c511
 800c564:	0800c511 	.word	0x0800c511
 800c568:	0800c6c3 	.word	0x0800c6c3
 800c56c:	0800c511 	.word	0x0800c511
 800c570:	0800c5c5 	.word	0x0800c5c5
 800c574:	0800c511 	.word	0x0800c511
 800c578:	0800c511 	.word	0x0800c511
 800c57c:	0800c68b 	.word	0x0800c68b
 800c580:	680b      	ldr	r3, [r1, #0]
 800c582:	1d1a      	adds	r2, r3, #4
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	600a      	str	r2, [r1, #0]
 800c588:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c58c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c590:	2301      	movs	r3, #1
 800c592:	e0a3      	b.n	800c6dc <_printf_i+0x1f4>
 800c594:	6825      	ldr	r5, [r4, #0]
 800c596:	6808      	ldr	r0, [r1, #0]
 800c598:	062e      	lsls	r6, r5, #24
 800c59a:	f100 0304 	add.w	r3, r0, #4
 800c59e:	d50a      	bpl.n	800c5b6 <_printf_i+0xce>
 800c5a0:	6805      	ldr	r5, [r0, #0]
 800c5a2:	600b      	str	r3, [r1, #0]
 800c5a4:	2d00      	cmp	r5, #0
 800c5a6:	da03      	bge.n	800c5b0 <_printf_i+0xc8>
 800c5a8:	232d      	movs	r3, #45	; 0x2d
 800c5aa:	426d      	negs	r5, r5
 800c5ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5b0:	485e      	ldr	r0, [pc, #376]	; (800c72c <_printf_i+0x244>)
 800c5b2:	230a      	movs	r3, #10
 800c5b4:	e019      	b.n	800c5ea <_printf_i+0x102>
 800c5b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c5ba:	6805      	ldr	r5, [r0, #0]
 800c5bc:	600b      	str	r3, [r1, #0]
 800c5be:	bf18      	it	ne
 800c5c0:	b22d      	sxthne	r5, r5
 800c5c2:	e7ef      	b.n	800c5a4 <_printf_i+0xbc>
 800c5c4:	680b      	ldr	r3, [r1, #0]
 800c5c6:	6825      	ldr	r5, [r4, #0]
 800c5c8:	1d18      	adds	r0, r3, #4
 800c5ca:	6008      	str	r0, [r1, #0]
 800c5cc:	0628      	lsls	r0, r5, #24
 800c5ce:	d501      	bpl.n	800c5d4 <_printf_i+0xec>
 800c5d0:	681d      	ldr	r5, [r3, #0]
 800c5d2:	e002      	b.n	800c5da <_printf_i+0xf2>
 800c5d4:	0669      	lsls	r1, r5, #25
 800c5d6:	d5fb      	bpl.n	800c5d0 <_printf_i+0xe8>
 800c5d8:	881d      	ldrh	r5, [r3, #0]
 800c5da:	4854      	ldr	r0, [pc, #336]	; (800c72c <_printf_i+0x244>)
 800c5dc:	2f6f      	cmp	r7, #111	; 0x6f
 800c5de:	bf0c      	ite	eq
 800c5e0:	2308      	moveq	r3, #8
 800c5e2:	230a      	movne	r3, #10
 800c5e4:	2100      	movs	r1, #0
 800c5e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c5ea:	6866      	ldr	r6, [r4, #4]
 800c5ec:	60a6      	str	r6, [r4, #8]
 800c5ee:	2e00      	cmp	r6, #0
 800c5f0:	bfa2      	ittt	ge
 800c5f2:	6821      	ldrge	r1, [r4, #0]
 800c5f4:	f021 0104 	bicge.w	r1, r1, #4
 800c5f8:	6021      	strge	r1, [r4, #0]
 800c5fa:	b90d      	cbnz	r5, 800c600 <_printf_i+0x118>
 800c5fc:	2e00      	cmp	r6, #0
 800c5fe:	d04d      	beq.n	800c69c <_printf_i+0x1b4>
 800c600:	4616      	mov	r6, r2
 800c602:	fbb5 f1f3 	udiv	r1, r5, r3
 800c606:	fb03 5711 	mls	r7, r3, r1, r5
 800c60a:	5dc7      	ldrb	r7, [r0, r7]
 800c60c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c610:	462f      	mov	r7, r5
 800c612:	42bb      	cmp	r3, r7
 800c614:	460d      	mov	r5, r1
 800c616:	d9f4      	bls.n	800c602 <_printf_i+0x11a>
 800c618:	2b08      	cmp	r3, #8
 800c61a:	d10b      	bne.n	800c634 <_printf_i+0x14c>
 800c61c:	6823      	ldr	r3, [r4, #0]
 800c61e:	07df      	lsls	r7, r3, #31
 800c620:	d508      	bpl.n	800c634 <_printf_i+0x14c>
 800c622:	6923      	ldr	r3, [r4, #16]
 800c624:	6861      	ldr	r1, [r4, #4]
 800c626:	4299      	cmp	r1, r3
 800c628:	bfde      	ittt	le
 800c62a:	2330      	movle	r3, #48	; 0x30
 800c62c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c630:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c634:	1b92      	subs	r2, r2, r6
 800c636:	6122      	str	r2, [r4, #16]
 800c638:	f8cd a000 	str.w	sl, [sp]
 800c63c:	464b      	mov	r3, r9
 800c63e:	aa03      	add	r2, sp, #12
 800c640:	4621      	mov	r1, r4
 800c642:	4640      	mov	r0, r8
 800c644:	f7ff fee2 	bl	800c40c <_printf_common>
 800c648:	3001      	adds	r0, #1
 800c64a:	d14c      	bne.n	800c6e6 <_printf_i+0x1fe>
 800c64c:	f04f 30ff 	mov.w	r0, #4294967295
 800c650:	b004      	add	sp, #16
 800c652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c656:	4835      	ldr	r0, [pc, #212]	; (800c72c <_printf_i+0x244>)
 800c658:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c65c:	6823      	ldr	r3, [r4, #0]
 800c65e:	680e      	ldr	r6, [r1, #0]
 800c660:	061f      	lsls	r7, r3, #24
 800c662:	f856 5b04 	ldr.w	r5, [r6], #4
 800c666:	600e      	str	r6, [r1, #0]
 800c668:	d514      	bpl.n	800c694 <_printf_i+0x1ac>
 800c66a:	07d9      	lsls	r1, r3, #31
 800c66c:	bf44      	itt	mi
 800c66e:	f043 0320 	orrmi.w	r3, r3, #32
 800c672:	6023      	strmi	r3, [r4, #0]
 800c674:	b91d      	cbnz	r5, 800c67e <_printf_i+0x196>
 800c676:	6823      	ldr	r3, [r4, #0]
 800c678:	f023 0320 	bic.w	r3, r3, #32
 800c67c:	6023      	str	r3, [r4, #0]
 800c67e:	2310      	movs	r3, #16
 800c680:	e7b0      	b.n	800c5e4 <_printf_i+0xfc>
 800c682:	6823      	ldr	r3, [r4, #0]
 800c684:	f043 0320 	orr.w	r3, r3, #32
 800c688:	6023      	str	r3, [r4, #0]
 800c68a:	2378      	movs	r3, #120	; 0x78
 800c68c:	4828      	ldr	r0, [pc, #160]	; (800c730 <_printf_i+0x248>)
 800c68e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c692:	e7e3      	b.n	800c65c <_printf_i+0x174>
 800c694:	065e      	lsls	r6, r3, #25
 800c696:	bf48      	it	mi
 800c698:	b2ad      	uxthmi	r5, r5
 800c69a:	e7e6      	b.n	800c66a <_printf_i+0x182>
 800c69c:	4616      	mov	r6, r2
 800c69e:	e7bb      	b.n	800c618 <_printf_i+0x130>
 800c6a0:	680b      	ldr	r3, [r1, #0]
 800c6a2:	6826      	ldr	r6, [r4, #0]
 800c6a4:	6960      	ldr	r0, [r4, #20]
 800c6a6:	1d1d      	adds	r5, r3, #4
 800c6a8:	600d      	str	r5, [r1, #0]
 800c6aa:	0635      	lsls	r5, r6, #24
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	d501      	bpl.n	800c6b4 <_printf_i+0x1cc>
 800c6b0:	6018      	str	r0, [r3, #0]
 800c6b2:	e002      	b.n	800c6ba <_printf_i+0x1d2>
 800c6b4:	0671      	lsls	r1, r6, #25
 800c6b6:	d5fb      	bpl.n	800c6b0 <_printf_i+0x1c8>
 800c6b8:	8018      	strh	r0, [r3, #0]
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	6123      	str	r3, [r4, #16]
 800c6be:	4616      	mov	r6, r2
 800c6c0:	e7ba      	b.n	800c638 <_printf_i+0x150>
 800c6c2:	680b      	ldr	r3, [r1, #0]
 800c6c4:	1d1a      	adds	r2, r3, #4
 800c6c6:	600a      	str	r2, [r1, #0]
 800c6c8:	681e      	ldr	r6, [r3, #0]
 800c6ca:	6862      	ldr	r2, [r4, #4]
 800c6cc:	2100      	movs	r1, #0
 800c6ce:	4630      	mov	r0, r6
 800c6d0:	f7f3 fe0e 	bl	80002f0 <memchr>
 800c6d4:	b108      	cbz	r0, 800c6da <_printf_i+0x1f2>
 800c6d6:	1b80      	subs	r0, r0, r6
 800c6d8:	6060      	str	r0, [r4, #4]
 800c6da:	6863      	ldr	r3, [r4, #4]
 800c6dc:	6123      	str	r3, [r4, #16]
 800c6de:	2300      	movs	r3, #0
 800c6e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6e4:	e7a8      	b.n	800c638 <_printf_i+0x150>
 800c6e6:	6923      	ldr	r3, [r4, #16]
 800c6e8:	4632      	mov	r2, r6
 800c6ea:	4649      	mov	r1, r9
 800c6ec:	4640      	mov	r0, r8
 800c6ee:	47d0      	blx	sl
 800c6f0:	3001      	adds	r0, #1
 800c6f2:	d0ab      	beq.n	800c64c <_printf_i+0x164>
 800c6f4:	6823      	ldr	r3, [r4, #0]
 800c6f6:	079b      	lsls	r3, r3, #30
 800c6f8:	d413      	bmi.n	800c722 <_printf_i+0x23a>
 800c6fa:	68e0      	ldr	r0, [r4, #12]
 800c6fc:	9b03      	ldr	r3, [sp, #12]
 800c6fe:	4298      	cmp	r0, r3
 800c700:	bfb8      	it	lt
 800c702:	4618      	movlt	r0, r3
 800c704:	e7a4      	b.n	800c650 <_printf_i+0x168>
 800c706:	2301      	movs	r3, #1
 800c708:	4632      	mov	r2, r6
 800c70a:	4649      	mov	r1, r9
 800c70c:	4640      	mov	r0, r8
 800c70e:	47d0      	blx	sl
 800c710:	3001      	adds	r0, #1
 800c712:	d09b      	beq.n	800c64c <_printf_i+0x164>
 800c714:	3501      	adds	r5, #1
 800c716:	68e3      	ldr	r3, [r4, #12]
 800c718:	9903      	ldr	r1, [sp, #12]
 800c71a:	1a5b      	subs	r3, r3, r1
 800c71c:	42ab      	cmp	r3, r5
 800c71e:	dcf2      	bgt.n	800c706 <_printf_i+0x21e>
 800c720:	e7eb      	b.n	800c6fa <_printf_i+0x212>
 800c722:	2500      	movs	r5, #0
 800c724:	f104 0619 	add.w	r6, r4, #25
 800c728:	e7f5      	b.n	800c716 <_printf_i+0x22e>
 800c72a:	bf00      	nop
 800c72c:	0800f995 	.word	0x0800f995
 800c730:	0800f9a6 	.word	0x0800f9a6

0800c734 <_free_r>:
 800c734:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c736:	2900      	cmp	r1, #0
 800c738:	d048      	beq.n	800c7cc <_free_r+0x98>
 800c73a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c73e:	9001      	str	r0, [sp, #4]
 800c740:	2b00      	cmp	r3, #0
 800c742:	f1a1 0404 	sub.w	r4, r1, #4
 800c746:	bfb8      	it	lt
 800c748:	18e4      	addlt	r4, r4, r3
 800c74a:	f000 f8d3 	bl	800c8f4 <__malloc_lock>
 800c74e:	4a20      	ldr	r2, [pc, #128]	; (800c7d0 <_free_r+0x9c>)
 800c750:	9801      	ldr	r0, [sp, #4]
 800c752:	6813      	ldr	r3, [r2, #0]
 800c754:	4615      	mov	r5, r2
 800c756:	b933      	cbnz	r3, 800c766 <_free_r+0x32>
 800c758:	6063      	str	r3, [r4, #4]
 800c75a:	6014      	str	r4, [r2, #0]
 800c75c:	b003      	add	sp, #12
 800c75e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c762:	f000 b8cd 	b.w	800c900 <__malloc_unlock>
 800c766:	42a3      	cmp	r3, r4
 800c768:	d90b      	bls.n	800c782 <_free_r+0x4e>
 800c76a:	6821      	ldr	r1, [r4, #0]
 800c76c:	1862      	adds	r2, r4, r1
 800c76e:	4293      	cmp	r3, r2
 800c770:	bf04      	itt	eq
 800c772:	681a      	ldreq	r2, [r3, #0]
 800c774:	685b      	ldreq	r3, [r3, #4]
 800c776:	6063      	str	r3, [r4, #4]
 800c778:	bf04      	itt	eq
 800c77a:	1852      	addeq	r2, r2, r1
 800c77c:	6022      	streq	r2, [r4, #0]
 800c77e:	602c      	str	r4, [r5, #0]
 800c780:	e7ec      	b.n	800c75c <_free_r+0x28>
 800c782:	461a      	mov	r2, r3
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	b10b      	cbz	r3, 800c78c <_free_r+0x58>
 800c788:	42a3      	cmp	r3, r4
 800c78a:	d9fa      	bls.n	800c782 <_free_r+0x4e>
 800c78c:	6811      	ldr	r1, [r2, #0]
 800c78e:	1855      	adds	r5, r2, r1
 800c790:	42a5      	cmp	r5, r4
 800c792:	d10b      	bne.n	800c7ac <_free_r+0x78>
 800c794:	6824      	ldr	r4, [r4, #0]
 800c796:	4421      	add	r1, r4
 800c798:	1854      	adds	r4, r2, r1
 800c79a:	42a3      	cmp	r3, r4
 800c79c:	6011      	str	r1, [r2, #0]
 800c79e:	d1dd      	bne.n	800c75c <_free_r+0x28>
 800c7a0:	681c      	ldr	r4, [r3, #0]
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	6053      	str	r3, [r2, #4]
 800c7a6:	4421      	add	r1, r4
 800c7a8:	6011      	str	r1, [r2, #0]
 800c7aa:	e7d7      	b.n	800c75c <_free_r+0x28>
 800c7ac:	d902      	bls.n	800c7b4 <_free_r+0x80>
 800c7ae:	230c      	movs	r3, #12
 800c7b0:	6003      	str	r3, [r0, #0]
 800c7b2:	e7d3      	b.n	800c75c <_free_r+0x28>
 800c7b4:	6825      	ldr	r5, [r4, #0]
 800c7b6:	1961      	adds	r1, r4, r5
 800c7b8:	428b      	cmp	r3, r1
 800c7ba:	bf04      	itt	eq
 800c7bc:	6819      	ldreq	r1, [r3, #0]
 800c7be:	685b      	ldreq	r3, [r3, #4]
 800c7c0:	6063      	str	r3, [r4, #4]
 800c7c2:	bf04      	itt	eq
 800c7c4:	1949      	addeq	r1, r1, r5
 800c7c6:	6021      	streq	r1, [r4, #0]
 800c7c8:	6054      	str	r4, [r2, #4]
 800c7ca:	e7c7      	b.n	800c75c <_free_r+0x28>
 800c7cc:	b003      	add	sp, #12
 800c7ce:	bd30      	pop	{r4, r5, pc}
 800c7d0:	240004f4 	.word	0x240004f4

0800c7d4 <_malloc_r>:
 800c7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7d6:	1ccd      	adds	r5, r1, #3
 800c7d8:	f025 0503 	bic.w	r5, r5, #3
 800c7dc:	3508      	adds	r5, #8
 800c7de:	2d0c      	cmp	r5, #12
 800c7e0:	bf38      	it	cc
 800c7e2:	250c      	movcc	r5, #12
 800c7e4:	2d00      	cmp	r5, #0
 800c7e6:	4606      	mov	r6, r0
 800c7e8:	db01      	blt.n	800c7ee <_malloc_r+0x1a>
 800c7ea:	42a9      	cmp	r1, r5
 800c7ec:	d903      	bls.n	800c7f6 <_malloc_r+0x22>
 800c7ee:	230c      	movs	r3, #12
 800c7f0:	6033      	str	r3, [r6, #0]
 800c7f2:	2000      	movs	r0, #0
 800c7f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7f6:	f000 f87d 	bl	800c8f4 <__malloc_lock>
 800c7fa:	4921      	ldr	r1, [pc, #132]	; (800c880 <_malloc_r+0xac>)
 800c7fc:	680a      	ldr	r2, [r1, #0]
 800c7fe:	4614      	mov	r4, r2
 800c800:	b99c      	cbnz	r4, 800c82a <_malloc_r+0x56>
 800c802:	4f20      	ldr	r7, [pc, #128]	; (800c884 <_malloc_r+0xb0>)
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	b923      	cbnz	r3, 800c812 <_malloc_r+0x3e>
 800c808:	4621      	mov	r1, r4
 800c80a:	4630      	mov	r0, r6
 800c80c:	f000 f862 	bl	800c8d4 <_sbrk_r>
 800c810:	6038      	str	r0, [r7, #0]
 800c812:	4629      	mov	r1, r5
 800c814:	4630      	mov	r0, r6
 800c816:	f000 f85d 	bl	800c8d4 <_sbrk_r>
 800c81a:	1c43      	adds	r3, r0, #1
 800c81c:	d123      	bne.n	800c866 <_malloc_r+0x92>
 800c81e:	230c      	movs	r3, #12
 800c820:	6033      	str	r3, [r6, #0]
 800c822:	4630      	mov	r0, r6
 800c824:	f000 f86c 	bl	800c900 <__malloc_unlock>
 800c828:	e7e3      	b.n	800c7f2 <_malloc_r+0x1e>
 800c82a:	6823      	ldr	r3, [r4, #0]
 800c82c:	1b5b      	subs	r3, r3, r5
 800c82e:	d417      	bmi.n	800c860 <_malloc_r+0x8c>
 800c830:	2b0b      	cmp	r3, #11
 800c832:	d903      	bls.n	800c83c <_malloc_r+0x68>
 800c834:	6023      	str	r3, [r4, #0]
 800c836:	441c      	add	r4, r3
 800c838:	6025      	str	r5, [r4, #0]
 800c83a:	e004      	b.n	800c846 <_malloc_r+0x72>
 800c83c:	6863      	ldr	r3, [r4, #4]
 800c83e:	42a2      	cmp	r2, r4
 800c840:	bf0c      	ite	eq
 800c842:	600b      	streq	r3, [r1, #0]
 800c844:	6053      	strne	r3, [r2, #4]
 800c846:	4630      	mov	r0, r6
 800c848:	f000 f85a 	bl	800c900 <__malloc_unlock>
 800c84c:	f104 000b 	add.w	r0, r4, #11
 800c850:	1d23      	adds	r3, r4, #4
 800c852:	f020 0007 	bic.w	r0, r0, #7
 800c856:	1ac2      	subs	r2, r0, r3
 800c858:	d0cc      	beq.n	800c7f4 <_malloc_r+0x20>
 800c85a:	1a1b      	subs	r3, r3, r0
 800c85c:	50a3      	str	r3, [r4, r2]
 800c85e:	e7c9      	b.n	800c7f4 <_malloc_r+0x20>
 800c860:	4622      	mov	r2, r4
 800c862:	6864      	ldr	r4, [r4, #4]
 800c864:	e7cc      	b.n	800c800 <_malloc_r+0x2c>
 800c866:	1cc4      	adds	r4, r0, #3
 800c868:	f024 0403 	bic.w	r4, r4, #3
 800c86c:	42a0      	cmp	r0, r4
 800c86e:	d0e3      	beq.n	800c838 <_malloc_r+0x64>
 800c870:	1a21      	subs	r1, r4, r0
 800c872:	4630      	mov	r0, r6
 800c874:	f000 f82e 	bl	800c8d4 <_sbrk_r>
 800c878:	3001      	adds	r0, #1
 800c87a:	d1dd      	bne.n	800c838 <_malloc_r+0x64>
 800c87c:	e7cf      	b.n	800c81e <_malloc_r+0x4a>
 800c87e:	bf00      	nop
 800c880:	240004f4 	.word	0x240004f4
 800c884:	240004f8 	.word	0x240004f8

0800c888 <_realloc_r>:
 800c888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c88a:	4607      	mov	r7, r0
 800c88c:	4614      	mov	r4, r2
 800c88e:	460e      	mov	r6, r1
 800c890:	b921      	cbnz	r1, 800c89c <_realloc_r+0x14>
 800c892:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c896:	4611      	mov	r1, r2
 800c898:	f7ff bf9c 	b.w	800c7d4 <_malloc_r>
 800c89c:	b922      	cbnz	r2, 800c8a8 <_realloc_r+0x20>
 800c89e:	f7ff ff49 	bl	800c734 <_free_r>
 800c8a2:	4625      	mov	r5, r4
 800c8a4:	4628      	mov	r0, r5
 800c8a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8a8:	f000 f830 	bl	800c90c <_malloc_usable_size_r>
 800c8ac:	42a0      	cmp	r0, r4
 800c8ae:	d20f      	bcs.n	800c8d0 <_realloc_r+0x48>
 800c8b0:	4621      	mov	r1, r4
 800c8b2:	4638      	mov	r0, r7
 800c8b4:	f7ff ff8e 	bl	800c7d4 <_malloc_r>
 800c8b8:	4605      	mov	r5, r0
 800c8ba:	2800      	cmp	r0, #0
 800c8bc:	d0f2      	beq.n	800c8a4 <_realloc_r+0x1c>
 800c8be:	4631      	mov	r1, r6
 800c8c0:	4622      	mov	r2, r4
 800c8c2:	f7ff fbef 	bl	800c0a4 <memcpy>
 800c8c6:	4631      	mov	r1, r6
 800c8c8:	4638      	mov	r0, r7
 800c8ca:	f7ff ff33 	bl	800c734 <_free_r>
 800c8ce:	e7e9      	b.n	800c8a4 <_realloc_r+0x1c>
 800c8d0:	4635      	mov	r5, r6
 800c8d2:	e7e7      	b.n	800c8a4 <_realloc_r+0x1c>

0800c8d4 <_sbrk_r>:
 800c8d4:	b538      	push	{r3, r4, r5, lr}
 800c8d6:	4d06      	ldr	r5, [pc, #24]	; (800c8f0 <_sbrk_r+0x1c>)
 800c8d8:	2300      	movs	r3, #0
 800c8da:	4604      	mov	r4, r0
 800c8dc:	4608      	mov	r0, r1
 800c8de:	602b      	str	r3, [r5, #0]
 800c8e0:	f7f6 fabc 	bl	8002e5c <_sbrk>
 800c8e4:	1c43      	adds	r3, r0, #1
 800c8e6:	d102      	bne.n	800c8ee <_sbrk_r+0x1a>
 800c8e8:	682b      	ldr	r3, [r5, #0]
 800c8ea:	b103      	cbz	r3, 800c8ee <_sbrk_r+0x1a>
 800c8ec:	6023      	str	r3, [r4, #0]
 800c8ee:	bd38      	pop	{r3, r4, r5, pc}
 800c8f0:	24002bfc 	.word	0x24002bfc

0800c8f4 <__malloc_lock>:
 800c8f4:	4801      	ldr	r0, [pc, #4]	; (800c8fc <__malloc_lock+0x8>)
 800c8f6:	f000 b811 	b.w	800c91c <__retarget_lock_acquire_recursive>
 800c8fa:	bf00      	nop
 800c8fc:	24002c04 	.word	0x24002c04

0800c900 <__malloc_unlock>:
 800c900:	4801      	ldr	r0, [pc, #4]	; (800c908 <__malloc_unlock+0x8>)
 800c902:	f000 b80c 	b.w	800c91e <__retarget_lock_release_recursive>
 800c906:	bf00      	nop
 800c908:	24002c04 	.word	0x24002c04

0800c90c <_malloc_usable_size_r>:
 800c90c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c910:	1f18      	subs	r0, r3, #4
 800c912:	2b00      	cmp	r3, #0
 800c914:	bfbc      	itt	lt
 800c916:	580b      	ldrlt	r3, [r1, r0]
 800c918:	18c0      	addlt	r0, r0, r3
 800c91a:	4770      	bx	lr

0800c91c <__retarget_lock_acquire_recursive>:
 800c91c:	4770      	bx	lr

0800c91e <__retarget_lock_release_recursive>:
 800c91e:	4770      	bx	lr

0800c920 <_init>:
 800c920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c922:	bf00      	nop
 800c924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c926:	bc08      	pop	{r3}
 800c928:	469e      	mov	lr, r3
 800c92a:	4770      	bx	lr

0800c92c <_fini>:
 800c92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c92e:	bf00      	nop
 800c930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c932:	bc08      	pop	{r3}
 800c934:	469e      	mov	lr, r3
 800c936:	4770      	bx	lr
