
Askhsh_12_v1_8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bce8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000840  0800bf88  0800bf88  0001bf88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c7c8  0800c7c8  0001c7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c7d0  0800c7d0  0001c7d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c7d4  0800c7d4  0001c7d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  24000000  0800c7d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003cb4  24000088  0800c860  00020088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24003d3c  0800c860  00023d3c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 10 .debug_info   000312ec  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004801  00000000  00000000  000513a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a58  00000000  00000000  00055ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000018e8  00000000  00000000  00057600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ed9b  00000000  00000000  00058ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021946  00000000  00000000  00097c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017bafe  00000000  00000000  000b95c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002350c7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000075e0  00000000  00000000  0023511c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bf70 	.word	0x0800bf70

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	0800bf70 	.word	0x0800bf70

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <delayUS_DWT>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void delayUS_DWT(volatile uint32_t microseconds)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000690:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <delayUS_DWT+0x40>)
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000696:	f005 fe77 	bl	8006388 <HAL_RCC_GetHCLKFreq>
 800069a:	4603      	mov	r3, r0
 800069c:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <delayUS_DWT+0x44>)
 800069e:	fba2 2303 	umull	r2, r3, r2, r3
 80006a2:	0c9b      	lsrs	r3, r3, #18
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	fb02 f303 	mul.w	r3, r2, r3
 80006aa:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80006ac:	bf00      	nop
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <delayUS_DWT+0x40>)
 80006b0:	685a      	ldr	r2, [r3, #4]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	1ad2      	subs	r2, r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d3f8      	bcc.n	80006ae <delayUS_DWT+0x26>
}
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	e0001000 	.word	0xe0001000
 80006cc:	431bde83 	.word	0x431bde83

080006d0 <writeSDA>:
#define HEX2BCD(v)	((v) % 10 + (v) / 10 * 16)
#define BCD2HEX(v)	((v) % 16 + (v) / 16 * 10)


// SDA Write(output) Mode
static void writeSDA(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SDA;
 80006d6:	2301      	movs	r3, #1
 80006d8:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80006de:	2302      	movs	r3, #2
 80006e0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4619      	mov	r1, r3
 80006e6:	4803      	ldr	r0, [pc, #12]	; (80006f4 <writeSDA+0x24>)
 80006e8:	f003 fed6 	bl	8004498 <HAL_GPIO_Init>
	
}
 80006ec:	bf00      	nop
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	58021400 	.word	0x58021400

080006f8 <readSDA>:


// SDA Read(input) Mode
static void readSDA(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SDA;
 80006fe:	2301      	movs	r3, #1
 8000700:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_INPUT;
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8000706:	2302      	movs	r3, #2
 8000708:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800070a:	2302      	movs	r3, #2
 800070c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);	
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	4619      	mov	r1, r3
 8000712:	4803      	ldr	r0, [pc, #12]	; (8000720 <readSDA+0x28>)
 8000714:	f003 fec0 	bl	8004498 <HAL_GPIO_Init>
}
 8000718:	bf00      	nop
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	58021400 	.word	0x58021400

08000724 <DS1302_SendCmd>:


/* Отправка адреса или команды */
static void DS1302_SendCmd(uint8_t cmd) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i ++) 
 800072e:	2300      	movs	r3, #0
 8000730:	73fb      	strb	r3, [r7, #15]
 8000732:	e01e      	b.n	8000772 <DS1302_SendCmd+0x4e>
	{	
		//		DS1302_SDA = (bit)(addr & 1);
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA, (cmd & 1) ?  GPIO_PIN_SET :  GPIO_PIN_RESET);
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	461a      	mov	r2, r3
 800073e:	2101      	movs	r1, #1
 8000740:	4810      	ldr	r0, [pc, #64]	; (8000784 <DS1302_SendCmd+0x60>)
 8000742:	f004 f871 	bl	8004828 <HAL_GPIO_WritePin>
		//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	2102      	movs	r1, #2
 800074a:	480e      	ldr	r0, [pc, #56]	; (8000784 <DS1302_SendCmd+0x60>)
 800074c:	f004 f86c 	bl	8004828 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff ff99 	bl	8000688 <delayUS_DWT>
		//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2102      	movs	r1, #2
 800075a:	480a      	ldr	r0, [pc, #40]	; (8000784 <DS1302_SendCmd+0x60>)
 800075c:	f004 f864 	bl	8004828 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 8000760:	2001      	movs	r0, #1
 8000762:	f7ff ff91 	bl	8000688 <delayUS_DWT>
		cmd >>= 1;
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	085b      	lsrs	r3, r3, #1
 800076a:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i ++) 
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	3301      	adds	r3, #1
 8000770:	73fb      	strb	r3, [r7, #15]
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	2b07      	cmp	r3, #7
 8000776:	d9dd      	bls.n	8000734 <DS1302_SendCmd+0x10>
	}
}
 8000778:	bf00      	nop
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	58021400 	.word	0x58021400

08000788 <DS1302_WriteByte>:


/* Прочитать байт по адресу 'addr' */
static void DS1302_WriteByte(uint8_t addr, uint8_t d)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	460a      	mov	r2, r1
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	4613      	mov	r3, r2
 8000796:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	//	DS1302_RST = 1;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_SET);	
 8000798:	2201      	movs	r2, #1
 800079a:	2104      	movs	r1, #4
 800079c:	481c      	ldr	r0, [pc, #112]	; (8000810 <DS1302_WriteByte+0x88>)
 800079e:	f004 f843 	bl	8004828 <HAL_GPIO_WritePin>
	
	//addr = addr & 0xFE;
	DS1302_SendCmd(addr);	// Отправка адреса
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ffbd 	bl	8000724 <DS1302_SendCmd>
	
	for (i = 0; i < 8; i ++) 
 80007aa:	2300      	movs	r3, #0
 80007ac:	73fb      	strb	r3, [r7, #15]
 80007ae:	e01e      	b.n	80007ee <DS1302_WriteByte+0x66>
	{
		//		DS1302_SDA = (bit)(d & 1);
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA, (d & 1) ?  GPIO_PIN_SET :  GPIO_PIN_RESET);
 80007b0:	79bb      	ldrb	r3, [r7, #6]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	461a      	mov	r2, r3
 80007ba:	2101      	movs	r1, #1
 80007bc:	4814      	ldr	r0, [pc, #80]	; (8000810 <DS1302_WriteByte+0x88>)
 80007be:	f004 f833 	bl	8004828 <HAL_GPIO_WritePin>
		//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	2102      	movs	r1, #2
 80007c6:	4812      	ldr	r0, [pc, #72]	; (8000810 <DS1302_WriteByte+0x88>)
 80007c8:	f004 f82e 	bl	8004828 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 80007cc:	2001      	movs	r0, #1
 80007ce:	f7ff ff5b 	bl	8000688 <delayUS_DWT>
		//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2102      	movs	r1, #2
 80007d6:	480e      	ldr	r0, [pc, #56]	; (8000810 <DS1302_WriteByte+0x88>)
 80007d8:	f004 f826 	bl	8004828 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 80007dc:	2001      	movs	r0, #1
 80007de:	f7ff ff53 	bl	8000688 <delayUS_DWT>
		d >>= 1;
 80007e2:	79bb      	ldrb	r3, [r7, #6]
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	71bb      	strb	r3, [r7, #6]
	for (i = 0; i < 8; i ++) 
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	3301      	adds	r3, #1
 80007ec:	73fb      	strb	r3, [r7, #15]
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2b07      	cmp	r3, #7
 80007f2:	d9dd      	bls.n	80007b0 <DS1302_WriteByte+0x28>
	}
	
	//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2104      	movs	r1, #4
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <DS1302_WriteByte+0x88>)
 80007fa:	f004 f815 	bl	8004828 <HAL_GPIO_WritePin>
	//	DS1302_SDA = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA,  GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2101      	movs	r1, #1
 8000802:	4803      	ldr	r0, [pc, #12]	; (8000810 <DS1302_WriteByte+0x88>)
 8000804:	f004 f810 	bl	8004828 <HAL_GPIO_WritePin>
}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	58021400 	.word	0x58021400

08000814 <DS1302_ReadByte>:
}


/* Reads a byte from addr */
static uint8_t DS1302_ReadByte(uint8_t addr)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t temp = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	73bb      	strb	r3, [r7, #14]

	//	DS1302_RST = 1;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_SET);	
 8000822:	2201      	movs	r2, #1
 8000824:	2104      	movs	r1, #4
 8000826:	4822      	ldr	r0, [pc, #136]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000828:	f003 fffe 	bl	8004828 <HAL_GPIO_WritePin>
	addr = addr | 0x01; 	// Generate Read Address
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	71fb      	strb	r3, [r7, #7]

	DS1302_SendCmd(addr);	// Sends address
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff74 	bl	8000724 <DS1302_SendCmd>
	
	readSDA();
 800083c:	f7ff ff5c 	bl	80006f8 <readSDA>
	for (i = 0; i < 8; i ++) 
 8000840:	2300      	movs	r3, #0
 8000842:	73fb      	strb	r3, [r7, #15]
 8000844:	e020      	b.n	8000888 <DS1302_ReadByte+0x74>
	{
		temp >>= 1;
 8000846:	7bbb      	ldrb	r3, [r7, #14]
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	73bb      	strb	r3, [r7, #14]
		//		if(DS1302_SDA)
		if(HAL_GPIO_ReadPin(DS1302_GPIO, DS1302_SDA))
 800084c:	2101      	movs	r1, #1
 800084e:	4818      	ldr	r0, [pc, #96]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000850:	f003 ffd2 	bl	80047f8 <HAL_GPIO_ReadPin>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d003      	beq.n	8000862 <DS1302_ReadByte+0x4e>
			temp |= 0x80;
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000860:	73bb      	strb	r3, [r7, #14]
		//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	2102      	movs	r1, #2
 8000866:	4812      	ldr	r0, [pc, #72]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000868:	f003 ffde 	bl	8004828 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff ff0b 	bl	8000688 <delayUS_DWT>
		//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2102      	movs	r1, #2
 8000876:	480e      	ldr	r0, [pc, #56]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000878:	f003 ffd6 	bl	8004828 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 800087c:	2001      	movs	r0, #1
 800087e:	f7ff ff03 	bl	8000688 <delayUS_DWT>
	for (i = 0; i < 8; i ++) 
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	3301      	adds	r3, #1
 8000886:	73fb      	strb	r3, [r7, #15]
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	2b07      	cmp	r3, #7
 800088c:	d9db      	bls.n	8000846 <DS1302_ReadByte+0x32>
	}
	writeSDA();
 800088e:	f7ff ff1f 	bl	80006d0 <writeSDA>

	//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2104      	movs	r1, #4
 8000896:	4806      	ldr	r0, [pc, #24]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000898:	f003 ffc6 	bl	8004828 <HAL_GPIO_WritePin>
	//	DS1302_SDA = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA,  GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2101      	movs	r1, #1
 80008a0:	4803      	ldr	r0, [pc, #12]	; (80008b0 <DS1302_ReadByte+0x9c>)
 80008a2:	f003 ffc1 	bl	8004828 <HAL_GPIO_WritePin>
	return temp;
 80008a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	58021400 	.word	0x58021400

080008b4 <DS1302_WriteTime>:
}


/* Writes time byte by byte from 'buf' */
void DS1302_WriteTime(uint8_t *buf) 
{	
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	DS1302_WriteByte(DS1302_CONTROL, 0x00);			// Отключить защиту от записи
 80008bc:	2100      	movs	r1, #0
 80008be:	208e      	movs	r0, #142	; 0x8e
 80008c0:	f7ff ff62 	bl	8000788 <DS1302_WriteByte>
	delayUS_DWT(1);
 80008c4:	2001      	movs	r0, #1
 80008c6:	f7ff fedf 	bl	8000688 <delayUS_DWT>
	DS1302_WriteByte(DS1302_SEC, 0x80);
 80008ca:	2180      	movs	r1, #128	; 0x80
 80008cc:	2080      	movs	r0, #128	; 0x80
 80008ce:	f7ff ff5b 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_YEAR, HEX2BCD(buf[1]));
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3301      	adds	r3, #1
 80008d6:	781a      	ldrb	r2, [r3, #0]
 80008d8:	4b69      	ldr	r3, [pc, #420]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80008da:	fba3 1302 	umull	r1, r3, r3, r2
 80008de:	08d9      	lsrs	r1, r3, #3
 80008e0:	460b      	mov	r3, r1
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	440b      	add	r3, r1
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3301      	adds	r3, #1
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	4963      	ldr	r1, [pc, #396]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80008f4:	fba1 1303 	umull	r1, r3, r1, r3
 80008f8:	08db      	lsrs	r3, r3, #3
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	011b      	lsls	r3, r3, #4
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	4413      	add	r3, r2
 8000902:	b2db      	uxtb	r3, r3
 8000904:	4619      	mov	r1, r3
 8000906:	208c      	movs	r0, #140	; 0x8c
 8000908:	f7ff ff3e 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_MONTH, HEX2BCD(buf[2]));
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3302      	adds	r3, #2
 8000910:	781a      	ldrb	r2, [r3, #0]
 8000912:	4b5b      	ldr	r3, [pc, #364]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000914:	fba3 1302 	umull	r1, r3, r3, r2
 8000918:	08d9      	lsrs	r1, r3, #3
 800091a:	460b      	mov	r3, r1
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	440b      	add	r3, r1
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	b2da      	uxtb	r2, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3302      	adds	r3, #2
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4954      	ldr	r1, [pc, #336]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 800092e:	fba1 1303 	umull	r1, r3, r1, r3
 8000932:	08db      	lsrs	r3, r3, #3
 8000934:	b2db      	uxtb	r3, r3
 8000936:	011b      	lsls	r3, r3, #4
 8000938:	b2db      	uxtb	r3, r3
 800093a:	4413      	add	r3, r2
 800093c:	b2db      	uxtb	r3, r3
 800093e:	4619      	mov	r1, r3
 8000940:	2088      	movs	r0, #136	; 0x88
 8000942:	f7ff ff21 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_DATE, HEX2BCD(buf[3]));
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3303      	adds	r3, #3
 800094a:	781a      	ldrb	r2, [r3, #0]
 800094c:	4b4c      	ldr	r3, [pc, #304]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 800094e:	fba3 1302 	umull	r1, r3, r3, r2
 8000952:	08d9      	lsrs	r1, r3, #3
 8000954:	460b      	mov	r3, r1
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	440b      	add	r3, r1
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	b2da      	uxtb	r2, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3303      	adds	r3, #3
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	4946      	ldr	r1, [pc, #280]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000968:	fba1 1303 	umull	r1, r3, r1, r3
 800096c:	08db      	lsrs	r3, r3, #3
 800096e:	b2db      	uxtb	r3, r3
 8000970:	011b      	lsls	r3, r3, #4
 8000972:	b2db      	uxtb	r3, r3
 8000974:	4413      	add	r3, r2
 8000976:	b2db      	uxtb	r3, r3
 8000978:	4619      	mov	r1, r3
 800097a:	2086      	movs	r0, #134	; 0x86
 800097c:	f7ff ff04 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_HOUR, HEX2BCD(buf[4]));
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3304      	adds	r3, #4
 8000984:	781a      	ldrb	r2, [r3, #0]
 8000986:	4b3e      	ldr	r3, [pc, #248]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000988:	fba3 1302 	umull	r1, r3, r3, r2
 800098c:	08d9      	lsrs	r1, r3, #3
 800098e:	460b      	mov	r3, r1
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	440b      	add	r3, r1
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	b2da      	uxtb	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	3304      	adds	r3, #4
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	4937      	ldr	r1, [pc, #220]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80009a2:	fba1 1303 	umull	r1, r3, r1, r3
 80009a6:	08db      	lsrs	r3, r3, #3
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	011b      	lsls	r3, r3, #4
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	4413      	add	r3, r2
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	4619      	mov	r1, r3
 80009b4:	2084      	movs	r0, #132	; 0x84
 80009b6:	f7ff fee7 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_MIN, HEX2BCD(buf[5]));
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	3305      	adds	r3, #5
 80009be:	781a      	ldrb	r2, [r3, #0]
 80009c0:	4b2f      	ldr	r3, [pc, #188]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80009c2:	fba3 1302 	umull	r1, r3, r3, r2
 80009c6:	08d9      	lsrs	r1, r3, #3
 80009c8:	460b      	mov	r3, r1
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	440b      	add	r3, r1
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3305      	adds	r3, #5
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	4929      	ldr	r1, [pc, #164]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80009dc:	fba1 1303 	umull	r1, r3, r1, r3
 80009e0:	08db      	lsrs	r3, r3, #3
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	011b      	lsls	r3, r3, #4
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	4413      	add	r3, r2
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4619      	mov	r1, r3
 80009ee:	2082      	movs	r0, #130	; 0x82
 80009f0:	f7ff feca 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_SEC, HEX2BCD(buf[6]));
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3306      	adds	r3, #6
 80009f8:	781a      	ldrb	r2, [r3, #0]
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80009fc:	fba3 1302 	umull	r1, r3, r3, r2
 8000a00:	08d9      	lsrs	r1, r3, #3
 8000a02:	460b      	mov	r3, r1
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	440b      	add	r3, r1
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3306      	adds	r3, #6
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	491a      	ldr	r1, [pc, #104]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000a16:	fba1 1303 	umull	r1, r3, r1, r3
 8000a1a:	08db      	lsrs	r3, r3, #3
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	011b      	lsls	r3, r3, #4
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	4413      	add	r3, r2
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	4619      	mov	r1, r3
 8000a28:	2080      	movs	r0, #128	; 0x80
 8000a2a:	f7ff fead 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_DAY, HEX2BCD(buf[7]));
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	3307      	adds	r3, #7
 8000a32:	781a      	ldrb	r2, [r3, #0]
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000a36:	fba3 1302 	umull	r1, r3, r3, r2
 8000a3a:	08d9      	lsrs	r1, r3, #3
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	440b      	add	r3, r1
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3307      	adds	r3, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	490c      	ldr	r1, [pc, #48]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000a50:	fba1 1303 	umull	r1, r3, r1, r3
 8000a54:	08db      	lsrs	r3, r3, #3
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	011b      	lsls	r3, r3, #4
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	4413      	add	r3, r2
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	4619      	mov	r1, r3
 8000a62:	208a      	movs	r0, #138	; 0x8a
 8000a64:	f7ff fe90 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_CONTROL, 0x80);			// Включить защиту от записи
 8000a68:	2180      	movs	r1, #128	; 0x80
 8000a6a:	208e      	movs	r0, #142	; 0x8e
 8000a6c:	f7ff fe8c 	bl	8000788 <DS1302_WriteByte>
	delayUS_DWT(1);
 8000a70:	2001      	movs	r0, #1
 8000a72:	f7ff fe09 	bl	8000688 <delayUS_DWT>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	cccccccd 	.word	0xcccccccd

08000a84 <DS1302_ReadTime>:


/* Reads time byte by byte to 'buf' */
void DS1302_ReadTime(uint8_t *buf)  
{ 
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
   	uint8_t tmp;
	
	tmp = DS1302_ReadByte(DS1302_YEAR); 	
 8000a8c:	208c      	movs	r0, #140	; 0x8c
 8000a8e:	f7ff fec1 	bl	8000814 <DS1302_ReadByte>
 8000a92:	4603      	mov	r3, r0
 8000a94:	73fb      	strb	r3, [r7, #15]
	buf[1] = BCD2HEX(tmp);		 
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
 8000a98:	f003 030f 	and.w	r3, r3, #15
 8000a9c:	b2d9      	uxtb	r1, r3
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
 8000aa0:	091b      	lsrs	r3, r3, #4
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	0092      	lsls	r2, r2, #2
 8000aa8:	4413      	add	r3, r2
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	440a      	add	r2, r1
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_MONTH); 	
 8000ab8:	2088      	movs	r0, #136	; 0x88
 8000aba:	f7ff feab 	bl	8000814 <DS1302_ReadByte>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	73fb      	strb	r3, [r7, #15]
	buf[2] = BCD2HEX(tmp);	 
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	f003 030f 	and.w	r3, r3, #15
 8000ac8:	b2d9      	uxtb	r1, r3
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	091b      	lsrs	r3, r3, #4
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	0092      	lsls	r2, r2, #2
 8000ad4:	4413      	add	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	3302      	adds	r3, #2
 8000ade:	440a      	add	r2, r1
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_DATE); 	
 8000ae4:	2086      	movs	r0, #134	; 0x86
 8000ae6:	f7ff fe95 	bl	8000814 <DS1302_ReadByte>
 8000aea:	4603      	mov	r3, r0
 8000aec:	73fb      	strb	r3, [r7, #15]
	buf[3] = BCD2HEX(tmp);
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	f003 030f 	and.w	r3, r3, #15
 8000af4:	b2d9      	uxtb	r1, r3
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
 8000af8:	091b      	lsrs	r3, r3, #4
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	461a      	mov	r2, r3
 8000afe:	0092      	lsls	r2, r2, #2
 8000b00:	4413      	add	r3, r2
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3303      	adds	r3, #3
 8000b0a:	440a      	add	r2, r1
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_HOUR);		
 8000b10:	2084      	movs	r0, #132	; 0x84
 8000b12:	f7ff fe7f 	bl	8000814 <DS1302_ReadByte>
 8000b16:	4603      	mov	r3, r0
 8000b18:	73fb      	strb	r3, [r7, #15]
	buf[4] = BCD2HEX(tmp);
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
 8000b1c:	f003 030f 	and.w	r3, r3, #15
 8000b20:	b2d9      	uxtb	r1, r3
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	091b      	lsrs	r3, r3, #4
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	461a      	mov	r2, r3
 8000b2a:	0092      	lsls	r2, r2, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3304      	adds	r3, #4
 8000b36:	440a      	add	r2, r1
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_MIN);		
 8000b3c:	2082      	movs	r0, #130	; 0x82
 8000b3e:	f7ff fe69 	bl	8000814 <DS1302_ReadByte>
 8000b42:	4603      	mov	r3, r0
 8000b44:	73fb      	strb	r3, [r7, #15]
	buf[5] = BCD2HEX(tmp); 
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
 8000b48:	f003 030f 	and.w	r3, r3, #15
 8000b4c:	b2d9      	uxtb	r1, r3
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	091b      	lsrs	r3, r3, #4
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	461a      	mov	r2, r3
 8000b56:	0092      	lsls	r2, r2, #2
 8000b58:	4413      	add	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	3305      	adds	r3, #5
 8000b62:	440a      	add	r2, r1
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte((DS1302_SEC)) & 0x7F;
 8000b68:	2080      	movs	r0, #128	; 0x80
 8000b6a:	f7ff fe53 	bl	8000814 <DS1302_ReadByte>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b74:	73fb      	strb	r3, [r7, #15]
	buf[6] = BCD2HEX(tmp);
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	f003 030f 	and.w	r3, r3, #15
 8000b7c:	b2d9      	uxtb	r1, r3
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	091b      	lsrs	r3, r3, #4
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	461a      	mov	r2, r3
 8000b86:	0092      	lsls	r2, r2, #2
 8000b88:	4413      	add	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3306      	adds	r3, #6
 8000b92:	440a      	add	r2, r1
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_DAY);		
 8000b98:	208a      	movs	r0, #138	; 0x8a
 8000b9a:	f7ff fe3b 	bl	8000814 <DS1302_ReadByte>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	73fb      	strb	r3, [r7, #15]
	buf[7] = BCD2HEX(tmp);
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	f003 030f 	and.w	r3, r3, #15
 8000ba8:	b2d9      	uxtb	r1, r3
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	091b      	lsrs	r3, r3, #4
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	0092      	lsls	r2, r2, #2
 8000bb4:	4413      	add	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3307      	adds	r3, #7
 8000bbe:	440a      	add	r2, r1
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	701a      	strb	r2, [r3, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <DS1302_Init>:


/* Инициализация */
void DS1302_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
	DWT_Delay_Init(); //Инициализация таймера для отсчета милисекунд
 8000bd2:	f000 f849 	bl	8000c68 <DWT_Delay_Init>

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SCLK | DS1302_SDA | DS1302_RST;
 8000bd6:	2307      	movs	r3, #7
 8000bd8:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bde:	2302      	movs	r3, #2
 8000be0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	480d      	ldr	r0, [pc, #52]	; (8000c1c <DS1302_Init+0x50>)
 8000be8:	f003 fc56 	bl	8004498 <HAL_GPIO_Init>
	
	DS1302_WriteByte(DS1302_CHARGER, 0x00);			// Отключить Trickle Charger
 8000bec:	2100      	movs	r1, #0
 8000bee:	2090      	movs	r0, #144	; 0x90
 8000bf0:	f7ff fdca 	bl	8000788 <DS1302_WriteByte>
		
	//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2104      	movs	r1, #4
 8000bf8:	4808      	ldr	r0, [pc, #32]	; (8000c1c <DS1302_Init+0x50>)
 8000bfa:	f003 fe15 	bl	8004828 <HAL_GPIO_WritePin>
	//	DS1302_SCK = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2102      	movs	r1, #2
 8000c02:	4806      	ldr	r0, [pc, #24]	; (8000c1c <DS1302_Init+0x50>)
 8000c04:	f003 fe10 	bl	8004828 <HAL_GPIO_WritePin>

	delayUS_DWT(10); // Меньше 10 мкс делать не стоит.
 8000c08:	200a      	movs	r0, #10
 8000c0a:	f7ff fd3d 	bl	8000688 <delayUS_DWT>
	DS1302_ClockStart();
 8000c0e:	f000 f807 	bl	8000c20 <DS1302_ClockStart>
}
 8000c12:	bf00      	nop
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	58021400 	.word	0x58021400

08000c20 <DS1302_ClockStart>:

//Запуск часов.
//Изначально DS1302 в режиме HALT (остановлена, режим энергосбережения).
//Чтоб начался отсчет времени необходимо однократно выполнить эту функцию.
void DS1302_ClockStart(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
	uint8_t buf = 0x00;
 8000c26:	2300      	movs	r3, #0
 8000c28:	71fb      	strb	r3, [r7, #7]

	DS1302_WriteByte(DS1302_CONTROL, 0x00);			// Отключить защиту от записи
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	208e      	movs	r0, #142	; 0x8e
 8000c2e:	f7ff fdab 	bl	8000788 <DS1302_WriteByte>
	delayUS_DWT(1);
 8000c32:	2001      	movs	r0, #1
 8000c34:	f7ff fd28 	bl	8000688 <delayUS_DWT>

	buf = DS1302_ReadByte(DS1302_SEC) & 0x7F;		// Записываем в 8 бит 0. При этом сохраняем установленное значение секунд.
 8000c38:	2080      	movs	r0, #128	; 0x80
 8000c3a:	f7ff fdeb 	bl	8000814 <DS1302_ReadByte>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c44:	71fb      	strb	r3, [r7, #7]
	DS1302_WriteByte(DS1302_SEC, buf);
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	2080      	movs	r0, #128	; 0x80
 8000c4c:	f7ff fd9c 	bl	8000788 <DS1302_WriteByte>

	DS1302_WriteByte(DS1302_CONTROL, 0x80);			// Включить защиту от записи
 8000c50:	2180      	movs	r1, #128	; 0x80
 8000c52:	208e      	movs	r0, #142	; 0x8e
 8000c54:	f7ff fd98 	bl	8000788 <DS1302_WriteByte>
	delayUS_DWT(1);
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f7ff fd15 	bl	8000688 <delayUS_DWT>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <DWT_Delay_Init+0x58>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <DWT_Delay_Init+0x58>)
 8000c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c76:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <DWT_Delay_Init+0x58>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	4a10      	ldr	r2, [pc, #64]	; (8000cc0 <DWT_Delay_Init+0x58>)
 8000c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c82:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c8a:	f023 0301 	bic.w	r3, r3, #1
 8000c8e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000ca2:	bf00      	nop
     __ASM volatile ("NOP");
 8000ca4:	bf00      	nop
     __ASM volatile ("NOP");
 8000ca6:	bf00      	nop

     /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e000      	b.n	8000cb6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000cb4:	2301      	movs	r3, #1
  }
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000edf0 	.word	0xe000edf0
 8000cc4:	e0001000 	.word	0xe0001000

08000cc8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM5)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0c      	ldr	r2, [pc, #48]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d112      	bne.n	8000d00 <HAL_TIM_PeriodElapsedCallback+0x38>
  {
	  counterclk++;
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000ce2:	6013      	str	r3, [r2, #0]
	  if(counterclk>setTiming1)
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d907      	bls.n	8000d00 <HAL_TIM_PeriodElapsedCallback+0x38>
	  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 8000cf0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cf4:	4807      	ldr	r0, [pc, #28]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000cf6:	f003 fdb0 	bl	800485a <HAL_GPIO_TogglePin>
	  counterclk=0;
 8000cfa:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
	  }
    // Code to execute every 1 second interval
    // Place your desired actions here
  }
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40000c00 	.word	0x40000c00
 8000d0c:	240000bc 	.word	0x240000bc
 8000d10:	24000000 	.word	0x24000000
 8000d14:	58020400 	.word	0x58020400

08000d18 <ADC_CH0_SELECT>:




void ADC_CH0_SELECT()
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
 8000d2c:	615a      	str	r2, [r3, #20]
 8000d2e:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_0;
 8000d30:	2301      	movs	r3, #1
 8000d32:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d34:	2306      	movs	r3, #6
 8000d36:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d3c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d40:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d42:	2304      	movs	r3, #4
 8000d44:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4806      	ldr	r0, [pc, #24]	; (8000d68 <ADC_CH0_SELECT+0x50>)
 8000d50:	f002 fc92 	bl	8003678 <HAL_ADC_ConfigChannel>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <ADC_CH0_SELECT+0x46>
	  {
	    Error_Handler();
 8000d5a:	f000 ff8b 	bl	8001c74 <Error_Handler>
	  }
}
 8000d5e:	bf00      	nop
 8000d60:	3720      	adds	r7, #32
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	24003440 	.word	0x24003440

08000d6c <ADC_CH1_SELECT>:
void ADC_CH1_SELECT()
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
 8000d80:	615a      	str	r2, [r3, #20]
 8000d82:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_1;
 8000d84:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <ADC_CH1_SELECT+0x50>)
 8000d86:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d88:	2306      	movs	r3, #6
 8000d8a:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d90:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d94:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d96:	2304      	movs	r3, #4
 8000d98:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	4619      	mov	r1, r3
 8000da2:	4807      	ldr	r0, [pc, #28]	; (8000dc0 <ADC_CH1_SELECT+0x54>)
 8000da4:	f002 fc68 	bl	8003678 <HAL_ADC_ConfigChannel>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <ADC_CH1_SELECT+0x46>
	  {
	    Error_Handler();
 8000dae:	f000 ff61 	bl	8001c74 <Error_Handler>
	  }
}
 8000db2:	bf00      	nop
 8000db4:	3720      	adds	r7, #32
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	04300002 	.word	0x04300002
 8000dc0:	24003440 	.word	0x24003440

08000dc4 <ADC_CH4_SELECT>:
void ADC_CH4_SELECT()
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
 8000dd8:	615a      	str	r2, [r3, #20]
 8000dda:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_4;
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <ADC_CH4_SELECT+0x50>)
 8000dde:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000de0:	2306      	movs	r3, #6
 8000de2:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000de4:	2301      	movs	r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000de8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000dec:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dee:	2304      	movs	r3, #4
 8000df0:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4807      	ldr	r0, [pc, #28]	; (8000e18 <ADC_CH4_SELECT+0x54>)
 8000dfc:	f002 fc3c 	bl	8003678 <HAL_ADC_ConfigChannel>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <ADC_CH4_SELECT+0x46>
	  {
	    Error_Handler();
 8000e06:	f000 ff35 	bl	8001c74 <Error_Handler>
	  }
}
 8000e0a:	bf00      	nop
 8000e0c:	3720      	adds	r7, #32
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	10c00010 	.word	0x10c00010
 8000e18:	24003440 	.word	0x24003440

08000e1c <ADC_CH6_SELECT>:
void ADC_CH6_SELECT()
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
 8000e30:	615a      	str	r2, [r3, #20]
 8000e32:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_6;
 8000e34:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <ADC_CH6_SELECT+0x50>)
 8000e36:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e38:	2306      	movs	r3, #6
 8000e3a:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e40:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e44:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e46:	2304      	movs	r3, #4
 8000e48:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	4619      	mov	r1, r3
 8000e52:	4807      	ldr	r0, [pc, #28]	; (8000e70 <ADC_CH6_SELECT+0x54>)
 8000e54:	f002 fc10 	bl	8003678 <HAL_ADC_ConfigChannel>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <ADC_CH6_SELECT+0x46>
	  {
	    Error_Handler();
 8000e5e:	f000 ff09 	bl	8001c74 <Error_Handler>
	  }
}
 8000e62:	bf00      	nop
 8000e64:	3720      	adds	r7, #32
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	19200040 	.word	0x19200040
 8000e70:	24003440 	.word	0x24003440

08000e74 <ADC_CH7_SELECT>:
void ADC_CH7_SELECT()
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
 8000e88:	615a      	str	r2, [r3, #20]
 8000e8a:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_7;
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <ADC_CH7_SELECT+0x50>)
 8000e8e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e90:	2306      	movs	r3, #6
 8000e92:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e94:	2301      	movs	r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e98:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e9c:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4807      	ldr	r0, [pc, #28]	; (8000ec8 <ADC_CH7_SELECT+0x54>)
 8000eac:	f002 fbe4 	bl	8003678 <HAL_ADC_ConfigChannel>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <ADC_CH7_SELECT+0x46>
	  {
	    Error_Handler();
 8000eb6:	f000 fedd 	bl	8001c74 <Error_Handler>
	  }
}
 8000eba:	bf00      	nop
 8000ebc:	3720      	adds	r7, #32
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	1d500080 	.word	0x1d500080
 8000ec8:	24003440 	.word	0x24003440

08000ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ecc:	b5b0      	push	{r4, r5, r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed2:	f001 fd27 	bl	8002924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed6:	f000 f9eb 	bl	80012b0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000eda:	f000 fa69 	bl	80013b0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ede:	f000 fd43 	bl	8001968 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000ee2:	f000 fcc3 	bl	800186c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ee6:	f000 fd0d 	bl	8001904 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000eea:	f000 fadf 	bl	80014ac <MX_I2C1_Init>
  MX_ADC3_Init();
 8000eee:	f000 fa7b 	bl	80013e8 <MX_ADC3_Init>
  MX_TIM1_Init();
 8000ef2:	f000 fb1b 	bl	800152c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000ef6:	f000 fb6d 	bl	80015d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000efa:	f000 fbbb 	bl	8001674 <MX_TIM4_Init>
  MX_TIM14_Init();
 8000efe:	f000 fc67 	bl	80017d0 <MX_TIM14_Init>
  MX_TIM5_Init();
 8000f02:	f000 fc0d 	bl	8001720 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000f06:	f000 ff0d 	bl	8001d24 <ssd1306_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 8000f0a:	48b2      	ldr	r0, [pc, #712]	; (80011d4 <main+0x308>)
 8000f0c:	f007 fc76 	bl	80087fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8000f10:	48b1      	ldr	r0, [pc, #708]	; (80011d8 <main+0x30c>)
 8000f12:	f007 fc73 	bl	80087fc <HAL_TIM_Base_Start_IT>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f16:	201d      	movs	r0, #29
 8000f18:	f003 faa3 	bl	8004462 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000f1c:	213c      	movs	r1, #60	; 0x3c
 8000f1e:	48af      	ldr	r0, [pc, #700]	; (80011dc <main+0x310>)
 8000f20:	f007 fefa 	bl	8008d18 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8000f24:	2100      	movs	r1, #0
 8000f26:	48ae      	ldr	r0, [pc, #696]	; (80011e0 <main+0x314>)
 8000f28:	f007 fd42 	bl	80089b0 <HAL_TIM_PWM_Start>
  DS1302_Init();
 8000f2c:	f7ff fe4e 	bl	8000bcc <DS1302_Init>
  HAL_Delay(200);
 8000f30:	20c8      	movs	r0, #200	; 0xc8
 8000f32:	f001 fd89 	bl	8002a48 <HAL_Delay>


  DS1302_WriteTime(time_to_set);
 8000f36:	48ab      	ldr	r0, [pc, #684]	; (80011e4 <main+0x318>)
 8000f38:	f7ff fcbc 	bl	80008b4 <DS1302_WriteTime>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(counter1>=20)
 8000f3c:	4baa      	ldr	r3, [pc, #680]	; (80011e8 <main+0x31c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b13      	cmp	r3, #19
 8000f42:	d902      	bls.n	8000f4a <main+0x7e>
	        {
	      	  counter1=0;
 8000f44:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <main+0x31c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
	        }
	  counter1++;
 8000f4a:	4ba7      	ldr	r3, [pc, #668]	; (80011e8 <main+0x31c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	4aa5      	ldr	r2, [pc, #660]	; (80011e8 <main+0x31c>)
 8000f52:	6013      	str	r3, [r2, #0]
	  DS1302_ReadTime(time);
 8000f54:	48a5      	ldr	r0, [pc, #660]	; (80011ec <main+0x320>)
 8000f56:	f7ff fd95 	bl	8000a84 <DS1302_ReadTime>
	  sprintf(timeBuffer,"\n\r %2d/%2d/%2d%2d:%2d:%2d \n\r",time[1],time[2],time[3],time[4],time[5],time[6]);
 8000f5a:	4ba4      	ldr	r3, [pc, #656]	; (80011ec <main+0x320>)
 8000f5c:	785b      	ldrb	r3, [r3, #1]
 8000f5e:	461c      	mov	r4, r3
 8000f60:	4ba2      	ldr	r3, [pc, #648]	; (80011ec <main+0x320>)
 8000f62:	789b      	ldrb	r3, [r3, #2]
 8000f64:	461d      	mov	r5, r3
 8000f66:	4ba1      	ldr	r3, [pc, #644]	; (80011ec <main+0x320>)
 8000f68:	78db      	ldrb	r3, [r3, #3]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	4b9f      	ldr	r3, [pc, #636]	; (80011ec <main+0x320>)
 8000f6e:	791b      	ldrb	r3, [r3, #4]
 8000f70:	4619      	mov	r1, r3
 8000f72:	4b9e      	ldr	r3, [pc, #632]	; (80011ec <main+0x320>)
 8000f74:	795b      	ldrb	r3, [r3, #5]
 8000f76:	4618      	mov	r0, r3
 8000f78:	4b9c      	ldr	r3, [pc, #624]	; (80011ec <main+0x320>)
 8000f7a:	799b      	ldrb	r3, [r3, #6]
 8000f7c:	9303      	str	r3, [sp, #12]
 8000f7e:	9002      	str	r0, [sp, #8]
 8000f80:	9101      	str	r1, [sp, #4]
 8000f82:	9200      	str	r2, [sp, #0]
 8000f84:	462b      	mov	r3, r5
 8000f86:	4622      	mov	r2, r4
 8000f88:	4999      	ldr	r1, [pc, #612]	; (80011f0 <main+0x324>)
 8000f8a:	489a      	ldr	r0, [pc, #616]	; (80011f4 <main+0x328>)
 8000f8c:	f00a fbe2 	bl	800b754 <siprintf>
	  strcpy(TimeArray[counter1], timeBuffer); // Copy the formatted time string to TimeArray
 8000f90:	4b95      	ldr	r3, [pc, #596]	; (80011e8 <main+0x31c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2264      	movs	r2, #100	; 0x64
 8000f96:	fb02 f303 	mul.w	r3, r2, r3
 8000f9a:	4a97      	ldr	r2, [pc, #604]	; (80011f8 <main+0x32c>)
 8000f9c:	4413      	add	r3, r2
 8000f9e:	4995      	ldr	r1, [pc, #596]	; (80011f4 <main+0x328>)
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f00a fbf7 	bl	800b794 <strcpy>

	  HAL_UART_Transmit(&huart3, (uint8_t*)timeBuffer, strlen(timeBuffer), HAL_MAX_DELAY);
 8000fa6:	4893      	ldr	r0, [pc, #588]	; (80011f4 <main+0x328>)
 8000fa8:	f7ff f99a 	bl	80002e0 <strlen>
 8000fac:	4603      	mov	r3, r0
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb4:	498f      	ldr	r1, [pc, #572]	; (80011f4 <main+0x328>)
 8000fb6:	4891      	ldr	r0, [pc, #580]	; (80011fc <main+0x330>)
 8000fb8:	f008 ffc0 	bl	8009f3c <HAL_UART_Transmit>
	  HAL_Delay(200);
 8000fbc:	20c8      	movs	r0, #200	; 0xc8
 8000fbe:	f001 fd43 	bl	8002a48 <HAL_Delay>

//      LED_DutyCycle = TIM4->CNT; //65536/tic*64

//      TIM14->CCR1 = LED_DutyCycle;

      sprintf(uartBuf, "Encoder count: %d\r\n", (int)TIM4->CNT);
 8000fc2:	4b8f      	ldr	r3, [pc, #572]	; (8001200 <main+0x334>)
 8000fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	498e      	ldr	r1, [pc, #568]	; (8001204 <main+0x338>)
 8000fca:	488f      	ldr	r0, [pc, #572]	; (8001208 <main+0x33c>)
 8000fcc:	f00a fbc2 	bl	800b754 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 8000fd0:	488d      	ldr	r0, [pc, #564]	; (8001208 <main+0x33c>)
 8000fd2:	f7ff f985 	bl	80002e0 <strlen>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	498a      	ldr	r1, [pc, #552]	; (8001208 <main+0x33c>)
 8000fe0:	4886      	ldr	r0, [pc, #536]	; (80011fc <main+0x330>)
 8000fe2:	f008 ffab 	bl	8009f3c <HAL_UART_Transmit>

      HAL_Delay(10);
 8000fe6:	200a      	movs	r0, #10
 8000fe8:	f001 fd2e 	bl	8002a48 <HAL_Delay>

      encoderReading = TIM4->CNT;  // Original reading
 8000fec:	4b84      	ldr	r3, [pc, #528]	; (8001200 <main+0x334>)
 8000fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff0:	4a86      	ldr	r2, [pc, #536]	; (800120c <main+0x340>)
 8000ff2:	6013      	str	r3, [r2, #0]

      // Scale the reading to a range of 1 second to 300 seconds
      scaledTime = MIN_TIME + ((encoderReading * (MAX_TIME - MIN_TIME)) / MAX_ENCODER_VALUE);
 8000ff4:	4b85      	ldr	r3, [pc, #532]	; (800120c <main+0x340>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f240 122b 	movw	r2, #299	; 0x12b
 8000ffc:	fb02 f303 	mul.w	r3, r2, r3
 8001000:	0a9b      	lsrs	r3, r3, #10
 8001002:	3301      	adds	r3, #1
 8001004:	4a82      	ldr	r2, [pc, #520]	; (8001210 <main+0x344>)
 8001006:	6013      	str	r3, [r2, #0]
      setTiming1=(scaledTime);
 8001008:	4b81      	ldr	r3, [pc, #516]	; (8001210 <main+0x344>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a81      	ldr	r2, [pc, #516]	; (8001214 <main+0x348>)
 800100e:	6013      	str	r3, [r2, #0]
      // Now scaledTime should be in the range of 1 second to 300 seconds
      char buffer[20];

      ssd1306_Fill(Black);
 8001010:	2000      	movs	r0, #0
 8001012:	f000 fef1 	bl	8001df8 <ssd1306_Fill>

      sprintf(buffer, "SetTime ADC:%ds\n", scaledTime);
 8001016:	4b7e      	ldr	r3, [pc, #504]	; (8001210 <main+0x344>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	497e      	ldr	r1, [pc, #504]	; (8001218 <main+0x34c>)
 800101e:	4618      	mov	r0, r3
 8001020:	f00a fb98 	bl	800b754 <siprintf>
      ssd1306_SetCursor(0,0); // Adjust these values according to where you want the text to start
 8001024:	2100      	movs	r1, #0
 8001026:	2000      	movs	r0, #0
 8001028:	f001 f834 	bl	8002094 <ssd1306_SetCursor>
      ssd1306_WriteString(buffer, Font_7x10, White); // Replace with your font and color choice
 800102c:	4a7b      	ldr	r2, [pc, #492]	; (800121c <main+0x350>)
 800102e:	1d38      	adds	r0, r7, #4
 8001030:	2301      	movs	r3, #1
 8001032:	ca06      	ldmia	r2, {r1, r2}
 8001034:	f001 f808 	bl	8002048 <ssd1306_WriteString>
      ssd1306_UpdateScreen();
 8001038:	f000 ff02 	bl	8001e40 <ssd1306_UpdateScreen>

      HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff f94e 	bl	80002e0 <strlen>
 8001044:	4603      	mov	r3, r0
 8001046:	b29a      	uxth	r2, r3
 8001048:	1d39      	adds	r1, r7, #4
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	486b      	ldr	r0, [pc, #428]	; (80011fc <main+0x330>)
 8001050:	f008 ff74 	bl	8009f3c <HAL_UART_Transmit>

      // ADC
      ADC_CH0_SELECT();
 8001054:	f7ff fe60 	bl	8000d18 <ADC_CH0_SELECT>
      HAL_ADC_Start(&hadc3);
 8001058:	4871      	ldr	r0, [pc, #452]	; (8001220 <main+0x354>)
 800105a:	f002 f90d 	bl	8003278 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc3, 100);
 800105e:	2164      	movs	r1, #100	; 0x64
 8001060:	486f      	ldr	r0, [pc, #444]	; (8001220 <main+0x354>)
 8001062:	f002 fa07 	bl	8003474 <HAL_ADC_PollForConversion>
      adcraw0 = HAL_ADC_GetValue(&hadc3);
 8001066:	486e      	ldr	r0, [pc, #440]	; (8001220 <main+0x354>)
 8001068:	f002 faf8 	bl	800365c <HAL_ADC_GetValue>
 800106c:	4603      	mov	r3, r0
 800106e:	461a      	mov	r2, r3
 8001070:	4b6c      	ldr	r3, [pc, #432]	; (8001224 <main+0x358>)
 8001072:	601a      	str	r2, [r3, #0]
      adcarray0[counter1]=adcraw0;
 8001074:	4b5c      	ldr	r3, [pc, #368]	; (80011e8 <main+0x31c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a6a      	ldr	r2, [pc, #424]	; (8001224 <main+0x358>)
 800107a:	6812      	ldr	r2, [r2, #0]
 800107c:	496a      	ldr	r1, [pc, #424]	; (8001228 <main+0x35c>)
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      HAL_ADC_Stop(&hadc3);
 8001082:	4867      	ldr	r0, [pc, #412]	; (8001220 <main+0x354>)
 8001084:	f002 f9c2 	bl	800340c <HAL_ADC_Stop>

      ADC_CH1_SELECT();
 8001088:	f7ff fe70 	bl	8000d6c <ADC_CH1_SELECT>
      HAL_ADC_Start(&hadc3);
 800108c:	4864      	ldr	r0, [pc, #400]	; (8001220 <main+0x354>)
 800108e:	f002 f8f3 	bl	8003278 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc3, 100);
 8001092:	2164      	movs	r1, #100	; 0x64
 8001094:	4862      	ldr	r0, [pc, #392]	; (8001220 <main+0x354>)
 8001096:	f002 f9ed 	bl	8003474 <HAL_ADC_PollForConversion>
      adcraw1 = HAL_ADC_GetValue(&hadc3);
 800109a:	4861      	ldr	r0, [pc, #388]	; (8001220 <main+0x354>)
 800109c:	f002 fade 	bl	800365c <HAL_ADC_GetValue>
 80010a0:	4603      	mov	r3, r0
 80010a2:	461a      	mov	r2, r3
 80010a4:	4b61      	ldr	r3, [pc, #388]	; (800122c <main+0x360>)
 80010a6:	601a      	str	r2, [r3, #0]
      adcarray1[counter1]=adcraw0;
 80010a8:	4b4f      	ldr	r3, [pc, #316]	; (80011e8 <main+0x31c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a5d      	ldr	r2, [pc, #372]	; (8001224 <main+0x358>)
 80010ae:	6812      	ldr	r2, [r2, #0]
 80010b0:	495f      	ldr	r1, [pc, #380]	; (8001230 <main+0x364>)
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      HAL_ADC_Stop(&hadc3);
 80010b6:	485a      	ldr	r0, [pc, #360]	; (8001220 <main+0x354>)
 80010b8:	f002 f9a8 	bl	800340c <HAL_ADC_Stop>

      ADC_CH4_SELECT();
 80010bc:	f7ff fe82 	bl	8000dc4 <ADC_CH4_SELECT>
      HAL_ADC_Start(&hadc3);
 80010c0:	4857      	ldr	r0, [pc, #348]	; (8001220 <main+0x354>)
 80010c2:	f002 f8d9 	bl	8003278 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc3, 100);
 80010c6:	2164      	movs	r1, #100	; 0x64
 80010c8:	4855      	ldr	r0, [pc, #340]	; (8001220 <main+0x354>)
 80010ca:	f002 f9d3 	bl	8003474 <HAL_ADC_PollForConversion>
      adcraw4 = HAL_ADC_GetValue(&hadc3);
 80010ce:	4854      	ldr	r0, [pc, #336]	; (8001220 <main+0x354>)
 80010d0:	f002 fac4 	bl	800365c <HAL_ADC_GetValue>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b56      	ldr	r3, [pc, #344]	; (8001234 <main+0x368>)
 80010da:	601a      	str	r2, [r3, #0]
      adcarray4[counter1]=adcraw0;
 80010dc:	4b42      	ldr	r3, [pc, #264]	; (80011e8 <main+0x31c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a50      	ldr	r2, [pc, #320]	; (8001224 <main+0x358>)
 80010e2:	6812      	ldr	r2, [r2, #0]
 80010e4:	4954      	ldr	r1, [pc, #336]	; (8001238 <main+0x36c>)
 80010e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      HAL_ADC_Stop(&hadc3);
 80010ea:	484d      	ldr	r0, [pc, #308]	; (8001220 <main+0x354>)
 80010ec:	f002 f98e 	bl	800340c <HAL_ADC_Stop>

      ADC_CH6_SELECT();
 80010f0:	f7ff fe94 	bl	8000e1c <ADC_CH6_SELECT>
      HAL_ADC_Start(&hadc3);
 80010f4:	484a      	ldr	r0, [pc, #296]	; (8001220 <main+0x354>)
 80010f6:	f002 f8bf 	bl	8003278 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc3, 100);
 80010fa:	2164      	movs	r1, #100	; 0x64
 80010fc:	4848      	ldr	r0, [pc, #288]	; (8001220 <main+0x354>)
 80010fe:	f002 f9b9 	bl	8003474 <HAL_ADC_PollForConversion>
      adcraw6 = HAL_ADC_GetValue(&hadc3);
 8001102:	4847      	ldr	r0, [pc, #284]	; (8001220 <main+0x354>)
 8001104:	f002 faaa 	bl	800365c <HAL_ADC_GetValue>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	4b4b      	ldr	r3, [pc, #300]	; (800123c <main+0x370>)
 800110e:	601a      	str	r2, [r3, #0]
      adcarray6[counter1]=adcraw0;
 8001110:	4b35      	ldr	r3, [pc, #212]	; (80011e8 <main+0x31c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a43      	ldr	r2, [pc, #268]	; (8001224 <main+0x358>)
 8001116:	6812      	ldr	r2, [r2, #0]
 8001118:	4949      	ldr	r1, [pc, #292]	; (8001240 <main+0x374>)
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      HAL_ADC_Stop(&hadc3);
 800111e:	4840      	ldr	r0, [pc, #256]	; (8001220 <main+0x354>)
 8001120:	f002 f974 	bl	800340c <HAL_ADC_Stop>

      ADC_CH7_SELECT();
 8001124:	f7ff fea6 	bl	8000e74 <ADC_CH7_SELECT>
      HAL_ADC_Start(&hadc3);
 8001128:	483d      	ldr	r0, [pc, #244]	; (8001220 <main+0x354>)
 800112a:	f002 f8a5 	bl	8003278 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc3, 100);
 800112e:	2164      	movs	r1, #100	; 0x64
 8001130:	483b      	ldr	r0, [pc, #236]	; (8001220 <main+0x354>)
 8001132:	f002 f99f 	bl	8003474 <HAL_ADC_PollForConversion>
      adcraw7 = HAL_ADC_GetValue(&hadc3);
 8001136:	483a      	ldr	r0, [pc, #232]	; (8001220 <main+0x354>)
 8001138:	f002 fa90 	bl	800365c <HAL_ADC_GetValue>
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	4b40      	ldr	r3, [pc, #256]	; (8001244 <main+0x378>)
 8001142:	601a      	str	r2, [r3, #0]
      adcarray7[counter1]=adcraw0;
 8001144:	4b28      	ldr	r3, [pc, #160]	; (80011e8 <main+0x31c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a36      	ldr	r2, [pc, #216]	; (8001224 <main+0x358>)
 800114a:	6812      	ldr	r2, [r2, #0]
 800114c:	493e      	ldr	r1, [pc, #248]	; (8001248 <main+0x37c>)
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      HAL_ADC_Stop(&hadc3);
 8001152:	4833      	ldr	r0, [pc, #204]	; (8001220 <main+0x354>)
 8001154:	f002 f95a 	bl	800340c <HAL_ADC_Stop>





	  sprintf(adcbuffer0,"\n\r %2d \n\r",adcraw0);
 8001158:	4b32      	ldr	r3, [pc, #200]	; (8001224 <main+0x358>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	493b      	ldr	r1, [pc, #236]	; (800124c <main+0x380>)
 8001160:	483b      	ldr	r0, [pc, #236]	; (8001250 <main+0x384>)
 8001162:	f00a faf7 	bl	800b754 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer0, strlen(adcbuffer0), HAL_MAX_DELAY);
 8001166:	483a      	ldr	r0, [pc, #232]	; (8001250 <main+0x384>)
 8001168:	f7ff f8ba 	bl	80002e0 <strlen>
 800116c:	4603      	mov	r3, r0
 800116e:	b29a      	uxth	r2, r3
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
 8001174:	4936      	ldr	r1, [pc, #216]	; (8001250 <main+0x384>)
 8001176:	4821      	ldr	r0, [pc, #132]	; (80011fc <main+0x330>)
 8001178:	f008 fee0 	bl	8009f3c <HAL_UART_Transmit>
	  sprintf(adcbuffer1,"\n\r %2d \n\r",adcraw1);
 800117c:	4b2b      	ldr	r3, [pc, #172]	; (800122c <main+0x360>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4932      	ldr	r1, [pc, #200]	; (800124c <main+0x380>)
 8001184:	4833      	ldr	r0, [pc, #204]	; (8001254 <main+0x388>)
 8001186:	f00a fae5 	bl	800b754 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer1, strlen(adcbuffer1), HAL_MAX_DELAY);
 800118a:	4832      	ldr	r0, [pc, #200]	; (8001254 <main+0x388>)
 800118c:	f7ff f8a8 	bl	80002e0 <strlen>
 8001190:	4603      	mov	r3, r0
 8001192:	b29a      	uxth	r2, r3
 8001194:	f04f 33ff 	mov.w	r3, #4294967295
 8001198:	492e      	ldr	r1, [pc, #184]	; (8001254 <main+0x388>)
 800119a:	4818      	ldr	r0, [pc, #96]	; (80011fc <main+0x330>)
 800119c:	f008 fece 	bl	8009f3c <HAL_UART_Transmit>
	  sprintf(adcbuffer4,"\n\r %2d \n\r",adcraw4);
 80011a0:	4b24      	ldr	r3, [pc, #144]	; (8001234 <main+0x368>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4929      	ldr	r1, [pc, #164]	; (800124c <main+0x380>)
 80011a8:	482b      	ldr	r0, [pc, #172]	; (8001258 <main+0x38c>)
 80011aa:	f00a fad3 	bl	800b754 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer4, strlen(adcbuffer4), HAL_MAX_DELAY);
 80011ae:	482a      	ldr	r0, [pc, #168]	; (8001258 <main+0x38c>)
 80011b0:	f7ff f896 	bl	80002e0 <strlen>
 80011b4:	4603      	mov	r3, r0
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295
 80011bc:	4926      	ldr	r1, [pc, #152]	; (8001258 <main+0x38c>)
 80011be:	480f      	ldr	r0, [pc, #60]	; (80011fc <main+0x330>)
 80011c0:	f008 febc 	bl	8009f3c <HAL_UART_Transmit>
	  sprintf(adcbuffer6,"\n\r %2d \n\r",adcraw6);
 80011c4:	4b1d      	ldr	r3, [pc, #116]	; (800123c <main+0x370>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4920      	ldr	r1, [pc, #128]	; (800124c <main+0x380>)
 80011cc:	4823      	ldr	r0, [pc, #140]	; (800125c <main+0x390>)
 80011ce:	f00a fac1 	bl	800b754 <siprintf>
 80011d2:	e045      	b.n	8001260 <main+0x394>
 80011d4:	240031cc 	.word	0x240031cc
 80011d8:	24000a70 	.word	0x24000a70
 80011dc:	24000508 	.word	0x24000508
 80011e0:	24003ae4 	.word	0x24003ae4
 80011e4:	24000004 	.word	0x24000004
 80011e8:	240000b8 	.word	0x240000b8
 80011ec:	240038b0 	.word	0x240038b0
 80011f0:	0800bf88 	.word	0x0800bf88
 80011f4:	24003218 	.word	0x24003218
 80011f8:	24000abc 	.word	0x24000abc
 80011fc:	2400058c 	.word	0x2400058c
 8001200:	40000800 	.word	0x40000800
 8001204:	0800bfa8 	.word	0x0800bfa8
 8001208:	24003668 	.word	0x24003668
 800120c:	24000554 	.word	0x24000554
 8001210:	2400369c 	.word	0x2400369c
 8001214:	24000000 	.word	0x24000000
 8001218:	0800bfbc 	.word	0x0800bfbc
 800121c:	2400000c 	.word	0x2400000c
 8001220:	24003440 	.word	0x24003440
 8001224:	240000a4 	.word	0x240000a4
 8001228:	240036d4 	.word	0x240036d4
 800122c:	240000a8 	.word	0x240000a8
 8001230:	240034d8 	.word	0x240034d8
 8001234:	240000ac 	.word	0x240000ac
 8001238:	24003920 	.word	0x24003920
 800123c:	240000b0 	.word	0x240000b0
 8001240:	24003b98 	.word	0x24003b98
 8001244:	240000b4 	.word	0x240000b4
 8001248:	2400327c 	.word	0x2400327c
 800124c:	0800bfd0 	.word	0x0800bfd0
 8001250:	24003b64 	.word	0x24003b64
 8001254:	240038b8 	.word	0x240038b8
 8001258:	240036a0 	.word	0x240036a0
 800125c:	2400340c 	.word	0x2400340c
	  HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer6, strlen(adcbuffer6), HAL_MAX_DELAY);
 8001260:	480e      	ldr	r0, [pc, #56]	; (800129c <main+0x3d0>)
 8001262:	f7ff f83d 	bl	80002e0 <strlen>
 8001266:	4603      	mov	r3, r0
 8001268:	b29a      	uxth	r2, r3
 800126a:	f04f 33ff 	mov.w	r3, #4294967295
 800126e:	490b      	ldr	r1, [pc, #44]	; (800129c <main+0x3d0>)
 8001270:	480b      	ldr	r0, [pc, #44]	; (80012a0 <main+0x3d4>)
 8001272:	f008 fe63 	bl	8009f3c <HAL_UART_Transmit>
	  sprintf(adcbuffer7,"\n\r %2d \n\r",adcraw7);
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <main+0x3d8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	490a      	ldr	r1, [pc, #40]	; (80012a8 <main+0x3dc>)
 800127e:	480b      	ldr	r0, [pc, #44]	; (80012ac <main+0x3e0>)
 8001280:	f00a fa68 	bl	800b754 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer7, strlen(adcbuffer7), HAL_MAX_DELAY);
 8001284:	4809      	ldr	r0, [pc, #36]	; (80012ac <main+0x3e0>)
 8001286:	f7ff f82b 	bl	80002e0 <strlen>
 800128a:	4603      	mov	r3, r0
 800128c:	b29a      	uxth	r2, r3
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
 8001292:	4906      	ldr	r1, [pc, #24]	; (80012ac <main+0x3e0>)
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <main+0x3d4>)
 8001296:	f008 fe51 	bl	8009f3c <HAL_UART_Transmit>
  {
 800129a:	e64f      	b.n	8000f3c <main+0x70>
 800129c:	2400340c 	.word	0x2400340c
 80012a0:	2400058c 	.word	0x2400058c
 80012a4:	240000b4 	.word	0x240000b4
 80012a8:	0800bfd0 	.word	0x0800bfd0
 80012ac:	24003ab0 	.word	0x24003ab0

080012b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b09c      	sub	sp, #112	; 0x70
 80012b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ba:	224c      	movs	r2, #76	; 0x4c
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f00a fa40 	bl	800b744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	2220      	movs	r2, #32
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f00a fa3a 	bl	800b744 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80012d0:	2002      	movs	r0, #2
 80012d2:	f004 f8b3 	bl	800543c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012d6:	2300      	movs	r3, #0
 80012d8:	603b      	str	r3, [r7, #0]
 80012da:	4b33      	ldr	r3, [pc, #204]	; (80013a8 <SystemClock_Config+0xf8>)
 80012dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012de:	4a32      	ldr	r2, [pc, #200]	; (80013a8 <SystemClock_Config+0xf8>)
 80012e0:	f023 0301 	bic.w	r3, r3, #1
 80012e4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80012e6:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <SystemClock_Config+0xf8>)
 80012e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	4b2e      	ldr	r3, [pc, #184]	; (80013ac <SystemClock_Config+0xfc>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012f8:	4a2c      	ldr	r2, [pc, #176]	; (80013ac <SystemClock_Config+0xfc>)
 80012fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <SystemClock_Config+0xfc>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001308:	603b      	str	r3, [r7, #0]
 800130a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800130c:	bf00      	nop
 800130e:	4b27      	ldr	r3, [pc, #156]	; (80013ac <SystemClock_Config+0xfc>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800131a:	d1f8      	bne.n	800130e <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSI;
 800131c:	2312      	movs	r3, #18
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001320:	2309      	movs	r3, #9
 8001322:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001324:	2340      	movs	r3, #64	; 0x40
 8001326:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 800132c:	2320      	movs	r3, #32
 800132e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001330:	2302      	movs	r3, #2
 8001332:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8001334:	2301      	movs	r3, #1
 8001336:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001338:	2301      	movs	r3, #1
 800133a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 37;
 800133c:	2325      	movs	r3, #37	; 0x25
 800133e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001340:	2302      	movs	r3, #2
 8001342:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001344:	2303      	movs	r3, #3
 8001346:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001348:	2302      	movs	r3, #2
 800134a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800134c:	2308      	movs	r3, #8
 800134e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001350:	2302      	movs	r3, #2
 8001352:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135c:	4618      	mov	r0, r3
 800135e:	f004 f8b7 	bl	80054d0 <HAL_RCC_OscConfig>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001368:	f000 fc84 	bl	8001c74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136c:	233f      	movs	r3, #63	; 0x3f
 800136e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001370:	2300      	movs	r3, #0
 8001372:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001378:	2300      	movs	r3, #0
 800137a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001380:	2300      	movs	r3, #0
 8001382:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f004 fcc9 	bl	8005d28 <HAL_RCC_ClockConfig>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 800139c:	f000 fc6a 	bl	8001c74 <Error_Handler>
  }
}
 80013a0:	bf00      	nop
 80013a2:	3770      	adds	r7, #112	; 0x70
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	58000400 	.word	0x58000400
 80013ac:	58024800 	.word	0x58024800

080013b0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b0b0      	sub	sp, #192	; 0xc0
 80013b4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	22bc      	movs	r2, #188	; 0xbc
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f00a f9c1 	bl	800b744 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80013c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80013c6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80013c8:	2300      	movs	r3, #0
 80013ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	4618      	mov	r0, r3
 80013d0:	f005 f836 	bl	8006440 <HAL_RCCEx_PeriphCLKConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 80013da:	f000 fc4b 	bl	8001c74 <Error_Handler>
  }
}
 80013de:	bf00      	nop
 80013e0:	37c0      	adds	r7, #192	; 0xc0
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	615a      	str	r2, [r3, #20]
 80013fe:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8001400:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <MX_ADC3_Init+0xbc>)
 8001402:	4a29      	ldr	r2, [pc, #164]	; (80014a8 <MX_ADC3_Init+0xc0>)
 8001404:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001406:	4b27      	ldr	r3, [pc, #156]	; (80014a4 <MX_ADC3_Init+0xbc>)
 8001408:	2200      	movs	r2, #0
 800140a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800140c:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <MX_ADC3_Init+0xbc>)
 800140e:	2208      	movs	r2, #8
 8001410:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001412:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <MX_ADC3_Init+0xbc>)
 8001414:	2200      	movs	r2, #0
 8001416:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <MX_ADC3_Init+0xbc>)
 800141a:	2204      	movs	r2, #4
 800141c:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <MX_ADC3_Init+0xbc>)
 8001420:	2200      	movs	r2, #0
 8001422:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001424:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <MX_ADC3_Init+0xbc>)
 8001426:	2201      	movs	r2, #1
 8001428:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 800142a:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <MX_ADC3_Init+0xbc>)
 800142c:	2201      	movs	r2, #1
 800142e:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001430:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <MX_ADC3_Init+0xbc>)
 8001432:	2200      	movs	r2, #0
 8001434:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001436:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <MX_ADC3_Init+0xbc>)
 8001438:	2200      	movs	r2, #0
 800143a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800143c:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <MX_ADC3_Init+0xbc>)
 800143e:	2200      	movs	r2, #0
 8001440:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001442:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <MX_ADC3_Init+0xbc>)
 8001444:	2200      	movs	r2, #0
 8001446:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001448:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <MX_ADC3_Init+0xbc>)
 800144a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800144e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <MX_ADC3_Init+0xbc>)
 8001452:	2200      	movs	r2, #0
 8001454:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001456:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <MX_ADC3_Init+0xbc>)
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800145e:	4811      	ldr	r0, [pc, #68]	; (80014a4 <MX_ADC3_Init+0xbc>)
 8001460:	f001 fd6a 	bl	8002f38 <HAL_ADC_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 800146a:	f000 fc03 	bl	8001c74 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800146e:	2301      	movs	r3, #1
 8001470:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001472:	2306      	movs	r3, #6
 8001474:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001476:	2301      	movs	r3, #1
 8001478:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800147a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800147e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001480:	2304      	movs	r3, #4
 8001482:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	4619      	mov	r1, r3
 800148c:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_ADC3_Init+0xbc>)
 800148e:	f002 f8f3 	bl	8003678 <HAL_ADC_ConfigChannel>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8001498:	f000 fbec 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	3720      	adds	r7, #32
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	24003440 	.word	0x24003440
 80014a8:	58026000 	.word	0x58026000

080014ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <MX_I2C1_Init+0x74>)
 80014b2:	4a1c      	ldr	r2, [pc, #112]	; (8001524 <MX_I2C1_Init+0x78>)
 80014b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B0DCFB;
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <MX_I2C1_Init+0x74>)
 80014b8:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <MX_I2C1_Init+0x7c>)
 80014ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014bc:	4b18      	ldr	r3, [pc, #96]	; (8001520 <MX_I2C1_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <MX_I2C1_Init+0x74>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <MX_I2C1_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <MX_I2C1_Init+0x74>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <MX_I2C1_Init+0x74>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <MX_I2C1_Init+0x74>)
 80014dc:	2200      	movs	r2, #0
 80014de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <MX_I2C1_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014e6:	480e      	ldr	r0, [pc, #56]	; (8001520 <MX_I2C1_Init+0x74>)
 80014e8:	f003 f9d2 	bl	8004890 <HAL_I2C_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014f2:	f000 fbbf 	bl	8001c74 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014f6:	2100      	movs	r1, #0
 80014f8:	4809      	ldr	r0, [pc, #36]	; (8001520 <MX_I2C1_Init+0x74>)
 80014fa:	f003 fdbf 	bl	800507c <HAL_I2CEx_ConfigAnalogFilter>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001504:	f000 fbb6 	bl	8001c74 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001508:	2100      	movs	r1, #0
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_I2C1_Init+0x74>)
 800150c:	f003 fe01 	bl	8005112 <HAL_I2CEx_ConfigDigitalFilter>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001516:	f000 fbad 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	2400061c 	.word	0x2400061c
 8001524:	40005400 	.word	0x40005400
 8001528:	10b0dcfb 	.word	0x10b0dcfb

0800152c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001532:	f107 0310 	add.w	r3, r7, #16
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800154a:	4b20      	ldr	r3, [pc, #128]	; (80015cc <MX_TIM1_Init+0xa0>)
 800154c:	4a20      	ldr	r2, [pc, #128]	; (80015d0 <MX_TIM1_Init+0xa4>)
 800154e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001550:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <MX_TIM1_Init+0xa0>)
 8001552:	2200      	movs	r2, #0
 8001554:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001556:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <MX_TIM1_Init+0xa0>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800155c:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <MX_TIM1_Init+0xa0>)
 800155e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001562:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <MX_TIM1_Init+0xa0>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800156a:	4b18      	ldr	r3, [pc, #96]	; (80015cc <MX_TIM1_Init+0xa0>)
 800156c:	2200      	movs	r2, #0
 800156e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001570:	4b16      	ldr	r3, [pc, #88]	; (80015cc <MX_TIM1_Init+0xa0>)
 8001572:	2200      	movs	r2, #0
 8001574:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001576:	4815      	ldr	r0, [pc, #84]	; (80015cc <MX_TIM1_Init+0xa0>)
 8001578:	f007 f8e8 	bl	800874c <HAL_TIM_Base_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001582:	f000 fb77 	bl	8001c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800158c:	f107 0310 	add.w	r3, r7, #16
 8001590:	4619      	mov	r1, r3
 8001592:	480e      	ldr	r0, [pc, #56]	; (80015cc <MX_TIM1_Init+0xa0>)
 8001594:	f007 fe82 	bl	800929c <HAL_TIM_ConfigClockSource>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800159e:	f000 fb69 	bl	8001c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	4619      	mov	r1, r3
 80015b2:	4806      	ldr	r0, [pc, #24]	; (80015cc <MX_TIM1_Init+0xa0>)
 80015b4:	f008 fbc6 	bl	8009d44 <HAL_TIMEx_MasterConfigSynchronization>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80015be:	f000 fb59 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	3720      	adds	r7, #32
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	24003864 	.word	0x24003864
 80015d0:	40010000 	.word	0x40010000

080015d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
//
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */
//
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015f2:	4b1e      	ldr	r3, [pc, #120]	; (800166c <MX_TIM3_Init+0x98>)
 80015f4:	4a1e      	ldr	r2, [pc, #120]	; (8001670 <MX_TIM3_Init+0x9c>)
 80015f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64000-1;
 80015f8:	4b1c      	ldr	r3, [pc, #112]	; (800166c <MX_TIM3_Init+0x98>)
 80015fa:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80015fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001600:	4b1a      	ldr	r3, [pc, #104]	; (800166c <MX_TIM3_Init+0x98>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8001606:	4b19      	ldr	r3, [pc, #100]	; (800166c <MX_TIM3_Init+0x98>)
 8001608:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800160c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160e:	4b17      	ldr	r3, [pc, #92]	; (800166c <MX_TIM3_Init+0x98>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001614:	4b15      	ldr	r3, [pc, #84]	; (800166c <MX_TIM3_Init+0x98>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800161a:	4814      	ldr	r0, [pc, #80]	; (800166c <MX_TIM3_Init+0x98>)
 800161c:	f007 f896 	bl	800874c <HAL_TIM_Base_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001626:	f000 fb25 	bl	8001c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800162a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800162e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001630:	f107 0310 	add.w	r3, r7, #16
 8001634:	4619      	mov	r1, r3
 8001636:	480d      	ldr	r0, [pc, #52]	; (800166c <MX_TIM3_Init+0x98>)
 8001638:	f007 fe30 	bl	800929c <HAL_TIM_ConfigClockSource>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001642:	f000 fb17 	bl	8001c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	4619      	mov	r1, r3
 8001652:	4806      	ldr	r0, [pc, #24]	; (800166c <MX_TIM3_Init+0x98>)
 8001654:	f008 fb76 	bl	8009d44 <HAL_TIMEx_MasterConfigSynchronization>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800165e:	f000 fb09 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
//
  /* USER CODE END TIM3_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	3720      	adds	r7, #32
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	240031cc 	.word	0x240031cc
 8001670:	40000400 	.word	0x40000400

08001674 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08c      	sub	sp, #48	; 0x30
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800167a:	f107 030c 	add.w	r3, r7, #12
 800167e:	2224      	movs	r2, #36	; 0x24
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f00a f85e 	bl	800b744 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001688:	463b      	mov	r3, r7
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001692:	4b21      	ldr	r3, [pc, #132]	; (8001718 <MX_TIM4_Init+0xa4>)
 8001694:	4a21      	ldr	r2, [pc, #132]	; (800171c <MX_TIM4_Init+0xa8>)
 8001696:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001698:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <MX_TIM4_Init+0xa4>)
 800169a:	2200      	movs	r2, #0
 800169c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169e:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <MX_TIM4_Init+0xa4>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1024;
 80016a4:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <MX_TIM4_Init+0xa4>)
 80016a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ac:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <MX_TIM4_Init+0xa4>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016b2:	4b19      	ldr	r3, [pc, #100]	; (8001718 <MX_TIM4_Init+0xa4>)
 80016b4:	2280      	movs	r2, #128	; 0x80
 80016b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016b8:	2303      	movs	r3, #3
 80016ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016bc:	2300      	movs	r3, #0
 80016be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016c0:	2301      	movs	r3, #1
 80016c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016cc:	2300      	movs	r3, #0
 80016ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016d0:	2301      	movs	r3, #1
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	4619      	mov	r1, r3
 80016e2:	480d      	ldr	r0, [pc, #52]	; (8001718 <MX_TIM4_Init+0xa4>)
 80016e4:	f007 fa72 	bl	8008bcc <HAL_TIM_Encoder_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80016ee:	f000 fac1 	bl	8001c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f2:	2300      	movs	r3, #0
 80016f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016fa:	463b      	mov	r3, r7
 80016fc:	4619      	mov	r1, r3
 80016fe:	4806      	ldr	r0, [pc, #24]	; (8001718 <MX_TIM4_Init+0xa4>)
 8001700:	f008 fb20 	bl	8009d44 <HAL_TIMEx_MasterConfigSynchronization>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800170a:	f000 fab3 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	3730      	adds	r7, #48	; 0x30
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	24000508 	.word	0x24000508
 800171c:	40000800 	.word	0x40000800

08001720 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001726:	f107 0310 	add.w	r3, r7, #16
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800173e:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <MX_TIM5_Init+0xa0>)
 8001740:	4a20      	ldr	r2, [pc, #128]	; (80017c4 <MX_TIM5_Init+0xa4>)
 8001742:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = (SystemCoreClock/1000)-1;
 8001744:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <MX_TIM5_Init+0xa8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a20      	ldr	r2, [pc, #128]	; (80017cc <MX_TIM5_Init+0xac>)
 800174a:	fba2 2303 	umull	r2, r3, r2, r3
 800174e:	099b      	lsrs	r3, r3, #6
 8001750:	3b01      	subs	r3, #1
 8001752:	4a1b      	ldr	r2, [pc, #108]	; (80017c0 <MX_TIM5_Init+0xa0>)
 8001754:	6053      	str	r3, [r2, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001756:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <MX_TIM5_Init+0xa0>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 800175c:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <MX_TIM5_Init+0xa0>)
 800175e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001762:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001764:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <MX_TIM5_Init+0xa0>)
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <MX_TIM5_Init+0xa0>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001770:	4813      	ldr	r0, [pc, #76]	; (80017c0 <MX_TIM5_Init+0xa0>)
 8001772:	f006 ffeb 	bl	800874c <HAL_TIM_Base_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 800177c:	f000 fa7a 	bl	8001c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001784:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001786:	f107 0310 	add.w	r3, r7, #16
 800178a:	4619      	mov	r1, r3
 800178c:	480c      	ldr	r0, [pc, #48]	; (80017c0 <MX_TIM5_Init+0xa0>)
 800178e:	f007 fd85 	bl	800929c <HAL_TIM_ConfigClockSource>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001798:	f000 fa6c 	bl	8001c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179c:	2300      	movs	r3, #0
 800179e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	4619      	mov	r1, r3
 80017a8:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_TIM5_Init+0xa0>)
 80017aa:	f008 facb 	bl	8009d44 <HAL_TIMEx_MasterConfigSynchronization>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80017b4:	f000 fa5e 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	3720      	adds	r7, #32
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	24000a70 	.word	0x24000a70
 80017c4:	40000c00 	.word	0x40000c00
 80017c8:	24000014 	.word	0x24000014
 80017cc:	10624dd3 	.word	0x10624dd3

080017d0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
 80017e4:	615a      	str	r2, [r3, #20]
 80017e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80017e8:	4b1e      	ldr	r3, [pc, #120]	; (8001864 <MX_TIM14_Init+0x94>)
 80017ea:	4a1f      	ldr	r2, [pc, #124]	; (8001868 <MX_TIM14_Init+0x98>)
 80017ec:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80017ee:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <MX_TIM14_Init+0x94>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f4:	4b1b      	ldr	r3, [pc, #108]	; (8001864 <MX_TIM14_Init+0x94>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1024;
 80017fa:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <MX_TIM14_Init+0x94>)
 80017fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001800:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001802:	4b18      	ldr	r3, [pc, #96]	; (8001864 <MX_TIM14_Init+0x94>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001808:	4b16      	ldr	r3, [pc, #88]	; (8001864 <MX_TIM14_Init+0x94>)
 800180a:	2200      	movs	r2, #0
 800180c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800180e:	4815      	ldr	r0, [pc, #84]	; (8001864 <MX_TIM14_Init+0x94>)
 8001810:	f006 ff9c 	bl	800874c <HAL_TIM_Base_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 800181a:	f000 fa2b 	bl	8001c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800181e:	4811      	ldr	r0, [pc, #68]	; (8001864 <MX_TIM14_Init+0x94>)
 8001820:	f007 f864 	bl	80088ec <HAL_TIM_PWM_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 800182a:	f000 fa23 	bl	8001c74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800182e:	2360      	movs	r3, #96	; 0x60
 8001830:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	2200      	movs	r2, #0
 8001842:	4619      	mov	r1, r3
 8001844:	4807      	ldr	r0, [pc, #28]	; (8001864 <MX_TIM14_Init+0x94>)
 8001846:	f007 fc15 	bl	8009074 <HAL_TIM_PWM_ConfigChannel>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001850:	f000 fa10 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001854:	4803      	ldr	r0, [pc, #12]	; (8001864 <MX_TIM14_Init+0x94>)
 8001856:	f000 fe23 	bl	80024a0 <HAL_TIM_MspPostInit>

}
 800185a:	bf00      	nop
 800185c:	3720      	adds	r7, #32
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	24003ae4 	.word	0x24003ae4
 8001868:	40002000 	.word	0x40002000

0800186c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001870:	4b22      	ldr	r3, [pc, #136]	; (80018fc <MX_USART3_UART_Init+0x90>)
 8001872:	4a23      	ldr	r2, [pc, #140]	; (8001900 <MX_USART3_UART_Init+0x94>)
 8001874:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001876:	4b21      	ldr	r3, [pc, #132]	; (80018fc <MX_USART3_UART_Init+0x90>)
 8001878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800187c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800187e:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <MX_USART3_UART_Init+0x90>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001884:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <MX_USART3_UART_Init+0x90>)
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800188a:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <MX_USART3_UART_Init+0x90>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001890:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <MX_USART3_UART_Init+0x90>)
 8001892:	220c      	movs	r2, #12
 8001894:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <MX_USART3_UART_Init+0x90>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800189c:	4b17      	ldr	r3, [pc, #92]	; (80018fc <MX_USART3_UART_Init+0x90>)
 800189e:	2200      	movs	r2, #0
 80018a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018a2:	4b16      	ldr	r3, [pc, #88]	; (80018fc <MX_USART3_UART_Init+0x90>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018a8:	4b14      	ldr	r3, [pc, #80]	; (80018fc <MX_USART3_UART_Init+0x90>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ae:	4b13      	ldr	r3, [pc, #76]	; (80018fc <MX_USART3_UART_Init+0x90>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018b4:	4811      	ldr	r0, [pc, #68]	; (80018fc <MX_USART3_UART_Init+0x90>)
 80018b6:	f008 faf1 	bl	8009e9c <HAL_UART_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80018c0:	f000 f9d8 	bl	8001c74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018c4:	2100      	movs	r1, #0
 80018c6:	480d      	ldr	r0, [pc, #52]	; (80018fc <MX_USART3_UART_Init+0x90>)
 80018c8:	f009 fb1c 	bl	800af04 <HAL_UARTEx_SetTxFifoThreshold>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80018d2:	f000 f9cf 	bl	8001c74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018d6:	2100      	movs	r1, #0
 80018d8:	4808      	ldr	r0, [pc, #32]	; (80018fc <MX_USART3_UART_Init+0x90>)
 80018da:	f009 fb51 	bl	800af80 <HAL_UARTEx_SetRxFifoThreshold>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80018e4:	f000 f9c6 	bl	8001c74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80018e8:	4804      	ldr	r0, [pc, #16]	; (80018fc <MX_USART3_UART_Init+0x90>)
 80018ea:	f009 fad2 	bl	800ae92 <HAL_UARTEx_DisableFifoMode>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80018f4:	f000 f9be 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	2400058c 	.word	0x2400058c
 8001900:	40004800 	.word	0x40004800

08001904 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001908:	4b15      	ldr	r3, [pc, #84]	; (8001960 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800190a:	4a16      	ldr	r2, [pc, #88]	; (8001964 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800190c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001910:	2209      	movs	r2, #9
 8001912:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001916:	2202      	movs	r2, #2
 8001918:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800191a:	4b11      	ldr	r3, [pc, #68]	; (8001960 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001922:	2202      	movs	r2, #2
 8001924:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001928:	2201      	movs	r2, #1
 800192a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800192e:	2200      	movs	r2, #0
 8001930:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001934:	2200      	movs	r2, #0
 8001936:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800193a:	2201      	movs	r2, #1
 800193c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800193e:	4b08      	ldr	r3, [pc, #32]	; (8001960 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001940:	2201      	movs	r2, #1
 8001942:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001946:	2200      	movs	r2, #0
 8001948:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800194a:	4805      	ldr	r0, [pc, #20]	; (8001960 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800194c:	f003 fc2d 	bl	80051aa <HAL_PCD_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001956:	f000 f98d 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	24000668 	.word	0x24000668
 8001964:	40080000 	.word	0x40080000

08001968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08e      	sub	sp, #56	; 0x38
 800196c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800197e:	4bb5      	ldr	r3, [pc, #724]	; (8001c54 <MX_GPIO_Init+0x2ec>)
 8001980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001984:	4ab3      	ldr	r2, [pc, #716]	; (8001c54 <MX_GPIO_Init+0x2ec>)
 8001986:	f043 0310 	orr.w	r3, r3, #16
 800198a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800198e:	4bb1      	ldr	r3, [pc, #708]	; (8001c54 <MX_GPIO_Init+0x2ec>)
 8001990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001994:	f003 0310 	and.w	r3, r3, #16
 8001998:	623b      	str	r3, [r7, #32]
 800199a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800199c:	4bad      	ldr	r3, [pc, #692]	; (8001c54 <MX_GPIO_Init+0x2ec>)
 800199e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a2:	4aac      	ldr	r2, [pc, #688]	; (8001c54 <MX_GPIO_Init+0x2ec>)
 80019a4:	f043 0304 	orr.w	r3, r3, #4
 80019a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ac:	4ba9      	ldr	r3, [pc, #676]	; (8001c54 <MX_GPIO_Init+0x2ec>)
 80019ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	61fb      	str	r3, [r7, #28]
 80019b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019ba:	4ba6      	ldr	r3, [pc, #664]	; (8001c54 <MX_GPIO_Init+0x2ec>)
 80019bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c0:	4aa4      	ldr	r2, [pc, #656]	; (8001c54 <MX_GPIO_Init+0x2ec>)
 80019c2:	f043 0320 	orr.w	r3, r3, #32
 80019c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ca:	4ba2      	ldr	r3, [pc, #648]	; (8001c54 <MX_GPIO_Init+0x2ec>)
 80019cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d0:	f003 0320 	and.w	r3, r3, #32
 80019d4:	61bb      	str	r3, [r7, #24]
 80019d6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019d8:	4b9e      	ldr	r3, [pc, #632]	; (8001c54 <MX_GPIO_Init+0x2ec>)
 80019da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019de:	4a9d      	ldr	r2, [pc, #628]	; (8001c54 <MX_GPIO_Init+0x2ec>)
 80019e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019e8:	4b9a      	ldr	r3, [pc, #616]	; (8001c54 <MX_GPIO_Init+0x2ec>)
 80019ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	4b97      	ldr	r3, [pc, #604]	; (8001c54 <MX_GPIO_Init+0x2ec>)
 80019f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fc:	4a95      	ldr	r2, [pc, #596]	; (8001c54 <MX_GPIO_Init+0x2ec>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a06:	4b93      	ldr	r3, [pc, #588]	; (8001c54 <MX_GPIO_Init+0x2ec>)
 8001a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a14:	4b8f      	ldr	r3, [pc, #572]	; (8001c54 <MX_GPIO_Init+0x2ec>)
 8001a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1a:	4a8e      	ldr	r2, [pc, #568]	; (8001c54 <MX_GPIO_Init+0x2ec>)
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a24:	4b8b      	ldr	r3, [pc, #556]	; (8001c54 <MX_GPIO_Init+0x2ec>)
 8001a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a32:	4b88      	ldr	r3, [pc, #544]	; (8001c54 <MX_GPIO_Init+0x2ec>)
 8001a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a38:	4a86      	ldr	r2, [pc, #536]	; (8001c54 <MX_GPIO_Init+0x2ec>)
 8001a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a42:	4b84      	ldr	r3, [pc, #528]	; (8001c54 <MX_GPIO_Init+0x2ec>)
 8001a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a50:	4b80      	ldr	r3, [pc, #512]	; (8001c54 <MX_GPIO_Init+0x2ec>)
 8001a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a56:	4a7f      	ldr	r2, [pc, #508]	; (8001c54 <MX_GPIO_Init+0x2ec>)
 8001a58:	f043 0308 	orr.w	r3, r3, #8
 8001a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a60:	4b7c      	ldr	r3, [pc, #496]	; (8001c54 <MX_GPIO_Init+0x2ec>)
 8001a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, RTC_CLK_Pin|RTC_RST_Pin, GPIO_PIN_RESET);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2106      	movs	r1, #6
 8001a72:	4879      	ldr	r0, [pc, #484]	; (8001c58 <MX_GPIO_Init+0x2f0>)
 8001a74:	f002 fed8 	bl	8004828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001a7e:	4877      	ldr	r0, [pc, #476]	; (8001c5c <MX_GPIO_Init+0x2f4>)
 8001a80:	f002 fed2 	bl	8004828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	2140      	movs	r1, #64	; 0x40
 8001a88:	4875      	ldr	r0, [pc, #468]	; (8001c60 <MX_GPIO_Init+0x2f8>)
 8001a8a:	f002 fecd 	bl	8004828 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001a8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a94:	2303      	movs	r3, #3
 8001a96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4870      	ldr	r0, [pc, #448]	; (8001c64 <MX_GPIO_Init+0x2fc>)
 8001aa4:	f002 fcf8 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001aa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001abc:	4619      	mov	r1, r3
 8001abe:	486a      	ldr	r0, [pc, #424]	; (8001c68 <MX_GPIO_Init+0x300>)
 8001ac0:	f002 fcea 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pin : RTC_IO_Pin */
  GPIO_InitStruct.Pin = RTC_IO_Pin;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RTC_IO_GPIO_Port, &GPIO_InitStruct);
 8001ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4860      	ldr	r0, [pc, #384]	; (8001c58 <MX_GPIO_Init+0x2f0>)
 8001ad8:	f002 fcde 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pins : RTC_CLK_Pin RTC_RST_Pin */
  GPIO_InitStruct.Pin = RTC_CLK_Pin|RTC_RST_Pin;
 8001adc:	2306      	movs	r3, #6
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af0:	4619      	mov	r1, r3
 8001af2:	4859      	ldr	r0, [pc, #356]	; (8001c58 <MX_GPIO_Init+0x2f0>)
 8001af4:	f002 fcd0 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF4 PF6 PF7
                           PF11 PF12 PF13 PF14
                           PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
 8001af8:	f64f 03d8 	movw	r3, #63704	; 0xf8d8
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001afe:	2303      	movs	r3, #3
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4852      	ldr	r0, [pc, #328]	; (8001c58 <MX_GPIO_Init+0x2f0>)
 8001b0e:	f002 fcc3 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001b12:	f641 73f1 	movw	r3, #8177	; 0x1ff1
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b24:	4619      	mov	r1, r3
 8001b26:	4850      	ldr	r0, [pc, #320]	; (8001c68 <MX_GPIO_Init+0x300>)
 8001b28:	f002 fcb6 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDC_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b30:	2302      	movs	r3, #2
 8001b32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b3c:	230b      	movs	r3, #11
 8001b3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 8001b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b44:	4619      	mov	r1, r3
 8001b46:	4848      	ldr	r0, [pc, #288]	; (8001c68 <MX_GPIO_Init+0x300>)
 8001b48:	f002 fca6 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b4c:	f248 03ff 	movw	r3, #33023	; 0x80ff
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b52:	2303      	movs	r3, #3
 8001b54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4842      	ldr	r0, [pc, #264]	; (8001c6c <MX_GPIO_Init+0x304>)
 8001b62:	f002 fc99 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB15 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001b66:	f649 4377 	movw	r3, #40055	; 0x9c77
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4838      	ldr	r0, [pc, #224]	; (8001c5c <MX_GPIO_Init+0x2f4>)
 8001b7c:	f002 fc8c 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG8 PG9
                           PG10 PG12 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b80:	f24d 733f 	movw	r3, #55103	; 0xd73f
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b86:	2303      	movs	r3, #3
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b92:	4619      	mov	r1, r3
 8001b94:	4832      	ldr	r0, [pc, #200]	; (8001c60 <MX_GPIO_Init+0x2f8>)
 8001b96:	f002 fc7f 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001b9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bac:	230b      	movs	r3, #11
 8001bae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4829      	ldr	r0, [pc, #164]	; (8001c5c <MX_GPIO_Init+0x2f4>)
 8001bb8:	f002 fc6e 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001bbc:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4821      	ldr	r0, [pc, #132]	; (8001c5c <MX_GPIO_Init+0x2f4>)
 8001bd6:	f002 fc5f 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15
 8001bda:	f64c 43ff 	movw	r3, #52479	; 0xccff
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001be0:	2303      	movs	r3, #3
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bec:	4619      	mov	r1, r3
 8001bee:	4820      	ldr	r0, [pc, #128]	; (8001c70 <MX_GPIO_Init+0x308>)
 8001bf0:	f002 fc52 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001bf4:	2340      	movs	r3, #64	; 0x40
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c00:	2300      	movs	r3, #0
 8001c02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4815      	ldr	r0, [pc, #84]	; (8001c60 <MX_GPIO_Init+0x2f8>)
 8001c0c:	f002 fc44 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c14:	2300      	movs	r3, #0
 8001c16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c20:	4619      	mov	r1, r3
 8001c22:	480f      	ldr	r0, [pc, #60]	; (8001c60 <MX_GPIO_Init+0x2f8>)
 8001c24:	f002 fc38 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001c28:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	2300      	movs	r3, #0
 8001c38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c3a:	230b      	movs	r3, #11
 8001c3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c42:	4619      	mov	r1, r3
 8001c44:	4806      	ldr	r0, [pc, #24]	; (8001c60 <MX_GPIO_Init+0x2f8>)
 8001c46:	f002 fc27 	bl	8004498 <HAL_GPIO_Init>

}
 8001c4a:	bf00      	nop
 8001c4c:	3738      	adds	r7, #56	; 0x38
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	58024400 	.word	0x58024400
 8001c58:	58021400 	.word	0x58021400
 8001c5c:	58020400 	.word	0x58020400
 8001c60:	58021800 	.word	0x58021800
 8001c64:	58021000 	.word	0x58021000
 8001c68:	58020800 	.word	0x58020800
 8001c6c:	58020000 	.word	0x58020000
 8001c70:	58020c00 	.word	0x58020c00

08001c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    char buffer[20];

    ssd1306_Fill(Black);
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f000 f8bc 	bl	8001df8 <ssd1306_Fill>

    sprintf(buffer, "gGMTXMMMMMMMMMMMM\n");
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	4909      	ldr	r1, [pc, #36]	; (8001ca8 <Error_Handler+0x34>)
 8001c84:	4618      	mov	r0, r3
 8001c86:	f009 fd65 	bl	800b754 <siprintf>
    ssd1306_SetCursor(0,0); // Adjust these values according to where you want the text to start
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f000 fa01 	bl	8002094 <ssd1306_SetCursor>
    ssd1306_WriteString(buffer, Font_7x10, White); // Replace with your font and color choice
 8001c92:	4a06      	ldr	r2, [pc, #24]	; (8001cac <Error_Handler+0x38>)
 8001c94:	1d38      	adds	r0, r7, #4
 8001c96:	2301      	movs	r3, #1
 8001c98:	ca06      	ldmia	r2, {r1, r2}
 8001c9a:	f000 f9d5 	bl	8002048 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8001c9e:	f000 f8cf 	bl	8001e40 <ssd1306_UpdateScreen>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca2:	b672      	cpsid	i
}
 8001ca4:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ca6:	e7fe      	b.n	8001ca6 <Error_Handler+0x32>
 8001ca8:	0800bfdc 	.word	0x0800bfdc
 8001cac:	2400000c 	.word	0x2400000c

08001cb0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af04      	add	r7, sp, #16
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295
 8001cce:	9302      	str	r3, [sp, #8]
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	9301      	str	r3, [sp, #4]
 8001cd4:	1dfb      	adds	r3, r7, #7
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	2301      	movs	r3, #1
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2178      	movs	r1, #120	; 0x78
 8001cde:	4803      	ldr	r0, [pc, #12]	; (8001cec <ssd1306_WriteCommand+0x2c>)
 8001ce0:	f002 fe66 	bl	80049b0 <HAL_I2C_Mem_Write>
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	2400061c 	.word	0x2400061c

08001cf0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af04      	add	r7, sp, #16
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8001d02:	9202      	str	r2, [sp, #8]
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	2240      	movs	r2, #64	; 0x40
 8001d0e:	2178      	movs	r1, #120	; 0x78
 8001d10:	4803      	ldr	r0, [pc, #12]	; (8001d20 <ssd1306_WriteData+0x30>)
 8001d12:	f002 fe4d 	bl	80049b0 <HAL_I2C_Mem_Write>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	2400061c 	.word	0x2400061c

08001d24 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001d28:	f7ff ffc2 	bl	8001cb0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001d2c:	2064      	movs	r0, #100	; 0x64
 8001d2e:	f000 fe8b 	bl	8002a48 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001d32:	2000      	movs	r0, #0
 8001d34:	f000 f9da 	bl	80020ec <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001d38:	2020      	movs	r0, #32
 8001d3a:	f7ff ffc1 	bl	8001cc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f7ff ffbe 	bl	8001cc0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001d44:	20b0      	movs	r0, #176	; 0xb0
 8001d46:	f7ff ffbb 	bl	8001cc0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001d4a:	20c8      	movs	r0, #200	; 0xc8
 8001d4c:	f7ff ffb8 	bl	8001cc0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001d50:	2000      	movs	r0, #0
 8001d52:	f7ff ffb5 	bl	8001cc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001d56:	2010      	movs	r0, #16
 8001d58:	f7ff ffb2 	bl	8001cc0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001d5c:	2040      	movs	r0, #64	; 0x40
 8001d5e:	f7ff ffaf 	bl	8001cc0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001d62:	20ff      	movs	r0, #255	; 0xff
 8001d64:	f000 f9ae 	bl	80020c4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001d68:	20a1      	movs	r0, #161	; 0xa1
 8001d6a:	f7ff ffa9 	bl	8001cc0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001d6e:	20a6      	movs	r0, #166	; 0xa6
 8001d70:	f7ff ffa6 	bl	8001cc0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001d74:	20a8      	movs	r0, #168	; 0xa8
 8001d76:	f7ff ffa3 	bl	8001cc0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001d7a:	203f      	movs	r0, #63	; 0x3f
 8001d7c:	f7ff ffa0 	bl	8001cc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001d80:	20a4      	movs	r0, #164	; 0xa4
 8001d82:	f7ff ff9d 	bl	8001cc0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001d86:	20d3      	movs	r0, #211	; 0xd3
 8001d88:	f7ff ff9a 	bl	8001cc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f7ff ff97 	bl	8001cc0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001d92:	20d5      	movs	r0, #213	; 0xd5
 8001d94:	f7ff ff94 	bl	8001cc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001d98:	20f0      	movs	r0, #240	; 0xf0
 8001d9a:	f7ff ff91 	bl	8001cc0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001d9e:	20d9      	movs	r0, #217	; 0xd9
 8001da0:	f7ff ff8e 	bl	8001cc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001da4:	2022      	movs	r0, #34	; 0x22
 8001da6:	f7ff ff8b 	bl	8001cc0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001daa:	20da      	movs	r0, #218	; 0xda
 8001dac:	f7ff ff88 	bl	8001cc0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001db0:	2012      	movs	r0, #18
 8001db2:	f7ff ff85 	bl	8001cc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001db6:	20db      	movs	r0, #219	; 0xdb
 8001db8:	f7ff ff82 	bl	8001cc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001dbc:	2020      	movs	r0, #32
 8001dbe:	f7ff ff7f 	bl	8001cc0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001dc2:	208d      	movs	r0, #141	; 0x8d
 8001dc4:	f7ff ff7c 	bl	8001cc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001dc8:	2014      	movs	r0, #20
 8001dca:	f7ff ff79 	bl	8001cc0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001dce:	2001      	movs	r0, #1
 8001dd0:	f000 f98c 	bl	80020ec <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f000 f80f 	bl	8001df8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001dda:	f000 f831 	bl	8001e40 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <ssd1306_Init+0xd0>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <ssd1306_Init+0xd0>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001dea:	4b02      	ldr	r3, [pc, #8]	; (8001df4 <ssd1306_Init+0xd0>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	711a      	strb	r2, [r3, #4]
}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	240004c0 	.word	0x240004c0

08001df8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	e00d      	b.n	8001e24 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <ssd1306_Fill+0x1a>
 8001e0e:	2100      	movs	r1, #0
 8001e10:	e000      	b.n	8001e14 <ssd1306_Fill+0x1c>
 8001e12:	21ff      	movs	r1, #255	; 0xff
 8001e14:	4a09      	ldr	r2, [pc, #36]	; (8001e3c <ssd1306_Fill+0x44>)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4413      	add	r3, r2
 8001e1a:	460a      	mov	r2, r1
 8001e1c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	3301      	adds	r3, #1
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e2a:	d3ed      	bcc.n	8001e08 <ssd1306_Fill+0x10>
    }
}
 8001e2c:	bf00      	nop
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	240000c0 	.word	0x240000c0

08001e40 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001e46:	2300      	movs	r3, #0
 8001e48:	71fb      	strb	r3, [r7, #7]
 8001e4a:	e016      	b.n	8001e7a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	3b50      	subs	r3, #80	; 0x50
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff ff34 	bl	8001cc0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f7ff ff31 	bl	8001cc0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001e5e:	2010      	movs	r0, #16
 8001e60:	f7ff ff2e 	bl	8001cc0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	01db      	lsls	r3, r3, #7
 8001e68:	4a08      	ldr	r2, [pc, #32]	; (8001e8c <ssd1306_UpdateScreen+0x4c>)
 8001e6a:	4413      	add	r3, r2
 8001e6c:	2180      	movs	r1, #128	; 0x80
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff ff3e 	bl	8001cf0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	3301      	adds	r3, #1
 8001e78:	71fb      	strb	r3, [r7, #7]
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	2b07      	cmp	r3, #7
 8001e7e:	d9e5      	bls.n	8001e4c <ssd1306_UpdateScreen+0xc>
    }
}
 8001e80:	bf00      	nop
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	240000c0 	.word	0x240000c0

08001e90 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	71bb      	strb	r3, [r7, #6]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	db3d      	blt.n	8001f26 <ssd1306_DrawPixel+0x96>
 8001eaa:	79bb      	ldrb	r3, [r7, #6]
 8001eac:	2b3f      	cmp	r3, #63	; 0x3f
 8001eae:	d83a      	bhi.n	8001f26 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001eb0:	797b      	ldrb	r3, [r7, #5]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d11a      	bne.n	8001eec <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001eb6:	79fa      	ldrb	r2, [r7, #7]
 8001eb8:	79bb      	ldrb	r3, [r7, #6]
 8001eba:	08db      	lsrs	r3, r3, #3
 8001ebc:	b2d8      	uxtb	r0, r3
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	01db      	lsls	r3, r3, #7
 8001ec2:	4413      	add	r3, r2
 8001ec4:	4a1b      	ldr	r2, [pc, #108]	; (8001f34 <ssd1306_DrawPixel+0xa4>)
 8001ec6:	5cd3      	ldrb	r3, [r2, r3]
 8001ec8:	b25a      	sxtb	r2, r3
 8001eca:	79bb      	ldrb	r3, [r7, #6]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	b25b      	sxtb	r3, r3
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	b259      	sxtb	r1, r3
 8001edc:	79fa      	ldrb	r2, [r7, #7]
 8001ede:	4603      	mov	r3, r0
 8001ee0:	01db      	lsls	r3, r3, #7
 8001ee2:	4413      	add	r3, r2
 8001ee4:	b2c9      	uxtb	r1, r1
 8001ee6:	4a13      	ldr	r2, [pc, #76]	; (8001f34 <ssd1306_DrawPixel+0xa4>)
 8001ee8:	54d1      	strb	r1, [r2, r3]
 8001eea:	e01d      	b.n	8001f28 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001eec:	79fa      	ldrb	r2, [r7, #7]
 8001eee:	79bb      	ldrb	r3, [r7, #6]
 8001ef0:	08db      	lsrs	r3, r3, #3
 8001ef2:	b2d8      	uxtb	r0, r3
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	01db      	lsls	r3, r3, #7
 8001ef8:	4413      	add	r3, r2
 8001efa:	4a0e      	ldr	r2, [pc, #56]	; (8001f34 <ssd1306_DrawPixel+0xa4>)
 8001efc:	5cd3      	ldrb	r3, [r2, r3]
 8001efe:	b25a      	sxtb	r2, r3
 8001f00:	79bb      	ldrb	r3, [r7, #6]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	2101      	movs	r1, #1
 8001f08:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0c:	b25b      	sxtb	r3, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	b25b      	sxtb	r3, r3
 8001f12:	4013      	ands	r3, r2
 8001f14:	b259      	sxtb	r1, r3
 8001f16:	79fa      	ldrb	r2, [r7, #7]
 8001f18:	4603      	mov	r3, r0
 8001f1a:	01db      	lsls	r3, r3, #7
 8001f1c:	4413      	add	r3, r2
 8001f1e:	b2c9      	uxtb	r1, r1
 8001f20:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <ssd1306_DrawPixel+0xa4>)
 8001f22:	54d1      	strb	r1, [r2, r3]
 8001f24:	e000      	b.n	8001f28 <ssd1306_DrawPixel+0x98>
        return;
 8001f26:	bf00      	nop
    }
}
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	240000c0 	.word	0x240000c0

08001f38 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001f38:	b590      	push	{r4, r7, lr}
 8001f3a:	b089      	sub	sp, #36	; 0x24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4604      	mov	r4, r0
 8001f40:	1d38      	adds	r0, r7, #4
 8001f42:	e880 0006 	stmia.w	r0, {r1, r2}
 8001f46:	461a      	mov	r2, r3
 8001f48:	4623      	mov	r3, r4
 8001f4a:	73fb      	strb	r3, [r7, #15]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	2b1f      	cmp	r3, #31
 8001f54:	d902      	bls.n	8001f5c <ssd1306_WriteChar+0x24>
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	2b7e      	cmp	r3, #126	; 0x7e
 8001f5a:	d901      	bls.n	8001f60 <ssd1306_WriteChar+0x28>
        return 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	e06d      	b.n	800203c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001f60:	4b38      	ldr	r3, [pc, #224]	; (8002044 <ssd1306_WriteChar+0x10c>)
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	793b      	ldrb	r3, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	2b80      	cmp	r3, #128	; 0x80
 8001f6c:	dc06      	bgt.n	8001f7c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001f6e:	4b35      	ldr	r3, [pc, #212]	; (8002044 <ssd1306_WriteChar+0x10c>)
 8001f70:	885b      	ldrh	r3, [r3, #2]
 8001f72:	461a      	mov	r2, r3
 8001f74:	797b      	ldrb	r3, [r7, #5]
 8001f76:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001f78:	2b40      	cmp	r3, #64	; 0x40
 8001f7a:	dd01      	ble.n	8001f80 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	e05d      	b.n	800203c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001f80:	2300      	movs	r3, #0
 8001f82:	61fb      	str	r3, [r7, #28]
 8001f84:	e04c      	b.n	8002020 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	3b20      	subs	r3, #32
 8001f8c:	7979      	ldrb	r1, [r7, #5]
 8001f8e:	fb01 f303 	mul.w	r3, r1, r3
 8001f92:	4619      	mov	r1, r3
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	440b      	add	r3, r1
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	4413      	add	r3, r2
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61bb      	str	r3, [r7, #24]
 8001fa4:	e034      	b.n	8002010 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d012      	beq.n	8001fdc <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001fb6:	4b23      	ldr	r3, [pc, #140]	; (8002044 <ssd1306_WriteChar+0x10c>)
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	b2d8      	uxtb	r0, r3
 8001fc4:	4b1f      	ldr	r3, [pc, #124]	; (8002044 <ssd1306_WriteChar+0x10c>)
 8001fc6:	885b      	ldrh	r3, [r3, #2]
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	4413      	add	r3, r2
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	7bba      	ldrb	r2, [r7, #14]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f7ff ff5b 	bl	8001e90 <ssd1306_DrawPixel>
 8001fda:	e016      	b.n	800200a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001fdc:	4b19      	ldr	r3, [pc, #100]	; (8002044 <ssd1306_WriteChar+0x10c>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	b2d8      	uxtb	r0, r3
 8001fea:	4b16      	ldr	r3, [pc, #88]	; (8002044 <ssd1306_WriteChar+0x10c>)
 8001fec:	885b      	ldrh	r3, [r3, #2]
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	b2d9      	uxtb	r1, r3
 8001ff8:	7bbb      	ldrb	r3, [r7, #14]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	bf0c      	ite	eq
 8001ffe:	2301      	moveq	r3, #1
 8002000:	2300      	movne	r3, #0
 8002002:	b2db      	uxtb	r3, r3
 8002004:	461a      	mov	r2, r3
 8002006:	f7ff ff43 	bl	8001e90 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	3301      	adds	r3, #1
 800200e:	61bb      	str	r3, [r7, #24]
 8002010:	793b      	ldrb	r3, [r7, #4]
 8002012:	461a      	mov	r2, r3
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	4293      	cmp	r3, r2
 8002018:	d3c5      	bcc.n	8001fa6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3301      	adds	r3, #1
 800201e:	61fb      	str	r3, [r7, #28]
 8002020:	797b      	ldrb	r3, [r7, #5]
 8002022:	461a      	mov	r2, r3
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	4293      	cmp	r3, r2
 8002028:	d3ad      	bcc.n	8001f86 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800202a:	4b06      	ldr	r3, [pc, #24]	; (8002044 <ssd1306_WriteChar+0x10c>)
 800202c:	881a      	ldrh	r2, [r3, #0]
 800202e:	793b      	ldrb	r3, [r7, #4]
 8002030:	b29b      	uxth	r3, r3
 8002032:	4413      	add	r3, r2
 8002034:	b29a      	uxth	r2, r3
 8002036:	4b03      	ldr	r3, [pc, #12]	; (8002044 <ssd1306_WriteChar+0x10c>)
 8002038:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800203a:	7bfb      	ldrb	r3, [r7, #15]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3724      	adds	r7, #36	; 0x24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd90      	pop	{r4, r7, pc}
 8002044:	240004c0 	.word	0x240004c0

08002048 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	1d38      	adds	r0, r7, #4
 8002052:	e880 0006 	stmia.w	r0, {r1, r2}
 8002056:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002058:	e012      	b.n	8002080 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	7818      	ldrb	r0, [r3, #0]
 800205e:	78fb      	ldrb	r3, [r7, #3]
 8002060:	1d3a      	adds	r2, r7, #4
 8002062:	ca06      	ldmia	r2, {r1, r2}
 8002064:	f7ff ff68 	bl	8001f38 <ssd1306_WriteChar>
 8002068:	4603      	mov	r3, r0
 800206a:	461a      	mov	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d002      	beq.n	800207a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	e008      	b.n	800208c <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	3301      	adds	r3, #1
 800207e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1e8      	bne.n	800205a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	781b      	ldrb	r3, [r3, #0]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	460a      	mov	r2, r1
 800209e:	71fb      	strb	r3, [r7, #7]
 80020a0:	4613      	mov	r3, r2
 80020a2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <ssd1306_SetCursor+0x2c>)
 80020aa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80020ac:	79bb      	ldrb	r3, [r7, #6]
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	4b03      	ldr	r3, [pc, #12]	; (80020c0 <ssd1306_SetCursor+0x2c>)
 80020b2:	805a      	strh	r2, [r3, #2]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	240004c0 	.word	0x240004c0

080020c4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80020ce:	2381      	movs	r3, #129	; 0x81
 80020d0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fdf3 	bl	8001cc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fdef 	bl	8001cc0 <ssd1306_WriteCommand>
}
 80020e2:	bf00      	nop
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80020fc:	23af      	movs	r3, #175	; 0xaf
 80020fe:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <ssd1306_SetDisplayOn+0x38>)
 8002102:	2201      	movs	r2, #1
 8002104:	715a      	strb	r2, [r3, #5]
 8002106:	e004      	b.n	8002112 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002108:	23ae      	movs	r3, #174	; 0xae
 800210a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <ssd1306_SetDisplayOn+0x38>)
 800210e:	2200      	movs	r2, #0
 8002110:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff fdd3 	bl	8001cc0 <ssd1306_WriteCommand>
}
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	240004c0 	.word	0x240004c0

08002128 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <HAL_MspInit+0x30>)
 8002130:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002134:	4a08      	ldr	r2, [pc, #32]	; (8002158 <HAL_MspInit+0x30>)
 8002136:	f043 0302 	orr.w	r3, r3, #2
 800213a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800213e:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_MspInit+0x30>)
 8002140:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	58024400 	.word	0x58024400

0800215c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b0ba      	sub	sp, #232	; 0xe8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002174:	f107 0318 	add.w	r3, r7, #24
 8002178:	22bc      	movs	r2, #188	; 0xbc
 800217a:	2100      	movs	r1, #0
 800217c:	4618      	mov	r0, r3
 800217e:	f009 fae1 	bl	800b744 <memset>
  if(hadc->Instance==ADC3)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a30      	ldr	r2, [pc, #192]	; (8002248 <HAL_ADC_MspInit+0xec>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d159      	bne.n	8002240 <HAL_ADC_MspInit+0xe4>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800218c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002190:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8002192:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002196:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800219a:	f107 0318 	add.w	r3, r7, #24
 800219e:	4618      	mov	r0, r3
 80021a0:	f004 f94e 	bl	8006440 <HAL_RCCEx_PeriphCLKConfig>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80021aa:	f7ff fd63 	bl	8001c74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80021ae:	4b27      	ldr	r3, [pc, #156]	; (800224c <HAL_ADC_MspInit+0xf0>)
 80021b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b4:	4a25      	ldr	r2, [pc, #148]	; (800224c <HAL_ADC_MspInit+0xf0>)
 80021b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021be:	4b23      	ldr	r3, [pc, #140]	; (800224c <HAL_ADC_MspInit+0xf0>)
 80021c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021cc:	4b1f      	ldr	r3, [pc, #124]	; (800224c <HAL_ADC_MspInit+0xf0>)
 80021ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021d2:	4a1e      	ldr	r2, [pc, #120]	; (800224c <HAL_ADC_MspInit+0xf0>)
 80021d4:	f043 0320 	orr.w	r3, r3, #32
 80021d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021dc:	4b1b      	ldr	r3, [pc, #108]	; (800224c <HAL_ADC_MspInit+0xf0>)
 80021de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e2:	f003 0320 	and.w	r3, r3, #32
 80021e6:	613b      	str	r3, [r7, #16]
 80021e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ea:	4b18      	ldr	r3, [pc, #96]	; (800224c <HAL_ADC_MspInit+0xf0>)
 80021ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f0:	4a16      	ldr	r2, [pc, #88]	; (800224c <HAL_ADC_MspInit+0xf0>)
 80021f2:	f043 0304 	orr.w	r3, r3, #4
 80021f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021fa:	4b14      	ldr	r3, [pc, #80]	; (800224c <HAL_ADC_MspInit+0xf0>)
 80021fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
    PF8     ------> ADC3_INP7
    PF10     ------> ADC3_INP6
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_10;
 8002208:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 800220c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002210:	2303      	movs	r3, #3
 8002212:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800221c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002220:	4619      	mov	r1, r3
 8002222:	480b      	ldr	r0, [pc, #44]	; (8002250 <HAL_ADC_MspInit+0xf4>)
 8002224:	f002 f938 	bl	8004498 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002228:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800222c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002230:	f000 fc3a 	bl	8002aa8 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002234:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002238:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800223c:	f000 fc34 	bl	8002aa8 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002240:	bf00      	nop
 8002242:	37e8      	adds	r7, #232	; 0xe8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	58026000 	.word	0x58026000
 800224c:	58024400 	.word	0x58024400
 8002250:	58021400 	.word	0x58021400

08002254 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b0b8      	sub	sp, #224	; 0xe0
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800226c:	f107 0310 	add.w	r3, r7, #16
 8002270:	22bc      	movs	r2, #188	; 0xbc
 8002272:	2100      	movs	r1, #0
 8002274:	4618      	mov	r0, r3
 8002276:	f009 fa65 	bl	800b744 <memset>
  if(hi2c->Instance==I2C1)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a25      	ldr	r2, [pc, #148]	; (8002314 <HAL_I2C_MspInit+0xc0>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d143      	bne.n	800230c <HAL_I2C_MspInit+0xb8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002284:	2308      	movs	r3, #8
 8002286:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_HSI;
 8002288:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800228c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002290:	f107 0310 	add.w	r3, r7, #16
 8002294:	4618      	mov	r0, r3
 8002296:	f004 f8d3 	bl	8006440 <HAL_RCCEx_PeriphCLKConfig>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80022a0:	f7ff fce8 	bl	8001c74 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a4:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <HAL_I2C_MspInit+0xc4>)
 80022a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022aa:	4a1b      	ldr	r2, [pc, #108]	; (8002318 <HAL_I2C_MspInit+0xc4>)
 80022ac:	f043 0302 	orr.w	r3, r3, #2
 80022b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022b4:	4b18      	ldr	r3, [pc, #96]	; (8002318 <HAL_I2C_MspInit+0xc4>)
 80022b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ca:	2312      	movs	r3, #18
 80022cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d0:	2301      	movs	r3, #1
 80022d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022d6:	2302      	movs	r3, #2
 80022d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022dc:	2304      	movs	r3, #4
 80022de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022e6:	4619      	mov	r1, r3
 80022e8:	480c      	ldr	r0, [pc, #48]	; (800231c <HAL_I2C_MspInit+0xc8>)
 80022ea:	f002 f8d5 	bl	8004498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <HAL_I2C_MspInit+0xc4>)
 80022f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022f4:	4a08      	ldr	r2, [pc, #32]	; (8002318 <HAL_I2C_MspInit+0xc4>)
 80022f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_I2C_MspInit+0xc4>)
 8002300:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800230c:	bf00      	nop
 800230e:	37e0      	adds	r7, #224	; 0xe0
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40005400 	.word	0x40005400
 8002318:	58024400 	.word	0x58024400
 800231c:	58020400 	.word	0x58020400

08002320 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a32      	ldr	r2, [pc, #200]	; (80023f8 <HAL_TIM_Base_MspInit+0xd8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d10f      	bne.n	8002352 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002332:	4b32      	ldr	r3, [pc, #200]	; (80023fc <HAL_TIM_Base_MspInit+0xdc>)
 8002334:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002338:	4a30      	ldr	r2, [pc, #192]	; (80023fc <HAL_TIM_Base_MspInit+0xdc>)
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002342:	4b2e      	ldr	r3, [pc, #184]	; (80023fc <HAL_TIM_Base_MspInit+0xdc>)
 8002344:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002350:	e04d      	b.n	80023ee <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM3)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a2a      	ldr	r2, [pc, #168]	; (8002400 <HAL_TIM_Base_MspInit+0xe0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d117      	bne.n	800238c <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800235c:	4b27      	ldr	r3, [pc, #156]	; (80023fc <HAL_TIM_Base_MspInit+0xdc>)
 800235e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002362:	4a26      	ldr	r2, [pc, #152]	; (80023fc <HAL_TIM_Base_MspInit+0xdc>)
 8002364:	f043 0302 	orr.w	r3, r3, #2
 8002368:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800236c:	4b23      	ldr	r3, [pc, #140]	; (80023fc <HAL_TIM_Base_MspInit+0xdc>)
 800236e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800237a:	2200      	movs	r2, #0
 800237c:	2100      	movs	r1, #0
 800237e:	201d      	movs	r0, #29
 8002380:	f002 f855 	bl	800442e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002384:	201d      	movs	r0, #29
 8002386:	f002 f86c 	bl	8004462 <HAL_NVIC_EnableIRQ>
}
 800238a:	e030      	b.n	80023ee <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM5)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a1c      	ldr	r2, [pc, #112]	; (8002404 <HAL_TIM_Base_MspInit+0xe4>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d117      	bne.n	80023c6 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002396:	4b19      	ldr	r3, [pc, #100]	; (80023fc <HAL_TIM_Base_MspInit+0xdc>)
 8002398:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800239c:	4a17      	ldr	r2, [pc, #92]	; (80023fc <HAL_TIM_Base_MspInit+0xdc>)
 800239e:	f043 0308 	orr.w	r3, r3, #8
 80023a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023a6:	4b15      	ldr	r3, [pc, #84]	; (80023fc <HAL_TIM_Base_MspInit+0xdc>)
 80023a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023ac:	f003 0308 	and.w	r3, r3, #8
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80023b4:	2200      	movs	r2, #0
 80023b6:	2100      	movs	r1, #0
 80023b8:	2032      	movs	r0, #50	; 0x32
 80023ba:	f002 f838 	bl	800442e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80023be:	2032      	movs	r0, #50	; 0x32
 80023c0:	f002 f84f 	bl	8004462 <HAL_NVIC_EnableIRQ>
}
 80023c4:	e013      	b.n	80023ee <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM14)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a0f      	ldr	r2, [pc, #60]	; (8002408 <HAL_TIM_Base_MspInit+0xe8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d10e      	bne.n	80023ee <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80023d0:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <HAL_TIM_Base_MspInit+0xdc>)
 80023d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023d6:	4a09      	ldr	r2, [pc, #36]	; (80023fc <HAL_TIM_Base_MspInit+0xdc>)
 80023d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <HAL_TIM_Base_MspInit+0xdc>)
 80023e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ea:	60bb      	str	r3, [r7, #8]
 80023ec:	68bb      	ldr	r3, [r7, #8]
}
 80023ee:	bf00      	nop
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40010000 	.word	0x40010000
 80023fc:	58024400 	.word	0x58024400
 8002400:	40000400 	.word	0x40000400
 8002404:	40000c00 	.word	0x40000c00
 8002408:	40002000 	.word	0x40002000

0800240c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08a      	sub	sp, #40	; 0x28
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a1a      	ldr	r2, [pc, #104]	; (8002494 <HAL_TIM_Encoder_MspInit+0x88>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d12e      	bne.n	800248c <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800242e:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002430:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002434:	4a18      	ldr	r2, [pc, #96]	; (8002498 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002436:	f043 0304 	orr.w	r3, r3, #4
 800243a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800243e:	4b16      	ldr	r3, [pc, #88]	; (8002498 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002440:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800244c:	4b12      	ldr	r3, [pc, #72]	; (8002498 <HAL_TIM_Encoder_MspInit+0x8c>)
 800244e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002452:	4a11      	ldr	r2, [pc, #68]	; (8002498 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002454:	f043 0308 	orr.w	r3, r3, #8
 8002458:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800245c:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <HAL_TIM_Encoder_MspInit+0x8c>)
 800245e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800246a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800246e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002478:	2300      	movs	r3, #0
 800247a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800247c:	2302      	movs	r3, #2
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	4619      	mov	r1, r3
 8002486:	4805      	ldr	r0, [pc, #20]	; (800249c <HAL_TIM_Encoder_MspInit+0x90>)
 8002488:	f002 f806 	bl	8004498 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800248c:	bf00      	nop
 800248e:	3728      	adds	r7, #40	; 0x28
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40000800 	.word	0x40000800
 8002498:	58024400 	.word	0x58024400
 800249c:	58020c00 	.word	0x58020c00

080024a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a8:	f107 030c 	add.w	r3, r7, #12
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	60da      	str	r2, [r3, #12]
 80024b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM14)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a13      	ldr	r2, [pc, #76]	; (800250c <HAL_TIM_MspPostInit+0x6c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d11f      	bne.n	8002502 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80024c2:	4b13      	ldr	r3, [pc, #76]	; (8002510 <HAL_TIM_MspPostInit+0x70>)
 80024c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c8:	4a11      	ldr	r2, [pc, #68]	; (8002510 <HAL_TIM_MspPostInit+0x70>)
 80024ca:	f043 0320 	orr.w	r3, r3, #32
 80024ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024d2:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <HAL_TIM_MspPostInit+0x70>)
 80024d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d8:	f003 0320 	and.w	r3, r3, #32
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PF9     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e6:	2302      	movs	r3, #2
 80024e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80024f2:	2309      	movs	r3, #9
 80024f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024f6:	f107 030c 	add.w	r3, r7, #12
 80024fa:	4619      	mov	r1, r3
 80024fc:	4805      	ldr	r0, [pc, #20]	; (8002514 <HAL_TIM_MspPostInit+0x74>)
 80024fe:	f001 ffcb 	bl	8004498 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002502:	bf00      	nop
 8002504:	3720      	adds	r7, #32
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40002000 	.word	0x40002000
 8002510:	58024400 	.word	0x58024400
 8002514:	58021400 	.word	0x58021400

08002518 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b0b8      	sub	sp, #224	; 0xe0
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002530:	f107 0310 	add.w	r3, r7, #16
 8002534:	22bc      	movs	r2, #188	; 0xbc
 8002536:	2100      	movs	r1, #0
 8002538:	4618      	mov	r0, r3
 800253a:	f009 f903 	bl	800b744 <memset>
  if(huart->Instance==USART3)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a25      	ldr	r2, [pc, #148]	; (80025d8 <HAL_UART_MspInit+0xc0>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d142      	bne.n	80025ce <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002548:	2302      	movs	r3, #2
 800254a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800254c:	2300      	movs	r3, #0
 800254e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002552:	f107 0310 	add.w	r3, r7, #16
 8002556:	4618      	mov	r0, r3
 8002558:	f003 ff72 	bl	8006440 <HAL_RCCEx_PeriphCLKConfig>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002562:	f7ff fb87 	bl	8001c74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002566:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <HAL_UART_MspInit+0xc4>)
 8002568:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800256c:	4a1b      	ldr	r2, [pc, #108]	; (80025dc <HAL_UART_MspInit+0xc4>)
 800256e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002572:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002576:	4b19      	ldr	r3, [pc, #100]	; (80025dc <HAL_UART_MspInit+0xc4>)
 8002578:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800257c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002584:	4b15      	ldr	r3, [pc, #84]	; (80025dc <HAL_UART_MspInit+0xc4>)
 8002586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800258a:	4a14      	ldr	r2, [pc, #80]	; (80025dc <HAL_UART_MspInit+0xc4>)
 800258c:	f043 0308 	orr.w	r3, r3, #8
 8002590:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002594:	4b11      	ldr	r3, [pc, #68]	; (80025dc <HAL_UART_MspInit+0xc4>)
 8002596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800259a:	f003 0308 	and.w	r3, r3, #8
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80025a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025aa:	2302      	movs	r3, #2
 80025ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b6:	2300      	movs	r3, #0
 80025b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025bc:	2307      	movs	r3, #7
 80025be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025c2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025c6:	4619      	mov	r1, r3
 80025c8:	4805      	ldr	r0, [pc, #20]	; (80025e0 <HAL_UART_MspInit+0xc8>)
 80025ca:	f001 ff65 	bl	8004498 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025ce:	bf00      	nop
 80025d0:	37e0      	adds	r7, #224	; 0xe0
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40004800 	.word	0x40004800
 80025dc:	58024400 	.word	0x58024400
 80025e0:	58020c00 	.word	0x58020c00

080025e4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b0b8      	sub	sp, #224	; 0xe0
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	60da      	str	r2, [r3, #12]
 80025fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025fc:	f107 0310 	add.w	r3, r7, #16
 8002600:	22bc      	movs	r2, #188	; 0xbc
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f009 f89d 	bl	800b744 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a2f      	ldr	r2, [pc, #188]	; (80026cc <HAL_PCD_MspInit+0xe8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d156      	bne.n	80026c2 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002614:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002618:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800261a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800261e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002622:	f107 0310 	add.w	r3, r7, #16
 8002626:	4618      	mov	r0, r3
 8002628:	f003 ff0a 	bl	8006440 <HAL_RCCEx_PeriphCLKConfig>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8002632:	f7ff fb1f 	bl	8001c74 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002636:	f002 ff3b 	bl	80054b0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263a:	4b25      	ldr	r3, [pc, #148]	; (80026d0 <HAL_PCD_MspInit+0xec>)
 800263c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002640:	4a23      	ldr	r2, [pc, #140]	; (80026d0 <HAL_PCD_MspInit+0xec>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800264a:	4b21      	ldr	r3, [pc, #132]	; (80026d0 <HAL_PCD_MspInit+0xec>)
 800264c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002658:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800265c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002660:	2302      	movs	r3, #2
 8002662:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266c:	2300      	movs	r3, #0
 800266e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002672:	230a      	movs	r3, #10
 8002674:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002678:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800267c:	4619      	mov	r1, r3
 800267e:	4815      	ldr	r0, [pc, #84]	; (80026d4 <HAL_PCD_MspInit+0xf0>)
 8002680:	f001 ff0a 	bl	8004498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002684:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002688:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800268c:	2300      	movs	r3, #0
 800268e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002698:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800269c:	4619      	mov	r1, r3
 800269e:	480d      	ldr	r0, [pc, #52]	; (80026d4 <HAL_PCD_MspInit+0xf0>)
 80026a0:	f001 fefa 	bl	8004498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80026a4:	4b0a      	ldr	r3, [pc, #40]	; (80026d0 <HAL_PCD_MspInit+0xec>)
 80026a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80026aa:	4a09      	ldr	r2, [pc, #36]	; (80026d0 <HAL_PCD_MspInit+0xec>)
 80026ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026b0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <HAL_PCD_MspInit+0xec>)
 80026b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80026ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80026c2:	bf00      	nop
 80026c4:	37e0      	adds	r7, #224	; 0xe0
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40080000 	.word	0x40080000
 80026d0:	58024400 	.word	0x58024400
 80026d4:	58020000 	.word	0x58020000

080026d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026dc:	e7fe      	b.n	80026dc <NMI_Handler+0x4>

080026de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026de:	b480      	push	{r7}
 80026e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026e2:	e7fe      	b.n	80026e2 <HardFault_Handler+0x4>

080026e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026e8:	e7fe      	b.n	80026e8 <MemManage_Handler+0x4>

080026ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026ea:	b480      	push	{r7}
 80026ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ee:	e7fe      	b.n	80026ee <BusFault_Handler+0x4>

080026f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026f4:	e7fe      	b.n	80026f4 <UsageFault_Handler+0x4>

080026f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026f6:	b480      	push	{r7}
 80026f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002712:	b480      	push	{r7}
 8002714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002724:	f000 f970 	bl	8002a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002728:	bf00      	nop
 800272a:	bd80      	pop	{r7, pc}

0800272c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002730:	4802      	ldr	r0, [pc, #8]	; (800273c <TIM3_IRQHandler+0x10>)
 8002732:	f006 fb7f 	bl	8008e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	240031cc 	.word	0x240031cc

08002740 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002744:	4802      	ldr	r0, [pc, #8]	; (8002750 <TIM5_IRQHandler+0x10>)
 8002746:	f006 fb75 	bl	8008e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	24000a70 	.word	0x24000a70

08002754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800275c:	4a14      	ldr	r2, [pc, #80]	; (80027b0 <_sbrk+0x5c>)
 800275e:	4b15      	ldr	r3, [pc, #84]	; (80027b4 <_sbrk+0x60>)
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002768:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <_sbrk+0x64>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d102      	bne.n	8002776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002770:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <_sbrk+0x64>)
 8002772:	4a12      	ldr	r2, [pc, #72]	; (80027bc <_sbrk+0x68>)
 8002774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002776:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <_sbrk+0x64>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4413      	add	r3, r2
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	429a      	cmp	r2, r3
 8002782:	d207      	bcs.n	8002794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002784:	f008 ff8c 	bl	800b6a0 <__errno>
 8002788:	4603      	mov	r3, r0
 800278a:	220c      	movs	r2, #12
 800278c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800278e:	f04f 33ff 	mov.w	r3, #4294967295
 8002792:	e009      	b.n	80027a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002794:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <_sbrk+0x64>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800279a:	4b07      	ldr	r3, [pc, #28]	; (80027b8 <_sbrk+0x64>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	4a05      	ldr	r2, [pc, #20]	; (80027b8 <_sbrk+0x64>)
 80027a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027a6:	68fb      	ldr	r3, [r7, #12]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	24080000 	.word	0x24080000
 80027b4:	00000400 	.word	0x00000400
 80027b8:	240004c8 	.word	0x240004c8
 80027bc:	24003d40 	.word	0x24003d40

080027c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80027c4:	4b37      	ldr	r3, [pc, #220]	; (80028a4 <SystemInit+0xe4>)
 80027c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ca:	4a36      	ldr	r2, [pc, #216]	; (80028a4 <SystemInit+0xe4>)
 80027cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027d4:	4b34      	ldr	r3, [pc, #208]	; (80028a8 <SystemInit+0xe8>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 030f 	and.w	r3, r3, #15
 80027dc:	2b06      	cmp	r3, #6
 80027de:	d807      	bhi.n	80027f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027e0:	4b31      	ldr	r3, [pc, #196]	; (80028a8 <SystemInit+0xe8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f023 030f 	bic.w	r3, r3, #15
 80027e8:	4a2f      	ldr	r2, [pc, #188]	; (80028a8 <SystemInit+0xe8>)
 80027ea:	f043 0307 	orr.w	r3, r3, #7
 80027ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80027f0:	4b2e      	ldr	r3, [pc, #184]	; (80028ac <SystemInit+0xec>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a2d      	ldr	r2, [pc, #180]	; (80028ac <SystemInit+0xec>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80027fc:	4b2b      	ldr	r3, [pc, #172]	; (80028ac <SystemInit+0xec>)
 80027fe:	2200      	movs	r2, #0
 8002800:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002802:	4b2a      	ldr	r3, [pc, #168]	; (80028ac <SystemInit+0xec>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	4929      	ldr	r1, [pc, #164]	; (80028ac <SystemInit+0xec>)
 8002808:	4b29      	ldr	r3, [pc, #164]	; (80028b0 <SystemInit+0xf0>)
 800280a:	4013      	ands	r3, r2
 800280c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800280e:	4b26      	ldr	r3, [pc, #152]	; (80028a8 <SystemInit+0xe8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d007      	beq.n	800282a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800281a:	4b23      	ldr	r3, [pc, #140]	; (80028a8 <SystemInit+0xe8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 030f 	bic.w	r3, r3, #15
 8002822:	4a21      	ldr	r2, [pc, #132]	; (80028a8 <SystemInit+0xe8>)
 8002824:	f043 0307 	orr.w	r3, r3, #7
 8002828:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800282a:	4b20      	ldr	r3, [pc, #128]	; (80028ac <SystemInit+0xec>)
 800282c:	2200      	movs	r2, #0
 800282e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002830:	4b1e      	ldr	r3, [pc, #120]	; (80028ac <SystemInit+0xec>)
 8002832:	2200      	movs	r2, #0
 8002834:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002836:	4b1d      	ldr	r3, [pc, #116]	; (80028ac <SystemInit+0xec>)
 8002838:	2200      	movs	r2, #0
 800283a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800283c:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <SystemInit+0xec>)
 800283e:	4a1d      	ldr	r2, [pc, #116]	; (80028b4 <SystemInit+0xf4>)
 8002840:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002842:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <SystemInit+0xec>)
 8002844:	4a1c      	ldr	r2, [pc, #112]	; (80028b8 <SystemInit+0xf8>)
 8002846:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002848:	4b18      	ldr	r3, [pc, #96]	; (80028ac <SystemInit+0xec>)
 800284a:	4a1c      	ldr	r2, [pc, #112]	; (80028bc <SystemInit+0xfc>)
 800284c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800284e:	4b17      	ldr	r3, [pc, #92]	; (80028ac <SystemInit+0xec>)
 8002850:	2200      	movs	r2, #0
 8002852:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002854:	4b15      	ldr	r3, [pc, #84]	; (80028ac <SystemInit+0xec>)
 8002856:	4a19      	ldr	r2, [pc, #100]	; (80028bc <SystemInit+0xfc>)
 8002858:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800285a:	4b14      	ldr	r3, [pc, #80]	; (80028ac <SystemInit+0xec>)
 800285c:	2200      	movs	r2, #0
 800285e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002860:	4b12      	ldr	r3, [pc, #72]	; (80028ac <SystemInit+0xec>)
 8002862:	4a16      	ldr	r2, [pc, #88]	; (80028bc <SystemInit+0xfc>)
 8002864:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002866:	4b11      	ldr	r3, [pc, #68]	; (80028ac <SystemInit+0xec>)
 8002868:	2200      	movs	r2, #0
 800286a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800286c:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <SystemInit+0xec>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a0e      	ldr	r2, [pc, #56]	; (80028ac <SystemInit+0xec>)
 8002872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002876:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002878:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <SystemInit+0xec>)
 800287a:	2200      	movs	r2, #0
 800287c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800287e:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <SystemInit+0x100>)
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <SystemInit+0x104>)
 8002884:	4013      	ands	r3, r2
 8002886:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800288a:	d202      	bcs.n	8002892 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800288c:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <SystemInit+0x108>)
 800288e:	2201      	movs	r2, #1
 8002890:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002892:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <SystemInit+0x10c>)
 8002894:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002898:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800289a:	bf00      	nop
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	e000ed00 	.word	0xe000ed00
 80028a8:	52002000 	.word	0x52002000
 80028ac:	58024400 	.word	0x58024400
 80028b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80028b4:	02020200 	.word	0x02020200
 80028b8:	01ff0000 	.word	0x01ff0000
 80028bc:	01010280 	.word	0x01010280
 80028c0:	5c001000 	.word	0x5c001000
 80028c4:	ffff0000 	.word	0xffff0000
 80028c8:	51008108 	.word	0x51008108
 80028cc:	52004000 	.word	0x52004000

080028d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80028d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002908 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80028d4:	f7ff ff74 	bl	80027c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028d8:	480c      	ldr	r0, [pc, #48]	; (800290c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028da:	490d      	ldr	r1, [pc, #52]	; (8002910 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028dc:	4a0d      	ldr	r2, [pc, #52]	; (8002914 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e0:	e002      	b.n	80028e8 <LoopCopyDataInit>

080028e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028e6:	3304      	adds	r3, #4

080028e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028ec:	d3f9      	bcc.n	80028e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ee:	4a0a      	ldr	r2, [pc, #40]	; (8002918 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028f0:	4c0a      	ldr	r4, [pc, #40]	; (800291c <LoopFillZerobss+0x22>)
  movs r3, #0
 80028f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f4:	e001      	b.n	80028fa <LoopFillZerobss>

080028f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028f8:	3204      	adds	r2, #4

080028fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028fc:	d3fb      	bcc.n	80028f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028fe:	f008 fed5 	bl	800b6ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002902:	f7fe fae3 	bl	8000ecc <main>
  bx  lr
 8002906:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002908:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800290c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002910:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8002914:	0800c7d8 	.word	0x0800c7d8
  ldr r2, =_sbss
 8002918:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 800291c:	24003d3c 	.word	0x24003d3c

08002920 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002920:	e7fe      	b.n	8002920 <ADC3_IRQHandler>
	...

08002924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800292a:	2003      	movs	r0, #3
 800292c:	f001 fd74 	bl	8004418 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002930:	f003 fbb0 	bl	8006094 <HAL_RCC_GetSysClockFreq>
 8002934:	4602      	mov	r2, r0
 8002936:	4b15      	ldr	r3, [pc, #84]	; (800298c <HAL_Init+0x68>)
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	0a1b      	lsrs	r3, r3, #8
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	4913      	ldr	r1, [pc, #76]	; (8002990 <HAL_Init+0x6c>)
 8002942:	5ccb      	ldrb	r3, [r1, r3]
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
 800294c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800294e:	4b0f      	ldr	r3, [pc, #60]	; (800298c <HAL_Init+0x68>)
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	4a0e      	ldr	r2, [pc, #56]	; (8002990 <HAL_Init+0x6c>)
 8002958:	5cd3      	ldrb	r3, [r2, r3]
 800295a:	f003 031f 	and.w	r3, r3, #31
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	fa22 f303 	lsr.w	r3, r2, r3
 8002964:	4a0b      	ldr	r2, [pc, #44]	; (8002994 <HAL_Init+0x70>)
 8002966:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002968:	4a0b      	ldr	r2, [pc, #44]	; (8002998 <HAL_Init+0x74>)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800296e:	2000      	movs	r0, #0
 8002970:	f000 f814 	bl	800299c <HAL_InitTick>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e002      	b.n	8002984 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800297e:	f7ff fbd3 	bl	8002128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	58024400 	.word	0x58024400
 8002990:	0800c75c 	.word	0x0800c75c
 8002994:	24000018 	.word	0x24000018
 8002998:	24000014 	.word	0x24000014

0800299c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80029a4:	4b15      	ldr	r3, [pc, #84]	; (80029fc <HAL_InitTick+0x60>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e021      	b.n	80029f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80029b0:	4b13      	ldr	r3, [pc, #76]	; (8002a00 <HAL_InitTick+0x64>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4b11      	ldr	r3, [pc, #68]	; (80029fc <HAL_InitTick+0x60>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	4619      	mov	r1, r3
 80029ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029be:	fbb3 f3f1 	udiv	r3, r3, r1
 80029c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c6:	4618      	mov	r0, r3
 80029c8:	f001 fd59 	bl	800447e <HAL_SYSTICK_Config>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e00e      	b.n	80029f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b0f      	cmp	r3, #15
 80029da:	d80a      	bhi.n	80029f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029dc:	2200      	movs	r2, #0
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	f04f 30ff 	mov.w	r0, #4294967295
 80029e4:	f001 fd23 	bl	800442e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029e8:	4a06      	ldr	r2, [pc, #24]	; (8002a04 <HAL_InitTick+0x68>)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	e000      	b.n	80029f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	24000020 	.word	0x24000020
 8002a00:	24000014 	.word	0x24000014
 8002a04:	2400001c 	.word	0x2400001c

08002a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <HAL_IncTick+0x20>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <HAL_IncTick+0x24>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4413      	add	r3, r2
 8002a18:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <HAL_IncTick+0x24>)
 8002a1a:	6013      	str	r3, [r2, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	24000020 	.word	0x24000020
 8002a2c:	24003d28 	.word	0x24003d28

08002a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return uwTick;
 8002a34:	4b03      	ldr	r3, [pc, #12]	; (8002a44 <HAL_GetTick+0x14>)
 8002a36:	681b      	ldr	r3, [r3, #0]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	24003d28 	.word	0x24003d28

08002a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a50:	f7ff ffee 	bl	8002a30 <HAL_GetTick>
 8002a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a60:	d005      	beq.n	8002a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a62:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <HAL_Delay+0x44>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a6e:	bf00      	nop
 8002a70:	f7ff ffde 	bl	8002a30 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d8f7      	bhi.n	8002a70 <HAL_Delay+0x28>
  {
  }
}
 8002a80:	bf00      	nop
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	24000020 	.word	0x24000020

08002a90 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002a94:	4b03      	ldr	r3, [pc, #12]	; (8002aa4 <HAL_GetREVID+0x14>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	0c1b      	lsrs	r3, r3, #16
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	5c001000 	.word	0x5c001000

08002aa8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002ab2:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	401a      	ands	r2, r3
 8002abc:	4904      	ldr	r1, [pc, #16]	; (8002ad0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	604b      	str	r3, [r1, #4]
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	58000400 	.word	0x58000400

08002ad4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	609a      	str	r2, [r3, #8]
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
 8002b02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	609a      	str	r2, [r3, #8]
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
 8002b48:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	3360      	adds	r3, #96	; 0x60
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002b70:	bf00      	nop
 8002b72:	371c      	adds	r7, #28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f003 031f 	and.w	r3, r3, #31
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	611a      	str	r2, [r3, #16]
}
 8002ba2:	bf00      	nop
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b087      	sub	sp, #28
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	3360      	adds	r3, #96	; 0x60
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	601a      	str	r2, [r3, #0]
  }
}
 8002bd8:	bf00      	nop
 8002bda:	371c      	adds	r7, #28
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e000      	b.n	8002bfe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b087      	sub	sp, #28
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	3330      	adds	r3, #48	; 0x30
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	0a1b      	lsrs	r3, r3, #8
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	f003 030c 	and.w	r3, r3, #12
 8002c26:	4413      	add	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	211f      	movs	r1, #31
 8002c36:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	401a      	ands	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	0e9b      	lsrs	r3, r3, #26
 8002c42:	f003 011f 	and.w	r1, r3, #31
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	f003 031f 	and.w	r3, r3, #31
 8002c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c50:	431a      	orrs	r2, r3
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c56:	bf00      	nop
 8002c58:	371c      	adds	r7, #28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b087      	sub	sp, #28
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	3314      	adds	r3, #20
 8002c72:	461a      	mov	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	0e5b      	lsrs	r3, r3, #25
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	4413      	add	r3, r2
 8002c80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	0d1b      	lsrs	r3, r3, #20
 8002c8a:	f003 031f 	and.w	r3, r3, #31
 8002c8e:	2107      	movs	r1, #7
 8002c90:	fa01 f303 	lsl.w	r3, r1, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	401a      	ands	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	0d1b      	lsrs	r3, r3, #20
 8002c9c:	f003 031f 	and.w	r3, r3, #31
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002cac:	bf00      	nop
 8002cae:	371c      	adds	r7, #28
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	401a      	ands	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f003 0318 	and.w	r3, r3, #24
 8002cda:	4908      	ldr	r1, [pc, #32]	; (8002cfc <LL_ADC_SetChannelSingleDiff+0x44>)
 8002cdc:	40d9      	lsrs	r1, r3
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	400b      	ands	r3, r1
 8002ce2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002cee:	bf00      	nop
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	000fffff 	.word	0x000fffff

08002d00 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 031f 	and.w	r3, r3, #31
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6093      	str	r3, [r2, #8]
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	5fffffc0 	.word	0x5fffffc0

08002d5c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d70:	d101      	bne.n	8002d76 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <LL_ADC_EnableInternalRegulator+0x24>)
 8002d92:	4013      	ands	r3, r2
 8002d94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	6fffffc0 	.word	0x6fffffc0

08002dac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dc0:	d101      	bne.n	8002dc6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <LL_ADC_Enable+0x24>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	f043 0201 	orr.w	r2, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	7fffffc0 	.word	0x7fffffc0

08002dfc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <LL_ADC_Disable+0x24>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	f043 0202 	orr.w	r2, r3, #2
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	7fffffc0 	.word	0x7fffffc0

08002e24 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <LL_ADC_IsEnabled+0x18>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <LL_ADC_IsEnabled+0x1a>
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d101      	bne.n	8002e62 <LL_ADC_IsDisableOngoing+0x18>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <LL_ADC_IsDisableOngoing+0x1a>
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <LL_ADC_REG_StartConversion+0x24>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	f043 0204 	orr.w	r2, r3, #4
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	7fffffc0 	.word	0x7fffffc0

08002e98 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <LL_ADC_REG_StopConversion+0x24>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	f043 0210 	orr.w	r2, r3, #16
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	7fffffc0 	.word	0x7fffffc0

08002ec0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d101      	bne.n	8002ed8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
	...

08002ee8 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <LL_ADC_INJ_StopConversion+0x24>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	f043 0220 	orr.w	r2, r3, #32
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	7fffffc0 	.word	0x7fffffc0

08002f10 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d101      	bne.n	8002f28 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
	...

08002f38 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f38:	b590      	push	{r4, r7, lr}
 8002f3a:	b089      	sub	sp, #36	; 0x24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e18e      	b.n	8003270 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d109      	bne.n	8002f74 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f7ff f8fb 	bl	800215c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff feef 	bl	8002d5c <LL_ADC_IsDeepPowerDownEnabled>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d004      	beq.n	8002f8e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff fed5 	bl	8002d38 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff ff0a 	bl	8002dac <LL_ADC_IsInternalRegulatorEnabled>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d114      	bne.n	8002fc8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff feee 	bl	8002d84 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fa8:	4b9a      	ldr	r3, [pc, #616]	; (8003214 <HAL_ADC_Init+0x2dc>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	099b      	lsrs	r3, r3, #6
 8002fae:	4a9a      	ldr	r2, [pc, #616]	; (8003218 <HAL_ADC_Init+0x2e0>)
 8002fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb4:	099b      	lsrs	r3, r3, #6
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fba:	e002      	b.n	8002fc2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1f9      	bne.n	8002fbc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff feed 	bl	8002dac <LL_ADC_IsInternalRegulatorEnabled>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10d      	bne.n	8002ff4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fdc:	f043 0210 	orr.w	r2, r3, #16
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe8:	f043 0201 	orr.w	r2, r3, #1
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff ff61 	bl	8002ec0 <LL_ADC_REG_IsConversionOngoing>
 8002ffe:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	2b00      	cmp	r3, #0
 800300a:	f040 8128 	bne.w	800325e <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2b00      	cmp	r3, #0
 8003012:	f040 8124 	bne.w	800325e <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800301e:	f043 0202 	orr.w	r2, r3, #2
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff fefa 	bl	8002e24 <LL_ADC_IsEnabled>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d136      	bne.n	80030a4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a78      	ldr	r2, [pc, #480]	; (800321c <HAL_ADC_Init+0x2e4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d004      	beq.n	800304a <HAL_ADC_Init+0x112>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a76      	ldr	r2, [pc, #472]	; (8003220 <HAL_ADC_Init+0x2e8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d10e      	bne.n	8003068 <HAL_ADC_Init+0x130>
 800304a:	4874      	ldr	r0, [pc, #464]	; (800321c <HAL_ADC_Init+0x2e4>)
 800304c:	f7ff feea 	bl	8002e24 <LL_ADC_IsEnabled>
 8003050:	4604      	mov	r4, r0
 8003052:	4873      	ldr	r0, [pc, #460]	; (8003220 <HAL_ADC_Init+0x2e8>)
 8003054:	f7ff fee6 	bl	8002e24 <LL_ADC_IsEnabled>
 8003058:	4603      	mov	r3, r0
 800305a:	4323      	orrs	r3, r4
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf0c      	ite	eq
 8003060:	2301      	moveq	r3, #1
 8003062:	2300      	movne	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	e008      	b.n	800307a <HAL_ADC_Init+0x142>
 8003068:	486e      	ldr	r0, [pc, #440]	; (8003224 <HAL_ADC_Init+0x2ec>)
 800306a:	f7ff fedb 	bl	8002e24 <LL_ADC_IsEnabled>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	bf0c      	ite	eq
 8003074:	2301      	moveq	r3, #1
 8003076:	2300      	movne	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d012      	beq.n	80030a4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a66      	ldr	r2, [pc, #408]	; (800321c <HAL_ADC_Init+0x2e4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d004      	beq.n	8003092 <HAL_ADC_Init+0x15a>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a64      	ldr	r2, [pc, #400]	; (8003220 <HAL_ADC_Init+0x2e8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d101      	bne.n	8003096 <HAL_ADC_Init+0x15e>
 8003092:	4a65      	ldr	r2, [pc, #404]	; (8003228 <HAL_ADC_Init+0x2f0>)
 8003094:	e000      	b.n	8003098 <HAL_ADC_Init+0x160>
 8003096:	4a65      	ldr	r2, [pc, #404]	; (800322c <HAL_ADC_Init+0x2f4>)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	4619      	mov	r1, r3
 800309e:	4610      	mov	r0, r2
 80030a0:	f7ff fd18 	bl	8002ad4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80030a4:	f7ff fcf4 	bl	8002a90 <HAL_GetREVID>
 80030a8:	4603      	mov	r3, r0
 80030aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d914      	bls.n	80030dc <HAL_ADC_Init+0x1a4>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b10      	cmp	r3, #16
 80030b8:	d110      	bne.n	80030dc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	7d5b      	ldrb	r3, [r3, #21]
 80030be:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030c4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80030ca:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	7f1b      	ldrb	r3, [r3, #28]
 80030d0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80030d2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030d4:	f043 030c 	orr.w	r3, r3, #12
 80030d8:	61bb      	str	r3, [r7, #24]
 80030da:	e00d      	b.n	80030f8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	7d5b      	ldrb	r3, [r3, #21]
 80030e0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030e6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80030ec:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	7f1b      	ldrb	r3, [r3, #28]
 80030f2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	7f1b      	ldrb	r3, [r3, #28]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d106      	bne.n	800310e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	3b01      	subs	r3, #1
 8003106:	045b      	lsls	r3, r3, #17
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4313      	orrs	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	2b00      	cmp	r3, #0
 8003114:	d009      	beq.n	800312a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	4b3f      	ldr	r3, [pc, #252]	; (8003230 <HAL_ADC_Init+0x2f8>)
 8003132:	4013      	ands	r3, r2
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6812      	ldr	r2, [r2, #0]
 8003138:	69b9      	ldr	r1, [r7, #24]
 800313a:	430b      	orrs	r3, r1
 800313c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff febc 	bl	8002ec0 <LL_ADC_REG_IsConversionOngoing>
 8003148:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff fede 	bl	8002f10 <LL_ADC_INJ_IsConversionOngoing>
 8003154:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d14a      	bne.n	80031f2 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d147      	bne.n	80031f2 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	7d1b      	ldrb	r3, [r3, #20]
 8003166:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800316c:	4313      	orrs	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	4b2f      	ldr	r3, [pc, #188]	; (8003234 <HAL_ADC_Init+0x2fc>)
 8003178:	4013      	ands	r3, r2
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6812      	ldr	r2, [r2, #0]
 800317e:	69b9      	ldr	r1, [r7, #24]
 8003180:	430b      	orrs	r3, r1
 8003182:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800318a:	2b01      	cmp	r3, #1
 800318c:	d11b      	bne.n	80031c6 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	4b27      	ldr	r3, [pc, #156]	; (8003238 <HAL_ADC_Init+0x300>)
 800319c:	4013      	ands	r3, r2
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031a2:	3a01      	subs	r2, #1
 80031a4:	0411      	lsls	r1, r2, #16
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031aa:	4311      	orrs	r1, r2
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80031b0:	4311      	orrs	r1, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80031b6:	430a      	orrs	r2, r1
 80031b8:	431a      	orrs	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	611a      	str	r2, [r3, #16]
 80031c4:	e007      	b.n	80031d6 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0201 	bic.w	r2, r2, #1
 80031d4:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 ff39 	bl	8004064 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d120      	bne.n	800323c <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003200:	f023 010f 	bic.w	r1, r3, #15
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	1e5a      	subs	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	631a      	str	r2, [r3, #48]	; 0x30
 8003212:	e01b      	b.n	800324c <HAL_ADC_Init+0x314>
 8003214:	24000014 	.word	0x24000014
 8003218:	053e2d63 	.word	0x053e2d63
 800321c:	40022000 	.word	0x40022000
 8003220:	40022100 	.word	0x40022100
 8003224:	58026000 	.word	0x58026000
 8003228:	40022300 	.word	0x40022300
 800322c:	58026300 	.word	0x58026300
 8003230:	fff0c003 	.word	0xfff0c003
 8003234:	ffffbffc 	.word	0xffffbffc
 8003238:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 020f 	bic.w	r2, r2, #15
 800324a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003250:	f023 0303 	bic.w	r3, r3, #3
 8003254:	f043 0201 	orr.w	r2, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	655a      	str	r2, [r3, #84]	; 0x54
 800325c:	e007      	b.n	800326e <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003262:	f043 0210 	orr.w	r2, r3, #16
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800326e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3724      	adds	r7, #36	; 0x24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd90      	pop	{r4, r7, pc}

08003278 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a5c      	ldr	r2, [pc, #368]	; (80033f8 <HAL_ADC_Start+0x180>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d004      	beq.n	8003294 <HAL_ADC_Start+0x1c>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a5b      	ldr	r2, [pc, #364]	; (80033fc <HAL_ADC_Start+0x184>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d101      	bne.n	8003298 <HAL_ADC_Start+0x20>
 8003294:	4b5a      	ldr	r3, [pc, #360]	; (8003400 <HAL_ADC_Start+0x188>)
 8003296:	e000      	b.n	800329a <HAL_ADC_Start+0x22>
 8003298:	4b5a      	ldr	r3, [pc, #360]	; (8003404 <HAL_ADC_Start+0x18c>)
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff fd30 	bl	8002d00 <LL_ADC_GetMultimode>
 80032a0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fe0a 	bl	8002ec0 <LL_ADC_REG_IsConversionOngoing>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f040 809a 	bne.w	80033e8 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_ADC_Start+0x4a>
 80032be:	2302      	movs	r3, #2
 80032c0:	e095      	b.n	80033ee <HAL_ADC_Start+0x176>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 fde0 	bl	8003e90 <ADC_Enable>
 80032d0:	4603      	mov	r3, r0
 80032d2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80032d4:	7dfb      	ldrb	r3, [r7, #23]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f040 8081 	bne.w	80033de <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032e0:	4b49      	ldr	r3, [pc, #292]	; (8003408 <HAL_ADC_Start+0x190>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a42      	ldr	r2, [pc, #264]	; (80033fc <HAL_ADC_Start+0x184>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d002      	beq.n	80032fc <HAL_ADC_Start+0x84>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	e000      	b.n	80032fe <HAL_ADC_Start+0x86>
 80032fc:	4b3e      	ldr	r3, [pc, #248]	; (80033f8 <HAL_ADC_Start+0x180>)
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6812      	ldr	r2, [r2, #0]
 8003302:	4293      	cmp	r3, r2
 8003304:	d002      	beq.n	800330c <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d105      	bne.n	8003318 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003310:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003324:	d106      	bne.n	8003334 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332a:	f023 0206 	bic.w	r2, r3, #6
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	659a      	str	r2, [r3, #88]	; 0x58
 8003332:	e002      	b.n	800333a <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	221c      	movs	r2, #28
 8003340:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a2b      	ldr	r2, [pc, #172]	; (80033fc <HAL_ADC_Start+0x184>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d002      	beq.n	800335a <HAL_ADC_Start+0xe2>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	e000      	b.n	800335c <HAL_ADC_Start+0xe4>
 800335a:	4b27      	ldr	r3, [pc, #156]	; (80033f8 <HAL_ADC_Start+0x180>)
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	4293      	cmp	r3, r2
 8003362:	d008      	beq.n	8003376 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d005      	beq.n	8003376 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	2b05      	cmp	r3, #5
 800336e:	d002      	beq.n	8003376 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	2b09      	cmp	r3, #9
 8003374:	d114      	bne.n	80033a0 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d007      	beq.n	8003394 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003388:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800338c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff fd69 	bl	8002e70 <LL_ADC_REG_StartConversion>
 800339e:	e025      	b.n	80033ec <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a12      	ldr	r2, [pc, #72]	; (80033fc <HAL_ADC_Start+0x184>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d002      	beq.n	80033bc <HAL_ADC_Start+0x144>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	e000      	b.n	80033be <HAL_ADC_Start+0x146>
 80033bc:	4b0e      	ldr	r3, [pc, #56]	; (80033f8 <HAL_ADC_Start+0x180>)
 80033be:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00f      	beq.n	80033ec <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	655a      	str	r2, [r3, #84]	; 0x54
 80033dc:	e006      	b.n	80033ec <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80033e6:	e001      	b.n	80033ec <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033e8:	2302      	movs	r3, #2
 80033ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80033ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40022000 	.word	0x40022000
 80033fc:	40022100 	.word	0x40022100
 8003400:	40022300 	.word	0x40022300
 8003404:	58026300 	.word	0x58026300
 8003408:	fffff0fe 	.word	0xfffff0fe

0800340c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_ADC_Stop+0x16>
 800341e:	2302      	movs	r3, #2
 8003420:	e021      	b.n	8003466 <HAL_ADC_Stop+0x5a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800342a:	2103      	movs	r1, #3
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 fc73 	bl	8003d18 <ADC_ConversionStop>
 8003432:	4603      	mov	r3, r0
 8003434:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003436:	7bfb      	ldrb	r3, [r7, #15]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10f      	bne.n	800345c <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fdb1 	bl	8003fa4 <ADC_Disable>
 8003442:	4603      	mov	r3, r0
 8003444:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d107      	bne.n	800345c <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003450:	4b07      	ldr	r3, [pc, #28]	; (8003470 <HAL_ADC_Stop+0x64>)
 8003452:	4013      	ands	r3, r2
 8003454:	f043 0201 	orr.w	r2, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003464:	7bfb      	ldrb	r3, [r7, #15]
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	ffffeefe 	.word	0xffffeefe

08003474 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a72      	ldr	r2, [pc, #456]	; (800364c <HAL_ADC_PollForConversion+0x1d8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d004      	beq.n	8003492 <HAL_ADC_PollForConversion+0x1e>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a70      	ldr	r2, [pc, #448]	; (8003650 <HAL_ADC_PollForConversion+0x1dc>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d101      	bne.n	8003496 <HAL_ADC_PollForConversion+0x22>
 8003492:	4b70      	ldr	r3, [pc, #448]	; (8003654 <HAL_ADC_PollForConversion+0x1e0>)
 8003494:	e000      	b.n	8003498 <HAL_ADC_PollForConversion+0x24>
 8003496:	4b70      	ldr	r3, [pc, #448]	; (8003658 <HAL_ADC_PollForConversion+0x1e4>)
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff fc31 	bl	8002d00 <LL_ADC_GetMultimode>
 800349e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d102      	bne.n	80034ae <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80034a8:	2308      	movs	r3, #8
 80034aa:	61fb      	str	r3, [r7, #28]
 80034ac:	e037      	b.n	800351e <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2b05      	cmp	r3, #5
 80034b8:	d002      	beq.n	80034c0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2b09      	cmp	r3, #9
 80034be:	d111      	bne.n	80034e4 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d007      	beq.n	80034de <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d2:	f043 0220 	orr.w	r2, r3, #32
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e0b1      	b.n	8003642 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80034de:	2304      	movs	r3, #4
 80034e0:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80034e2:	e01c      	b.n	800351e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a58      	ldr	r2, [pc, #352]	; (800364c <HAL_ADC_PollForConversion+0x1d8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d004      	beq.n	80034f8 <HAL_ADC_PollForConversion+0x84>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a57      	ldr	r2, [pc, #348]	; (8003650 <HAL_ADC_PollForConversion+0x1dc>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d101      	bne.n	80034fc <HAL_ADC_PollForConversion+0x88>
 80034f8:	4b56      	ldr	r3, [pc, #344]	; (8003654 <HAL_ADC_PollForConversion+0x1e0>)
 80034fa:	e000      	b.n	80034fe <HAL_ADC_PollForConversion+0x8a>
 80034fc:	4b56      	ldr	r3, [pc, #344]	; (8003658 <HAL_ADC_PollForConversion+0x1e4>)
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff fc0c 	bl	8002d1c <LL_ADC_GetMultiDMATransfer>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d007      	beq.n	800351a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	f043 0220 	orr.w	r2, r3, #32
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e093      	b.n	8003642 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800351a:	2304      	movs	r3, #4
 800351c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800351e:	f7ff fa87 	bl	8002a30 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003524:	e021      	b.n	800356a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352c:	d01d      	beq.n	800356a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800352e:	f7ff fa7f 	bl	8002a30 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d302      	bcc.n	8003544 <HAL_ADC_PollForConversion+0xd0>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d112      	bne.n	800356a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	4013      	ands	r3, r2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10b      	bne.n	800356a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003556:	f043 0204 	orr.w	r2, r3, #4
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e06b      	b.n	8003642 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	4013      	ands	r3, r2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0d6      	beq.n	8003526 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff fb2b 	bl	8002be4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01c      	beq.n	80035ce <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	7d5b      	ldrb	r3, [r3, #21]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d118      	bne.n	80035ce <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d111      	bne.n	80035ce <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d105      	bne.n	80035ce <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c6:	f043 0201 	orr.w	r2, r3, #1
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1f      	ldr	r2, [pc, #124]	; (8003650 <HAL_ADC_PollForConversion+0x1dc>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d002      	beq.n	80035de <HAL_ADC_PollForConversion+0x16a>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	e000      	b.n	80035e0 <HAL_ADC_PollForConversion+0x16c>
 80035de:	4b1b      	ldr	r3, [pc, #108]	; (800364c <HAL_ADC_PollForConversion+0x1d8>)
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6812      	ldr	r2, [r2, #0]
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d008      	beq.n	80035fa <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d005      	beq.n	80035fa <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2b05      	cmp	r3, #5
 80035f2:	d002      	beq.n	80035fa <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2b09      	cmp	r3, #9
 80035f8:	d104      	bne.n	8003604 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	61bb      	str	r3, [r7, #24]
 8003602:	e00c      	b.n	800361e <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a11      	ldr	r2, [pc, #68]	; (8003650 <HAL_ADC_PollForConversion+0x1dc>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d002      	beq.n	8003614 <HAL_ADC_PollForConversion+0x1a0>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	e000      	b.n	8003616 <HAL_ADC_PollForConversion+0x1a2>
 8003614:	4b0d      	ldr	r3, [pc, #52]	; (800364c <HAL_ADC_PollForConversion+0x1d8>)
 8003616:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	2b08      	cmp	r3, #8
 8003622:	d104      	bne.n	800362e <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2208      	movs	r2, #8
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	e008      	b.n	8003640 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d103      	bne.n	8003640 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	220c      	movs	r2, #12
 800363e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3720      	adds	r7, #32
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40022000 	.word	0x40022000
 8003650:	40022100 	.word	0x40022100
 8003654:	40022300 	.word	0x40022300
 8003658:	58026300 	.word	0x58026300

0800365c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800366a:	4618      	mov	r0, r3
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
	...

08003678 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003678:	b590      	push	{r4, r7, lr}
 800367a:	b0a1      	sub	sp, #132	; 0x84
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003688:	2300      	movs	r3, #0
 800368a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	4a9d      	ldr	r2, [pc, #628]	; (8003908 <HAL_ADC_ConfigChannel+0x290>)
 8003692:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_ADC_ConfigChannel+0x2a>
 800369e:	2302      	movs	r3, #2
 80036a0:	e321      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x66e>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff fc06 	bl	8002ec0 <LL_ADC_REG_IsConversionOngoing>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f040 8306 	bne.w	8003cc8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d108      	bne.n	80036da <HAL_ADC_ConfigChannel+0x62>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	0e9b      	lsrs	r3, r3, #26
 80036ce:	f003 031f 	and.w	r3, r3, #31
 80036d2:	2201      	movs	r2, #1
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	e016      	b.n	8003708 <HAL_ADC_ConfigChannel+0x90>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036e2:	fa93 f3a3 	rbit	r3, r3
 80036e6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036ea:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80036ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80036f2:	2320      	movs	r3, #32
 80036f4:	e003      	b.n	80036fe <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80036f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036f8:	fab3 f383 	clz	r3, r3
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	f003 031f 	and.w	r3, r3, #31
 8003702:	2201      	movs	r2, #1
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6812      	ldr	r2, [r2, #0]
 800370c:	69d1      	ldr	r1, [r2, #28]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	430b      	orrs	r3, r1
 8003714:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6818      	ldr	r0, [r3, #0]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	6859      	ldr	r1, [r3, #4]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	461a      	mov	r2, r3
 8003724:	f7ff fa71 	bl	8002c0a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff fbc7 	bl	8002ec0 <LL_ADC_REG_IsConversionOngoing>
 8003732:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fbe9 	bl	8002f10 <LL_ADC_INJ_IsConversionOngoing>
 800373e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003742:	2b00      	cmp	r3, #0
 8003744:	f040 80b3 	bne.w	80038ae <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003748:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800374a:	2b00      	cmp	r3, #0
 800374c:	f040 80af 	bne.w	80038ae <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6818      	ldr	r0, [r3, #0]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	6819      	ldr	r1, [r3, #0]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	461a      	mov	r2, r3
 800375e:	f7ff fa80 	bl	8002c62 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003762:	4b6a      	ldr	r3, [pc, #424]	; (800390c <HAL_ADC_ConfigChannel+0x294>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800376a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800376e:	d10b      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x110>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	695a      	ldr	r2, [r3, #20]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	089b      	lsrs	r3, r3, #2
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	e01d      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x14c>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f003 0310 	and.w	r3, r3, #16
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10b      	bne.n	80037ae <HAL_ADC_ConfigChannel+0x136>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	695a      	ldr	r2, [r3, #20]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	089b      	lsrs	r3, r3, #2
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	e00a      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x14c>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	695a      	ldr	r2, [r3, #20]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	089b      	lsrs	r3, r3, #2
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d027      	beq.n	800381e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6818      	ldr	r0, [r3, #0]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	6919      	ldr	r1, [r3, #16]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037dc:	f7ff f9ae 	bl	8002b3c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6818      	ldr	r0, [r3, #0]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	6919      	ldr	r1, [r3, #16]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	7e5b      	ldrb	r3, [r3, #25]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d102      	bne.n	80037f6 <HAL_ADC_ConfigChannel+0x17e>
 80037f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80037f4:	e000      	b.n	80037f8 <HAL_ADC_ConfigChannel+0x180>
 80037f6:	2300      	movs	r3, #0
 80037f8:	461a      	mov	r2, r3
 80037fa:	f7ff f9d8 	bl	8002bae <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6919      	ldr	r1, [r3, #16]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	7e1b      	ldrb	r3, [r3, #24]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d102      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x19c>
 800380e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003812:	e000      	b.n	8003816 <HAL_ADC_ConfigChannel+0x19e>
 8003814:	2300      	movs	r3, #0
 8003816:	461a      	mov	r2, r3
 8003818:	f7ff f9b0 	bl	8002b7c <LL_ADC_SetDataRightShift>
 800381c:	e047      	b.n	80038ae <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003824:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	069b      	lsls	r3, r3, #26
 800382e:	429a      	cmp	r2, r3
 8003830:	d107      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003840:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003848:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	069b      	lsls	r3, r3, #26
 8003852:	429a      	cmp	r2, r3
 8003854:	d107      	bne.n	8003866 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003864:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800386c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	069b      	lsls	r3, r3, #26
 8003876:	429a      	cmp	r2, r3
 8003878:	d107      	bne.n	800388a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003888:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003890:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	069b      	lsls	r3, r3, #26
 800389a:	429a      	cmp	r2, r3
 800389c:	d107      	bne.n	80038ae <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80038ac:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7ff fab6 	bl	8002e24 <LL_ADC_IsEnabled>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f040 820d 	bne.w	8003cda <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6818      	ldr	r0, [r3, #0]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	6819      	ldr	r1, [r3, #0]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	461a      	mov	r2, r3
 80038ce:	f7ff f9f3 	bl	8002cb8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	4a0c      	ldr	r2, [pc, #48]	; (8003908 <HAL_ADC_ConfigChannel+0x290>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	f040 8133 	bne.w	8003b44 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d110      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x298>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	0e9b      	lsrs	r3, r3, #26
 80038f4:	3301      	adds	r3, #1
 80038f6:	f003 031f 	and.w	r3, r3, #31
 80038fa:	2b09      	cmp	r3, #9
 80038fc:	bf94      	ite	ls
 80038fe:	2301      	movls	r3, #1
 8003900:	2300      	movhi	r3, #0
 8003902:	b2db      	uxtb	r3, r3
 8003904:	e01e      	b.n	8003944 <HAL_ADC_ConfigChannel+0x2cc>
 8003906:	bf00      	nop
 8003908:	47ff0000 	.word	0x47ff0000
 800390c:	5c001000 	.word	0x5c001000
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003918:	fa93 f3a3 	rbit	r3, r3
 800391c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800391e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003920:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003928:	2320      	movs	r3, #32
 800392a:	e003      	b.n	8003934 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800392c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800392e:	fab3 f383 	clz	r3, r3
 8003932:	b2db      	uxtb	r3, r3
 8003934:	3301      	adds	r3, #1
 8003936:	f003 031f 	and.w	r3, r3, #31
 800393a:	2b09      	cmp	r3, #9
 800393c:	bf94      	ite	ls
 800393e:	2301      	movls	r3, #1
 8003940:	2300      	movhi	r3, #0
 8003942:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003944:	2b00      	cmp	r3, #0
 8003946:	d079      	beq.n	8003a3c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003950:	2b00      	cmp	r3, #0
 8003952:	d107      	bne.n	8003964 <HAL_ADC_ConfigChannel+0x2ec>
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	0e9b      	lsrs	r3, r3, #26
 800395a:	3301      	adds	r3, #1
 800395c:	069b      	lsls	r3, r3, #26
 800395e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003962:	e015      	b.n	8003990 <HAL_ADC_ConfigChannel+0x318>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800396c:	fa93 f3a3 	rbit	r3, r3
 8003970:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003974:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800397c:	2320      	movs	r3, #32
 800397e:	e003      	b.n	8003988 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003982:	fab3 f383 	clz	r3, r3
 8003986:	b2db      	uxtb	r3, r3
 8003988:	3301      	adds	r3, #1
 800398a:	069b      	lsls	r3, r3, #26
 800398c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003998:	2b00      	cmp	r3, #0
 800399a:	d109      	bne.n	80039b0 <HAL_ADC_ConfigChannel+0x338>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	0e9b      	lsrs	r3, r3, #26
 80039a2:	3301      	adds	r3, #1
 80039a4:	f003 031f 	and.w	r3, r3, #31
 80039a8:	2101      	movs	r1, #1
 80039aa:	fa01 f303 	lsl.w	r3, r1, r3
 80039ae:	e017      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x368>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039b8:	fa93 f3a3 	rbit	r3, r3
 80039bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80039be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80039c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80039c8:	2320      	movs	r3, #32
 80039ca:	e003      	b.n	80039d4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80039cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ce:	fab3 f383 	clz	r3, r3
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	3301      	adds	r3, #1
 80039d6:	f003 031f 	and.w	r3, r3, #31
 80039da:	2101      	movs	r1, #1
 80039dc:	fa01 f303 	lsl.w	r3, r1, r3
 80039e0:	ea42 0103 	orr.w	r1, r2, r3
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10a      	bne.n	8003a06 <HAL_ADC_ConfigChannel+0x38e>
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	0e9b      	lsrs	r3, r3, #26
 80039f6:	3301      	adds	r3, #1
 80039f8:	f003 021f 	and.w	r2, r3, #31
 80039fc:	4613      	mov	r3, r2
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	4413      	add	r3, r2
 8003a02:	051b      	lsls	r3, r3, #20
 8003a04:	e018      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x3c0>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a0e:	fa93 f3a3 	rbit	r3, r3
 8003a12:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a16:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003a1e:	2320      	movs	r3, #32
 8003a20:	e003      	b.n	8003a2a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a24:	fab3 f383 	clz	r3, r3
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	f003 021f 	and.w	r2, r3, #31
 8003a30:	4613      	mov	r3, r2
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	4413      	add	r3, r2
 8003a36:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a38:	430b      	orrs	r3, r1
 8003a3a:	e07e      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d107      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x3e0>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	0e9b      	lsrs	r3, r3, #26
 8003a4e:	3301      	adds	r3, #1
 8003a50:	069b      	lsls	r3, r3, #26
 8003a52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a56:	e015      	b.n	8003a84 <HAL_ADC_ConfigChannel+0x40c>
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a60:	fa93 f3a3 	rbit	r3, r3
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003a70:	2320      	movs	r3, #32
 8003a72:	e003      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a76:	fab3 f383 	clz	r3, r3
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	069b      	lsls	r3, r3, #26
 8003a80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d109      	bne.n	8003aa4 <HAL_ADC_ConfigChannel+0x42c>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	0e9b      	lsrs	r3, r3, #26
 8003a96:	3301      	adds	r3, #1
 8003a98:	f003 031f 	and.w	r3, r3, #31
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa2:	e017      	b.n	8003ad4 <HAL_ADC_ConfigChannel+0x45c>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	fa93 f3a3 	rbit	r3, r3
 8003ab0:	61bb      	str	r3, [r7, #24]
  return result;
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003abc:	2320      	movs	r3, #32
 8003abe:	e003      	b.n	8003ac8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	fab3 f383 	clz	r3, r3
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	3301      	adds	r3, #1
 8003aca:	f003 031f 	and.w	r3, r3, #31
 8003ace:	2101      	movs	r1, #1
 8003ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad4:	ea42 0103 	orr.w	r1, r2, r3
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10d      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x488>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	0e9b      	lsrs	r3, r3, #26
 8003aea:	3301      	adds	r3, #1
 8003aec:	f003 021f 	and.w	r2, r3, #31
 8003af0:	4613      	mov	r3, r2
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	4413      	add	r3, r2
 8003af6:	3b1e      	subs	r3, #30
 8003af8:	051b      	lsls	r3, r3, #20
 8003afa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003afe:	e01b      	b.n	8003b38 <HAL_ADC_ConfigChannel+0x4c0>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	fa93 f3a3 	rbit	r3, r3
 8003b0c:	60fb      	str	r3, [r7, #12]
  return result;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003b18:	2320      	movs	r3, #32
 8003b1a:	e003      	b.n	8003b24 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	fab3 f383 	clz	r3, r3
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	3301      	adds	r3, #1
 8003b26:	f003 021f 	and.w	r2, r3, #31
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	4413      	add	r3, r2
 8003b30:	3b1e      	subs	r3, #30
 8003b32:	051b      	lsls	r3, r3, #20
 8003b34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	6892      	ldr	r2, [r2, #8]
 8003b3e:	4619      	mov	r1, r3
 8003b40:	f7ff f88f 	bl	8002c62 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f280 80c6 	bge.w	8003cda <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a67      	ldr	r2, [pc, #412]	; (8003cf0 <HAL_ADC_ConfigChannel+0x678>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d004      	beq.n	8003b62 <HAL_ADC_ConfigChannel+0x4ea>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a65      	ldr	r2, [pc, #404]	; (8003cf4 <HAL_ADC_ConfigChannel+0x67c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d101      	bne.n	8003b66 <HAL_ADC_ConfigChannel+0x4ee>
 8003b62:	4b65      	ldr	r3, [pc, #404]	; (8003cf8 <HAL_ADC_ConfigChannel+0x680>)
 8003b64:	e000      	b.n	8003b68 <HAL_ADC_ConfigChannel+0x4f0>
 8003b66:	4b65      	ldr	r3, [pc, #404]	; (8003cfc <HAL_ADC_ConfigChannel+0x684>)
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fe ffd9 	bl	8002b20 <LL_ADC_GetCommonPathInternalCh>
 8003b6e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a5e      	ldr	r2, [pc, #376]	; (8003cf0 <HAL_ADC_ConfigChannel+0x678>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d004      	beq.n	8003b84 <HAL_ADC_ConfigChannel+0x50c>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a5d      	ldr	r2, [pc, #372]	; (8003cf4 <HAL_ADC_ConfigChannel+0x67c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d10e      	bne.n	8003ba2 <HAL_ADC_ConfigChannel+0x52a>
 8003b84:	485a      	ldr	r0, [pc, #360]	; (8003cf0 <HAL_ADC_ConfigChannel+0x678>)
 8003b86:	f7ff f94d 	bl	8002e24 <LL_ADC_IsEnabled>
 8003b8a:	4604      	mov	r4, r0
 8003b8c:	4859      	ldr	r0, [pc, #356]	; (8003cf4 <HAL_ADC_ConfigChannel+0x67c>)
 8003b8e:	f7ff f949 	bl	8002e24 <LL_ADC_IsEnabled>
 8003b92:	4603      	mov	r3, r0
 8003b94:	4323      	orrs	r3, r4
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	bf0c      	ite	eq
 8003b9a:	2301      	moveq	r3, #1
 8003b9c:	2300      	movne	r3, #0
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	e008      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x53c>
 8003ba2:	4857      	ldr	r0, [pc, #348]	; (8003d00 <HAL_ADC_ConfigChannel+0x688>)
 8003ba4:	f7ff f93e 	bl	8002e24 <LL_ADC_IsEnabled>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	bf0c      	ite	eq
 8003bae:	2301      	moveq	r3, #1
 8003bb0:	2300      	movne	r3, #0
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d07d      	beq.n	8003cb4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a51      	ldr	r2, [pc, #324]	; (8003d04 <HAL_ADC_ConfigChannel+0x68c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d130      	bne.n	8003c24 <HAL_ADC_ConfigChannel+0x5ac>
 8003bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d12b      	bne.n	8003c24 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a4b      	ldr	r2, [pc, #300]	; (8003d00 <HAL_ADC_ConfigChannel+0x688>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	f040 8081 	bne.w	8003cda <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a44      	ldr	r2, [pc, #272]	; (8003cf0 <HAL_ADC_ConfigChannel+0x678>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d004      	beq.n	8003bec <HAL_ADC_ConfigChannel+0x574>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a43      	ldr	r2, [pc, #268]	; (8003cf4 <HAL_ADC_ConfigChannel+0x67c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d101      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x578>
 8003bec:	4a42      	ldr	r2, [pc, #264]	; (8003cf8 <HAL_ADC_ConfigChannel+0x680>)
 8003bee:	e000      	b.n	8003bf2 <HAL_ADC_ConfigChannel+0x57a>
 8003bf0:	4a42      	ldr	r2, [pc, #264]	; (8003cfc <HAL_ADC_ConfigChannel+0x684>)
 8003bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	f7fe ff7d 	bl	8002afa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c00:	4b41      	ldr	r3, [pc, #260]	; (8003d08 <HAL_ADC_ConfigChannel+0x690>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	099b      	lsrs	r3, r3, #6
 8003c06:	4a41      	ldr	r2, [pc, #260]	; (8003d0c <HAL_ADC_ConfigChannel+0x694>)
 8003c08:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0c:	099b      	lsrs	r3, r3, #6
 8003c0e:	3301      	adds	r3, #1
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003c14:	e002      	b.n	8003c1c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f9      	bne.n	8003c16 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c22:	e05a      	b.n	8003cda <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a39      	ldr	r2, [pc, #228]	; (8003d10 <HAL_ADC_ConfigChannel+0x698>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d11e      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x5f4>
 8003c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d119      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a30      	ldr	r2, [pc, #192]	; (8003d00 <HAL_ADC_ConfigChannel+0x688>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d14b      	bne.n	8003cda <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a2a      	ldr	r2, [pc, #168]	; (8003cf0 <HAL_ADC_ConfigChannel+0x678>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d004      	beq.n	8003c56 <HAL_ADC_ConfigChannel+0x5de>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a28      	ldr	r2, [pc, #160]	; (8003cf4 <HAL_ADC_ConfigChannel+0x67c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d101      	bne.n	8003c5a <HAL_ADC_ConfigChannel+0x5e2>
 8003c56:	4a28      	ldr	r2, [pc, #160]	; (8003cf8 <HAL_ADC_ConfigChannel+0x680>)
 8003c58:	e000      	b.n	8003c5c <HAL_ADC_ConfigChannel+0x5e4>
 8003c5a:	4a28      	ldr	r2, [pc, #160]	; (8003cfc <HAL_ADC_ConfigChannel+0x684>)
 8003c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c62:	4619      	mov	r1, r3
 8003c64:	4610      	mov	r0, r2
 8003c66:	f7fe ff48 	bl	8002afa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c6a:	e036      	b.n	8003cda <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a28      	ldr	r2, [pc, #160]	; (8003d14 <HAL_ADC_ConfigChannel+0x69c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d131      	bne.n	8003cda <HAL_ADC_ConfigChannel+0x662>
 8003c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d12c      	bne.n	8003cda <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a1e      	ldr	r2, [pc, #120]	; (8003d00 <HAL_ADC_ConfigChannel+0x688>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d127      	bne.n	8003cda <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a18      	ldr	r2, [pc, #96]	; (8003cf0 <HAL_ADC_ConfigChannel+0x678>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d004      	beq.n	8003c9e <HAL_ADC_ConfigChannel+0x626>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a16      	ldr	r2, [pc, #88]	; (8003cf4 <HAL_ADC_ConfigChannel+0x67c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d101      	bne.n	8003ca2 <HAL_ADC_ConfigChannel+0x62a>
 8003c9e:	4a16      	ldr	r2, [pc, #88]	; (8003cf8 <HAL_ADC_ConfigChannel+0x680>)
 8003ca0:	e000      	b.n	8003ca4 <HAL_ADC_ConfigChannel+0x62c>
 8003ca2:	4a16      	ldr	r2, [pc, #88]	; (8003cfc <HAL_ADC_ConfigChannel+0x684>)
 8003ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003caa:	4619      	mov	r1, r3
 8003cac:	4610      	mov	r0, r2
 8003cae:	f7fe ff24 	bl	8002afa <LL_ADC_SetCommonPathInternalCh>
 8003cb2:	e012      	b.n	8003cda <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb8:	f043 0220 	orr.w	r2, r3, #32
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003cc6:	e008      	b.n	8003cda <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ccc:	f043 0220 	orr.w	r2, r3, #32
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ce2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3784      	adds	r7, #132	; 0x84
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd90      	pop	{r4, r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40022000 	.word	0x40022000
 8003cf4:	40022100 	.word	0x40022100
 8003cf8:	40022300 	.word	0x40022300
 8003cfc:	58026300 	.word	0x58026300
 8003d00:	58026000 	.word	0x58026000
 8003d04:	cb840000 	.word	0xcb840000
 8003d08:	24000014 	.word	0x24000014
 8003d0c:	053e2d63 	.word	0x053e2d63
 8003d10:	c7520000 	.word	0xc7520000
 8003d14:	cfb80000 	.word	0xcfb80000

08003d18 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b088      	sub	sp, #32
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff f8c6 	bl	8002ec0 <LL_ADC_REG_IsConversionOngoing>
 8003d34:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7ff f8e8 	bl	8002f10 <LL_ADC_INJ_IsConversionOngoing>
 8003d40:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d103      	bne.n	8003d50 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 8098 	beq.w	8003e80 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d02a      	beq.n	8003db4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	7d5b      	ldrb	r3, [r3, #21]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d126      	bne.n	8003db4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	7d1b      	ldrb	r3, [r3, #20]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d122      	bne.n	8003db4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003d72:	e014      	b.n	8003d9e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	4a45      	ldr	r2, [pc, #276]	; (8003e8c <ADC_ConversionStop+0x174>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d90d      	bls.n	8003d98 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d80:	f043 0210 	orr.w	r2, r3, #16
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8c:	f043 0201 	orr.w	r2, r3, #1
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e074      	b.n	8003e82 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da8:	2b40      	cmp	r3, #64	; 0x40
 8003daa:	d1e3      	bne.n	8003d74 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2240      	movs	r2, #64	; 0x40
 8003db2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d014      	beq.n	8003de4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff f87e 	bl	8002ec0 <LL_ADC_REG_IsConversionOngoing>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00c      	beq.n	8003de4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff f83b 	bl	8002e4a <LL_ADC_IsDisableOngoing>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d104      	bne.n	8003de4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7ff f85a 	bl	8002e98 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d014      	beq.n	8003e14 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff f88e 	bl	8002f10 <LL_ADC_INJ_IsConversionOngoing>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00c      	beq.n	8003e14 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff f823 	bl	8002e4a <LL_ADC_IsDisableOngoing>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d104      	bne.n	8003e14 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff f86a 	bl	8002ee8 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d005      	beq.n	8003e26 <ADC_ConversionStop+0x10e>
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d105      	bne.n	8003e2c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003e20:	230c      	movs	r3, #12
 8003e22:	617b      	str	r3, [r7, #20]
        break;
 8003e24:	e005      	b.n	8003e32 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003e26:	2308      	movs	r3, #8
 8003e28:	617b      	str	r3, [r7, #20]
        break;
 8003e2a:	e002      	b.n	8003e32 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003e2c:	2304      	movs	r3, #4
 8003e2e:	617b      	str	r3, [r7, #20]
        break;
 8003e30:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003e32:	f7fe fdfd 	bl	8002a30 <HAL_GetTick>
 8003e36:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003e38:	e01b      	b.n	8003e72 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003e3a:	f7fe fdf9 	bl	8002a30 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b05      	cmp	r3, #5
 8003e46:	d914      	bls.n	8003e72 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	4013      	ands	r3, r2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00d      	beq.n	8003e72 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5a:	f043 0210 	orr.w	r2, r3, #16
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e66:	f043 0201 	orr.w	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e007      	b.n	8003e82 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1dc      	bne.n	8003e3a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3720      	adds	r7, #32
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	000cdbff 	.word	0x000cdbff

08003e90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fe ffc1 	bl	8002e24 <LL_ADC_IsEnabled>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d16e      	bne.n	8003f86 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	4b38      	ldr	r3, [pc, #224]	; (8003f90 <ADC_Enable+0x100>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00d      	beq.n	8003ed2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eba:	f043 0210 	orr.w	r2, r3, #16
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec6:	f043 0201 	orr.w	r2, r3, #1
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e05a      	b.n	8003f88 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fe ff7c 	bl	8002dd4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003edc:	f7fe fda8 	bl	8002a30 <HAL_GetTick>
 8003ee0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a2b      	ldr	r2, [pc, #172]	; (8003f94 <ADC_Enable+0x104>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d004      	beq.n	8003ef6 <ADC_Enable+0x66>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a29      	ldr	r2, [pc, #164]	; (8003f98 <ADC_Enable+0x108>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d101      	bne.n	8003efa <ADC_Enable+0x6a>
 8003ef6:	4b29      	ldr	r3, [pc, #164]	; (8003f9c <ADC_Enable+0x10c>)
 8003ef8:	e000      	b.n	8003efc <ADC_Enable+0x6c>
 8003efa:	4b29      	ldr	r3, [pc, #164]	; (8003fa0 <ADC_Enable+0x110>)
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7fe feff 	bl	8002d00 <LL_ADC_GetMultimode>
 8003f02:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a23      	ldr	r2, [pc, #140]	; (8003f98 <ADC_Enable+0x108>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d002      	beq.n	8003f14 <ADC_Enable+0x84>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	e000      	b.n	8003f16 <ADC_Enable+0x86>
 8003f14:	4b1f      	ldr	r3, [pc, #124]	; (8003f94 <ADC_Enable+0x104>)
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6812      	ldr	r2, [r2, #0]
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d02c      	beq.n	8003f78 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d130      	bne.n	8003f86 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f24:	e028      	b.n	8003f78 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fe ff7a 	bl	8002e24 <LL_ADC_IsEnabled>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d104      	bne.n	8003f40 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fe ff4a 	bl	8002dd4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f40:	f7fe fd76 	bl	8002a30 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d914      	bls.n	8003f78 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d00d      	beq.n	8003f78 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f60:	f043 0210 	orr.w	r2, r3, #16
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6c:	f043 0201 	orr.w	r2, r3, #1
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e007      	b.n	8003f88 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d1cf      	bne.n	8003f26 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	8000003f 	.word	0x8000003f
 8003f94:	40022000 	.word	0x40022000
 8003f98:	40022100 	.word	0x40022100
 8003f9c:	40022300 	.word	0x40022300
 8003fa0:	58026300 	.word	0x58026300

08003fa4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fe ff4a 	bl	8002e4a <LL_ADC_IsDisableOngoing>
 8003fb6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7fe ff31 	bl	8002e24 <LL_ADC_IsEnabled>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d047      	beq.n	8004058 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d144      	bne.n	8004058 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 030d 	and.w	r3, r3, #13
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d10c      	bne.n	8003ff6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fe ff0b 	bl	8002dfc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2203      	movs	r2, #3
 8003fec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003fee:	f7fe fd1f 	bl	8002a30 <HAL_GetTick>
 8003ff2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ff4:	e029      	b.n	800404a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffa:	f043 0210 	orr.w	r2, r3, #16
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004006:	f043 0201 	orr.w	r2, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e023      	b.n	800405a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004012:	f7fe fd0d 	bl	8002a30 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d914      	bls.n	800404a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00d      	beq.n	800404a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004032:	f043 0210 	orr.w	r2, r3, #16
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403e:	f043 0201 	orr.w	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e007      	b.n	800405a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1dc      	bne.n	8004012 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a79      	ldr	r2, [pc, #484]	; (8004258 <ADC_ConfigureBoostMode+0x1f4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d004      	beq.n	8004080 <ADC_ConfigureBoostMode+0x1c>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a78      	ldr	r2, [pc, #480]	; (800425c <ADC_ConfigureBoostMode+0x1f8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d109      	bne.n	8004094 <ADC_ConfigureBoostMode+0x30>
 8004080:	4b77      	ldr	r3, [pc, #476]	; (8004260 <ADC_ConfigureBoostMode+0x1fc>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004088:	2b00      	cmp	r3, #0
 800408a:	bf14      	ite	ne
 800408c:	2301      	movne	r3, #1
 800408e:	2300      	moveq	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	e008      	b.n	80040a6 <ADC_ConfigureBoostMode+0x42>
 8004094:	4b73      	ldr	r3, [pc, #460]	; (8004264 <ADC_ConfigureBoostMode+0x200>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800409c:	2b00      	cmp	r3, #0
 800409e:	bf14      	ite	ne
 80040a0:	2301      	movne	r3, #1
 80040a2:	2300      	moveq	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d01c      	beq.n	80040e4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80040aa:	f002 f96d 	bl	8006388 <HAL_RCC_GetHCLKFreq>
 80040ae:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040b8:	d010      	beq.n	80040dc <ADC_ConfigureBoostMode+0x78>
 80040ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040be:	d871      	bhi.n	80041a4 <ADC_ConfigureBoostMode+0x140>
 80040c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c4:	d002      	beq.n	80040cc <ADC_ConfigureBoostMode+0x68>
 80040c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040ca:	d16b      	bne.n	80041a4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	0c1b      	lsrs	r3, r3, #16
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d8:	60fb      	str	r3, [r7, #12]
        break;
 80040da:	e066      	b.n	80041aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	089b      	lsrs	r3, r3, #2
 80040e0:	60fb      	str	r3, [r7, #12]
        break;
 80040e2:	e062      	b.n	80041aa <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80040e4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80040e8:	f003 f8ea 	bl	80072c0 <HAL_RCCEx_GetPeriphCLKFreq>
 80040ec:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80040f6:	d051      	beq.n	800419c <ADC_ConfigureBoostMode+0x138>
 80040f8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80040fc:	d854      	bhi.n	80041a8 <ADC_ConfigureBoostMode+0x144>
 80040fe:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004102:	d047      	beq.n	8004194 <ADC_ConfigureBoostMode+0x130>
 8004104:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004108:	d84e      	bhi.n	80041a8 <ADC_ConfigureBoostMode+0x144>
 800410a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800410e:	d03d      	beq.n	800418c <ADC_ConfigureBoostMode+0x128>
 8004110:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004114:	d848      	bhi.n	80041a8 <ADC_ConfigureBoostMode+0x144>
 8004116:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800411a:	d033      	beq.n	8004184 <ADC_ConfigureBoostMode+0x120>
 800411c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004120:	d842      	bhi.n	80041a8 <ADC_ConfigureBoostMode+0x144>
 8004122:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004126:	d029      	beq.n	800417c <ADC_ConfigureBoostMode+0x118>
 8004128:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800412c:	d83c      	bhi.n	80041a8 <ADC_ConfigureBoostMode+0x144>
 800412e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004132:	d01a      	beq.n	800416a <ADC_ConfigureBoostMode+0x106>
 8004134:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004138:	d836      	bhi.n	80041a8 <ADC_ConfigureBoostMode+0x144>
 800413a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800413e:	d014      	beq.n	800416a <ADC_ConfigureBoostMode+0x106>
 8004140:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004144:	d830      	bhi.n	80041a8 <ADC_ConfigureBoostMode+0x144>
 8004146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800414a:	d00e      	beq.n	800416a <ADC_ConfigureBoostMode+0x106>
 800414c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004150:	d82a      	bhi.n	80041a8 <ADC_ConfigureBoostMode+0x144>
 8004152:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004156:	d008      	beq.n	800416a <ADC_ConfigureBoostMode+0x106>
 8004158:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800415c:	d824      	bhi.n	80041a8 <ADC_ConfigureBoostMode+0x144>
 800415e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004162:	d002      	beq.n	800416a <ADC_ConfigureBoostMode+0x106>
 8004164:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004168:	d11e      	bne.n	80041a8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	0c9b      	lsrs	r3, r3, #18
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	fbb2 f3f3 	udiv	r3, r2, r3
 8004178:	60fb      	str	r3, [r7, #12]
        break;
 800417a:	e016      	b.n	80041aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	091b      	lsrs	r3, r3, #4
 8004180:	60fb      	str	r3, [r7, #12]
        break;
 8004182:	e012      	b.n	80041aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	60fb      	str	r3, [r7, #12]
        break;
 800418a:	e00e      	b.n	80041aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	099b      	lsrs	r3, r3, #6
 8004190:	60fb      	str	r3, [r7, #12]
        break;
 8004192:	e00a      	b.n	80041aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	09db      	lsrs	r3, r3, #7
 8004198:	60fb      	str	r3, [r7, #12]
        break;
 800419a:	e006      	b.n	80041aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	0a1b      	lsrs	r3, r3, #8
 80041a0:	60fb      	str	r3, [r7, #12]
        break;
 80041a2:	e002      	b.n	80041aa <ADC_ConfigureBoostMode+0x146>
        break;
 80041a4:	bf00      	nop
 80041a6:	e000      	b.n	80041aa <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80041a8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80041aa:	f7fe fc71 	bl	8002a90 <HAL_GetREVID>
 80041ae:	4603      	mov	r3, r0
 80041b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d815      	bhi.n	80041e4 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4a2b      	ldr	r2, [pc, #172]	; (8004268 <ADC_ConfigureBoostMode+0x204>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d908      	bls.n	80041d2 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ce:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80041d0:	e03e      	b.n	8004250 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041e0:	609a      	str	r2, [r3, #8]
}
 80041e2:	e035      	b.n	8004250 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	085b      	lsrs	r3, r3, #1
 80041e8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4a1f      	ldr	r2, [pc, #124]	; (800426c <ADC_ConfigureBoostMode+0x208>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d808      	bhi.n	8004204 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004200:	609a      	str	r2, [r3, #8]
}
 8004202:	e025      	b.n	8004250 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4a1a      	ldr	r2, [pc, #104]	; (8004270 <ADC_ConfigureBoostMode+0x20c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d80a      	bhi.n	8004222 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800421e:	609a      	str	r2, [r3, #8]
}
 8004220:	e016      	b.n	8004250 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4a13      	ldr	r2, [pc, #76]	; (8004274 <ADC_ConfigureBoostMode+0x210>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d80a      	bhi.n	8004240 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800423c:	609a      	str	r2, [r3, #8]
}
 800423e:	e007      	b.n	8004250 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800424e:	609a      	str	r2, [r3, #8]
}
 8004250:	bf00      	nop
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40022000 	.word	0x40022000
 800425c:	40022100 	.word	0x40022100
 8004260:	40022300 	.word	0x40022300
 8004264:	58026300 	.word	0x58026300
 8004268:	01312d00 	.word	0x01312d00
 800426c:	005f5e10 	.word	0x005f5e10
 8004270:	00bebc20 	.word	0x00bebc20
 8004274:	017d7840 	.word	0x017d7840

08004278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f003 0307 	and.w	r3, r3, #7
 8004286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004288:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <__NVIC_SetPriorityGrouping+0x40>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004294:	4013      	ands	r3, r2
 8004296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80042a0:	4b06      	ldr	r3, [pc, #24]	; (80042bc <__NVIC_SetPriorityGrouping+0x44>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042a6:	4a04      	ldr	r2, [pc, #16]	; (80042b8 <__NVIC_SetPriorityGrouping+0x40>)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	60d3      	str	r3, [r2, #12]
}
 80042ac:	bf00      	nop
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	e000ed00 	.word	0xe000ed00
 80042bc:	05fa0000 	.word	0x05fa0000

080042c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042c4:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <__NVIC_GetPriorityGrouping+0x18>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	0a1b      	lsrs	r3, r3, #8
 80042ca:	f003 0307 	and.w	r3, r3, #7
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	e000ed00 	.word	0xe000ed00

080042dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	4603      	mov	r3, r0
 80042e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80042e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	db0b      	blt.n	8004306 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042ee:	88fb      	ldrh	r3, [r7, #6]
 80042f0:	f003 021f 	and.w	r2, r3, #31
 80042f4:	4907      	ldr	r1, [pc, #28]	; (8004314 <__NVIC_EnableIRQ+0x38>)
 80042f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	2001      	movs	r0, #1
 80042fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	e000e100 	.word	0xe000e100

08004318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	6039      	str	r1, [r7, #0]
 8004322:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004324:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004328:	2b00      	cmp	r3, #0
 800432a:	db0a      	blt.n	8004342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	b2da      	uxtb	r2, r3
 8004330:	490c      	ldr	r1, [pc, #48]	; (8004364 <__NVIC_SetPriority+0x4c>)
 8004332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004336:	0112      	lsls	r2, r2, #4
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	440b      	add	r3, r1
 800433c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004340:	e00a      	b.n	8004358 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	b2da      	uxtb	r2, r3
 8004346:	4908      	ldr	r1, [pc, #32]	; (8004368 <__NVIC_SetPriority+0x50>)
 8004348:	88fb      	ldrh	r3, [r7, #6]
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	3b04      	subs	r3, #4
 8004350:	0112      	lsls	r2, r2, #4
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	440b      	add	r3, r1
 8004356:	761a      	strb	r2, [r3, #24]
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	e000e100 	.word	0xe000e100
 8004368:	e000ed00 	.word	0xe000ed00

0800436c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800436c:	b480      	push	{r7}
 800436e:	b089      	sub	sp, #36	; 0x24
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	f1c3 0307 	rsb	r3, r3, #7
 8004386:	2b04      	cmp	r3, #4
 8004388:	bf28      	it	cs
 800438a:	2304      	movcs	r3, #4
 800438c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	3304      	adds	r3, #4
 8004392:	2b06      	cmp	r3, #6
 8004394:	d902      	bls.n	800439c <NVIC_EncodePriority+0x30>
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	3b03      	subs	r3, #3
 800439a:	e000      	b.n	800439e <NVIC_EncodePriority+0x32>
 800439c:	2300      	movs	r3, #0
 800439e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043a0:	f04f 32ff 	mov.w	r2, #4294967295
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	43da      	mvns	r2, r3
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	401a      	ands	r2, r3
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043b4:	f04f 31ff 	mov.w	r1, #4294967295
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	fa01 f303 	lsl.w	r3, r1, r3
 80043be:	43d9      	mvns	r1, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043c4:	4313      	orrs	r3, r2
         );
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3724      	adds	r7, #36	; 0x24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
	...

080043d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3b01      	subs	r3, #1
 80043e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043e4:	d301      	bcc.n	80043ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043e6:	2301      	movs	r3, #1
 80043e8:	e00f      	b.n	800440a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043ea:	4a0a      	ldr	r2, [pc, #40]	; (8004414 <SysTick_Config+0x40>)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3b01      	subs	r3, #1
 80043f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043f2:	210f      	movs	r1, #15
 80043f4:	f04f 30ff 	mov.w	r0, #4294967295
 80043f8:	f7ff ff8e 	bl	8004318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043fc:	4b05      	ldr	r3, [pc, #20]	; (8004414 <SysTick_Config+0x40>)
 80043fe:	2200      	movs	r2, #0
 8004400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004402:	4b04      	ldr	r3, [pc, #16]	; (8004414 <SysTick_Config+0x40>)
 8004404:	2207      	movs	r2, #7
 8004406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	e000e010 	.word	0xe000e010

08004418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7ff ff29 	bl	8004278 <__NVIC_SetPriorityGrouping>
}
 8004426:	bf00      	nop
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b086      	sub	sp, #24
 8004432:	af00      	add	r7, sp, #0
 8004434:	4603      	mov	r3, r0
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	607a      	str	r2, [r7, #4]
 800443a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800443c:	f7ff ff40 	bl	80042c0 <__NVIC_GetPriorityGrouping>
 8004440:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	68b9      	ldr	r1, [r7, #8]
 8004446:	6978      	ldr	r0, [r7, #20]
 8004448:	f7ff ff90 	bl	800436c <NVIC_EncodePriority>
 800444c:	4602      	mov	r2, r0
 800444e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004452:	4611      	mov	r1, r2
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff ff5f 	bl	8004318 <__NVIC_SetPriority>
}
 800445a:	bf00      	nop
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b082      	sub	sp, #8
 8004466:	af00      	add	r7, sp, #0
 8004468:	4603      	mov	r3, r0
 800446a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800446c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff ff33 	bl	80042dc <__NVIC_EnableIRQ>
}
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b082      	sub	sp, #8
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7ff ffa4 	bl	80043d4 <SysTick_Config>
 800448c:	4603      	mov	r3, r0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004498:	b480      	push	{r7}
 800449a:	b089      	sub	sp, #36	; 0x24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80044a6:	4b89      	ldr	r3, [pc, #548]	; (80046cc <HAL_GPIO_Init+0x234>)
 80044a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044aa:	e194      	b.n	80047d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	2101      	movs	r1, #1
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	fa01 f303 	lsl.w	r3, r1, r3
 80044b8:	4013      	ands	r3, r2
 80044ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 8186 	beq.w	80047d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f003 0303 	and.w	r3, r3, #3
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d005      	beq.n	80044dc <HAL_GPIO_Init+0x44>
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f003 0303 	and.w	r3, r3, #3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d130      	bne.n	800453e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	2203      	movs	r2, #3
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	43db      	mvns	r3, r3
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	4013      	ands	r3, r2
 80044f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	4313      	orrs	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004512:	2201      	movs	r2, #1
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	43db      	mvns	r3, r3
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	4013      	ands	r3, r2
 8004520:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	091b      	lsrs	r3, r3, #4
 8004528:	f003 0201 	and.w	r2, r3, #1
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	4313      	orrs	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	2b03      	cmp	r3, #3
 8004548:	d017      	beq.n	800457a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	2203      	movs	r2, #3
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	43db      	mvns	r3, r3
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	4013      	ands	r3, r2
 8004560:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	4313      	orrs	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d123      	bne.n	80045ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	08da      	lsrs	r2, r3, #3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	3208      	adds	r2, #8
 800458e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004592:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	220f      	movs	r2, #15
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	43db      	mvns	r3, r3
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4013      	ands	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	691a      	ldr	r2, [r3, #16]
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	4313      	orrs	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	08da      	lsrs	r2, r3, #3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3208      	adds	r2, #8
 80045c8:	69b9      	ldr	r1, [r7, #24]
 80045ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	2203      	movs	r2, #3
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	43db      	mvns	r3, r3
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	4013      	ands	r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f003 0203 	and.w	r2, r3, #3
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	69ba      	ldr	r2, [r7, #24]
 8004600:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 80e0 	beq.w	80047d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004610:	4b2f      	ldr	r3, [pc, #188]	; (80046d0 <HAL_GPIO_Init+0x238>)
 8004612:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004616:	4a2e      	ldr	r2, [pc, #184]	; (80046d0 <HAL_GPIO_Init+0x238>)
 8004618:	f043 0302 	orr.w	r3, r3, #2
 800461c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004620:	4b2b      	ldr	r3, [pc, #172]	; (80046d0 <HAL_GPIO_Init+0x238>)
 8004622:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800462e:	4a29      	ldr	r2, [pc, #164]	; (80046d4 <HAL_GPIO_Init+0x23c>)
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	089b      	lsrs	r3, r3, #2
 8004634:	3302      	adds	r3, #2
 8004636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800463a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	f003 0303 	and.w	r3, r3, #3
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	220f      	movs	r2, #15
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	43db      	mvns	r3, r3
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	4013      	ands	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a20      	ldr	r2, [pc, #128]	; (80046d8 <HAL_GPIO_Init+0x240>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d052      	beq.n	8004700 <HAL_GPIO_Init+0x268>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a1f      	ldr	r2, [pc, #124]	; (80046dc <HAL_GPIO_Init+0x244>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d031      	beq.n	80046c6 <HAL_GPIO_Init+0x22e>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a1e      	ldr	r2, [pc, #120]	; (80046e0 <HAL_GPIO_Init+0x248>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d02b      	beq.n	80046c2 <HAL_GPIO_Init+0x22a>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a1d      	ldr	r2, [pc, #116]	; (80046e4 <HAL_GPIO_Init+0x24c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d025      	beq.n	80046be <HAL_GPIO_Init+0x226>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a1c      	ldr	r2, [pc, #112]	; (80046e8 <HAL_GPIO_Init+0x250>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d01f      	beq.n	80046ba <HAL_GPIO_Init+0x222>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a1b      	ldr	r2, [pc, #108]	; (80046ec <HAL_GPIO_Init+0x254>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d019      	beq.n	80046b6 <HAL_GPIO_Init+0x21e>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a1a      	ldr	r2, [pc, #104]	; (80046f0 <HAL_GPIO_Init+0x258>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d013      	beq.n	80046b2 <HAL_GPIO_Init+0x21a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a19      	ldr	r2, [pc, #100]	; (80046f4 <HAL_GPIO_Init+0x25c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d00d      	beq.n	80046ae <HAL_GPIO_Init+0x216>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a18      	ldr	r2, [pc, #96]	; (80046f8 <HAL_GPIO_Init+0x260>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d007      	beq.n	80046aa <HAL_GPIO_Init+0x212>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a17      	ldr	r2, [pc, #92]	; (80046fc <HAL_GPIO_Init+0x264>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d101      	bne.n	80046a6 <HAL_GPIO_Init+0x20e>
 80046a2:	2309      	movs	r3, #9
 80046a4:	e02d      	b.n	8004702 <HAL_GPIO_Init+0x26a>
 80046a6:	230a      	movs	r3, #10
 80046a8:	e02b      	b.n	8004702 <HAL_GPIO_Init+0x26a>
 80046aa:	2308      	movs	r3, #8
 80046ac:	e029      	b.n	8004702 <HAL_GPIO_Init+0x26a>
 80046ae:	2307      	movs	r3, #7
 80046b0:	e027      	b.n	8004702 <HAL_GPIO_Init+0x26a>
 80046b2:	2306      	movs	r3, #6
 80046b4:	e025      	b.n	8004702 <HAL_GPIO_Init+0x26a>
 80046b6:	2305      	movs	r3, #5
 80046b8:	e023      	b.n	8004702 <HAL_GPIO_Init+0x26a>
 80046ba:	2304      	movs	r3, #4
 80046bc:	e021      	b.n	8004702 <HAL_GPIO_Init+0x26a>
 80046be:	2303      	movs	r3, #3
 80046c0:	e01f      	b.n	8004702 <HAL_GPIO_Init+0x26a>
 80046c2:	2302      	movs	r3, #2
 80046c4:	e01d      	b.n	8004702 <HAL_GPIO_Init+0x26a>
 80046c6:	2301      	movs	r3, #1
 80046c8:	e01b      	b.n	8004702 <HAL_GPIO_Init+0x26a>
 80046ca:	bf00      	nop
 80046cc:	58000080 	.word	0x58000080
 80046d0:	58024400 	.word	0x58024400
 80046d4:	58000400 	.word	0x58000400
 80046d8:	58020000 	.word	0x58020000
 80046dc:	58020400 	.word	0x58020400
 80046e0:	58020800 	.word	0x58020800
 80046e4:	58020c00 	.word	0x58020c00
 80046e8:	58021000 	.word	0x58021000
 80046ec:	58021400 	.word	0x58021400
 80046f0:	58021800 	.word	0x58021800
 80046f4:	58021c00 	.word	0x58021c00
 80046f8:	58022000 	.word	0x58022000
 80046fc:	58022400 	.word	0x58022400
 8004700:	2300      	movs	r3, #0
 8004702:	69fa      	ldr	r2, [r7, #28]
 8004704:	f002 0203 	and.w	r2, r2, #3
 8004708:	0092      	lsls	r2, r2, #2
 800470a:	4093      	lsls	r3, r2
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	4313      	orrs	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004712:	4938      	ldr	r1, [pc, #224]	; (80047f4 <HAL_GPIO_Init+0x35c>)
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	089b      	lsrs	r3, r3, #2
 8004718:	3302      	adds	r3, #2
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	43db      	mvns	r3, r3
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4013      	ands	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	4313      	orrs	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004746:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800474e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	43db      	mvns	r3, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4013      	ands	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	4313      	orrs	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004774:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	43db      	mvns	r3, r3
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	4013      	ands	r3, r2
 800478a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	4313      	orrs	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	43db      	mvns	r3, r3
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	4013      	ands	r3, r2
 80047b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	3301      	adds	r3, #1
 80047d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	fa22 f303 	lsr.w	r3, r2, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f47f ae63 	bne.w	80044ac <HAL_GPIO_Init+0x14>
  }
}
 80047e6:	bf00      	nop
 80047e8:	bf00      	nop
 80047ea:	3724      	adds	r7, #36	; 0x24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	58000400 	.word	0x58000400

080047f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	887b      	ldrh	r3, [r7, #2]
 800480a:	4013      	ands	r3, r2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004810:	2301      	movs	r3, #1
 8004812:	73fb      	strb	r3, [r7, #15]
 8004814:	e001      	b.n	800481a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004816:	2300      	movs	r3, #0
 8004818:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800481a:	7bfb      	ldrb	r3, [r7, #15]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	807b      	strh	r3, [r7, #2]
 8004834:	4613      	mov	r3, r2
 8004836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004838:	787b      	ldrb	r3, [r7, #1]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800483e:	887a      	ldrh	r2, [r7, #2]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004844:	e003      	b.n	800484e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004846:	887b      	ldrh	r3, [r7, #2]
 8004848:	041a      	lsls	r2, r3, #16
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	619a      	str	r2, [r3, #24]
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800485a:	b480      	push	{r7}
 800485c:	b085      	sub	sp, #20
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
 8004862:	460b      	mov	r3, r1
 8004864:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800486c:	887a      	ldrh	r2, [r7, #2]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4013      	ands	r3, r2
 8004872:	041a      	lsls	r2, r3, #16
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	43d9      	mvns	r1, r3
 8004878:	887b      	ldrh	r3, [r7, #2]
 800487a:	400b      	ands	r3, r1
 800487c:	431a      	orrs	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	619a      	str	r2, [r3, #24]
}
 8004882:	bf00      	nop
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
	...

08004890 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e07f      	b.n	80049a2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d106      	bne.n	80048bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7fd fccc 	bl	8002254 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2224      	movs	r2, #36	; 0x24
 80048c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 0201 	bic.w	r2, r2, #1
 80048d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d107      	bne.n	800490a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004906:	609a      	str	r2, [r3, #8]
 8004908:	e006      	b.n	8004918 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689a      	ldr	r2, [r3, #8]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004916:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	2b02      	cmp	r3, #2
 800491e:	d104      	bne.n	800492a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004928:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6859      	ldr	r1, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	4b1d      	ldr	r3, [pc, #116]	; (80049ac <HAL_I2C_Init+0x11c>)
 8004936:	430b      	orrs	r3, r1
 8004938:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004948:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691a      	ldr	r2, [r3, #16]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	69d9      	ldr	r1, [r3, #28]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a1a      	ldr	r2, [r3, #32]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0201 	orr.w	r2, r2, #1
 8004982:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	02008000 	.word	0x02008000

080049b0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b088      	sub	sp, #32
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	4608      	mov	r0, r1
 80049ba:	4611      	mov	r1, r2
 80049bc:	461a      	mov	r2, r3
 80049be:	4603      	mov	r3, r0
 80049c0:	817b      	strh	r3, [r7, #10]
 80049c2:	460b      	mov	r3, r1
 80049c4:	813b      	strh	r3, [r7, #8]
 80049c6:	4613      	mov	r3, r2
 80049c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b20      	cmp	r3, #32
 80049d4:	f040 80f9 	bne.w	8004bca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d002      	beq.n	80049e4 <HAL_I2C_Mem_Write+0x34>
 80049de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d105      	bne.n	80049f0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e0ed      	b.n	8004bcc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d101      	bne.n	80049fe <HAL_I2C_Mem_Write+0x4e>
 80049fa:	2302      	movs	r3, #2
 80049fc:	e0e6      	b.n	8004bcc <HAL_I2C_Mem_Write+0x21c>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a06:	f7fe f813 	bl	8002a30 <HAL_GetTick>
 8004a0a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	2319      	movs	r3, #25
 8004a12:	2201      	movs	r2, #1
 8004a14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 f955 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e0d1      	b.n	8004bcc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2221      	movs	r2, #33	; 0x21
 8004a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2240      	movs	r2, #64	; 0x40
 8004a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6a3a      	ldr	r2, [r7, #32]
 8004a42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a50:	88f8      	ldrh	r0, [r7, #6]
 8004a52:	893a      	ldrh	r2, [r7, #8]
 8004a54:	8979      	ldrh	r1, [r7, #10]
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	9301      	str	r3, [sp, #4]
 8004a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	4603      	mov	r3, r0
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 f8b9 	bl	8004bd8 <I2C_RequestMemoryWrite>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d005      	beq.n	8004a78 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e0a9      	b.n	8004bcc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	2bff      	cmp	r3, #255	; 0xff
 8004a80:	d90e      	bls.n	8004aa0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	22ff      	movs	r2, #255	; 0xff
 8004a86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	8979      	ldrh	r1, [r7, #10]
 8004a90:	2300      	movs	r3, #0
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 fabd 	bl	8005018 <I2C_TransferConfig>
 8004a9e:	e00f      	b.n	8004ac0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	8979      	ldrh	r1, [r7, #10]
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 faac 	bl	8005018 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 f93f 	bl	8004d48 <I2C_WaitOnTXISFlagUntilTimeout>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e07b      	b.n	8004bcc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	781a      	ldrb	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004afc:	3b01      	subs	r3, #1
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d034      	beq.n	8004b78 <HAL_I2C_Mem_Write+0x1c8>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d130      	bne.n	8004b78 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	2180      	movs	r1, #128	; 0x80
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 f8d1 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e04d      	b.n	8004bcc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2bff      	cmp	r3, #255	; 0xff
 8004b38:	d90e      	bls.n	8004b58 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	22ff      	movs	r2, #255	; 0xff
 8004b3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	8979      	ldrh	r1, [r7, #10]
 8004b48:	2300      	movs	r3, #0
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 fa61 	bl	8005018 <I2C_TransferConfig>
 8004b56:	e00f      	b.n	8004b78 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	8979      	ldrh	r1, [r7, #10]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f000 fa50 	bl	8005018 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d19e      	bne.n	8004ac0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 f91e 	bl	8004dc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e01a      	b.n	8004bcc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6859      	ldr	r1, [r3, #4]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	4b0a      	ldr	r3, [pc, #40]	; (8004bd4 <HAL_I2C_Mem_Write+0x224>)
 8004baa:	400b      	ands	r3, r1
 8004bac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	e000      	b.n	8004bcc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004bca:	2302      	movs	r3, #2
  }
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3718      	adds	r7, #24
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	fe00e800 	.word	0xfe00e800

08004bd8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af02      	add	r7, sp, #8
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	4608      	mov	r0, r1
 8004be2:	4611      	mov	r1, r2
 8004be4:	461a      	mov	r2, r3
 8004be6:	4603      	mov	r3, r0
 8004be8:	817b      	strh	r3, [r7, #10]
 8004bea:	460b      	mov	r3, r1
 8004bec:	813b      	strh	r3, [r7, #8]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004bf2:	88fb      	ldrh	r3, [r7, #6]
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	8979      	ldrh	r1, [r7, #10]
 8004bf8:	4b20      	ldr	r3, [pc, #128]	; (8004c7c <I2C_RequestMemoryWrite+0xa4>)
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 fa09 	bl	8005018 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c06:	69fa      	ldr	r2, [r7, #28]
 8004c08:	69b9      	ldr	r1, [r7, #24]
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 f89c 	bl	8004d48 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e02c      	b.n	8004c74 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c1a:	88fb      	ldrh	r3, [r7, #6]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d105      	bne.n	8004c2c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c20:	893b      	ldrh	r3, [r7, #8]
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	629a      	str	r2, [r3, #40]	; 0x28
 8004c2a:	e015      	b.n	8004c58 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c2c:	893b      	ldrh	r3, [r7, #8]
 8004c2e:	0a1b      	lsrs	r3, r3, #8
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c3a:	69fa      	ldr	r2, [r7, #28]
 8004c3c:	69b9      	ldr	r1, [r7, #24]
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 f882 	bl	8004d48 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e012      	b.n	8004c74 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c4e:	893b      	ldrh	r3, [r7, #8]
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	2180      	movs	r1, #128	; 0x80
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f000 f830 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	80002000 	.word	0x80002000

08004c80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d103      	bne.n	8004c9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d007      	beq.n	8004cbc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699a      	ldr	r2, [r3, #24]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	619a      	str	r2, [r3, #24]
  }
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cd8:	e022      	b.n	8004d20 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce0:	d01e      	beq.n	8004d20 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce2:	f7fd fea5 	bl	8002a30 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d302      	bcc.n	8004cf8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d113      	bne.n	8004d20 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfc:	f043 0220 	orr.w	r2, r3, #32
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e00f      	b.n	8004d40 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699a      	ldr	r2, [r3, #24]
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	bf0c      	ite	eq
 8004d30:	2301      	moveq	r3, #1
 8004d32:	2300      	movne	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	461a      	mov	r2, r3
 8004d38:	79fb      	ldrb	r3, [r7, #7]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d0cd      	beq.n	8004cda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d54:	e02c      	b.n	8004db0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	68b9      	ldr	r1, [r7, #8]
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f000 f870 	bl	8004e40 <I2C_IsErrorOccurred>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e02a      	b.n	8004dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d70:	d01e      	beq.n	8004db0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d72:	f7fd fe5d 	bl	8002a30 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d302      	bcc.n	8004d88 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d113      	bne.n	8004db0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8c:	f043 0220 	orr.w	r2, r3, #32
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e007      	b.n	8004dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d1cb      	bne.n	8004d56 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dd4:	e028      	b.n	8004e28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	68b9      	ldr	r1, [r7, #8]
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 f830 	bl	8004e40 <I2C_IsErrorOccurred>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e026      	b.n	8004e38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dea:	f7fd fe21 	bl	8002a30 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d302      	bcc.n	8004e00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d113      	bne.n	8004e28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e04:	f043 0220 	orr.w	r2, r3, #32
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e007      	b.n	8004e38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	f003 0320 	and.w	r3, r3, #32
 8004e32:	2b20      	cmp	r3, #32
 8004e34:	d1cf      	bne.n	8004dd6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b08a      	sub	sp, #40	; 0x28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	f003 0310 	and.w	r3, r3, #16
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d075      	beq.n	8004f58 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2210      	movs	r2, #16
 8004e72:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e74:	e056      	b.n	8004f24 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7c:	d052      	beq.n	8004f24 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e7e:	f7fd fdd7 	bl	8002a30 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d302      	bcc.n	8004e94 <I2C_IsErrorOccurred+0x54>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d147      	bne.n	8004f24 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e9e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ea6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eb6:	d12e      	bne.n	8004f16 <I2C_IsErrorOccurred+0xd6>
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ebe:	d02a      	beq.n	8004f16 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004ec0:	7cfb      	ldrb	r3, [r7, #19]
 8004ec2:	2b20      	cmp	r3, #32
 8004ec4:	d027      	beq.n	8004f16 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ed4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004ed6:	f7fd fdab 	bl	8002a30 <HAL_GetTick>
 8004eda:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004edc:	e01b      	b.n	8004f16 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004ede:	f7fd fda7 	bl	8002a30 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b19      	cmp	r3, #25
 8004eea:	d914      	bls.n	8004f16 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef0:	f043 0220 	orr.w	r2, r3, #32
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2220      	movs	r2, #32
 8004efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	f003 0320 	and.w	r3, r3, #32
 8004f20:	2b20      	cmp	r3, #32
 8004f22:	d1dc      	bne.n	8004ede <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	f003 0320 	and.w	r3, r3, #32
 8004f2e:	2b20      	cmp	r3, #32
 8004f30:	d003      	beq.n	8004f3a <I2C_IsErrorOccurred+0xfa>
 8004f32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d09d      	beq.n	8004e76 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004f3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d103      	bne.n	8004f4a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2220      	movs	r2, #32
 8004f48:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	f043 0304 	orr.w	r3, r3, #4
 8004f50:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00b      	beq.n	8004f82 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004f6a:	6a3b      	ldr	r3, [r7, #32]
 8004f6c:	f043 0301 	orr.w	r3, r3, #1
 8004f70:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00b      	beq.n	8004fa4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	f043 0308 	orr.w	r3, r3, #8
 8004f92:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00b      	beq.n	8004fc6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	f043 0302 	orr.w	r3, r3, #2
 8004fb4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fbe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004fc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d01c      	beq.n	8005008 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f7ff fe56 	bl	8004c80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6859      	ldr	r1, [r3, #4]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	4b0d      	ldr	r3, [pc, #52]	; (8005014 <I2C_IsErrorOccurred+0x1d4>)
 8004fe0:	400b      	ands	r3, r1
 8004fe2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	431a      	orrs	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800500c:	4618      	mov	r0, r3
 800500e:	3728      	adds	r7, #40	; 0x28
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	fe00e800 	.word	0xfe00e800

08005018 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	607b      	str	r3, [r7, #4]
 8005022:	460b      	mov	r3, r1
 8005024:	817b      	strh	r3, [r7, #10]
 8005026:	4613      	mov	r3, r2
 8005028:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800502a:	897b      	ldrh	r3, [r7, #10]
 800502c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005030:	7a7b      	ldrb	r3, [r7, #9]
 8005032:	041b      	lsls	r3, r3, #16
 8005034:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005038:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	4313      	orrs	r3, r2
 8005042:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005046:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	0d5b      	lsrs	r3, r3, #21
 8005052:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005056:	4b08      	ldr	r3, [pc, #32]	; (8005078 <I2C_TransferConfig+0x60>)
 8005058:	430b      	orrs	r3, r1
 800505a:	43db      	mvns	r3, r3
 800505c:	ea02 0103 	and.w	r1, r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	430a      	orrs	r2, r1
 8005068:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800506a:	bf00      	nop
 800506c:	371c      	adds	r7, #28
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	03ff63ff 	.word	0x03ff63ff

0800507c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b20      	cmp	r3, #32
 8005090:	d138      	bne.n	8005104 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005098:	2b01      	cmp	r3, #1
 800509a:	d101      	bne.n	80050a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800509c:	2302      	movs	r3, #2
 800509e:	e032      	b.n	8005106 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2224      	movs	r2, #36	; 0x24
 80050ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0201 	bic.w	r2, r2, #1
 80050be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6819      	ldr	r1, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	430a      	orrs	r2, r1
 80050de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f042 0201 	orr.w	r2, r2, #1
 80050ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2220      	movs	r2, #32
 80050f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005100:	2300      	movs	r3, #0
 8005102:	e000      	b.n	8005106 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005104:	2302      	movs	r3, #2
  }
}
 8005106:	4618      	mov	r0, r3
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005112:	b480      	push	{r7}
 8005114:	b085      	sub	sp, #20
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
 800511a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b20      	cmp	r3, #32
 8005126:	d139      	bne.n	800519c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800512e:	2b01      	cmp	r3, #1
 8005130:	d101      	bne.n	8005136 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005132:	2302      	movs	r3, #2
 8005134:	e033      	b.n	800519e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2224      	movs	r2, #36	; 0x24
 8005142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 0201 	bic.w	r2, r2, #1
 8005154:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005164:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	021b      	lsls	r3, r3, #8
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0201 	orr.w	r2, r2, #1
 8005186:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005198:	2300      	movs	r3, #0
 800519a:	e000      	b.n	800519e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800519c:	2302      	movs	r3, #2
  }
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80051aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ac:	b08f      	sub	sp, #60	; 0x3c
 80051ae:	af0a      	add	r7, sp, #40	; 0x28
 80051b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e116      	b.n	80053ea <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d106      	bne.n	80051dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7fd fa04 	bl	80025e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2203      	movs	r2, #3
 80051e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d102      	bne.n	80051f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f005 ffba 	bl	800b174 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	603b      	str	r3, [r7, #0]
 8005206:	687e      	ldr	r6, [r7, #4]
 8005208:	466d      	mov	r5, sp
 800520a:	f106 0410 	add.w	r4, r6, #16
 800520e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005210:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005214:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005216:	e894 0003 	ldmia.w	r4, {r0, r1}
 800521a:	e885 0003 	stmia.w	r5, {r0, r1}
 800521e:	1d33      	adds	r3, r6, #4
 8005220:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005222:	6838      	ldr	r0, [r7, #0]
 8005224:	f005 ff38 	bl	800b098 <USB_CoreInit>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d005      	beq.n	800523a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2202      	movs	r2, #2
 8005232:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e0d7      	b.n	80053ea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2100      	movs	r1, #0
 8005240:	4618      	mov	r0, r3
 8005242:	f005 ffa8 	bl	800b196 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005246:	2300      	movs	r3, #0
 8005248:	73fb      	strb	r3, [r7, #15]
 800524a:	e04a      	b.n	80052e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800524c:	7bfa      	ldrb	r2, [r7, #15]
 800524e:	6879      	ldr	r1, [r7, #4]
 8005250:	4613      	mov	r3, r2
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	1a9b      	subs	r3, r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	440b      	add	r3, r1
 800525a:	333d      	adds	r3, #61	; 0x3d
 800525c:	2201      	movs	r2, #1
 800525e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005260:	7bfa      	ldrb	r2, [r7, #15]
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	4613      	mov	r3, r2
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	1a9b      	subs	r3, r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	440b      	add	r3, r1
 800526e:	333c      	adds	r3, #60	; 0x3c
 8005270:	7bfa      	ldrb	r2, [r7, #15]
 8005272:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005274:	7bfa      	ldrb	r2, [r7, #15]
 8005276:	7bfb      	ldrb	r3, [r7, #15]
 8005278:	b298      	uxth	r0, r3
 800527a:	6879      	ldr	r1, [r7, #4]
 800527c:	4613      	mov	r3, r2
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	1a9b      	subs	r3, r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	3342      	adds	r3, #66	; 0x42
 8005288:	4602      	mov	r2, r0
 800528a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800528c:	7bfa      	ldrb	r2, [r7, #15]
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	4613      	mov	r3, r2
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	1a9b      	subs	r3, r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	333f      	adds	r3, #63	; 0x3f
 800529c:	2200      	movs	r2, #0
 800529e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80052a0:	7bfa      	ldrb	r2, [r7, #15]
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	4613      	mov	r3, r2
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	1a9b      	subs	r3, r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	440b      	add	r3, r1
 80052ae:	3344      	adds	r3, #68	; 0x44
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80052b4:	7bfa      	ldrb	r2, [r7, #15]
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	4613      	mov	r3, r2
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	1a9b      	subs	r3, r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	440b      	add	r3, r1
 80052c2:	3348      	adds	r3, #72	; 0x48
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80052c8:	7bfa      	ldrb	r2, [r7, #15]
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	4613      	mov	r3, r2
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	1a9b      	subs	r3, r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	3350      	adds	r3, #80	; 0x50
 80052d8:	2200      	movs	r2, #0
 80052da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
 80052de:	3301      	adds	r3, #1
 80052e0:	73fb      	strb	r3, [r7, #15]
 80052e2:	7bfa      	ldrb	r2, [r7, #15]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d3af      	bcc.n	800524c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052ec:	2300      	movs	r3, #0
 80052ee:	73fb      	strb	r3, [r7, #15]
 80052f0:	e044      	b.n	800537c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80052f2:	7bfa      	ldrb	r2, [r7, #15]
 80052f4:	6879      	ldr	r1, [r7, #4]
 80052f6:	4613      	mov	r3, r2
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	1a9b      	subs	r3, r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	440b      	add	r3, r1
 8005300:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005304:	2200      	movs	r2, #0
 8005306:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005308:	7bfa      	ldrb	r2, [r7, #15]
 800530a:	6879      	ldr	r1, [r7, #4]
 800530c:	4613      	mov	r3, r2
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	1a9b      	subs	r3, r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	440b      	add	r3, r1
 8005316:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800531a:	7bfa      	ldrb	r2, [r7, #15]
 800531c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800531e:	7bfa      	ldrb	r2, [r7, #15]
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	4613      	mov	r3, r2
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	1a9b      	subs	r3, r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	440b      	add	r3, r1
 800532c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005330:	2200      	movs	r2, #0
 8005332:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005334:	7bfa      	ldrb	r2, [r7, #15]
 8005336:	6879      	ldr	r1, [r7, #4]
 8005338:	4613      	mov	r3, r2
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	1a9b      	subs	r3, r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	440b      	add	r3, r1
 8005342:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005346:	2200      	movs	r2, #0
 8005348:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800534a:	7bfa      	ldrb	r2, [r7, #15]
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	4613      	mov	r3, r2
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	1a9b      	subs	r3, r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	440b      	add	r3, r1
 8005358:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005360:	7bfa      	ldrb	r2, [r7, #15]
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	4613      	mov	r3, r2
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	1a9b      	subs	r3, r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	440b      	add	r3, r1
 800536e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005376:	7bfb      	ldrb	r3, [r7, #15]
 8005378:	3301      	adds	r3, #1
 800537a:	73fb      	strb	r3, [r7, #15]
 800537c:	7bfa      	ldrb	r2, [r7, #15]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	429a      	cmp	r2, r3
 8005384:	d3b5      	bcc.n	80052f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	603b      	str	r3, [r7, #0]
 800538c:	687e      	ldr	r6, [r7, #4]
 800538e:	466d      	mov	r5, sp
 8005390:	f106 0410 	add.w	r4, r6, #16
 8005394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005396:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800539a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800539c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80053a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80053a4:	1d33      	adds	r3, r6, #4
 80053a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053a8:	6838      	ldr	r0, [r7, #0]
 80053aa:	f005 ff41 	bl	800b230 <USB_DevInit>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d005      	beq.n	80053c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e014      	b.n	80053ea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d102      	bne.n	80053de <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f80b 	bl	80053f4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f006 f8fb 	bl	800b5de <USB_DevDisconnect>

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080053f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005422:	4b05      	ldr	r3, [pc, #20]	; (8005438 <HAL_PCDEx_ActivateLPM+0x44>)
 8005424:	4313      	orrs	r3, r2
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	10000003 	.word	0x10000003

0800543c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005444:	4b19      	ldr	r3, [pc, #100]	; (80054ac <HAL_PWREx_ConfigSupply+0x70>)
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b04      	cmp	r3, #4
 800544e:	d00a      	beq.n	8005466 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005450:	4b16      	ldr	r3, [pc, #88]	; (80054ac <HAL_PWREx_ConfigSupply+0x70>)
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f003 0307 	and.w	r3, r3, #7
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	429a      	cmp	r2, r3
 800545c:	d001      	beq.n	8005462 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e01f      	b.n	80054a2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005462:	2300      	movs	r3, #0
 8005464:	e01d      	b.n	80054a2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005466:	4b11      	ldr	r3, [pc, #68]	; (80054ac <HAL_PWREx_ConfigSupply+0x70>)
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	f023 0207 	bic.w	r2, r3, #7
 800546e:	490f      	ldr	r1, [pc, #60]	; (80054ac <HAL_PWREx_ConfigSupply+0x70>)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4313      	orrs	r3, r2
 8005474:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005476:	f7fd fadb 	bl	8002a30 <HAL_GetTick>
 800547a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800547c:	e009      	b.n	8005492 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800547e:	f7fd fad7 	bl	8002a30 <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800548c:	d901      	bls.n	8005492 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e007      	b.n	80054a2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005492:	4b06      	ldr	r3, [pc, #24]	; (80054ac <HAL_PWREx_ConfigSupply+0x70>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800549a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800549e:	d1ee      	bne.n	800547e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	58024800 	.word	0x58024800

080054b0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80054b0:	b480      	push	{r7}
 80054b2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80054b4:	4b05      	ldr	r3, [pc, #20]	; (80054cc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	4a04      	ldr	r2, [pc, #16]	; (80054cc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80054ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054be:	60d3      	str	r3, [r2, #12]
}
 80054c0:	bf00      	nop
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	58024800 	.word	0x58024800

080054d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08c      	sub	sp, #48	; 0x30
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d102      	bne.n	80054e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	f000 bc1c 	b.w	8005d1c <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 8087 	beq.w	8005600 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054f2:	4b9e      	ldr	r3, [pc, #632]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80054fc:	4b9b      	ldr	r3, [pc, #620]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 80054fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005500:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005504:	2b10      	cmp	r3, #16
 8005506:	d007      	beq.n	8005518 <HAL_RCC_OscConfig+0x48>
 8005508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550a:	2b18      	cmp	r3, #24
 800550c:	d110      	bne.n	8005530 <HAL_RCC_OscConfig+0x60>
 800550e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005510:	f003 0303 	and.w	r3, r3, #3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d10b      	bne.n	8005530 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005518:	4b94      	ldr	r3, [pc, #592]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d06c      	beq.n	80055fe <HAL_RCC_OscConfig+0x12e>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d168      	bne.n	80055fe <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e3f5      	b.n	8005d1c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005538:	d106      	bne.n	8005548 <HAL_RCC_OscConfig+0x78>
 800553a:	4b8c      	ldr	r3, [pc, #560]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a8b      	ldr	r2, [pc, #556]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 8005540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005544:	6013      	str	r3, [r2, #0]
 8005546:	e02e      	b.n	80055a6 <HAL_RCC_OscConfig+0xd6>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10c      	bne.n	800556a <HAL_RCC_OscConfig+0x9a>
 8005550:	4b86      	ldr	r3, [pc, #536]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a85      	ldr	r2, [pc, #532]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 8005556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800555a:	6013      	str	r3, [r2, #0]
 800555c:	4b83      	ldr	r3, [pc, #524]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a82      	ldr	r2, [pc, #520]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 8005562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005566:	6013      	str	r3, [r2, #0]
 8005568:	e01d      	b.n	80055a6 <HAL_RCC_OscConfig+0xd6>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005572:	d10c      	bne.n	800558e <HAL_RCC_OscConfig+0xbe>
 8005574:	4b7d      	ldr	r3, [pc, #500]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a7c      	ldr	r2, [pc, #496]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 800557a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800557e:	6013      	str	r3, [r2, #0]
 8005580:	4b7a      	ldr	r3, [pc, #488]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a79      	ldr	r2, [pc, #484]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 8005586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800558a:	6013      	str	r3, [r2, #0]
 800558c:	e00b      	b.n	80055a6 <HAL_RCC_OscConfig+0xd6>
 800558e:	4b77      	ldr	r3, [pc, #476]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a76      	ldr	r2, [pc, #472]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 8005594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	4b74      	ldr	r3, [pc, #464]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a73      	ldr	r2, [pc, #460]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 80055a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055a4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d013      	beq.n	80055d6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ae:	f7fd fa3f 	bl	8002a30 <HAL_GetTick>
 80055b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055b4:	e008      	b.n	80055c8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055b6:	f7fd fa3b 	bl	8002a30 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	2b64      	cmp	r3, #100	; 0x64
 80055c2:	d901      	bls.n	80055c8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e3a9      	b.n	8005d1c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055c8:	4b68      	ldr	r3, [pc, #416]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d0f0      	beq.n	80055b6 <HAL_RCC_OscConfig+0xe6>
 80055d4:	e014      	b.n	8005600 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d6:	f7fd fa2b 	bl	8002a30 <HAL_GetTick>
 80055da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80055dc:	e008      	b.n	80055f0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055de:	f7fd fa27 	bl	8002a30 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	2b64      	cmp	r3, #100	; 0x64
 80055ea:	d901      	bls.n	80055f0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e395      	b.n	8005d1c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80055f0:	4b5e      	ldr	r3, [pc, #376]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1f0      	bne.n	80055de <HAL_RCC_OscConfig+0x10e>
 80055fc:	e000      	b.n	8005600 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055fe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 80ca 	beq.w	80057a2 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800560e:	4b57      	ldr	r3, [pc, #348]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005616:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005618:	4b54      	ldr	r3, [pc, #336]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 800561a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d007      	beq.n	8005634 <HAL_RCC_OscConfig+0x164>
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	2b18      	cmp	r3, #24
 8005628:	d156      	bne.n	80056d8 <HAL_RCC_OscConfig+0x208>
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	f003 0303 	and.w	r3, r3, #3
 8005630:	2b00      	cmp	r3, #0
 8005632:	d151      	bne.n	80056d8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005634:	4b4d      	ldr	r3, [pc, #308]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b00      	cmp	r3, #0
 800563e:	d005      	beq.n	800564c <HAL_RCC_OscConfig+0x17c>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e367      	b.n	8005d1c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800564c:	4b47      	ldr	r3, [pc, #284]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f023 0219 	bic.w	r2, r3, #25
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	4944      	ldr	r1, [pc, #272]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 800565a:	4313      	orrs	r3, r2
 800565c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800565e:	f7fd f9e7 	bl	8002a30 <HAL_GetTick>
 8005662:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005664:	e008      	b.n	8005678 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005666:	f7fd f9e3 	bl	8002a30 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d901      	bls.n	8005678 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e351      	b.n	8005d1c <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005678:	4b3c      	ldr	r3, [pc, #240]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0304 	and.w	r3, r3, #4
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0f0      	beq.n	8005666 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005684:	f7fd fa04 	bl	8002a90 <HAL_GetREVID>
 8005688:	4603      	mov	r3, r0
 800568a:	f241 0203 	movw	r2, #4099	; 0x1003
 800568e:	4293      	cmp	r3, r2
 8005690:	d817      	bhi.n	80056c2 <HAL_RCC_OscConfig+0x1f2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	2b40      	cmp	r3, #64	; 0x40
 8005698:	d108      	bne.n	80056ac <HAL_RCC_OscConfig+0x1dc>
 800569a:	4b34      	ldr	r3, [pc, #208]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80056a2:	4a32      	ldr	r2, [pc, #200]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 80056a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056a8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056aa:	e07a      	b.n	80057a2 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ac:	4b2f      	ldr	r3, [pc, #188]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	031b      	lsls	r3, r3, #12
 80056ba:	492c      	ldr	r1, [pc, #176]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056c0:	e06f      	b.n	80057a2 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056c2:	4b2a      	ldr	r3, [pc, #168]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	061b      	lsls	r3, r3, #24
 80056d0:	4926      	ldr	r1, [pc, #152]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056d6:	e064      	b.n	80057a2 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d047      	beq.n	8005770 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80056e0:	4b22      	ldr	r3, [pc, #136]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f023 0219 	bic.w	r2, r3, #25
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	491f      	ldr	r1, [pc, #124]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f2:	f7fd f99d 	bl	8002a30 <HAL_GetTick>
 80056f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056f8:	e008      	b.n	800570c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056fa:	f7fd f999 	bl	8002a30 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	2b02      	cmp	r3, #2
 8005706:	d901      	bls.n	800570c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e307      	b.n	8005d1c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800570c:	4b17      	ldr	r3, [pc, #92]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0304 	and.w	r3, r3, #4
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0f0      	beq.n	80056fa <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005718:	f7fd f9ba 	bl	8002a90 <HAL_GetREVID>
 800571c:	4603      	mov	r3, r0
 800571e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005722:	4293      	cmp	r3, r2
 8005724:	d817      	bhi.n	8005756 <HAL_RCC_OscConfig+0x286>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	2b40      	cmp	r3, #64	; 0x40
 800572c:	d108      	bne.n	8005740 <HAL_RCC_OscConfig+0x270>
 800572e:	4b0f      	ldr	r3, [pc, #60]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005736:	4a0d      	ldr	r2, [pc, #52]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 8005738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800573c:	6053      	str	r3, [r2, #4]
 800573e:	e030      	b.n	80057a2 <HAL_RCC_OscConfig+0x2d2>
 8005740:	4b0a      	ldr	r3, [pc, #40]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	031b      	lsls	r3, r3, #12
 800574e:	4907      	ldr	r1, [pc, #28]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 8005750:	4313      	orrs	r3, r2
 8005752:	604b      	str	r3, [r1, #4]
 8005754:	e025      	b.n	80057a2 <HAL_RCC_OscConfig+0x2d2>
 8005756:	4b05      	ldr	r3, [pc, #20]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	061b      	lsls	r3, r3, #24
 8005764:	4901      	ldr	r1, [pc, #4]	; (800576c <HAL_RCC_OscConfig+0x29c>)
 8005766:	4313      	orrs	r3, r2
 8005768:	604b      	str	r3, [r1, #4]
 800576a:	e01a      	b.n	80057a2 <HAL_RCC_OscConfig+0x2d2>
 800576c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005770:	4b9e      	ldr	r3, [pc, #632]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a9d      	ldr	r2, [pc, #628]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 8005776:	f023 0301 	bic.w	r3, r3, #1
 800577a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577c:	f7fd f958 	bl	8002a30 <HAL_GetTick>
 8005780:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005784:	f7fd f954 	bl	8002a30 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e2c2      	b.n	8005d1c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005796:	4b95      	ldr	r3, [pc, #596]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0304 	and.w	r3, r3, #4
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f0      	bne.n	8005784 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0310 	and.w	r3, r3, #16
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f000 80a9 	beq.w	8005902 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057b0:	4b8e      	ldr	r3, [pc, #568]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057b8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80057ba:	4b8c      	ldr	r3, [pc, #560]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 80057bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057be:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	2b08      	cmp	r3, #8
 80057c4:	d007      	beq.n	80057d6 <HAL_RCC_OscConfig+0x306>
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	2b18      	cmp	r3, #24
 80057ca:	d13a      	bne.n	8005842 <HAL_RCC_OscConfig+0x372>
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f003 0303 	and.w	r3, r3, #3
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d135      	bne.n	8005842 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80057d6:	4b85      	ldr	r3, [pc, #532]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d005      	beq.n	80057ee <HAL_RCC_OscConfig+0x31e>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	2b80      	cmp	r3, #128	; 0x80
 80057e8:	d001      	beq.n	80057ee <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e296      	b.n	8005d1c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80057ee:	f7fd f94f 	bl	8002a90 <HAL_GetREVID>
 80057f2:	4603      	mov	r3, r0
 80057f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d817      	bhi.n	800582c <HAL_RCC_OscConfig+0x35c>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	2b20      	cmp	r3, #32
 8005802:	d108      	bne.n	8005816 <HAL_RCC_OscConfig+0x346>
 8005804:	4b79      	ldr	r3, [pc, #484]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800580c:	4a77      	ldr	r2, [pc, #476]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 800580e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005812:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005814:	e075      	b.n	8005902 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005816:	4b75      	ldr	r3, [pc, #468]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	069b      	lsls	r3, r3, #26
 8005824:	4971      	ldr	r1, [pc, #452]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 8005826:	4313      	orrs	r3, r2
 8005828:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800582a:	e06a      	b.n	8005902 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800582c:	4b6f      	ldr	r3, [pc, #444]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	061b      	lsls	r3, r3, #24
 800583a:	496c      	ldr	r1, [pc, #432]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 800583c:	4313      	orrs	r3, r2
 800583e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005840:	e05f      	b.n	8005902 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d042      	beq.n	80058d0 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800584a:	4b68      	ldr	r3, [pc, #416]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a67      	ldr	r2, [pc, #412]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 8005850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005856:	f7fd f8eb 	bl	8002a30 <HAL_GetTick>
 800585a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800585c:	e008      	b.n	8005870 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800585e:	f7fd f8e7 	bl	8002a30 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d901      	bls.n	8005870 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e255      	b.n	8005d1c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005870:	4b5e      	ldr	r3, [pc, #376]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005878:	2b00      	cmp	r3, #0
 800587a:	d0f0      	beq.n	800585e <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800587c:	f7fd f908 	bl	8002a90 <HAL_GetREVID>
 8005880:	4603      	mov	r3, r0
 8005882:	f241 0203 	movw	r2, #4099	; 0x1003
 8005886:	4293      	cmp	r3, r2
 8005888:	d817      	bhi.n	80058ba <HAL_RCC_OscConfig+0x3ea>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	2b20      	cmp	r3, #32
 8005890:	d108      	bne.n	80058a4 <HAL_RCC_OscConfig+0x3d4>
 8005892:	4b56      	ldr	r3, [pc, #344]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800589a:	4a54      	ldr	r2, [pc, #336]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 800589c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058a0:	6053      	str	r3, [r2, #4]
 80058a2:	e02e      	b.n	8005902 <HAL_RCC_OscConfig+0x432>
 80058a4:	4b51      	ldr	r3, [pc, #324]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	069b      	lsls	r3, r3, #26
 80058b2:	494e      	ldr	r1, [pc, #312]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	604b      	str	r3, [r1, #4]
 80058b8:	e023      	b.n	8005902 <HAL_RCC_OscConfig+0x432>
 80058ba:	4b4c      	ldr	r3, [pc, #304]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	061b      	lsls	r3, r3, #24
 80058c8:	4948      	ldr	r1, [pc, #288]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60cb      	str	r3, [r1, #12]
 80058ce:	e018      	b.n	8005902 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80058d0:	4b46      	ldr	r3, [pc, #280]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a45      	ldr	r2, [pc, #276]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 80058d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058dc:	f7fd f8a8 	bl	8002a30 <HAL_GetTick>
 80058e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80058e2:	e008      	b.n	80058f6 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80058e4:	f7fd f8a4 	bl	8002a30 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e212      	b.n	8005d1c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80058f6:	4b3d      	ldr	r3, [pc, #244]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1f0      	bne.n	80058e4 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0308 	and.w	r3, r3, #8
 800590a:	2b00      	cmp	r3, #0
 800590c:	d036      	beq.n	800597c <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d019      	beq.n	800594a <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005916:	4b35      	ldr	r3, [pc, #212]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 8005918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800591a:	4a34      	ldr	r2, [pc, #208]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 800591c:	f043 0301 	orr.w	r3, r3, #1
 8005920:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005922:	f7fd f885 	bl	8002a30 <HAL_GetTick>
 8005926:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005928:	e008      	b.n	800593c <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800592a:	f7fd f881 	bl	8002a30 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d901      	bls.n	800593c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e1ef      	b.n	8005d1c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800593c:	4b2b      	ldr	r3, [pc, #172]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 800593e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0f0      	beq.n	800592a <HAL_RCC_OscConfig+0x45a>
 8005948:	e018      	b.n	800597c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800594a:	4b28      	ldr	r3, [pc, #160]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 800594c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800594e:	4a27      	ldr	r2, [pc, #156]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 8005950:	f023 0301 	bic.w	r3, r3, #1
 8005954:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005956:	f7fd f86b 	bl	8002a30 <HAL_GetTick>
 800595a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800595c:	e008      	b.n	8005970 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800595e:	f7fd f867 	bl	8002a30 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b02      	cmp	r3, #2
 800596a:	d901      	bls.n	8005970 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e1d5      	b.n	8005d1c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005970:	4b1e      	ldr	r3, [pc, #120]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 8005972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1f0      	bne.n	800595e <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0320 	and.w	r3, r3, #32
 8005984:	2b00      	cmp	r3, #0
 8005986:	d039      	beq.n	80059fc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	699b      	ldr	r3, [r3, #24]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d019      	beq.n	80059c4 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005990:	4b16      	ldr	r3, [pc, #88]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a15      	ldr	r2, [pc, #84]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 8005996:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800599a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800599c:	f7fd f848 	bl	8002a30 <HAL_GetTick>
 80059a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80059a2:	e008      	b.n	80059b6 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80059a4:	f7fd f844 	bl	8002a30 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e1b2      	b.n	8005d1c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80059b6:	4b0d      	ldr	r3, [pc, #52]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d0f0      	beq.n	80059a4 <HAL_RCC_OscConfig+0x4d4>
 80059c2:	e01b      	b.n	80059fc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059c4:	4b09      	ldr	r3, [pc, #36]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a08      	ldr	r2, [pc, #32]	; (80059ec <HAL_RCC_OscConfig+0x51c>)
 80059ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80059d0:	f7fd f82e 	bl	8002a30 <HAL_GetTick>
 80059d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80059d6:	e00b      	b.n	80059f0 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80059d8:	f7fd f82a 	bl	8002a30 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d904      	bls.n	80059f0 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e198      	b.n	8005d1c <HAL_RCC_OscConfig+0x84c>
 80059ea:	bf00      	nop
 80059ec:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80059f0:	4ba3      	ldr	r3, [pc, #652]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1ed      	bne.n	80059d8 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f000 8081 	beq.w	8005b0c <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005a0a:	4b9e      	ldr	r3, [pc, #632]	; (8005c84 <HAL_RCC_OscConfig+0x7b4>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a9d      	ldr	r2, [pc, #628]	; (8005c84 <HAL_RCC_OscConfig+0x7b4>)
 8005a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a16:	f7fd f80b 	bl	8002a30 <HAL_GetTick>
 8005a1a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a1c:	e008      	b.n	8005a30 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005a1e:	f7fd f807 	bl	8002a30 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	2b64      	cmp	r3, #100	; 0x64
 8005a2a:	d901      	bls.n	8005a30 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e175      	b.n	8005d1c <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a30:	4b94      	ldr	r3, [pc, #592]	; (8005c84 <HAL_RCC_OscConfig+0x7b4>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d0f0      	beq.n	8005a1e <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d106      	bne.n	8005a52 <HAL_RCC_OscConfig+0x582>
 8005a44:	4b8e      	ldr	r3, [pc, #568]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a48:	4a8d      	ldr	r2, [pc, #564]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005a4a:	f043 0301 	orr.w	r3, r3, #1
 8005a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a50:	e02d      	b.n	8005aae <HAL_RCC_OscConfig+0x5de>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10c      	bne.n	8005a74 <HAL_RCC_OscConfig+0x5a4>
 8005a5a:	4b89      	ldr	r3, [pc, #548]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5e:	4a88      	ldr	r2, [pc, #544]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005a60:	f023 0301 	bic.w	r3, r3, #1
 8005a64:	6713      	str	r3, [r2, #112]	; 0x70
 8005a66:	4b86      	ldr	r3, [pc, #536]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6a:	4a85      	ldr	r2, [pc, #532]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005a6c:	f023 0304 	bic.w	r3, r3, #4
 8005a70:	6713      	str	r3, [r2, #112]	; 0x70
 8005a72:	e01c      	b.n	8005aae <HAL_RCC_OscConfig+0x5de>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	2b05      	cmp	r3, #5
 8005a7a:	d10c      	bne.n	8005a96 <HAL_RCC_OscConfig+0x5c6>
 8005a7c:	4b80      	ldr	r3, [pc, #512]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a80:	4a7f      	ldr	r2, [pc, #508]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005a82:	f043 0304 	orr.w	r3, r3, #4
 8005a86:	6713      	str	r3, [r2, #112]	; 0x70
 8005a88:	4b7d      	ldr	r3, [pc, #500]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8c:	4a7c      	ldr	r2, [pc, #496]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005a8e:	f043 0301 	orr.w	r3, r3, #1
 8005a92:	6713      	str	r3, [r2, #112]	; 0x70
 8005a94:	e00b      	b.n	8005aae <HAL_RCC_OscConfig+0x5de>
 8005a96:	4b7a      	ldr	r3, [pc, #488]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a9a:	4a79      	ldr	r2, [pc, #484]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005a9c:	f023 0301 	bic.w	r3, r3, #1
 8005aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8005aa2:	4b77      	ldr	r3, [pc, #476]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa6:	4a76      	ldr	r2, [pc, #472]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005aa8:	f023 0304 	bic.w	r3, r3, #4
 8005aac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d015      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab6:	f7fc ffbb 	bl	8002a30 <HAL_GetTick>
 8005aba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005abc:	e00a      	b.n	8005ad4 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005abe:	f7fc ffb7 	bl	8002a30 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e123      	b.n	8005d1c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ad4:	4b6a      	ldr	r3, [pc, #424]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0ee      	beq.n	8005abe <HAL_RCC_OscConfig+0x5ee>
 8005ae0:	e014      	b.n	8005b0c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae2:	f7fc ffa5 	bl	8002a30 <HAL_GetTick>
 8005ae6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ae8:	e00a      	b.n	8005b00 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005aea:	f7fc ffa1 	bl	8002a30 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e10d      	b.n	8005d1c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b00:	4b5f      	ldr	r3, [pc, #380]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1ee      	bne.n	8005aea <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 8102 	beq.w	8005d1a <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005b16:	4b5a      	ldr	r3, [pc, #360]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b1e:	2b18      	cmp	r3, #24
 8005b20:	f000 80bd 	beq.w	8005c9e <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	f040 8095 	bne.w	8005c58 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b2e:	4b54      	ldr	r3, [pc, #336]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a53      	ldr	r2, [pc, #332]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005b34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3a:	f7fc ff79 	bl	8002a30 <HAL_GetTick>
 8005b3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b40:	e008      	b.n	8005b54 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b42:	f7fc ff75 	bl	8002a30 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d901      	bls.n	8005b54 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e0e3      	b.n	8005d1c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b54:	4b4a      	ldr	r3, [pc, #296]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1f0      	bne.n	8005b42 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b60:	4b47      	ldr	r3, [pc, #284]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005b62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b64:	4b48      	ldr	r3, [pc, #288]	; (8005c88 <HAL_RCC_OscConfig+0x7b8>)
 8005b66:	4013      	ands	r3, r2
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005b70:	0112      	lsls	r2, r2, #4
 8005b72:	430a      	orrs	r2, r1
 8005b74:	4942      	ldr	r1, [pc, #264]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	628b      	str	r3, [r1, #40]	; 0x28
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	025b      	lsls	r3, r3, #9
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b94:	3b01      	subs	r3, #1
 8005b96:	041b      	lsls	r3, r3, #16
 8005b98:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	061b      	lsls	r3, r3, #24
 8005ba6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005baa:	4935      	ldr	r1, [pc, #212]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005bb0:	4b33      	ldr	r3, [pc, #204]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb4:	4a32      	ldr	r2, [pc, #200]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005bb6:	f023 0301 	bic.w	r3, r3, #1
 8005bba:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005bbc:	4b30      	ldr	r3, [pc, #192]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bc0:	4b32      	ldr	r3, [pc, #200]	; (8005c8c <HAL_RCC_OscConfig+0x7bc>)
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005bc8:	00d2      	lsls	r2, r2, #3
 8005bca:	492d      	ldr	r1, [pc, #180]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005bd0:	4b2b      	ldr	r3, [pc, #172]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd4:	f023 020c 	bic.w	r2, r3, #12
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bdc:	4928      	ldr	r1, [pc, #160]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005be2:	4b27      	ldr	r3, [pc, #156]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be6:	f023 0202 	bic.w	r2, r3, #2
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bee:	4924      	ldr	r1, [pc, #144]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005bf4:	4b22      	ldr	r3, [pc, #136]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	4a21      	ldr	r2, [pc, #132]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c00:	4b1f      	ldr	r3, [pc, #124]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c04:	4a1e      	ldr	r2, [pc, #120]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005c0c:	4b1c      	ldr	r3, [pc, #112]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c10:	4a1b      	ldr	r2, [pc, #108]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005c12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005c18:	4b19      	ldr	r3, [pc, #100]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1c:	4a18      	ldr	r2, [pc, #96]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005c1e:	f043 0301 	orr.w	r3, r3, #1
 8005c22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c24:	4b16      	ldr	r3, [pc, #88]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a15      	ldr	r2, [pc, #84]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c30:	f7fc fefe 	bl	8002a30 <HAL_GetTick>
 8005c34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c36:	e008      	b.n	8005c4a <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c38:	f7fc fefa 	bl	8002a30 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d901      	bls.n	8005c4a <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e068      	b.n	8005d1c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c4a:	4b0d      	ldr	r3, [pc, #52]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0f0      	beq.n	8005c38 <HAL_RCC_OscConfig+0x768>
 8005c56:	e060      	b.n	8005d1a <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c58:	4b09      	ldr	r3, [pc, #36]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a08      	ldr	r2, [pc, #32]	; (8005c80 <HAL_RCC_OscConfig+0x7b0>)
 8005c5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c64:	f7fc fee4 	bl	8002a30 <HAL_GetTick>
 8005c68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c6a:	e011      	b.n	8005c90 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c6c:	f7fc fee0 	bl	8002a30 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d90a      	bls.n	8005c90 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e04e      	b.n	8005d1c <HAL_RCC_OscConfig+0x84c>
 8005c7e:	bf00      	nop
 8005c80:	58024400 	.word	0x58024400
 8005c84:	58024800 	.word	0x58024800
 8005c88:	fffffc0c 	.word	0xfffffc0c
 8005c8c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c90:	4b24      	ldr	r3, [pc, #144]	; (8005d24 <HAL_RCC_OscConfig+0x854>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1e7      	bne.n	8005c6c <HAL_RCC_OscConfig+0x79c>
 8005c9c:	e03d      	b.n	8005d1a <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005c9e:	4b21      	ldr	r3, [pc, #132]	; (8005d24 <HAL_RCC_OscConfig+0x854>)
 8005ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005ca4:	4b1f      	ldr	r3, [pc, #124]	; (8005d24 <HAL_RCC_OscConfig+0x854>)
 8005ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca8:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d031      	beq.n	8005d16 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f003 0203 	and.w	r2, r3, #3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d12a      	bne.n	8005d16 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	091b      	lsrs	r3, r3, #4
 8005cc4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d122      	bne.n	8005d16 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cda:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d11a      	bne.n	8005d16 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	0a5b      	lsrs	r3, r3, #9
 8005ce4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cec:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d111      	bne.n	8005d16 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	0c1b      	lsrs	r3, r3, #16
 8005cf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d108      	bne.n	8005d16 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	0e1b      	lsrs	r3, r3, #24
 8005d08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d10:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d001      	beq.n	8005d1a <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e000      	b.n	8005d1c <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3730      	adds	r7, #48	; 0x30
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	58024400 	.word	0x58024400

08005d28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e19c      	b.n	8006076 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d3c:	4b8a      	ldr	r3, [pc, #552]	; (8005f68 <HAL_RCC_ClockConfig+0x240>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 030f 	and.w	r3, r3, #15
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d910      	bls.n	8005d6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d4a:	4b87      	ldr	r3, [pc, #540]	; (8005f68 <HAL_RCC_ClockConfig+0x240>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f023 020f 	bic.w	r2, r3, #15
 8005d52:	4985      	ldr	r1, [pc, #532]	; (8005f68 <HAL_RCC_ClockConfig+0x240>)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d5a:	4b83      	ldr	r3, [pc, #524]	; (8005f68 <HAL_RCC_ClockConfig+0x240>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 030f 	and.w	r3, r3, #15
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d001      	beq.n	8005d6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e184      	b.n	8006076 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d010      	beq.n	8005d9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	691a      	ldr	r2, [r3, #16]
 8005d7c:	4b7b      	ldr	r3, [pc, #492]	; (8005f6c <HAL_RCC_ClockConfig+0x244>)
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d908      	bls.n	8005d9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d88:	4b78      	ldr	r3, [pc, #480]	; (8005f6c <HAL_RCC_ClockConfig+0x244>)
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	4975      	ldr	r1, [pc, #468]	; (8005f6c <HAL_RCC_ClockConfig+0x244>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0308 	and.w	r3, r3, #8
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d010      	beq.n	8005dc8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	695a      	ldr	r2, [r3, #20]
 8005daa:	4b70      	ldr	r3, [pc, #448]	; (8005f6c <HAL_RCC_ClockConfig+0x244>)
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d908      	bls.n	8005dc8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005db6:	4b6d      	ldr	r3, [pc, #436]	; (8005f6c <HAL_RCC_ClockConfig+0x244>)
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	496a      	ldr	r1, [pc, #424]	; (8005f6c <HAL_RCC_ClockConfig+0x244>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0310 	and.w	r3, r3, #16
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d010      	beq.n	8005df6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	699a      	ldr	r2, [r3, #24]
 8005dd8:	4b64      	ldr	r3, [pc, #400]	; (8005f6c <HAL_RCC_ClockConfig+0x244>)
 8005dda:	69db      	ldr	r3, [r3, #28]
 8005ddc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d908      	bls.n	8005df6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005de4:	4b61      	ldr	r3, [pc, #388]	; (8005f6c <HAL_RCC_ClockConfig+0x244>)
 8005de6:	69db      	ldr	r3, [r3, #28]
 8005de8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	495e      	ldr	r1, [pc, #376]	; (8005f6c <HAL_RCC_ClockConfig+0x244>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0320 	and.w	r3, r3, #32
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d010      	beq.n	8005e24 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	69da      	ldr	r2, [r3, #28]
 8005e06:	4b59      	ldr	r3, [pc, #356]	; (8005f6c <HAL_RCC_ClockConfig+0x244>)
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d908      	bls.n	8005e24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005e12:	4b56      	ldr	r3, [pc, #344]	; (8005f6c <HAL_RCC_ClockConfig+0x244>)
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	4953      	ldr	r1, [pc, #332]	; (8005f6c <HAL_RCC_ClockConfig+0x244>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0302 	and.w	r3, r3, #2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d010      	beq.n	8005e52 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68da      	ldr	r2, [r3, #12]
 8005e34:	4b4d      	ldr	r3, [pc, #308]	; (8005f6c <HAL_RCC_ClockConfig+0x244>)
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	f003 030f 	and.w	r3, r3, #15
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d908      	bls.n	8005e52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e40:	4b4a      	ldr	r3, [pc, #296]	; (8005f6c <HAL_RCC_ClockConfig+0x244>)
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	f023 020f 	bic.w	r2, r3, #15
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	4947      	ldr	r1, [pc, #284]	; (8005f6c <HAL_RCC_ClockConfig+0x244>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d055      	beq.n	8005f0a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005e5e:	4b43      	ldr	r3, [pc, #268]	; (8005f6c <HAL_RCC_ClockConfig+0x244>)
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	4940      	ldr	r1, [pc, #256]	; (8005f6c <HAL_RCC_ClockConfig+0x244>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d107      	bne.n	8005e88 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e78:	4b3c      	ldr	r3, [pc, #240]	; (8005f6c <HAL_RCC_ClockConfig+0x244>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d121      	bne.n	8005ec8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e0f6      	b.n	8006076 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	d107      	bne.n	8005ea0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e90:	4b36      	ldr	r3, [pc, #216]	; (8005f6c <HAL_RCC_ClockConfig+0x244>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d115      	bne.n	8005ec8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e0ea      	b.n	8006076 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d107      	bne.n	8005eb8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ea8:	4b30      	ldr	r3, [pc, #192]	; (8005f6c <HAL_RCC_ClockConfig+0x244>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d109      	bne.n	8005ec8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e0de      	b.n	8006076 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005eb8:	4b2c      	ldr	r3, [pc, #176]	; (8005f6c <HAL_RCC_ClockConfig+0x244>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0304 	and.w	r3, r3, #4
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e0d6      	b.n	8006076 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ec8:	4b28      	ldr	r3, [pc, #160]	; (8005f6c <HAL_RCC_ClockConfig+0x244>)
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	f023 0207 	bic.w	r2, r3, #7
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	4925      	ldr	r1, [pc, #148]	; (8005f6c <HAL_RCC_ClockConfig+0x244>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eda:	f7fc fda9 	bl	8002a30 <HAL_GetTick>
 8005ede:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ee0:	e00a      	b.n	8005ef8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ee2:	f7fc fda5 	bl	8002a30 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d901      	bls.n	8005ef8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e0be      	b.n	8006076 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ef8:	4b1c      	ldr	r3, [pc, #112]	; (8005f6c <HAL_RCC_ClockConfig+0x244>)
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	00db      	lsls	r3, r3, #3
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d1eb      	bne.n	8005ee2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d010      	beq.n	8005f38 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68da      	ldr	r2, [r3, #12]
 8005f1a:	4b14      	ldr	r3, [pc, #80]	; (8005f6c <HAL_RCC_ClockConfig+0x244>)
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	f003 030f 	and.w	r3, r3, #15
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d208      	bcs.n	8005f38 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f26:	4b11      	ldr	r3, [pc, #68]	; (8005f6c <HAL_RCC_ClockConfig+0x244>)
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	f023 020f 	bic.w	r2, r3, #15
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	490e      	ldr	r1, [pc, #56]	; (8005f6c <HAL_RCC_ClockConfig+0x244>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f38:	4b0b      	ldr	r3, [pc, #44]	; (8005f68 <HAL_RCC_ClockConfig+0x240>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 030f 	and.w	r3, r3, #15
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d214      	bcs.n	8005f70 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f46:	4b08      	ldr	r3, [pc, #32]	; (8005f68 <HAL_RCC_ClockConfig+0x240>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f023 020f 	bic.w	r2, r3, #15
 8005f4e:	4906      	ldr	r1, [pc, #24]	; (8005f68 <HAL_RCC_ClockConfig+0x240>)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f56:	4b04      	ldr	r3, [pc, #16]	; (8005f68 <HAL_RCC_ClockConfig+0x240>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 030f 	and.w	r3, r3, #15
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d005      	beq.n	8005f70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e086      	b.n	8006076 <HAL_RCC_ClockConfig+0x34e>
 8005f68:	52002000 	.word	0x52002000
 8005f6c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d010      	beq.n	8005f9e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	691a      	ldr	r2, [r3, #16]
 8005f80:	4b3f      	ldr	r3, [pc, #252]	; (8006080 <HAL_RCC_ClockConfig+0x358>)
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d208      	bcs.n	8005f9e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005f8c:	4b3c      	ldr	r3, [pc, #240]	; (8006080 <HAL_RCC_ClockConfig+0x358>)
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	4939      	ldr	r1, [pc, #228]	; (8006080 <HAL_RCC_ClockConfig+0x358>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0308 	and.w	r3, r3, #8
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d010      	beq.n	8005fcc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	695a      	ldr	r2, [r3, #20]
 8005fae:	4b34      	ldr	r3, [pc, #208]	; (8006080 <HAL_RCC_ClockConfig+0x358>)
 8005fb0:	69db      	ldr	r3, [r3, #28]
 8005fb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d208      	bcs.n	8005fcc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005fba:	4b31      	ldr	r3, [pc, #196]	; (8006080 <HAL_RCC_ClockConfig+0x358>)
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	492e      	ldr	r1, [pc, #184]	; (8006080 <HAL_RCC_ClockConfig+0x358>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0310 	and.w	r3, r3, #16
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d010      	beq.n	8005ffa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	699a      	ldr	r2, [r3, #24]
 8005fdc:	4b28      	ldr	r3, [pc, #160]	; (8006080 <HAL_RCC_ClockConfig+0x358>)
 8005fde:	69db      	ldr	r3, [r3, #28]
 8005fe0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d208      	bcs.n	8005ffa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005fe8:	4b25      	ldr	r3, [pc, #148]	; (8006080 <HAL_RCC_ClockConfig+0x358>)
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	4922      	ldr	r1, [pc, #136]	; (8006080 <HAL_RCC_ClockConfig+0x358>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0320 	and.w	r3, r3, #32
 8006002:	2b00      	cmp	r3, #0
 8006004:	d010      	beq.n	8006028 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	69da      	ldr	r2, [r3, #28]
 800600a:	4b1d      	ldr	r3, [pc, #116]	; (8006080 <HAL_RCC_ClockConfig+0x358>)
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006012:	429a      	cmp	r2, r3
 8006014:	d208      	bcs.n	8006028 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006016:	4b1a      	ldr	r3, [pc, #104]	; (8006080 <HAL_RCC_ClockConfig+0x358>)
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	4917      	ldr	r1, [pc, #92]	; (8006080 <HAL_RCC_ClockConfig+0x358>)
 8006024:	4313      	orrs	r3, r2
 8006026:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006028:	f000 f834 	bl	8006094 <HAL_RCC_GetSysClockFreq>
 800602c:	4602      	mov	r2, r0
 800602e:	4b14      	ldr	r3, [pc, #80]	; (8006080 <HAL_RCC_ClockConfig+0x358>)
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	0a1b      	lsrs	r3, r3, #8
 8006034:	f003 030f 	and.w	r3, r3, #15
 8006038:	4912      	ldr	r1, [pc, #72]	; (8006084 <HAL_RCC_ClockConfig+0x35c>)
 800603a:	5ccb      	ldrb	r3, [r1, r3]
 800603c:	f003 031f 	and.w	r3, r3, #31
 8006040:	fa22 f303 	lsr.w	r3, r2, r3
 8006044:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006046:	4b0e      	ldr	r3, [pc, #56]	; (8006080 <HAL_RCC_ClockConfig+0x358>)
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	f003 030f 	and.w	r3, r3, #15
 800604e:	4a0d      	ldr	r2, [pc, #52]	; (8006084 <HAL_RCC_ClockConfig+0x35c>)
 8006050:	5cd3      	ldrb	r3, [r2, r3]
 8006052:	f003 031f 	and.w	r3, r3, #31
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	fa22 f303 	lsr.w	r3, r2, r3
 800605c:	4a0a      	ldr	r2, [pc, #40]	; (8006088 <HAL_RCC_ClockConfig+0x360>)
 800605e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006060:	4a0a      	ldr	r2, [pc, #40]	; (800608c <HAL_RCC_ClockConfig+0x364>)
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006066:	4b0a      	ldr	r3, [pc, #40]	; (8006090 <HAL_RCC_ClockConfig+0x368>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4618      	mov	r0, r3
 800606c:	f7fc fc96 	bl	800299c <HAL_InitTick>
 8006070:	4603      	mov	r3, r0
 8006072:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006074:	7bfb      	ldrb	r3, [r7, #15]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	58024400 	.word	0x58024400
 8006084:	0800c75c 	.word	0x0800c75c
 8006088:	24000018 	.word	0x24000018
 800608c:	24000014 	.word	0x24000014
 8006090:	2400001c 	.word	0x2400001c

08006094 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006094:	b480      	push	{r7}
 8006096:	b089      	sub	sp, #36	; 0x24
 8006098:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800609a:	4bb3      	ldr	r3, [pc, #716]	; (8006368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060a2:	2b18      	cmp	r3, #24
 80060a4:	f200 8155 	bhi.w	8006352 <HAL_RCC_GetSysClockFreq+0x2be>
 80060a8:	a201      	add	r2, pc, #4	; (adr r2, 80060b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80060aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ae:	bf00      	nop
 80060b0:	08006115 	.word	0x08006115
 80060b4:	08006353 	.word	0x08006353
 80060b8:	08006353 	.word	0x08006353
 80060bc:	08006353 	.word	0x08006353
 80060c0:	08006353 	.word	0x08006353
 80060c4:	08006353 	.word	0x08006353
 80060c8:	08006353 	.word	0x08006353
 80060cc:	08006353 	.word	0x08006353
 80060d0:	0800613b 	.word	0x0800613b
 80060d4:	08006353 	.word	0x08006353
 80060d8:	08006353 	.word	0x08006353
 80060dc:	08006353 	.word	0x08006353
 80060e0:	08006353 	.word	0x08006353
 80060e4:	08006353 	.word	0x08006353
 80060e8:	08006353 	.word	0x08006353
 80060ec:	08006353 	.word	0x08006353
 80060f0:	08006141 	.word	0x08006141
 80060f4:	08006353 	.word	0x08006353
 80060f8:	08006353 	.word	0x08006353
 80060fc:	08006353 	.word	0x08006353
 8006100:	08006353 	.word	0x08006353
 8006104:	08006353 	.word	0x08006353
 8006108:	08006353 	.word	0x08006353
 800610c:	08006353 	.word	0x08006353
 8006110:	08006147 	.word	0x08006147
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006114:	4b94      	ldr	r3, [pc, #592]	; (8006368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0320 	and.w	r3, r3, #32
 800611c:	2b00      	cmp	r3, #0
 800611e:	d009      	beq.n	8006134 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006120:	4b91      	ldr	r3, [pc, #580]	; (8006368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	08db      	lsrs	r3, r3, #3
 8006126:	f003 0303 	and.w	r3, r3, #3
 800612a:	4a90      	ldr	r2, [pc, #576]	; (800636c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800612c:	fa22 f303 	lsr.w	r3, r2, r3
 8006130:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006132:	e111      	b.n	8006358 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006134:	4b8d      	ldr	r3, [pc, #564]	; (800636c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006136:	61bb      	str	r3, [r7, #24]
    break;
 8006138:	e10e      	b.n	8006358 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800613a:	4b8d      	ldr	r3, [pc, #564]	; (8006370 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800613c:	61bb      	str	r3, [r7, #24]
    break;
 800613e:	e10b      	b.n	8006358 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006140:	4b8c      	ldr	r3, [pc, #560]	; (8006374 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006142:	61bb      	str	r3, [r7, #24]
    break;
 8006144:	e108      	b.n	8006358 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006146:	4b88      	ldr	r3, [pc, #544]	; (8006368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614a:	f003 0303 	and.w	r3, r3, #3
 800614e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006150:	4b85      	ldr	r3, [pc, #532]	; (8006368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006154:	091b      	lsrs	r3, r3, #4
 8006156:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800615a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800615c:	4b82      	ldr	r3, [pc, #520]	; (8006368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006166:	4b80      	ldr	r3, [pc, #512]	; (8006368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800616a:	08db      	lsrs	r3, r3, #3
 800616c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	fb02 f303 	mul.w	r3, r2, r3
 8006176:	ee07 3a90 	vmov	s15, r3
 800617a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800617e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 80e1 	beq.w	800634c <HAL_RCC_GetSysClockFreq+0x2b8>
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	2b02      	cmp	r3, #2
 800618e:	f000 8083 	beq.w	8006298 <HAL_RCC_GetSysClockFreq+0x204>
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2b02      	cmp	r3, #2
 8006196:	f200 80a1 	bhi.w	80062dc <HAL_RCC_GetSysClockFreq+0x248>
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d003      	beq.n	80061a8 <HAL_RCC_GetSysClockFreq+0x114>
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d056      	beq.n	8006254 <HAL_RCC_GetSysClockFreq+0x1c0>
 80061a6:	e099      	b.n	80062dc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061a8:	4b6f      	ldr	r3, [pc, #444]	; (8006368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0320 	and.w	r3, r3, #32
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d02d      	beq.n	8006210 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80061b4:	4b6c      	ldr	r3, [pc, #432]	; (8006368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	08db      	lsrs	r3, r3, #3
 80061ba:	f003 0303 	and.w	r3, r3, #3
 80061be:	4a6b      	ldr	r2, [pc, #428]	; (800636c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80061c0:	fa22 f303 	lsr.w	r3, r2, r3
 80061c4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	ee07 3a90 	vmov	s15, r3
 80061cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	ee07 3a90 	vmov	s15, r3
 80061d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061de:	4b62      	ldr	r3, [pc, #392]	; (8006368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061e6:	ee07 3a90 	vmov	s15, r3
 80061ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80061f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006378 <HAL_RCC_GetSysClockFreq+0x2e4>
 80061f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800620a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800620e:	e087      	b.n	8006320 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	ee07 3a90 	vmov	s15, r3
 8006216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800621a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800637c <HAL_RCC_GetSysClockFreq+0x2e8>
 800621e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006222:	4b51      	ldr	r3, [pc, #324]	; (8006368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800622a:	ee07 3a90 	vmov	s15, r3
 800622e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006232:	ed97 6a02 	vldr	s12, [r7, #8]
 8006236:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006378 <HAL_RCC_GetSysClockFreq+0x2e4>
 800623a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800623e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800624a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800624e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006252:	e065      	b.n	8006320 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	ee07 3a90 	vmov	s15, r3
 800625a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800625e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006380 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006266:	4b40      	ldr	r3, [pc, #256]	; (8006368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800626e:	ee07 3a90 	vmov	s15, r3
 8006272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006276:	ed97 6a02 	vldr	s12, [r7, #8]
 800627a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006378 <HAL_RCC_GetSysClockFreq+0x2e4>
 800627e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800628a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800628e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006292:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006296:	e043      	b.n	8006320 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	ee07 3a90 	vmov	s15, r3
 800629e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006384 <HAL_RCC_GetSysClockFreq+0x2f0>
 80062a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062aa:	4b2f      	ldr	r3, [pc, #188]	; (8006368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b2:	ee07 3a90 	vmov	s15, r3
 80062b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80062be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006378 <HAL_RCC_GetSysClockFreq+0x2e4>
 80062c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062da:	e021      	b.n	8006320 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	ee07 3a90 	vmov	s15, r3
 80062e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006380 <HAL_RCC_GetSysClockFreq+0x2ec>
 80062ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ee:	4b1e      	ldr	r3, [pc, #120]	; (8006368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062f6:	ee07 3a90 	vmov	s15, r3
 80062fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006302:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006378 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800630a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800630e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800631a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800631e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006320:	4b11      	ldr	r3, [pc, #68]	; (8006368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006324:	0a5b      	lsrs	r3, r3, #9
 8006326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800632a:	3301      	adds	r3, #1
 800632c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	ee07 3a90 	vmov	s15, r3
 8006334:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006338:	edd7 6a07 	vldr	s13, [r7, #28]
 800633c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006340:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006344:	ee17 3a90 	vmov	r3, s15
 8006348:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800634a:	e005      	b.n	8006358 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800634c:	2300      	movs	r3, #0
 800634e:	61bb      	str	r3, [r7, #24]
    break;
 8006350:	e002      	b.n	8006358 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006352:	4b07      	ldr	r3, [pc, #28]	; (8006370 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006354:	61bb      	str	r3, [r7, #24]
    break;
 8006356:	bf00      	nop
  }

  return sysclockfreq;
 8006358:	69bb      	ldr	r3, [r7, #24]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3724      	adds	r7, #36	; 0x24
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	58024400 	.word	0x58024400
 800636c:	03d09000 	.word	0x03d09000
 8006370:	003d0900 	.word	0x003d0900
 8006374:	007a1200 	.word	0x007a1200
 8006378:	46000000 	.word	0x46000000
 800637c:	4c742400 	.word	0x4c742400
 8006380:	4a742400 	.word	0x4a742400
 8006384:	4af42400 	.word	0x4af42400

08006388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800638e:	f7ff fe81 	bl	8006094 <HAL_RCC_GetSysClockFreq>
 8006392:	4602      	mov	r2, r0
 8006394:	4b10      	ldr	r3, [pc, #64]	; (80063d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	0a1b      	lsrs	r3, r3, #8
 800639a:	f003 030f 	and.w	r3, r3, #15
 800639e:	490f      	ldr	r1, [pc, #60]	; (80063dc <HAL_RCC_GetHCLKFreq+0x54>)
 80063a0:	5ccb      	ldrb	r3, [r1, r3]
 80063a2:	f003 031f 	and.w	r3, r3, #31
 80063a6:	fa22 f303 	lsr.w	r3, r2, r3
 80063aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80063ac:	4b0a      	ldr	r3, [pc, #40]	; (80063d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	f003 030f 	and.w	r3, r3, #15
 80063b4:	4a09      	ldr	r2, [pc, #36]	; (80063dc <HAL_RCC_GetHCLKFreq+0x54>)
 80063b6:	5cd3      	ldrb	r3, [r2, r3]
 80063b8:	f003 031f 	and.w	r3, r3, #31
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	fa22 f303 	lsr.w	r3, r2, r3
 80063c2:	4a07      	ldr	r2, [pc, #28]	; (80063e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80063c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80063c6:	4a07      	ldr	r2, [pc, #28]	; (80063e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80063cc:	4b04      	ldr	r3, [pc, #16]	; (80063e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80063ce:	681b      	ldr	r3, [r3, #0]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	58024400 	.word	0x58024400
 80063dc:	0800c75c 	.word	0x0800c75c
 80063e0:	24000018 	.word	0x24000018
 80063e4:	24000014 	.word	0x24000014

080063e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80063ec:	f7ff ffcc 	bl	8006388 <HAL_RCC_GetHCLKFreq>
 80063f0:	4602      	mov	r2, r0
 80063f2:	4b06      	ldr	r3, [pc, #24]	; (800640c <HAL_RCC_GetPCLK1Freq+0x24>)
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	091b      	lsrs	r3, r3, #4
 80063f8:	f003 0307 	and.w	r3, r3, #7
 80063fc:	4904      	ldr	r1, [pc, #16]	; (8006410 <HAL_RCC_GetPCLK1Freq+0x28>)
 80063fe:	5ccb      	ldrb	r3, [r1, r3]
 8006400:	f003 031f 	and.w	r3, r3, #31
 8006404:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006408:	4618      	mov	r0, r3
 800640a:	bd80      	pop	{r7, pc}
 800640c:	58024400 	.word	0x58024400
 8006410:	0800c75c 	.word	0x0800c75c

08006414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006418:	f7ff ffb6 	bl	8006388 <HAL_RCC_GetHCLKFreq>
 800641c:	4602      	mov	r2, r0
 800641e:	4b06      	ldr	r3, [pc, #24]	; (8006438 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	0a1b      	lsrs	r3, r3, #8
 8006424:	f003 0307 	and.w	r3, r3, #7
 8006428:	4904      	ldr	r1, [pc, #16]	; (800643c <HAL_RCC_GetPCLK2Freq+0x28>)
 800642a:	5ccb      	ldrb	r3, [r1, r3]
 800642c:	f003 031f 	and.w	r3, r3, #31
 8006430:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006434:	4618      	mov	r0, r3
 8006436:	bd80      	pop	{r7, pc}
 8006438:	58024400 	.word	0x58024400
 800643c:	0800c75c 	.word	0x0800c75c

08006440 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006448:	2300      	movs	r3, #0
 800644a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800644c:	2300      	movs	r3, #0
 800644e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d03f      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006460:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006464:	d02a      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006466:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800646a:	d824      	bhi.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800646c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006470:	d018      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006472:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006476:	d81e      	bhi.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006478:	2b00      	cmp	r3, #0
 800647a:	d003      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800647c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006480:	d007      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006482:	e018      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006484:	4bab      	ldr	r3, [pc, #684]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006488:	4aaa      	ldr	r2, [pc, #680]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800648a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800648e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006490:	e015      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	3304      	adds	r3, #4
 8006496:	2102      	movs	r1, #2
 8006498:	4618      	mov	r0, r3
 800649a:	f001 fff3 	bl	8008484 <RCCEx_PLL2_Config>
 800649e:	4603      	mov	r3, r0
 80064a0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80064a2:	e00c      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	3324      	adds	r3, #36	; 0x24
 80064a8:	2102      	movs	r1, #2
 80064aa:	4618      	mov	r0, r3
 80064ac:	f002 f89c 	bl	80085e8 <RCCEx_PLL3_Config>
 80064b0:	4603      	mov	r3, r0
 80064b2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80064b4:	e003      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	75fb      	strb	r3, [r7, #23]
      break;
 80064ba:	e000      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80064bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064be:	7dfb      	ldrb	r3, [r7, #23]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d109      	bne.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80064c4:	4b9b      	ldr	r3, [pc, #620]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064d0:	4998      	ldr	r1, [pc, #608]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	650b      	str	r3, [r1, #80]	; 0x50
 80064d6:	e001      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d8:	7dfb      	ldrb	r3, [r7, #23]
 80064da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d03d      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ec:	2b04      	cmp	r3, #4
 80064ee:	d826      	bhi.n	800653e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80064f0:	a201      	add	r2, pc, #4	; (adr r2, 80064f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80064f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f6:	bf00      	nop
 80064f8:	0800650d 	.word	0x0800650d
 80064fc:	0800651b 	.word	0x0800651b
 8006500:	0800652d 	.word	0x0800652d
 8006504:	08006545 	.word	0x08006545
 8006508:	08006545 	.word	0x08006545
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800650c:	4b89      	ldr	r3, [pc, #548]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006510:	4a88      	ldr	r2, [pc, #544]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006516:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006518:	e015      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	3304      	adds	r3, #4
 800651e:	2100      	movs	r1, #0
 8006520:	4618      	mov	r0, r3
 8006522:	f001 ffaf 	bl	8008484 <RCCEx_PLL2_Config>
 8006526:	4603      	mov	r3, r0
 8006528:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800652a:	e00c      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3324      	adds	r3, #36	; 0x24
 8006530:	2100      	movs	r1, #0
 8006532:	4618      	mov	r0, r3
 8006534:	f002 f858 	bl	80085e8 <RCCEx_PLL3_Config>
 8006538:	4603      	mov	r3, r0
 800653a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800653c:	e003      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	75fb      	strb	r3, [r7, #23]
      break;
 8006542:	e000      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006544:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006546:	7dfb      	ldrb	r3, [r7, #23]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d109      	bne.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800654c:	4b79      	ldr	r3, [pc, #484]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800654e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006550:	f023 0207 	bic.w	r2, r3, #7
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006558:	4976      	ldr	r1, [pc, #472]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800655a:	4313      	orrs	r3, r2
 800655c:	650b      	str	r3, [r1, #80]	; 0x50
 800655e:	e001      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006560:	7dfb      	ldrb	r3, [r7, #23]
 8006562:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800656c:	2b00      	cmp	r3, #0
 800656e:	d042      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006578:	d02b      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800657a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800657e:	d825      	bhi.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006580:	2bc0      	cmp	r3, #192	; 0xc0
 8006582:	d028      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006584:	2bc0      	cmp	r3, #192	; 0xc0
 8006586:	d821      	bhi.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006588:	2b80      	cmp	r3, #128	; 0x80
 800658a:	d016      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800658c:	2b80      	cmp	r3, #128	; 0x80
 800658e:	d81d      	bhi.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006594:	2b40      	cmp	r3, #64	; 0x40
 8006596:	d007      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006598:	e018      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800659a:	4b66      	ldr	r3, [pc, #408]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800659c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659e:	4a65      	ldr	r2, [pc, #404]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80065a6:	e017      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	3304      	adds	r3, #4
 80065ac:	2100      	movs	r1, #0
 80065ae:	4618      	mov	r0, r3
 80065b0:	f001 ff68 	bl	8008484 <RCCEx_PLL2_Config>
 80065b4:	4603      	mov	r3, r0
 80065b6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80065b8:	e00e      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	3324      	adds	r3, #36	; 0x24
 80065be:	2100      	movs	r1, #0
 80065c0:	4618      	mov	r0, r3
 80065c2:	f002 f811 	bl	80085e8 <RCCEx_PLL3_Config>
 80065c6:	4603      	mov	r3, r0
 80065c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80065ca:	e005      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	75fb      	strb	r3, [r7, #23]
      break;
 80065d0:	e002      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80065d2:	bf00      	nop
 80065d4:	e000      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80065d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065d8:	7dfb      	ldrb	r3, [r7, #23]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d109      	bne.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80065de:	4b55      	ldr	r3, [pc, #340]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ea:	4952      	ldr	r1, [pc, #328]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	650b      	str	r3, [r1, #80]	; 0x50
 80065f0:	e001      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f2:	7dfb      	ldrb	r3, [r7, #23]
 80065f4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d049      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006608:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800660c:	d030      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800660e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006612:	d82a      	bhi.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006614:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006618:	d02c      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800661a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800661e:	d824      	bhi.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006620:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006624:	d018      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006626:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800662a:	d81e      	bhi.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800662c:	2b00      	cmp	r3, #0
 800662e:	d003      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006630:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006634:	d007      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006636:	e018      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006638:	4b3e      	ldr	r3, [pc, #248]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800663a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663c:	4a3d      	ldr	r2, [pc, #244]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800663e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006642:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006644:	e017      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	3304      	adds	r3, #4
 800664a:	2100      	movs	r1, #0
 800664c:	4618      	mov	r0, r3
 800664e:	f001 ff19 	bl	8008484 <RCCEx_PLL2_Config>
 8006652:	4603      	mov	r3, r0
 8006654:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006656:	e00e      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	3324      	adds	r3, #36	; 0x24
 800665c:	2100      	movs	r1, #0
 800665e:	4618      	mov	r0, r3
 8006660:	f001 ffc2 	bl	80085e8 <RCCEx_PLL3_Config>
 8006664:	4603      	mov	r3, r0
 8006666:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006668:	e005      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	75fb      	strb	r3, [r7, #23]
      break;
 800666e:	e002      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006670:	bf00      	nop
 8006672:	e000      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006674:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006676:	7dfb      	ldrb	r3, [r7, #23]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10a      	bne.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800667c:	4b2d      	ldr	r3, [pc, #180]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800667e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006680:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800668a:	492a      	ldr	r1, [pc, #168]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800668c:	4313      	orrs	r3, r2
 800668e:	658b      	str	r3, [r1, #88]	; 0x58
 8006690:	e001      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006692:	7dfb      	ldrb	r3, [r7, #23]
 8006694:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d04c      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80066a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066ac:	d030      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80066ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066b2:	d82a      	bhi.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80066b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80066b8:	d02c      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80066ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80066be:	d824      	bhi.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80066c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066c4:	d018      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80066c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066ca:	d81e      	bhi.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d003      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80066d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066d4:	d007      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80066d6:	e018      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066d8:	4b16      	ldr	r3, [pc, #88]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066dc:	4a15      	ldr	r2, [pc, #84]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80066e4:	e017      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	3304      	adds	r3, #4
 80066ea:	2100      	movs	r1, #0
 80066ec:	4618      	mov	r0, r3
 80066ee:	f001 fec9 	bl	8008484 <RCCEx_PLL2_Config>
 80066f2:	4603      	mov	r3, r0
 80066f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80066f6:	e00e      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	3324      	adds	r3, #36	; 0x24
 80066fc:	2100      	movs	r1, #0
 80066fe:	4618      	mov	r0, r3
 8006700:	f001 ff72 	bl	80085e8 <RCCEx_PLL3_Config>
 8006704:	4603      	mov	r3, r0
 8006706:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006708:	e005      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	75fb      	strb	r3, [r7, #23]
      break;
 800670e:	e002      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006710:	bf00      	nop
 8006712:	e000      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006714:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006716:	7dfb      	ldrb	r3, [r7, #23]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10d      	bne.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800671c:	4b05      	ldr	r3, [pc, #20]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800671e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006720:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800672a:	4902      	ldr	r1, [pc, #8]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800672c:	4313      	orrs	r3, r2
 800672e:	658b      	str	r3, [r1, #88]	; 0x58
 8006730:	e004      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006732:	bf00      	nop
 8006734:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006738:	7dfb      	ldrb	r3, [r7, #23]
 800673a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d032      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800674c:	2b30      	cmp	r3, #48	; 0x30
 800674e:	d01c      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006750:	2b30      	cmp	r3, #48	; 0x30
 8006752:	d817      	bhi.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006754:	2b20      	cmp	r3, #32
 8006756:	d00c      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006758:	2b20      	cmp	r3, #32
 800675a:	d813      	bhi.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800675c:	2b00      	cmp	r3, #0
 800675e:	d016      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006760:	2b10      	cmp	r3, #16
 8006762:	d10f      	bne.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006764:	4baf      	ldr	r3, [pc, #700]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006768:	4aae      	ldr	r2, [pc, #696]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800676a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800676e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006770:	e00e      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	3304      	adds	r3, #4
 8006776:	2102      	movs	r1, #2
 8006778:	4618      	mov	r0, r3
 800677a:	f001 fe83 	bl	8008484 <RCCEx_PLL2_Config>
 800677e:	4603      	mov	r3, r0
 8006780:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006782:	e005      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	75fb      	strb	r3, [r7, #23]
      break;
 8006788:	e002      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800678a:	bf00      	nop
 800678c:	e000      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800678e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006790:	7dfb      	ldrb	r3, [r7, #23]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d109      	bne.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006796:	4ba3      	ldr	r3, [pc, #652]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800679a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067a2:	49a0      	ldr	r1, [pc, #640]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80067a8:	e001      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067aa:	7dfb      	ldrb	r3, [r7, #23]
 80067ac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d047      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067c2:	d030      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80067c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067c8:	d82a      	bhi.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80067ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067ce:	d02c      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80067d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067d4:	d824      	bhi.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80067d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067da:	d018      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80067dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067e0:	d81e      	bhi.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d003      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80067e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ea:	d007      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80067ec:	e018      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067ee:	4b8d      	ldr	r3, [pc, #564]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f2:	4a8c      	ldr	r2, [pc, #560]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80067fa:	e017      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	3304      	adds	r3, #4
 8006800:	2100      	movs	r1, #0
 8006802:	4618      	mov	r0, r3
 8006804:	f001 fe3e 	bl	8008484 <RCCEx_PLL2_Config>
 8006808:	4603      	mov	r3, r0
 800680a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800680c:	e00e      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	3324      	adds	r3, #36	; 0x24
 8006812:	2100      	movs	r1, #0
 8006814:	4618      	mov	r0, r3
 8006816:	f001 fee7 	bl	80085e8 <RCCEx_PLL3_Config>
 800681a:	4603      	mov	r3, r0
 800681c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800681e:	e005      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	75fb      	strb	r3, [r7, #23]
      break;
 8006824:	e002      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006826:	bf00      	nop
 8006828:	e000      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800682a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800682c:	7dfb      	ldrb	r3, [r7, #23]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d109      	bne.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006832:	4b7c      	ldr	r3, [pc, #496]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006836:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800683e:	4979      	ldr	r1, [pc, #484]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006840:	4313      	orrs	r3, r2
 8006842:	650b      	str	r3, [r1, #80]	; 0x50
 8006844:	e001      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006846:	7dfb      	ldrb	r3, [r7, #23]
 8006848:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d049      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800685a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800685e:	d02e      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8006860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006864:	d828      	bhi.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006866:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800686a:	d02a      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800686c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006870:	d822      	bhi.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006872:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006876:	d026      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006878:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800687c:	d81c      	bhi.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800687e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006882:	d010      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006884:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006888:	d816      	bhi.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800688a:	2b00      	cmp	r3, #0
 800688c:	d01d      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800688e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006892:	d111      	bne.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	3304      	adds	r3, #4
 8006898:	2101      	movs	r1, #1
 800689a:	4618      	mov	r0, r3
 800689c:	f001 fdf2 	bl	8008484 <RCCEx_PLL2_Config>
 80068a0:	4603      	mov	r3, r0
 80068a2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80068a4:	e012      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	3324      	adds	r3, #36	; 0x24
 80068aa:	2101      	movs	r1, #1
 80068ac:	4618      	mov	r0, r3
 80068ae:	f001 fe9b 	bl	80085e8 <RCCEx_PLL3_Config>
 80068b2:	4603      	mov	r3, r0
 80068b4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80068b6:	e009      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	75fb      	strb	r3, [r7, #23]
      break;
 80068bc:	e006      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80068be:	bf00      	nop
 80068c0:	e004      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80068c2:	bf00      	nop
 80068c4:	e002      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80068c6:	bf00      	nop
 80068c8:	e000      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80068ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068cc:	7dfb      	ldrb	r3, [r7, #23]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d109      	bne.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80068d2:	4b54      	ldr	r3, [pc, #336]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80068d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068d6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068de:	4951      	ldr	r1, [pc, #324]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	650b      	str	r3, [r1, #80]	; 0x50
 80068e4:	e001      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e6:	7dfb      	ldrb	r3, [r7, #23]
 80068e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d04b      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80068fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006900:	d02e      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006902:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006906:	d828      	bhi.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800690c:	d02a      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800690e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006912:	d822      	bhi.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006914:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006918:	d026      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800691a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800691e:	d81c      	bhi.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006920:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006924:	d010      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006926:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800692a:	d816      	bhi.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800692c:	2b00      	cmp	r3, #0
 800692e:	d01d      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006930:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006934:	d111      	bne.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	3304      	adds	r3, #4
 800693a:	2101      	movs	r1, #1
 800693c:	4618      	mov	r0, r3
 800693e:	f001 fda1 	bl	8008484 <RCCEx_PLL2_Config>
 8006942:	4603      	mov	r3, r0
 8006944:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006946:	e012      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	3324      	adds	r3, #36	; 0x24
 800694c:	2101      	movs	r1, #1
 800694e:	4618      	mov	r0, r3
 8006950:	f001 fe4a 	bl	80085e8 <RCCEx_PLL3_Config>
 8006954:	4603      	mov	r3, r0
 8006956:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006958:	e009      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	75fb      	strb	r3, [r7, #23]
      break;
 800695e:	e006      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006960:	bf00      	nop
 8006962:	e004      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006964:	bf00      	nop
 8006966:	e002      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006968:	bf00      	nop
 800696a:	e000      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800696c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800696e:	7dfb      	ldrb	r3, [r7, #23]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10a      	bne.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006974:	4b2b      	ldr	r3, [pc, #172]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006978:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006982:	4928      	ldr	r1, [pc, #160]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006984:	4313      	orrs	r3, r2
 8006986:	658b      	str	r3, [r1, #88]	; 0x58
 8006988:	e001      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800698a:	7dfb      	ldrb	r3, [r7, #23]
 800698c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d02f      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800699e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069a2:	d00e      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80069a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069a8:	d814      	bhi.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d015      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80069ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069b2:	d10f      	bne.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069b4:	4b1b      	ldr	r3, [pc, #108]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80069b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b8:	4a1a      	ldr	r2, [pc, #104]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80069ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80069c0:	e00c      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	3304      	adds	r3, #4
 80069c6:	2101      	movs	r1, #1
 80069c8:	4618      	mov	r0, r3
 80069ca:	f001 fd5b 	bl	8008484 <RCCEx_PLL2_Config>
 80069ce:	4603      	mov	r3, r0
 80069d0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80069d2:	e003      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	75fb      	strb	r3, [r7, #23]
      break;
 80069d8:	e000      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80069da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d109      	bne.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80069e2:	4b10      	ldr	r3, [pc, #64]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80069e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069ee:	490d      	ldr	r1, [pc, #52]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	650b      	str	r3, [r1, #80]	; 0x50
 80069f4:	e001      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f6:	7dfb      	ldrb	r3, [r7, #23]
 80069f8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d033      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a0a:	2b03      	cmp	r3, #3
 8006a0c:	d81c      	bhi.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006a0e:	a201      	add	r2, pc, #4	; (adr r2, 8006a14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a14:	08006a4f 	.word	0x08006a4f
 8006a18:	08006a29 	.word	0x08006a29
 8006a1c:	08006a37 	.word	0x08006a37
 8006a20:	08006a4f 	.word	0x08006a4f
 8006a24:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a28:	4bb8      	ldr	r3, [pc, #736]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2c:	4ab7      	ldr	r2, [pc, #732]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006a34:	e00c      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	3304      	adds	r3, #4
 8006a3a:	2102      	movs	r1, #2
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f001 fd21 	bl	8008484 <RCCEx_PLL2_Config>
 8006a42:	4603      	mov	r3, r0
 8006a44:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006a46:	e003      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a4c:	e000      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006a4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a50:	7dfb      	ldrb	r3, [r7, #23]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d109      	bne.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006a56:	4bad      	ldr	r3, [pc, #692]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a5a:	f023 0203 	bic.w	r2, r3, #3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a62:	49aa      	ldr	r1, [pc, #680]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006a68:	e001      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a6a:	7dfb      	ldrb	r3, [r7, #23]
 8006a6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f000 8086 	beq.w	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a7c:	4ba4      	ldr	r3, [pc, #656]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4aa3      	ldr	r2, [pc, #652]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a88:	f7fb ffd2 	bl	8002a30 <HAL_GetTick>
 8006a8c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a8e:	e009      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a90:	f7fb ffce 	bl	8002a30 <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	2b64      	cmp	r3, #100	; 0x64
 8006a9c:	d902      	bls.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	75fb      	strb	r3, [r7, #23]
        break;
 8006aa2:	e005      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006aa4:	4b9a      	ldr	r3, [pc, #616]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d0ef      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006ab0:	7dfb      	ldrb	r3, [r7, #23]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d166      	bne.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006ab6:	4b95      	ldr	r3, [pc, #596]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ab8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ac0:	4053      	eors	r3, r2
 8006ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d013      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006aca:	4b90      	ldr	r3, [pc, #576]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ad2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ad4:	4b8d      	ldr	r3, [pc, #564]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad8:	4a8c      	ldr	r2, [pc, #560]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ada:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ade:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ae0:	4b8a      	ldr	r3, [pc, #552]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae4:	4a89      	ldr	r2, [pc, #548]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aea:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006aec:	4a87      	ldr	r2, [pc, #540]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006afc:	d115      	bne.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006afe:	f7fb ff97 	bl	8002a30 <HAL_GetTick>
 8006b02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b04:	e00b      	b.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b06:	f7fb ff93 	bl	8002a30 <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d902      	bls.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	75fb      	strb	r3, [r7, #23]
            break;
 8006b1c:	e005      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b1e:	4b7b      	ldr	r3, [pc, #492]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0ed      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006b2a:	7dfb      	ldrb	r3, [r7, #23]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d126      	bne.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b3e:	d10d      	bne.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006b40:	4b72      	ldr	r3, [pc, #456]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b4e:	0919      	lsrs	r1, r3, #4
 8006b50:	4b70      	ldr	r3, [pc, #448]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006b52:	400b      	ands	r3, r1
 8006b54:	496d      	ldr	r1, [pc, #436]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b56:	4313      	orrs	r3, r2
 8006b58:	610b      	str	r3, [r1, #16]
 8006b5a:	e005      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006b5c:	4b6b      	ldr	r3, [pc, #428]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	4a6a      	ldr	r2, [pc, #424]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b62:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006b66:	6113      	str	r3, [r2, #16]
 8006b68:	4b68      	ldr	r3, [pc, #416]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b76:	4965      	ldr	r1, [pc, #404]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	670b      	str	r3, [r1, #112]	; 0x70
 8006b7c:	e004      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
 8006b80:	75bb      	strb	r3, [r7, #22]
 8006b82:	e001      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b84:	7dfb      	ldrb	r3, [r7, #23]
 8006b86:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d07e      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b98:	2b28      	cmp	r3, #40	; 0x28
 8006b9a:	d867      	bhi.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006b9c:	a201      	add	r2, pc, #4	; (adr r2, 8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba2:	bf00      	nop
 8006ba4:	08006c73 	.word	0x08006c73
 8006ba8:	08006c6d 	.word	0x08006c6d
 8006bac:	08006c6d 	.word	0x08006c6d
 8006bb0:	08006c6d 	.word	0x08006c6d
 8006bb4:	08006c6d 	.word	0x08006c6d
 8006bb8:	08006c6d 	.word	0x08006c6d
 8006bbc:	08006c6d 	.word	0x08006c6d
 8006bc0:	08006c6d 	.word	0x08006c6d
 8006bc4:	08006c49 	.word	0x08006c49
 8006bc8:	08006c6d 	.word	0x08006c6d
 8006bcc:	08006c6d 	.word	0x08006c6d
 8006bd0:	08006c6d 	.word	0x08006c6d
 8006bd4:	08006c6d 	.word	0x08006c6d
 8006bd8:	08006c6d 	.word	0x08006c6d
 8006bdc:	08006c6d 	.word	0x08006c6d
 8006be0:	08006c6d 	.word	0x08006c6d
 8006be4:	08006c5b 	.word	0x08006c5b
 8006be8:	08006c6d 	.word	0x08006c6d
 8006bec:	08006c6d 	.word	0x08006c6d
 8006bf0:	08006c6d 	.word	0x08006c6d
 8006bf4:	08006c6d 	.word	0x08006c6d
 8006bf8:	08006c6d 	.word	0x08006c6d
 8006bfc:	08006c6d 	.word	0x08006c6d
 8006c00:	08006c6d 	.word	0x08006c6d
 8006c04:	08006c73 	.word	0x08006c73
 8006c08:	08006c6d 	.word	0x08006c6d
 8006c0c:	08006c6d 	.word	0x08006c6d
 8006c10:	08006c6d 	.word	0x08006c6d
 8006c14:	08006c6d 	.word	0x08006c6d
 8006c18:	08006c6d 	.word	0x08006c6d
 8006c1c:	08006c6d 	.word	0x08006c6d
 8006c20:	08006c6d 	.word	0x08006c6d
 8006c24:	08006c73 	.word	0x08006c73
 8006c28:	08006c6d 	.word	0x08006c6d
 8006c2c:	08006c6d 	.word	0x08006c6d
 8006c30:	08006c6d 	.word	0x08006c6d
 8006c34:	08006c6d 	.word	0x08006c6d
 8006c38:	08006c6d 	.word	0x08006c6d
 8006c3c:	08006c6d 	.word	0x08006c6d
 8006c40:	08006c6d 	.word	0x08006c6d
 8006c44:	08006c73 	.word	0x08006c73
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	3304      	adds	r3, #4
 8006c4c:	2101      	movs	r1, #1
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f001 fc18 	bl	8008484 <RCCEx_PLL2_Config>
 8006c54:	4603      	mov	r3, r0
 8006c56:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006c58:	e00c      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	3324      	adds	r3, #36	; 0x24
 8006c5e:	2101      	movs	r1, #1
 8006c60:	4618      	mov	r0, r3
 8006c62:	f001 fcc1 	bl	80085e8 <RCCEx_PLL3_Config>
 8006c66:	4603      	mov	r3, r0
 8006c68:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006c6a:	e003      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c70:	e000      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006c72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c74:	7dfb      	ldrb	r3, [r7, #23]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d109      	bne.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006c7a:	4b24      	ldr	r3, [pc, #144]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c7e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c86:	4921      	ldr	r1, [pc, #132]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	654b      	str	r3, [r1, #84]	; 0x54
 8006c8c:	e001      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c8e:	7dfb      	ldrb	r3, [r7, #23]
 8006c90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d03e      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ca2:	2b05      	cmp	r3, #5
 8006ca4:	d820      	bhi.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006ca6:	a201      	add	r2, pc, #4	; (adr r2, 8006cac <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cac:	08006cef 	.word	0x08006cef
 8006cb0:	08006cc5 	.word	0x08006cc5
 8006cb4:	08006cd7 	.word	0x08006cd7
 8006cb8:	08006cef 	.word	0x08006cef
 8006cbc:	08006cef 	.word	0x08006cef
 8006cc0:	08006cef 	.word	0x08006cef
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	3304      	adds	r3, #4
 8006cc8:	2101      	movs	r1, #1
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f001 fbda 	bl	8008484 <RCCEx_PLL2_Config>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006cd4:	e00c      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	3324      	adds	r3, #36	; 0x24
 8006cda:	2101      	movs	r1, #1
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f001 fc83 	bl	80085e8 <RCCEx_PLL3_Config>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006ce6:	e003      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	75fb      	strb	r3, [r7, #23]
      break;
 8006cec:	e000      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006cee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cf0:	7dfb      	ldrb	r3, [r7, #23]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d110      	bne.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006cf6:	4b05      	ldr	r3, [pc, #20]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cfa:	f023 0207 	bic.w	r2, r3, #7
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d02:	4902      	ldr	r1, [pc, #8]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	654b      	str	r3, [r1, #84]	; 0x54
 8006d08:	e008      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006d0a:	bf00      	nop
 8006d0c:	58024400 	.word	0x58024400
 8006d10:	58024800 	.word	0x58024800
 8006d14:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d18:	7dfb      	ldrb	r3, [r7, #23]
 8006d1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0304 	and.w	r3, r3, #4
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d039      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d2e:	2b05      	cmp	r3, #5
 8006d30:	d820      	bhi.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006d32:	a201      	add	r2, pc, #4	; (adr r2, 8006d38 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d38:	08006d7b 	.word	0x08006d7b
 8006d3c:	08006d51 	.word	0x08006d51
 8006d40:	08006d63 	.word	0x08006d63
 8006d44:	08006d7b 	.word	0x08006d7b
 8006d48:	08006d7b 	.word	0x08006d7b
 8006d4c:	08006d7b 	.word	0x08006d7b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	3304      	adds	r3, #4
 8006d54:	2101      	movs	r1, #1
 8006d56:	4618      	mov	r0, r3
 8006d58:	f001 fb94 	bl	8008484 <RCCEx_PLL2_Config>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006d60:	e00c      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	3324      	adds	r3, #36	; 0x24
 8006d66:	2101      	movs	r1, #1
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f001 fc3d 	bl	80085e8 <RCCEx_PLL3_Config>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006d72:	e003      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	75fb      	strb	r3, [r7, #23]
      break;
 8006d78:	e000      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006d7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d7c:	7dfb      	ldrb	r3, [r7, #23]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10a      	bne.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d82:	4bb7      	ldr	r3, [pc, #732]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d86:	f023 0207 	bic.w	r2, r3, #7
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d90:	49b3      	ldr	r1, [pc, #716]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	658b      	str	r3, [r1, #88]	; 0x58
 8006d96:	e001      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d98:	7dfb      	ldrb	r3, [r7, #23]
 8006d9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0320 	and.w	r3, r3, #32
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d04b      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006db2:	d02e      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006db8:	d828      	bhi.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dbe:	d02a      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc4:	d822      	bhi.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006dc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006dca:	d026      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006dcc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006dd0:	d81c      	bhi.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006dd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dd6:	d010      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006dd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ddc:	d816      	bhi.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d01d      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006de2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006de6:	d111      	bne.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	3304      	adds	r3, #4
 8006dec:	2100      	movs	r1, #0
 8006dee:	4618      	mov	r0, r3
 8006df0:	f001 fb48 	bl	8008484 <RCCEx_PLL2_Config>
 8006df4:	4603      	mov	r3, r0
 8006df6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006df8:	e012      	b.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	3324      	adds	r3, #36	; 0x24
 8006dfe:	2102      	movs	r1, #2
 8006e00:	4618      	mov	r0, r3
 8006e02:	f001 fbf1 	bl	80085e8 <RCCEx_PLL3_Config>
 8006e06:	4603      	mov	r3, r0
 8006e08:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006e0a:	e009      	b.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e10:	e006      	b.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006e12:	bf00      	nop
 8006e14:	e004      	b.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006e16:	bf00      	nop
 8006e18:	e002      	b.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006e1a:	bf00      	nop
 8006e1c:	e000      	b.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006e1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e20:	7dfb      	ldrb	r3, [r7, #23]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10a      	bne.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e26:	4b8e      	ldr	r3, [pc, #568]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e2a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e34:	498a      	ldr	r1, [pc, #552]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	654b      	str	r3, [r1, #84]	; 0x54
 8006e3a:	e001      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e3c:	7dfb      	ldrb	r3, [r7, #23]
 8006e3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d04b      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e52:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006e56:	d02e      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006e58:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006e5c:	d828      	bhi.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e62:	d02a      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e68:	d822      	bhi.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006e6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e6e:	d026      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006e70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e74:	d81c      	bhi.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006e76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e7a:	d010      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006e7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e80:	d816      	bhi.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d01d      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e8a:	d111      	bne.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	3304      	adds	r3, #4
 8006e90:	2100      	movs	r1, #0
 8006e92:	4618      	mov	r0, r3
 8006e94:	f001 faf6 	bl	8008484 <RCCEx_PLL2_Config>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006e9c:	e012      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	3324      	adds	r3, #36	; 0x24
 8006ea2:	2102      	movs	r1, #2
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f001 fb9f 	bl	80085e8 <RCCEx_PLL3_Config>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006eae:	e009      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8006eb4:	e006      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006eb6:	bf00      	nop
 8006eb8:	e004      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006eba:	bf00      	nop
 8006ebc:	e002      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006ebe:	bf00      	nop
 8006ec0:	e000      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006ec2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ec4:	7dfb      	ldrb	r3, [r7, #23]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10a      	bne.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006eca:	4b65      	ldr	r3, [pc, #404]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ece:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ed8:	4961      	ldr	r1, [pc, #388]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	658b      	str	r3, [r1, #88]	; 0x58
 8006ede:	e001      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee0:	7dfb      	ldrb	r3, [r7, #23]
 8006ee2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d04b      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ef6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006efa:	d02e      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006efc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006f00:	d828      	bhi.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006f02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f06:	d02a      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f0c:	d822      	bhi.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006f0e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006f12:	d026      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006f14:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006f18:	d81c      	bhi.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006f1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f1e:	d010      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006f20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f24:	d816      	bhi.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d01d      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f2e:	d111      	bne.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	3304      	adds	r3, #4
 8006f34:	2100      	movs	r1, #0
 8006f36:	4618      	mov	r0, r3
 8006f38:	f001 faa4 	bl	8008484 <RCCEx_PLL2_Config>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006f40:	e012      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	3324      	adds	r3, #36	; 0x24
 8006f46:	2102      	movs	r1, #2
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f001 fb4d 	bl	80085e8 <RCCEx_PLL3_Config>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006f52:	e009      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	75fb      	strb	r3, [r7, #23]
      break;
 8006f58:	e006      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006f5a:	bf00      	nop
 8006f5c:	e004      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006f5e:	bf00      	nop
 8006f60:	e002      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006f62:	bf00      	nop
 8006f64:	e000      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006f66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f68:	7dfb      	ldrb	r3, [r7, #23]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10a      	bne.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006f6e:	4b3c      	ldr	r3, [pc, #240]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f7c:	4938      	ldr	r1, [pc, #224]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	658b      	str	r3, [r1, #88]	; 0x58
 8006f82:	e001      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f84:	7dfb      	ldrb	r3, [r7, #23]
 8006f86:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0308 	and.w	r3, r3, #8
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d01a      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f9e:	d10a      	bne.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	3324      	adds	r3, #36	; 0x24
 8006fa4:	2102      	movs	r1, #2
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f001 fb1e 	bl	80085e8 <RCCEx_PLL3_Config>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d001      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006fb6:	4b2a      	ldr	r3, [pc, #168]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fc4:	4926      	ldr	r1, [pc, #152]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0310 	and.w	r3, r3, #16
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d01a      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fe0:	d10a      	bne.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	3324      	adds	r3, #36	; 0x24
 8006fe6:	2102      	movs	r1, #2
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f001 fafd 	bl	80085e8 <RCCEx_PLL3_Config>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ff8:	4b19      	ldr	r3, [pc, #100]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ffc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007006:	4916      	ldr	r1, [pc, #88]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007008:	4313      	orrs	r3, r2
 800700a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d036      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800701e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007022:	d01f      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007024:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007028:	d817      	bhi.n	800705a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800702a:	2b00      	cmp	r3, #0
 800702c:	d003      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800702e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007032:	d009      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007034:	e011      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	3304      	adds	r3, #4
 800703a:	2100      	movs	r1, #0
 800703c:	4618      	mov	r0, r3
 800703e:	f001 fa21 	bl	8008484 <RCCEx_PLL2_Config>
 8007042:	4603      	mov	r3, r0
 8007044:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007046:	e00e      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	3324      	adds	r3, #36	; 0x24
 800704c:	2102      	movs	r1, #2
 800704e:	4618      	mov	r0, r3
 8007050:	f001 faca 	bl	80085e8 <RCCEx_PLL3_Config>
 8007054:	4603      	mov	r3, r0
 8007056:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007058:	e005      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	75fb      	strb	r3, [r7, #23]
      break;
 800705e:	e002      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007060:	58024400 	.word	0x58024400
      break;
 8007064:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007066:	7dfb      	ldrb	r3, [r7, #23]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d10a      	bne.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800706c:	4b93      	ldr	r3, [pc, #588]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800706e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007070:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800707a:	4990      	ldr	r1, [pc, #576]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800707c:	4313      	orrs	r3, r2
 800707e:	658b      	str	r3, [r1, #88]	; 0x58
 8007080:	e001      	b.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007082:	7dfb      	ldrb	r3, [r7, #23]
 8007084:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d033      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007098:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800709c:	d01c      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800709e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070a2:	d816      	bhi.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80070a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070a8:	d003      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80070aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070ae:	d007      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80070b0:	e00f      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070b2:	4b82      	ldr	r3, [pc, #520]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b6:	4a81      	ldr	r2, [pc, #516]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80070be:	e00c      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	3324      	adds	r3, #36	; 0x24
 80070c4:	2101      	movs	r1, #1
 80070c6:	4618      	mov	r0, r3
 80070c8:	f001 fa8e 	bl	80085e8 <RCCEx_PLL3_Config>
 80070cc:	4603      	mov	r3, r0
 80070ce:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80070d0:	e003      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	75fb      	strb	r3, [r7, #23]
      break;
 80070d6:	e000      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80070d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070da:	7dfb      	ldrb	r3, [r7, #23]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10a      	bne.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070e0:	4b76      	ldr	r3, [pc, #472]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070ee:	4973      	ldr	r1, [pc, #460]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	654b      	str	r3, [r1, #84]	; 0x54
 80070f4:	e001      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070f6:	7dfb      	ldrb	r3, [r7, #23]
 80070f8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d029      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800710a:	2b00      	cmp	r3, #0
 800710c:	d003      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800710e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007112:	d007      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007114:	e00f      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007116:	4b69      	ldr	r3, [pc, #420]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711a:	4a68      	ldr	r2, [pc, #416]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800711c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007120:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007122:	e00b      	b.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	3304      	adds	r3, #4
 8007128:	2102      	movs	r1, #2
 800712a:	4618      	mov	r0, r3
 800712c:	f001 f9aa 	bl	8008484 <RCCEx_PLL2_Config>
 8007130:	4603      	mov	r3, r0
 8007132:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007134:	e002      	b.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	75fb      	strb	r3, [r7, #23]
      break;
 800713a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800713c:	7dfb      	ldrb	r3, [r7, #23]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d109      	bne.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007142:	4b5e      	ldr	r3, [pc, #376]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007146:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800714e:	495b      	ldr	r1, [pc, #364]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007150:	4313      	orrs	r3, r2
 8007152:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007154:	e001      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007156:	7dfb      	ldrb	r3, [r7, #23]
 8007158:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00a      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	3324      	adds	r3, #36	; 0x24
 800716a:	2102      	movs	r1, #2
 800716c:	4618      	mov	r0, r3
 800716e:	f001 fa3b 	bl	80085e8 <RCCEx_PLL3_Config>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d001      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d030      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800718c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007190:	d017      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007192:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007196:	d811      	bhi.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800719c:	d013      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800719e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071a2:	d80b      	bhi.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d010      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80071a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ac:	d106      	bne.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071ae:	4b43      	ldr	r3, [pc, #268]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b2:	4a42      	ldr	r2, [pc, #264]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80071ba:	e007      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	75fb      	strb	r3, [r7, #23]
      break;
 80071c0:	e004      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80071c2:	bf00      	nop
 80071c4:	e002      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80071c6:	bf00      	nop
 80071c8:	e000      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80071ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071cc:	7dfb      	ldrb	r3, [r7, #23]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d109      	bne.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80071d2:	4b3a      	ldr	r3, [pc, #232]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071de:	4937      	ldr	r1, [pc, #220]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	654b      	str	r3, [r1, #84]	; 0x54
 80071e4:	e001      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e6:	7dfb      	ldrb	r3, [r7, #23]
 80071e8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d008      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80071f6:	4b31      	ldr	r3, [pc, #196]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007202:	492e      	ldr	r1, [pc, #184]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007204:	4313      	orrs	r3, r2
 8007206:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d009      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007214:	4b29      	ldr	r3, [pc, #164]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007222:	4926      	ldr	r1, [pc, #152]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007224:	4313      	orrs	r3, r2
 8007226:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d008      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007234:	4b21      	ldr	r3, [pc, #132]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007238:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007240:	491e      	ldr	r1, [pc, #120]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007242:	4313      	orrs	r3, r2
 8007244:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00d      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007252:	4b1a      	ldr	r3, [pc, #104]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	4a19      	ldr	r2, [pc, #100]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007258:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800725c:	6113      	str	r3, [r2, #16]
 800725e:	4b17      	ldr	r3, [pc, #92]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007260:	691a      	ldr	r2, [r3, #16]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007268:	4914      	ldr	r1, [pc, #80]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800726a:	4313      	orrs	r3, r2
 800726c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	da08      	bge.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007276:	4b11      	ldr	r3, [pc, #68]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800727a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007282:	490e      	ldr	r1, [pc, #56]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007284:	4313      	orrs	r3, r2
 8007286:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d009      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007294:	4b09      	ldr	r3, [pc, #36]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007298:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a2:	4906      	ldr	r1, [pc, #24]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072a4:	4313      	orrs	r3, r2
 80072a6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80072a8:	7dbb      	ldrb	r3, [r7, #22]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d101      	bne.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80072ae:	2300      	movs	r3, #0
 80072b0:	e000      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3718      	adds	r7, #24
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	58024400 	.word	0x58024400

080072c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b090      	sub	sp, #64	; 0x40
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072ce:	f040 8095 	bne.w	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80072d2:	4bae      	ldr	r3, [pc, #696]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80072d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072d6:	f003 0307 	and.w	r3, r3, #7
 80072da:	633b      	str	r3, [r7, #48]	; 0x30
 80072dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072de:	2b04      	cmp	r3, #4
 80072e0:	f200 8088 	bhi.w	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80072e4:	a201      	add	r2, pc, #4	; (adr r2, 80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80072e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ea:	bf00      	nop
 80072ec:	08007301 	.word	0x08007301
 80072f0:	08007329 	.word	0x08007329
 80072f4:	08007351 	.word	0x08007351
 80072f8:	080073ed 	.word	0x080073ed
 80072fc:	08007379 	.word	0x08007379

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007300:	4ba2      	ldr	r3, [pc, #648]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007308:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800730c:	d108      	bne.n	8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800730e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007312:	4618      	mov	r0, r3
 8007314:	f000 ff64 	bl	80081e0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8007318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800731c:	f000 bc95 	b.w	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007320:	2300      	movs	r3, #0
 8007322:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007324:	f000 bc91 	b.w	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007328:	4b98      	ldr	r3, [pc, #608]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007330:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007334:	d108      	bne.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007336:	f107 0318 	add.w	r3, r7, #24
 800733a:	4618      	mov	r0, r3
 800733c:	f000 fca8 	bl	8007c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007344:	f000 bc81 	b.w	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007348:	2300      	movs	r3, #0
 800734a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800734c:	f000 bc7d 	b.w	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007350:	4b8e      	ldr	r3, [pc, #568]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800735c:	d108      	bne.n	8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800735e:	f107 030c 	add.w	r3, r7, #12
 8007362:	4618      	mov	r0, r3
 8007364:	f000 fde8 	bl	8007f38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800736c:	f000 bc6d 	b.w	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007370:	2300      	movs	r3, #0
 8007372:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007374:	f000 bc69 	b.w	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007378:	4b84      	ldr	r3, [pc, #528]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800737a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800737c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007380:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007382:	4b82      	ldr	r3, [pc, #520]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0304 	and.w	r3, r3, #4
 800738a:	2b04      	cmp	r3, #4
 800738c:	d10c      	bne.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800738e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007390:	2b00      	cmp	r3, #0
 8007392:	d109      	bne.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007394:	4b7d      	ldr	r3, [pc, #500]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	08db      	lsrs	r3, r3, #3
 800739a:	f003 0303 	and.w	r3, r3, #3
 800739e:	4a7c      	ldr	r2, [pc, #496]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80073a0:	fa22 f303 	lsr.w	r3, r2, r3
 80073a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073a6:	e01f      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80073a8:	4b78      	ldr	r3, [pc, #480]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073b4:	d106      	bne.n	80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80073b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073bc:	d102      	bne.n	80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80073be:	4b75      	ldr	r3, [pc, #468]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80073c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073c2:	e011      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073c4:	4b71      	ldr	r3, [pc, #452]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073d0:	d106      	bne.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80073d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073d8:	d102      	bne.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80073da:	4b6f      	ldr	r3, [pc, #444]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80073dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073de:	e003      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80073e0:	2300      	movs	r3, #0
 80073e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80073e4:	f000 bc31 	b.w	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80073e8:	f000 bc2f 	b.w	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80073ec:	4b6b      	ldr	r3, [pc, #428]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80073ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073f0:	f000 bc2b 	b.w	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80073f4:	2300      	movs	r3, #0
 80073f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073f8:	f000 bc27 	b.w	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007402:	f040 8095 	bne.w	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007406:	4b61      	ldr	r3, [pc, #388]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800740a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800740e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007416:	d04d      	beq.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8007418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800741e:	f200 8084 	bhi.w	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007424:	2bc0      	cmp	r3, #192	; 0xc0
 8007426:	d07d      	beq.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742a:	2bc0      	cmp	r3, #192	; 0xc0
 800742c:	d87d      	bhi.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800742e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007430:	2b80      	cmp	r3, #128	; 0x80
 8007432:	d02d      	beq.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8007434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007436:	2b80      	cmp	r3, #128	; 0x80
 8007438:	d877      	bhi.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	2b00      	cmp	r3, #0
 800743e:	d003      	beq.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8007440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007442:	2b40      	cmp	r3, #64	; 0x40
 8007444:	d012      	beq.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8007446:	e070      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007448:	4b50      	ldr	r3, [pc, #320]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007450:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007454:	d107      	bne.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800745a:	4618      	mov	r0, r3
 800745c:	f000 fec0 	bl	80081e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007462:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007464:	e3f1      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007466:	2300      	movs	r3, #0
 8007468:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800746a:	e3ee      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800746c:	4b47      	ldr	r3, [pc, #284]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007474:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007478:	d107      	bne.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800747a:	f107 0318 	add.w	r3, r7, #24
 800747e:	4618      	mov	r0, r3
 8007480:	f000 fc06 	bl	8007c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007488:	e3df      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800748a:	2300      	movs	r3, #0
 800748c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800748e:	e3dc      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007490:	4b3e      	ldr	r3, [pc, #248]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800749c:	d107      	bne.n	80074ae <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800749e:	f107 030c 	add.w	r3, r7, #12
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 fd48 	bl	8007f38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80074ac:	e3cd      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80074ae:	2300      	movs	r3, #0
 80074b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074b2:	e3ca      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80074b4:	4b35      	ldr	r3, [pc, #212]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80074b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80074bc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074be:	4b33      	ldr	r3, [pc, #204]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0304 	and.w	r3, r3, #4
 80074c6:	2b04      	cmp	r3, #4
 80074c8:	d10c      	bne.n	80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80074ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d109      	bne.n	80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074d0:	4b2e      	ldr	r3, [pc, #184]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	08db      	lsrs	r3, r3, #3
 80074d6:	f003 0303 	and.w	r3, r3, #3
 80074da:	4a2d      	ldr	r2, [pc, #180]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80074dc:	fa22 f303 	lsr.w	r3, r2, r3
 80074e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074e2:	e01e      	b.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074e4:	4b29      	ldr	r3, [pc, #164]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074f0:	d106      	bne.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80074f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074f8:	d102      	bne.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80074fa:	4b26      	ldr	r3, [pc, #152]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80074fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074fe:	e010      	b.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007500:	4b22      	ldr	r3, [pc, #136]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007508:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800750c:	d106      	bne.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800750e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007514:	d102      	bne.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007516:	4b20      	ldr	r3, [pc, #128]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8007518:	63fb      	str	r3, [r7, #60]	; 0x3c
 800751a:	e002      	b.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800751c:	2300      	movs	r3, #0
 800751e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007520:	e393      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007522:	e392      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007524:	4b1d      	ldr	r3, [pc, #116]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007526:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007528:	e38f      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800752a:	2300      	movs	r3, #0
 800752c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800752e:	e38c      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007536:	f040 80a7 	bne.w	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800753a:	4b14      	ldr	r3, [pc, #80]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800753c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800753e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007542:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007546:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800754a:	d05f      	beq.n	800760c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800754c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007552:	f200 8096 	bhi.w	8007682 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007558:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800755c:	f000 808e 	beq.w	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8007560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007562:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007566:	f200 808c 	bhi.w	8007682 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800756a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007570:	d03a      	beq.n	80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007574:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007578:	f200 8083 	bhi.w	8007682 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800757c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00e      	beq.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8007582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007584:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007588:	d01c      	beq.n	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800758a:	e07a      	b.n	8007682 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800758c:	58024400 	.word	0x58024400
 8007590:	03d09000 	.word	0x03d09000
 8007594:	003d0900 	.word	0x003d0900
 8007598:	007a1200 	.word	0x007a1200
 800759c:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80075a0:	4baa      	ldr	r3, [pc, #680]	; (800784c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075ac:	d107      	bne.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075b2:	4618      	mov	r0, r3
 80075b4:	f000 fe14 	bl	80081e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80075bc:	e345      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80075be:	2300      	movs	r3, #0
 80075c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075c2:	e342      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075c4:	4ba1      	ldr	r3, [pc, #644]	; (800784c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075d0:	d107      	bne.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075d2:	f107 0318 	add.w	r3, r7, #24
 80075d6:	4618      	mov	r0, r3
 80075d8:	f000 fb5a 	bl	8007c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80075e0:	e333      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075e6:	e330      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075e8:	4b98      	ldr	r3, [pc, #608]	; (800784c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075f4:	d107      	bne.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075f6:	f107 030c 	add.w	r3, r7, #12
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 fc9c 	bl	8007f38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007604:	e321      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007606:	2300      	movs	r3, #0
 8007608:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800760a:	e31e      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800760c:	4b8f      	ldr	r3, [pc, #572]	; (800784c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800760e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007610:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007614:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007616:	4b8d      	ldr	r3, [pc, #564]	; (800784c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0304 	and.w	r3, r3, #4
 800761e:	2b04      	cmp	r3, #4
 8007620:	d10c      	bne.n	800763c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8007622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007624:	2b00      	cmp	r3, #0
 8007626:	d109      	bne.n	800763c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007628:	4b88      	ldr	r3, [pc, #544]	; (800784c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	08db      	lsrs	r3, r3, #3
 800762e:	f003 0303 	and.w	r3, r3, #3
 8007632:	4a87      	ldr	r2, [pc, #540]	; (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007634:	fa22 f303 	lsr.w	r3, r2, r3
 8007638:	63fb      	str	r3, [r7, #60]	; 0x3c
 800763a:	e01e      	b.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800763c:	4b83      	ldr	r3, [pc, #524]	; (800784c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007648:	d106      	bne.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800764a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800764c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007650:	d102      	bne.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007652:	4b80      	ldr	r3, [pc, #512]	; (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007654:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007656:	e010      	b.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007658:	4b7c      	ldr	r3, [pc, #496]	; (800784c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007660:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007664:	d106      	bne.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8007666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800766c:	d102      	bne.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800766e:	4b7a      	ldr	r3, [pc, #488]	; (8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007670:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007672:	e002      	b.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007674:	2300      	movs	r3, #0
 8007676:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007678:	e2e7      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800767a:	e2e6      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800767c:	4b77      	ldr	r3, [pc, #476]	; (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800767e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007680:	e2e3      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007682:	2300      	movs	r3, #0
 8007684:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007686:	e2e0      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800768e:	f040 809c 	bne.w	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007692:	4b6e      	ldr	r3, [pc, #440]	; (800784c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007696:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800769a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800769c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076a2:	d054      	beq.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80076a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076aa:	f200 808b 	bhi.w	80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80076ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80076b4:	f000 8083 	beq.w	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80076b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80076be:	f200 8081 	bhi.w	80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80076c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076c8:	d02f      	beq.n	800772a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80076ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076d0:	d878      	bhi.n	80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80076d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d004      	beq.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80076d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076de:	d012      	beq.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80076e0:	e070      	b.n	80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076e2:	4b5a      	ldr	r3, [pc, #360]	; (800784c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076ee:	d107      	bne.n	8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076f4:	4618      	mov	r0, r3
 80076f6:	f000 fd73 	bl	80081e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80076fe:	e2a4      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007700:	2300      	movs	r3, #0
 8007702:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007704:	e2a1      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007706:	4b51      	ldr	r3, [pc, #324]	; (800784c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800770e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007712:	d107      	bne.n	8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007714:	f107 0318 	add.w	r3, r7, #24
 8007718:	4618      	mov	r0, r3
 800771a:	f000 fab9 	bl	8007c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8007722:	e292      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007724:	2300      	movs	r3, #0
 8007726:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007728:	e28f      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800772a:	4b48      	ldr	r3, [pc, #288]	; (800784c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007732:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007736:	d107      	bne.n	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007738:	f107 030c 	add.w	r3, r7, #12
 800773c:	4618      	mov	r0, r3
 800773e:	f000 fbfb 	bl	8007f38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007746:	e280      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007748:	2300      	movs	r3, #0
 800774a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800774c:	e27d      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800774e:	4b3f      	ldr	r3, [pc, #252]	; (800784c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007752:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007756:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007758:	4b3c      	ldr	r3, [pc, #240]	; (800784c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 0304 	and.w	r3, r3, #4
 8007760:	2b04      	cmp	r3, #4
 8007762:	d10c      	bne.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007766:	2b00      	cmp	r3, #0
 8007768:	d109      	bne.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800776a:	4b38      	ldr	r3, [pc, #224]	; (800784c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	08db      	lsrs	r3, r3, #3
 8007770:	f003 0303 	and.w	r3, r3, #3
 8007774:	4a36      	ldr	r2, [pc, #216]	; (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007776:	fa22 f303 	lsr.w	r3, r2, r3
 800777a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800777c:	e01e      	b.n	80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800777e:	4b33      	ldr	r3, [pc, #204]	; (800784c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800778a:	d106      	bne.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800778c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800778e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007792:	d102      	bne.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007794:	4b2f      	ldr	r3, [pc, #188]	; (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007796:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007798:	e010      	b.n	80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800779a:	4b2c      	ldr	r3, [pc, #176]	; (800784c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077a6:	d106      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80077a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077ae:	d102      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80077b0:	4b29      	ldr	r3, [pc, #164]	; (8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80077b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077b4:	e002      	b.n	80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80077b6:	2300      	movs	r3, #0
 80077b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80077ba:	e246      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80077bc:	e245      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80077be:	4b27      	ldr	r3, [pc, #156]	; (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80077c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077c2:	e242      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80077c4:	2300      	movs	r3, #0
 80077c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077c8:	e23f      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077d0:	f040 80a8 	bne.w	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80077d4:	4b1d      	ldr	r3, [pc, #116]	; (800784c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80077d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077d8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80077dc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80077de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077e4:	d060      	beq.n	80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80077e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077ec:	f200 8097 	bhi.w	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80077f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077f6:	f000 808f 	beq.w	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80077fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007800:	f200 808d 	bhi.w	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8007804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800780a:	d03b      	beq.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800780c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007812:	f200 8084 	bhi.w	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8007816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007818:	2b00      	cmp	r3, #0
 800781a:	d004      	beq.n	8007826 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800781c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007822:	d01d      	beq.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8007824:	e07b      	b.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007826:	4b09      	ldr	r3, [pc, #36]	; (800784c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800782e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007832:	d107      	bne.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007838:	4618      	mov	r0, r3
 800783a:	f000 fcd1 	bl	80081e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800783e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007840:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007842:	e202      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007844:	2300      	movs	r3, #0
 8007846:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007848:	e1ff      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800784a:	bf00      	nop
 800784c:	58024400 	.word	0x58024400
 8007850:	03d09000 	.word	0x03d09000
 8007854:	003d0900 	.word	0x003d0900
 8007858:	007a1200 	.word	0x007a1200
 800785c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007860:	4ba3      	ldr	r3, [pc, #652]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007868:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800786c:	d107      	bne.n	800787e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800786e:	f107 0318 	add.w	r3, r7, #24
 8007872:	4618      	mov	r0, r3
 8007874:	f000 fa0c 	bl	8007c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800787c:	e1e5      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800787e:	2300      	movs	r3, #0
 8007880:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007882:	e1e2      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007884:	4b9a      	ldr	r3, [pc, #616]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800788c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007890:	d107      	bne.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007892:	f107 030c 	add.w	r3, r7, #12
 8007896:	4618      	mov	r0, r3
 8007898:	f000 fb4e 	bl	8007f38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80078a0:	e1d3      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80078a2:	2300      	movs	r3, #0
 80078a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078a6:	e1d0      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80078a8:	4b91      	ldr	r3, [pc, #580]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80078aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078b0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078b2:	4b8f      	ldr	r3, [pc, #572]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0304 	and.w	r3, r3, #4
 80078ba:	2b04      	cmp	r3, #4
 80078bc:	d10c      	bne.n	80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80078be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d109      	bne.n	80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80078c4:	4b8a      	ldr	r3, [pc, #552]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	08db      	lsrs	r3, r3, #3
 80078ca:	f003 0303 	and.w	r3, r3, #3
 80078ce:	4a89      	ldr	r2, [pc, #548]	; (8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80078d0:	fa22 f303 	lsr.w	r3, r2, r3
 80078d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078d6:	e01e      	b.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078d8:	4b85      	ldr	r3, [pc, #532]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078e4:	d106      	bne.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 80078e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078ec:	d102      	bne.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80078ee:	4b82      	ldr	r3, [pc, #520]	; (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80078f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078f2:	e010      	b.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078f4:	4b7e      	ldr	r3, [pc, #504]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007900:	d106      	bne.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007908:	d102      	bne.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800790a:	4b7c      	ldr	r3, [pc, #496]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800790c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800790e:	e002      	b.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007910:	2300      	movs	r3, #0
 8007912:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007914:	e199      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007916:	e198      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007918:	4b79      	ldr	r3, [pc, #484]	; (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800791a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800791c:	e195      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800791e:	2300      	movs	r3, #0
 8007920:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007922:	e192      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800792a:	d173      	bne.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800792c:	4b70      	ldr	r3, [pc, #448]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800792e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007930:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007934:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007938:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800793c:	d02f      	beq.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800793e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007940:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007944:	d863      	bhi.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8007946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007948:	2b00      	cmp	r3, #0
 800794a:	d004      	beq.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800794c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007952:	d012      	beq.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8007954:	e05b      	b.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007956:	4b66      	ldr	r3, [pc, #408]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800795e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007962:	d107      	bne.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007964:	f107 0318 	add.w	r3, r7, #24
 8007968:	4618      	mov	r0, r3
 800796a:	f000 f991 	bl	8007c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007972:	e16a      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007974:	2300      	movs	r3, #0
 8007976:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007978:	e167      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800797a:	4b5d      	ldr	r3, [pc, #372]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007982:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007986:	d107      	bne.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007988:	f107 030c 	add.w	r3, r7, #12
 800798c:	4618      	mov	r0, r3
 800798e:	f000 fad3 	bl	8007f38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007996:	e158      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007998:	2300      	movs	r3, #0
 800799a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800799c:	e155      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800799e:	4b54      	ldr	r3, [pc, #336]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80079a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079a6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079a8:	4b51      	ldr	r3, [pc, #324]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0304 	and.w	r3, r3, #4
 80079b0:	2b04      	cmp	r3, #4
 80079b2:	d10c      	bne.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 80079b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d109      	bne.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079ba:	4b4d      	ldr	r3, [pc, #308]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	08db      	lsrs	r3, r3, #3
 80079c0:	f003 0303 	and.w	r3, r3, #3
 80079c4:	4a4b      	ldr	r2, [pc, #300]	; (8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80079c6:	fa22 f303 	lsr.w	r3, r2, r3
 80079ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079cc:	e01e      	b.n	8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80079ce:	4b48      	ldr	r3, [pc, #288]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079da:	d106      	bne.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 80079dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079e2:	d102      	bne.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80079e4:	4b44      	ldr	r3, [pc, #272]	; (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80079e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079e8:	e010      	b.n	8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80079ea:	4b41      	ldr	r3, [pc, #260]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079f6:	d106      	bne.n	8007a06 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80079f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079fe:	d102      	bne.n	8007a06 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007a00:	4b3e      	ldr	r3, [pc, #248]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a04:	e002      	b.n	8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007a06:	2300      	movs	r3, #0
 8007a08:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007a0a:	e11e      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007a0c:	e11d      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a12:	e11a      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a1a:	d133      	bne.n	8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007a1c:	4b34      	ldr	r3, [pc, #208]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a24:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d004      	beq.n	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8007a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a32:	d012      	beq.n	8007a5a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8007a34:	e023      	b.n	8007a7e <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a36:	4b2e      	ldr	r3, [pc, #184]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a42:	d107      	bne.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f000 fbc9 	bl	80081e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a50:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007a52:	e0fa      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007a54:	2300      	movs	r3, #0
 8007a56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a58:	e0f7      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a5a:	4b25      	ldr	r3, [pc, #148]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a66:	d107      	bne.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a68:	f107 0318 	add.w	r3, r7, #24
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f000 f90f 	bl	8007c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007a72:	6a3b      	ldr	r3, [r7, #32]
 8007a74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007a76:	e0e8      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a7c:	e0e5      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a82:	e0e2      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a8a:	f040 808f 	bne.w	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007a8e:	4b18      	ldr	r3, [pc, #96]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a92:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007a96:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a9e:	d075      	beq.n	8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8007aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007aa6:	d87e      	bhi.n	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aae:	d060      	beq.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ab6:	d876      	bhi.n	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007abe:	d045      	beq.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8007ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ac6:	d86e      	bhi.n	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ace:	d02b      	beq.n	8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ad6:	d866      	bhi.n	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d004      	beq.n	8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8007ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ae4:	d00e      	beq.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007ae6:	e05e      	b.n	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007ae8:	f000 f8bc 	bl	8007c64 <HAL_RCCEx_GetD3PCLK1Freq>
 8007aec:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007aee:	e0ac      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007af0:	58024400 	.word	0x58024400
 8007af4:	03d09000 	.word	0x03d09000
 8007af8:	003d0900 	.word	0x003d0900
 8007afc:	007a1200 	.word	0x007a1200
 8007b00:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b04:	4b53      	ldr	r3, [pc, #332]	; (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b10:	d107      	bne.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b12:	f107 0318 	add.w	r3, r7, #24
 8007b16:	4618      	mov	r0, r3
 8007b18:	f000 f8ba 	bl	8007c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007b20:	e093      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b22:	2300      	movs	r3, #0
 8007b24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b26:	e090      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b28:	4b4a      	ldr	r3, [pc, #296]	; (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b34:	d107      	bne.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b36:	f107 030c 	add.w	r3, r7, #12
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f000 f9fc 	bl	8007f38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007b44:	e081      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b46:	2300      	movs	r3, #0
 8007b48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b4a:	e07e      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b4c:	4b41      	ldr	r3, [pc, #260]	; (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0304 	and.w	r3, r3, #4
 8007b54:	2b04      	cmp	r3, #4
 8007b56:	d109      	bne.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b58:	4b3e      	ldr	r3, [pc, #248]	; (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	08db      	lsrs	r3, r3, #3
 8007b5e:	f003 0303 	and.w	r3, r3, #3
 8007b62:	4a3d      	ldr	r2, [pc, #244]	; (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8007b64:	fa22 f303 	lsr.w	r3, r2, r3
 8007b68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007b6a:	e06e      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b70:	e06b      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007b72:	4b38      	ldr	r3, [pc, #224]	; (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b7e:	d102      	bne.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8007b80:	4b36      	ldr	r3, [pc, #216]	; (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007b82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007b84:	e061      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007b86:	2300      	movs	r3, #0
 8007b88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b8a:	e05e      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007b8c:	4b31      	ldr	r3, [pc, #196]	; (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b98:	d102      	bne.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8007b9a:	4b31      	ldr	r3, [pc, #196]	; (8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007b9e:	e054      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ba4:	e051      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007baa:	e04e      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bb2:	d148      	bne.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8007bb4:	4b27      	ldr	r3, [pc, #156]	; (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007bbc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bc4:	d02a      	beq.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8007bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bcc:	d838      	bhi.n	8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d004      	beq.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8007bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bda:	d00d      	beq.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8007bdc:	e030      	b.n	8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007bde:	4b1d      	ldr	r3, [pc, #116]	; (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007be6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bea:	d102      	bne.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8007bec:	4b1c      	ldr	r3, [pc, #112]	; (8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007bee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007bf0:	e02b      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bf6:	e028      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007bf8:	4b16      	ldr	r3, [pc, #88]	; (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c04:	d107      	bne.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 fae8 	bl	80081e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007c14:	e019      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c16:	2300      	movs	r3, #0
 8007c18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c1a:	e016      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c1c:	4b0d      	ldr	r3, [pc, #52]	; (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c28:	d107      	bne.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c2a:	f107 0318 	add.w	r3, r7, #24
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f000 f82e 	bl	8007c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007c38:	e007      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c3e:	e004      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007c40:	2300      	movs	r3, #0
 8007c42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c44:	e001      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8007c46:	2300      	movs	r3, #0
 8007c48:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3740      	adds	r7, #64	; 0x40
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	58024400 	.word	0x58024400
 8007c58:	03d09000 	.word	0x03d09000
 8007c5c:	003d0900 	.word	0x003d0900
 8007c60:	007a1200 	.word	0x007a1200

08007c64 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007c68:	f7fe fb8e 	bl	8006388 <HAL_RCC_GetHCLKFreq>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	4b06      	ldr	r3, [pc, #24]	; (8007c88 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	091b      	lsrs	r3, r3, #4
 8007c74:	f003 0307 	and.w	r3, r3, #7
 8007c78:	4904      	ldr	r1, [pc, #16]	; (8007c8c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007c7a:	5ccb      	ldrb	r3, [r1, r3]
 8007c7c:	f003 031f 	and.w	r3, r3, #31
 8007c80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	58024400 	.word	0x58024400
 8007c8c:	0800c75c 	.word	0x0800c75c

08007c90 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b089      	sub	sp, #36	; 0x24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c98:	4ba1      	ldr	r3, [pc, #644]	; (8007f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9c:	f003 0303 	and.w	r3, r3, #3
 8007ca0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007ca2:	4b9f      	ldr	r3, [pc, #636]	; (8007f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca6:	0b1b      	lsrs	r3, r3, #12
 8007ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007cae:	4b9c      	ldr	r3, [pc, #624]	; (8007f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb2:	091b      	lsrs	r3, r3, #4
 8007cb4:	f003 0301 	and.w	r3, r3, #1
 8007cb8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007cba:	4b99      	ldr	r3, [pc, #612]	; (8007f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cbe:	08db      	lsrs	r3, r3, #3
 8007cc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cc4:	693a      	ldr	r2, [r7, #16]
 8007cc6:	fb02 f303 	mul.w	r3, r2, r3
 8007cca:	ee07 3a90 	vmov	s15, r3
 8007cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f000 8111 	beq.w	8007f00 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	f000 8083 	beq.w	8007dec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	f200 80a1 	bhi.w	8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d003      	beq.n	8007cfc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d056      	beq.n	8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007cfa:	e099      	b.n	8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cfc:	4b88      	ldr	r3, [pc, #544]	; (8007f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0320 	and.w	r3, r3, #32
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d02d      	beq.n	8007d64 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d08:	4b85      	ldr	r3, [pc, #532]	; (8007f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	08db      	lsrs	r3, r3, #3
 8007d0e:	f003 0303 	and.w	r3, r3, #3
 8007d12:	4a84      	ldr	r2, [pc, #528]	; (8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007d14:	fa22 f303 	lsr.w	r3, r2, r3
 8007d18:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	ee07 3a90 	vmov	s15, r3
 8007d20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	ee07 3a90 	vmov	s15, r3
 8007d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d32:	4b7b      	ldr	r3, [pc, #492]	; (8007f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d3a:	ee07 3a90 	vmov	s15, r3
 8007d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d46:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d5e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007d62:	e087      	b.n	8007e74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	ee07 3a90 	vmov	s15, r3
 8007d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d6e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007f2c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d76:	4b6a      	ldr	r3, [pc, #424]	; (8007f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d7e:	ee07 3a90 	vmov	s15, r3
 8007d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d8a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007da2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007da6:	e065      	b.n	8007e74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	ee07 3a90 	vmov	s15, r3
 8007dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007f30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dba:	4b59      	ldr	r3, [pc, #356]	; (8007f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc2:	ee07 3a90 	vmov	s15, r3
 8007dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007de6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007dea:	e043      	b.n	8007e74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	ee07 3a90 	vmov	s15, r3
 8007df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007f34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dfe:	4b48      	ldr	r3, [pc, #288]	; (8007f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e06:	ee07 3a90 	vmov	s15, r3
 8007e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e2e:	e021      	b.n	8007e74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	ee07 3a90 	vmov	s15, r3
 8007e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007f30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e42:	4b37      	ldr	r3, [pc, #220]	; (8007f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e4a:	ee07 3a90 	vmov	s15, r3
 8007e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e72:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007e74:	4b2a      	ldr	r3, [pc, #168]	; (8007f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e78:	0a5b      	lsrs	r3, r3, #9
 8007e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e7e:	ee07 3a90 	vmov	s15, r3
 8007e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e9a:	ee17 2a90 	vmov	r2, s15
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007ea2:	4b1f      	ldr	r3, [pc, #124]	; (8007f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea6:	0c1b      	lsrs	r3, r3, #16
 8007ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eac:	ee07 3a90 	vmov	s15, r3
 8007eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007eb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ebc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ec0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ec4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ec8:	ee17 2a90 	vmov	r2, s15
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007ed0:	4b13      	ldr	r3, [pc, #76]	; (8007f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed4:	0e1b      	lsrs	r3, r3, #24
 8007ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eda:	ee07 3a90 	vmov	s15, r3
 8007ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ee2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ee6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007eea:	edd7 6a07 	vldr	s13, [r7, #28]
 8007eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ef6:	ee17 2a90 	vmov	r2, s15
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007efe:	e008      	b.n	8007f12 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	609a      	str	r2, [r3, #8]
}
 8007f12:	bf00      	nop
 8007f14:	3724      	adds	r7, #36	; 0x24
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	58024400 	.word	0x58024400
 8007f24:	03d09000 	.word	0x03d09000
 8007f28:	46000000 	.word	0x46000000
 8007f2c:	4c742400 	.word	0x4c742400
 8007f30:	4a742400 	.word	0x4a742400
 8007f34:	4af42400 	.word	0x4af42400

08007f38 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b089      	sub	sp, #36	; 0x24
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f40:	4ba1      	ldr	r3, [pc, #644]	; (80081c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f44:	f003 0303 	and.w	r3, r3, #3
 8007f48:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007f4a:	4b9f      	ldr	r3, [pc, #636]	; (80081c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4e:	0d1b      	lsrs	r3, r3, #20
 8007f50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f54:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007f56:	4b9c      	ldr	r3, [pc, #624]	; (80081c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5a:	0a1b      	lsrs	r3, r3, #8
 8007f5c:	f003 0301 	and.w	r3, r3, #1
 8007f60:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007f62:	4b99      	ldr	r3, [pc, #612]	; (80081c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f66:	08db      	lsrs	r3, r3, #3
 8007f68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	fb02 f303 	mul.w	r3, r2, r3
 8007f72:	ee07 3a90 	vmov	s15, r3
 8007f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f000 8111 	beq.w	80081a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	f000 8083 	beq.w	8008094 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	f200 80a1 	bhi.w	80080d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d003      	beq.n	8007fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d056      	beq.n	8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007fa2:	e099      	b.n	80080d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007fa4:	4b88      	ldr	r3, [pc, #544]	; (80081c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 0320 	and.w	r3, r3, #32
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d02d      	beq.n	800800c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007fb0:	4b85      	ldr	r3, [pc, #532]	; (80081c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	08db      	lsrs	r3, r3, #3
 8007fb6:	f003 0303 	and.w	r3, r3, #3
 8007fba:	4a84      	ldr	r2, [pc, #528]	; (80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8007fc0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	ee07 3a90 	vmov	s15, r3
 8007fc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	ee07 3a90 	vmov	s15, r3
 8007fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fda:	4b7b      	ldr	r3, [pc, #492]	; (80081c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe2:	ee07 3a90 	vmov	s15, r3
 8007fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80081d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ffa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008006:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800800a:	e087      	b.n	800811c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	ee07 3a90 	vmov	s15, r3
 8008012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008016:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80081d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800801a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800801e:	4b6a      	ldr	r3, [pc, #424]	; (80081c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008026:	ee07 3a90 	vmov	s15, r3
 800802a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800802e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008032:	eddf 5a67 	vldr	s11, [pc, #412]	; 80081d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800803a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800803e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800804a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800804e:	e065      	b.n	800811c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	ee07 3a90 	vmov	s15, r3
 8008056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800805a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80081d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800805e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008062:	4b59      	ldr	r3, [pc, #356]	; (80081c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800806a:	ee07 3a90 	vmov	s15, r3
 800806e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008072:	ed97 6a03 	vldr	s12, [r7, #12]
 8008076:	eddf 5a56 	vldr	s11, [pc, #344]	; 80081d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800807a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800807e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800808a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800808e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008092:	e043      	b.n	800811c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	ee07 3a90 	vmov	s15, r3
 800809a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800809e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80081dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80080a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080a6:	4b48      	ldr	r3, [pc, #288]	; (80081c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ae:	ee07 3a90 	vmov	s15, r3
 80080b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80081d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80080be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080d6:	e021      	b.n	800811c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	ee07 3a90 	vmov	s15, r3
 80080de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80081d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80080e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ea:	4b37      	ldr	r3, [pc, #220]	; (80081c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080f2:	ee07 3a90 	vmov	s15, r3
 80080f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80080fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80081d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800810a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800810e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008116:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800811a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800811c:	4b2a      	ldr	r3, [pc, #168]	; (80081c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800811e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008120:	0a5b      	lsrs	r3, r3, #9
 8008122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008126:	ee07 3a90 	vmov	s15, r3
 800812a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800812e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008132:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008136:	edd7 6a07 	vldr	s13, [r7, #28]
 800813a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800813e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008142:	ee17 2a90 	vmov	r2, s15
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800814a:	4b1f      	ldr	r3, [pc, #124]	; (80081c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800814c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814e:	0c1b      	lsrs	r3, r3, #16
 8008150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008154:	ee07 3a90 	vmov	s15, r3
 8008158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800815c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008160:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008164:	edd7 6a07 	vldr	s13, [r7, #28]
 8008168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800816c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008170:	ee17 2a90 	vmov	r2, s15
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008178:	4b13      	ldr	r3, [pc, #76]	; (80081c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800817a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817c:	0e1b      	lsrs	r3, r3, #24
 800817e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008182:	ee07 3a90 	vmov	s15, r3
 8008186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800818a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800818e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008192:	edd7 6a07 	vldr	s13, [r7, #28]
 8008196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800819a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800819e:	ee17 2a90 	vmov	r2, s15
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80081a6:	e008      	b.n	80081ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	609a      	str	r2, [r3, #8]
}
 80081ba:	bf00      	nop
 80081bc:	3724      	adds	r7, #36	; 0x24
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	58024400 	.word	0x58024400
 80081cc:	03d09000 	.word	0x03d09000
 80081d0:	46000000 	.word	0x46000000
 80081d4:	4c742400 	.word	0x4c742400
 80081d8:	4a742400 	.word	0x4a742400
 80081dc:	4af42400 	.word	0x4af42400

080081e0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b089      	sub	sp, #36	; 0x24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081e8:	4ba0      	ldr	r3, [pc, #640]	; (800846c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ec:	f003 0303 	and.w	r3, r3, #3
 80081f0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80081f2:	4b9e      	ldr	r3, [pc, #632]	; (800846c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f6:	091b      	lsrs	r3, r3, #4
 80081f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081fc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80081fe:	4b9b      	ldr	r3, [pc, #620]	; (800846c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008208:	4b98      	ldr	r3, [pc, #608]	; (800846c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800820a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800820c:	08db      	lsrs	r3, r3, #3
 800820e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	fb02 f303 	mul.w	r3, r2, r3
 8008218:	ee07 3a90 	vmov	s15, r3
 800821c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008220:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	2b00      	cmp	r3, #0
 8008228:	f000 8111 	beq.w	800844e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	2b02      	cmp	r3, #2
 8008230:	f000 8083 	beq.w	800833a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008234:	69bb      	ldr	r3, [r7, #24]
 8008236:	2b02      	cmp	r3, #2
 8008238:	f200 80a1 	bhi.w	800837e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d003      	beq.n	800824a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d056      	beq.n	80082f6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008248:	e099      	b.n	800837e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800824a:	4b88      	ldr	r3, [pc, #544]	; (800846c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0320 	and.w	r3, r3, #32
 8008252:	2b00      	cmp	r3, #0
 8008254:	d02d      	beq.n	80082b2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008256:	4b85      	ldr	r3, [pc, #532]	; (800846c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	08db      	lsrs	r3, r3, #3
 800825c:	f003 0303 	and.w	r3, r3, #3
 8008260:	4a83      	ldr	r2, [pc, #524]	; (8008470 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008262:	fa22 f303 	lsr.w	r3, r2, r3
 8008266:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	ee07 3a90 	vmov	s15, r3
 800826e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	ee07 3a90 	vmov	s15, r3
 8008278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800827c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008280:	4b7a      	ldr	r3, [pc, #488]	; (800846c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008288:	ee07 3a90 	vmov	s15, r3
 800828c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008290:	ed97 6a03 	vldr	s12, [r7, #12]
 8008294:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008474 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008298:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800829c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082ac:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80082b0:	e087      	b.n	80083c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	ee07 3a90 	vmov	s15, r3
 80082b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082bc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008478 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80082c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082c4:	4b69      	ldr	r3, [pc, #420]	; (800846c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80082c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082cc:	ee07 3a90 	vmov	s15, r3
 80082d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80082d8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008474 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80082dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082f4:	e065      	b.n	80083c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	ee07 3a90 	vmov	s15, r3
 80082fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008300:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800847c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008304:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008308:	4b58      	ldr	r3, [pc, #352]	; (800846c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800830a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008310:	ee07 3a90 	vmov	s15, r3
 8008314:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008318:	ed97 6a03 	vldr	s12, [r7, #12]
 800831c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008474 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008320:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008324:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008328:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800832c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008334:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008338:	e043      	b.n	80083c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	ee07 3a90 	vmov	s15, r3
 8008340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008344:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008348:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800834c:	4b47      	ldr	r3, [pc, #284]	; (800846c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800834e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008354:	ee07 3a90 	vmov	s15, r3
 8008358:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800835c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008360:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008474 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008364:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008368:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800836c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008370:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008378:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800837c:	e021      	b.n	80083c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	ee07 3a90 	vmov	s15, r3
 8008384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008388:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008478 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800838c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008390:	4b36      	ldr	r3, [pc, #216]	; (800846c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008398:	ee07 3a90 	vmov	s15, r3
 800839c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80083a4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008474 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80083a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083c0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80083c2:	4b2a      	ldr	r3, [pc, #168]	; (800846c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c6:	0a5b      	lsrs	r3, r3, #9
 80083c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083cc:	ee07 3a90 	vmov	s15, r3
 80083d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80083e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083e8:	ee17 2a90 	vmov	r2, s15
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80083f0:	4b1e      	ldr	r3, [pc, #120]	; (800846c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f4:	0c1b      	lsrs	r3, r3, #16
 80083f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083fa:	ee07 3a90 	vmov	s15, r3
 80083fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008402:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008406:	ee37 7a87 	vadd.f32	s14, s15, s14
 800840a:	edd7 6a07 	vldr	s13, [r7, #28]
 800840e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008416:	ee17 2a90 	vmov	r2, s15
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800841e:	4b13      	ldr	r3, [pc, #76]	; (800846c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008422:	0e1b      	lsrs	r3, r3, #24
 8008424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008428:	ee07 3a90 	vmov	s15, r3
 800842c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008430:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008434:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008438:	edd7 6a07 	vldr	s13, [r7, #28]
 800843c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008444:	ee17 2a90 	vmov	r2, s15
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800844c:	e008      	b.n	8008460 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	609a      	str	r2, [r3, #8]
}
 8008460:	bf00      	nop
 8008462:	3724      	adds	r7, #36	; 0x24
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr
 800846c:	58024400 	.word	0x58024400
 8008470:	03d09000 	.word	0x03d09000
 8008474:	46000000 	.word	0x46000000
 8008478:	4c742400 	.word	0x4c742400
 800847c:	4a742400 	.word	0x4a742400
 8008480:	4af42400 	.word	0x4af42400

08008484 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800848e:	2300      	movs	r3, #0
 8008490:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008492:	4b53      	ldr	r3, [pc, #332]	; (80085e0 <RCCEx_PLL2_Config+0x15c>)
 8008494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008496:	f003 0303 	and.w	r3, r3, #3
 800849a:	2b03      	cmp	r3, #3
 800849c:	d101      	bne.n	80084a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e099      	b.n	80085d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80084a2:	4b4f      	ldr	r3, [pc, #316]	; (80085e0 <RCCEx_PLL2_Config+0x15c>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a4e      	ldr	r2, [pc, #312]	; (80085e0 <RCCEx_PLL2_Config+0x15c>)
 80084a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80084ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084ae:	f7fa fabf 	bl	8002a30 <HAL_GetTick>
 80084b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80084b4:	e008      	b.n	80084c8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80084b6:	f7fa fabb 	bl	8002a30 <HAL_GetTick>
 80084ba:	4602      	mov	r2, r0
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	1ad3      	subs	r3, r2, r3
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d901      	bls.n	80084c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80084c4:	2303      	movs	r3, #3
 80084c6:	e086      	b.n	80085d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80084c8:	4b45      	ldr	r3, [pc, #276]	; (80085e0 <RCCEx_PLL2_Config+0x15c>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d1f0      	bne.n	80084b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80084d4:	4b42      	ldr	r3, [pc, #264]	; (80085e0 <RCCEx_PLL2_Config+0x15c>)
 80084d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	031b      	lsls	r3, r3, #12
 80084e2:	493f      	ldr	r1, [pc, #252]	; (80085e0 <RCCEx_PLL2_Config+0x15c>)
 80084e4:	4313      	orrs	r3, r2
 80084e6:	628b      	str	r3, [r1, #40]	; 0x28
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	3b01      	subs	r3, #1
 80084ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	3b01      	subs	r3, #1
 80084f8:	025b      	lsls	r3, r3, #9
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	431a      	orrs	r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	3b01      	subs	r3, #1
 8008504:	041b      	lsls	r3, r3, #16
 8008506:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800850a:	431a      	orrs	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	3b01      	subs	r3, #1
 8008512:	061b      	lsls	r3, r3, #24
 8008514:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008518:	4931      	ldr	r1, [pc, #196]	; (80085e0 <RCCEx_PLL2_Config+0x15c>)
 800851a:	4313      	orrs	r3, r2
 800851c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800851e:	4b30      	ldr	r3, [pc, #192]	; (80085e0 <RCCEx_PLL2_Config+0x15c>)
 8008520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008522:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	695b      	ldr	r3, [r3, #20]
 800852a:	492d      	ldr	r1, [pc, #180]	; (80085e0 <RCCEx_PLL2_Config+0x15c>)
 800852c:	4313      	orrs	r3, r2
 800852e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008530:	4b2b      	ldr	r3, [pc, #172]	; (80085e0 <RCCEx_PLL2_Config+0x15c>)
 8008532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008534:	f023 0220 	bic.w	r2, r3, #32
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	4928      	ldr	r1, [pc, #160]	; (80085e0 <RCCEx_PLL2_Config+0x15c>)
 800853e:	4313      	orrs	r3, r2
 8008540:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008542:	4b27      	ldr	r3, [pc, #156]	; (80085e0 <RCCEx_PLL2_Config+0x15c>)
 8008544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008546:	4a26      	ldr	r2, [pc, #152]	; (80085e0 <RCCEx_PLL2_Config+0x15c>)
 8008548:	f023 0310 	bic.w	r3, r3, #16
 800854c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800854e:	4b24      	ldr	r3, [pc, #144]	; (80085e0 <RCCEx_PLL2_Config+0x15c>)
 8008550:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008552:	4b24      	ldr	r3, [pc, #144]	; (80085e4 <RCCEx_PLL2_Config+0x160>)
 8008554:	4013      	ands	r3, r2
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	69d2      	ldr	r2, [r2, #28]
 800855a:	00d2      	lsls	r2, r2, #3
 800855c:	4920      	ldr	r1, [pc, #128]	; (80085e0 <RCCEx_PLL2_Config+0x15c>)
 800855e:	4313      	orrs	r3, r2
 8008560:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008562:	4b1f      	ldr	r3, [pc, #124]	; (80085e0 <RCCEx_PLL2_Config+0x15c>)
 8008564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008566:	4a1e      	ldr	r2, [pc, #120]	; (80085e0 <RCCEx_PLL2_Config+0x15c>)
 8008568:	f043 0310 	orr.w	r3, r3, #16
 800856c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d106      	bne.n	8008582 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008574:	4b1a      	ldr	r3, [pc, #104]	; (80085e0 <RCCEx_PLL2_Config+0x15c>)
 8008576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008578:	4a19      	ldr	r2, [pc, #100]	; (80085e0 <RCCEx_PLL2_Config+0x15c>)
 800857a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800857e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008580:	e00f      	b.n	80085a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d106      	bne.n	8008596 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008588:	4b15      	ldr	r3, [pc, #84]	; (80085e0 <RCCEx_PLL2_Config+0x15c>)
 800858a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858c:	4a14      	ldr	r2, [pc, #80]	; (80085e0 <RCCEx_PLL2_Config+0x15c>)
 800858e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008592:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008594:	e005      	b.n	80085a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008596:	4b12      	ldr	r3, [pc, #72]	; (80085e0 <RCCEx_PLL2_Config+0x15c>)
 8008598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859a:	4a11      	ldr	r2, [pc, #68]	; (80085e0 <RCCEx_PLL2_Config+0x15c>)
 800859c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80085a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80085a2:	4b0f      	ldr	r3, [pc, #60]	; (80085e0 <RCCEx_PLL2_Config+0x15c>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a0e      	ldr	r2, [pc, #56]	; (80085e0 <RCCEx_PLL2_Config+0x15c>)
 80085a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80085ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085ae:	f7fa fa3f 	bl	8002a30 <HAL_GetTick>
 80085b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80085b4:	e008      	b.n	80085c8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80085b6:	f7fa fa3b 	bl	8002a30 <HAL_GetTick>
 80085ba:	4602      	mov	r2, r0
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	d901      	bls.n	80085c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80085c4:	2303      	movs	r3, #3
 80085c6:	e006      	b.n	80085d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80085c8:	4b05      	ldr	r3, [pc, #20]	; (80085e0 <RCCEx_PLL2_Config+0x15c>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d0f0      	beq.n	80085b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80085d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	58024400 	.word	0x58024400
 80085e4:	ffff0007 	.word	0xffff0007

080085e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085f2:	2300      	movs	r3, #0
 80085f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80085f6:	4b53      	ldr	r3, [pc, #332]	; (8008744 <RCCEx_PLL3_Config+0x15c>)
 80085f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fa:	f003 0303 	and.w	r3, r3, #3
 80085fe:	2b03      	cmp	r3, #3
 8008600:	d101      	bne.n	8008606 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e099      	b.n	800873a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008606:	4b4f      	ldr	r3, [pc, #316]	; (8008744 <RCCEx_PLL3_Config+0x15c>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a4e      	ldr	r2, [pc, #312]	; (8008744 <RCCEx_PLL3_Config+0x15c>)
 800860c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008610:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008612:	f7fa fa0d 	bl	8002a30 <HAL_GetTick>
 8008616:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008618:	e008      	b.n	800862c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800861a:	f7fa fa09 	bl	8002a30 <HAL_GetTick>
 800861e:	4602      	mov	r2, r0
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	2b02      	cmp	r3, #2
 8008626:	d901      	bls.n	800862c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008628:	2303      	movs	r3, #3
 800862a:	e086      	b.n	800873a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800862c:	4b45      	ldr	r3, [pc, #276]	; (8008744 <RCCEx_PLL3_Config+0x15c>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1f0      	bne.n	800861a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008638:	4b42      	ldr	r3, [pc, #264]	; (8008744 <RCCEx_PLL3_Config+0x15c>)
 800863a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	051b      	lsls	r3, r3, #20
 8008646:	493f      	ldr	r1, [pc, #252]	; (8008744 <RCCEx_PLL3_Config+0x15c>)
 8008648:	4313      	orrs	r3, r2
 800864a:	628b      	str	r3, [r1, #40]	; 0x28
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	3b01      	subs	r3, #1
 8008652:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	3b01      	subs	r3, #1
 800865c:	025b      	lsls	r3, r3, #9
 800865e:	b29b      	uxth	r3, r3
 8008660:	431a      	orrs	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	3b01      	subs	r3, #1
 8008668:	041b      	lsls	r3, r3, #16
 800866a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800866e:	431a      	orrs	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	3b01      	subs	r3, #1
 8008676:	061b      	lsls	r3, r3, #24
 8008678:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800867c:	4931      	ldr	r1, [pc, #196]	; (8008744 <RCCEx_PLL3_Config+0x15c>)
 800867e:	4313      	orrs	r3, r2
 8008680:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008682:	4b30      	ldr	r3, [pc, #192]	; (8008744 <RCCEx_PLL3_Config+0x15c>)
 8008684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008686:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	492d      	ldr	r1, [pc, #180]	; (8008744 <RCCEx_PLL3_Config+0x15c>)
 8008690:	4313      	orrs	r3, r2
 8008692:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008694:	4b2b      	ldr	r3, [pc, #172]	; (8008744 <RCCEx_PLL3_Config+0x15c>)
 8008696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008698:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	4928      	ldr	r1, [pc, #160]	; (8008744 <RCCEx_PLL3_Config+0x15c>)
 80086a2:	4313      	orrs	r3, r2
 80086a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80086a6:	4b27      	ldr	r3, [pc, #156]	; (8008744 <RCCEx_PLL3_Config+0x15c>)
 80086a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086aa:	4a26      	ldr	r2, [pc, #152]	; (8008744 <RCCEx_PLL3_Config+0x15c>)
 80086ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80086b2:	4b24      	ldr	r3, [pc, #144]	; (8008744 <RCCEx_PLL3_Config+0x15c>)
 80086b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086b6:	4b24      	ldr	r3, [pc, #144]	; (8008748 <RCCEx_PLL3_Config+0x160>)
 80086b8:	4013      	ands	r3, r2
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	69d2      	ldr	r2, [r2, #28]
 80086be:	00d2      	lsls	r2, r2, #3
 80086c0:	4920      	ldr	r1, [pc, #128]	; (8008744 <RCCEx_PLL3_Config+0x15c>)
 80086c2:	4313      	orrs	r3, r2
 80086c4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80086c6:	4b1f      	ldr	r3, [pc, #124]	; (8008744 <RCCEx_PLL3_Config+0x15c>)
 80086c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ca:	4a1e      	ldr	r2, [pc, #120]	; (8008744 <RCCEx_PLL3_Config+0x15c>)
 80086cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d106      	bne.n	80086e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80086d8:	4b1a      	ldr	r3, [pc, #104]	; (8008744 <RCCEx_PLL3_Config+0x15c>)
 80086da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086dc:	4a19      	ldr	r2, [pc, #100]	; (8008744 <RCCEx_PLL3_Config+0x15c>)
 80086de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80086e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80086e4:	e00f      	b.n	8008706 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d106      	bne.n	80086fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80086ec:	4b15      	ldr	r3, [pc, #84]	; (8008744 <RCCEx_PLL3_Config+0x15c>)
 80086ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f0:	4a14      	ldr	r2, [pc, #80]	; (8008744 <RCCEx_PLL3_Config+0x15c>)
 80086f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80086f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80086f8:	e005      	b.n	8008706 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80086fa:	4b12      	ldr	r3, [pc, #72]	; (8008744 <RCCEx_PLL3_Config+0x15c>)
 80086fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086fe:	4a11      	ldr	r2, [pc, #68]	; (8008744 <RCCEx_PLL3_Config+0x15c>)
 8008700:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008704:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008706:	4b0f      	ldr	r3, [pc, #60]	; (8008744 <RCCEx_PLL3_Config+0x15c>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a0e      	ldr	r2, [pc, #56]	; (8008744 <RCCEx_PLL3_Config+0x15c>)
 800870c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008710:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008712:	f7fa f98d 	bl	8002a30 <HAL_GetTick>
 8008716:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008718:	e008      	b.n	800872c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800871a:	f7fa f989 	bl	8002a30 <HAL_GetTick>
 800871e:	4602      	mov	r2, r0
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	1ad3      	subs	r3, r2, r3
 8008724:	2b02      	cmp	r3, #2
 8008726:	d901      	bls.n	800872c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008728:	2303      	movs	r3, #3
 800872a:	e006      	b.n	800873a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800872c:	4b05      	ldr	r3, [pc, #20]	; (8008744 <RCCEx_PLL3_Config+0x15c>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d0f0      	beq.n	800871a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008738:	7bfb      	ldrb	r3, [r7, #15]
}
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	58024400 	.word	0x58024400
 8008748:	ffff0007 	.word	0xffff0007

0800874c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d101      	bne.n	800875e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	e049      	b.n	80087f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2b00      	cmp	r3, #0
 8008768:	d106      	bne.n	8008778 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7f9 fdd4 	bl	8002320 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2202      	movs	r2, #2
 800877c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	3304      	adds	r3, #4
 8008788:	4619      	mov	r1, r3
 800878a:	4610      	mov	r0, r2
 800878c:	f000 fea6 	bl	80094dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
	...

080087fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800880a:	b2db      	uxtb	r3, r3
 800880c:	2b01      	cmp	r3, #1
 800880e:	d001      	beq.n	8008814 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e054      	b.n	80088be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2202      	movs	r2, #2
 8008818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68da      	ldr	r2, [r3, #12]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f042 0201 	orr.w	r2, r2, #1
 800882a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a26      	ldr	r2, [pc, #152]	; (80088cc <HAL_TIM_Base_Start_IT+0xd0>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d022      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x80>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800883e:	d01d      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x80>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a22      	ldr	r2, [pc, #136]	; (80088d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d018      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x80>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a21      	ldr	r2, [pc, #132]	; (80088d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d013      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x80>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a1f      	ldr	r2, [pc, #124]	; (80088d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d00e      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x80>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a1e      	ldr	r2, [pc, #120]	; (80088dc <HAL_TIM_Base_Start_IT+0xe0>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d009      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x80>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a1c      	ldr	r2, [pc, #112]	; (80088e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d004      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x80>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a1b      	ldr	r2, [pc, #108]	; (80088e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d115      	bne.n	80088a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689a      	ldr	r2, [r3, #8]
 8008882:	4b19      	ldr	r3, [pc, #100]	; (80088e8 <HAL_TIM_Base_Start_IT+0xec>)
 8008884:	4013      	ands	r3, r2
 8008886:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2b06      	cmp	r3, #6
 800888c:	d015      	beq.n	80088ba <HAL_TIM_Base_Start_IT+0xbe>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008894:	d011      	beq.n	80088ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f042 0201 	orr.w	r2, r2, #1
 80088a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088a6:	e008      	b.n	80088ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f042 0201 	orr.w	r2, r2, #1
 80088b6:	601a      	str	r2, [r3, #0]
 80088b8:	e000      	b.n	80088bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3714      	adds	r7, #20
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	40010000 	.word	0x40010000
 80088d0:	40000400 	.word	0x40000400
 80088d4:	40000800 	.word	0x40000800
 80088d8:	40000c00 	.word	0x40000c00
 80088dc:	40010400 	.word	0x40010400
 80088e0:	40001800 	.word	0x40001800
 80088e4:	40014000 	.word	0x40014000
 80088e8:	00010007 	.word	0x00010007

080088ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d101      	bne.n	80088fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e049      	b.n	8008992 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	d106      	bne.n	8008918 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f841 	bl	800899a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2202      	movs	r2, #2
 800891c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	3304      	adds	r3, #4
 8008928:	4619      	mov	r1, r3
 800892a:	4610      	mov	r0, r2
 800892c:	f000 fdd6 	bl	80094dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2201      	movs	r2, #1
 8008944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2201      	movs	r2, #1
 800898c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3708      	adds	r7, #8
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800899a:	b480      	push	{r7}
 800899c:	b083      	sub	sp, #12
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80089a2:	bf00      	nop
 80089a4:	370c      	adds	r7, #12
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
	...

080089b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d109      	bne.n	80089d4 <HAL_TIM_PWM_Start+0x24>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	bf14      	ite	ne
 80089cc:	2301      	movne	r3, #1
 80089ce:	2300      	moveq	r3, #0
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	e03c      	b.n	8008a4e <HAL_TIM_PWM_Start+0x9e>
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	2b04      	cmp	r3, #4
 80089d8:	d109      	bne.n	80089ee <HAL_TIM_PWM_Start+0x3e>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	bf14      	ite	ne
 80089e6:	2301      	movne	r3, #1
 80089e8:	2300      	moveq	r3, #0
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	e02f      	b.n	8008a4e <HAL_TIM_PWM_Start+0x9e>
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	2b08      	cmp	r3, #8
 80089f2:	d109      	bne.n	8008a08 <HAL_TIM_PWM_Start+0x58>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	bf14      	ite	ne
 8008a00:	2301      	movne	r3, #1
 8008a02:	2300      	moveq	r3, #0
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	e022      	b.n	8008a4e <HAL_TIM_PWM_Start+0x9e>
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	2b0c      	cmp	r3, #12
 8008a0c:	d109      	bne.n	8008a22 <HAL_TIM_PWM_Start+0x72>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	bf14      	ite	ne
 8008a1a:	2301      	movne	r3, #1
 8008a1c:	2300      	moveq	r3, #0
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	e015      	b.n	8008a4e <HAL_TIM_PWM_Start+0x9e>
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	2b10      	cmp	r3, #16
 8008a26:	d109      	bne.n	8008a3c <HAL_TIM_PWM_Start+0x8c>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	bf14      	ite	ne
 8008a34:	2301      	movne	r3, #1
 8008a36:	2300      	moveq	r3, #0
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	e008      	b.n	8008a4e <HAL_TIM_PWM_Start+0x9e>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	bf14      	ite	ne
 8008a48:	2301      	movne	r3, #1
 8008a4a:	2300      	moveq	r3, #0
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d001      	beq.n	8008a56 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	e0a1      	b.n	8008b9a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d104      	bne.n	8008a66 <HAL_TIM_PWM_Start+0xb6>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2202      	movs	r2, #2
 8008a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a64:	e023      	b.n	8008aae <HAL_TIM_PWM_Start+0xfe>
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	2b04      	cmp	r3, #4
 8008a6a:	d104      	bne.n	8008a76 <HAL_TIM_PWM_Start+0xc6>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2202      	movs	r2, #2
 8008a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a74:	e01b      	b.n	8008aae <HAL_TIM_PWM_Start+0xfe>
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	2b08      	cmp	r3, #8
 8008a7a:	d104      	bne.n	8008a86 <HAL_TIM_PWM_Start+0xd6>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2202      	movs	r2, #2
 8008a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a84:	e013      	b.n	8008aae <HAL_TIM_PWM_Start+0xfe>
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	2b0c      	cmp	r3, #12
 8008a8a:	d104      	bne.n	8008a96 <HAL_TIM_PWM_Start+0xe6>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2202      	movs	r2, #2
 8008a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a94:	e00b      	b.n	8008aae <HAL_TIM_PWM_Start+0xfe>
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	2b10      	cmp	r3, #16
 8008a9a:	d104      	bne.n	8008aa6 <HAL_TIM_PWM_Start+0xf6>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008aa4:	e003      	b.n	8008aae <HAL_TIM_PWM_Start+0xfe>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2202      	movs	r2, #2
 8008aaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	6839      	ldr	r1, [r7, #0]
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f001 f91e 	bl	8009cf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a38      	ldr	r2, [pc, #224]	; (8008ba4 <HAL_TIM_PWM_Start+0x1f4>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d013      	beq.n	8008aee <HAL_TIM_PWM_Start+0x13e>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a37      	ldr	r2, [pc, #220]	; (8008ba8 <HAL_TIM_PWM_Start+0x1f8>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d00e      	beq.n	8008aee <HAL_TIM_PWM_Start+0x13e>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a35      	ldr	r2, [pc, #212]	; (8008bac <HAL_TIM_PWM_Start+0x1fc>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d009      	beq.n	8008aee <HAL_TIM_PWM_Start+0x13e>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a34      	ldr	r2, [pc, #208]	; (8008bb0 <HAL_TIM_PWM_Start+0x200>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d004      	beq.n	8008aee <HAL_TIM_PWM_Start+0x13e>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a32      	ldr	r2, [pc, #200]	; (8008bb4 <HAL_TIM_PWM_Start+0x204>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d101      	bne.n	8008af2 <HAL_TIM_PWM_Start+0x142>
 8008aee:	2301      	movs	r3, #1
 8008af0:	e000      	b.n	8008af4 <HAL_TIM_PWM_Start+0x144>
 8008af2:	2300      	movs	r3, #0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d007      	beq.n	8008b08 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b06:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a25      	ldr	r2, [pc, #148]	; (8008ba4 <HAL_TIM_PWM_Start+0x1f4>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d022      	beq.n	8008b58 <HAL_TIM_PWM_Start+0x1a8>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b1a:	d01d      	beq.n	8008b58 <HAL_TIM_PWM_Start+0x1a8>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a25      	ldr	r2, [pc, #148]	; (8008bb8 <HAL_TIM_PWM_Start+0x208>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d018      	beq.n	8008b58 <HAL_TIM_PWM_Start+0x1a8>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a24      	ldr	r2, [pc, #144]	; (8008bbc <HAL_TIM_PWM_Start+0x20c>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d013      	beq.n	8008b58 <HAL_TIM_PWM_Start+0x1a8>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a22      	ldr	r2, [pc, #136]	; (8008bc0 <HAL_TIM_PWM_Start+0x210>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d00e      	beq.n	8008b58 <HAL_TIM_PWM_Start+0x1a8>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a1a      	ldr	r2, [pc, #104]	; (8008ba8 <HAL_TIM_PWM_Start+0x1f8>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d009      	beq.n	8008b58 <HAL_TIM_PWM_Start+0x1a8>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a1e      	ldr	r2, [pc, #120]	; (8008bc4 <HAL_TIM_PWM_Start+0x214>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d004      	beq.n	8008b58 <HAL_TIM_PWM_Start+0x1a8>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a16      	ldr	r2, [pc, #88]	; (8008bac <HAL_TIM_PWM_Start+0x1fc>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d115      	bne.n	8008b84 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	689a      	ldr	r2, [r3, #8]
 8008b5e:	4b1a      	ldr	r3, [pc, #104]	; (8008bc8 <HAL_TIM_PWM_Start+0x218>)
 8008b60:	4013      	ands	r3, r2
 8008b62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2b06      	cmp	r3, #6
 8008b68:	d015      	beq.n	8008b96 <HAL_TIM_PWM_Start+0x1e6>
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b70:	d011      	beq.n	8008b96 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f042 0201 	orr.w	r2, r2, #1
 8008b80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b82:	e008      	b.n	8008b96 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f042 0201 	orr.w	r2, r2, #1
 8008b92:	601a      	str	r2, [r3, #0]
 8008b94:	e000      	b.n	8008b98 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	40010000 	.word	0x40010000
 8008ba8:	40010400 	.word	0x40010400
 8008bac:	40014000 	.word	0x40014000
 8008bb0:	40014400 	.word	0x40014400
 8008bb4:	40014800 	.word	0x40014800
 8008bb8:	40000400 	.word	0x40000400
 8008bbc:	40000800 	.word	0x40000800
 8008bc0:	40000c00 	.word	0x40000c00
 8008bc4:	40001800 	.word	0x40001800
 8008bc8:	00010007 	.word	0x00010007

08008bcc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b086      	sub	sp, #24
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d101      	bne.n	8008be0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e08f      	b.n	8008d00 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d106      	bne.n	8008bfa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f7f9 fc09 	bl	800240c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2202      	movs	r2, #2
 8008bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	6899      	ldr	r1, [r3, #8]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	4b3e      	ldr	r3, [pc, #248]	; (8008d08 <HAL_TIM_Encoder_Init+0x13c>)
 8008c0e:	400b      	ands	r3, r1
 8008c10:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	3304      	adds	r3, #4
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	4610      	mov	r0, r2
 8008c1e:	f000 fc5d 	bl	80094dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	699b      	ldr	r3, [r3, #24]
 8008c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	6a1b      	ldr	r3, [r3, #32]
 8008c38:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	697a      	ldr	r2, [r7, #20]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008c44:	693a      	ldr	r2, [r7, #16]
 8008c46:	4b31      	ldr	r3, [pc, #196]	; (8008d0c <HAL_TIM_Encoder_Init+0x140>)
 8008c48:	4013      	ands	r3, r2
 8008c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	689a      	ldr	r2, [r3, #8]
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	021b      	lsls	r3, r3, #8
 8008c56:	4313      	orrs	r3, r2
 8008c58:	693a      	ldr	r2, [r7, #16]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008c5e:	693a      	ldr	r2, [r7, #16]
 8008c60:	4b2b      	ldr	r3, [pc, #172]	; (8008d10 <HAL_TIM_Encoder_Init+0x144>)
 8008c62:	4013      	ands	r3, r2
 8008c64:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008c66:	693a      	ldr	r2, [r7, #16]
 8008c68:	4b2a      	ldr	r3, [pc, #168]	; (8008d14 <HAL_TIM_Encoder_Init+0x148>)
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	68da      	ldr	r2, [r3, #12]
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	69db      	ldr	r3, [r3, #28]
 8008c76:	021b      	lsls	r3, r3, #8
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	693a      	ldr	r2, [r7, #16]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	691b      	ldr	r3, [r3, #16]
 8008c84:	011a      	lsls	r2, r3, #4
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	6a1b      	ldr	r3, [r3, #32]
 8008c8a:	031b      	lsls	r3, r3, #12
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	693a      	ldr	r2, [r7, #16]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008c9a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008ca2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	685a      	ldr	r2, [r3, #4]
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	695b      	ldr	r3, [r3, #20]
 8008cac:	011b      	lsls	r3, r3, #4
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	697a      	ldr	r2, [r7, #20]
 8008cbc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3718      	adds	r7, #24
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	fffebff8 	.word	0xfffebff8
 8008d0c:	fffffcfc 	.word	0xfffffcfc
 8008d10:	fffff3f3 	.word	0xfffff3f3
 8008d14:	ffff0f0f 	.word	0xffff0f0f

08008d18 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d28:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008d30:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d38:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d40:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d110      	bne.n	8008d6a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d48:	7bfb      	ldrb	r3, [r7, #15]
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d102      	bne.n	8008d54 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d4e:	7b7b      	ldrb	r3, [r7, #13]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d001      	beq.n	8008d58 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008d54:	2301      	movs	r3, #1
 8008d56:	e069      	b.n	8008e2c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2202      	movs	r2, #2
 8008d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2202      	movs	r2, #2
 8008d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d68:	e031      	b.n	8008dce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	2b04      	cmp	r3, #4
 8008d6e:	d110      	bne.n	8008d92 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d70:	7bbb      	ldrb	r3, [r7, #14]
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d102      	bne.n	8008d7c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d76:	7b3b      	ldrb	r3, [r7, #12]
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d001      	beq.n	8008d80 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e055      	b.n	8008e2c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2202      	movs	r2, #2
 8008d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2202      	movs	r2, #2
 8008d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d90:	e01d      	b.n	8008dce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d108      	bne.n	8008daa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d98:	7bbb      	ldrb	r3, [r7, #14]
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d105      	bne.n	8008daa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d9e:	7b7b      	ldrb	r3, [r7, #13]
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d102      	bne.n	8008daa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008da4:	7b3b      	ldrb	r3, [r7, #12]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d001      	beq.n	8008dae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e03e      	b.n	8008e2c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2202      	movs	r2, #2
 8008db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2202      	movs	r2, #2
 8008dba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2202      	movs	r2, #2
 8008dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2202      	movs	r2, #2
 8008dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d003      	beq.n	8008ddc <HAL_TIM_Encoder_Start+0xc4>
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	2b04      	cmp	r3, #4
 8008dd8:	d008      	beq.n	8008dec <HAL_TIM_Encoder_Start+0xd4>
 8008dda:	e00f      	b.n	8008dfc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2201      	movs	r2, #1
 8008de2:	2100      	movs	r1, #0
 8008de4:	4618      	mov	r0, r3
 8008de6:	f000 ff87 	bl	8009cf8 <TIM_CCxChannelCmd>
      break;
 8008dea:	e016      	b.n	8008e1a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2201      	movs	r2, #1
 8008df2:	2104      	movs	r1, #4
 8008df4:	4618      	mov	r0, r3
 8008df6:	f000 ff7f 	bl	8009cf8 <TIM_CCxChannelCmd>
      break;
 8008dfa:	e00e      	b.n	8008e1a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2201      	movs	r2, #1
 8008e02:	2100      	movs	r1, #0
 8008e04:	4618      	mov	r0, r3
 8008e06:	f000 ff77 	bl	8009cf8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	2104      	movs	r1, #4
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 ff70 	bl	8009cf8 <TIM_CCxChannelCmd>
      break;
 8008e18:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f042 0201 	orr.w	r2, r2, #1
 8008e28:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	691b      	ldr	r3, [r3, #16]
 8008e42:	f003 0302 	and.w	r3, r3, #2
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	d122      	bne.n	8008e90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	f003 0302 	and.w	r3, r3, #2
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d11b      	bne.n	8008e90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f06f 0202 	mvn.w	r2, #2
 8008e60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2201      	movs	r2, #1
 8008e66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	699b      	ldr	r3, [r3, #24]
 8008e6e:	f003 0303 	and.w	r3, r3, #3
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d003      	beq.n	8008e7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 fb12 	bl	80094a0 <HAL_TIM_IC_CaptureCallback>
 8008e7c:	e005      	b.n	8008e8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 fb04 	bl	800948c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 fb15 	bl	80094b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	691b      	ldr	r3, [r3, #16]
 8008e96:	f003 0304 	and.w	r3, r3, #4
 8008e9a:	2b04      	cmp	r3, #4
 8008e9c:	d122      	bne.n	8008ee4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	f003 0304 	and.w	r3, r3, #4
 8008ea8:	2b04      	cmp	r3, #4
 8008eaa:	d11b      	bne.n	8008ee4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f06f 0204 	mvn.w	r2, #4
 8008eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2202      	movs	r2, #2
 8008eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	699b      	ldr	r3, [r3, #24]
 8008ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d003      	beq.n	8008ed2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 fae8 	bl	80094a0 <HAL_TIM_IC_CaptureCallback>
 8008ed0:	e005      	b.n	8008ede <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fada 	bl	800948c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 faeb 	bl	80094b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	f003 0308 	and.w	r3, r3, #8
 8008eee:	2b08      	cmp	r3, #8
 8008ef0:	d122      	bne.n	8008f38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	f003 0308 	and.w	r3, r3, #8
 8008efc:	2b08      	cmp	r3, #8
 8008efe:	d11b      	bne.n	8008f38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f06f 0208 	mvn.w	r2, #8
 8008f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2204      	movs	r2, #4
 8008f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	69db      	ldr	r3, [r3, #28]
 8008f16:	f003 0303 	and.w	r3, r3, #3
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d003      	beq.n	8008f26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fabe 	bl	80094a0 <HAL_TIM_IC_CaptureCallback>
 8008f24:	e005      	b.n	8008f32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fab0 	bl	800948c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 fac1 	bl	80094b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	f003 0310 	and.w	r3, r3, #16
 8008f42:	2b10      	cmp	r3, #16
 8008f44:	d122      	bne.n	8008f8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	f003 0310 	and.w	r3, r3, #16
 8008f50:	2b10      	cmp	r3, #16
 8008f52:	d11b      	bne.n	8008f8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f06f 0210 	mvn.w	r2, #16
 8008f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2208      	movs	r2, #8
 8008f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	69db      	ldr	r3, [r3, #28]
 8008f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d003      	beq.n	8008f7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fa94 	bl	80094a0 <HAL_TIM_IC_CaptureCallback>
 8008f78:	e005      	b.n	8008f86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fa86 	bl	800948c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 fa97 	bl	80094b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	691b      	ldr	r3, [r3, #16]
 8008f92:	f003 0301 	and.w	r3, r3, #1
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d10e      	bne.n	8008fb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	f003 0301 	and.w	r3, r3, #1
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d107      	bne.n	8008fb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f06f 0201 	mvn.w	r2, #1
 8008fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f7f7 fe88 	bl	8000cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fc2:	2b80      	cmp	r3, #128	; 0x80
 8008fc4:	d10e      	bne.n	8008fe4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fd0:	2b80      	cmp	r3, #128	; 0x80
 8008fd2:	d107      	bne.n	8008fe4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 ff48 	bl	8009e74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ff2:	d10e      	bne.n	8009012 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ffe:	2b80      	cmp	r3, #128	; 0x80
 8009000:	d107      	bne.n	8009012 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800900a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 ff3b 	bl	8009e88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800901c:	2b40      	cmp	r3, #64	; 0x40
 800901e:	d10e      	bne.n	800903e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800902a:	2b40      	cmp	r3, #64	; 0x40
 800902c:	d107      	bne.n	800903e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 fa45 	bl	80094c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	f003 0320 	and.w	r3, r3, #32
 8009048:	2b20      	cmp	r3, #32
 800904a:	d10e      	bne.n	800906a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	f003 0320 	and.w	r3, r3, #32
 8009056:	2b20      	cmp	r3, #32
 8009058:	d107      	bne.n	800906a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f06f 0220 	mvn.w	r2, #32
 8009062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 fefb 	bl	8009e60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800906a:	bf00      	nop
 800906c:	3708      	adds	r7, #8
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
	...

08009074 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b086      	sub	sp, #24
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800908a:	2b01      	cmp	r3, #1
 800908c:	d101      	bne.n	8009092 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800908e:	2302      	movs	r3, #2
 8009090:	e0ff      	b.n	8009292 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2201      	movs	r2, #1
 8009096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2b14      	cmp	r3, #20
 800909e:	f200 80f0 	bhi.w	8009282 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80090a2:	a201      	add	r2, pc, #4	; (adr r2, 80090a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80090a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a8:	080090fd 	.word	0x080090fd
 80090ac:	08009283 	.word	0x08009283
 80090b0:	08009283 	.word	0x08009283
 80090b4:	08009283 	.word	0x08009283
 80090b8:	0800913d 	.word	0x0800913d
 80090bc:	08009283 	.word	0x08009283
 80090c0:	08009283 	.word	0x08009283
 80090c4:	08009283 	.word	0x08009283
 80090c8:	0800917f 	.word	0x0800917f
 80090cc:	08009283 	.word	0x08009283
 80090d0:	08009283 	.word	0x08009283
 80090d4:	08009283 	.word	0x08009283
 80090d8:	080091bf 	.word	0x080091bf
 80090dc:	08009283 	.word	0x08009283
 80090e0:	08009283 	.word	0x08009283
 80090e4:	08009283 	.word	0x08009283
 80090e8:	08009201 	.word	0x08009201
 80090ec:	08009283 	.word	0x08009283
 80090f0:	08009283 	.word	0x08009283
 80090f4:	08009283 	.word	0x08009283
 80090f8:	08009241 	.word	0x08009241
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68b9      	ldr	r1, [r7, #8]
 8009102:	4618      	mov	r0, r3
 8009104:	f000 fa84 	bl	8009610 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	699a      	ldr	r2, [r3, #24]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f042 0208 	orr.w	r2, r2, #8
 8009116:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	699a      	ldr	r2, [r3, #24]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f022 0204 	bic.w	r2, r2, #4
 8009126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	6999      	ldr	r1, [r3, #24]
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	691a      	ldr	r2, [r3, #16]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	430a      	orrs	r2, r1
 8009138:	619a      	str	r2, [r3, #24]
      break;
 800913a:	e0a5      	b.n	8009288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68b9      	ldr	r1, [r7, #8]
 8009142:	4618      	mov	r0, r3
 8009144:	f000 faf4 	bl	8009730 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	699a      	ldr	r2, [r3, #24]
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	699a      	ldr	r2, [r3, #24]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	6999      	ldr	r1, [r3, #24]
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	021a      	lsls	r2, r3, #8
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	430a      	orrs	r2, r1
 800917a:	619a      	str	r2, [r3, #24]
      break;
 800917c:	e084      	b.n	8009288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68b9      	ldr	r1, [r7, #8]
 8009184:	4618      	mov	r0, r3
 8009186:	f000 fb5d 	bl	8009844 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	69da      	ldr	r2, [r3, #28]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f042 0208 	orr.w	r2, r2, #8
 8009198:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	69da      	ldr	r2, [r3, #28]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f022 0204 	bic.w	r2, r2, #4
 80091a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	69d9      	ldr	r1, [r3, #28]
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	691a      	ldr	r2, [r3, #16]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	430a      	orrs	r2, r1
 80091ba:	61da      	str	r2, [r3, #28]
      break;
 80091bc:	e064      	b.n	8009288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68b9      	ldr	r1, [r7, #8]
 80091c4:	4618      	mov	r0, r3
 80091c6:	f000 fbc5 	bl	8009954 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	69da      	ldr	r2, [r3, #28]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	69da      	ldr	r2, [r3, #28]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	69d9      	ldr	r1, [r3, #28]
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	021a      	lsls	r2, r3, #8
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	430a      	orrs	r2, r1
 80091fc:	61da      	str	r2, [r3, #28]
      break;
 80091fe:	e043      	b.n	8009288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	68b9      	ldr	r1, [r7, #8]
 8009206:	4618      	mov	r0, r3
 8009208:	f000 fc0e 	bl	8009a28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f042 0208 	orr.w	r2, r2, #8
 800921a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f022 0204 	bic.w	r2, r2, #4
 800922a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	691a      	ldr	r2, [r3, #16]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	430a      	orrs	r2, r1
 800923c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800923e:	e023      	b.n	8009288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	68b9      	ldr	r1, [r7, #8]
 8009246:	4618      	mov	r0, r3
 8009248:	f000 fc52 	bl	8009af0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800925a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800926a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	021a      	lsls	r2, r3, #8
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	430a      	orrs	r2, r1
 800927e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009280:	e002      	b.n	8009288 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	75fb      	strb	r3, [r7, #23]
      break;
 8009286:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009290:	7dfb      	ldrb	r3, [r7, #23]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3718      	adds	r7, #24
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop

0800929c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092a6:	2300      	movs	r3, #0
 80092a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d101      	bne.n	80092b8 <HAL_TIM_ConfigClockSource+0x1c>
 80092b4:	2302      	movs	r3, #2
 80092b6:	e0dc      	b.n	8009472 <HAL_TIM_ConfigClockSource+0x1d6>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2202      	movs	r2, #2
 80092c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	689b      	ldr	r3, [r3, #8]
 80092ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	4b6a      	ldr	r3, [pc, #424]	; (800947c <HAL_TIM_ConfigClockSource+0x1e0>)
 80092d4:	4013      	ands	r3, r2
 80092d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a64      	ldr	r2, [pc, #400]	; (8009480 <HAL_TIM_ConfigClockSource+0x1e4>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	f000 80a9 	beq.w	8009446 <HAL_TIM_ConfigClockSource+0x1aa>
 80092f4:	4a62      	ldr	r2, [pc, #392]	; (8009480 <HAL_TIM_ConfigClockSource+0x1e4>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	f200 80ae 	bhi.w	8009458 <HAL_TIM_ConfigClockSource+0x1bc>
 80092fc:	4a61      	ldr	r2, [pc, #388]	; (8009484 <HAL_TIM_ConfigClockSource+0x1e8>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	f000 80a1 	beq.w	8009446 <HAL_TIM_ConfigClockSource+0x1aa>
 8009304:	4a5f      	ldr	r2, [pc, #380]	; (8009484 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009306:	4293      	cmp	r3, r2
 8009308:	f200 80a6 	bhi.w	8009458 <HAL_TIM_ConfigClockSource+0x1bc>
 800930c:	4a5e      	ldr	r2, [pc, #376]	; (8009488 <HAL_TIM_ConfigClockSource+0x1ec>)
 800930e:	4293      	cmp	r3, r2
 8009310:	f000 8099 	beq.w	8009446 <HAL_TIM_ConfigClockSource+0x1aa>
 8009314:	4a5c      	ldr	r2, [pc, #368]	; (8009488 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009316:	4293      	cmp	r3, r2
 8009318:	f200 809e 	bhi.w	8009458 <HAL_TIM_ConfigClockSource+0x1bc>
 800931c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009320:	f000 8091 	beq.w	8009446 <HAL_TIM_ConfigClockSource+0x1aa>
 8009324:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009328:	f200 8096 	bhi.w	8009458 <HAL_TIM_ConfigClockSource+0x1bc>
 800932c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009330:	f000 8089 	beq.w	8009446 <HAL_TIM_ConfigClockSource+0x1aa>
 8009334:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009338:	f200 808e 	bhi.w	8009458 <HAL_TIM_ConfigClockSource+0x1bc>
 800933c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009340:	d03e      	beq.n	80093c0 <HAL_TIM_ConfigClockSource+0x124>
 8009342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009346:	f200 8087 	bhi.w	8009458 <HAL_TIM_ConfigClockSource+0x1bc>
 800934a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800934e:	f000 8086 	beq.w	800945e <HAL_TIM_ConfigClockSource+0x1c2>
 8009352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009356:	d87f      	bhi.n	8009458 <HAL_TIM_ConfigClockSource+0x1bc>
 8009358:	2b70      	cmp	r3, #112	; 0x70
 800935a:	d01a      	beq.n	8009392 <HAL_TIM_ConfigClockSource+0xf6>
 800935c:	2b70      	cmp	r3, #112	; 0x70
 800935e:	d87b      	bhi.n	8009458 <HAL_TIM_ConfigClockSource+0x1bc>
 8009360:	2b60      	cmp	r3, #96	; 0x60
 8009362:	d050      	beq.n	8009406 <HAL_TIM_ConfigClockSource+0x16a>
 8009364:	2b60      	cmp	r3, #96	; 0x60
 8009366:	d877      	bhi.n	8009458 <HAL_TIM_ConfigClockSource+0x1bc>
 8009368:	2b50      	cmp	r3, #80	; 0x50
 800936a:	d03c      	beq.n	80093e6 <HAL_TIM_ConfigClockSource+0x14a>
 800936c:	2b50      	cmp	r3, #80	; 0x50
 800936e:	d873      	bhi.n	8009458 <HAL_TIM_ConfigClockSource+0x1bc>
 8009370:	2b40      	cmp	r3, #64	; 0x40
 8009372:	d058      	beq.n	8009426 <HAL_TIM_ConfigClockSource+0x18a>
 8009374:	2b40      	cmp	r3, #64	; 0x40
 8009376:	d86f      	bhi.n	8009458 <HAL_TIM_ConfigClockSource+0x1bc>
 8009378:	2b30      	cmp	r3, #48	; 0x30
 800937a:	d064      	beq.n	8009446 <HAL_TIM_ConfigClockSource+0x1aa>
 800937c:	2b30      	cmp	r3, #48	; 0x30
 800937e:	d86b      	bhi.n	8009458 <HAL_TIM_ConfigClockSource+0x1bc>
 8009380:	2b20      	cmp	r3, #32
 8009382:	d060      	beq.n	8009446 <HAL_TIM_ConfigClockSource+0x1aa>
 8009384:	2b20      	cmp	r3, #32
 8009386:	d867      	bhi.n	8009458 <HAL_TIM_ConfigClockSource+0x1bc>
 8009388:	2b00      	cmp	r3, #0
 800938a:	d05c      	beq.n	8009446 <HAL_TIM_ConfigClockSource+0x1aa>
 800938c:	2b10      	cmp	r3, #16
 800938e:	d05a      	beq.n	8009446 <HAL_TIM_ConfigClockSource+0x1aa>
 8009390:	e062      	b.n	8009458 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6818      	ldr	r0, [r3, #0]
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	6899      	ldr	r1, [r3, #8]
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	685a      	ldr	r2, [r3, #4]
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	f000 fc89 	bl	8009cb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80093b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	68ba      	ldr	r2, [r7, #8]
 80093bc:	609a      	str	r2, [r3, #8]
      break;
 80093be:	e04f      	b.n	8009460 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6818      	ldr	r0, [r3, #0]
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	6899      	ldr	r1, [r3, #8]
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	685a      	ldr	r2, [r3, #4]
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	f000 fc72 	bl	8009cb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	689a      	ldr	r2, [r3, #8]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093e2:	609a      	str	r2, [r3, #8]
      break;
 80093e4:	e03c      	b.n	8009460 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6818      	ldr	r0, [r3, #0]
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	6859      	ldr	r1, [r3, #4]
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	461a      	mov	r2, r3
 80093f4:	f000 fbe2 	bl	8009bbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2150      	movs	r1, #80	; 0x50
 80093fe:	4618      	mov	r0, r3
 8009400:	f000 fc3c 	bl	8009c7c <TIM_ITRx_SetConfig>
      break;
 8009404:	e02c      	b.n	8009460 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6818      	ldr	r0, [r3, #0]
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	6859      	ldr	r1, [r3, #4]
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	461a      	mov	r2, r3
 8009414:	f000 fc01 	bl	8009c1a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2160      	movs	r1, #96	; 0x60
 800941e:	4618      	mov	r0, r3
 8009420:	f000 fc2c 	bl	8009c7c <TIM_ITRx_SetConfig>
      break;
 8009424:	e01c      	b.n	8009460 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6818      	ldr	r0, [r3, #0]
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	6859      	ldr	r1, [r3, #4]
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	461a      	mov	r2, r3
 8009434:	f000 fbc2 	bl	8009bbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2140      	movs	r1, #64	; 0x40
 800943e:	4618      	mov	r0, r3
 8009440:	f000 fc1c 	bl	8009c7c <TIM_ITRx_SetConfig>
      break;
 8009444:	e00c      	b.n	8009460 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4619      	mov	r1, r3
 8009450:	4610      	mov	r0, r2
 8009452:	f000 fc13 	bl	8009c7c <TIM_ITRx_SetConfig>
      break;
 8009456:	e003      	b.n	8009460 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009458:	2301      	movs	r3, #1
 800945a:	73fb      	strb	r3, [r7, #15]
      break;
 800945c:	e000      	b.n	8009460 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800945e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009470:	7bfb      	ldrb	r3, [r7, #15]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	ffceff88 	.word	0xffceff88
 8009480:	00100040 	.word	0x00100040
 8009484:	00100030 	.word	0x00100030
 8009488:	00100020 	.word	0x00100020

0800948c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009494:	bf00      	nop
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094a8:	bf00      	nop
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094bc:	bf00      	nop
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80094d0:	bf00      	nop
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80094dc:	b480      	push	{r7}
 80094de:	b085      	sub	sp, #20
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a40      	ldr	r2, [pc, #256]	; (80095f0 <TIM_Base_SetConfig+0x114>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d013      	beq.n	800951c <TIM_Base_SetConfig+0x40>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094fa:	d00f      	beq.n	800951c <TIM_Base_SetConfig+0x40>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4a3d      	ldr	r2, [pc, #244]	; (80095f4 <TIM_Base_SetConfig+0x118>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d00b      	beq.n	800951c <TIM_Base_SetConfig+0x40>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a3c      	ldr	r2, [pc, #240]	; (80095f8 <TIM_Base_SetConfig+0x11c>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d007      	beq.n	800951c <TIM_Base_SetConfig+0x40>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a3b      	ldr	r2, [pc, #236]	; (80095fc <TIM_Base_SetConfig+0x120>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d003      	beq.n	800951c <TIM_Base_SetConfig+0x40>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a3a      	ldr	r2, [pc, #232]	; (8009600 <TIM_Base_SetConfig+0x124>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d108      	bne.n	800952e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	4313      	orrs	r3, r2
 800952c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4a2f      	ldr	r2, [pc, #188]	; (80095f0 <TIM_Base_SetConfig+0x114>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d01f      	beq.n	8009576 <TIM_Base_SetConfig+0x9a>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800953c:	d01b      	beq.n	8009576 <TIM_Base_SetConfig+0x9a>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4a2c      	ldr	r2, [pc, #176]	; (80095f4 <TIM_Base_SetConfig+0x118>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d017      	beq.n	8009576 <TIM_Base_SetConfig+0x9a>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a2b      	ldr	r2, [pc, #172]	; (80095f8 <TIM_Base_SetConfig+0x11c>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d013      	beq.n	8009576 <TIM_Base_SetConfig+0x9a>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a2a      	ldr	r2, [pc, #168]	; (80095fc <TIM_Base_SetConfig+0x120>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d00f      	beq.n	8009576 <TIM_Base_SetConfig+0x9a>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a29      	ldr	r2, [pc, #164]	; (8009600 <TIM_Base_SetConfig+0x124>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d00b      	beq.n	8009576 <TIM_Base_SetConfig+0x9a>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a28      	ldr	r2, [pc, #160]	; (8009604 <TIM_Base_SetConfig+0x128>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d007      	beq.n	8009576 <TIM_Base_SetConfig+0x9a>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4a27      	ldr	r2, [pc, #156]	; (8009608 <TIM_Base_SetConfig+0x12c>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d003      	beq.n	8009576 <TIM_Base_SetConfig+0x9a>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4a26      	ldr	r2, [pc, #152]	; (800960c <TIM_Base_SetConfig+0x130>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d108      	bne.n	8009588 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800957c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	4313      	orrs	r3, r2
 8009586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	695b      	ldr	r3, [r3, #20]
 8009592:	4313      	orrs	r3, r2
 8009594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	689a      	ldr	r2, [r3, #8]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4a10      	ldr	r2, [pc, #64]	; (80095f0 <TIM_Base_SetConfig+0x114>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d00f      	beq.n	80095d4 <TIM_Base_SetConfig+0xf8>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4a12      	ldr	r2, [pc, #72]	; (8009600 <TIM_Base_SetConfig+0x124>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d00b      	beq.n	80095d4 <TIM_Base_SetConfig+0xf8>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a11      	ldr	r2, [pc, #68]	; (8009604 <TIM_Base_SetConfig+0x128>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d007      	beq.n	80095d4 <TIM_Base_SetConfig+0xf8>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4a10      	ldr	r2, [pc, #64]	; (8009608 <TIM_Base_SetConfig+0x12c>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d003      	beq.n	80095d4 <TIM_Base_SetConfig+0xf8>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4a0f      	ldr	r2, [pc, #60]	; (800960c <TIM_Base_SetConfig+0x130>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d103      	bne.n	80095dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	691a      	ldr	r2, [r3, #16]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2201      	movs	r2, #1
 80095e0:	615a      	str	r2, [r3, #20]
}
 80095e2:	bf00      	nop
 80095e4:	3714      	adds	r7, #20
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	40010000 	.word	0x40010000
 80095f4:	40000400 	.word	0x40000400
 80095f8:	40000800 	.word	0x40000800
 80095fc:	40000c00 	.word	0x40000c00
 8009600:	40010400 	.word	0x40010400
 8009604:	40014000 	.word	0x40014000
 8009608:	40014400 	.word	0x40014400
 800960c:	40014800 	.word	0x40014800

08009610 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009610:	b480      	push	{r7}
 8009612:	b087      	sub	sp, #28
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a1b      	ldr	r3, [r3, #32]
 800961e:	f023 0201 	bic.w	r2, r3, #1
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6a1b      	ldr	r3, [r3, #32]
 800962a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	699b      	ldr	r3, [r3, #24]
 8009636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	4b37      	ldr	r3, [pc, #220]	; (8009718 <TIM_OC1_SetConfig+0x108>)
 800963c:	4013      	ands	r3, r2
 800963e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f023 0303 	bic.w	r3, r3, #3
 8009646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68fa      	ldr	r2, [r7, #12]
 800964e:	4313      	orrs	r3, r2
 8009650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	f023 0302 	bic.w	r3, r3, #2
 8009658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	697a      	ldr	r2, [r7, #20]
 8009660:	4313      	orrs	r3, r2
 8009662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4a2d      	ldr	r2, [pc, #180]	; (800971c <TIM_OC1_SetConfig+0x10c>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d00f      	beq.n	800968c <TIM_OC1_SetConfig+0x7c>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a2c      	ldr	r2, [pc, #176]	; (8009720 <TIM_OC1_SetConfig+0x110>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d00b      	beq.n	800968c <TIM_OC1_SetConfig+0x7c>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a2b      	ldr	r2, [pc, #172]	; (8009724 <TIM_OC1_SetConfig+0x114>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d007      	beq.n	800968c <TIM_OC1_SetConfig+0x7c>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4a2a      	ldr	r2, [pc, #168]	; (8009728 <TIM_OC1_SetConfig+0x118>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d003      	beq.n	800968c <TIM_OC1_SetConfig+0x7c>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4a29      	ldr	r2, [pc, #164]	; (800972c <TIM_OC1_SetConfig+0x11c>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d10c      	bne.n	80096a6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	f023 0308 	bic.w	r3, r3, #8
 8009692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	697a      	ldr	r2, [r7, #20]
 800969a:	4313      	orrs	r3, r2
 800969c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	f023 0304 	bic.w	r3, r3, #4
 80096a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a1c      	ldr	r2, [pc, #112]	; (800971c <TIM_OC1_SetConfig+0x10c>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d00f      	beq.n	80096ce <TIM_OC1_SetConfig+0xbe>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a1b      	ldr	r2, [pc, #108]	; (8009720 <TIM_OC1_SetConfig+0x110>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d00b      	beq.n	80096ce <TIM_OC1_SetConfig+0xbe>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a1a      	ldr	r2, [pc, #104]	; (8009724 <TIM_OC1_SetConfig+0x114>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d007      	beq.n	80096ce <TIM_OC1_SetConfig+0xbe>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a19      	ldr	r2, [pc, #100]	; (8009728 <TIM_OC1_SetConfig+0x118>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d003      	beq.n	80096ce <TIM_OC1_SetConfig+0xbe>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a18      	ldr	r2, [pc, #96]	; (800972c <TIM_OC1_SetConfig+0x11c>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d111      	bne.n	80096f2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80096dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	695b      	ldr	r3, [r3, #20]
 80096e2:	693a      	ldr	r2, [r7, #16]
 80096e4:	4313      	orrs	r3, r2
 80096e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	699b      	ldr	r3, [r3, #24]
 80096ec:	693a      	ldr	r2, [r7, #16]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	693a      	ldr	r2, [r7, #16]
 80096f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	68fa      	ldr	r2, [r7, #12]
 80096fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	685a      	ldr	r2, [r3, #4]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	697a      	ldr	r2, [r7, #20]
 800970a:	621a      	str	r2, [r3, #32]
}
 800970c:	bf00      	nop
 800970e:	371c      	adds	r7, #28
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr
 8009718:	fffeff8f 	.word	0xfffeff8f
 800971c:	40010000 	.word	0x40010000
 8009720:	40010400 	.word	0x40010400
 8009724:	40014000 	.word	0x40014000
 8009728:	40014400 	.word	0x40014400
 800972c:	40014800 	.word	0x40014800

08009730 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009730:	b480      	push	{r7}
 8009732:	b087      	sub	sp, #28
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6a1b      	ldr	r3, [r3, #32]
 800973e:	f023 0210 	bic.w	r2, r3, #16
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a1b      	ldr	r3, [r3, #32]
 800974a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	699b      	ldr	r3, [r3, #24]
 8009756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	4b34      	ldr	r3, [pc, #208]	; (800982c <TIM_OC2_SetConfig+0xfc>)
 800975c:	4013      	ands	r3, r2
 800975e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009766:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	021b      	lsls	r3, r3, #8
 800976e:	68fa      	ldr	r2, [r7, #12]
 8009770:	4313      	orrs	r3, r2
 8009772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	f023 0320 	bic.w	r3, r3, #32
 800977a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	011b      	lsls	r3, r3, #4
 8009782:	697a      	ldr	r2, [r7, #20]
 8009784:	4313      	orrs	r3, r2
 8009786:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a29      	ldr	r2, [pc, #164]	; (8009830 <TIM_OC2_SetConfig+0x100>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d003      	beq.n	8009798 <TIM_OC2_SetConfig+0x68>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4a28      	ldr	r2, [pc, #160]	; (8009834 <TIM_OC2_SetConfig+0x104>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d10d      	bne.n	80097b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800979e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	011b      	lsls	r3, r3, #4
 80097a6:	697a      	ldr	r2, [r7, #20]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	4a1e      	ldr	r2, [pc, #120]	; (8009830 <TIM_OC2_SetConfig+0x100>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d00f      	beq.n	80097dc <TIM_OC2_SetConfig+0xac>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	4a1d      	ldr	r2, [pc, #116]	; (8009834 <TIM_OC2_SetConfig+0x104>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d00b      	beq.n	80097dc <TIM_OC2_SetConfig+0xac>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	4a1c      	ldr	r2, [pc, #112]	; (8009838 <TIM_OC2_SetConfig+0x108>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d007      	beq.n	80097dc <TIM_OC2_SetConfig+0xac>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	4a1b      	ldr	r2, [pc, #108]	; (800983c <TIM_OC2_SetConfig+0x10c>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d003      	beq.n	80097dc <TIM_OC2_SetConfig+0xac>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	4a1a      	ldr	r2, [pc, #104]	; (8009840 <TIM_OC2_SetConfig+0x110>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d113      	bne.n	8009804 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	695b      	ldr	r3, [r3, #20]
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	693a      	ldr	r2, [r7, #16]
 80097f4:	4313      	orrs	r3, r2
 80097f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	699b      	ldr	r3, [r3, #24]
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	693a      	ldr	r2, [r7, #16]
 8009800:	4313      	orrs	r3, r2
 8009802:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	693a      	ldr	r2, [r7, #16]
 8009808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	685a      	ldr	r2, [r3, #4]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	697a      	ldr	r2, [r7, #20]
 800981c:	621a      	str	r2, [r3, #32]
}
 800981e:	bf00      	nop
 8009820:	371c      	adds	r7, #28
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr
 800982a:	bf00      	nop
 800982c:	feff8fff 	.word	0xfeff8fff
 8009830:	40010000 	.word	0x40010000
 8009834:	40010400 	.word	0x40010400
 8009838:	40014000 	.word	0x40014000
 800983c:	40014400 	.word	0x40014400
 8009840:	40014800 	.word	0x40014800

08009844 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009844:	b480      	push	{r7}
 8009846:	b087      	sub	sp, #28
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6a1b      	ldr	r3, [r3, #32]
 8009852:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a1b      	ldr	r3, [r3, #32]
 800985e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	69db      	ldr	r3, [r3, #28]
 800986a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	4b33      	ldr	r3, [pc, #204]	; (800993c <TIM_OC3_SetConfig+0xf8>)
 8009870:	4013      	ands	r3, r2
 8009872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f023 0303 	bic.w	r3, r3, #3
 800987a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	4313      	orrs	r3, r2
 8009884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800988c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	021b      	lsls	r3, r3, #8
 8009894:	697a      	ldr	r2, [r7, #20]
 8009896:	4313      	orrs	r3, r2
 8009898:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4a28      	ldr	r2, [pc, #160]	; (8009940 <TIM_OC3_SetConfig+0xfc>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d003      	beq.n	80098aa <TIM_OC3_SetConfig+0x66>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4a27      	ldr	r2, [pc, #156]	; (8009944 <TIM_OC3_SetConfig+0x100>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d10d      	bne.n	80098c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80098b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	021b      	lsls	r3, r3, #8
 80098b8:	697a      	ldr	r2, [r7, #20]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80098c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a1d      	ldr	r2, [pc, #116]	; (8009940 <TIM_OC3_SetConfig+0xfc>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d00f      	beq.n	80098ee <TIM_OC3_SetConfig+0xaa>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a1c      	ldr	r2, [pc, #112]	; (8009944 <TIM_OC3_SetConfig+0x100>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d00b      	beq.n	80098ee <TIM_OC3_SetConfig+0xaa>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4a1b      	ldr	r2, [pc, #108]	; (8009948 <TIM_OC3_SetConfig+0x104>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d007      	beq.n	80098ee <TIM_OC3_SetConfig+0xaa>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a1a      	ldr	r2, [pc, #104]	; (800994c <TIM_OC3_SetConfig+0x108>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d003      	beq.n	80098ee <TIM_OC3_SetConfig+0xaa>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a19      	ldr	r2, [pc, #100]	; (8009950 <TIM_OC3_SetConfig+0x10c>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d113      	bne.n	8009916 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	695b      	ldr	r3, [r3, #20]
 8009902:	011b      	lsls	r3, r3, #4
 8009904:	693a      	ldr	r2, [r7, #16]
 8009906:	4313      	orrs	r3, r2
 8009908:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	011b      	lsls	r3, r3, #4
 8009910:	693a      	ldr	r2, [r7, #16]
 8009912:	4313      	orrs	r3, r2
 8009914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	693a      	ldr	r2, [r7, #16]
 800991a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	68fa      	ldr	r2, [r7, #12]
 8009920:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	685a      	ldr	r2, [r3, #4]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	697a      	ldr	r2, [r7, #20]
 800992e:	621a      	str	r2, [r3, #32]
}
 8009930:	bf00      	nop
 8009932:	371c      	adds	r7, #28
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr
 800993c:	fffeff8f 	.word	0xfffeff8f
 8009940:	40010000 	.word	0x40010000
 8009944:	40010400 	.word	0x40010400
 8009948:	40014000 	.word	0x40014000
 800994c:	40014400 	.word	0x40014400
 8009950:	40014800 	.word	0x40014800

08009954 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009954:	b480      	push	{r7}
 8009956:	b087      	sub	sp, #28
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a1b      	ldr	r3, [r3, #32]
 8009962:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6a1b      	ldr	r3, [r3, #32]
 800996e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	69db      	ldr	r3, [r3, #28]
 800997a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	4b24      	ldr	r3, [pc, #144]	; (8009a10 <TIM_OC4_SetConfig+0xbc>)
 8009980:	4013      	ands	r3, r2
 8009982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800998a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	021b      	lsls	r3, r3, #8
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	4313      	orrs	r3, r2
 8009996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800999e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	031b      	lsls	r3, r3, #12
 80099a6:	693a      	ldr	r2, [r7, #16]
 80099a8:	4313      	orrs	r3, r2
 80099aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	4a19      	ldr	r2, [pc, #100]	; (8009a14 <TIM_OC4_SetConfig+0xc0>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d00f      	beq.n	80099d4 <TIM_OC4_SetConfig+0x80>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a18      	ldr	r2, [pc, #96]	; (8009a18 <TIM_OC4_SetConfig+0xc4>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d00b      	beq.n	80099d4 <TIM_OC4_SetConfig+0x80>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a17      	ldr	r2, [pc, #92]	; (8009a1c <TIM_OC4_SetConfig+0xc8>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d007      	beq.n	80099d4 <TIM_OC4_SetConfig+0x80>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4a16      	ldr	r2, [pc, #88]	; (8009a20 <TIM_OC4_SetConfig+0xcc>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d003      	beq.n	80099d4 <TIM_OC4_SetConfig+0x80>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	4a15      	ldr	r2, [pc, #84]	; (8009a24 <TIM_OC4_SetConfig+0xd0>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d109      	bne.n	80099e8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	695b      	ldr	r3, [r3, #20]
 80099e0:	019b      	lsls	r3, r3, #6
 80099e2:	697a      	ldr	r2, [r7, #20]
 80099e4:	4313      	orrs	r3, r2
 80099e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	697a      	ldr	r2, [r7, #20]
 80099ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	685a      	ldr	r2, [r3, #4]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	693a      	ldr	r2, [r7, #16]
 8009a00:	621a      	str	r2, [r3, #32]
}
 8009a02:	bf00      	nop
 8009a04:	371c      	adds	r7, #28
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr
 8009a0e:	bf00      	nop
 8009a10:	feff8fff 	.word	0xfeff8fff
 8009a14:	40010000 	.word	0x40010000
 8009a18:	40010400 	.word	0x40010400
 8009a1c:	40014000 	.word	0x40014000
 8009a20:	40014400 	.word	0x40014400
 8009a24:	40014800 	.word	0x40014800

08009a28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b087      	sub	sp, #28
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6a1b      	ldr	r3, [r3, #32]
 8009a36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a1b      	ldr	r3, [r3, #32]
 8009a42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009a50:	68fa      	ldr	r2, [r7, #12]
 8009a52:	4b21      	ldr	r3, [pc, #132]	; (8009ad8 <TIM_OC5_SetConfig+0xb0>)
 8009a54:	4013      	ands	r3, r2
 8009a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009a68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	041b      	lsls	r3, r3, #16
 8009a70:	693a      	ldr	r2, [r7, #16]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	4a18      	ldr	r2, [pc, #96]	; (8009adc <TIM_OC5_SetConfig+0xb4>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d00f      	beq.n	8009a9e <TIM_OC5_SetConfig+0x76>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	4a17      	ldr	r2, [pc, #92]	; (8009ae0 <TIM_OC5_SetConfig+0xb8>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d00b      	beq.n	8009a9e <TIM_OC5_SetConfig+0x76>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	4a16      	ldr	r2, [pc, #88]	; (8009ae4 <TIM_OC5_SetConfig+0xbc>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d007      	beq.n	8009a9e <TIM_OC5_SetConfig+0x76>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	4a15      	ldr	r2, [pc, #84]	; (8009ae8 <TIM_OC5_SetConfig+0xc0>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d003      	beq.n	8009a9e <TIM_OC5_SetConfig+0x76>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4a14      	ldr	r2, [pc, #80]	; (8009aec <TIM_OC5_SetConfig+0xc4>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d109      	bne.n	8009ab2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009aa4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	695b      	ldr	r3, [r3, #20]
 8009aaa:	021b      	lsls	r3, r3, #8
 8009aac:	697a      	ldr	r2, [r7, #20]
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	697a      	ldr	r2, [r7, #20]
 8009ab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	685a      	ldr	r2, [r3, #4]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	693a      	ldr	r2, [r7, #16]
 8009aca:	621a      	str	r2, [r3, #32]
}
 8009acc:	bf00      	nop
 8009ace:	371c      	adds	r7, #28
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr
 8009ad8:	fffeff8f 	.word	0xfffeff8f
 8009adc:	40010000 	.word	0x40010000
 8009ae0:	40010400 	.word	0x40010400
 8009ae4:	40014000 	.word	0x40014000
 8009ae8:	40014400 	.word	0x40014400
 8009aec:	40014800 	.word	0x40014800

08009af0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b087      	sub	sp, #28
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a1b      	ldr	r3, [r3, #32]
 8009afe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a1b      	ldr	r3, [r3, #32]
 8009b0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	4b22      	ldr	r3, [pc, #136]	; (8009ba4 <TIM_OC6_SetConfig+0xb4>)
 8009b1c:	4013      	ands	r3, r2
 8009b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	021b      	lsls	r3, r3, #8
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	051b      	lsls	r3, r3, #20
 8009b3a:	693a      	ldr	r2, [r7, #16]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4a19      	ldr	r2, [pc, #100]	; (8009ba8 <TIM_OC6_SetConfig+0xb8>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d00f      	beq.n	8009b68 <TIM_OC6_SetConfig+0x78>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a18      	ldr	r2, [pc, #96]	; (8009bac <TIM_OC6_SetConfig+0xbc>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d00b      	beq.n	8009b68 <TIM_OC6_SetConfig+0x78>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4a17      	ldr	r2, [pc, #92]	; (8009bb0 <TIM_OC6_SetConfig+0xc0>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d007      	beq.n	8009b68 <TIM_OC6_SetConfig+0x78>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a16      	ldr	r2, [pc, #88]	; (8009bb4 <TIM_OC6_SetConfig+0xc4>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d003      	beq.n	8009b68 <TIM_OC6_SetConfig+0x78>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a15      	ldr	r2, [pc, #84]	; (8009bb8 <TIM_OC6_SetConfig+0xc8>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d109      	bne.n	8009b7c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	695b      	ldr	r3, [r3, #20]
 8009b74:	029b      	lsls	r3, r3, #10
 8009b76:	697a      	ldr	r2, [r7, #20]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	697a      	ldr	r2, [r7, #20]
 8009b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	685a      	ldr	r2, [r3, #4]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	693a      	ldr	r2, [r7, #16]
 8009b94:	621a      	str	r2, [r3, #32]
}
 8009b96:	bf00      	nop
 8009b98:	371c      	adds	r7, #28
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	feff8fff 	.word	0xfeff8fff
 8009ba8:	40010000 	.word	0x40010000
 8009bac:	40010400 	.word	0x40010400
 8009bb0:	40014000 	.word	0x40014000
 8009bb4:	40014400 	.word	0x40014400
 8009bb8:	40014800 	.word	0x40014800

08009bbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b087      	sub	sp, #28
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6a1b      	ldr	r3, [r3, #32]
 8009bcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6a1b      	ldr	r3, [r3, #32]
 8009bd2:	f023 0201 	bic.w	r2, r3, #1
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	699b      	ldr	r3, [r3, #24]
 8009bde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	011b      	lsls	r3, r3, #4
 8009bec:	693a      	ldr	r2, [r7, #16]
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	f023 030a 	bic.w	r3, r3, #10
 8009bf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009bfa:	697a      	ldr	r2, [r7, #20]
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	693a      	ldr	r2, [r7, #16]
 8009c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	697a      	ldr	r2, [r7, #20]
 8009c0c:	621a      	str	r2, [r3, #32]
}
 8009c0e:	bf00      	nop
 8009c10:	371c      	adds	r7, #28
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr

08009c1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c1a:	b480      	push	{r7}
 8009c1c:	b087      	sub	sp, #28
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	60f8      	str	r0, [r7, #12]
 8009c22:	60b9      	str	r1, [r7, #8]
 8009c24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6a1b      	ldr	r3, [r3, #32]
 8009c2a:	f023 0210 	bic.w	r2, r3, #16
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	699b      	ldr	r3, [r3, #24]
 8009c36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	6a1b      	ldr	r3, [r3, #32]
 8009c3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	031b      	lsls	r3, r3, #12
 8009c4a:	697a      	ldr	r2, [r7, #20]
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	011b      	lsls	r3, r3, #4
 8009c5c:	693a      	ldr	r2, [r7, #16]
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	697a      	ldr	r2, [r7, #20]
 8009c66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	693a      	ldr	r2, [r7, #16]
 8009c6c:	621a      	str	r2, [r3, #32]
}
 8009c6e:	bf00      	nop
 8009c70:	371c      	adds	r7, #28
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr
	...

08009c7c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	4b09      	ldr	r3, [pc, #36]	; (8009cb4 <TIM_ITRx_SetConfig+0x38>)
 8009c90:	4013      	ands	r3, r2
 8009c92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009c94:	683a      	ldr	r2, [r7, #0]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	f043 0307 	orr.w	r3, r3, #7
 8009c9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	68fa      	ldr	r2, [r7, #12]
 8009ca4:	609a      	str	r2, [r3, #8]
}
 8009ca6:	bf00      	nop
 8009ca8:	3714      	adds	r7, #20
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr
 8009cb2:	bf00      	nop
 8009cb4:	ffcfff8f 	.word	0xffcfff8f

08009cb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b087      	sub	sp, #28
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	607a      	str	r2, [r7, #4]
 8009cc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009cd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	021a      	lsls	r2, r3, #8
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	431a      	orrs	r2, r3
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	697a      	ldr	r2, [r7, #20]
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	697a      	ldr	r2, [r7, #20]
 8009cea:	609a      	str	r2, [r3, #8]
}
 8009cec:	bf00      	nop
 8009cee:	371c      	adds	r7, #28
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr

08009cf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b087      	sub	sp, #28
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	f003 031f 	and.w	r3, r3, #31
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6a1a      	ldr	r2, [r3, #32]
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	43db      	mvns	r3, r3
 8009d1a:	401a      	ands	r2, r3
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6a1a      	ldr	r2, [r3, #32]
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	f003 031f 	and.w	r3, r3, #31
 8009d2a:	6879      	ldr	r1, [r7, #4]
 8009d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8009d30:	431a      	orrs	r2, r3
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	621a      	str	r2, [r3, #32]
}
 8009d36:	bf00      	nop
 8009d38:	371c      	adds	r7, #28
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr
	...

08009d44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b085      	sub	sp, #20
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d101      	bne.n	8009d5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d58:	2302      	movs	r3, #2
 8009d5a:	e06d      	b.n	8009e38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2202      	movs	r2, #2
 8009d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	689b      	ldr	r3, [r3, #8]
 8009d7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a30      	ldr	r2, [pc, #192]	; (8009e44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d004      	beq.n	8009d90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a2f      	ldr	r2, [pc, #188]	; (8009e48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d108      	bne.n	8009da2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009d96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009da8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	4313      	orrs	r3, r2
 8009db2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a20      	ldr	r2, [pc, #128]	; (8009e44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d022      	beq.n	8009e0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dce:	d01d      	beq.n	8009e0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a1d      	ldr	r2, [pc, #116]	; (8009e4c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d018      	beq.n	8009e0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a1c      	ldr	r2, [pc, #112]	; (8009e50 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d013      	beq.n	8009e0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a1a      	ldr	r2, [pc, #104]	; (8009e54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d00e      	beq.n	8009e0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a15      	ldr	r2, [pc, #84]	; (8009e48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d009      	beq.n	8009e0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a16      	ldr	r2, [pc, #88]	; (8009e58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d004      	beq.n	8009e0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a15      	ldr	r2, [pc, #84]	; (8009e5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d10c      	bne.n	8009e26 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	68ba      	ldr	r2, [r7, #8]
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	68ba      	ldr	r2, [r7, #8]
 8009e24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2201      	movs	r2, #1
 8009e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3714      	adds	r7, #20
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr
 8009e44:	40010000 	.word	0x40010000
 8009e48:	40010400 	.word	0x40010400
 8009e4c:	40000400 	.word	0x40000400
 8009e50:	40000800 	.word	0x40000800
 8009e54:	40000c00 	.word	0x40000c00
 8009e58:	40001800 	.word	0x40001800
 8009e5c:	40014000 	.word	0x40014000

08009e60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e68:	bf00      	nop
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e7c:	bf00      	nop
 8009e7e:	370c      	adds	r7, #12
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009e90:	bf00      	nop
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d101      	bne.n	8009eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e042      	b.n	8009f34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d106      	bne.n	8009ec6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f7f8 fb29 	bl	8002518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2224      	movs	r2, #36	; 0x24
 8009eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f022 0201 	bic.w	r2, r2, #1
 8009edc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 f8c2 	bl	800a068 <UART_SetConfig>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	d101      	bne.n	8009eee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009eea:	2301      	movs	r3, #1
 8009eec:	e022      	b.n	8009f34 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d002      	beq.n	8009efc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 fe16 	bl	800ab28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	685a      	ldr	r2, [r3, #4]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	689a      	ldr	r2, [r3, #8]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f042 0201 	orr.w	r2, r2, #1
 8009f2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 fe9d 	bl	800ac6c <UART_CheckIdleState>
 8009f32:	4603      	mov	r3, r0
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3708      	adds	r7, #8
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b08a      	sub	sp, #40	; 0x28
 8009f40:	af02      	add	r7, sp, #8
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	603b      	str	r3, [r7, #0]
 8009f48:	4613      	mov	r3, r2
 8009f4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f52:	2b20      	cmp	r3, #32
 8009f54:	f040 8083 	bne.w	800a05e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d002      	beq.n	8009f64 <HAL_UART_Transmit+0x28>
 8009f5e:	88fb      	ldrh	r3, [r7, #6]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d101      	bne.n	8009f68 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009f64:	2301      	movs	r3, #1
 8009f66:	e07b      	b.n	800a060 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d101      	bne.n	8009f76 <HAL_UART_Transmit+0x3a>
 8009f72:	2302      	movs	r3, #2
 8009f74:	e074      	b.n	800a060 <HAL_UART_Transmit+0x124>
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2200      	movs	r2, #0
 8009f82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2221      	movs	r2, #33	; 0x21
 8009f8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009f8e:	f7f8 fd4f 	bl	8002a30 <HAL_GetTick>
 8009f92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	88fa      	ldrh	r2, [r7, #6]
 8009f98:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	88fa      	ldrh	r2, [r7, #6]
 8009fa0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fac:	d108      	bne.n	8009fc0 <HAL_UART_Transmit+0x84>
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d104      	bne.n	8009fc0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	61bb      	str	r3, [r7, #24]
 8009fbe:	e003      	b.n	8009fc8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009fd0:	e02c      	b.n	800a02c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	9300      	str	r3, [sp, #0]
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	2180      	movs	r1, #128	; 0x80
 8009fdc:	68f8      	ldr	r0, [r7, #12]
 8009fde:	f000 fe90 	bl	800ad02 <UART_WaitOnFlagUntilTimeout>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d001      	beq.n	8009fec <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009fe8:	2303      	movs	r3, #3
 8009fea:	e039      	b.n	800a060 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009fec:	69fb      	ldr	r3, [r7, #28]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d10b      	bne.n	800a00a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	881b      	ldrh	r3, [r3, #0]
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a000:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a002:	69bb      	ldr	r3, [r7, #24]
 800a004:	3302      	adds	r3, #2
 800a006:	61bb      	str	r3, [r7, #24]
 800a008:	e007      	b.n	800a01a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a00a:	69fb      	ldr	r3, [r7, #28]
 800a00c:	781a      	ldrb	r2, [r3, #0]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	3301      	adds	r3, #1
 800a018:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a020:	b29b      	uxth	r3, r3
 800a022:	3b01      	subs	r3, #1
 800a024:	b29a      	uxth	r2, r3
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a032:	b29b      	uxth	r3, r3
 800a034:	2b00      	cmp	r3, #0
 800a036:	d1cc      	bne.n	8009fd2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	9300      	str	r3, [sp, #0]
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	2200      	movs	r2, #0
 800a040:	2140      	movs	r1, #64	; 0x40
 800a042:	68f8      	ldr	r0, [r7, #12]
 800a044:	f000 fe5d 	bl	800ad02 <UART_WaitOnFlagUntilTimeout>
 800a048:	4603      	mov	r3, r0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d001      	beq.n	800a052 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a04e:	2303      	movs	r3, #3
 800a050:	e006      	b.n	800a060 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2220      	movs	r2, #32
 800a056:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a05a:	2300      	movs	r3, #0
 800a05c:	e000      	b.n	800a060 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a05e:	2302      	movs	r3, #2
  }
}
 800a060:	4618      	mov	r0, r3
 800a062:	3720      	adds	r7, #32
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a068:	b5b0      	push	{r4, r5, r7, lr}
 800a06a:	b08e      	sub	sp, #56	; 0x38
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a070:	2300      	movs	r3, #0
 800a072:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	689a      	ldr	r2, [r3, #8]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	691b      	ldr	r3, [r3, #16]
 800a07e:	431a      	orrs	r2, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	695b      	ldr	r3, [r3, #20]
 800a084:	431a      	orrs	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	69db      	ldr	r3, [r3, #28]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	4bbf      	ldr	r3, [pc, #764]	; (800a394 <UART_SetConfig+0x32c>)
 800a096:	4013      	ands	r3, r2
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	6812      	ldr	r2, [r2, #0]
 800a09c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a09e:	430b      	orrs	r3, r1
 800a0a0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	68da      	ldr	r2, [r3, #12]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	430a      	orrs	r2, r1
 800a0b6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	699b      	ldr	r3, [r3, #24]
 800a0bc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4ab5      	ldr	r2, [pc, #724]	; (800a398 <UART_SetConfig+0x330>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d004      	beq.n	800a0d2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6a1b      	ldr	r3, [r3, #32]
 800a0cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	689a      	ldr	r2, [r3, #8]
 800a0d8:	4bb0      	ldr	r3, [pc, #704]	; (800a39c <UART_SetConfig+0x334>)
 800a0da:	4013      	ands	r3, r2
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	6812      	ldr	r2, [r2, #0]
 800a0e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a0e2:	430b      	orrs	r3, r1
 800a0e4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ec:	f023 010f 	bic.w	r1, r3, #15
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	430a      	orrs	r2, r1
 800a0fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4aa7      	ldr	r2, [pc, #668]	; (800a3a0 <UART_SetConfig+0x338>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d176      	bne.n	800a1f4 <UART_SetConfig+0x18c>
 800a106:	4ba7      	ldr	r3, [pc, #668]	; (800a3a4 <UART_SetConfig+0x33c>)
 800a108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a10a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a10e:	2b28      	cmp	r3, #40	; 0x28
 800a110:	d86c      	bhi.n	800a1ec <UART_SetConfig+0x184>
 800a112:	a201      	add	r2, pc, #4	; (adr r2, 800a118 <UART_SetConfig+0xb0>)
 800a114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a118:	0800a1bd 	.word	0x0800a1bd
 800a11c:	0800a1ed 	.word	0x0800a1ed
 800a120:	0800a1ed 	.word	0x0800a1ed
 800a124:	0800a1ed 	.word	0x0800a1ed
 800a128:	0800a1ed 	.word	0x0800a1ed
 800a12c:	0800a1ed 	.word	0x0800a1ed
 800a130:	0800a1ed 	.word	0x0800a1ed
 800a134:	0800a1ed 	.word	0x0800a1ed
 800a138:	0800a1c5 	.word	0x0800a1c5
 800a13c:	0800a1ed 	.word	0x0800a1ed
 800a140:	0800a1ed 	.word	0x0800a1ed
 800a144:	0800a1ed 	.word	0x0800a1ed
 800a148:	0800a1ed 	.word	0x0800a1ed
 800a14c:	0800a1ed 	.word	0x0800a1ed
 800a150:	0800a1ed 	.word	0x0800a1ed
 800a154:	0800a1ed 	.word	0x0800a1ed
 800a158:	0800a1cd 	.word	0x0800a1cd
 800a15c:	0800a1ed 	.word	0x0800a1ed
 800a160:	0800a1ed 	.word	0x0800a1ed
 800a164:	0800a1ed 	.word	0x0800a1ed
 800a168:	0800a1ed 	.word	0x0800a1ed
 800a16c:	0800a1ed 	.word	0x0800a1ed
 800a170:	0800a1ed 	.word	0x0800a1ed
 800a174:	0800a1ed 	.word	0x0800a1ed
 800a178:	0800a1d5 	.word	0x0800a1d5
 800a17c:	0800a1ed 	.word	0x0800a1ed
 800a180:	0800a1ed 	.word	0x0800a1ed
 800a184:	0800a1ed 	.word	0x0800a1ed
 800a188:	0800a1ed 	.word	0x0800a1ed
 800a18c:	0800a1ed 	.word	0x0800a1ed
 800a190:	0800a1ed 	.word	0x0800a1ed
 800a194:	0800a1ed 	.word	0x0800a1ed
 800a198:	0800a1dd 	.word	0x0800a1dd
 800a19c:	0800a1ed 	.word	0x0800a1ed
 800a1a0:	0800a1ed 	.word	0x0800a1ed
 800a1a4:	0800a1ed 	.word	0x0800a1ed
 800a1a8:	0800a1ed 	.word	0x0800a1ed
 800a1ac:	0800a1ed 	.word	0x0800a1ed
 800a1b0:	0800a1ed 	.word	0x0800a1ed
 800a1b4:	0800a1ed 	.word	0x0800a1ed
 800a1b8:	0800a1e5 	.word	0x0800a1e5
 800a1bc:	2301      	movs	r3, #1
 800a1be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1c2:	e222      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a1c4:	2304      	movs	r3, #4
 800a1c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ca:	e21e      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a1cc:	2308      	movs	r3, #8
 800a1ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1d2:	e21a      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a1d4:	2310      	movs	r3, #16
 800a1d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1da:	e216      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a1dc:	2320      	movs	r3, #32
 800a1de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1e2:	e212      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a1e4:	2340      	movs	r3, #64	; 0x40
 800a1e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ea:	e20e      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a1ec:	2380      	movs	r3, #128	; 0x80
 800a1ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1f2:	e20a      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a6b      	ldr	r2, [pc, #428]	; (800a3a8 <UART_SetConfig+0x340>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d130      	bne.n	800a260 <UART_SetConfig+0x1f8>
 800a1fe:	4b69      	ldr	r3, [pc, #420]	; (800a3a4 <UART_SetConfig+0x33c>)
 800a200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a202:	f003 0307 	and.w	r3, r3, #7
 800a206:	2b05      	cmp	r3, #5
 800a208:	d826      	bhi.n	800a258 <UART_SetConfig+0x1f0>
 800a20a:	a201      	add	r2, pc, #4	; (adr r2, 800a210 <UART_SetConfig+0x1a8>)
 800a20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a210:	0800a229 	.word	0x0800a229
 800a214:	0800a231 	.word	0x0800a231
 800a218:	0800a239 	.word	0x0800a239
 800a21c:	0800a241 	.word	0x0800a241
 800a220:	0800a249 	.word	0x0800a249
 800a224:	0800a251 	.word	0x0800a251
 800a228:	2300      	movs	r3, #0
 800a22a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a22e:	e1ec      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a230:	2304      	movs	r3, #4
 800a232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a236:	e1e8      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a238:	2308      	movs	r3, #8
 800a23a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a23e:	e1e4      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a240:	2310      	movs	r3, #16
 800a242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a246:	e1e0      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a248:	2320      	movs	r3, #32
 800a24a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a24e:	e1dc      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a250:	2340      	movs	r3, #64	; 0x40
 800a252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a256:	e1d8      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a258:	2380      	movs	r3, #128	; 0x80
 800a25a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a25e:	e1d4      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a51      	ldr	r2, [pc, #324]	; (800a3ac <UART_SetConfig+0x344>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d130      	bne.n	800a2cc <UART_SetConfig+0x264>
 800a26a:	4b4e      	ldr	r3, [pc, #312]	; (800a3a4 <UART_SetConfig+0x33c>)
 800a26c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a26e:	f003 0307 	and.w	r3, r3, #7
 800a272:	2b05      	cmp	r3, #5
 800a274:	d826      	bhi.n	800a2c4 <UART_SetConfig+0x25c>
 800a276:	a201      	add	r2, pc, #4	; (adr r2, 800a27c <UART_SetConfig+0x214>)
 800a278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a27c:	0800a295 	.word	0x0800a295
 800a280:	0800a29d 	.word	0x0800a29d
 800a284:	0800a2a5 	.word	0x0800a2a5
 800a288:	0800a2ad 	.word	0x0800a2ad
 800a28c:	0800a2b5 	.word	0x0800a2b5
 800a290:	0800a2bd 	.word	0x0800a2bd
 800a294:	2300      	movs	r3, #0
 800a296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a29a:	e1b6      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a29c:	2304      	movs	r3, #4
 800a29e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2a2:	e1b2      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a2a4:	2308      	movs	r3, #8
 800a2a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2aa:	e1ae      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a2ac:	2310      	movs	r3, #16
 800a2ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2b2:	e1aa      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a2b4:	2320      	movs	r3, #32
 800a2b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ba:	e1a6      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a2bc:	2340      	movs	r3, #64	; 0x40
 800a2be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2c2:	e1a2      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a2c4:	2380      	movs	r3, #128	; 0x80
 800a2c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ca:	e19e      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a37      	ldr	r2, [pc, #220]	; (800a3b0 <UART_SetConfig+0x348>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d130      	bne.n	800a338 <UART_SetConfig+0x2d0>
 800a2d6:	4b33      	ldr	r3, [pc, #204]	; (800a3a4 <UART_SetConfig+0x33c>)
 800a2d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2da:	f003 0307 	and.w	r3, r3, #7
 800a2de:	2b05      	cmp	r3, #5
 800a2e0:	d826      	bhi.n	800a330 <UART_SetConfig+0x2c8>
 800a2e2:	a201      	add	r2, pc, #4	; (adr r2, 800a2e8 <UART_SetConfig+0x280>)
 800a2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e8:	0800a301 	.word	0x0800a301
 800a2ec:	0800a309 	.word	0x0800a309
 800a2f0:	0800a311 	.word	0x0800a311
 800a2f4:	0800a319 	.word	0x0800a319
 800a2f8:	0800a321 	.word	0x0800a321
 800a2fc:	0800a329 	.word	0x0800a329
 800a300:	2300      	movs	r3, #0
 800a302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a306:	e180      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a308:	2304      	movs	r3, #4
 800a30a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a30e:	e17c      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a310:	2308      	movs	r3, #8
 800a312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a316:	e178      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a318:	2310      	movs	r3, #16
 800a31a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a31e:	e174      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a320:	2320      	movs	r3, #32
 800a322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a326:	e170      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a328:	2340      	movs	r3, #64	; 0x40
 800a32a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a32e:	e16c      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a330:	2380      	movs	r3, #128	; 0x80
 800a332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a336:	e168      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a1d      	ldr	r2, [pc, #116]	; (800a3b4 <UART_SetConfig+0x34c>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d142      	bne.n	800a3c8 <UART_SetConfig+0x360>
 800a342:	4b18      	ldr	r3, [pc, #96]	; (800a3a4 <UART_SetConfig+0x33c>)
 800a344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a346:	f003 0307 	and.w	r3, r3, #7
 800a34a:	2b05      	cmp	r3, #5
 800a34c:	d838      	bhi.n	800a3c0 <UART_SetConfig+0x358>
 800a34e:	a201      	add	r2, pc, #4	; (adr r2, 800a354 <UART_SetConfig+0x2ec>)
 800a350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a354:	0800a36d 	.word	0x0800a36d
 800a358:	0800a375 	.word	0x0800a375
 800a35c:	0800a37d 	.word	0x0800a37d
 800a360:	0800a385 	.word	0x0800a385
 800a364:	0800a38d 	.word	0x0800a38d
 800a368:	0800a3b9 	.word	0x0800a3b9
 800a36c:	2300      	movs	r3, #0
 800a36e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a372:	e14a      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a374:	2304      	movs	r3, #4
 800a376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a37a:	e146      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a37c:	2308      	movs	r3, #8
 800a37e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a382:	e142      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a384:	2310      	movs	r3, #16
 800a386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a38a:	e13e      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a38c:	2320      	movs	r3, #32
 800a38e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a392:	e13a      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a394:	cfff69f3 	.word	0xcfff69f3
 800a398:	58000c00 	.word	0x58000c00
 800a39c:	11fff4ff 	.word	0x11fff4ff
 800a3a0:	40011000 	.word	0x40011000
 800a3a4:	58024400 	.word	0x58024400
 800a3a8:	40004400 	.word	0x40004400
 800a3ac:	40004800 	.word	0x40004800
 800a3b0:	40004c00 	.word	0x40004c00
 800a3b4:	40005000 	.word	0x40005000
 800a3b8:	2340      	movs	r3, #64	; 0x40
 800a3ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3be:	e124      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a3c0:	2380      	movs	r3, #128	; 0x80
 800a3c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3c6:	e120      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4acc      	ldr	r2, [pc, #816]	; (800a700 <UART_SetConfig+0x698>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d176      	bne.n	800a4c0 <UART_SetConfig+0x458>
 800a3d2:	4bcc      	ldr	r3, [pc, #816]	; (800a704 <UART_SetConfig+0x69c>)
 800a3d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3da:	2b28      	cmp	r3, #40	; 0x28
 800a3dc:	d86c      	bhi.n	800a4b8 <UART_SetConfig+0x450>
 800a3de:	a201      	add	r2, pc, #4	; (adr r2, 800a3e4 <UART_SetConfig+0x37c>)
 800a3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e4:	0800a489 	.word	0x0800a489
 800a3e8:	0800a4b9 	.word	0x0800a4b9
 800a3ec:	0800a4b9 	.word	0x0800a4b9
 800a3f0:	0800a4b9 	.word	0x0800a4b9
 800a3f4:	0800a4b9 	.word	0x0800a4b9
 800a3f8:	0800a4b9 	.word	0x0800a4b9
 800a3fc:	0800a4b9 	.word	0x0800a4b9
 800a400:	0800a4b9 	.word	0x0800a4b9
 800a404:	0800a491 	.word	0x0800a491
 800a408:	0800a4b9 	.word	0x0800a4b9
 800a40c:	0800a4b9 	.word	0x0800a4b9
 800a410:	0800a4b9 	.word	0x0800a4b9
 800a414:	0800a4b9 	.word	0x0800a4b9
 800a418:	0800a4b9 	.word	0x0800a4b9
 800a41c:	0800a4b9 	.word	0x0800a4b9
 800a420:	0800a4b9 	.word	0x0800a4b9
 800a424:	0800a499 	.word	0x0800a499
 800a428:	0800a4b9 	.word	0x0800a4b9
 800a42c:	0800a4b9 	.word	0x0800a4b9
 800a430:	0800a4b9 	.word	0x0800a4b9
 800a434:	0800a4b9 	.word	0x0800a4b9
 800a438:	0800a4b9 	.word	0x0800a4b9
 800a43c:	0800a4b9 	.word	0x0800a4b9
 800a440:	0800a4b9 	.word	0x0800a4b9
 800a444:	0800a4a1 	.word	0x0800a4a1
 800a448:	0800a4b9 	.word	0x0800a4b9
 800a44c:	0800a4b9 	.word	0x0800a4b9
 800a450:	0800a4b9 	.word	0x0800a4b9
 800a454:	0800a4b9 	.word	0x0800a4b9
 800a458:	0800a4b9 	.word	0x0800a4b9
 800a45c:	0800a4b9 	.word	0x0800a4b9
 800a460:	0800a4b9 	.word	0x0800a4b9
 800a464:	0800a4a9 	.word	0x0800a4a9
 800a468:	0800a4b9 	.word	0x0800a4b9
 800a46c:	0800a4b9 	.word	0x0800a4b9
 800a470:	0800a4b9 	.word	0x0800a4b9
 800a474:	0800a4b9 	.word	0x0800a4b9
 800a478:	0800a4b9 	.word	0x0800a4b9
 800a47c:	0800a4b9 	.word	0x0800a4b9
 800a480:	0800a4b9 	.word	0x0800a4b9
 800a484:	0800a4b1 	.word	0x0800a4b1
 800a488:	2301      	movs	r3, #1
 800a48a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a48e:	e0bc      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a490:	2304      	movs	r3, #4
 800a492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a496:	e0b8      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a498:	2308      	movs	r3, #8
 800a49a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a49e:	e0b4      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a4a0:	2310      	movs	r3, #16
 800a4a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4a6:	e0b0      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a4a8:	2320      	movs	r3, #32
 800a4aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ae:	e0ac      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a4b0:	2340      	movs	r3, #64	; 0x40
 800a4b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4b6:	e0a8      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a4b8:	2380      	movs	r3, #128	; 0x80
 800a4ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4be:	e0a4      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a90      	ldr	r2, [pc, #576]	; (800a708 <UART_SetConfig+0x6a0>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d130      	bne.n	800a52c <UART_SetConfig+0x4c4>
 800a4ca:	4b8e      	ldr	r3, [pc, #568]	; (800a704 <UART_SetConfig+0x69c>)
 800a4cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ce:	f003 0307 	and.w	r3, r3, #7
 800a4d2:	2b05      	cmp	r3, #5
 800a4d4:	d826      	bhi.n	800a524 <UART_SetConfig+0x4bc>
 800a4d6:	a201      	add	r2, pc, #4	; (adr r2, 800a4dc <UART_SetConfig+0x474>)
 800a4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4dc:	0800a4f5 	.word	0x0800a4f5
 800a4e0:	0800a4fd 	.word	0x0800a4fd
 800a4e4:	0800a505 	.word	0x0800a505
 800a4e8:	0800a50d 	.word	0x0800a50d
 800a4ec:	0800a515 	.word	0x0800a515
 800a4f0:	0800a51d 	.word	0x0800a51d
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4fa:	e086      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a4fc:	2304      	movs	r3, #4
 800a4fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a502:	e082      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a504:	2308      	movs	r3, #8
 800a506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a50a:	e07e      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a50c:	2310      	movs	r3, #16
 800a50e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a512:	e07a      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a514:	2320      	movs	r3, #32
 800a516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a51a:	e076      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a51c:	2340      	movs	r3, #64	; 0x40
 800a51e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a522:	e072      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a524:	2380      	movs	r3, #128	; 0x80
 800a526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a52a:	e06e      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a76      	ldr	r2, [pc, #472]	; (800a70c <UART_SetConfig+0x6a4>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d130      	bne.n	800a598 <UART_SetConfig+0x530>
 800a536:	4b73      	ldr	r3, [pc, #460]	; (800a704 <UART_SetConfig+0x69c>)
 800a538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a53a:	f003 0307 	and.w	r3, r3, #7
 800a53e:	2b05      	cmp	r3, #5
 800a540:	d826      	bhi.n	800a590 <UART_SetConfig+0x528>
 800a542:	a201      	add	r2, pc, #4	; (adr r2, 800a548 <UART_SetConfig+0x4e0>)
 800a544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a548:	0800a561 	.word	0x0800a561
 800a54c:	0800a569 	.word	0x0800a569
 800a550:	0800a571 	.word	0x0800a571
 800a554:	0800a579 	.word	0x0800a579
 800a558:	0800a581 	.word	0x0800a581
 800a55c:	0800a589 	.word	0x0800a589
 800a560:	2300      	movs	r3, #0
 800a562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a566:	e050      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a568:	2304      	movs	r3, #4
 800a56a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a56e:	e04c      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a570:	2308      	movs	r3, #8
 800a572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a576:	e048      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a578:	2310      	movs	r3, #16
 800a57a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a57e:	e044      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a580:	2320      	movs	r3, #32
 800a582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a586:	e040      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a588:	2340      	movs	r3, #64	; 0x40
 800a58a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a58e:	e03c      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a590:	2380      	movs	r3, #128	; 0x80
 800a592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a596:	e038      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a5c      	ldr	r2, [pc, #368]	; (800a710 <UART_SetConfig+0x6a8>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d130      	bne.n	800a604 <UART_SetConfig+0x59c>
 800a5a2:	4b58      	ldr	r3, [pc, #352]	; (800a704 <UART_SetConfig+0x69c>)
 800a5a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5a6:	f003 0307 	and.w	r3, r3, #7
 800a5aa:	2b05      	cmp	r3, #5
 800a5ac:	d826      	bhi.n	800a5fc <UART_SetConfig+0x594>
 800a5ae:	a201      	add	r2, pc, #4	; (adr r2, 800a5b4 <UART_SetConfig+0x54c>)
 800a5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b4:	0800a5cd 	.word	0x0800a5cd
 800a5b8:	0800a5d5 	.word	0x0800a5d5
 800a5bc:	0800a5dd 	.word	0x0800a5dd
 800a5c0:	0800a5e5 	.word	0x0800a5e5
 800a5c4:	0800a5ed 	.word	0x0800a5ed
 800a5c8:	0800a5f5 	.word	0x0800a5f5
 800a5cc:	2302      	movs	r3, #2
 800a5ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5d2:	e01a      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a5d4:	2304      	movs	r3, #4
 800a5d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5da:	e016      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a5dc:	2308      	movs	r3, #8
 800a5de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5e2:	e012      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a5e4:	2310      	movs	r3, #16
 800a5e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ea:	e00e      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a5ec:	2320      	movs	r3, #32
 800a5ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5f2:	e00a      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a5f4:	2340      	movs	r3, #64	; 0x40
 800a5f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5fa:	e006      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a5fc:	2380      	movs	r3, #128	; 0x80
 800a5fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a602:	e002      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a604:	2380      	movs	r3, #128	; 0x80
 800a606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4a40      	ldr	r2, [pc, #256]	; (800a710 <UART_SetConfig+0x6a8>)
 800a610:	4293      	cmp	r3, r2
 800a612:	f040 80ef 	bne.w	800a7f4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a616:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a61a:	2b20      	cmp	r3, #32
 800a61c:	dc46      	bgt.n	800a6ac <UART_SetConfig+0x644>
 800a61e:	2b02      	cmp	r3, #2
 800a620:	f2c0 8081 	blt.w	800a726 <UART_SetConfig+0x6be>
 800a624:	3b02      	subs	r3, #2
 800a626:	2b1e      	cmp	r3, #30
 800a628:	d87d      	bhi.n	800a726 <UART_SetConfig+0x6be>
 800a62a:	a201      	add	r2, pc, #4	; (adr r2, 800a630 <UART_SetConfig+0x5c8>)
 800a62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a630:	0800a6b3 	.word	0x0800a6b3
 800a634:	0800a727 	.word	0x0800a727
 800a638:	0800a6bb 	.word	0x0800a6bb
 800a63c:	0800a727 	.word	0x0800a727
 800a640:	0800a727 	.word	0x0800a727
 800a644:	0800a727 	.word	0x0800a727
 800a648:	0800a6cb 	.word	0x0800a6cb
 800a64c:	0800a727 	.word	0x0800a727
 800a650:	0800a727 	.word	0x0800a727
 800a654:	0800a727 	.word	0x0800a727
 800a658:	0800a727 	.word	0x0800a727
 800a65c:	0800a727 	.word	0x0800a727
 800a660:	0800a727 	.word	0x0800a727
 800a664:	0800a727 	.word	0x0800a727
 800a668:	0800a6db 	.word	0x0800a6db
 800a66c:	0800a727 	.word	0x0800a727
 800a670:	0800a727 	.word	0x0800a727
 800a674:	0800a727 	.word	0x0800a727
 800a678:	0800a727 	.word	0x0800a727
 800a67c:	0800a727 	.word	0x0800a727
 800a680:	0800a727 	.word	0x0800a727
 800a684:	0800a727 	.word	0x0800a727
 800a688:	0800a727 	.word	0x0800a727
 800a68c:	0800a727 	.word	0x0800a727
 800a690:	0800a727 	.word	0x0800a727
 800a694:	0800a727 	.word	0x0800a727
 800a698:	0800a727 	.word	0x0800a727
 800a69c:	0800a727 	.word	0x0800a727
 800a6a0:	0800a727 	.word	0x0800a727
 800a6a4:	0800a727 	.word	0x0800a727
 800a6a8:	0800a719 	.word	0x0800a719
 800a6ac:	2b40      	cmp	r3, #64	; 0x40
 800a6ae:	d036      	beq.n	800a71e <UART_SetConfig+0x6b6>
 800a6b0:	e039      	b.n	800a726 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a6b2:	f7fd fad7 	bl	8007c64 <HAL_RCCEx_GetD3PCLK1Freq>
 800a6b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a6b8:	e03b      	b.n	800a732 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6ba:	f107 0314 	add.w	r3, r7, #20
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7fd fae6 	bl	8007c90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a6c4:	69bb      	ldr	r3, [r7, #24]
 800a6c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6c8:	e033      	b.n	800a732 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6ca:	f107 0308 	add.w	r3, r7, #8
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7fd fc32 	bl	8007f38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6d8:	e02b      	b.n	800a732 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6da:	4b0a      	ldr	r3, [pc, #40]	; (800a704 <UART_SetConfig+0x69c>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f003 0320 	and.w	r3, r3, #32
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d009      	beq.n	800a6fa <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a6e6:	4b07      	ldr	r3, [pc, #28]	; (800a704 <UART_SetConfig+0x69c>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	08db      	lsrs	r3, r3, #3
 800a6ec:	f003 0303 	and.w	r3, r3, #3
 800a6f0:	4a08      	ldr	r2, [pc, #32]	; (800a714 <UART_SetConfig+0x6ac>)
 800a6f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a6f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a6f8:	e01b      	b.n	800a732 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800a6fa:	4b06      	ldr	r3, [pc, #24]	; (800a714 <UART_SetConfig+0x6ac>)
 800a6fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6fe:	e018      	b.n	800a732 <UART_SetConfig+0x6ca>
 800a700:	40011400 	.word	0x40011400
 800a704:	58024400 	.word	0x58024400
 800a708:	40007800 	.word	0x40007800
 800a70c:	40007c00 	.word	0x40007c00
 800a710:	58000c00 	.word	0x58000c00
 800a714:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a718:	4bc4      	ldr	r3, [pc, #784]	; (800aa2c <UART_SetConfig+0x9c4>)
 800a71a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a71c:	e009      	b.n	800a732 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a71e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a722:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a724:	e005      	b.n	800a732 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800a726:	2300      	movs	r3, #0
 800a728:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a72a:	2301      	movs	r3, #1
 800a72c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a730:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a734:	2b00      	cmp	r3, #0
 800a736:	f000 81da 	beq.w	800aaee <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73e:	4abc      	ldr	r2, [pc, #752]	; (800aa30 <UART_SetConfig+0x9c8>)
 800a740:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a744:	461a      	mov	r2, r3
 800a746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a748:	fbb3 f3f2 	udiv	r3, r3, r2
 800a74c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	685a      	ldr	r2, [r3, #4]
 800a752:	4613      	mov	r3, r2
 800a754:	005b      	lsls	r3, r3, #1
 800a756:	4413      	add	r3, r2
 800a758:	6a3a      	ldr	r2, [r7, #32]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d305      	bcc.n	800a76a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a764:	6a3a      	ldr	r2, [r7, #32]
 800a766:	429a      	cmp	r2, r3
 800a768:	d903      	bls.n	800a772 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800a76a:	2301      	movs	r3, #1
 800a76c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a770:	e1bd      	b.n	800aaee <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a774:	4618      	mov	r0, r3
 800a776:	f04f 0100 	mov.w	r1, #0
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77e:	4aac      	ldr	r2, [pc, #688]	; (800aa30 <UART_SetConfig+0x9c8>)
 800a780:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a784:	b29a      	uxth	r2, r3
 800a786:	f04f 0300 	mov.w	r3, #0
 800a78a:	f7f5 fe01 	bl	8000390 <__aeabi_uldivmod>
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	4610      	mov	r0, r2
 800a794:	4619      	mov	r1, r3
 800a796:	f04f 0200 	mov.w	r2, #0
 800a79a:	f04f 0300 	mov.w	r3, #0
 800a79e:	020b      	lsls	r3, r1, #8
 800a7a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a7a4:	0202      	lsls	r2, r0, #8
 800a7a6:	6879      	ldr	r1, [r7, #4]
 800a7a8:	6849      	ldr	r1, [r1, #4]
 800a7aa:	0849      	lsrs	r1, r1, #1
 800a7ac:	4608      	mov	r0, r1
 800a7ae:	f04f 0100 	mov.w	r1, #0
 800a7b2:	1814      	adds	r4, r2, r0
 800a7b4:	eb43 0501 	adc.w	r5, r3, r1
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	461a      	mov	r2, r3
 800a7be:	f04f 0300 	mov.w	r3, #0
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	4629      	mov	r1, r5
 800a7c6:	f7f5 fde3 	bl	8000390 <__aeabi_uldivmod>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7d8:	d308      	bcc.n	800a7ec <UART_SetConfig+0x784>
 800a7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7e0:	d204      	bcs.n	800a7ec <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7e8:	60da      	str	r2, [r3, #12]
 800a7ea:	e180      	b.n	800aaee <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a7f2:	e17c      	b.n	800aaee <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	69db      	ldr	r3, [r3, #28]
 800a7f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7fc:	f040 80be 	bne.w	800a97c <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800a800:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a804:	2b20      	cmp	r3, #32
 800a806:	dc49      	bgt.n	800a89c <UART_SetConfig+0x834>
 800a808:	2b00      	cmp	r3, #0
 800a80a:	db7c      	blt.n	800a906 <UART_SetConfig+0x89e>
 800a80c:	2b20      	cmp	r3, #32
 800a80e:	d87a      	bhi.n	800a906 <UART_SetConfig+0x89e>
 800a810:	a201      	add	r2, pc, #4	; (adr r2, 800a818 <UART_SetConfig+0x7b0>)
 800a812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a816:	bf00      	nop
 800a818:	0800a8a3 	.word	0x0800a8a3
 800a81c:	0800a8ab 	.word	0x0800a8ab
 800a820:	0800a907 	.word	0x0800a907
 800a824:	0800a907 	.word	0x0800a907
 800a828:	0800a8b3 	.word	0x0800a8b3
 800a82c:	0800a907 	.word	0x0800a907
 800a830:	0800a907 	.word	0x0800a907
 800a834:	0800a907 	.word	0x0800a907
 800a838:	0800a8c3 	.word	0x0800a8c3
 800a83c:	0800a907 	.word	0x0800a907
 800a840:	0800a907 	.word	0x0800a907
 800a844:	0800a907 	.word	0x0800a907
 800a848:	0800a907 	.word	0x0800a907
 800a84c:	0800a907 	.word	0x0800a907
 800a850:	0800a907 	.word	0x0800a907
 800a854:	0800a907 	.word	0x0800a907
 800a858:	0800a8d3 	.word	0x0800a8d3
 800a85c:	0800a907 	.word	0x0800a907
 800a860:	0800a907 	.word	0x0800a907
 800a864:	0800a907 	.word	0x0800a907
 800a868:	0800a907 	.word	0x0800a907
 800a86c:	0800a907 	.word	0x0800a907
 800a870:	0800a907 	.word	0x0800a907
 800a874:	0800a907 	.word	0x0800a907
 800a878:	0800a907 	.word	0x0800a907
 800a87c:	0800a907 	.word	0x0800a907
 800a880:	0800a907 	.word	0x0800a907
 800a884:	0800a907 	.word	0x0800a907
 800a888:	0800a907 	.word	0x0800a907
 800a88c:	0800a907 	.word	0x0800a907
 800a890:	0800a907 	.word	0x0800a907
 800a894:	0800a907 	.word	0x0800a907
 800a898:	0800a8f9 	.word	0x0800a8f9
 800a89c:	2b40      	cmp	r3, #64	; 0x40
 800a89e:	d02e      	beq.n	800a8fe <UART_SetConfig+0x896>
 800a8a0:	e031      	b.n	800a906 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8a2:	f7fb fda1 	bl	80063e8 <HAL_RCC_GetPCLK1Freq>
 800a8a6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a8a8:	e033      	b.n	800a912 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8aa:	f7fb fdb3 	bl	8006414 <HAL_RCC_GetPCLK2Freq>
 800a8ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a8b0:	e02f      	b.n	800a912 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8b2:	f107 0314 	add.w	r3, r7, #20
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7fd f9ea 	bl	8007c90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a8bc:	69bb      	ldr	r3, [r7, #24]
 800a8be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8c0:	e027      	b.n	800a912 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8c2:	f107 0308 	add.w	r3, r7, #8
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7fd fb36 	bl	8007f38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8d0:	e01f      	b.n	800a912 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8d2:	4b58      	ldr	r3, [pc, #352]	; (800aa34 <UART_SetConfig+0x9cc>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f003 0320 	and.w	r3, r3, #32
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d009      	beq.n	800a8f2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8de:	4b55      	ldr	r3, [pc, #340]	; (800aa34 <UART_SetConfig+0x9cc>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	08db      	lsrs	r3, r3, #3
 800a8e4:	f003 0303 	and.w	r3, r3, #3
 800a8e8:	4a53      	ldr	r2, [pc, #332]	; (800aa38 <UART_SetConfig+0x9d0>)
 800a8ea:	fa22 f303 	lsr.w	r3, r2, r3
 800a8ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8f0:	e00f      	b.n	800a912 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800a8f2:	4b51      	ldr	r3, [pc, #324]	; (800aa38 <UART_SetConfig+0x9d0>)
 800a8f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8f6:	e00c      	b.n	800a912 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a8f8:	4b4c      	ldr	r3, [pc, #304]	; (800aa2c <UART_SetConfig+0x9c4>)
 800a8fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8fc:	e009      	b.n	800a912 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a902:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a904:	e005      	b.n	800a912 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800a906:	2300      	movs	r3, #0
 800a908:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a90a:	2301      	movs	r3, #1
 800a90c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a910:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a914:	2b00      	cmp	r3, #0
 800a916:	f000 80ea 	beq.w	800aaee <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a91e:	4a44      	ldr	r2, [pc, #272]	; (800aa30 <UART_SetConfig+0x9c8>)
 800a920:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a924:	461a      	mov	r2, r3
 800a926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a928:	fbb3 f3f2 	udiv	r3, r3, r2
 800a92c:	005a      	lsls	r2, r3, #1
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	085b      	lsrs	r3, r3, #1
 800a934:	441a      	add	r2, r3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a93e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a942:	2b0f      	cmp	r3, #15
 800a944:	d916      	bls.n	800a974 <UART_SetConfig+0x90c>
 800a946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a94c:	d212      	bcs.n	800a974 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a950:	b29b      	uxth	r3, r3
 800a952:	f023 030f 	bic.w	r3, r3, #15
 800a956:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95a:	085b      	lsrs	r3, r3, #1
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	f003 0307 	and.w	r3, r3, #7
 800a962:	b29a      	uxth	r2, r3
 800a964:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a966:	4313      	orrs	r3, r2
 800a968:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a970:	60da      	str	r2, [r3, #12]
 800a972:	e0bc      	b.n	800aaee <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a974:	2301      	movs	r3, #1
 800a976:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a97a:	e0b8      	b.n	800aaee <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a97c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a980:	2b20      	cmp	r3, #32
 800a982:	dc4b      	bgt.n	800aa1c <UART_SetConfig+0x9b4>
 800a984:	2b00      	cmp	r3, #0
 800a986:	f2c0 8087 	blt.w	800aa98 <UART_SetConfig+0xa30>
 800a98a:	2b20      	cmp	r3, #32
 800a98c:	f200 8084 	bhi.w	800aa98 <UART_SetConfig+0xa30>
 800a990:	a201      	add	r2, pc, #4	; (adr r2, 800a998 <UART_SetConfig+0x930>)
 800a992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a996:	bf00      	nop
 800a998:	0800aa23 	.word	0x0800aa23
 800a99c:	0800aa3d 	.word	0x0800aa3d
 800a9a0:	0800aa99 	.word	0x0800aa99
 800a9a4:	0800aa99 	.word	0x0800aa99
 800a9a8:	0800aa45 	.word	0x0800aa45
 800a9ac:	0800aa99 	.word	0x0800aa99
 800a9b0:	0800aa99 	.word	0x0800aa99
 800a9b4:	0800aa99 	.word	0x0800aa99
 800a9b8:	0800aa55 	.word	0x0800aa55
 800a9bc:	0800aa99 	.word	0x0800aa99
 800a9c0:	0800aa99 	.word	0x0800aa99
 800a9c4:	0800aa99 	.word	0x0800aa99
 800a9c8:	0800aa99 	.word	0x0800aa99
 800a9cc:	0800aa99 	.word	0x0800aa99
 800a9d0:	0800aa99 	.word	0x0800aa99
 800a9d4:	0800aa99 	.word	0x0800aa99
 800a9d8:	0800aa65 	.word	0x0800aa65
 800a9dc:	0800aa99 	.word	0x0800aa99
 800a9e0:	0800aa99 	.word	0x0800aa99
 800a9e4:	0800aa99 	.word	0x0800aa99
 800a9e8:	0800aa99 	.word	0x0800aa99
 800a9ec:	0800aa99 	.word	0x0800aa99
 800a9f0:	0800aa99 	.word	0x0800aa99
 800a9f4:	0800aa99 	.word	0x0800aa99
 800a9f8:	0800aa99 	.word	0x0800aa99
 800a9fc:	0800aa99 	.word	0x0800aa99
 800aa00:	0800aa99 	.word	0x0800aa99
 800aa04:	0800aa99 	.word	0x0800aa99
 800aa08:	0800aa99 	.word	0x0800aa99
 800aa0c:	0800aa99 	.word	0x0800aa99
 800aa10:	0800aa99 	.word	0x0800aa99
 800aa14:	0800aa99 	.word	0x0800aa99
 800aa18:	0800aa8b 	.word	0x0800aa8b
 800aa1c:	2b40      	cmp	r3, #64	; 0x40
 800aa1e:	d037      	beq.n	800aa90 <UART_SetConfig+0xa28>
 800aa20:	e03a      	b.n	800aa98 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa22:	f7fb fce1 	bl	80063e8 <HAL_RCC_GetPCLK1Freq>
 800aa26:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aa28:	e03c      	b.n	800aaa4 <UART_SetConfig+0xa3c>
 800aa2a:	bf00      	nop
 800aa2c:	003d0900 	.word	0x003d0900
 800aa30:	0800c76c 	.word	0x0800c76c
 800aa34:	58024400 	.word	0x58024400
 800aa38:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa3c:	f7fb fcea 	bl	8006414 <HAL_RCC_GetPCLK2Freq>
 800aa40:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aa42:	e02f      	b.n	800aaa4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa44:	f107 0314 	add.w	r3, r7, #20
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7fd f921 	bl	8007c90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa52:	e027      	b.n	800aaa4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa54:	f107 0308 	add.w	r3, r7, #8
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7fd fa6d 	bl	8007f38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa62:	e01f      	b.n	800aaa4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa64:	4b2c      	ldr	r3, [pc, #176]	; (800ab18 <UART_SetConfig+0xab0>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f003 0320 	and.w	r3, r3, #32
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d009      	beq.n	800aa84 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa70:	4b29      	ldr	r3, [pc, #164]	; (800ab18 <UART_SetConfig+0xab0>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	08db      	lsrs	r3, r3, #3
 800aa76:	f003 0303 	and.w	r3, r3, #3
 800aa7a:	4a28      	ldr	r2, [pc, #160]	; (800ab1c <UART_SetConfig+0xab4>)
 800aa7c:	fa22 f303 	lsr.w	r3, r2, r3
 800aa80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa82:	e00f      	b.n	800aaa4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800aa84:	4b25      	ldr	r3, [pc, #148]	; (800ab1c <UART_SetConfig+0xab4>)
 800aa86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa88:	e00c      	b.n	800aaa4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa8a:	4b25      	ldr	r3, [pc, #148]	; (800ab20 <UART_SetConfig+0xab8>)
 800aa8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa8e:	e009      	b.n	800aaa4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa96:	e005      	b.n	800aaa4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800aaa2:	bf00      	nop
    }

    if (pclk != 0U)
 800aaa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d021      	beq.n	800aaee <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaae:	4a1d      	ldr	r2, [pc, #116]	; (800ab24 <UART_SetConfig+0xabc>)
 800aab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aab4:	461a      	mov	r2, r3
 800aab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab8:	fbb3 f2f2 	udiv	r2, r3, r2
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	085b      	lsrs	r3, r3, #1
 800aac2:	441a      	add	r2, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aacc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad0:	2b0f      	cmp	r3, #15
 800aad2:	d909      	bls.n	800aae8 <UART_SetConfig+0xa80>
 800aad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aada:	d205      	bcs.n	800aae8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aade:	b29a      	uxth	r2, r3
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	60da      	str	r2, [r3, #12]
 800aae6:	e002      	b.n	800aaee <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800aae8:	2301      	movs	r3, #1
 800aaea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2201      	movs	r2, #1
 800aafa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ab0a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3738      	adds	r7, #56	; 0x38
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bdb0      	pop	{r4, r5, r7, pc}
 800ab16:	bf00      	nop
 800ab18:	58024400 	.word	0x58024400
 800ab1c:	03d09000 	.word	0x03d09000
 800ab20:	003d0900 	.word	0x003d0900
 800ab24:	0800c76c 	.word	0x0800c76c

0800ab28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab34:	f003 0301 	and.w	r3, r3, #1
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d00a      	beq.n	800ab52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	430a      	orrs	r2, r1
 800ab50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab56:	f003 0302 	and.w	r3, r3, #2
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d00a      	beq.n	800ab74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	430a      	orrs	r2, r1
 800ab72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab78:	f003 0304 	and.w	r3, r3, #4
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d00a      	beq.n	800ab96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	430a      	orrs	r2, r1
 800ab94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab9a:	f003 0308 	and.w	r3, r3, #8
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d00a      	beq.n	800abb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	430a      	orrs	r2, r1
 800abb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abbc:	f003 0310 	and.w	r3, r3, #16
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d00a      	beq.n	800abda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	689b      	ldr	r3, [r3, #8]
 800abca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	430a      	orrs	r2, r1
 800abd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abde:	f003 0320 	and.w	r3, r3, #32
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d00a      	beq.n	800abfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	430a      	orrs	r2, r1
 800abfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d01a      	beq.n	800ac3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	430a      	orrs	r2, r1
 800ac1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac26:	d10a      	bne.n	800ac3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	430a      	orrs	r2, r1
 800ac3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00a      	beq.n	800ac60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	430a      	orrs	r2, r1
 800ac5e:	605a      	str	r2, [r3, #4]
  }
}
 800ac60:	bf00      	nop
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b086      	sub	sp, #24
 800ac70:	af02      	add	r7, sp, #8
 800ac72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac7c:	f7f7 fed8 	bl	8002a30 <HAL_GetTick>
 800ac80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f003 0308 	and.w	r3, r3, #8
 800ac8c:	2b08      	cmp	r3, #8
 800ac8e:	d10e      	bne.n	800acae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ac94:	9300      	str	r3, [sp, #0]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 f82f 	bl	800ad02 <UART_WaitOnFlagUntilTimeout>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d001      	beq.n	800acae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acaa:	2303      	movs	r3, #3
 800acac:	e025      	b.n	800acfa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f003 0304 	and.w	r3, r3, #4
 800acb8:	2b04      	cmp	r3, #4
 800acba:	d10e      	bne.n	800acda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800acc0:	9300      	str	r3, [sp, #0]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 f819 	bl	800ad02 <UART_WaitOnFlagUntilTimeout>
 800acd0:	4603      	mov	r3, r0
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d001      	beq.n	800acda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acd6:	2303      	movs	r3, #3
 800acd8:	e00f      	b.n	800acfa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2220      	movs	r2, #32
 800acde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2220      	movs	r2, #32
 800ace6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2200      	movs	r2, #0
 800acee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800acf8:	2300      	movs	r3, #0
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3710      	adds	r7, #16
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b09c      	sub	sp, #112	; 0x70
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	60f8      	str	r0, [r7, #12]
 800ad0a:	60b9      	str	r1, [r7, #8]
 800ad0c:	603b      	str	r3, [r7, #0]
 800ad0e:	4613      	mov	r3, r2
 800ad10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad12:	e0a9      	b.n	800ae68 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad1a:	f000 80a5 	beq.w	800ae68 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad1e:	f7f7 fe87 	bl	8002a30 <HAL_GetTick>
 800ad22:	4602      	mov	r2, r0
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	1ad3      	subs	r3, r2, r3
 800ad28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d302      	bcc.n	800ad34 <UART_WaitOnFlagUntilTimeout+0x32>
 800ad2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d140      	bne.n	800adb6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad3c:	e853 3f00 	ldrex	r3, [r3]
 800ad40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ad42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ad48:	667b      	str	r3, [r7, #100]	; 0x64
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	461a      	mov	r2, r3
 800ad50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad52:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad54:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ad58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ad5a:	e841 2300 	strex	r3, r2, [r1]
 800ad5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ad60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d1e6      	bne.n	800ad34 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	3308      	adds	r3, #8
 800ad6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad70:	e853 3f00 	ldrex	r3, [r3]
 800ad74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad78:	f023 0301 	bic.w	r3, r3, #1
 800ad7c:	663b      	str	r3, [r7, #96]	; 0x60
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	3308      	adds	r3, #8
 800ad84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad86:	64ba      	str	r2, [r7, #72]	; 0x48
 800ad88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ad8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad8e:	e841 2300 	strex	r3, r2, [r1]
 800ad92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ad94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d1e5      	bne.n	800ad66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2220      	movs	r2, #32
 800ad9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2220      	movs	r2, #32
 800ada6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2200      	movs	r2, #0
 800adae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800adb2:	2303      	movs	r3, #3
 800adb4:	e069      	b.n	800ae8a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f003 0304 	and.w	r3, r3, #4
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d051      	beq.n	800ae68 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	69db      	ldr	r3, [r3, #28]
 800adca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800adce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800add2:	d149      	bne.n	800ae68 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800addc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ade4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade6:	e853 3f00 	ldrex	r3, [r3]
 800adea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800adec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800adf2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	461a      	mov	r2, r3
 800adfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adfc:	637b      	str	r3, [r7, #52]	; 0x34
 800adfe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae04:	e841 2300 	strex	r3, r2, [r1]
 800ae08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ae0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d1e6      	bne.n	800adde <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	3308      	adds	r3, #8
 800ae16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	e853 3f00 	ldrex	r3, [r3]
 800ae1e:	613b      	str	r3, [r7, #16]
   return(result);
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	f023 0301 	bic.w	r3, r3, #1
 800ae26:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	3308      	adds	r3, #8
 800ae2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ae30:	623a      	str	r2, [r7, #32]
 800ae32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae34:	69f9      	ldr	r1, [r7, #28]
 800ae36:	6a3a      	ldr	r2, [r7, #32]
 800ae38:	e841 2300 	strex	r3, r2, [r1]
 800ae3c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae3e:	69bb      	ldr	r3, [r7, #24]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d1e5      	bne.n	800ae10 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2220      	movs	r2, #32
 800ae48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2220      	movs	r2, #32
 800ae50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2220      	movs	r2, #32
 800ae58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ae64:	2303      	movs	r3, #3
 800ae66:	e010      	b.n	800ae8a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	69da      	ldr	r2, [r3, #28]
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	4013      	ands	r3, r2
 800ae72:	68ba      	ldr	r2, [r7, #8]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	bf0c      	ite	eq
 800ae78:	2301      	moveq	r3, #1
 800ae7a:	2300      	movne	r3, #0
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	461a      	mov	r2, r3
 800ae80:	79fb      	ldrb	r3, [r7, #7]
 800ae82:	429a      	cmp	r2, r3
 800ae84:	f43f af46 	beq.w	800ad14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae88:	2300      	movs	r3, #0
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3770      	adds	r7, #112	; 0x70
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ae92:	b480      	push	{r7}
 800ae94:	b085      	sub	sp, #20
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d101      	bne.n	800aea8 <HAL_UARTEx_DisableFifoMode+0x16>
 800aea4:	2302      	movs	r3, #2
 800aea6:	e027      	b.n	800aef8 <HAL_UARTEx_DisableFifoMode+0x66>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2224      	movs	r2, #36	; 0x24
 800aeb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f022 0201 	bic.w	r2, r2, #1
 800aece:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aed6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	68fa      	ldr	r2, [r7, #12]
 800aee4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2220      	movs	r2, #32
 800aeea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2200      	movs	r2, #0
 800aef2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aef6:	2300      	movs	r3, #0
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3714      	adds	r7, #20
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr

0800af04 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af14:	2b01      	cmp	r3, #1
 800af16:	d101      	bne.n	800af1c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af18:	2302      	movs	r3, #2
 800af1a:	e02d      	b.n	800af78 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2201      	movs	r2, #1
 800af20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2224      	movs	r2, #36	; 0x24
 800af28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f022 0201 	bic.w	r2, r2, #1
 800af42:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	683a      	ldr	r2, [r7, #0]
 800af54:	430a      	orrs	r2, r1
 800af56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f000 f84f 	bl	800affc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	68fa      	ldr	r2, [r7, #12]
 800af64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2220      	movs	r2, #32
 800af6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2200      	movs	r2, #0
 800af72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800af76:	2300      	movs	r3, #0
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3710      	adds	r7, #16
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af90:	2b01      	cmp	r3, #1
 800af92:	d101      	bne.n	800af98 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800af94:	2302      	movs	r3, #2
 800af96:	e02d      	b.n	800aff4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2224      	movs	r2, #36	; 0x24
 800afa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f022 0201 	bic.w	r2, r2, #1
 800afbe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	683a      	ldr	r2, [r7, #0]
 800afd0:	430a      	orrs	r2, r1
 800afd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f000 f811 	bl	800affc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2220      	movs	r2, #32
 800afe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aff2:	2300      	movs	r3, #0
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3710      	adds	r7, #16
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800affc:	b480      	push	{r7}
 800affe:	b085      	sub	sp, #20
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d108      	bne.n	800b01e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2201      	movs	r2, #1
 800b010:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2201      	movs	r2, #1
 800b018:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b01c:	e031      	b.n	800b082 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b01e:	2310      	movs	r3, #16
 800b020:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b022:	2310      	movs	r3, #16
 800b024:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	0e5b      	lsrs	r3, r3, #25
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	f003 0307 	and.w	r3, r3, #7
 800b034:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	0f5b      	lsrs	r3, r3, #29
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	f003 0307 	and.w	r3, r3, #7
 800b044:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b046:	7bbb      	ldrb	r3, [r7, #14]
 800b048:	7b3a      	ldrb	r2, [r7, #12]
 800b04a:	4911      	ldr	r1, [pc, #68]	; (800b090 <UARTEx_SetNbDataToProcess+0x94>)
 800b04c:	5c8a      	ldrb	r2, [r1, r2]
 800b04e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b052:	7b3a      	ldrb	r2, [r7, #12]
 800b054:	490f      	ldr	r1, [pc, #60]	; (800b094 <UARTEx_SetNbDataToProcess+0x98>)
 800b056:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b058:	fb93 f3f2 	sdiv	r3, r3, r2
 800b05c:	b29a      	uxth	r2, r3
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b064:	7bfb      	ldrb	r3, [r7, #15]
 800b066:	7b7a      	ldrb	r2, [r7, #13]
 800b068:	4909      	ldr	r1, [pc, #36]	; (800b090 <UARTEx_SetNbDataToProcess+0x94>)
 800b06a:	5c8a      	ldrb	r2, [r1, r2]
 800b06c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b070:	7b7a      	ldrb	r2, [r7, #13]
 800b072:	4908      	ldr	r1, [pc, #32]	; (800b094 <UARTEx_SetNbDataToProcess+0x98>)
 800b074:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b076:	fb93 f3f2 	sdiv	r3, r3, r2
 800b07a:	b29a      	uxth	r2, r3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b082:	bf00      	nop
 800b084:	3714      	adds	r7, #20
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr
 800b08e:	bf00      	nop
 800b090:	0800c784 	.word	0x0800c784
 800b094:	0800c78c 	.word	0x0800c78c

0800b098 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b098:	b084      	sub	sp, #16
 800b09a:	b580      	push	{r7, lr}
 800b09c:	b084      	sub	sp, #16
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
 800b0a2:	f107 001c 	add.w	r0, r7, #28
 800b0a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d120      	bne.n	800b0f2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	68da      	ldr	r2, [r3, #12]
 800b0c0:	4b2a      	ldr	r3, [pc, #168]	; (800b16c <USB_CoreInit+0xd4>)
 800b0c2:	4013      	ands	r3, r2
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	68db      	ldr	r3, [r3, #12]
 800b0cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b0d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0d6:	2b01      	cmp	r3, #1
 800b0d8:	d105      	bne.n	800b0e6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	68db      	ldr	r3, [r3, #12]
 800b0de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 faa8 	bl	800b63c <USB_CoreReset>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	73fb      	strb	r3, [r7, #15]
 800b0f0:	e01a      	b.n	800b128 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 fa9c 	bl	800b63c <USB_CoreReset>
 800b104:	4603      	mov	r3, r0
 800b106:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d106      	bne.n	800b11c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b112:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	639a      	str	r2, [r3, #56]	; 0x38
 800b11a:	e005      	b.n	800b128 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b120:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d116      	bne.n	800b15c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b132:	b29a      	uxth	r2, r3
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b13c:	4b0c      	ldr	r3, [pc, #48]	; (800b170 <USB_CoreInit+0xd8>)
 800b13e:	4313      	orrs	r3, r2
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	f043 0206 	orr.w	r2, r3, #6
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	f043 0220 	orr.w	r2, r3, #32
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b15c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3710      	adds	r7, #16
 800b162:	46bd      	mov	sp, r7
 800b164:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b168:	b004      	add	sp, #16
 800b16a:	4770      	bx	lr
 800b16c:	ffbdffbf 	.word	0xffbdffbf
 800b170:	03ee0000 	.word	0x03ee0000

0800b174 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	f023 0201 	bic.w	r2, r3, #1
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	370c      	adds	r7, #12
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr

0800b196 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b196:	b580      	push	{r7, lr}
 800b198:	b084      	sub	sp, #16
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
 800b19e:	460b      	mov	r3, r1
 800b1a0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b1b2:	78fb      	ldrb	r3, [r7, #3]
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d115      	bne.n	800b1e4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	68db      	ldr	r3, [r3, #12]
 800b1bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b1c4:	2001      	movs	r0, #1
 800b1c6:	f7f7 fc3f 	bl	8002a48 <HAL_Delay>
      ms++;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 fa25 	bl	800b620 <USB_GetMode>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d01e      	beq.n	800b21a <USB_SetCurrentMode+0x84>
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2b31      	cmp	r3, #49	; 0x31
 800b1e0:	d9f0      	bls.n	800b1c4 <USB_SetCurrentMode+0x2e>
 800b1e2:	e01a      	b.n	800b21a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b1e4:	78fb      	ldrb	r3, [r7, #3]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d115      	bne.n	800b216 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b1f6:	2001      	movs	r0, #1
 800b1f8:	f7f7 fc26 	bl	8002a48 <HAL_Delay>
      ms++;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	3301      	adds	r3, #1
 800b200:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 fa0c 	bl	800b620 <USB_GetMode>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d005      	beq.n	800b21a <USB_SetCurrentMode+0x84>
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2b31      	cmp	r3, #49	; 0x31
 800b212:	d9f0      	bls.n	800b1f6 <USB_SetCurrentMode+0x60>
 800b214:	e001      	b.n	800b21a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b216:	2301      	movs	r3, #1
 800b218:	e005      	b.n	800b226 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2b32      	cmp	r3, #50	; 0x32
 800b21e:	d101      	bne.n	800b224 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b220:	2301      	movs	r3, #1
 800b222:	e000      	b.n	800b226 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b224:	2300      	movs	r3, #0
}
 800b226:	4618      	mov	r0, r3
 800b228:	3710      	adds	r7, #16
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
	...

0800b230 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b230:	b084      	sub	sp, #16
 800b232:	b580      	push	{r7, lr}
 800b234:	b086      	sub	sp, #24
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
 800b23a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b23e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b242:	2300      	movs	r3, #0
 800b244:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b24a:	2300      	movs	r3, #0
 800b24c:	613b      	str	r3, [r7, #16]
 800b24e:	e009      	b.n	800b264 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	3340      	adds	r3, #64	; 0x40
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	4413      	add	r3, r2
 800b25a:	2200      	movs	r2, #0
 800b25c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	3301      	adds	r3, #1
 800b262:	613b      	str	r3, [r7, #16]
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	2b0e      	cmp	r3, #14
 800b268:	d9f2      	bls.n	800b250 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b26a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d11c      	bne.n	800b2aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	68fa      	ldr	r2, [r7, #12]
 800b27a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b27e:	f043 0302 	orr.w	r3, r3, #2
 800b282:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b288:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	601a      	str	r2, [r3, #0]
 800b2a8:	e005      	b.n	800b2b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b2bc:	461a      	mov	r2, r3
 800b2be:	2300      	movs	r3, #0
 800b2c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	680b      	ldr	r3, [r1, #0]
 800b2d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d10c      	bne.n	800b2f6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d104      	bne.n	800b2ec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b2e2:	2100      	movs	r1, #0
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 f961 	bl	800b5ac <USB_SetDevSpeed>
 800b2ea:	e008      	b.n	800b2fe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b2ec:	2101      	movs	r1, #1
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 f95c 	bl	800b5ac <USB_SetDevSpeed>
 800b2f4:	e003      	b.n	800b2fe <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b2f6:	2103      	movs	r1, #3
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f000 f957 	bl	800b5ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b2fe:	2110      	movs	r1, #16
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 f8f3 	bl	800b4ec <USB_FlushTxFifo>
 800b306:	4603      	mov	r3, r0
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d001      	beq.n	800b310 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b30c:	2301      	movs	r3, #1
 800b30e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 f91d 	bl	800b550 <USB_FlushRxFifo>
 800b316:	4603      	mov	r3, r0
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d001      	beq.n	800b320 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b31c:	2301      	movs	r3, #1
 800b31e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b326:	461a      	mov	r2, r3
 800b328:	2300      	movs	r3, #0
 800b32a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b332:	461a      	mov	r2, r3
 800b334:	2300      	movs	r3, #0
 800b336:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b33e:	461a      	mov	r2, r3
 800b340:	2300      	movs	r3, #0
 800b342:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b344:	2300      	movs	r3, #0
 800b346:	613b      	str	r3, [r7, #16]
 800b348:	e043      	b.n	800b3d2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	015a      	lsls	r2, r3, #5
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	4413      	add	r3, r2
 800b352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b35c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b360:	d118      	bne.n	800b394 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d10a      	bne.n	800b37e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	015a      	lsls	r2, r3, #5
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	4413      	add	r3, r2
 800b370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b374:	461a      	mov	r2, r3
 800b376:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b37a:	6013      	str	r3, [r2, #0]
 800b37c:	e013      	b.n	800b3a6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	015a      	lsls	r2, r3, #5
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	4413      	add	r3, r2
 800b386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b38a:	461a      	mov	r2, r3
 800b38c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b390:	6013      	str	r3, [r2, #0]
 800b392:	e008      	b.n	800b3a6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	015a      	lsls	r2, r3, #5
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	4413      	add	r3, r2
 800b39c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	015a      	lsls	r2, r3, #5
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	4413      	add	r3, r2
 800b3ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	015a      	lsls	r2, r3, #5
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	4413      	add	r3, r2
 800b3c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b3ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	613b      	str	r3, [r7, #16]
 800b3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d4:	693a      	ldr	r2, [r7, #16]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d3b7      	bcc.n	800b34a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3da:	2300      	movs	r3, #0
 800b3dc:	613b      	str	r3, [r7, #16]
 800b3de:	e043      	b.n	800b468 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	015a      	lsls	r2, r3, #5
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b3f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b3f6:	d118      	bne.n	800b42a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d10a      	bne.n	800b414 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	015a      	lsls	r2, r3, #5
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	4413      	add	r3, r2
 800b406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b40a:	461a      	mov	r2, r3
 800b40c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b410:	6013      	str	r3, [r2, #0]
 800b412:	e013      	b.n	800b43c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	015a      	lsls	r2, r3, #5
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	4413      	add	r3, r2
 800b41c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b420:	461a      	mov	r2, r3
 800b422:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b426:	6013      	str	r3, [r2, #0]
 800b428:	e008      	b.n	800b43c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	015a      	lsls	r2, r3, #5
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	4413      	add	r3, r2
 800b432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b436:	461a      	mov	r2, r3
 800b438:	2300      	movs	r3, #0
 800b43a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	015a      	lsls	r2, r3, #5
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	4413      	add	r3, r2
 800b444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b448:	461a      	mov	r2, r3
 800b44a:	2300      	movs	r3, #0
 800b44c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	015a      	lsls	r2, r3, #5
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	4413      	add	r3, r2
 800b456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b45a:	461a      	mov	r2, r3
 800b45c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b460:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	3301      	adds	r3, #1
 800b466:	613b      	str	r3, [r7, #16]
 800b468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46a:	693a      	ldr	r2, [r7, #16]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d3b7      	bcc.n	800b3e0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b476:	691b      	ldr	r3, [r3, #16]
 800b478:	68fa      	ldr	r2, [r7, #12]
 800b47a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b47e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b482:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2200      	movs	r2, #0
 800b488:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b490:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b494:	2b00      	cmp	r3, #0
 800b496:	d105      	bne.n	800b4a4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	699b      	ldr	r3, [r3, #24]
 800b49c:	f043 0210 	orr.w	r2, r3, #16
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	699a      	ldr	r2, [r3, #24]
 800b4a8:	4b0e      	ldr	r3, [pc, #56]	; (800b4e4 <USB_DevInit+0x2b4>)
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b4b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d005      	beq.n	800b4c2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	699b      	ldr	r3, [r3, #24]
 800b4ba:	f043 0208 	orr.w	r2, r3, #8
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b4c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	d105      	bne.n	800b4d4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	699a      	ldr	r2, [r3, #24]
 800b4cc:	4b06      	ldr	r3, [pc, #24]	; (800b4e8 <USB_DevInit+0x2b8>)
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b4d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3718      	adds	r7, #24
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b4e0:	b004      	add	sp, #16
 800b4e2:	4770      	bx	lr
 800b4e4:	803c3800 	.word	0x803c3800
 800b4e8:	40000004 	.word	0x40000004

0800b4ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b085      	sub	sp, #20
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	60fb      	str	r3, [r7, #12]
 800b500:	4a12      	ldr	r2, [pc, #72]	; (800b54c <USB_FlushTxFifo+0x60>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d901      	bls.n	800b50a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b506:	2303      	movs	r3, #3
 800b508:	e01a      	b.n	800b540 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	691b      	ldr	r3, [r3, #16]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	daf3      	bge.n	800b4fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b512:	2300      	movs	r3, #0
 800b514:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	019b      	lsls	r3, r3, #6
 800b51a:	f043 0220 	orr.w	r2, r3, #32
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	3301      	adds	r3, #1
 800b526:	60fb      	str	r3, [r7, #12]
 800b528:	4a08      	ldr	r2, [pc, #32]	; (800b54c <USB_FlushTxFifo+0x60>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d901      	bls.n	800b532 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800b52e:	2303      	movs	r3, #3
 800b530:	e006      	b.n	800b540 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	691b      	ldr	r3, [r3, #16]
 800b536:	f003 0320 	and.w	r3, r3, #32
 800b53a:	2b20      	cmp	r3, #32
 800b53c:	d0f1      	beq.n	800b522 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800b53e:	2300      	movs	r3, #0
}
 800b540:	4618      	mov	r0, r3
 800b542:	3714      	adds	r7, #20
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr
 800b54c:	00030d40 	.word	0x00030d40

0800b550 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b550:	b480      	push	{r7}
 800b552:	b085      	sub	sp, #20
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b558:	2300      	movs	r3, #0
 800b55a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	3301      	adds	r3, #1
 800b560:	60fb      	str	r3, [r7, #12]
 800b562:	4a11      	ldr	r2, [pc, #68]	; (800b5a8 <USB_FlushRxFifo+0x58>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d901      	bls.n	800b56c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800b568:	2303      	movs	r3, #3
 800b56a:	e017      	b.n	800b59c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	691b      	ldr	r3, [r3, #16]
 800b570:	2b00      	cmp	r3, #0
 800b572:	daf3      	bge.n	800b55c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b574:	2300      	movs	r3, #0
 800b576:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2210      	movs	r2, #16
 800b57c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	3301      	adds	r3, #1
 800b582:	60fb      	str	r3, [r7, #12]
 800b584:	4a08      	ldr	r2, [pc, #32]	; (800b5a8 <USB_FlushRxFifo+0x58>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d901      	bls.n	800b58e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800b58a:	2303      	movs	r3, #3
 800b58c:	e006      	b.n	800b59c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	691b      	ldr	r3, [r3, #16]
 800b592:	f003 0310 	and.w	r3, r3, #16
 800b596:	2b10      	cmp	r3, #16
 800b598:	d0f1      	beq.n	800b57e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800b59a:	2300      	movs	r3, #0
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3714      	adds	r7, #20
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr
 800b5a8:	00030d40 	.word	0x00030d40

0800b5ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b085      	sub	sp, #20
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	78fb      	ldrb	r3, [r7, #3]
 800b5c6:	68f9      	ldr	r1, [r7, #12]
 800b5c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b5d0:	2300      	movs	r3, #0
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3714      	adds	r7, #20
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr

0800b5de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b5de:	b480      	push	{r7}
 800b5e0:	b085      	sub	sp, #20
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	68fa      	ldr	r2, [r7, #12]
 800b5f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b5f8:	f023 0303 	bic.w	r3, r3, #3
 800b5fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	68fa      	ldr	r2, [r7, #12]
 800b608:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b60c:	f043 0302 	orr.w	r3, r3, #2
 800b610:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b612:	2300      	movs	r3, #0
}
 800b614:	4618      	mov	r0, r3
 800b616:	3714      	adds	r7, #20
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b620:	b480      	push	{r7}
 800b622:	b083      	sub	sp, #12
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	695b      	ldr	r3, [r3, #20]
 800b62c:	f003 0301 	and.w	r3, r3, #1
}
 800b630:	4618      	mov	r0, r3
 800b632:	370c      	adds	r7, #12
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b085      	sub	sp, #20
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b644:	2300      	movs	r3, #0
 800b646:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	3301      	adds	r3, #1
 800b64c:	60fb      	str	r3, [r7, #12]
 800b64e:	4a13      	ldr	r2, [pc, #76]	; (800b69c <USB_CoreReset+0x60>)
 800b650:	4293      	cmp	r3, r2
 800b652:	d901      	bls.n	800b658 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800b654:	2303      	movs	r3, #3
 800b656:	e01a      	b.n	800b68e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	691b      	ldr	r3, [r3, #16]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	daf3      	bge.n	800b648 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b660:	2300      	movs	r3, #0
 800b662:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	691b      	ldr	r3, [r3, #16]
 800b668:	f043 0201 	orr.w	r2, r3, #1
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	3301      	adds	r3, #1
 800b674:	60fb      	str	r3, [r7, #12]
 800b676:	4a09      	ldr	r2, [pc, #36]	; (800b69c <USB_CoreReset+0x60>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d901      	bls.n	800b680 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800b67c:	2303      	movs	r3, #3
 800b67e:	e006      	b.n	800b68e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	691b      	ldr	r3, [r3, #16]
 800b684:	f003 0301 	and.w	r3, r3, #1
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d0f1      	beq.n	800b670 <USB_CoreReset+0x34>

  return HAL_OK;
 800b68c:	2300      	movs	r3, #0
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3714      	adds	r7, #20
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr
 800b69a:	bf00      	nop
 800b69c:	00030d40 	.word	0x00030d40

0800b6a0 <__errno>:
 800b6a0:	4b01      	ldr	r3, [pc, #4]	; (800b6a8 <__errno+0x8>)
 800b6a2:	6818      	ldr	r0, [r3, #0]
 800b6a4:	4770      	bx	lr
 800b6a6:	bf00      	nop
 800b6a8:	24000024 	.word	0x24000024

0800b6ac <__libc_init_array>:
 800b6ac:	b570      	push	{r4, r5, r6, lr}
 800b6ae:	4d0d      	ldr	r5, [pc, #52]	; (800b6e4 <__libc_init_array+0x38>)
 800b6b0:	4c0d      	ldr	r4, [pc, #52]	; (800b6e8 <__libc_init_array+0x3c>)
 800b6b2:	1b64      	subs	r4, r4, r5
 800b6b4:	10a4      	asrs	r4, r4, #2
 800b6b6:	2600      	movs	r6, #0
 800b6b8:	42a6      	cmp	r6, r4
 800b6ba:	d109      	bne.n	800b6d0 <__libc_init_array+0x24>
 800b6bc:	4d0b      	ldr	r5, [pc, #44]	; (800b6ec <__libc_init_array+0x40>)
 800b6be:	4c0c      	ldr	r4, [pc, #48]	; (800b6f0 <__libc_init_array+0x44>)
 800b6c0:	f000 fc56 	bl	800bf70 <_init>
 800b6c4:	1b64      	subs	r4, r4, r5
 800b6c6:	10a4      	asrs	r4, r4, #2
 800b6c8:	2600      	movs	r6, #0
 800b6ca:	42a6      	cmp	r6, r4
 800b6cc:	d105      	bne.n	800b6da <__libc_init_array+0x2e>
 800b6ce:	bd70      	pop	{r4, r5, r6, pc}
 800b6d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6d4:	4798      	blx	r3
 800b6d6:	3601      	adds	r6, #1
 800b6d8:	e7ee      	b.n	800b6b8 <__libc_init_array+0xc>
 800b6da:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6de:	4798      	blx	r3
 800b6e0:	3601      	adds	r6, #1
 800b6e2:	e7f2      	b.n	800b6ca <__libc_init_array+0x1e>
 800b6e4:	0800c7d0 	.word	0x0800c7d0
 800b6e8:	0800c7d0 	.word	0x0800c7d0
 800b6ec:	0800c7d0 	.word	0x0800c7d0
 800b6f0:	0800c7d4 	.word	0x0800c7d4

0800b6f4 <memcpy>:
 800b6f4:	440a      	add	r2, r1
 800b6f6:	4291      	cmp	r1, r2
 800b6f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6fc:	d100      	bne.n	800b700 <memcpy+0xc>
 800b6fe:	4770      	bx	lr
 800b700:	b510      	push	{r4, lr}
 800b702:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b706:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b70a:	4291      	cmp	r1, r2
 800b70c:	d1f9      	bne.n	800b702 <memcpy+0xe>
 800b70e:	bd10      	pop	{r4, pc}

0800b710 <memmove>:
 800b710:	4288      	cmp	r0, r1
 800b712:	b510      	push	{r4, lr}
 800b714:	eb01 0402 	add.w	r4, r1, r2
 800b718:	d902      	bls.n	800b720 <memmove+0x10>
 800b71a:	4284      	cmp	r4, r0
 800b71c:	4623      	mov	r3, r4
 800b71e:	d807      	bhi.n	800b730 <memmove+0x20>
 800b720:	1e43      	subs	r3, r0, #1
 800b722:	42a1      	cmp	r1, r4
 800b724:	d008      	beq.n	800b738 <memmove+0x28>
 800b726:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b72a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b72e:	e7f8      	b.n	800b722 <memmove+0x12>
 800b730:	4402      	add	r2, r0
 800b732:	4601      	mov	r1, r0
 800b734:	428a      	cmp	r2, r1
 800b736:	d100      	bne.n	800b73a <memmove+0x2a>
 800b738:	bd10      	pop	{r4, pc}
 800b73a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b73e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b742:	e7f7      	b.n	800b734 <memmove+0x24>

0800b744 <memset>:
 800b744:	4402      	add	r2, r0
 800b746:	4603      	mov	r3, r0
 800b748:	4293      	cmp	r3, r2
 800b74a:	d100      	bne.n	800b74e <memset+0xa>
 800b74c:	4770      	bx	lr
 800b74e:	f803 1b01 	strb.w	r1, [r3], #1
 800b752:	e7f9      	b.n	800b748 <memset+0x4>

0800b754 <siprintf>:
 800b754:	b40e      	push	{r1, r2, r3}
 800b756:	b500      	push	{lr}
 800b758:	b09c      	sub	sp, #112	; 0x70
 800b75a:	ab1d      	add	r3, sp, #116	; 0x74
 800b75c:	9002      	str	r0, [sp, #8]
 800b75e:	9006      	str	r0, [sp, #24]
 800b760:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b764:	4809      	ldr	r0, [pc, #36]	; (800b78c <siprintf+0x38>)
 800b766:	9107      	str	r1, [sp, #28]
 800b768:	9104      	str	r1, [sp, #16]
 800b76a:	4909      	ldr	r1, [pc, #36]	; (800b790 <siprintf+0x3c>)
 800b76c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b770:	9105      	str	r1, [sp, #20]
 800b772:	6800      	ldr	r0, [r0, #0]
 800b774:	9301      	str	r3, [sp, #4]
 800b776:	a902      	add	r1, sp, #8
 800b778:	f000 f870 	bl	800b85c <_svfiprintf_r>
 800b77c:	9b02      	ldr	r3, [sp, #8]
 800b77e:	2200      	movs	r2, #0
 800b780:	701a      	strb	r2, [r3, #0]
 800b782:	b01c      	add	sp, #112	; 0x70
 800b784:	f85d eb04 	ldr.w	lr, [sp], #4
 800b788:	b003      	add	sp, #12
 800b78a:	4770      	bx	lr
 800b78c:	24000024 	.word	0x24000024
 800b790:	ffff0208 	.word	0xffff0208

0800b794 <strcpy>:
 800b794:	4603      	mov	r3, r0
 800b796:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b79a:	f803 2b01 	strb.w	r2, [r3], #1
 800b79e:	2a00      	cmp	r2, #0
 800b7a0:	d1f9      	bne.n	800b796 <strcpy+0x2>
 800b7a2:	4770      	bx	lr

0800b7a4 <__ssputs_r>:
 800b7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7a8:	688e      	ldr	r6, [r1, #8]
 800b7aa:	429e      	cmp	r6, r3
 800b7ac:	4682      	mov	sl, r0
 800b7ae:	460c      	mov	r4, r1
 800b7b0:	4690      	mov	r8, r2
 800b7b2:	461f      	mov	r7, r3
 800b7b4:	d838      	bhi.n	800b828 <__ssputs_r+0x84>
 800b7b6:	898a      	ldrh	r2, [r1, #12]
 800b7b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b7bc:	d032      	beq.n	800b824 <__ssputs_r+0x80>
 800b7be:	6825      	ldr	r5, [r4, #0]
 800b7c0:	6909      	ldr	r1, [r1, #16]
 800b7c2:	eba5 0901 	sub.w	r9, r5, r1
 800b7c6:	6965      	ldr	r5, [r4, #20]
 800b7c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b7cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	444b      	add	r3, r9
 800b7d4:	106d      	asrs	r5, r5, #1
 800b7d6:	429d      	cmp	r5, r3
 800b7d8:	bf38      	it	cc
 800b7da:	461d      	movcc	r5, r3
 800b7dc:	0553      	lsls	r3, r2, #21
 800b7de:	d531      	bpl.n	800b844 <__ssputs_r+0xa0>
 800b7e0:	4629      	mov	r1, r5
 800b7e2:	f000 fb1f 	bl	800be24 <_malloc_r>
 800b7e6:	4606      	mov	r6, r0
 800b7e8:	b950      	cbnz	r0, 800b800 <__ssputs_r+0x5c>
 800b7ea:	230c      	movs	r3, #12
 800b7ec:	f8ca 3000 	str.w	r3, [sl]
 800b7f0:	89a3      	ldrh	r3, [r4, #12]
 800b7f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7f6:	81a3      	strh	r3, [r4, #12]
 800b7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b800:	6921      	ldr	r1, [r4, #16]
 800b802:	464a      	mov	r2, r9
 800b804:	f7ff ff76 	bl	800b6f4 <memcpy>
 800b808:	89a3      	ldrh	r3, [r4, #12]
 800b80a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b80e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b812:	81a3      	strh	r3, [r4, #12]
 800b814:	6126      	str	r6, [r4, #16]
 800b816:	6165      	str	r5, [r4, #20]
 800b818:	444e      	add	r6, r9
 800b81a:	eba5 0509 	sub.w	r5, r5, r9
 800b81e:	6026      	str	r6, [r4, #0]
 800b820:	60a5      	str	r5, [r4, #8]
 800b822:	463e      	mov	r6, r7
 800b824:	42be      	cmp	r6, r7
 800b826:	d900      	bls.n	800b82a <__ssputs_r+0x86>
 800b828:	463e      	mov	r6, r7
 800b82a:	4632      	mov	r2, r6
 800b82c:	6820      	ldr	r0, [r4, #0]
 800b82e:	4641      	mov	r1, r8
 800b830:	f7ff ff6e 	bl	800b710 <memmove>
 800b834:	68a3      	ldr	r3, [r4, #8]
 800b836:	6822      	ldr	r2, [r4, #0]
 800b838:	1b9b      	subs	r3, r3, r6
 800b83a:	4432      	add	r2, r6
 800b83c:	60a3      	str	r3, [r4, #8]
 800b83e:	6022      	str	r2, [r4, #0]
 800b840:	2000      	movs	r0, #0
 800b842:	e7db      	b.n	800b7fc <__ssputs_r+0x58>
 800b844:	462a      	mov	r2, r5
 800b846:	f000 fb47 	bl	800bed8 <_realloc_r>
 800b84a:	4606      	mov	r6, r0
 800b84c:	2800      	cmp	r0, #0
 800b84e:	d1e1      	bne.n	800b814 <__ssputs_r+0x70>
 800b850:	6921      	ldr	r1, [r4, #16]
 800b852:	4650      	mov	r0, sl
 800b854:	f000 fa96 	bl	800bd84 <_free_r>
 800b858:	e7c7      	b.n	800b7ea <__ssputs_r+0x46>
	...

0800b85c <_svfiprintf_r>:
 800b85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b860:	4698      	mov	r8, r3
 800b862:	898b      	ldrh	r3, [r1, #12]
 800b864:	061b      	lsls	r3, r3, #24
 800b866:	b09d      	sub	sp, #116	; 0x74
 800b868:	4607      	mov	r7, r0
 800b86a:	460d      	mov	r5, r1
 800b86c:	4614      	mov	r4, r2
 800b86e:	d50e      	bpl.n	800b88e <_svfiprintf_r+0x32>
 800b870:	690b      	ldr	r3, [r1, #16]
 800b872:	b963      	cbnz	r3, 800b88e <_svfiprintf_r+0x32>
 800b874:	2140      	movs	r1, #64	; 0x40
 800b876:	f000 fad5 	bl	800be24 <_malloc_r>
 800b87a:	6028      	str	r0, [r5, #0]
 800b87c:	6128      	str	r0, [r5, #16]
 800b87e:	b920      	cbnz	r0, 800b88a <_svfiprintf_r+0x2e>
 800b880:	230c      	movs	r3, #12
 800b882:	603b      	str	r3, [r7, #0]
 800b884:	f04f 30ff 	mov.w	r0, #4294967295
 800b888:	e0d1      	b.n	800ba2e <_svfiprintf_r+0x1d2>
 800b88a:	2340      	movs	r3, #64	; 0x40
 800b88c:	616b      	str	r3, [r5, #20]
 800b88e:	2300      	movs	r3, #0
 800b890:	9309      	str	r3, [sp, #36]	; 0x24
 800b892:	2320      	movs	r3, #32
 800b894:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b898:	f8cd 800c 	str.w	r8, [sp, #12]
 800b89c:	2330      	movs	r3, #48	; 0x30
 800b89e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ba48 <_svfiprintf_r+0x1ec>
 800b8a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8a6:	f04f 0901 	mov.w	r9, #1
 800b8aa:	4623      	mov	r3, r4
 800b8ac:	469a      	mov	sl, r3
 800b8ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8b2:	b10a      	cbz	r2, 800b8b8 <_svfiprintf_r+0x5c>
 800b8b4:	2a25      	cmp	r2, #37	; 0x25
 800b8b6:	d1f9      	bne.n	800b8ac <_svfiprintf_r+0x50>
 800b8b8:	ebba 0b04 	subs.w	fp, sl, r4
 800b8bc:	d00b      	beq.n	800b8d6 <_svfiprintf_r+0x7a>
 800b8be:	465b      	mov	r3, fp
 800b8c0:	4622      	mov	r2, r4
 800b8c2:	4629      	mov	r1, r5
 800b8c4:	4638      	mov	r0, r7
 800b8c6:	f7ff ff6d 	bl	800b7a4 <__ssputs_r>
 800b8ca:	3001      	adds	r0, #1
 800b8cc:	f000 80aa 	beq.w	800ba24 <_svfiprintf_r+0x1c8>
 800b8d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8d2:	445a      	add	r2, fp
 800b8d4:	9209      	str	r2, [sp, #36]	; 0x24
 800b8d6:	f89a 3000 	ldrb.w	r3, [sl]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	f000 80a2 	beq.w	800ba24 <_svfiprintf_r+0x1c8>
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b8e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8ea:	f10a 0a01 	add.w	sl, sl, #1
 800b8ee:	9304      	str	r3, [sp, #16]
 800b8f0:	9307      	str	r3, [sp, #28]
 800b8f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8f6:	931a      	str	r3, [sp, #104]	; 0x68
 800b8f8:	4654      	mov	r4, sl
 800b8fa:	2205      	movs	r2, #5
 800b8fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b900:	4851      	ldr	r0, [pc, #324]	; (800ba48 <_svfiprintf_r+0x1ec>)
 800b902:	f7f4 fcf5 	bl	80002f0 <memchr>
 800b906:	9a04      	ldr	r2, [sp, #16]
 800b908:	b9d8      	cbnz	r0, 800b942 <_svfiprintf_r+0xe6>
 800b90a:	06d0      	lsls	r0, r2, #27
 800b90c:	bf44      	itt	mi
 800b90e:	2320      	movmi	r3, #32
 800b910:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b914:	0711      	lsls	r1, r2, #28
 800b916:	bf44      	itt	mi
 800b918:	232b      	movmi	r3, #43	; 0x2b
 800b91a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b91e:	f89a 3000 	ldrb.w	r3, [sl]
 800b922:	2b2a      	cmp	r3, #42	; 0x2a
 800b924:	d015      	beq.n	800b952 <_svfiprintf_r+0xf6>
 800b926:	9a07      	ldr	r2, [sp, #28]
 800b928:	4654      	mov	r4, sl
 800b92a:	2000      	movs	r0, #0
 800b92c:	f04f 0c0a 	mov.w	ip, #10
 800b930:	4621      	mov	r1, r4
 800b932:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b936:	3b30      	subs	r3, #48	; 0x30
 800b938:	2b09      	cmp	r3, #9
 800b93a:	d94e      	bls.n	800b9da <_svfiprintf_r+0x17e>
 800b93c:	b1b0      	cbz	r0, 800b96c <_svfiprintf_r+0x110>
 800b93e:	9207      	str	r2, [sp, #28]
 800b940:	e014      	b.n	800b96c <_svfiprintf_r+0x110>
 800b942:	eba0 0308 	sub.w	r3, r0, r8
 800b946:	fa09 f303 	lsl.w	r3, r9, r3
 800b94a:	4313      	orrs	r3, r2
 800b94c:	9304      	str	r3, [sp, #16]
 800b94e:	46a2      	mov	sl, r4
 800b950:	e7d2      	b.n	800b8f8 <_svfiprintf_r+0x9c>
 800b952:	9b03      	ldr	r3, [sp, #12]
 800b954:	1d19      	adds	r1, r3, #4
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	9103      	str	r1, [sp, #12]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	bfbb      	ittet	lt
 800b95e:	425b      	neglt	r3, r3
 800b960:	f042 0202 	orrlt.w	r2, r2, #2
 800b964:	9307      	strge	r3, [sp, #28]
 800b966:	9307      	strlt	r3, [sp, #28]
 800b968:	bfb8      	it	lt
 800b96a:	9204      	strlt	r2, [sp, #16]
 800b96c:	7823      	ldrb	r3, [r4, #0]
 800b96e:	2b2e      	cmp	r3, #46	; 0x2e
 800b970:	d10c      	bne.n	800b98c <_svfiprintf_r+0x130>
 800b972:	7863      	ldrb	r3, [r4, #1]
 800b974:	2b2a      	cmp	r3, #42	; 0x2a
 800b976:	d135      	bne.n	800b9e4 <_svfiprintf_r+0x188>
 800b978:	9b03      	ldr	r3, [sp, #12]
 800b97a:	1d1a      	adds	r2, r3, #4
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	9203      	str	r2, [sp, #12]
 800b980:	2b00      	cmp	r3, #0
 800b982:	bfb8      	it	lt
 800b984:	f04f 33ff 	movlt.w	r3, #4294967295
 800b988:	3402      	adds	r4, #2
 800b98a:	9305      	str	r3, [sp, #20]
 800b98c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ba58 <_svfiprintf_r+0x1fc>
 800b990:	7821      	ldrb	r1, [r4, #0]
 800b992:	2203      	movs	r2, #3
 800b994:	4650      	mov	r0, sl
 800b996:	f7f4 fcab 	bl	80002f0 <memchr>
 800b99a:	b140      	cbz	r0, 800b9ae <_svfiprintf_r+0x152>
 800b99c:	2340      	movs	r3, #64	; 0x40
 800b99e:	eba0 000a 	sub.w	r0, r0, sl
 800b9a2:	fa03 f000 	lsl.w	r0, r3, r0
 800b9a6:	9b04      	ldr	r3, [sp, #16]
 800b9a8:	4303      	orrs	r3, r0
 800b9aa:	3401      	adds	r4, #1
 800b9ac:	9304      	str	r3, [sp, #16]
 800b9ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9b2:	4826      	ldr	r0, [pc, #152]	; (800ba4c <_svfiprintf_r+0x1f0>)
 800b9b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9b8:	2206      	movs	r2, #6
 800b9ba:	f7f4 fc99 	bl	80002f0 <memchr>
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	d038      	beq.n	800ba34 <_svfiprintf_r+0x1d8>
 800b9c2:	4b23      	ldr	r3, [pc, #140]	; (800ba50 <_svfiprintf_r+0x1f4>)
 800b9c4:	bb1b      	cbnz	r3, 800ba0e <_svfiprintf_r+0x1b2>
 800b9c6:	9b03      	ldr	r3, [sp, #12]
 800b9c8:	3307      	adds	r3, #7
 800b9ca:	f023 0307 	bic.w	r3, r3, #7
 800b9ce:	3308      	adds	r3, #8
 800b9d0:	9303      	str	r3, [sp, #12]
 800b9d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9d4:	4433      	add	r3, r6
 800b9d6:	9309      	str	r3, [sp, #36]	; 0x24
 800b9d8:	e767      	b.n	800b8aa <_svfiprintf_r+0x4e>
 800b9da:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9de:	460c      	mov	r4, r1
 800b9e0:	2001      	movs	r0, #1
 800b9e2:	e7a5      	b.n	800b930 <_svfiprintf_r+0xd4>
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	3401      	adds	r4, #1
 800b9e8:	9305      	str	r3, [sp, #20]
 800b9ea:	4619      	mov	r1, r3
 800b9ec:	f04f 0c0a 	mov.w	ip, #10
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9f6:	3a30      	subs	r2, #48	; 0x30
 800b9f8:	2a09      	cmp	r2, #9
 800b9fa:	d903      	bls.n	800ba04 <_svfiprintf_r+0x1a8>
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d0c5      	beq.n	800b98c <_svfiprintf_r+0x130>
 800ba00:	9105      	str	r1, [sp, #20]
 800ba02:	e7c3      	b.n	800b98c <_svfiprintf_r+0x130>
 800ba04:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba08:	4604      	mov	r4, r0
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	e7f0      	b.n	800b9f0 <_svfiprintf_r+0x194>
 800ba0e:	ab03      	add	r3, sp, #12
 800ba10:	9300      	str	r3, [sp, #0]
 800ba12:	462a      	mov	r2, r5
 800ba14:	4b0f      	ldr	r3, [pc, #60]	; (800ba54 <_svfiprintf_r+0x1f8>)
 800ba16:	a904      	add	r1, sp, #16
 800ba18:	4638      	mov	r0, r7
 800ba1a:	f3af 8000 	nop.w
 800ba1e:	1c42      	adds	r2, r0, #1
 800ba20:	4606      	mov	r6, r0
 800ba22:	d1d6      	bne.n	800b9d2 <_svfiprintf_r+0x176>
 800ba24:	89ab      	ldrh	r3, [r5, #12]
 800ba26:	065b      	lsls	r3, r3, #25
 800ba28:	f53f af2c 	bmi.w	800b884 <_svfiprintf_r+0x28>
 800ba2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba2e:	b01d      	add	sp, #116	; 0x74
 800ba30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba34:	ab03      	add	r3, sp, #12
 800ba36:	9300      	str	r3, [sp, #0]
 800ba38:	462a      	mov	r2, r5
 800ba3a:	4b06      	ldr	r3, [pc, #24]	; (800ba54 <_svfiprintf_r+0x1f8>)
 800ba3c:	a904      	add	r1, sp, #16
 800ba3e:	4638      	mov	r0, r7
 800ba40:	f000 f87a 	bl	800bb38 <_printf_i>
 800ba44:	e7eb      	b.n	800ba1e <_svfiprintf_r+0x1c2>
 800ba46:	bf00      	nop
 800ba48:	0800c794 	.word	0x0800c794
 800ba4c:	0800c79e 	.word	0x0800c79e
 800ba50:	00000000 	.word	0x00000000
 800ba54:	0800b7a5 	.word	0x0800b7a5
 800ba58:	0800c79a 	.word	0x0800c79a

0800ba5c <_printf_common>:
 800ba5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba60:	4616      	mov	r6, r2
 800ba62:	4699      	mov	r9, r3
 800ba64:	688a      	ldr	r2, [r1, #8]
 800ba66:	690b      	ldr	r3, [r1, #16]
 800ba68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	bfb8      	it	lt
 800ba70:	4613      	movlt	r3, r2
 800ba72:	6033      	str	r3, [r6, #0]
 800ba74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba78:	4607      	mov	r7, r0
 800ba7a:	460c      	mov	r4, r1
 800ba7c:	b10a      	cbz	r2, 800ba82 <_printf_common+0x26>
 800ba7e:	3301      	adds	r3, #1
 800ba80:	6033      	str	r3, [r6, #0]
 800ba82:	6823      	ldr	r3, [r4, #0]
 800ba84:	0699      	lsls	r1, r3, #26
 800ba86:	bf42      	ittt	mi
 800ba88:	6833      	ldrmi	r3, [r6, #0]
 800ba8a:	3302      	addmi	r3, #2
 800ba8c:	6033      	strmi	r3, [r6, #0]
 800ba8e:	6825      	ldr	r5, [r4, #0]
 800ba90:	f015 0506 	ands.w	r5, r5, #6
 800ba94:	d106      	bne.n	800baa4 <_printf_common+0x48>
 800ba96:	f104 0a19 	add.w	sl, r4, #25
 800ba9a:	68e3      	ldr	r3, [r4, #12]
 800ba9c:	6832      	ldr	r2, [r6, #0]
 800ba9e:	1a9b      	subs	r3, r3, r2
 800baa0:	42ab      	cmp	r3, r5
 800baa2:	dc26      	bgt.n	800baf2 <_printf_common+0x96>
 800baa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800baa8:	1e13      	subs	r3, r2, #0
 800baaa:	6822      	ldr	r2, [r4, #0]
 800baac:	bf18      	it	ne
 800baae:	2301      	movne	r3, #1
 800bab0:	0692      	lsls	r2, r2, #26
 800bab2:	d42b      	bmi.n	800bb0c <_printf_common+0xb0>
 800bab4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bab8:	4649      	mov	r1, r9
 800baba:	4638      	mov	r0, r7
 800babc:	47c0      	blx	r8
 800babe:	3001      	adds	r0, #1
 800bac0:	d01e      	beq.n	800bb00 <_printf_common+0xa4>
 800bac2:	6823      	ldr	r3, [r4, #0]
 800bac4:	68e5      	ldr	r5, [r4, #12]
 800bac6:	6832      	ldr	r2, [r6, #0]
 800bac8:	f003 0306 	and.w	r3, r3, #6
 800bacc:	2b04      	cmp	r3, #4
 800bace:	bf08      	it	eq
 800bad0:	1aad      	subeq	r5, r5, r2
 800bad2:	68a3      	ldr	r3, [r4, #8]
 800bad4:	6922      	ldr	r2, [r4, #16]
 800bad6:	bf0c      	ite	eq
 800bad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800badc:	2500      	movne	r5, #0
 800bade:	4293      	cmp	r3, r2
 800bae0:	bfc4      	itt	gt
 800bae2:	1a9b      	subgt	r3, r3, r2
 800bae4:	18ed      	addgt	r5, r5, r3
 800bae6:	2600      	movs	r6, #0
 800bae8:	341a      	adds	r4, #26
 800baea:	42b5      	cmp	r5, r6
 800baec:	d11a      	bne.n	800bb24 <_printf_common+0xc8>
 800baee:	2000      	movs	r0, #0
 800baf0:	e008      	b.n	800bb04 <_printf_common+0xa8>
 800baf2:	2301      	movs	r3, #1
 800baf4:	4652      	mov	r2, sl
 800baf6:	4649      	mov	r1, r9
 800baf8:	4638      	mov	r0, r7
 800bafa:	47c0      	blx	r8
 800bafc:	3001      	adds	r0, #1
 800bafe:	d103      	bne.n	800bb08 <_printf_common+0xac>
 800bb00:	f04f 30ff 	mov.w	r0, #4294967295
 800bb04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb08:	3501      	adds	r5, #1
 800bb0a:	e7c6      	b.n	800ba9a <_printf_common+0x3e>
 800bb0c:	18e1      	adds	r1, r4, r3
 800bb0e:	1c5a      	adds	r2, r3, #1
 800bb10:	2030      	movs	r0, #48	; 0x30
 800bb12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb16:	4422      	add	r2, r4
 800bb18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb20:	3302      	adds	r3, #2
 800bb22:	e7c7      	b.n	800bab4 <_printf_common+0x58>
 800bb24:	2301      	movs	r3, #1
 800bb26:	4622      	mov	r2, r4
 800bb28:	4649      	mov	r1, r9
 800bb2a:	4638      	mov	r0, r7
 800bb2c:	47c0      	blx	r8
 800bb2e:	3001      	adds	r0, #1
 800bb30:	d0e6      	beq.n	800bb00 <_printf_common+0xa4>
 800bb32:	3601      	adds	r6, #1
 800bb34:	e7d9      	b.n	800baea <_printf_common+0x8e>
	...

0800bb38 <_printf_i>:
 800bb38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb3c:	460c      	mov	r4, r1
 800bb3e:	4691      	mov	r9, r2
 800bb40:	7e27      	ldrb	r7, [r4, #24]
 800bb42:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bb44:	2f78      	cmp	r7, #120	; 0x78
 800bb46:	4680      	mov	r8, r0
 800bb48:	469a      	mov	sl, r3
 800bb4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb4e:	d807      	bhi.n	800bb60 <_printf_i+0x28>
 800bb50:	2f62      	cmp	r7, #98	; 0x62
 800bb52:	d80a      	bhi.n	800bb6a <_printf_i+0x32>
 800bb54:	2f00      	cmp	r7, #0
 800bb56:	f000 80d8 	beq.w	800bd0a <_printf_i+0x1d2>
 800bb5a:	2f58      	cmp	r7, #88	; 0x58
 800bb5c:	f000 80a3 	beq.w	800bca6 <_printf_i+0x16e>
 800bb60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bb64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb68:	e03a      	b.n	800bbe0 <_printf_i+0xa8>
 800bb6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb6e:	2b15      	cmp	r3, #21
 800bb70:	d8f6      	bhi.n	800bb60 <_printf_i+0x28>
 800bb72:	a001      	add	r0, pc, #4	; (adr r0, 800bb78 <_printf_i+0x40>)
 800bb74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bb78:	0800bbd1 	.word	0x0800bbd1
 800bb7c:	0800bbe5 	.word	0x0800bbe5
 800bb80:	0800bb61 	.word	0x0800bb61
 800bb84:	0800bb61 	.word	0x0800bb61
 800bb88:	0800bb61 	.word	0x0800bb61
 800bb8c:	0800bb61 	.word	0x0800bb61
 800bb90:	0800bbe5 	.word	0x0800bbe5
 800bb94:	0800bb61 	.word	0x0800bb61
 800bb98:	0800bb61 	.word	0x0800bb61
 800bb9c:	0800bb61 	.word	0x0800bb61
 800bba0:	0800bb61 	.word	0x0800bb61
 800bba4:	0800bcf1 	.word	0x0800bcf1
 800bba8:	0800bc15 	.word	0x0800bc15
 800bbac:	0800bcd3 	.word	0x0800bcd3
 800bbb0:	0800bb61 	.word	0x0800bb61
 800bbb4:	0800bb61 	.word	0x0800bb61
 800bbb8:	0800bd13 	.word	0x0800bd13
 800bbbc:	0800bb61 	.word	0x0800bb61
 800bbc0:	0800bc15 	.word	0x0800bc15
 800bbc4:	0800bb61 	.word	0x0800bb61
 800bbc8:	0800bb61 	.word	0x0800bb61
 800bbcc:	0800bcdb 	.word	0x0800bcdb
 800bbd0:	680b      	ldr	r3, [r1, #0]
 800bbd2:	1d1a      	adds	r2, r3, #4
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	600a      	str	r2, [r1, #0]
 800bbd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bbdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	e0a3      	b.n	800bd2c <_printf_i+0x1f4>
 800bbe4:	6825      	ldr	r5, [r4, #0]
 800bbe6:	6808      	ldr	r0, [r1, #0]
 800bbe8:	062e      	lsls	r6, r5, #24
 800bbea:	f100 0304 	add.w	r3, r0, #4
 800bbee:	d50a      	bpl.n	800bc06 <_printf_i+0xce>
 800bbf0:	6805      	ldr	r5, [r0, #0]
 800bbf2:	600b      	str	r3, [r1, #0]
 800bbf4:	2d00      	cmp	r5, #0
 800bbf6:	da03      	bge.n	800bc00 <_printf_i+0xc8>
 800bbf8:	232d      	movs	r3, #45	; 0x2d
 800bbfa:	426d      	negs	r5, r5
 800bbfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc00:	485e      	ldr	r0, [pc, #376]	; (800bd7c <_printf_i+0x244>)
 800bc02:	230a      	movs	r3, #10
 800bc04:	e019      	b.n	800bc3a <_printf_i+0x102>
 800bc06:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bc0a:	6805      	ldr	r5, [r0, #0]
 800bc0c:	600b      	str	r3, [r1, #0]
 800bc0e:	bf18      	it	ne
 800bc10:	b22d      	sxthne	r5, r5
 800bc12:	e7ef      	b.n	800bbf4 <_printf_i+0xbc>
 800bc14:	680b      	ldr	r3, [r1, #0]
 800bc16:	6825      	ldr	r5, [r4, #0]
 800bc18:	1d18      	adds	r0, r3, #4
 800bc1a:	6008      	str	r0, [r1, #0]
 800bc1c:	0628      	lsls	r0, r5, #24
 800bc1e:	d501      	bpl.n	800bc24 <_printf_i+0xec>
 800bc20:	681d      	ldr	r5, [r3, #0]
 800bc22:	e002      	b.n	800bc2a <_printf_i+0xf2>
 800bc24:	0669      	lsls	r1, r5, #25
 800bc26:	d5fb      	bpl.n	800bc20 <_printf_i+0xe8>
 800bc28:	881d      	ldrh	r5, [r3, #0]
 800bc2a:	4854      	ldr	r0, [pc, #336]	; (800bd7c <_printf_i+0x244>)
 800bc2c:	2f6f      	cmp	r7, #111	; 0x6f
 800bc2e:	bf0c      	ite	eq
 800bc30:	2308      	moveq	r3, #8
 800bc32:	230a      	movne	r3, #10
 800bc34:	2100      	movs	r1, #0
 800bc36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc3a:	6866      	ldr	r6, [r4, #4]
 800bc3c:	60a6      	str	r6, [r4, #8]
 800bc3e:	2e00      	cmp	r6, #0
 800bc40:	bfa2      	ittt	ge
 800bc42:	6821      	ldrge	r1, [r4, #0]
 800bc44:	f021 0104 	bicge.w	r1, r1, #4
 800bc48:	6021      	strge	r1, [r4, #0]
 800bc4a:	b90d      	cbnz	r5, 800bc50 <_printf_i+0x118>
 800bc4c:	2e00      	cmp	r6, #0
 800bc4e:	d04d      	beq.n	800bcec <_printf_i+0x1b4>
 800bc50:	4616      	mov	r6, r2
 800bc52:	fbb5 f1f3 	udiv	r1, r5, r3
 800bc56:	fb03 5711 	mls	r7, r3, r1, r5
 800bc5a:	5dc7      	ldrb	r7, [r0, r7]
 800bc5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bc60:	462f      	mov	r7, r5
 800bc62:	42bb      	cmp	r3, r7
 800bc64:	460d      	mov	r5, r1
 800bc66:	d9f4      	bls.n	800bc52 <_printf_i+0x11a>
 800bc68:	2b08      	cmp	r3, #8
 800bc6a:	d10b      	bne.n	800bc84 <_printf_i+0x14c>
 800bc6c:	6823      	ldr	r3, [r4, #0]
 800bc6e:	07df      	lsls	r7, r3, #31
 800bc70:	d508      	bpl.n	800bc84 <_printf_i+0x14c>
 800bc72:	6923      	ldr	r3, [r4, #16]
 800bc74:	6861      	ldr	r1, [r4, #4]
 800bc76:	4299      	cmp	r1, r3
 800bc78:	bfde      	ittt	le
 800bc7a:	2330      	movle	r3, #48	; 0x30
 800bc7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bc80:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bc84:	1b92      	subs	r2, r2, r6
 800bc86:	6122      	str	r2, [r4, #16]
 800bc88:	f8cd a000 	str.w	sl, [sp]
 800bc8c:	464b      	mov	r3, r9
 800bc8e:	aa03      	add	r2, sp, #12
 800bc90:	4621      	mov	r1, r4
 800bc92:	4640      	mov	r0, r8
 800bc94:	f7ff fee2 	bl	800ba5c <_printf_common>
 800bc98:	3001      	adds	r0, #1
 800bc9a:	d14c      	bne.n	800bd36 <_printf_i+0x1fe>
 800bc9c:	f04f 30ff 	mov.w	r0, #4294967295
 800bca0:	b004      	add	sp, #16
 800bca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bca6:	4835      	ldr	r0, [pc, #212]	; (800bd7c <_printf_i+0x244>)
 800bca8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bcac:	6823      	ldr	r3, [r4, #0]
 800bcae:	680e      	ldr	r6, [r1, #0]
 800bcb0:	061f      	lsls	r7, r3, #24
 800bcb2:	f856 5b04 	ldr.w	r5, [r6], #4
 800bcb6:	600e      	str	r6, [r1, #0]
 800bcb8:	d514      	bpl.n	800bce4 <_printf_i+0x1ac>
 800bcba:	07d9      	lsls	r1, r3, #31
 800bcbc:	bf44      	itt	mi
 800bcbe:	f043 0320 	orrmi.w	r3, r3, #32
 800bcc2:	6023      	strmi	r3, [r4, #0]
 800bcc4:	b91d      	cbnz	r5, 800bcce <_printf_i+0x196>
 800bcc6:	6823      	ldr	r3, [r4, #0]
 800bcc8:	f023 0320 	bic.w	r3, r3, #32
 800bccc:	6023      	str	r3, [r4, #0]
 800bcce:	2310      	movs	r3, #16
 800bcd0:	e7b0      	b.n	800bc34 <_printf_i+0xfc>
 800bcd2:	6823      	ldr	r3, [r4, #0]
 800bcd4:	f043 0320 	orr.w	r3, r3, #32
 800bcd8:	6023      	str	r3, [r4, #0]
 800bcda:	2378      	movs	r3, #120	; 0x78
 800bcdc:	4828      	ldr	r0, [pc, #160]	; (800bd80 <_printf_i+0x248>)
 800bcde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bce2:	e7e3      	b.n	800bcac <_printf_i+0x174>
 800bce4:	065e      	lsls	r6, r3, #25
 800bce6:	bf48      	it	mi
 800bce8:	b2ad      	uxthmi	r5, r5
 800bcea:	e7e6      	b.n	800bcba <_printf_i+0x182>
 800bcec:	4616      	mov	r6, r2
 800bcee:	e7bb      	b.n	800bc68 <_printf_i+0x130>
 800bcf0:	680b      	ldr	r3, [r1, #0]
 800bcf2:	6826      	ldr	r6, [r4, #0]
 800bcf4:	6960      	ldr	r0, [r4, #20]
 800bcf6:	1d1d      	adds	r5, r3, #4
 800bcf8:	600d      	str	r5, [r1, #0]
 800bcfa:	0635      	lsls	r5, r6, #24
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	d501      	bpl.n	800bd04 <_printf_i+0x1cc>
 800bd00:	6018      	str	r0, [r3, #0]
 800bd02:	e002      	b.n	800bd0a <_printf_i+0x1d2>
 800bd04:	0671      	lsls	r1, r6, #25
 800bd06:	d5fb      	bpl.n	800bd00 <_printf_i+0x1c8>
 800bd08:	8018      	strh	r0, [r3, #0]
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	6123      	str	r3, [r4, #16]
 800bd0e:	4616      	mov	r6, r2
 800bd10:	e7ba      	b.n	800bc88 <_printf_i+0x150>
 800bd12:	680b      	ldr	r3, [r1, #0]
 800bd14:	1d1a      	adds	r2, r3, #4
 800bd16:	600a      	str	r2, [r1, #0]
 800bd18:	681e      	ldr	r6, [r3, #0]
 800bd1a:	6862      	ldr	r2, [r4, #4]
 800bd1c:	2100      	movs	r1, #0
 800bd1e:	4630      	mov	r0, r6
 800bd20:	f7f4 fae6 	bl	80002f0 <memchr>
 800bd24:	b108      	cbz	r0, 800bd2a <_printf_i+0x1f2>
 800bd26:	1b80      	subs	r0, r0, r6
 800bd28:	6060      	str	r0, [r4, #4]
 800bd2a:	6863      	ldr	r3, [r4, #4]
 800bd2c:	6123      	str	r3, [r4, #16]
 800bd2e:	2300      	movs	r3, #0
 800bd30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd34:	e7a8      	b.n	800bc88 <_printf_i+0x150>
 800bd36:	6923      	ldr	r3, [r4, #16]
 800bd38:	4632      	mov	r2, r6
 800bd3a:	4649      	mov	r1, r9
 800bd3c:	4640      	mov	r0, r8
 800bd3e:	47d0      	blx	sl
 800bd40:	3001      	adds	r0, #1
 800bd42:	d0ab      	beq.n	800bc9c <_printf_i+0x164>
 800bd44:	6823      	ldr	r3, [r4, #0]
 800bd46:	079b      	lsls	r3, r3, #30
 800bd48:	d413      	bmi.n	800bd72 <_printf_i+0x23a>
 800bd4a:	68e0      	ldr	r0, [r4, #12]
 800bd4c:	9b03      	ldr	r3, [sp, #12]
 800bd4e:	4298      	cmp	r0, r3
 800bd50:	bfb8      	it	lt
 800bd52:	4618      	movlt	r0, r3
 800bd54:	e7a4      	b.n	800bca0 <_printf_i+0x168>
 800bd56:	2301      	movs	r3, #1
 800bd58:	4632      	mov	r2, r6
 800bd5a:	4649      	mov	r1, r9
 800bd5c:	4640      	mov	r0, r8
 800bd5e:	47d0      	blx	sl
 800bd60:	3001      	adds	r0, #1
 800bd62:	d09b      	beq.n	800bc9c <_printf_i+0x164>
 800bd64:	3501      	adds	r5, #1
 800bd66:	68e3      	ldr	r3, [r4, #12]
 800bd68:	9903      	ldr	r1, [sp, #12]
 800bd6a:	1a5b      	subs	r3, r3, r1
 800bd6c:	42ab      	cmp	r3, r5
 800bd6e:	dcf2      	bgt.n	800bd56 <_printf_i+0x21e>
 800bd70:	e7eb      	b.n	800bd4a <_printf_i+0x212>
 800bd72:	2500      	movs	r5, #0
 800bd74:	f104 0619 	add.w	r6, r4, #25
 800bd78:	e7f5      	b.n	800bd66 <_printf_i+0x22e>
 800bd7a:	bf00      	nop
 800bd7c:	0800c7a5 	.word	0x0800c7a5
 800bd80:	0800c7b6 	.word	0x0800c7b6

0800bd84 <_free_r>:
 800bd84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd86:	2900      	cmp	r1, #0
 800bd88:	d048      	beq.n	800be1c <_free_r+0x98>
 800bd8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd8e:	9001      	str	r0, [sp, #4]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	f1a1 0404 	sub.w	r4, r1, #4
 800bd96:	bfb8      	it	lt
 800bd98:	18e4      	addlt	r4, r4, r3
 800bd9a:	f000 f8d3 	bl	800bf44 <__malloc_lock>
 800bd9e:	4a20      	ldr	r2, [pc, #128]	; (800be20 <_free_r+0x9c>)
 800bda0:	9801      	ldr	r0, [sp, #4]
 800bda2:	6813      	ldr	r3, [r2, #0]
 800bda4:	4615      	mov	r5, r2
 800bda6:	b933      	cbnz	r3, 800bdb6 <_free_r+0x32>
 800bda8:	6063      	str	r3, [r4, #4]
 800bdaa:	6014      	str	r4, [r2, #0]
 800bdac:	b003      	add	sp, #12
 800bdae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bdb2:	f000 b8cd 	b.w	800bf50 <__malloc_unlock>
 800bdb6:	42a3      	cmp	r3, r4
 800bdb8:	d90b      	bls.n	800bdd2 <_free_r+0x4e>
 800bdba:	6821      	ldr	r1, [r4, #0]
 800bdbc:	1862      	adds	r2, r4, r1
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	bf04      	itt	eq
 800bdc2:	681a      	ldreq	r2, [r3, #0]
 800bdc4:	685b      	ldreq	r3, [r3, #4]
 800bdc6:	6063      	str	r3, [r4, #4]
 800bdc8:	bf04      	itt	eq
 800bdca:	1852      	addeq	r2, r2, r1
 800bdcc:	6022      	streq	r2, [r4, #0]
 800bdce:	602c      	str	r4, [r5, #0]
 800bdd0:	e7ec      	b.n	800bdac <_free_r+0x28>
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	b10b      	cbz	r3, 800bddc <_free_r+0x58>
 800bdd8:	42a3      	cmp	r3, r4
 800bdda:	d9fa      	bls.n	800bdd2 <_free_r+0x4e>
 800bddc:	6811      	ldr	r1, [r2, #0]
 800bdde:	1855      	adds	r5, r2, r1
 800bde0:	42a5      	cmp	r5, r4
 800bde2:	d10b      	bne.n	800bdfc <_free_r+0x78>
 800bde4:	6824      	ldr	r4, [r4, #0]
 800bde6:	4421      	add	r1, r4
 800bde8:	1854      	adds	r4, r2, r1
 800bdea:	42a3      	cmp	r3, r4
 800bdec:	6011      	str	r1, [r2, #0]
 800bdee:	d1dd      	bne.n	800bdac <_free_r+0x28>
 800bdf0:	681c      	ldr	r4, [r3, #0]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	6053      	str	r3, [r2, #4]
 800bdf6:	4421      	add	r1, r4
 800bdf8:	6011      	str	r1, [r2, #0]
 800bdfa:	e7d7      	b.n	800bdac <_free_r+0x28>
 800bdfc:	d902      	bls.n	800be04 <_free_r+0x80>
 800bdfe:	230c      	movs	r3, #12
 800be00:	6003      	str	r3, [r0, #0]
 800be02:	e7d3      	b.n	800bdac <_free_r+0x28>
 800be04:	6825      	ldr	r5, [r4, #0]
 800be06:	1961      	adds	r1, r4, r5
 800be08:	428b      	cmp	r3, r1
 800be0a:	bf04      	itt	eq
 800be0c:	6819      	ldreq	r1, [r3, #0]
 800be0e:	685b      	ldreq	r3, [r3, #4]
 800be10:	6063      	str	r3, [r4, #4]
 800be12:	bf04      	itt	eq
 800be14:	1949      	addeq	r1, r1, r5
 800be16:	6021      	streq	r1, [r4, #0]
 800be18:	6054      	str	r4, [r2, #4]
 800be1a:	e7c7      	b.n	800bdac <_free_r+0x28>
 800be1c:	b003      	add	sp, #12
 800be1e:	bd30      	pop	{r4, r5, pc}
 800be20:	240004cc 	.word	0x240004cc

0800be24 <_malloc_r>:
 800be24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be26:	1ccd      	adds	r5, r1, #3
 800be28:	f025 0503 	bic.w	r5, r5, #3
 800be2c:	3508      	adds	r5, #8
 800be2e:	2d0c      	cmp	r5, #12
 800be30:	bf38      	it	cc
 800be32:	250c      	movcc	r5, #12
 800be34:	2d00      	cmp	r5, #0
 800be36:	4606      	mov	r6, r0
 800be38:	db01      	blt.n	800be3e <_malloc_r+0x1a>
 800be3a:	42a9      	cmp	r1, r5
 800be3c:	d903      	bls.n	800be46 <_malloc_r+0x22>
 800be3e:	230c      	movs	r3, #12
 800be40:	6033      	str	r3, [r6, #0]
 800be42:	2000      	movs	r0, #0
 800be44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be46:	f000 f87d 	bl	800bf44 <__malloc_lock>
 800be4a:	4921      	ldr	r1, [pc, #132]	; (800bed0 <_malloc_r+0xac>)
 800be4c:	680a      	ldr	r2, [r1, #0]
 800be4e:	4614      	mov	r4, r2
 800be50:	b99c      	cbnz	r4, 800be7a <_malloc_r+0x56>
 800be52:	4f20      	ldr	r7, [pc, #128]	; (800bed4 <_malloc_r+0xb0>)
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	b923      	cbnz	r3, 800be62 <_malloc_r+0x3e>
 800be58:	4621      	mov	r1, r4
 800be5a:	4630      	mov	r0, r6
 800be5c:	f000 f862 	bl	800bf24 <_sbrk_r>
 800be60:	6038      	str	r0, [r7, #0]
 800be62:	4629      	mov	r1, r5
 800be64:	4630      	mov	r0, r6
 800be66:	f000 f85d 	bl	800bf24 <_sbrk_r>
 800be6a:	1c43      	adds	r3, r0, #1
 800be6c:	d123      	bne.n	800beb6 <_malloc_r+0x92>
 800be6e:	230c      	movs	r3, #12
 800be70:	6033      	str	r3, [r6, #0]
 800be72:	4630      	mov	r0, r6
 800be74:	f000 f86c 	bl	800bf50 <__malloc_unlock>
 800be78:	e7e3      	b.n	800be42 <_malloc_r+0x1e>
 800be7a:	6823      	ldr	r3, [r4, #0]
 800be7c:	1b5b      	subs	r3, r3, r5
 800be7e:	d417      	bmi.n	800beb0 <_malloc_r+0x8c>
 800be80:	2b0b      	cmp	r3, #11
 800be82:	d903      	bls.n	800be8c <_malloc_r+0x68>
 800be84:	6023      	str	r3, [r4, #0]
 800be86:	441c      	add	r4, r3
 800be88:	6025      	str	r5, [r4, #0]
 800be8a:	e004      	b.n	800be96 <_malloc_r+0x72>
 800be8c:	6863      	ldr	r3, [r4, #4]
 800be8e:	42a2      	cmp	r2, r4
 800be90:	bf0c      	ite	eq
 800be92:	600b      	streq	r3, [r1, #0]
 800be94:	6053      	strne	r3, [r2, #4]
 800be96:	4630      	mov	r0, r6
 800be98:	f000 f85a 	bl	800bf50 <__malloc_unlock>
 800be9c:	f104 000b 	add.w	r0, r4, #11
 800bea0:	1d23      	adds	r3, r4, #4
 800bea2:	f020 0007 	bic.w	r0, r0, #7
 800bea6:	1ac2      	subs	r2, r0, r3
 800bea8:	d0cc      	beq.n	800be44 <_malloc_r+0x20>
 800beaa:	1a1b      	subs	r3, r3, r0
 800beac:	50a3      	str	r3, [r4, r2]
 800beae:	e7c9      	b.n	800be44 <_malloc_r+0x20>
 800beb0:	4622      	mov	r2, r4
 800beb2:	6864      	ldr	r4, [r4, #4]
 800beb4:	e7cc      	b.n	800be50 <_malloc_r+0x2c>
 800beb6:	1cc4      	adds	r4, r0, #3
 800beb8:	f024 0403 	bic.w	r4, r4, #3
 800bebc:	42a0      	cmp	r0, r4
 800bebe:	d0e3      	beq.n	800be88 <_malloc_r+0x64>
 800bec0:	1a21      	subs	r1, r4, r0
 800bec2:	4630      	mov	r0, r6
 800bec4:	f000 f82e 	bl	800bf24 <_sbrk_r>
 800bec8:	3001      	adds	r0, #1
 800beca:	d1dd      	bne.n	800be88 <_malloc_r+0x64>
 800becc:	e7cf      	b.n	800be6e <_malloc_r+0x4a>
 800bece:	bf00      	nop
 800bed0:	240004cc 	.word	0x240004cc
 800bed4:	240004d0 	.word	0x240004d0

0800bed8 <_realloc_r>:
 800bed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beda:	4607      	mov	r7, r0
 800bedc:	4614      	mov	r4, r2
 800bede:	460e      	mov	r6, r1
 800bee0:	b921      	cbnz	r1, 800beec <_realloc_r+0x14>
 800bee2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bee6:	4611      	mov	r1, r2
 800bee8:	f7ff bf9c 	b.w	800be24 <_malloc_r>
 800beec:	b922      	cbnz	r2, 800bef8 <_realloc_r+0x20>
 800beee:	f7ff ff49 	bl	800bd84 <_free_r>
 800bef2:	4625      	mov	r5, r4
 800bef4:	4628      	mov	r0, r5
 800bef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bef8:	f000 f830 	bl	800bf5c <_malloc_usable_size_r>
 800befc:	42a0      	cmp	r0, r4
 800befe:	d20f      	bcs.n	800bf20 <_realloc_r+0x48>
 800bf00:	4621      	mov	r1, r4
 800bf02:	4638      	mov	r0, r7
 800bf04:	f7ff ff8e 	bl	800be24 <_malloc_r>
 800bf08:	4605      	mov	r5, r0
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	d0f2      	beq.n	800bef4 <_realloc_r+0x1c>
 800bf0e:	4631      	mov	r1, r6
 800bf10:	4622      	mov	r2, r4
 800bf12:	f7ff fbef 	bl	800b6f4 <memcpy>
 800bf16:	4631      	mov	r1, r6
 800bf18:	4638      	mov	r0, r7
 800bf1a:	f7ff ff33 	bl	800bd84 <_free_r>
 800bf1e:	e7e9      	b.n	800bef4 <_realloc_r+0x1c>
 800bf20:	4635      	mov	r5, r6
 800bf22:	e7e7      	b.n	800bef4 <_realloc_r+0x1c>

0800bf24 <_sbrk_r>:
 800bf24:	b538      	push	{r3, r4, r5, lr}
 800bf26:	4d06      	ldr	r5, [pc, #24]	; (800bf40 <_sbrk_r+0x1c>)
 800bf28:	2300      	movs	r3, #0
 800bf2a:	4604      	mov	r4, r0
 800bf2c:	4608      	mov	r0, r1
 800bf2e:	602b      	str	r3, [r5, #0]
 800bf30:	f7f6 fc10 	bl	8002754 <_sbrk>
 800bf34:	1c43      	adds	r3, r0, #1
 800bf36:	d102      	bne.n	800bf3e <_sbrk_r+0x1a>
 800bf38:	682b      	ldr	r3, [r5, #0]
 800bf3a:	b103      	cbz	r3, 800bf3e <_sbrk_r+0x1a>
 800bf3c:	6023      	str	r3, [r4, #0]
 800bf3e:	bd38      	pop	{r3, r4, r5, pc}
 800bf40:	24003d2c 	.word	0x24003d2c

0800bf44 <__malloc_lock>:
 800bf44:	4801      	ldr	r0, [pc, #4]	; (800bf4c <__malloc_lock+0x8>)
 800bf46:	f000 b811 	b.w	800bf6c <__retarget_lock_acquire_recursive>
 800bf4a:	bf00      	nop
 800bf4c:	24003d34 	.word	0x24003d34

0800bf50 <__malloc_unlock>:
 800bf50:	4801      	ldr	r0, [pc, #4]	; (800bf58 <__malloc_unlock+0x8>)
 800bf52:	f000 b80c 	b.w	800bf6e <__retarget_lock_release_recursive>
 800bf56:	bf00      	nop
 800bf58:	24003d34 	.word	0x24003d34

0800bf5c <_malloc_usable_size_r>:
 800bf5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf60:	1f18      	subs	r0, r3, #4
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	bfbc      	itt	lt
 800bf66:	580b      	ldrlt	r3, [r1, r0]
 800bf68:	18c0      	addlt	r0, r0, r3
 800bf6a:	4770      	bx	lr

0800bf6c <__retarget_lock_acquire_recursive>:
 800bf6c:	4770      	bx	lr

0800bf6e <__retarget_lock_release_recursive>:
 800bf6e:	4770      	bx	lr

0800bf70 <_init>:
 800bf70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf72:	bf00      	nop
 800bf74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf76:	bc08      	pop	{r3}
 800bf78:	469e      	mov	lr, r3
 800bf7a:	4770      	bx	lr

0800bf7c <_fini>:
 800bf7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf7e:	bf00      	nop
 800bf80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf82:	bc08      	pop	{r3}
 800bf84:	469e      	mov	lr, r3
 800bf86:	4770      	bx	lr
