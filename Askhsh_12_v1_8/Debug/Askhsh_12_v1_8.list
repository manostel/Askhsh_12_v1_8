
Askhsh_12_v1_8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c648  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003080  0800c8e8  0800c8e8  0001c8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f968  0800f968  0001f968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f970  0800f970  0001f970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f974  0800f974  0001f974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  24000000  0800f978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002b6c  24000098  0800fa10  00020098  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24002c04  0800fa10  00022c04  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 10 .debug_info   00032ae0  00000000  00000000  000200c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004b45  00000000  00000000  00052ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ad0  00000000  00000000  000576f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001950  00000000  00000000  000591c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f1a0  00000000  00000000  0005ab10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002274f  00000000  00000000  00099cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017be3a  00000000  00000000  000bc3ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00238239  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000077c4  00000000  00000000  0023828c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000098 	.word	0x24000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c8d0 	.word	0x0800c8d0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400009c 	.word	0x2400009c
 80002dc:	0800c8d0 	.word	0x0800c8d0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <delayUS_DWT>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void delayUS_DWT(volatile uint32_t microseconds)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000690:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <delayUS_DWT+0x40>)
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000696:	f006 fb27 	bl	8006ce8 <HAL_RCC_GetHCLKFreq>
 800069a:	4603      	mov	r3, r0
 800069c:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <delayUS_DWT+0x44>)
 800069e:	fba2 2303 	umull	r2, r3, r2, r3
 80006a2:	0c9b      	lsrs	r3, r3, #18
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	fb02 f303 	mul.w	r3, r2, r3
 80006aa:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80006ac:	bf00      	nop
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <delayUS_DWT+0x40>)
 80006b0:	685a      	ldr	r2, [r3, #4]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	1ad2      	subs	r2, r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d3f8      	bcc.n	80006ae <delayUS_DWT+0x26>
}
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	e0001000 	.word	0xe0001000
 80006cc:	431bde83 	.word	0x431bde83

080006d0 <writeSDA>:
#define HEX2BCD(v)	((v) % 10 + (v) / 10 * 16)
#define BCD2HEX(v)	((v) % 16 + (v) / 16 * 10)


// SDA Write(output) Mode
static void writeSDA(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SDA;
 80006d6:	2301      	movs	r3, #1
 80006d8:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80006de:	2302      	movs	r3, #2
 80006e0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4619      	mov	r1, r3
 80006e6:	4803      	ldr	r0, [pc, #12]	; (80006f4 <writeSDA+0x24>)
 80006e8:	f004 fa32 	bl	8004b50 <HAL_GPIO_Init>
	
}
 80006ec:	bf00      	nop
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	58021400 	.word	0x58021400

080006f8 <readSDA>:


// SDA Read(input) Mode
static void readSDA(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SDA;
 80006fe:	2301      	movs	r3, #1
 8000700:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_INPUT;
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8000706:	2302      	movs	r3, #2
 8000708:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800070a:	2302      	movs	r3, #2
 800070c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);	
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	4619      	mov	r1, r3
 8000712:	4803      	ldr	r0, [pc, #12]	; (8000720 <readSDA+0x28>)
 8000714:	f004 fa1c 	bl	8004b50 <HAL_GPIO_Init>
}
 8000718:	bf00      	nop
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	58021400 	.word	0x58021400

08000724 <DS1302_SendCmd>:


/* Отправка адреса или команды */
static void DS1302_SendCmd(uint8_t cmd) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i ++) 
 800072e:	2300      	movs	r3, #0
 8000730:	73fb      	strb	r3, [r7, #15]
 8000732:	e01e      	b.n	8000772 <DS1302_SendCmd+0x4e>
	{	
		//		DS1302_SDA = (bit)(addr & 1);
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA, (cmd & 1) ?  GPIO_PIN_SET :  GPIO_PIN_RESET);
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	461a      	mov	r2, r3
 800073e:	2101      	movs	r1, #1
 8000740:	4810      	ldr	r0, [pc, #64]	; (8000784 <DS1302_SendCmd+0x60>)
 8000742:	f004 fbcd 	bl	8004ee0 <HAL_GPIO_WritePin>
		//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	2102      	movs	r1, #2
 800074a:	480e      	ldr	r0, [pc, #56]	; (8000784 <DS1302_SendCmd+0x60>)
 800074c:	f004 fbc8 	bl	8004ee0 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff ff99 	bl	8000688 <delayUS_DWT>
		//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2102      	movs	r1, #2
 800075a:	480a      	ldr	r0, [pc, #40]	; (8000784 <DS1302_SendCmd+0x60>)
 800075c:	f004 fbc0 	bl	8004ee0 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 8000760:	2001      	movs	r0, #1
 8000762:	f7ff ff91 	bl	8000688 <delayUS_DWT>
		cmd >>= 1;
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	085b      	lsrs	r3, r3, #1
 800076a:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i ++) 
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	3301      	adds	r3, #1
 8000770:	73fb      	strb	r3, [r7, #15]
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	2b07      	cmp	r3, #7
 8000776:	d9dd      	bls.n	8000734 <DS1302_SendCmd+0x10>
	}
}
 8000778:	bf00      	nop
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	58021400 	.word	0x58021400

08000788 <DS1302_WriteByte>:


/* Прочитать байт по адресу 'addr' */
static void DS1302_WriteByte(uint8_t addr, uint8_t d)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	460a      	mov	r2, r1
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	4613      	mov	r3, r2
 8000796:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	//	DS1302_RST = 1;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_SET);	
 8000798:	2201      	movs	r2, #1
 800079a:	2104      	movs	r1, #4
 800079c:	481c      	ldr	r0, [pc, #112]	; (8000810 <DS1302_WriteByte+0x88>)
 800079e:	f004 fb9f 	bl	8004ee0 <HAL_GPIO_WritePin>
	
	//addr = addr & 0xFE;
	DS1302_SendCmd(addr);	// Отправка адреса
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ffbd 	bl	8000724 <DS1302_SendCmd>
	
	for (i = 0; i < 8; i ++) 
 80007aa:	2300      	movs	r3, #0
 80007ac:	73fb      	strb	r3, [r7, #15]
 80007ae:	e01e      	b.n	80007ee <DS1302_WriteByte+0x66>
	{
		//		DS1302_SDA = (bit)(d & 1);
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA, (d & 1) ?  GPIO_PIN_SET :  GPIO_PIN_RESET);
 80007b0:	79bb      	ldrb	r3, [r7, #6]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	461a      	mov	r2, r3
 80007ba:	2101      	movs	r1, #1
 80007bc:	4814      	ldr	r0, [pc, #80]	; (8000810 <DS1302_WriteByte+0x88>)
 80007be:	f004 fb8f 	bl	8004ee0 <HAL_GPIO_WritePin>
		//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	2102      	movs	r1, #2
 80007c6:	4812      	ldr	r0, [pc, #72]	; (8000810 <DS1302_WriteByte+0x88>)
 80007c8:	f004 fb8a 	bl	8004ee0 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 80007cc:	2001      	movs	r0, #1
 80007ce:	f7ff ff5b 	bl	8000688 <delayUS_DWT>
		//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2102      	movs	r1, #2
 80007d6:	480e      	ldr	r0, [pc, #56]	; (8000810 <DS1302_WriteByte+0x88>)
 80007d8:	f004 fb82 	bl	8004ee0 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 80007dc:	2001      	movs	r0, #1
 80007de:	f7ff ff53 	bl	8000688 <delayUS_DWT>
		d >>= 1;
 80007e2:	79bb      	ldrb	r3, [r7, #6]
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	71bb      	strb	r3, [r7, #6]
	for (i = 0; i < 8; i ++) 
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	3301      	adds	r3, #1
 80007ec:	73fb      	strb	r3, [r7, #15]
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2b07      	cmp	r3, #7
 80007f2:	d9dd      	bls.n	80007b0 <DS1302_WriteByte+0x28>
	}
	
	//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2104      	movs	r1, #4
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <DS1302_WriteByte+0x88>)
 80007fa:	f004 fb71 	bl	8004ee0 <HAL_GPIO_WritePin>
	//	DS1302_SDA = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA,  GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2101      	movs	r1, #1
 8000802:	4803      	ldr	r0, [pc, #12]	; (8000810 <DS1302_WriteByte+0x88>)
 8000804:	f004 fb6c 	bl	8004ee0 <HAL_GPIO_WritePin>
}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	58021400 	.word	0x58021400

08000814 <DS1302_ReadByte>:
}


/* Reads a byte from addr */
static uint8_t DS1302_ReadByte(uint8_t addr)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t temp = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	73bb      	strb	r3, [r7, #14]

	//	DS1302_RST = 1;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_SET);	
 8000822:	2201      	movs	r2, #1
 8000824:	2104      	movs	r1, #4
 8000826:	4822      	ldr	r0, [pc, #136]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000828:	f004 fb5a 	bl	8004ee0 <HAL_GPIO_WritePin>
	addr = addr | 0x01; 	// Generate Read Address
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	71fb      	strb	r3, [r7, #7]

	DS1302_SendCmd(addr);	// Sends address
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff74 	bl	8000724 <DS1302_SendCmd>
	
	readSDA();
 800083c:	f7ff ff5c 	bl	80006f8 <readSDA>
	for (i = 0; i < 8; i ++) 
 8000840:	2300      	movs	r3, #0
 8000842:	73fb      	strb	r3, [r7, #15]
 8000844:	e020      	b.n	8000888 <DS1302_ReadByte+0x74>
	{
		temp >>= 1;
 8000846:	7bbb      	ldrb	r3, [r7, #14]
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	73bb      	strb	r3, [r7, #14]
		//		if(DS1302_SDA)
		if(HAL_GPIO_ReadPin(DS1302_GPIO, DS1302_SDA))
 800084c:	2101      	movs	r1, #1
 800084e:	4818      	ldr	r0, [pc, #96]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000850:	f004 fb2e 	bl	8004eb0 <HAL_GPIO_ReadPin>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d003      	beq.n	8000862 <DS1302_ReadByte+0x4e>
			temp |= 0x80;
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000860:	73bb      	strb	r3, [r7, #14]
		//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	2102      	movs	r1, #2
 8000866:	4812      	ldr	r0, [pc, #72]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000868:	f004 fb3a 	bl	8004ee0 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff ff0b 	bl	8000688 <delayUS_DWT>
		//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2102      	movs	r1, #2
 8000876:	480e      	ldr	r0, [pc, #56]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000878:	f004 fb32 	bl	8004ee0 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 800087c:	2001      	movs	r0, #1
 800087e:	f7ff ff03 	bl	8000688 <delayUS_DWT>
	for (i = 0; i < 8; i ++) 
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	3301      	adds	r3, #1
 8000886:	73fb      	strb	r3, [r7, #15]
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	2b07      	cmp	r3, #7
 800088c:	d9db      	bls.n	8000846 <DS1302_ReadByte+0x32>
	}
	writeSDA();
 800088e:	f7ff ff1f 	bl	80006d0 <writeSDA>

	//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2104      	movs	r1, #4
 8000896:	4806      	ldr	r0, [pc, #24]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000898:	f004 fb22 	bl	8004ee0 <HAL_GPIO_WritePin>
	//	DS1302_SDA = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA,  GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2101      	movs	r1, #1
 80008a0:	4803      	ldr	r0, [pc, #12]	; (80008b0 <DS1302_ReadByte+0x9c>)
 80008a2:	f004 fb1d 	bl	8004ee0 <HAL_GPIO_WritePin>
	return temp;
 80008a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	58021400 	.word	0x58021400

080008b4 <DS1302_ReadTime>:
}


/* Reads time byte by byte to 'buf' */
void DS1302_ReadTime(uint8_t *buf)  
{ 
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
   	uint8_t tmp;
	
	tmp = DS1302_ReadByte(DS1302_YEAR); 	
 80008bc:	208c      	movs	r0, #140	; 0x8c
 80008be:	f7ff ffa9 	bl	8000814 <DS1302_ReadByte>
 80008c2:	4603      	mov	r3, r0
 80008c4:	73fb      	strb	r3, [r7, #15]
	buf[1] = BCD2HEX(tmp);		 
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
 80008c8:	f003 030f 	and.w	r3, r3, #15
 80008cc:	b2d9      	uxtb	r1, r3
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	091b      	lsrs	r3, r3, #4
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	461a      	mov	r2, r3
 80008d6:	0092      	lsls	r2, r2, #2
 80008d8:	4413      	add	r3, r2
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	3301      	adds	r3, #1
 80008e2:	440a      	add	r2, r1
 80008e4:	b2d2      	uxtb	r2, r2
 80008e6:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_MONTH); 	
 80008e8:	2088      	movs	r0, #136	; 0x88
 80008ea:	f7ff ff93 	bl	8000814 <DS1302_ReadByte>
 80008ee:	4603      	mov	r3, r0
 80008f0:	73fb      	strb	r3, [r7, #15]
	buf[2] = BCD2HEX(tmp);	 
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
 80008f4:	f003 030f 	and.w	r3, r3, #15
 80008f8:	b2d9      	uxtb	r1, r3
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	091b      	lsrs	r3, r3, #4
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	461a      	mov	r2, r3
 8000902:	0092      	lsls	r2, r2, #2
 8000904:	4413      	add	r3, r2
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	b2da      	uxtb	r2, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	3302      	adds	r3, #2
 800090e:	440a      	add	r2, r1
 8000910:	b2d2      	uxtb	r2, r2
 8000912:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_DATE); 	
 8000914:	2086      	movs	r0, #134	; 0x86
 8000916:	f7ff ff7d 	bl	8000814 <DS1302_ReadByte>
 800091a:	4603      	mov	r3, r0
 800091c:	73fb      	strb	r3, [r7, #15]
	buf[3] = BCD2HEX(tmp);
 800091e:	7bfb      	ldrb	r3, [r7, #15]
 8000920:	f003 030f 	and.w	r3, r3, #15
 8000924:	b2d9      	uxtb	r1, r3
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	091b      	lsrs	r3, r3, #4
 800092a:	b2db      	uxtb	r3, r3
 800092c:	461a      	mov	r2, r3
 800092e:	0092      	lsls	r2, r2, #2
 8000930:	4413      	add	r3, r2
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	b2da      	uxtb	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3303      	adds	r3, #3
 800093a:	440a      	add	r2, r1
 800093c:	b2d2      	uxtb	r2, r2
 800093e:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_HOUR);		
 8000940:	2084      	movs	r0, #132	; 0x84
 8000942:	f7ff ff67 	bl	8000814 <DS1302_ReadByte>
 8000946:	4603      	mov	r3, r0
 8000948:	73fb      	strb	r3, [r7, #15]
	buf[4] = BCD2HEX(tmp);
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	f003 030f 	and.w	r3, r3, #15
 8000950:	b2d9      	uxtb	r1, r3
 8000952:	7bfb      	ldrb	r3, [r7, #15]
 8000954:	091b      	lsrs	r3, r3, #4
 8000956:	b2db      	uxtb	r3, r3
 8000958:	461a      	mov	r2, r3
 800095a:	0092      	lsls	r2, r2, #2
 800095c:	4413      	add	r3, r2
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	b2da      	uxtb	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3304      	adds	r3, #4
 8000966:	440a      	add	r2, r1
 8000968:	b2d2      	uxtb	r2, r2
 800096a:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_MIN);		
 800096c:	2082      	movs	r0, #130	; 0x82
 800096e:	f7ff ff51 	bl	8000814 <DS1302_ReadByte>
 8000972:	4603      	mov	r3, r0
 8000974:	73fb      	strb	r3, [r7, #15]
	buf[5] = BCD2HEX(tmp); 
 8000976:	7bfb      	ldrb	r3, [r7, #15]
 8000978:	f003 030f 	and.w	r3, r3, #15
 800097c:	b2d9      	uxtb	r1, r3
 800097e:	7bfb      	ldrb	r3, [r7, #15]
 8000980:	091b      	lsrs	r3, r3, #4
 8000982:	b2db      	uxtb	r3, r3
 8000984:	461a      	mov	r2, r3
 8000986:	0092      	lsls	r2, r2, #2
 8000988:	4413      	add	r3, r2
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	b2da      	uxtb	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	3305      	adds	r3, #5
 8000992:	440a      	add	r2, r1
 8000994:	b2d2      	uxtb	r2, r2
 8000996:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte((DS1302_SEC)) & 0x7F;
 8000998:	2080      	movs	r0, #128	; 0x80
 800099a:	f7ff ff3b 	bl	8000814 <DS1302_ReadByte>
 800099e:	4603      	mov	r3, r0
 80009a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009a4:	73fb      	strb	r3, [r7, #15]
	buf[6] = BCD2HEX(tmp);
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	f003 030f 	and.w	r3, r3, #15
 80009ac:	b2d9      	uxtb	r1, r3
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	091b      	lsrs	r3, r3, #4
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	461a      	mov	r2, r3
 80009b6:	0092      	lsls	r2, r2, #2
 80009b8:	4413      	add	r3, r2
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3306      	adds	r3, #6
 80009c2:	440a      	add	r2, r1
 80009c4:	b2d2      	uxtb	r2, r2
 80009c6:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_DAY);		
 80009c8:	208a      	movs	r0, #138	; 0x8a
 80009ca:	f7ff ff23 	bl	8000814 <DS1302_ReadByte>
 80009ce:	4603      	mov	r3, r0
 80009d0:	73fb      	strb	r3, [r7, #15]
	buf[7] = BCD2HEX(tmp);
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	f003 030f 	and.w	r3, r3, #15
 80009d8:	b2d9      	uxtb	r1, r3
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	091b      	lsrs	r3, r3, #4
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	461a      	mov	r2, r3
 80009e2:	0092      	lsls	r2, r2, #2
 80009e4:	4413      	add	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3307      	adds	r3, #7
 80009ee:	440a      	add	r2, r1
 80009f0:	b2d2      	uxtb	r2, r2
 80009f2:	701a      	strb	r2, [r3, #0]
}
 80009f4:	bf00      	nop
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <DS1302_Init>:


/* Инициализация */
void DS1302_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
	DWT_Delay_Init(); //Инициализация таймера для отсчета милисекунд
 8000a02:	f000 f929 	bl	8000c58 <DWT_Delay_Init>

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SCLK | DS1302_SDA | DS1302_RST;
 8000a06:	2307      	movs	r3, #7
 8000a08:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	4619      	mov	r1, r3
 8000a16:	480d      	ldr	r0, [pc, #52]	; (8000a4c <DS1302_Init+0x50>)
 8000a18:	f004 f89a 	bl	8004b50 <HAL_GPIO_Init>
	
	DS1302_WriteByte(DS1302_CHARGER, 0x00);			// Отключить Trickle Charger
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2090      	movs	r0, #144	; 0x90
 8000a20:	f7ff feb2 	bl	8000788 <DS1302_WriteByte>
		
	//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2104      	movs	r1, #4
 8000a28:	4808      	ldr	r0, [pc, #32]	; (8000a4c <DS1302_Init+0x50>)
 8000a2a:	f004 fa59 	bl	8004ee0 <HAL_GPIO_WritePin>
	//	DS1302_SCK = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2102      	movs	r1, #2
 8000a32:	4806      	ldr	r0, [pc, #24]	; (8000a4c <DS1302_Init+0x50>)
 8000a34:	f004 fa54 	bl	8004ee0 <HAL_GPIO_WritePin>

	delayUS_DWT(10); // Меньше 10 мкс делать не стоит.
 8000a38:	200a      	movs	r0, #10
 8000a3a:	f7ff fe25 	bl	8000688 <delayUS_DWT>
	DS1302_ClockStart();
 8000a3e:	f000 f807 	bl	8000a50 <DS1302_ClockStart>
}
 8000a42:	bf00      	nop
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	58021400 	.word	0x58021400

08000a50 <DS1302_ClockStart>:

//Запуск часов.
//Изначально DS1302 в режиме HALT (остановлена, режим энергосбережения).
//Чтоб начался отсчет времени необходимо однократно выполнить эту функцию.
void DS1302_ClockStart(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
	uint8_t buf = 0x00;
 8000a56:	2300      	movs	r3, #0
 8000a58:	71fb      	strb	r3, [r7, #7]

	DS1302_WriteByte(DS1302_CONTROL, 0x00);			// Отключить защиту от записи
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	208e      	movs	r0, #142	; 0x8e
 8000a5e:	f7ff fe93 	bl	8000788 <DS1302_WriteByte>
	delayUS_DWT(1);
 8000a62:	2001      	movs	r0, #1
 8000a64:	f7ff fe10 	bl	8000688 <delayUS_DWT>

	buf = DS1302_ReadByte(DS1302_SEC) & 0x7F;		// Записываем в 8 бит 0. При этом сохраняем установленное значение секунд.
 8000a68:	2080      	movs	r0, #128	; 0x80
 8000a6a:	f7ff fed3 	bl	8000814 <DS1302_ReadByte>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a74:	71fb      	strb	r3, [r7, #7]
	DS1302_WriteByte(DS1302_SEC, buf);
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	2080      	movs	r0, #128	; 0x80
 8000a7c:	f7ff fe84 	bl	8000788 <DS1302_WriteByte>

	DS1302_WriteByte(DS1302_CONTROL, 0x80);			// Включить защиту от записи
 8000a80:	2180      	movs	r1, #128	; 0x80
 8000a82:	208e      	movs	r0, #142	; 0x8e
 8000a84:	f7ff fe80 	bl	8000788 <DS1302_WriteByte>
	delayUS_DWT(1);
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f7ff fdfd 	bl	8000688 <delayUS_DWT>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	460a      	mov	r2, r1
 8000aa0:	80fb      	strh	r3, [r7, #6]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 8000aa6:	88fa      	ldrh	r2, [r7, #6]
 8000aa8:	88bb      	ldrh	r3, [r7, #4]
 8000aaa:	4413      	add	r3, r2
 8000aac:	2b0f      	cmp	r3, #15
 8000aae:	dc01      	bgt.n	8000ab4 <bytestowrite+0x1e>
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	e003      	b.n	8000abc <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 8000ab4:	88bb      	ldrh	r3, [r7, #4]
 8000ab6:	f1c3 0310 	rsb	r3, r3, #16
 8000aba:	b29b      	uxth	r3, r3
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08e      	sub	sp, #56	; 0x38
 8000acc:	af04      	add	r7, sp, #16
 8000ace:	60ba      	str	r2, [r7, #8]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	81fb      	strh	r3, [r7, #14]
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	81bb      	strh	r3, [r7, #12]
 8000ada:	4613      	mov	r3, r2
 8000adc:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000ade:	2304      	movs	r3, #4
 8000ae0:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8000ae2:	89fb      	ldrh	r3, [r7, #14]
 8000ae4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000ae6:	88fa      	ldrh	r2, [r7, #6]
 8000ae8:	89bb      	ldrh	r3, [r7, #12]
 8000aea:	4413      	add	r3, r2
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	da00      	bge.n	8000af2 <EEPROM_Write+0x2a>
 8000af0:	330f      	adds	r3, #15
 8000af2:	111b      	asrs	r3, r3, #4
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	89fb      	ldrh	r3, [r7, #14]
 8000af8:	4413      	add	r3, r2
 8000afa:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 8000afc:	8b7a      	ldrh	r2, [r7, #26]
 8000afe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	3301      	adds	r3, #1
 8000b06:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
 8000b10:	e034      	b.n	8000b7c <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000b12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	b21a      	sxth	r2, r3
 8000b1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	b21b      	sxth	r3, r3
 8000b24:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 8000b26:	89ba      	ldrh	r2, [r7, #12]
 8000b28:	88fb      	ldrh	r3, [r7, #6]
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff ffb2 	bl	8000a96 <bytestowrite>
 8000b32:	4603      	mov	r3, r0
 8000b34:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 8000b36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b38:	68ba      	ldr	r2, [r7, #8]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	8af9      	ldrh	r1, [r7, #22]
 8000b3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b42:	9202      	str	r2, [sp, #8]
 8000b44:	8aba      	ldrh	r2, [r7, #20]
 8000b46:	9201      	str	r2, [sp, #4]
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	460a      	mov	r2, r1
 8000b4e:	2150      	movs	r1, #80	; 0x50
 8000b50:	480f      	ldr	r0, [pc, #60]	; (8000b90 <EEPROM_Write+0xc8>)
 8000b52:	f004 fa6f 	bl	8005034 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8000b56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b58:	3301      	adds	r3, #1
 8000b5a:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 8000b60:	88fa      	ldrh	r2, [r7, #6]
 8000b62:	8abb      	ldrh	r3, [r7, #20]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 8000b68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000b6a:	8abb      	ldrh	r3, [r7, #20]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 8000b70:	2005      	movs	r0, #5
 8000b72:	f002 fac5 	bl	8003100 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 8000b76:	6a3b      	ldr	r3, [r7, #32]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	623b      	str	r3, [r7, #32]
 8000b7c:	8b3b      	ldrh	r3, [r7, #24]
 8000b7e:	6a3a      	ldr	r2, [r7, #32]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	dbc6      	blt.n	8000b12 <EEPROM_Write+0x4a>
	}
}
 8000b84:	bf00      	nop
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	; 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	24000700 	.word	0x24000700

08000b94 <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08e      	sub	sp, #56	; 0x38
 8000b98:	af04      	add	r7, sp, #16
 8000b9a:	60ba      	str	r2, [r7, #8]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	81fb      	strh	r3, [r7, #14]
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	81bb      	strh	r3, [r7, #12]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000baa:	2304      	movs	r3, #4
 8000bac:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8000bae:	89fb      	ldrh	r3, [r7, #14]
 8000bb0:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000bb2:	88fa      	ldrh	r2, [r7, #6]
 8000bb4:	89bb      	ldrh	r3, [r7, #12]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	da00      	bge.n	8000bbe <EEPROM_Read+0x2a>
 8000bbc:	330f      	adds	r3, #15
 8000bbe:	111b      	asrs	r3, r3, #4
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	89fb      	ldrh	r3, [r7, #14]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8000bc8:	8b7a      	ldrh	r2, [r7, #26]
 8000bca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 8000bd8:	2300      	movs	r3, #0
 8000bda:	623b      	str	r3, [r7, #32]
 8000bdc:	e031      	b.n	8000c42 <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000bde:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	b21a      	sxth	r2, r3
 8000be8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 8000bf2:	89ba      	ldrh	r2, [r7, #12]
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff4c 	bl	8000a96 <bytestowrite>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 8000c02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c04:	68ba      	ldr	r2, [r7, #8]
 8000c06:	4413      	add	r3, r2
 8000c08:	8af9      	ldrh	r1, [r7, #22]
 8000c0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c0e:	9202      	str	r2, [sp, #8]
 8000c10:	8aba      	ldrh	r2, [r7, #20]
 8000c12:	9201      	str	r2, [sp, #4]
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	2302      	movs	r3, #2
 8000c18:	460a      	mov	r2, r1
 8000c1a:	2150      	movs	r1, #80	; 0x50
 8000c1c:	480d      	ldr	r0, [pc, #52]	; (8000c54 <EEPROM_Read+0xc0>)
 8000c1e:	f004 fb1d 	bl	800525c <HAL_I2C_Mem_Read>
		startPage += 1;
 8000c22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c24:	3301      	adds	r3, #1
 8000c26:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 8000c2c:	88fa      	ldrh	r2, [r7, #6]
 8000c2e:	8abb      	ldrh	r3, [r7, #20]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 8000c34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000c36:	8abb      	ldrh	r3, [r7, #20]
 8000c38:	4413      	add	r3, r2
 8000c3a:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 8000c3c:	6a3b      	ldr	r3, [r7, #32]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	623b      	str	r3, [r7, #32]
 8000c42:	8b3b      	ldrh	r3, [r7, #24]
 8000c44:	6a3a      	ldr	r2, [r7, #32]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	dbc9      	blt.n	8000bde <EEPROM_Read+0x4a>
	}
}
 8000c4a:	bf00      	nop
 8000c4c:	bf00      	nop
 8000c4e:	3728      	adds	r7, #40	; 0x28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	24000700 	.word	0x24000700

08000c58 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <DWT_Delay_Init+0x58>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	4a13      	ldr	r2, [pc, #76]	; (8000cb0 <DWT_Delay_Init+0x58>)
 8000c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c66:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <DWT_Delay_Init+0x58>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	4a10      	ldr	r2, [pc, #64]	; (8000cb0 <DWT_Delay_Init+0x58>)
 8000c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c72:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <DWT_Delay_Init+0x5c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <DWT_Delay_Init+0x5c>)
 8000c7a:	f023 0301 	bic.w	r3, r3, #1
 8000c7e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <DWT_Delay_Init+0x5c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <DWT_Delay_Init+0x5c>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <DWT_Delay_Init+0x5c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000c92:	bf00      	nop
     __ASM volatile ("NOP");
 8000c94:	bf00      	nop
     __ASM volatile ("NOP");
 8000c96:	bf00      	nop

     /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <DWT_Delay_Init+0x5c>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	e000      	b.n	8000ca6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000ca4:	2301      	movs	r3, #1
  }
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000edf0 	.word	0xe000edf0
 8000cb4:	e0001000 	.word	0xe0001000

08000cb8 <HAL_TIM_PeriodElapsedCallback>:
//    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
//}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM5)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a17      	ldr	r2, [pc, #92]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d125      	bne.n	8000d16 <HAL_TIM_PeriodElapsedCallback+0x5e>
  {
	  counterclk++;
 8000cca:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	4a15      	ldr	r2, [pc, #84]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000cd2:	6013      	str	r3, [r2, #0]
	  counter2++;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	4a14      	ldr	r2, [pc, #80]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000cdc:	6013      	str	r3, [r2, #0]
	  adc_flag=0;
 8000cde:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
	  uartflag=0;
 8000ce4:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
	  if(counterclk>=setTiming1)
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d305      	bcc.n	8000d02 <HAL_TIM_PeriodElapsedCallback+0x4a>
	  {
//	  dataloggerflag=1;

	  adc_flag=1;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	601a      	str	r2, [r3, #0]
	  counterclk=0;
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
	  }
	  if(counter2>=5)
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	d905      	bls.n	8000d16 <HAL_TIM_PeriodElapsedCallback+0x5e>
	  {
		  uartflag=1;
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	601a      	str	r2, [r3, #0]
		  counter2=0;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
	  }
    // Code to execute every 1 second interval
    // Place your desired actions here
  }
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40000c00 	.word	0x40000c00
 8000d28:	240000dc 	.word	0x240000dc
 8000d2c:	240000d8 	.word	0x240000d8
 8000d30:	240000b4 	.word	0x240000b4
 8000d34:	240000b8 	.word	0x240000b8
 8000d38:	24000000 	.word	0x24000000

08000d3c <datalogger>:

void datalogger() ////5 lepta
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08e      	sub	sp, #56	; 0x38
 8000d40:	af00      	add	r7, sp, #0


	HAL_Delay(500);
 8000d42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d46:	f002 f9db 	bl	8003100 <HAL_Delay>
	if(HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin)==1)
 8000d4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d4e:	4864      	ldr	r0, [pc, #400]	; (8000ee0 <datalogger+0x1a4>)
 8000d50:	f004 f8ae 	bl	8004eb0 <HAL_GPIO_ReadPin>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	f040 80bd 	bne.w	8000ed6 <datalogger+0x19a>
	{
	for (i=0; i<100; i++) // 10 gia test  288 gia 5 lepta gia na bgalw ola ta apothikeumena apo to datalogger_array na ta metatrepsw kai na ta dw sto hyper terminal
 8000d5c:	4b61      	ldr	r3, [pc, #388]	; (8000ee4 <datalogger+0x1a8>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	e0b0      	b.n	8000ec6 <datalogger+0x18a>
	{

	char buffer2[50];
	ssd1306_Fill(Black);
 8000d64:	2000      	movs	r0, #0
 8000d66:	f001 fb71 	bl	800244c <ssd1306_Fill>

	ssd1306_SetCursor(0, 0); // Position the cursor for the first line
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f001 fcbb 	bl	80026e8 <ssd1306_SetCursor>
	ssd1306_WriteString("DATA LOGGER", Font_11x18, White);
 8000d72:	4a5d      	ldr	r2, [pc, #372]	; (8000ee8 <datalogger+0x1ac>)
 8000d74:	2301      	movs	r3, #1
 8000d76:	ca06      	ldmia	r2, {r1, r2}
 8000d78:	485c      	ldr	r0, [pc, #368]	; (8000eec <datalogger+0x1b0>)
 8000d7a:	f001 fc8f 	bl	800269c <ssd1306_WriteString>

	ssd1306_SetCursor(0, 20); // Position the cursor for the second line. Adjust the y-coordinate as needed based on your font size.
 8000d7e:	2114      	movs	r1, #20
 8000d80:	2000      	movs	r0, #0
 8000d82:	f001 fcb1 	bl	80026e8 <ssd1306_SetCursor>
	ssd1306_WriteString("SENDING", Font_11x18, White);
 8000d86:	4a58      	ldr	r2, [pc, #352]	; (8000ee8 <datalogger+0x1ac>)
 8000d88:	2301      	movs	r3, #1
 8000d8a:	ca06      	ldmia	r2, {r1, r2}
 8000d8c:	4858      	ldr	r0, [pc, #352]	; (8000ef0 <datalogger+0x1b4>)
 8000d8e:	f001 fc85 	bl	800269c <ssd1306_WriteString>

	ssd1306_SetCursor(0, 40); // Position the cursor for the second line. Adjust the y-coordinate as needed based on your font size.
 8000d92:	2128      	movs	r1, #40	; 0x28
 8000d94:	2000      	movs	r0, #0
 8000d96:	f001 fca7 	bl	80026e8 <ssd1306_SetCursor>
	ssd1306_WriteString("TO PuTTY", Font_11x18, White);
 8000d9a:	4a53      	ldr	r2, [pc, #332]	; (8000ee8 <datalogger+0x1ac>)
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	ca06      	ldmia	r2, {r1, r2}
 8000da0:	4854      	ldr	r0, [pc, #336]	; (8000ef4 <datalogger+0x1b8>)
 8000da2:	f001 fc7b 	bl	800269c <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8000da6:	f001 fb75 	bl	8002494 <ssd1306_UpdateScreen>
    sprintf(graphbuffer, "\n\r~~~~~~~~~~~~~~DATALOGGER~~~~~~~~~~~~~~~~\n\r");
 8000daa:	4953      	ldr	r1, [pc, #332]	; (8000ef8 <datalogger+0x1bc>)
 8000dac:	4853      	ldr	r0, [pc, #332]	; (8000efc <datalogger+0x1c0>)
 8000dae:	f00b f981 	bl	800c0b4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)graphbuffer, strlen(graphbuffer), 100);
 8000db2:	4852      	ldr	r0, [pc, #328]	; (8000efc <datalogger+0x1c0>)
 8000db4:	f7ff fa94 	bl	80002e0 <strlen>
 8000db8:	4603      	mov	r3, r0
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	2364      	movs	r3, #100	; 0x64
 8000dbe:	494f      	ldr	r1, [pc, #316]	; (8000efc <datalogger+0x1c0>)
 8000dc0:	484f      	ldr	r0, [pc, #316]	; (8000f00 <datalogger+0x1c4>)
 8000dc2:	f009 fd6b 	bl	800a89c <HAL_UART_Transmit>
    sprintf(graphTimeBuffer, "\n\r~~~~~~~~~~~~~~%s~~~~~~~~~~~~~~\n\r",TimeArray[i]);
 8000dc6:	4b47      	ldr	r3, [pc, #284]	; (8000ee4 <datalogger+0x1a8>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2232      	movs	r2, #50	; 0x32
 8000dcc:	fb02 f303 	mul.w	r3, r2, r3
 8000dd0:	4a4c      	ldr	r2, [pc, #304]	; (8000f04 <datalogger+0x1c8>)
 8000dd2:	4413      	add	r3, r2
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	494c      	ldr	r1, [pc, #304]	; (8000f08 <datalogger+0x1cc>)
 8000dd8:	484c      	ldr	r0, [pc, #304]	; (8000f0c <datalogger+0x1d0>)
 8000dda:	f00b f96b 	bl	800c0b4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)graphTimeBuffer, strlen(graphTimeBuffer), 100);
 8000dde:	484b      	ldr	r0, [pc, #300]	; (8000f0c <datalogger+0x1d0>)
 8000de0:	f7ff fa7e 	bl	80002e0 <strlen>
 8000de4:	4603      	mov	r3, r0
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	2364      	movs	r3, #100	; 0x64
 8000dea:	4948      	ldr	r1, [pc, #288]	; (8000f0c <datalogger+0x1d0>)
 8000dec:	4844      	ldr	r0, [pc, #272]	; (8000f00 <datalogger+0x1c4>)
 8000dee:	f009 fd55 	bl	800a89c <HAL_UART_Transmit>
    sprintf(datalogbuf0, "\n\r%d Channel 0  %2d\n\r", i,adcarray0[i]);
 8000df2:	4b3c      	ldr	r3, [pc, #240]	; (8000ee4 <datalogger+0x1a8>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	4b3b      	ldr	r3, [pc, #236]	; (8000ee4 <datalogger+0x1a8>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4945      	ldr	r1, [pc, #276]	; (8000f10 <datalogger+0x1d4>)
 8000dfc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e00:	4944      	ldr	r1, [pc, #272]	; (8000f14 <datalogger+0x1d8>)
 8000e02:	4845      	ldr	r0, [pc, #276]	; (8000f18 <datalogger+0x1dc>)
 8000e04:	f00b f956 	bl	800c0b4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)datalogbuf0, strlen(datalogbuf0), 100);
 8000e08:	4843      	ldr	r0, [pc, #268]	; (8000f18 <datalogger+0x1dc>)
 8000e0a:	f7ff fa69 	bl	80002e0 <strlen>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	2364      	movs	r3, #100	; 0x64
 8000e14:	4940      	ldr	r1, [pc, #256]	; (8000f18 <datalogger+0x1dc>)
 8000e16:	483a      	ldr	r0, [pc, #232]	; (8000f00 <datalogger+0x1c4>)
 8000e18:	f009 fd40 	bl	800a89c <HAL_UART_Transmit>
    sprintf(datalogbuf1, "\n\r   Channel 1  %2d\n\r", adcarray1[i]);
 8000e1c:	4b31      	ldr	r3, [pc, #196]	; (8000ee4 <datalogger+0x1a8>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a3e      	ldr	r2, [pc, #248]	; (8000f1c <datalogger+0x1e0>)
 8000e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e26:	461a      	mov	r2, r3
 8000e28:	493d      	ldr	r1, [pc, #244]	; (8000f20 <datalogger+0x1e4>)
 8000e2a:	483e      	ldr	r0, [pc, #248]	; (8000f24 <datalogger+0x1e8>)
 8000e2c:	f00b f942 	bl	800c0b4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)datalogbuf1, strlen(datalogbuf1), 100);
 8000e30:	483c      	ldr	r0, [pc, #240]	; (8000f24 <datalogger+0x1e8>)
 8000e32:	f7ff fa55 	bl	80002e0 <strlen>
 8000e36:	4603      	mov	r3, r0
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	2364      	movs	r3, #100	; 0x64
 8000e3c:	4939      	ldr	r1, [pc, #228]	; (8000f24 <datalogger+0x1e8>)
 8000e3e:	4830      	ldr	r0, [pc, #192]	; (8000f00 <datalogger+0x1c4>)
 8000e40:	f009 fd2c 	bl	800a89c <HAL_UART_Transmit>
    sprintf(datalogbuf4, "\n\r   Channel 4  %2d\n\r", adcarray4[i]);
 8000e44:	4b27      	ldr	r3, [pc, #156]	; (8000ee4 <datalogger+0x1a8>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a37      	ldr	r2, [pc, #220]	; (8000f28 <datalogger+0x1ec>)
 8000e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	4936      	ldr	r1, [pc, #216]	; (8000f2c <datalogger+0x1f0>)
 8000e52:	4837      	ldr	r0, [pc, #220]	; (8000f30 <datalogger+0x1f4>)
 8000e54:	f00b f92e 	bl	800c0b4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)datalogbuf4, strlen(datalogbuf4), 100);
 8000e58:	4835      	ldr	r0, [pc, #212]	; (8000f30 <datalogger+0x1f4>)
 8000e5a:	f7ff fa41 	bl	80002e0 <strlen>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	2364      	movs	r3, #100	; 0x64
 8000e64:	4932      	ldr	r1, [pc, #200]	; (8000f30 <datalogger+0x1f4>)
 8000e66:	4826      	ldr	r0, [pc, #152]	; (8000f00 <datalogger+0x1c4>)
 8000e68:	f009 fd18 	bl	800a89c <HAL_UART_Transmit>
    sprintf(datalogbuf6, "\n\r   Channel 6  %2d\n\r", adcarray6[i]);
 8000e6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <datalogger+0x1a8>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a30      	ldr	r2, [pc, #192]	; (8000f34 <datalogger+0x1f8>)
 8000e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e76:	461a      	mov	r2, r3
 8000e78:	492f      	ldr	r1, [pc, #188]	; (8000f38 <datalogger+0x1fc>)
 8000e7a:	4830      	ldr	r0, [pc, #192]	; (8000f3c <datalogger+0x200>)
 8000e7c:	f00b f91a 	bl	800c0b4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)datalogbuf6, strlen(datalogbuf6), 100);
 8000e80:	482e      	ldr	r0, [pc, #184]	; (8000f3c <datalogger+0x200>)
 8000e82:	f7ff fa2d 	bl	80002e0 <strlen>
 8000e86:	4603      	mov	r3, r0
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	2364      	movs	r3, #100	; 0x64
 8000e8c:	492b      	ldr	r1, [pc, #172]	; (8000f3c <datalogger+0x200>)
 8000e8e:	481c      	ldr	r0, [pc, #112]	; (8000f00 <datalogger+0x1c4>)
 8000e90:	f009 fd04 	bl	800a89c <HAL_UART_Transmit>
    sprintf(datalogbuf7, "\n\r   Channel 7  %2d\n\r", adcarray7[i]);
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <datalogger+0x1a8>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a29      	ldr	r2, [pc, #164]	; (8000f40 <datalogger+0x204>)
 8000e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	4928      	ldr	r1, [pc, #160]	; (8000f44 <datalogger+0x208>)
 8000ea2:	4829      	ldr	r0, [pc, #164]	; (8000f48 <datalogger+0x20c>)
 8000ea4:	f00b f906 	bl	800c0b4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)datalogbuf7, strlen(datalogbuf7), 100);
 8000ea8:	4827      	ldr	r0, [pc, #156]	; (8000f48 <datalogger+0x20c>)
 8000eaa:	f7ff fa19 	bl	80002e0 <strlen>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	2364      	movs	r3, #100	; 0x64
 8000eb4:	4924      	ldr	r1, [pc, #144]	; (8000f48 <datalogger+0x20c>)
 8000eb6:	4812      	ldr	r0, [pc, #72]	; (8000f00 <datalogger+0x1c4>)
 8000eb8:	f009 fcf0 	bl	800a89c <HAL_UART_Transmit>
	for (i=0; i<100; i++) // 10 gia test  288 gia 5 lepta gia na bgalw ola ta apothikeumena apo to datalogger_array na ta metatrepsw kai na ta dw sto hyper terminal
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <datalogger+0x1a8>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <datalogger+0x1a8>)
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <datalogger+0x1a8>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b63      	cmp	r3, #99	; 0x63
 8000ecc:	f77f af4a 	ble.w	8000d64 <datalogger+0x28>


//    sprintf(datalogbuf2, " %c\n\r", datalogger_array_status[i]);
//    HAL_UART_Transmit(&huart3, (uint8_t*)datalogbuf2, strlen(datalogbuf2), 100);
	}
	ssd1306_Fill(Black);
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f001 fabb 	bl	800244c <ssd1306_Fill>

	}


}
 8000ed6:	bf00      	nop
 8000ed8:	3738      	adds	r7, #56	; 0x38
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	58020800 	.word	0x58020800
 8000ee4:	240000bc 	.word	0x240000bc
 8000ee8:	24000014 	.word	0x24000014
 8000eec:	0800c8e8 	.word	0x0800c8e8
 8000ef0:	0800c8f4 	.word	0x0800c8f4
 8000ef4:	0800c8fc 	.word	0x0800c8fc
 8000ef8:	0800c908 	.word	0x0800c908
 8000efc:	24002658 	.word	0x24002658
 8000f00:	24000670 	.word	0x24000670
 8000f04:	24000ba0 	.word	0x24000ba0
 8000f08:	0800c938 	.word	0x0800c938
 8000f0c:	240005a4 	.word	0x240005a4
 8000f10:	24002474 	.word	0x24002474
 8000f14:	0800c95c 	.word	0x0800c95c
 8000f18:	240029c8 	.word	0x240029c8
 8000f1c:	24002264 	.word	0x24002264
 8000f20:	0800c974 	.word	0x0800c974
 8000f24:	240026f0 	.word	0x240026f0
 8000f28:	240027b8 	.word	0x240027b8
 8000f2c:	0800c98c 	.word	0x0800c98c
 8000f30:	2400060c 	.word	0x2400060c
 8000f34:	24002a60 	.word	0x24002a60
 8000f38:	0800c9a4 	.word	0x0800c9a4
 8000f3c:	24002200 	.word	0x24002200
 8000f40:	24001fd8 	.word	0x24001fd8
 8000f44:	0800c9bc 	.word	0x0800c9bc
 8000f48:	240004f4 	.word	0x240004f4

08000f4c <ADC_CH0_SELECT>:




void ADC_CH0_SELECT()
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
 8000f60:	615a      	str	r2, [r3, #20]
 8000f62:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_0;
 8000f64:	2301      	movs	r3, #1
 8000f66:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f68:	2306      	movs	r3, #6
 8000f6a:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f70:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f74:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f76:	2304      	movs	r3, #4
 8000f78:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	4619      	mov	r1, r3
 8000f82:	4806      	ldr	r0, [pc, #24]	; (8000f9c <ADC_CH0_SELECT+0x50>)
 8000f84:	f002 fed4 	bl	8003d30 <HAL_ADC_ConfigChannel>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <ADC_CH0_SELECT+0x46>
	  {
	    Error_Handler();
 8000f8e:	f001 f99b 	bl	80022c8 <Error_Handler>
	  }
}
 8000f92:	bf00      	nop
 8000f94:	3720      	adds	r7, #32
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2400219c 	.word	0x2400219c

08000fa0 <ADC_CH1_SELECT>:
void ADC_CH1_SELECT()
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
 8000fb4:	615a      	str	r2, [r3, #20]
 8000fb6:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_1;
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <ADC_CH1_SELECT+0x50>)
 8000fba:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fbc:	2306      	movs	r3, #6
 8000fbe:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fc4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000fc8:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fca:	2304      	movs	r3, #4
 8000fcc:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <ADC_CH1_SELECT+0x54>)
 8000fd8:	f002 feaa 	bl	8003d30 <HAL_ADC_ConfigChannel>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <ADC_CH1_SELECT+0x46>
	  {
	    Error_Handler();
 8000fe2:	f001 f971 	bl	80022c8 <Error_Handler>
	  }
}
 8000fe6:	bf00      	nop
 8000fe8:	3720      	adds	r7, #32
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	04300002 	.word	0x04300002
 8000ff4:	2400219c 	.word	0x2400219c

08000ff8 <ADC_CH4_SELECT>:
void ADC_CH4_SELECT()
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
 800100c:	615a      	str	r2, [r3, #20]
 800100e:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_4;
 8001010:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <ADC_CH4_SELECT+0x50>)
 8001012:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001014:	2306      	movs	r3, #6
 8001016:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001018:	2301      	movs	r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800101c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001020:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001022:	2304      	movs	r3, #4
 8001024:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	4619      	mov	r1, r3
 800102e:	4807      	ldr	r0, [pc, #28]	; (800104c <ADC_CH4_SELECT+0x54>)
 8001030:	f002 fe7e 	bl	8003d30 <HAL_ADC_ConfigChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <ADC_CH4_SELECT+0x46>
	  {
	    Error_Handler();
 800103a:	f001 f945 	bl	80022c8 <Error_Handler>
	  }
}
 800103e:	bf00      	nop
 8001040:	3720      	adds	r7, #32
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	10c00010 	.word	0x10c00010
 800104c:	2400219c 	.word	0x2400219c

08001050 <ADC_CH6_SELECT>:
void ADC_CH6_SELECT()
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
 8001064:	615a      	str	r2, [r3, #20]
 8001066:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_6;
 8001068:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <ADC_CH6_SELECT+0x50>)
 800106a:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 800106c:	2306      	movs	r3, #6
 800106e:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001070:	2301      	movs	r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001074:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001078:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800107a:	2304      	movs	r3, #4
 800107c:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	4619      	mov	r1, r3
 8001086:	4807      	ldr	r0, [pc, #28]	; (80010a4 <ADC_CH6_SELECT+0x54>)
 8001088:	f002 fe52 	bl	8003d30 <HAL_ADC_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <ADC_CH6_SELECT+0x46>
	  {
	    Error_Handler();
 8001092:	f001 f919 	bl	80022c8 <Error_Handler>
	  }
}
 8001096:	bf00      	nop
 8001098:	3720      	adds	r7, #32
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	19200040 	.word	0x19200040
 80010a4:	2400219c 	.word	0x2400219c

080010a8 <ADC_CH7_SELECT>:
void ADC_CH7_SELECT()
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
 80010bc:	615a      	str	r2, [r3, #20]
 80010be:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_7;
 80010c0:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <ADC_CH7_SELECT+0x50>)
 80010c2:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010c4:	2306      	movs	r3, #6
 80010c6:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010c8:	2301      	movs	r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010cc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80010d0:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010d2:	2304      	movs	r3, #4
 80010d4:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	4619      	mov	r1, r3
 80010de:	4807      	ldr	r0, [pc, #28]	; (80010fc <ADC_CH7_SELECT+0x54>)
 80010e0:	f002 fe26 	bl	8003d30 <HAL_ADC_ConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <ADC_CH7_SELECT+0x46>
	  {
	    Error_Handler();
 80010ea:	f001 f8ed 	bl	80022c8 <Error_Handler>
	  }
}
 80010ee:	bf00      	nop
 80010f0:	3720      	adds	r7, #32
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	1d500080 	.word	0x1d500080
 80010fc:	2400219c 	.word	0x2400219c

08001100 <ADC_TAKE_ALL>:

void ADC_TAKE_ALL()
{
 8001100:	b5b0      	push	{r4, r5, r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af04      	add	r7, sp, #16


	HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,SET);
 8001106:	2201      	movs	r2, #1
 8001108:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800110c:	4866      	ldr	r0, [pc, #408]	; (80012a8 <ADC_TAKE_ALL+0x1a8>)
 800110e:	f003 fee7 	bl	8004ee0 <HAL_GPIO_WritePin>

	DS1302_ReadTime(time);
 8001112:	4866      	ldr	r0, [pc, #408]	; (80012ac <ADC_TAKE_ALL+0x1ac>)
 8001114:	f7ff fbce 	bl	80008b4 <DS1302_ReadTime>
	sprintf(timeBuffer2,"\n\r %2d/%2d/%2d %2d:%2d:%2d \n\r",time[1],time[2],time[3],time[4],time[5],time[6]);
 8001118:	4b64      	ldr	r3, [pc, #400]	; (80012ac <ADC_TAKE_ALL+0x1ac>)
 800111a:	785b      	ldrb	r3, [r3, #1]
 800111c:	461c      	mov	r4, r3
 800111e:	4b63      	ldr	r3, [pc, #396]	; (80012ac <ADC_TAKE_ALL+0x1ac>)
 8001120:	789b      	ldrb	r3, [r3, #2]
 8001122:	461d      	mov	r5, r3
 8001124:	4b61      	ldr	r3, [pc, #388]	; (80012ac <ADC_TAKE_ALL+0x1ac>)
 8001126:	78db      	ldrb	r3, [r3, #3]
 8001128:	461a      	mov	r2, r3
 800112a:	4b60      	ldr	r3, [pc, #384]	; (80012ac <ADC_TAKE_ALL+0x1ac>)
 800112c:	791b      	ldrb	r3, [r3, #4]
 800112e:	4619      	mov	r1, r3
 8001130:	4b5e      	ldr	r3, [pc, #376]	; (80012ac <ADC_TAKE_ALL+0x1ac>)
 8001132:	795b      	ldrb	r3, [r3, #5]
 8001134:	4618      	mov	r0, r3
 8001136:	4b5d      	ldr	r3, [pc, #372]	; (80012ac <ADC_TAKE_ALL+0x1ac>)
 8001138:	799b      	ldrb	r3, [r3, #6]
 800113a:	9303      	str	r3, [sp, #12]
 800113c:	9002      	str	r0, [sp, #8]
 800113e:	9101      	str	r1, [sp, #4]
 8001140:	9200      	str	r2, [sp, #0]
 8001142:	462b      	mov	r3, r5
 8001144:	4622      	mov	r2, r4
 8001146:	495a      	ldr	r1, [pc, #360]	; (80012b0 <ADC_TAKE_ALL+0x1b0>)
 8001148:	485a      	ldr	r0, [pc, #360]	; (80012b4 <ADC_TAKE_ALL+0x1b4>)
 800114a:	f00a ffb3 	bl	800c0b4 <siprintf>
	strcpy(TimeArray[counter1], timeBuffer2);
 800114e:	4b5a      	ldr	r3, [pc, #360]	; (80012b8 <ADC_TAKE_ALL+0x1b8>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2232      	movs	r2, #50	; 0x32
 8001154:	fb02 f303 	mul.w	r3, r2, r3
 8001158:	4a58      	ldr	r2, [pc, #352]	; (80012bc <ADC_TAKE_ALL+0x1bc>)
 800115a:	4413      	add	r3, r2
 800115c:	4955      	ldr	r1, [pc, #340]	; (80012b4 <ADC_TAKE_ALL+0x1b4>)
 800115e:	4618      	mov	r0, r3
 8001160:	f00a ffc8 	bl	800c0f4 <strcpy>

    HAL_Delay(10);
 8001164:	200a      	movs	r0, #10
 8001166:	f001 ffcb 	bl	8003100 <HAL_Delay>
    ADC_CH0_SELECT();
 800116a:	f7ff feef 	bl	8000f4c <ADC_CH0_SELECT>
    HAL_ADC_Start(&hadc3);
 800116e:	4854      	ldr	r0, [pc, #336]	; (80012c0 <ADC_TAKE_ALL+0x1c0>)
 8001170:	f002 fbde 	bl	8003930 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc3, 100);
 8001174:	2164      	movs	r1, #100	; 0x64
 8001176:	4852      	ldr	r0, [pc, #328]	; (80012c0 <ADC_TAKE_ALL+0x1c0>)
 8001178:	f002 fcd8 	bl	8003b2c <HAL_ADC_PollForConversion>
    adcraw0 = HAL_ADC_GetValue(&hadc3);
 800117c:	4850      	ldr	r0, [pc, #320]	; (80012c0 <ADC_TAKE_ALL+0x1c0>)
 800117e:	f002 fdc9 	bl	8003d14 <HAL_ADC_GetValue>
 8001182:	4603      	mov	r3, r0
 8001184:	461a      	mov	r2, r3
 8001186:	4b4f      	ldr	r3, [pc, #316]	; (80012c4 <ADC_TAKE_ALL+0x1c4>)
 8001188:	601a      	str	r2, [r3, #0]
    adcarray0[counter1]=adcraw0;
 800118a:	4b4b      	ldr	r3, [pc, #300]	; (80012b8 <ADC_TAKE_ALL+0x1b8>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a4d      	ldr	r2, [pc, #308]	; (80012c4 <ADC_TAKE_ALL+0x1c4>)
 8001190:	6812      	ldr	r2, [r2, #0]
 8001192:	494d      	ldr	r1, [pc, #308]	; (80012c8 <ADC_TAKE_ALL+0x1c8>)
 8001194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    HAL_ADC_Stop(&hadc3);
 8001198:	4849      	ldr	r0, [pc, #292]	; (80012c0 <ADC_TAKE_ALL+0x1c0>)
 800119a:	f002 fc93 	bl	8003ac4 <HAL_ADC_Stop>
    HAL_Delay(10);
 800119e:	200a      	movs	r0, #10
 80011a0:	f001 ffae 	bl	8003100 <HAL_Delay>
    ADC_CH1_SELECT();
 80011a4:	f7ff fefc 	bl	8000fa0 <ADC_CH1_SELECT>
    HAL_ADC_Start(&hadc3);
 80011a8:	4845      	ldr	r0, [pc, #276]	; (80012c0 <ADC_TAKE_ALL+0x1c0>)
 80011aa:	f002 fbc1 	bl	8003930 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc3, 100);
 80011ae:	2164      	movs	r1, #100	; 0x64
 80011b0:	4843      	ldr	r0, [pc, #268]	; (80012c0 <ADC_TAKE_ALL+0x1c0>)
 80011b2:	f002 fcbb 	bl	8003b2c <HAL_ADC_PollForConversion>
    adcraw1 = HAL_ADC_GetValue(&hadc3);
 80011b6:	4842      	ldr	r0, [pc, #264]	; (80012c0 <ADC_TAKE_ALL+0x1c0>)
 80011b8:	f002 fdac 	bl	8003d14 <HAL_ADC_GetValue>
 80011bc:	4603      	mov	r3, r0
 80011be:	461a      	mov	r2, r3
 80011c0:	4b42      	ldr	r3, [pc, #264]	; (80012cc <ADC_TAKE_ALL+0x1cc>)
 80011c2:	601a      	str	r2, [r3, #0]
    adcarray1[counter1]=adcraw1;
 80011c4:	4b3c      	ldr	r3, [pc, #240]	; (80012b8 <ADC_TAKE_ALL+0x1b8>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a40      	ldr	r2, [pc, #256]	; (80012cc <ADC_TAKE_ALL+0x1cc>)
 80011ca:	6812      	ldr	r2, [r2, #0]
 80011cc:	4940      	ldr	r1, [pc, #256]	; (80012d0 <ADC_TAKE_ALL+0x1d0>)
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    HAL_ADC_Stop(&hadc3);
 80011d2:	483b      	ldr	r0, [pc, #236]	; (80012c0 <ADC_TAKE_ALL+0x1c0>)
 80011d4:	f002 fc76 	bl	8003ac4 <HAL_ADC_Stop>
    HAL_Delay(10);
 80011d8:	200a      	movs	r0, #10
 80011da:	f001 ff91 	bl	8003100 <HAL_Delay>
    ADC_CH4_SELECT();
 80011de:	f7ff ff0b 	bl	8000ff8 <ADC_CH4_SELECT>
    HAL_ADC_Start(&hadc3);
 80011e2:	4837      	ldr	r0, [pc, #220]	; (80012c0 <ADC_TAKE_ALL+0x1c0>)
 80011e4:	f002 fba4 	bl	8003930 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc3, 100);
 80011e8:	2164      	movs	r1, #100	; 0x64
 80011ea:	4835      	ldr	r0, [pc, #212]	; (80012c0 <ADC_TAKE_ALL+0x1c0>)
 80011ec:	f002 fc9e 	bl	8003b2c <HAL_ADC_PollForConversion>
    adcraw4 = HAL_ADC_GetValue(&hadc3);
 80011f0:	4833      	ldr	r0, [pc, #204]	; (80012c0 <ADC_TAKE_ALL+0x1c0>)
 80011f2:	f002 fd8f 	bl	8003d14 <HAL_ADC_GetValue>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b36      	ldr	r3, [pc, #216]	; (80012d4 <ADC_TAKE_ALL+0x1d4>)
 80011fc:	601a      	str	r2, [r3, #0]
    adcarray4[counter1]=adcraw4;
 80011fe:	4b2e      	ldr	r3, [pc, #184]	; (80012b8 <ADC_TAKE_ALL+0x1b8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a34      	ldr	r2, [pc, #208]	; (80012d4 <ADC_TAKE_ALL+0x1d4>)
 8001204:	6812      	ldr	r2, [r2, #0]
 8001206:	4934      	ldr	r1, [pc, #208]	; (80012d8 <ADC_TAKE_ALL+0x1d8>)
 8001208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    HAL_ADC_Stop(&hadc3);
 800120c:	482c      	ldr	r0, [pc, #176]	; (80012c0 <ADC_TAKE_ALL+0x1c0>)
 800120e:	f002 fc59 	bl	8003ac4 <HAL_ADC_Stop>
    HAL_Delay(10);
 8001212:	200a      	movs	r0, #10
 8001214:	f001 ff74 	bl	8003100 <HAL_Delay>
    ADC_CH6_SELECT();
 8001218:	f7ff ff1a 	bl	8001050 <ADC_CH6_SELECT>
    HAL_ADC_Start(&hadc3);
 800121c:	4828      	ldr	r0, [pc, #160]	; (80012c0 <ADC_TAKE_ALL+0x1c0>)
 800121e:	f002 fb87 	bl	8003930 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc3, 100);
 8001222:	2164      	movs	r1, #100	; 0x64
 8001224:	4826      	ldr	r0, [pc, #152]	; (80012c0 <ADC_TAKE_ALL+0x1c0>)
 8001226:	f002 fc81 	bl	8003b2c <HAL_ADC_PollForConversion>
    adcraw6 = HAL_ADC_GetValue(&hadc3);
 800122a:	4825      	ldr	r0, [pc, #148]	; (80012c0 <ADC_TAKE_ALL+0x1c0>)
 800122c:	f002 fd72 	bl	8003d14 <HAL_ADC_GetValue>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	4b29      	ldr	r3, [pc, #164]	; (80012dc <ADC_TAKE_ALL+0x1dc>)
 8001236:	601a      	str	r2, [r3, #0]
    adcarray6[counter1]=adcraw6;
 8001238:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <ADC_TAKE_ALL+0x1b8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a27      	ldr	r2, [pc, #156]	; (80012dc <ADC_TAKE_ALL+0x1dc>)
 800123e:	6812      	ldr	r2, [r2, #0]
 8001240:	4927      	ldr	r1, [pc, #156]	; (80012e0 <ADC_TAKE_ALL+0x1e0>)
 8001242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    HAL_ADC_Stop(&hadc3);
 8001246:	481e      	ldr	r0, [pc, #120]	; (80012c0 <ADC_TAKE_ALL+0x1c0>)
 8001248:	f002 fc3c 	bl	8003ac4 <HAL_ADC_Stop>
    HAL_Delay(10);
 800124c:	200a      	movs	r0, #10
 800124e:	f001 ff57 	bl	8003100 <HAL_Delay>
    ADC_CH7_SELECT();
 8001252:	f7ff ff29 	bl	80010a8 <ADC_CH7_SELECT>
    HAL_ADC_Start(&hadc3);
 8001256:	481a      	ldr	r0, [pc, #104]	; (80012c0 <ADC_TAKE_ALL+0x1c0>)
 8001258:	f002 fb6a 	bl	8003930 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc3, 100);
 800125c:	2164      	movs	r1, #100	; 0x64
 800125e:	4818      	ldr	r0, [pc, #96]	; (80012c0 <ADC_TAKE_ALL+0x1c0>)
 8001260:	f002 fc64 	bl	8003b2c <HAL_ADC_PollForConversion>
    adcraw7 = HAL_ADC_GetValue(&hadc3);
 8001264:	4816      	ldr	r0, [pc, #88]	; (80012c0 <ADC_TAKE_ALL+0x1c0>)
 8001266:	f002 fd55 	bl	8003d14 <HAL_ADC_GetValue>
 800126a:	4603      	mov	r3, r0
 800126c:	461a      	mov	r2, r3
 800126e:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <ADC_TAKE_ALL+0x1e4>)
 8001270:	601a      	str	r2, [r3, #0]
    adcarray7[counter1]=adcraw7;
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <ADC_TAKE_ALL+0x1b8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a1b      	ldr	r2, [pc, #108]	; (80012e4 <ADC_TAKE_ALL+0x1e4>)
 8001278:	6812      	ldr	r2, [r2, #0]
 800127a:	491b      	ldr	r1, [pc, #108]	; (80012e8 <ADC_TAKE_ALL+0x1e8>)
 800127c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    HAL_ADC_Stop(&hadc3);
 8001280:	480f      	ldr	r0, [pc, #60]	; (80012c0 <ADC_TAKE_ALL+0x1c0>)
 8001282:	f002 fc1f 	bl	8003ac4 <HAL_ADC_Stop>
    HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800128c:	4806      	ldr	r0, [pc, #24]	; (80012a8 <ADC_TAKE_ALL+0x1a8>)
 800128e:	f003 fe27 	bl	8004ee0 <HAL_GPIO_WritePin>

    counter1++;
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <ADC_TAKE_ALL+0x1b8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	3301      	adds	r3, #1
 8001298:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <ADC_TAKE_ALL+0x1b8>)
 800129a:	6013      	str	r3, [r2, #0]
    adc_flag=0;
 800129c:	4b13      	ldr	r3, [pc, #76]	; (80012ec <ADC_TAKE_ALL+0x1ec>)
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bdb0      	pop	{r4, r5, r7, pc}
 80012a8:	58020400 	.word	0x58020400
 80012ac:	24002650 	.word	0x24002650
 80012b0:	0800c9d4 	.word	0x0800c9d4
 80012b4:	24002754 	.word	0x24002754
 80012b8:	240000d4 	.word	0x240000d4
 80012bc:	24000ba0 	.word	0x24000ba0
 80012c0:	2400219c 	.word	0x2400219c
 80012c4:	240000c0 	.word	0x240000c0
 80012c8:	24002474 	.word	0x24002474
 80012cc:	240000c4 	.word	0x240000c4
 80012d0:	24002264 	.word	0x24002264
 80012d4:	240000c8 	.word	0x240000c8
 80012d8:	240027b8 	.word	0x240027b8
 80012dc:	240000cc 	.word	0x240000cc
 80012e0:	24002a60 	.word	0x24002a60
 80012e4:	240000d0 	.word	0x240000d0
 80012e8:	24001fd8 	.word	0x24001fd8
 80012ec:	240000b4 	.word	0x240000b4

080012f0 <uarttrigger>:

void uarttrigger()
{
 80012f0:	b5b0      	push	{r4, r5, r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af04      	add	r7, sp, #16
	DS1302_ReadTime(time);
 80012f6:	486a      	ldr	r0, [pc, #424]	; (80014a0 <uarttrigger+0x1b0>)
 80012f8:	f7ff fadc 	bl	80008b4 <DS1302_ReadTime>
	sprintf(timeBuffer,"\n\r %2d/%2d/%2d %2d:%2d:%2d \n\r",time[1],time[2],time[3],time[4],time[5],time[6]);
 80012fc:	4b68      	ldr	r3, [pc, #416]	; (80014a0 <uarttrigger+0x1b0>)
 80012fe:	785b      	ldrb	r3, [r3, #1]
 8001300:	461c      	mov	r4, r3
 8001302:	4b67      	ldr	r3, [pc, #412]	; (80014a0 <uarttrigger+0x1b0>)
 8001304:	789b      	ldrb	r3, [r3, #2]
 8001306:	461d      	mov	r5, r3
 8001308:	4b65      	ldr	r3, [pc, #404]	; (80014a0 <uarttrigger+0x1b0>)
 800130a:	78db      	ldrb	r3, [r3, #3]
 800130c:	461a      	mov	r2, r3
 800130e:	4b64      	ldr	r3, [pc, #400]	; (80014a0 <uarttrigger+0x1b0>)
 8001310:	791b      	ldrb	r3, [r3, #4]
 8001312:	4619      	mov	r1, r3
 8001314:	4b62      	ldr	r3, [pc, #392]	; (80014a0 <uarttrigger+0x1b0>)
 8001316:	795b      	ldrb	r3, [r3, #5]
 8001318:	4618      	mov	r0, r3
 800131a:	4b61      	ldr	r3, [pc, #388]	; (80014a0 <uarttrigger+0x1b0>)
 800131c:	799b      	ldrb	r3, [r3, #6]
 800131e:	9303      	str	r3, [sp, #12]
 8001320:	9002      	str	r0, [sp, #8]
 8001322:	9101      	str	r1, [sp, #4]
 8001324:	9200      	str	r2, [sp, #0]
 8001326:	462b      	mov	r3, r5
 8001328:	4622      	mov	r2, r4
 800132a:	495e      	ldr	r1, [pc, #376]	; (80014a4 <uarttrigger+0x1b4>)
 800132c:	485e      	ldr	r0, [pc, #376]	; (80014a8 <uarttrigger+0x1b8>)
 800132e:	f00a fec1 	bl	800c0b4 <siprintf>


	HAL_UART_Transmit(&huart3, (uint8_t*)timeBuffer, strlen(timeBuffer), HAL_MAX_DELAY);
 8001332:	485d      	ldr	r0, [pc, #372]	; (80014a8 <uarttrigger+0x1b8>)
 8001334:	f7fe ffd4 	bl	80002e0 <strlen>
 8001338:	4603      	mov	r3, r0
 800133a:	b29a      	uxth	r2, r3
 800133c:	f04f 33ff 	mov.w	r3, #4294967295
 8001340:	4959      	ldr	r1, [pc, #356]	; (80014a8 <uarttrigger+0x1b8>)
 8001342:	485a      	ldr	r0, [pc, #360]	; (80014ac <uarttrigger+0x1bc>)
 8001344:	f009 faaa 	bl	800a89c <HAL_UART_Transmit>

	sprintf(uartBuf, "Encoder count: %d\r\n", (int)TIM4->CNT);
 8001348:	4b59      	ldr	r3, [pc, #356]	; (80014b0 <uarttrigger+0x1c0>)
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	461a      	mov	r2, r3
 800134e:	4959      	ldr	r1, [pc, #356]	; (80014b4 <uarttrigger+0x1c4>)
 8001350:	4859      	ldr	r0, [pc, #356]	; (80014b8 <uarttrigger+0x1c8>)
 8001352:	f00a feaf 	bl	800c0b4 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 8001356:	4858      	ldr	r0, [pc, #352]	; (80014b8 <uarttrigger+0x1c8>)
 8001358:	f7fe ffc2 	bl	80002e0 <strlen>
 800135c:	4603      	mov	r3, r0
 800135e:	b29a      	uxth	r2, r3
 8001360:	f04f 33ff 	mov.w	r3, #4294967295
 8001364:	4954      	ldr	r1, [pc, #336]	; (80014b8 <uarttrigger+0x1c8>)
 8001366:	4851      	ldr	r0, [pc, #324]	; (80014ac <uarttrigger+0x1bc>)
 8001368:	f009 fa98 	bl	800a89c <HAL_UART_Transmit>
    sprintf(buffer, "SetTime ADC:%ds\n", scaledTime);
 800136c:	4b53      	ldr	r3, [pc, #332]	; (80014bc <uarttrigger+0x1cc>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	4953      	ldr	r1, [pc, #332]	; (80014c0 <uarttrigger+0x1d0>)
 8001374:	4853      	ldr	r0, [pc, #332]	; (80014c4 <uarttrigger+0x1d4>)
 8001376:	f00a fe9d 	bl	800c0b4 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800137a:	4852      	ldr	r0, [pc, #328]	; (80014c4 <uarttrigger+0x1d4>)
 800137c:	f7fe ffb0 	bl	80002e0 <strlen>
 8001380:	4603      	mov	r3, r0
 8001382:	b29a      	uxth	r2, r3
 8001384:	f04f 33ff 	mov.w	r3, #4294967295
 8001388:	494e      	ldr	r1, [pc, #312]	; (80014c4 <uarttrigger+0x1d4>)
 800138a:	4848      	ldr	r0, [pc, #288]	; (80014ac <uarttrigger+0x1bc>)
 800138c:	f009 fa86 	bl	800a89c <HAL_UART_Transmit>

	sprintf(adcbuffer0,"\n\r Channel 0  %2d \n\r",adcraw0);
 8001390:	4b4d      	ldr	r3, [pc, #308]	; (80014c8 <uarttrigger+0x1d8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	494d      	ldr	r1, [pc, #308]	; (80014cc <uarttrigger+0x1dc>)
 8001398:	484d      	ldr	r0, [pc, #308]	; (80014d0 <uarttrigger+0x1e0>)
 800139a:	f00a fe8b 	bl	800c0b4 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer0, strlen(adcbuffer0), HAL_MAX_DELAY);
 800139e:	484c      	ldr	r0, [pc, #304]	; (80014d0 <uarttrigger+0x1e0>)
 80013a0:	f7fe ff9e 	bl	80002e0 <strlen>
 80013a4:	4603      	mov	r3, r0
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ac:	4948      	ldr	r1, [pc, #288]	; (80014d0 <uarttrigger+0x1e0>)
 80013ae:	483f      	ldr	r0, [pc, #252]	; (80014ac <uarttrigger+0x1bc>)
 80013b0:	f009 fa74 	bl	800a89c <HAL_UART_Transmit>
	sprintf(adcbuffer1,"\n\r Channel 1  %2d \n\r",adcraw1);
 80013b4:	4b47      	ldr	r3, [pc, #284]	; (80014d4 <uarttrigger+0x1e4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4947      	ldr	r1, [pc, #284]	; (80014d8 <uarttrigger+0x1e8>)
 80013bc:	4847      	ldr	r0, [pc, #284]	; (80014dc <uarttrigger+0x1ec>)
 80013be:	f00a fe79 	bl	800c0b4 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer1, strlen(adcbuffer1), HAL_MAX_DELAY);
 80013c2:	4846      	ldr	r0, [pc, #280]	; (80014dc <uarttrigger+0x1ec>)
 80013c4:	f7fe ff8c 	bl	80002e0 <strlen>
 80013c8:	4603      	mov	r3, r0
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	f04f 33ff 	mov.w	r3, #4294967295
 80013d0:	4942      	ldr	r1, [pc, #264]	; (80014dc <uarttrigger+0x1ec>)
 80013d2:	4836      	ldr	r0, [pc, #216]	; (80014ac <uarttrigger+0x1bc>)
 80013d4:	f009 fa62 	bl	800a89c <HAL_UART_Transmit>
	sprintf(adcbuffer4,"\n\r Channel 4  %2d \n\r",adcraw4);
 80013d8:	4b41      	ldr	r3, [pc, #260]	; (80014e0 <uarttrigger+0x1f0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	4941      	ldr	r1, [pc, #260]	; (80014e4 <uarttrigger+0x1f4>)
 80013e0:	4841      	ldr	r0, [pc, #260]	; (80014e8 <uarttrigger+0x1f8>)
 80013e2:	f00a fe67 	bl	800c0b4 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer4, strlen(adcbuffer4), HAL_MAX_DELAY);
 80013e6:	4840      	ldr	r0, [pc, #256]	; (80014e8 <uarttrigger+0x1f8>)
 80013e8:	f7fe ff7a 	bl	80002e0 <strlen>
 80013ec:	4603      	mov	r3, r0
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295
 80013f4:	493c      	ldr	r1, [pc, #240]	; (80014e8 <uarttrigger+0x1f8>)
 80013f6:	482d      	ldr	r0, [pc, #180]	; (80014ac <uarttrigger+0x1bc>)
 80013f8:	f009 fa50 	bl	800a89c <HAL_UART_Transmit>
	sprintf(adcbuffer6,"\n\r Channel 6  %2d \n\r",adcraw6);
 80013fc:	4b3b      	ldr	r3, [pc, #236]	; (80014ec <uarttrigger+0x1fc>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	493b      	ldr	r1, [pc, #236]	; (80014f0 <uarttrigger+0x200>)
 8001404:	483b      	ldr	r0, [pc, #236]	; (80014f4 <uarttrigger+0x204>)
 8001406:	f00a fe55 	bl	800c0b4 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer6, strlen(adcbuffer6), HAL_MAX_DELAY);
 800140a:	483a      	ldr	r0, [pc, #232]	; (80014f4 <uarttrigger+0x204>)
 800140c:	f7fe ff68 	bl	80002e0 <strlen>
 8001410:	4603      	mov	r3, r0
 8001412:	b29a      	uxth	r2, r3
 8001414:	f04f 33ff 	mov.w	r3, #4294967295
 8001418:	4936      	ldr	r1, [pc, #216]	; (80014f4 <uarttrigger+0x204>)
 800141a:	4824      	ldr	r0, [pc, #144]	; (80014ac <uarttrigger+0x1bc>)
 800141c:	f009 fa3e 	bl	800a89c <HAL_UART_Transmit>
	sprintf(adcbuffer7,"\n\r Channel 7  %2d \n\r",adcraw7);
 8001420:	4b35      	ldr	r3, [pc, #212]	; (80014f8 <uarttrigger+0x208>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	4935      	ldr	r1, [pc, #212]	; (80014fc <uarttrigger+0x20c>)
 8001428:	4835      	ldr	r0, [pc, #212]	; (8001500 <uarttrigger+0x210>)
 800142a:	f00a fe43 	bl	800c0b4 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer7, strlen(adcbuffer7), HAL_MAX_DELAY);
 800142e:	4834      	ldr	r0, [pc, #208]	; (8001500 <uarttrigger+0x210>)
 8001430:	f7fe ff56 	bl	80002e0 <strlen>
 8001434:	4603      	mov	r3, r0
 8001436:	b29a      	uxth	r2, r3
 8001438:	f04f 33ff 	mov.w	r3, #4294967295
 800143c:	4930      	ldr	r1, [pc, #192]	; (8001500 <uarttrigger+0x210>)
 800143e:	481b      	ldr	r0, [pc, #108]	; (80014ac <uarttrigger+0x1bc>)
 8001440:	f009 fa2c 	bl	800a89c <HAL_UART_Transmit>
	for (uint16_t i = 0; i < 100; i++) {
 8001444:	2300      	movs	r3, #0
 8001446:	82fb      	strh	r3, [r7, #22]
 8001448:	e020      	b.n	800148c <uarttrigger+0x19c>
	    EEPROM_Read(i, 0, (uint8_t*)&adcarray0[i], sizeof(int));
 800144a:	8af8      	ldrh	r0, [r7, #22]
 800144c:	8afb      	ldrh	r3, [r7, #22]
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4a2c      	ldr	r2, [pc, #176]	; (8001504 <uarttrigger+0x214>)
 8001452:	441a      	add	r2, r3
 8001454:	2304      	movs	r3, #4
 8001456:	2100      	movs	r1, #0
 8001458:	f7ff fb9c 	bl	8000b94 <EEPROM_Read>

	    // Print the value using UART3
	    char uartBuffer[20];
	    sprintf(uartBuffer, "Value at index %d: %d\r\n", i, adcarray0[i]);
 800145c:	8afa      	ldrh	r2, [r7, #22]
 800145e:	8afb      	ldrh	r3, [r7, #22]
 8001460:	4928      	ldr	r1, [pc, #160]	; (8001504 <uarttrigger+0x214>)
 8001462:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001466:	4638      	mov	r0, r7
 8001468:	4927      	ldr	r1, [pc, #156]	; (8001508 <uarttrigger+0x218>)
 800146a:	f00a fe23 	bl	800c0b4 <siprintf>
	    HAL_UART_Transmit(&huart3, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 800146e:	463b      	mov	r3, r7
 8001470:	4618      	mov	r0, r3
 8001472:	f7fe ff35 	bl	80002e0 <strlen>
 8001476:	4603      	mov	r3, r0
 8001478:	b29a      	uxth	r2, r3
 800147a:	4639      	mov	r1, r7
 800147c:	f04f 33ff 	mov.w	r3, #4294967295
 8001480:	480a      	ldr	r0, [pc, #40]	; (80014ac <uarttrigger+0x1bc>)
 8001482:	f009 fa0b 	bl	800a89c <HAL_UART_Transmit>
	for (uint16_t i = 0; i < 100; i++) {
 8001486:	8afb      	ldrh	r3, [r7, #22]
 8001488:	3301      	adds	r3, #1
 800148a:	82fb      	strh	r3, [r7, #22]
 800148c:	8afb      	ldrh	r3, [r7, #22]
 800148e:	2b63      	cmp	r3, #99	; 0x63
 8001490:	d9db      	bls.n	800144a <uarttrigger+0x15a>
	}
	HAL_Delay(10);
 8001492:	200a      	movs	r0, #10
 8001494:	f001 fe34 	bl	8003100 <HAL_Delay>

}
 8001498:	bf00      	nop
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bdb0      	pop	{r4, r5, r7, pc}
 80014a0:	24002650 	.word	0x24002650
 80014a4:	0800c9d4 	.word	0x0800c9d4
 80014a8:	24001f74 	.word	0x24001f74
 80014ac:	24000670 	.word	0x24000670
 80014b0:	40000800 	.word	0x40000800
 80014b4:	0800c9f4 	.word	0x0800c9f4
 80014b8:	240023f4 	.word	0x240023f4
 80014bc:	2400243c 	.word	0x2400243c
 80014c0:	0800ca08 	.word	0x0800ca08
 80014c4:	24002428 	.word	0x24002428
 80014c8:	240000c0 	.word	0x240000c0
 80014cc:	0800ca1c 	.word	0x0800ca1c
 80014d0:	24002a2c 	.word	0x24002a2c
 80014d4:	240000c4 	.word	0x240000c4
 80014d8:	0800ca34 	.word	0x0800ca34
 80014dc:	240026bc 	.word	0x240026bc
 80014e0:	240000c8 	.word	0x240000c8
 80014e4:	0800ca4c 	.word	0x0800ca4c
 80014e8:	24002440 	.word	0x24002440
 80014ec:	240000cc 	.word	0x240000cc
 80014f0:	0800ca64 	.word	0x0800ca64
 80014f4:	24002168 	.word	0x24002168
 80014f8:	240000d0 	.word	0x240000d0
 80014fc:	0800ca7c 	.word	0x0800ca7c
 8001500:	24002948 	.word	0x24002948
 8001504:	24002474 	.word	0x24002474
 8001508:	0800ca94 	.word	0x0800ca94

0800150c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001512:	f001 fd63 	bl	8002fdc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001516:	f000 f9f1 	bl	80018fc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800151a:	f000 fa6f 	bl	80019fc <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151e:	f000 fd41 	bl	8001fa4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001522:	f000 fcc1 	bl	8001ea8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001526:	f000 fd0b 	bl	8001f40 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800152a:	f000 fae5 	bl	8001af8 <MX_I2C1_Init>
  MX_ADC3_Init();
 800152e:	f000 fa81 	bl	8001a34 <MX_ADC3_Init>
  MX_TIM1_Init();
 8001532:	f000 fb21 	bl	8001b78 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001536:	f000 fb73 	bl	8001c20 <MX_TIM3_Init>
  MX_TIM4_Init();
 800153a:	f000 fbc1 	bl	8001cc0 <MX_TIM4_Init>
  MX_TIM14_Init();
 800153e:	f000 fc65 	bl	8001e0c <MX_TIM14_Init>
  MX_TIM5_Init();
 8001542:	f000 fc13 	bl	8001d6c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8001546:	f000 ff17 	bl	8002378 <ssd1306_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 800154a:	4821      	ldr	r0, [pc, #132]	; (80015d0 <main+0xc4>)
 800154c:	f007 fe06 	bl	800915c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8001550:	4820      	ldr	r0, [pc, #128]	; (80015d4 <main+0xc8>)
 8001552:	f007 fe03 	bl	800915c <HAL_TIM_Base_Start_IT>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001556:	201d      	movs	r0, #29
 8001558:	f003 fadf 	bl	8004b1a <HAL_NVIC_EnableIRQ>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800155c:	213c      	movs	r1, #60	; 0x3c
 800155e:	481e      	ldr	r0, [pc, #120]	; (80015d8 <main+0xcc>)
 8001560:	f008 f88a 	bl	8009678 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8001564:	2100      	movs	r1, #0
 8001566:	481d      	ldr	r0, [pc, #116]	; (80015dc <main+0xd0>)
 8001568:	f007 fed2 	bl	8009310 <HAL_TIM_PWM_Start>
  DS1302_Init();
 800156c:	f7ff fa46 	bl	80009fc <DS1302_Init>
  HAL_Delay(200);
 8001570:	20c8      	movs	r0, #200	; 0xc8
 8001572:	f001 fdc5 	bl	8003100 <HAL_Delay>
	ssd1306_Fill(Black);
 8001576:	2000      	movs	r0, #0
 8001578:	f000 ff68 	bl	800244c <ssd1306_Fill>

	ssd1306_SetCursor(0, 5); // Position the cursor for the first line
 800157c:	2105      	movs	r1, #5
 800157e:	2000      	movs	r0, #0
 8001580:	f001 f8b2 	bl	80026e8 <ssd1306_SetCursor>
	ssd1306_WriteString("Teletos", Font_16x26, White);
 8001584:	4a16      	ldr	r2, [pc, #88]	; (80015e0 <main+0xd4>)
 8001586:	2301      	movs	r3, #1
 8001588:	ca06      	ldmia	r2, {r1, r2}
 800158a:	4816      	ldr	r0, [pc, #88]	; (80015e4 <main+0xd8>)
 800158c:	f001 f886 	bl	800269c <ssd1306_WriteString>

	ssd1306_SetCursor(0, 35); // Position the cursor for the first line
 8001590:	2123      	movs	r1, #35	; 0x23
 8001592:	2000      	movs	r0, #0
 8001594:	f001 f8a8 	bl	80026e8 <ssd1306_SetCursor>
	ssd1306_WriteString("Embedded", Font_16x26, White);
 8001598:	4a11      	ldr	r2, [pc, #68]	; (80015e0 <main+0xd4>)
 800159a:	2301      	movs	r3, #1
 800159c:	ca06      	ldmia	r2, {r1, r2}
 800159e:	4812      	ldr	r0, [pc, #72]	; (80015e8 <main+0xdc>)
 80015a0:	f001 f87c 	bl	800269c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80015a4:	f000 ff76 	bl	8002494 <ssd1306_UpdateScreen>
	 HAL_Delay(2000);
 80015a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015ac:	f001 fda8 	bl	8003100 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  I2C_ScanBus();
	  if(HAL_GPIO_ReadPin(EEPROM_BUTTON_GPIO_Port, EEPROM_BUTTON_Pin)==0)
 80015b0:	2101      	movs	r1, #1
 80015b2:	480e      	ldr	r0, [pc, #56]	; (80015ec <main+0xe0>)
 80015b4:	f003 fc7c 	bl	8004eb0 <HAL_GPIO_ReadPin>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d14b      	bne.n	8001656 <main+0x14a>
	  {
		  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,SET);
 80015be:	2201      	movs	r2, #1
 80015c0:	2180      	movs	r1, #128	; 0x80
 80015c2:	480b      	ldr	r0, [pc, #44]	; (80015f0 <main+0xe4>)
 80015c4:	f003 fc8c 	bl	8004ee0 <HAL_GPIO_WritePin>
		  for (uint16_t i = 0; i < 100; i++) {
 80015c8:	2300      	movs	r3, #0
 80015ca:	83fb      	strh	r3, [r7, #30]
 80015cc:	e03c      	b.n	8001648 <main+0x13c>
 80015ce:	bf00      	nop
 80015d0:	24001f28 	.word	0x24001f28
 80015d4:	24000b54 	.word	0x24000b54
 80015d8:	24000558 	.word	0x24000558
 80015dc:	2400297c 	.word	0x2400297c
 80015e0:	2400001c 	.word	0x2400001c
 80015e4:	0800caac 	.word	0x0800caac
 80015e8:	0800cab4 	.word	0x0800cab4
 80015ec:	58021000 	.word	0x58021000
 80015f0:	58020400 	.word	0x58020400
		      EEPROM_Write(i, 0, (uint8_t*)&adcarray0[i], sizeof(int));
 80015f4:	8bf8      	ldrh	r0, [r7, #30]
 80015f6:	8bfb      	ldrh	r3, [r7, #30]
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4aa4      	ldr	r2, [pc, #656]	; (800188c <main+0x380>)
 80015fc:	441a      	add	r2, r3
 80015fe:	2304      	movs	r3, #4
 8001600:	2100      	movs	r1, #0
 8001602:	f7ff fa61 	bl	8000ac8 <EEPROM_Write>
		  	ssd1306_Fill(Black);
 8001606:	2000      	movs	r0, #0
 8001608:	f000 ff20 	bl	800244c <ssd1306_Fill>

		  	ssd1306_SetCursor(0, 0); // Position the cursor for the first line
 800160c:	2100      	movs	r1, #0
 800160e:	2000      	movs	r0, #0
 8001610:	f001 f86a 	bl	80026e8 <ssd1306_SetCursor>
		  	ssd1306_WriteString("EEPROM ", Font_11x18, White);
 8001614:	4a9e      	ldr	r2, [pc, #632]	; (8001890 <main+0x384>)
 8001616:	2301      	movs	r3, #1
 8001618:	ca06      	ldmia	r2, {r1, r2}
 800161a:	489e      	ldr	r0, [pc, #632]	; (8001894 <main+0x388>)
 800161c:	f001 f83e 	bl	800269c <ssd1306_WriteString>
		  	ssd1306_SetCursor(0, 20); // Position the cursor for the first line
 8001620:	2114      	movs	r1, #20
 8001622:	2000      	movs	r0, #0
 8001624:	f001 f860 	bl	80026e8 <ssd1306_SetCursor>
		  	ssd1306_WriteString("WRITE ", Font_11x18, White);
 8001628:	4a99      	ldr	r2, [pc, #612]	; (8001890 <main+0x384>)
 800162a:	2301      	movs	r3, #1
 800162c:	ca06      	ldmia	r2, {r1, r2}
 800162e:	489a      	ldr	r0, [pc, #616]	; (8001898 <main+0x38c>)
 8001630:	f001 f834 	bl	800269c <ssd1306_WriteString>
		  	ssd1306_UpdateScreen();
 8001634:	f000 ff2e 	bl	8002494 <ssd1306_UpdateScreen>
		  	HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,RESET);
 8001638:	2200      	movs	r2, #0
 800163a:	2180      	movs	r1, #128	; 0x80
 800163c:	4897      	ldr	r0, [pc, #604]	; (800189c <main+0x390>)
 800163e:	f003 fc4f 	bl	8004ee0 <HAL_GPIO_WritePin>
		  for (uint16_t i = 0; i < 100; i++) {
 8001642:	8bfb      	ldrh	r3, [r7, #30]
 8001644:	3301      	adds	r3, #1
 8001646:	83fb      	strh	r3, [r7, #30]
 8001648:	8bfb      	ldrh	r3, [r7, #30]
 800164a:	2b63      	cmp	r3, #99	; 0x63
 800164c:	d9d2      	bls.n	80015f4 <main+0xe8>
		  }
		  HAL_Delay(500);
 800164e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001652:	f001 fd55 	bl	8003100 <HAL_Delay>
	  }
	  ssd1306_Fill(Black);
 8001656:	2000      	movs	r0, #0
 8001658:	f000 fef8 	bl	800244c <ssd1306_Fill>
	  if(uartflag==1)
 800165c:	4b90      	ldr	r3, [pc, #576]	; (80018a0 <main+0x394>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d104      	bne.n	800166e <main+0x162>
	  {
		  uarttrigger();
 8001664:	f7ff fe44 	bl	80012f0 <uarttrigger>
		  uartflag=0;
 8001668:	4b8d      	ldr	r3, [pc, #564]	; (80018a0 <main+0x394>)
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
	  }
      encoderReading = TIM4->CNT;  // Original reading
 800166e:	4b8d      	ldr	r3, [pc, #564]	; (80018a4 <main+0x398>)
 8001670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001672:	4a8d      	ldr	r2, [pc, #564]	; (80018a8 <main+0x39c>)
 8001674:	6013      	str	r3, [r2, #0]
      int detents = encoderReading / ENCODER_STEP;
 8001676:	4b8c      	ldr	r3, [pc, #560]	; (80018a8 <main+0x39c>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	4b8c      	ldr	r3, [pc, #560]	; (80018ac <main+0x3a0>)
 800167c:	fba3 1302 	umull	r1, r3, r3, r2
 8001680:	1ad2      	subs	r2, r2, r3
 8001682:	0852      	lsrs	r2, r2, #1
 8001684:	4413      	add	r3, r2
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	61bb      	str	r3, [r7, #24]
      scaledTime = MIN_TIME + (detents * TIME_STEP);
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4613      	mov	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	3301      	adds	r3, #1
 8001696:	461a      	mov	r2, r3
 8001698:	4b85      	ldr	r3, [pc, #532]	; (80018b0 <main+0x3a4>)
 800169a:	601a      	str	r2, [r3, #0]
      if (scaledTime > MAX_TIME) {
 800169c:	4b84      	ldr	r3, [pc, #528]	; (80018b0 <main+0x3a4>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80016a4:	d902      	bls.n	80016ac <main+0x1a0>
          scaledTime = MIN_TIME;
 80016a6:	4b82      	ldr	r3, [pc, #520]	; (80018b0 <main+0x3a4>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	601a      	str	r2, [r3, #0]
      }
      if (scaledTime > MIN_TIME) {
 80016ac:	4b80      	ldr	r3, [pc, #512]	; (80018b0 <main+0x3a4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d904      	bls.n	80016be <main+0x1b2>
          scaledTime = scaledTime-MIN_TIME;
 80016b4:	4b7e      	ldr	r3, [pc, #504]	; (80018b0 <main+0x3a4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	3b01      	subs	r3, #1
 80016ba:	4a7d      	ldr	r2, [pc, #500]	; (80018b0 <main+0x3a4>)
 80016bc:	6013      	str	r3, [r2, #0]
      }
      if((encoderReading>1018)&&(encoderReading<=1024))
 80016be:	4b7a      	ldr	r3, [pc, #488]	; (80018a8 <main+0x39c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f240 32fa 	movw	r2, #1018	; 0x3fa
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d908      	bls.n	80016dc <main+0x1d0>
 80016ca:	4b77      	ldr	r3, [pc, #476]	; (80018a8 <main+0x39c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d2:	d803      	bhi.n	80016dc <main+0x1d0>
      {
    	  scaledTime=300;
 80016d4:	4b76      	ldr	r3, [pc, #472]	; (80018b0 <main+0x3a4>)
 80016d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016da:	601a      	str	r2, [r3, #0]


      // Round to the nearest multiple of 10


      setTiming1=(scaledTime);
 80016dc:	4b74      	ldr	r3, [pc, #464]	; (80018b0 <main+0x3a4>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a74      	ldr	r2, [pc, #464]	; (80018b4 <main+0x3a8>)
 80016e2:	6013      	str	r3, [r2, #0]
      // Now scaledTime should be in the range of 1 second to 300 seconds
      sprintf(buffer, "SetTime ADC:%ds\n", scaledTime);
 80016e4:	4b72      	ldr	r3, [pc, #456]	; (80018b0 <main+0x3a4>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	4973      	ldr	r1, [pc, #460]	; (80018b8 <main+0x3ac>)
 80016ec:	4873      	ldr	r0, [pc, #460]	; (80018bc <main+0x3b0>)
 80016ee:	f00a fce1 	bl	800c0b4 <siprintf>

      ssd1306_SetCursor(13,56); // Adjust these values according to where you want the text to start
 80016f2:	2138      	movs	r1, #56	; 0x38
 80016f4:	200d      	movs	r0, #13
 80016f6:	f000 fff7 	bl	80026e8 <ssd1306_SetCursor>
      ssd1306_WriteString(buffer, Font_6x8, White); // Replace with your font and color choice
 80016fa:	4a71      	ldr	r2, [pc, #452]	; (80018c0 <main+0x3b4>)
 80016fc:	2301      	movs	r3, #1
 80016fe:	ca06      	ldmia	r2, {r1, r2}
 8001700:	486e      	ldr	r0, [pc, #440]	; (80018bc <main+0x3b0>)
 8001702:	f000 ffcb 	bl	800269c <ssd1306_WriteString>


      // take all the adc measurements
      if(counter1>99)
 8001706:	4b6f      	ldr	r3, [pc, #444]	; (80018c4 <main+0x3b8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b63      	cmp	r3, #99	; 0x63
 800170c:	d902      	bls.n	8001714 <main+0x208>
      {
    	  counter1=0;
 800170e:	4b6d      	ldr	r3, [pc, #436]	; (80018c4 <main+0x3b8>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
      }

      if(adc_flag==1)
 8001714:	4b6c      	ldr	r3, [pc, #432]	; (80018c8 <main+0x3bc>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d104      	bne.n	8001726 <main+0x21a>
      {

    	  ADC_TAKE_ALL();
 800171c:	f7ff fcf0 	bl	8001100 <ADC_TAKE_ALL>
    	  adc_flag=0;
 8001720:	4b69      	ldr	r3, [pc, #420]	; (80018c8 <main+0x3bc>)
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]

      }
      int barHeight1 = ((adcraw0 * (DISPLAY_HEIGHT - START_Y-ELEVATION)) / ADC_MAX);
 8001726:	4b69      	ldr	r3, [pc, #420]	; (80018cc <main+0x3c0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	222c      	movs	r2, #44	; 0x2c
 800172c:	fb02 f303 	mul.w	r3, r2, r3
 8001730:	4a67      	ldr	r2, [pc, #412]	; (80018d0 <main+0x3c4>)
 8001732:	fb82 1203 	smull	r1, r2, r2, r3
 8001736:	441a      	add	r2, r3
 8001738:	12d2      	asrs	r2, r2, #11
 800173a:	17db      	asrs	r3, r3, #31
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	617b      	str	r3, [r7, #20]
      int barHeight2 = ((adcraw1 * (DISPLAY_HEIGHT - START_Y-ELEVATION)) / ADC_MAX);
 8001740:	4b64      	ldr	r3, [pc, #400]	; (80018d4 <main+0x3c8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	222c      	movs	r2, #44	; 0x2c
 8001746:	fb02 f303 	mul.w	r3, r2, r3
 800174a:	4a61      	ldr	r2, [pc, #388]	; (80018d0 <main+0x3c4>)
 800174c:	fb82 1203 	smull	r1, r2, r2, r3
 8001750:	441a      	add	r2, r3
 8001752:	12d2      	asrs	r2, r2, #11
 8001754:	17db      	asrs	r3, r3, #31
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	613b      	str	r3, [r7, #16]
      int barHeight3 = ((adcraw4 * (DISPLAY_HEIGHT - START_Y-ELEVATION)) / ADC_MAX);
 800175a:	4b5f      	ldr	r3, [pc, #380]	; (80018d8 <main+0x3cc>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	222c      	movs	r2, #44	; 0x2c
 8001760:	fb02 f303 	mul.w	r3, r2, r3
 8001764:	4a5a      	ldr	r2, [pc, #360]	; (80018d0 <main+0x3c4>)
 8001766:	fb82 1203 	smull	r1, r2, r2, r3
 800176a:	441a      	add	r2, r3
 800176c:	12d2      	asrs	r2, r2, #11
 800176e:	17db      	asrs	r3, r3, #31
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	60fb      	str	r3, [r7, #12]
      int barHeight4 = ((adcraw6 * (DISPLAY_HEIGHT - START_Y-ELEVATION)) / ADC_MAX);
 8001774:	4b59      	ldr	r3, [pc, #356]	; (80018dc <main+0x3d0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	222c      	movs	r2, #44	; 0x2c
 800177a:	fb02 f303 	mul.w	r3, r2, r3
 800177e:	4a54      	ldr	r2, [pc, #336]	; (80018d0 <main+0x3c4>)
 8001780:	fb82 1203 	smull	r1, r2, r2, r3
 8001784:	441a      	add	r2, r3
 8001786:	12d2      	asrs	r2, r2, #11
 8001788:	17db      	asrs	r3, r3, #31
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	60bb      	str	r3, [r7, #8]
      int barHeight5 = ((adcraw7 * (DISPLAY_HEIGHT - START_Y-ELEVATION)) / ADC_MAX);
 800178e:	4b54      	ldr	r3, [pc, #336]	; (80018e0 <main+0x3d4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	222c      	movs	r2, #44	; 0x2c
 8001794:	fb02 f303 	mul.w	r3, r2, r3
 8001798:	4a4d      	ldr	r2, [pc, #308]	; (80018d0 <main+0x3c4>)
 800179a:	fb82 1203 	smull	r1, r2, r2, r3
 800179e:	441a      	add	r2, r3
 80017a0:	12d2      	asrs	r2, r2, #11
 80017a2:	17db      	asrs	r3, r3, #31
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	607b      	str	r3, [r7, #4]

      // Draw a filled rectangle for each bar
      ssd1306_DrawFilledRectangle(START_X + (0 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - barHeight1-ELEVATION, BAR_WIDTH, barHeight1, White);
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f1c3 0136 	rsb	r1, r3, #54	; 0x36
 80017ae:	2301      	movs	r3, #1
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	2205      	movs	r2, #5
 80017b6:	2014      	movs	r0, #20
 80017b8:	f000 ffae 	bl	8002718 <ssd1306_DrawFilledRectangle>
      ssd1306_DrawFilledRectangle(START_X + (1 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - barHeight2-ELEVATION, BAR_WIDTH, barHeight2, White);
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	f1c3 0136 	rsb	r1, r3, #54	; 0x36
 80017c2:	2301      	movs	r3, #1
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	2205      	movs	r2, #5
 80017ca:	202b      	movs	r0, #43	; 0x2b
 80017cc:	f000 ffa4 	bl	8002718 <ssd1306_DrawFilledRectangle>
      ssd1306_DrawFilledRectangle(START_X + (2 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - barHeight3-ELEVATION, BAR_WIDTH, barHeight3, White);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f1c3 0136 	rsb	r1, r3, #54	; 0x36
 80017d6:	2301      	movs	r3, #1
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2205      	movs	r2, #5
 80017de:	2042      	movs	r0, #66	; 0x42
 80017e0:	f000 ff9a 	bl	8002718 <ssd1306_DrawFilledRectangle>
      ssd1306_DrawFilledRectangle(START_X + (3 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - barHeight4-ELEVATION, BAR_WIDTH, barHeight4, White);
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	f1c3 0136 	rsb	r1, r3, #54	; 0x36
 80017ea:	2301      	movs	r3, #1
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	2205      	movs	r2, #5
 80017f2:	2059      	movs	r0, #89	; 0x59
 80017f4:	f000 ff90 	bl	8002718 <ssd1306_DrawFilledRectangle>
      ssd1306_DrawFilledRectangle(START_X + (4 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - barHeight5-ELEVATION, BAR_WIDTH, barHeight5, White);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f1c3 0136 	rsb	r1, r3, #54	; 0x36
 80017fe:	2301      	movs	r3, #1
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2205      	movs	r2, #5
 8001806:	2070      	movs	r0, #112	; 0x70
 8001808:	f000 ff86 	bl	8002718 <ssd1306_DrawFilledRectangle>

      // Label for each bar
      ssd1306_SetCursor(START_X + (0 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - ELEVATION-45- 8);  // Assumes a font height
 800180c:	2101      	movs	r1, #1
 800180e:	2014      	movs	r0, #20
 8001810:	f000 ff6a 	bl	80026e8 <ssd1306_SetCursor>
      ssd1306_WriteString("0", Font_6x8, White);  // Replace with your font
 8001814:	4a2a      	ldr	r2, [pc, #168]	; (80018c0 <main+0x3b4>)
 8001816:	2301      	movs	r3, #1
 8001818:	ca06      	ldmia	r2, {r1, r2}
 800181a:	4832      	ldr	r0, [pc, #200]	; (80018e4 <main+0x3d8>)
 800181c:	f000 ff3e 	bl	800269c <ssd1306_WriteString>
      ssd1306_SetCursor(START_X + (1 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - ELEVATION-45- 8);  // Assumes a font height
 8001820:	2101      	movs	r1, #1
 8001822:	202b      	movs	r0, #43	; 0x2b
 8001824:	f000 ff60 	bl	80026e8 <ssd1306_SetCursor>
      ssd1306_WriteString("1", Font_6x8, White);  // Replace with your font
 8001828:	4a25      	ldr	r2, [pc, #148]	; (80018c0 <main+0x3b4>)
 800182a:	2301      	movs	r3, #1
 800182c:	ca06      	ldmia	r2, {r1, r2}
 800182e:	482e      	ldr	r0, [pc, #184]	; (80018e8 <main+0x3dc>)
 8001830:	f000 ff34 	bl	800269c <ssd1306_WriteString>
      ssd1306_SetCursor(START_X + (2 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - ELEVATION-45- 8);  // Assumes a font height
 8001834:	2101      	movs	r1, #1
 8001836:	2042      	movs	r0, #66	; 0x42
 8001838:	f000 ff56 	bl	80026e8 <ssd1306_SetCursor>
      ssd1306_WriteString("4", Font_6x8, White);  // Replace with your font
 800183c:	4a20      	ldr	r2, [pc, #128]	; (80018c0 <main+0x3b4>)
 800183e:	2301      	movs	r3, #1
 8001840:	ca06      	ldmia	r2, {r1, r2}
 8001842:	482a      	ldr	r0, [pc, #168]	; (80018ec <main+0x3e0>)
 8001844:	f000 ff2a 	bl	800269c <ssd1306_WriteString>
      ssd1306_SetCursor(START_X + (3 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - ELEVATION-45- 8);  // Assumes a font height
 8001848:	2101      	movs	r1, #1
 800184a:	2059      	movs	r0, #89	; 0x59
 800184c:	f000 ff4c 	bl	80026e8 <ssd1306_SetCursor>
      ssd1306_WriteString("6", Font_6x8, White);  // Replace with your font
 8001850:	4a1b      	ldr	r2, [pc, #108]	; (80018c0 <main+0x3b4>)
 8001852:	2301      	movs	r3, #1
 8001854:	ca06      	ldmia	r2, {r1, r2}
 8001856:	4826      	ldr	r0, [pc, #152]	; (80018f0 <main+0x3e4>)
 8001858:	f000 ff20 	bl	800269c <ssd1306_WriteString>
      ssd1306_SetCursor(START_X + (4 * (BAR_WIDTH + GAP_WIDTH)), DISPLAY_HEIGHT - ELEVATION-45- 8);  // Assumes a font height
 800185c:	2101      	movs	r1, #1
 800185e:	2070      	movs	r0, #112	; 0x70
 8001860:	f000 ff42 	bl	80026e8 <ssd1306_SetCursor>
      ssd1306_WriteString("7", Font_6x8, White);  // Replace with your font
 8001864:	4a16      	ldr	r2, [pc, #88]	; (80018c0 <main+0x3b4>)
 8001866:	2301      	movs	r3, #1
 8001868:	ca06      	ldmia	r2, {r1, r2}
 800186a:	4822      	ldr	r0, [pc, #136]	; (80018f4 <main+0x3e8>)
 800186c:	f000 ff16 	bl	800269c <ssd1306_WriteString>

      ssd1306_UpdateScreen();
 8001870:	f000 fe10 	bl	8002494 <ssd1306_UpdateScreen>

      if(HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin)==1)
 8001874:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001878:	481f      	ldr	r0, [pc, #124]	; (80018f8 <main+0x3ec>)
 800187a:	f003 fb19 	bl	8004eb0 <HAL_GPIO_ReadPin>
 800187e:	4603      	mov	r3, r0
 8001880:	2b01      	cmp	r3, #1
 8001882:	f47f ae95 	bne.w	80015b0 <main+0xa4>
      {
    	  datalogger();
 8001886:	f7ff fa59 	bl	8000d3c <datalogger>
  {
 800188a:	e691      	b.n	80015b0 <main+0xa4>
 800188c:	24002474 	.word	0x24002474
 8001890:	24000014 	.word	0x24000014
 8001894:	0800cac0 	.word	0x0800cac0
 8001898:	0800cac8 	.word	0x0800cac8
 800189c:	58020400 	.word	0x58020400
 80018a0:	240000b8 	.word	0x240000b8
 80018a4:	40000800 	.word	0x40000800
 80018a8:	24000608 	.word	0x24000608
 80018ac:	d41d41d5 	.word	0xd41d41d5
 80018b0:	2400243c 	.word	0x2400243c
 80018b4:	24000000 	.word	0x24000000
 80018b8:	0800ca08 	.word	0x0800ca08
 80018bc:	24002428 	.word	0x24002428
 80018c0:	24000004 	.word	0x24000004
 80018c4:	240000d4 	.word	0x240000d4
 80018c8:	240000b4 	.word	0x240000b4
 80018cc:	240000c0 	.word	0x240000c0
 80018d0:	80080081 	.word	0x80080081
 80018d4:	240000c4 	.word	0x240000c4
 80018d8:	240000c8 	.word	0x240000c8
 80018dc:	240000cc 	.word	0x240000cc
 80018e0:	240000d0 	.word	0x240000d0
 80018e4:	0800cad0 	.word	0x0800cad0
 80018e8:	0800cad4 	.word	0x0800cad4
 80018ec:	0800cad8 	.word	0x0800cad8
 80018f0:	0800cadc 	.word	0x0800cadc
 80018f4:	0800cae0 	.word	0x0800cae0
 80018f8:	58020800 	.word	0x58020800

080018fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b09c      	sub	sp, #112	; 0x70
 8001900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001906:	224c      	movs	r2, #76	; 0x4c
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f00a fbca 	bl	800c0a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	2220      	movs	r2, #32
 8001914:	2100      	movs	r1, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f00a fbc4 	bl	800c0a4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800191c:	2002      	movs	r0, #2
 800191e:	f004 fa3d 	bl	8005d9c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001922:	2300      	movs	r3, #0
 8001924:	603b      	str	r3, [r7, #0]
 8001926:	4b33      	ldr	r3, [pc, #204]	; (80019f4 <SystemClock_Config+0xf8>)
 8001928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192a:	4a32      	ldr	r2, [pc, #200]	; (80019f4 <SystemClock_Config+0xf8>)
 800192c:	f023 0301 	bic.w	r3, r3, #1
 8001930:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001932:	4b30      	ldr	r3, [pc, #192]	; (80019f4 <SystemClock_Config+0xf8>)
 8001934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	4b2e      	ldr	r3, [pc, #184]	; (80019f8 <SystemClock_Config+0xfc>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001944:	4a2c      	ldr	r2, [pc, #176]	; (80019f8 <SystemClock_Config+0xfc>)
 8001946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800194a:	6193      	str	r3, [r2, #24]
 800194c:	4b2a      	ldr	r3, [pc, #168]	; (80019f8 <SystemClock_Config+0xfc>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001954:	603b      	str	r3, [r7, #0]
 8001956:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001958:	bf00      	nop
 800195a:	4b27      	ldr	r3, [pc, #156]	; (80019f8 <SystemClock_Config+0xfc>)
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001966:	d1f8      	bne.n	800195a <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSI;
 8001968:	2312      	movs	r3, #18
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 800196c:	2309      	movs	r3, #9
 800196e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001970:	2340      	movs	r3, #64	; 0x40
 8001972:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8001978:	2320      	movs	r3, #32
 800197a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800197c:	2302      	movs	r3, #2
 800197e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8001980:	2301      	movs	r3, #1
 8001982:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001984:	2301      	movs	r3, #1
 8001986:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 37;
 8001988:	2325      	movs	r3, #37	; 0x25
 800198a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800198c:	2302      	movs	r3, #2
 800198e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001990:	2303      	movs	r3, #3
 8001992:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001994:	2302      	movs	r3, #2
 8001996:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001998:	2308      	movs	r3, #8
 800199a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800199c:	2300      	movs	r3, #0
 800199e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a8:	4618      	mov	r0, r3
 80019aa:	f004 fa41 	bl	8005e30 <HAL_RCC_OscConfig>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80019b4:	f000 fc88 	bl	80022c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b8:	233f      	movs	r3, #63	; 0x3f
 80019ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80019c4:	2300      	movs	r3, #0
 80019c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80019d4:	2300      	movs	r3, #0
 80019d6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	2100      	movs	r1, #0
 80019dc:	4618      	mov	r0, r3
 80019de:	f004 fe53 	bl	8006688 <HAL_RCC_ClockConfig>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80019e8:	f000 fc6e 	bl	80022c8 <Error_Handler>
  }
}
 80019ec:	bf00      	nop
 80019ee:	3770      	adds	r7, #112	; 0x70
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	58000400 	.word	0x58000400
 80019f8:	58024800 	.word	0x58024800

080019fc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b0b0      	sub	sp, #192	; 0xc0
 8001a00:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	22bc      	movs	r2, #188	; 0xbc
 8001a06:	2100      	movs	r1, #0
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f00a fb4b 	bl	800c0a4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8001a0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001a12:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001a14:	2300      	movs	r3, #0
 8001a16:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f005 f9c0 	bl	8006da0 <HAL_RCCEx_PeriphCLKConfig>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 8001a26:	f000 fc4f 	bl	80022c8 <Error_Handler>
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	37c0      	adds	r7, #192	; 0xc0
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
 8001a48:	615a      	str	r2, [r3, #20]
 8001a4a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8001a4c:	4b28      	ldr	r3, [pc, #160]	; (8001af0 <MX_ADC3_Init+0xbc>)
 8001a4e:	4a29      	ldr	r2, [pc, #164]	; (8001af4 <MX_ADC3_Init+0xc0>)
 8001a50:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001a52:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <MX_ADC3_Init+0xbc>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001a58:	4b25      	ldr	r3, [pc, #148]	; (8001af0 <MX_ADC3_Init+0xbc>)
 8001a5a:	2208      	movs	r2, #8
 8001a5c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a5e:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <MX_ADC3_Init+0xbc>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a64:	4b22      	ldr	r3, [pc, #136]	; (8001af0 <MX_ADC3_Init+0xbc>)
 8001a66:	2204      	movs	r2, #4
 8001a68:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001a6a:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <MX_ADC3_Init+0xbc>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001a70:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <MX_ADC3_Init+0xbc>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8001a76:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <MX_ADC3_Init+0xbc>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001a7c:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <MX_ADC3_Init+0xbc>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a82:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <MX_ADC3_Init+0xbc>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <MX_ADC3_Init+0xbc>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001a8e:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <MX_ADC3_Init+0xbc>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001a94:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <MX_ADC3_Init+0xbc>)
 8001a96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001a9c:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <MX_ADC3_Init+0xbc>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001aa2:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <MX_ADC3_Init+0xbc>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001aaa:	4811      	ldr	r0, [pc, #68]	; (8001af0 <MX_ADC3_Init+0xbc>)
 8001aac:	f001 fda0 	bl	80035f0 <HAL_ADC_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8001ab6:	f000 fc07 	bl	80022c8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001aba:	2301      	movs	r3, #1
 8001abc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001abe:	2306      	movs	r3, #6
 8001ac0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ac6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001aca:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001acc:	2304      	movs	r3, #4
 8001ace:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4805      	ldr	r0, [pc, #20]	; (8001af0 <MX_ADC3_Init+0xbc>)
 8001ada:	f002 f929 	bl	8003d30 <HAL_ADC_ConfigChannel>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8001ae4:	f000 fbf0 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001ae8:	bf00      	nop
 8001aea:	3720      	adds	r7, #32
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	2400219c 	.word	0x2400219c
 8001af4:	58026000 	.word	0x58026000

08001af8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001afc:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <MX_I2C1_Init+0x74>)
 8001afe:	4a1c      	ldr	r2, [pc, #112]	; (8001b70 <MX_I2C1_Init+0x78>)
 8001b00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B0DCFB;
 8001b02:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <MX_I2C1_Init+0x74>)
 8001b04:	4a1b      	ldr	r2, [pc, #108]	; (8001b74 <MX_I2C1_Init+0x7c>)
 8001b06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b08:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <MX_I2C1_Init+0x74>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b0e:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <MX_I2C1_Init+0x74>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b14:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <MX_I2C1_Init+0x74>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b1a:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <MX_I2C1_Init+0x74>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <MX_I2C1_Init+0x74>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b26:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <MX_I2C1_Init+0x74>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <MX_I2C1_Init+0x74>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b32:	480e      	ldr	r0, [pc, #56]	; (8001b6c <MX_I2C1_Init+0x74>)
 8001b34:	f003 f9ee 	bl	8004f14 <HAL_I2C_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b3e:	f000 fbc3 	bl	80022c8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b42:	2100      	movs	r1, #0
 8001b44:	4809      	ldr	r0, [pc, #36]	; (8001b6c <MX_I2C1_Init+0x74>)
 8001b46:	f003 ff49 	bl	80059dc <HAL_I2CEx_ConfigAnalogFilter>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b50:	f000 fbba 	bl	80022c8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b54:	2100      	movs	r1, #0
 8001b56:	4805      	ldr	r0, [pc, #20]	; (8001b6c <MX_I2C1_Init+0x74>)
 8001b58:	f003 ff8b 	bl	8005a72 <HAL_I2CEx_ConfigDigitalFilter>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b62:	f000 fbb1 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	24000700 	.word	0x24000700
 8001b70:	40005400 	.word	0x40005400
 8001b74:	10b0dcfb 	.word	0x10b0dcfb

08001b78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b7e:	f107 0310 	add.w	r3, r7, #16
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b96:	4b20      	ldr	r3, [pc, #128]	; (8001c18 <MX_TIM1_Init+0xa0>)
 8001b98:	4a20      	ldr	r2, [pc, #128]	; (8001c1c <MX_TIM1_Init+0xa4>)
 8001b9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b9c:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <MX_TIM1_Init+0xa0>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <MX_TIM1_Init+0xa0>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <MX_TIM1_Init+0xa0>)
 8001baa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb0:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <MX_TIM1_Init+0xa0>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bb6:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <MX_TIM1_Init+0xa0>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bbc:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <MX_TIM1_Init+0xa0>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bc2:	4815      	ldr	r0, [pc, #84]	; (8001c18 <MX_TIM1_Init+0xa0>)
 8001bc4:	f007 fa72 	bl	80090ac <HAL_TIM_Base_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001bce:	f000 fb7b 	bl	80022c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bd8:	f107 0310 	add.w	r3, r7, #16
 8001bdc:	4619      	mov	r1, r3
 8001bde:	480e      	ldr	r0, [pc, #56]	; (8001c18 <MX_TIM1_Init+0xa0>)
 8001be0:	f008 f80c 	bl	8009bfc <HAL_TIM_ConfigClockSource>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001bea:	f000 fb6d 	bl	80022c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bfa:	1d3b      	adds	r3, r7, #4
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4806      	ldr	r0, [pc, #24]	; (8001c18 <MX_TIM1_Init+0xa0>)
 8001c00:	f008 fd50 	bl	800a6a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001c0a:	f000 fb5d 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c0e:	bf00      	nop
 8001c10:	3720      	adds	r7, #32
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	24002604 	.word	0x24002604
 8001c1c:	40010000 	.word	0x40010000

08001c20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b088      	sub	sp, #32
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
//
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c26:	f107 0310 	add.w	r3, r7, #16
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */
//
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <MX_TIM3_Init+0x98>)
 8001c40:	4a1e      	ldr	r2, [pc, #120]	; (8001cbc <MX_TIM3_Init+0x9c>)
 8001c42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64000-1;
 8001c44:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <MX_TIM3_Init+0x98>)
 8001c46:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001c4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4c:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <MX_TIM3_Init+0x98>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8001c52:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <MX_TIM3_Init+0x98>)
 8001c54:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c5a:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <MX_TIM3_Init+0x98>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c60:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <MX_TIM3_Init+0x98>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c66:	4814      	ldr	r0, [pc, #80]	; (8001cb8 <MX_TIM3_Init+0x98>)
 8001c68:	f007 fa20 	bl	80090ac <HAL_TIM_Base_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001c72:	f000 fb29 	bl	80022c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c7c:	f107 0310 	add.w	r3, r7, #16
 8001c80:	4619      	mov	r1, r3
 8001c82:	480d      	ldr	r0, [pc, #52]	; (8001cb8 <MX_TIM3_Init+0x98>)
 8001c84:	f007 ffba 	bl	8009bfc <HAL_TIM_ConfigClockSource>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001c8e:	f000 fb1b 	bl	80022c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4806      	ldr	r0, [pc, #24]	; (8001cb8 <MX_TIM3_Init+0x98>)
 8001ca0:	f008 fd00 	bl	800a6a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001caa:	f000 fb0d 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
//
  /* USER CODE END TIM3_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	3720      	adds	r7, #32
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	24001f28 	.word	0x24001f28
 8001cbc:	40000400 	.word	0x40000400

08001cc0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08c      	sub	sp, #48	; 0x30
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cc6:	f107 030c 	add.w	r3, r7, #12
 8001cca:	2224      	movs	r2, #36	; 0x24
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f00a f9e8 	bl	800c0a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd4:	463b      	mov	r3, r7
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001cde:	4b21      	ldr	r3, [pc, #132]	; (8001d64 <MX_TIM4_Init+0xa4>)
 8001ce0:	4a21      	ldr	r2, [pc, #132]	; (8001d68 <MX_TIM4_Init+0xa8>)
 8001ce2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ce4:	4b1f      	ldr	r3, [pc, #124]	; (8001d64 <MX_TIM4_Init+0xa4>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cea:	4b1e      	ldr	r3, [pc, #120]	; (8001d64 <MX_TIM4_Init+0xa4>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1024;
 8001cf0:	4b1c      	ldr	r3, [pc, #112]	; (8001d64 <MX_TIM4_Init+0xa4>)
 8001cf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cf6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf8:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <MX_TIM4_Init+0xa4>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cfe:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <MX_TIM4_Init+0xa4>)
 8001d00:	2280      	movs	r2, #128	; 0x80
 8001d02:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d04:	2303      	movs	r3, #3
 8001d06:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d20:	2300      	movs	r3, #0
 8001d22:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d28:	f107 030c 	add.w	r3, r7, #12
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	480d      	ldr	r0, [pc, #52]	; (8001d64 <MX_TIM4_Init+0xa4>)
 8001d30:	f007 fbfc 	bl	800952c <HAL_TIM_Encoder_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001d3a:	f000 fac5 	bl	80022c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d46:	463b      	mov	r3, r7
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4806      	ldr	r0, [pc, #24]	; (8001d64 <MX_TIM4_Init+0xa4>)
 8001d4c:	f008 fcaa 	bl	800a6a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001d56:	f000 fab7 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d5a:	bf00      	nop
 8001d5c:	3730      	adds	r7, #48	; 0x30
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	24000558 	.word	0x24000558
 8001d68:	40000800 	.word	0x40000800

08001d6c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d72:	f107 0310 	add.w	r3, r7, #16
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d8a:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <MX_TIM5_Init+0x98>)
 8001d8c:	4a1e      	ldr	r2, [pc, #120]	; (8001e08 <MX_TIM5_Init+0x9c>)
 8001d8e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 64000-1;
 8001d90:	4b1c      	ldr	r3, [pc, #112]	; (8001e04 <MX_TIM5_Init+0x98>)
 8001d92:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001d96:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d98:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <MX_TIM5_Init+0x98>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8001d9e:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <MX_TIM5_Init+0x98>)
 8001da0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001da4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da6:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <MX_TIM5_Init+0x98>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dac:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <MX_TIM5_Init+0x98>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001db2:	4814      	ldr	r0, [pc, #80]	; (8001e04 <MX_TIM5_Init+0x98>)
 8001db4:	f007 f97a 	bl	80090ac <HAL_TIM_Base_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001dbe:	f000 fa83 	bl	80022c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001dc8:	f107 0310 	add.w	r3, r7, #16
 8001dcc:	4619      	mov	r1, r3
 8001dce:	480d      	ldr	r0, [pc, #52]	; (8001e04 <MX_TIM5_Init+0x98>)
 8001dd0:	f007 ff14 	bl	8009bfc <HAL_TIM_ConfigClockSource>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001dda:	f000 fa75 	bl	80022c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dde:	2300      	movs	r3, #0
 8001de0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	4619      	mov	r1, r3
 8001dea:	4806      	ldr	r0, [pc, #24]	; (8001e04 <MX_TIM5_Init+0x98>)
 8001dec:	f008 fc5a 	bl	800a6a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001df6:	f000 fa67 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001dfa:	bf00      	nop
 8001dfc:	3720      	adds	r7, #32
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	24000b54 	.word	0x24000b54
 8001e08:	40000c00 	.word	0x40000c00

08001e0c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
 8001e20:	615a      	str	r2, [r3, #20]
 8001e22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001e24:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <MX_TIM14_Init+0x94>)
 8001e26:	4a1f      	ldr	r2, [pc, #124]	; (8001ea4 <MX_TIM14_Init+0x98>)
 8001e28:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <MX_TIM14_Init+0x94>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e30:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <MX_TIM14_Init+0x94>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1024;
 8001e36:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <MX_TIM14_Init+0x94>)
 8001e38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e3c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e3e:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <MX_TIM14_Init+0x94>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e44:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <MX_TIM14_Init+0x94>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001e4a:	4815      	ldr	r0, [pc, #84]	; (8001ea0 <MX_TIM14_Init+0x94>)
 8001e4c:	f007 f92e 	bl	80090ac <HAL_TIM_Base_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001e56:	f000 fa37 	bl	80022c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001e5a:	4811      	ldr	r0, [pc, #68]	; (8001ea0 <MX_TIM14_Init+0x94>)
 8001e5c:	f007 f9f6 	bl	800924c <HAL_TIM_PWM_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001e66:	f000 fa2f 	bl	80022c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e6a:	2360      	movs	r3, #96	; 0x60
 8001e6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4807      	ldr	r0, [pc, #28]	; (8001ea0 <MX_TIM14_Init+0x94>)
 8001e82:	f007 fda7 	bl	80099d4 <HAL_TIM_PWM_ConfigChannel>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001e8c:	f000 fa1c 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001e90:	4803      	ldr	r0, [pc, #12]	; (8001ea0 <MX_TIM14_Init+0x94>)
 8001e92:	f000 fe61 	bl	8002b58 <HAL_TIM_MspPostInit>

}
 8001e96:	bf00      	nop
 8001e98:	3720      	adds	r7, #32
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	2400297c 	.word	0x2400297c
 8001ea4:	40002000 	.word	0x40002000

08001ea8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001eac:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001eae:	4a23      	ldr	r2, [pc, #140]	; (8001f3c <MX_USART3_UART_Init+0x94>)
 8001eb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001eb2:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001eb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001eba:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ece:	220c      	movs	r2, #12
 8001ed0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed2:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed8:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ede:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ee4:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eea:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ef0:	4811      	ldr	r0, [pc, #68]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ef2:	f008 fc83 	bl	800a7fc <HAL_UART_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001efc:	f000 f9e4 	bl	80022c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f00:	2100      	movs	r1, #0
 8001f02:	480d      	ldr	r0, [pc, #52]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001f04:	f009 fcae 	bl	800b864 <HAL_UARTEx_SetTxFifoThreshold>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001f0e:	f000 f9db 	bl	80022c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f12:	2100      	movs	r1, #0
 8001f14:	4808      	ldr	r0, [pc, #32]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001f16:	f009 fce3 	bl	800b8e0 <HAL_UARTEx_SetRxFifoThreshold>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001f20:	f000 f9d2 	bl	80022c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f24:	4804      	ldr	r0, [pc, #16]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001f26:	f009 fc64 	bl	800b7f2 <HAL_UARTEx_DisableFifoMode>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001f30:	f000 f9ca 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	24000670 	.word	0x24000670
 8001f3c:	40004800 	.word	0x40004800

08001f40 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001f44:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f46:	4a16      	ldr	r2, [pc, #88]	; (8001fa0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001f48:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001f4a:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f4c:	2209      	movs	r2, #9
 8001f4e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f52:	2202      	movs	r2, #2
 8001f54:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001f56:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001f5c:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f5e:	2202      	movs	r2, #2
 8001f60:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f64:	2201      	movs	r2, #1
 8001f66:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001f74:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001f7a:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001f86:	4805      	ldr	r0, [pc, #20]	; (8001f9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f88:	f003 fdbf 	bl	8005b0a <HAL_PCD_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001f92:	f000 f999 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	2400074c 	.word	0x2400074c
 8001fa0:	40080000 	.word	0x40080000

08001fa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08e      	sub	sp, #56	; 0x38
 8001fa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001faa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
 8001fb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fba:	4bbb      	ldr	r3, [pc, #748]	; (80022a8 <MX_GPIO_Init+0x304>)
 8001fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc0:	4ab9      	ldr	r2, [pc, #740]	; (80022a8 <MX_GPIO_Init+0x304>)
 8001fc2:	f043 0310 	orr.w	r3, r3, #16
 8001fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fca:	4bb7      	ldr	r3, [pc, #732]	; (80022a8 <MX_GPIO_Init+0x304>)
 8001fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fd0:	f003 0310 	and.w	r3, r3, #16
 8001fd4:	623b      	str	r3, [r7, #32]
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd8:	4bb3      	ldr	r3, [pc, #716]	; (80022a8 <MX_GPIO_Init+0x304>)
 8001fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fde:	4ab2      	ldr	r2, [pc, #712]	; (80022a8 <MX_GPIO_Init+0x304>)
 8001fe0:	f043 0304 	orr.w	r3, r3, #4
 8001fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fe8:	4baf      	ldr	r3, [pc, #700]	; (80022a8 <MX_GPIO_Init+0x304>)
 8001fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	61fb      	str	r3, [r7, #28]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ff6:	4bac      	ldr	r3, [pc, #688]	; (80022a8 <MX_GPIO_Init+0x304>)
 8001ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ffc:	4aaa      	ldr	r2, [pc, #680]	; (80022a8 <MX_GPIO_Init+0x304>)
 8001ffe:	f043 0320 	orr.w	r3, r3, #32
 8002002:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002006:	4ba8      	ldr	r3, [pc, #672]	; (80022a8 <MX_GPIO_Init+0x304>)
 8002008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800200c:	f003 0320 	and.w	r3, r3, #32
 8002010:	61bb      	str	r3, [r7, #24]
 8002012:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002014:	4ba4      	ldr	r3, [pc, #656]	; (80022a8 <MX_GPIO_Init+0x304>)
 8002016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800201a:	4aa3      	ldr	r2, [pc, #652]	; (80022a8 <MX_GPIO_Init+0x304>)
 800201c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002020:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002024:	4ba0      	ldr	r3, [pc, #640]	; (80022a8 <MX_GPIO_Init+0x304>)
 8002026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800202a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002032:	4b9d      	ldr	r3, [pc, #628]	; (80022a8 <MX_GPIO_Init+0x304>)
 8002034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002038:	4a9b      	ldr	r2, [pc, #620]	; (80022a8 <MX_GPIO_Init+0x304>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002042:	4b99      	ldr	r3, [pc, #612]	; (80022a8 <MX_GPIO_Init+0x304>)
 8002044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002050:	4b95      	ldr	r3, [pc, #596]	; (80022a8 <MX_GPIO_Init+0x304>)
 8002052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002056:	4a94      	ldr	r2, [pc, #592]	; (80022a8 <MX_GPIO_Init+0x304>)
 8002058:	f043 0302 	orr.w	r3, r3, #2
 800205c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002060:	4b91      	ldr	r3, [pc, #580]	; (80022a8 <MX_GPIO_Init+0x304>)
 8002062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800206e:	4b8e      	ldr	r3, [pc, #568]	; (80022a8 <MX_GPIO_Init+0x304>)
 8002070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002074:	4a8c      	ldr	r2, [pc, #560]	; (80022a8 <MX_GPIO_Init+0x304>)
 8002076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800207a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800207e:	4b8a      	ldr	r3, [pc, #552]	; (80022a8 <MX_GPIO_Init+0x304>)
 8002080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800208c:	4b86      	ldr	r3, [pc, #536]	; (80022a8 <MX_GPIO_Init+0x304>)
 800208e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002092:	4a85      	ldr	r2, [pc, #532]	; (80022a8 <MX_GPIO_Init+0x304>)
 8002094:	f043 0308 	orr.w	r3, r3, #8
 8002098:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800209c:	4b82      	ldr	r3, [pc, #520]	; (80022a8 <MX_GPIO_Init+0x304>)
 800209e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	607b      	str	r3, [r7, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, RTC_CLK_Pin|RTC_RST_Pin, GPIO_PIN_RESET);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2106      	movs	r1, #6
 80020ae:	487f      	ldr	r0, [pc, #508]	; (80022ac <MX_GPIO_Init+0x308>)
 80020b0:	f002 ff16 	bl	8004ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80020b4:	2200      	movs	r2, #0
 80020b6:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80020ba:	487d      	ldr	r0, [pc, #500]	; (80022b0 <MX_GPIO_Init+0x30c>)
 80020bc:	f002 ff10 	bl	8004ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2140      	movs	r1, #64	; 0x40
 80020c4:	487b      	ldr	r0, [pc, #492]	; (80022b4 <MX_GPIO_Init+0x310>)
 80020c6:	f002 ff0b 	bl	8004ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80020ca:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020d0:	2303      	movs	r3, #3
 80020d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020dc:	4619      	mov	r1, r3
 80020de:	4876      	ldr	r0, [pc, #472]	; (80022b8 <MX_GPIO_Init+0x314>)
 80020e0:	f002 fd36 	bl	8004b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80020e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80020ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80020f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f8:	4619      	mov	r1, r3
 80020fa:	4870      	ldr	r0, [pc, #448]	; (80022bc <MX_GPIO_Init+0x318>)
 80020fc:	f002 fd28 	bl	8004b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : RTC_IO_Pin */
  GPIO_InitStruct.Pin = RTC_IO_Pin;
 8002100:	2301      	movs	r3, #1
 8002102:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002104:	2300      	movs	r3, #0
 8002106:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RTC_IO_GPIO_Port, &GPIO_InitStruct);
 800210c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002110:	4619      	mov	r1, r3
 8002112:	4866      	ldr	r0, [pc, #408]	; (80022ac <MX_GPIO_Init+0x308>)
 8002114:	f002 fd1c 	bl	8004b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RTC_CLK_Pin RTC_RST_Pin */
  GPIO_InitStruct.Pin = RTC_CLK_Pin|RTC_RST_Pin;
 8002118:	2306      	movs	r3, #6
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800211c:	2301      	movs	r3, #1
 800211e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002124:	2300      	movs	r3, #0
 8002126:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800212c:	4619      	mov	r1, r3
 800212e:	485f      	ldr	r0, [pc, #380]	; (80022ac <MX_GPIO_Init+0x308>)
 8002130:	f002 fd0e 	bl	8004b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF4 PF6 PF7
                           PF11 PF12 PF13 PF14
                           PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
 8002134:	f64f 03d8 	movw	r3, #63704	; 0xf8d8
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800213a:	2303      	movs	r3, #3
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002146:	4619      	mov	r1, r3
 8002148:	4858      	ldr	r0, [pc, #352]	; (80022ac <MX_GPIO_Init+0x308>)
 800214a:	f002 fd01 	bl	8004b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800214e:	f641 73f1 	movw	r3, #8177	; 0x1ff1
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002154:	2303      	movs	r3, #3
 8002156:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800215c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002160:	4619      	mov	r1, r3
 8002162:	4856      	ldr	r0, [pc, #344]	; (80022bc <MX_GPIO_Init+0x318>)
 8002164:	f002 fcf4 	bl	8004b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDC_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 8002168:	2302      	movs	r3, #2
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002174:	2300      	movs	r3, #0
 8002176:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002178:	230b      	movs	r3, #11
 800217a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 800217c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002180:	4619      	mov	r1, r3
 8002182:	484e      	ldr	r0, [pc, #312]	; (80022bc <MX_GPIO_Init+0x318>)
 8002184:	f002 fce4 	bl	8004b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002188:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800218e:	2303      	movs	r3, #3
 8002190:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800219a:	4619      	mov	r1, r3
 800219c:	4848      	ldr	r0, [pc, #288]	; (80022c0 <MX_GPIO_Init+0x31c>)
 800219e:	f002 fcd7 	bl	8004b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB15 PB3
                           PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80021a2:	f649 437f 	movw	r3, #40063	; 0x9c7f
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021a8:	2303      	movs	r3, #3
 80021aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b4:	4619      	mov	r1, r3
 80021b6:	483e      	ldr	r0, [pc, #248]	; (80022b0 <MX_GPIO_Init+0x30c>)
 80021b8:	f002 fcca 	bl	8004b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG8 PG9
                           PG10 PG12 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80021bc:	f24d 733f 	movw	r3, #55103	; 0xd73f
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021c2:	2303      	movs	r3, #3
 80021c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ce:	4619      	mov	r1, r3
 80021d0:	4838      	ldr	r0, [pc, #224]	; (80022b4 <MX_GPIO_Init+0x310>)
 80021d2:	f002 fcbd 	bl	8004b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80021d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	2302      	movs	r3, #2
 80021de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e4:	2300      	movs	r3, #0
 80021e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021e8:	230b      	movs	r3, #11
 80021ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80021ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f0:	4619      	mov	r1, r3
 80021f2:	482f      	ldr	r0, [pc, #188]	; (80022b0 <MX_GPIO_Init+0x30c>)
 80021f4:	f002 fcac 	bl	8004b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80021f8:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021fe:	2301      	movs	r3, #1
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2300      	movs	r3, #0
 8002208:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220e:	4619      	mov	r1, r3
 8002210:	4827      	ldr	r0, [pc, #156]	; (80022b0 <MX_GPIO_Init+0x30c>)
 8002212:	f002 fc9d 	bl	8004b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15
 8002216:	f64c 43ff 	movw	r3, #52479	; 0xccff
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800221c:	2303      	movs	r3, #3
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002228:	4619      	mov	r1, r3
 800222a:	4826      	ldr	r0, [pc, #152]	; (80022c4 <MX_GPIO_Init+0x320>)
 800222c:	f002 fc90 	bl	8004b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002230:	2340      	movs	r3, #64	; 0x40
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002234:	2301      	movs	r3, #1
 8002236:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223c:	2300      	movs	r3, #0
 800223e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002244:	4619      	mov	r1, r3
 8002246:	481b      	ldr	r0, [pc, #108]	; (80022b4 <MX_GPIO_Init+0x310>)
 8002248:	f002 fc82 	bl	8004b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002250:	2300      	movs	r3, #0
 8002252:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225c:	4619      	mov	r1, r3
 800225e:	4815      	ldr	r0, [pc, #84]	; (80022b4 <MX_GPIO_Init+0x310>)
 8002260:	f002 fc76 	bl	8004b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002264:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226a:	2302      	movs	r3, #2
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2300      	movs	r3, #0
 8002274:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002276:	230b      	movs	r3, #11
 8002278:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800227a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800227e:	4619      	mov	r1, r3
 8002280:	480c      	ldr	r0, [pc, #48]	; (80022b4 <MX_GPIO_Init+0x310>)
 8002282:	f002 fc65 	bl	8004b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : EEPROM_BUTTON_Pin */
  GPIO_InitStruct.Pin = EEPROM_BUTTON_Pin;
 8002286:	2301      	movs	r3, #1
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800228a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EEPROM_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002298:	4619      	mov	r1, r3
 800229a:	4807      	ldr	r0, [pc, #28]	; (80022b8 <MX_GPIO_Init+0x314>)
 800229c:	f002 fc58 	bl	8004b50 <HAL_GPIO_Init>

}
 80022a0:	bf00      	nop
 80022a2:	3738      	adds	r7, #56	; 0x38
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	58024400 	.word	0x58024400
 80022ac:	58021400 	.word	0x58021400
 80022b0:	58020400 	.word	0x58020400
 80022b4:	58021800 	.word	0x58021800
 80022b8:	58021000 	.word	0x58021000
 80022bc:	58020800 	.word	0x58020800
 80022c0:	58020000 	.word	0x58020000
 80022c4:	58020c00 	.word	0x58020c00

080022c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    char buffer[20];

    ssd1306_Fill(Black);
 80022ce:	2000      	movs	r0, #0
 80022d0:	f000 f8bc 	bl	800244c <ssd1306_Fill>

    sprintf(buffer, "gGMTXMMMMMMMMMMMM\n");
 80022d4:	1d3b      	adds	r3, r7, #4
 80022d6:	4909      	ldr	r1, [pc, #36]	; (80022fc <Error_Handler+0x34>)
 80022d8:	4618      	mov	r0, r3
 80022da:	f009 feeb 	bl	800c0b4 <siprintf>
    ssd1306_SetCursor(0,0); // Adjust these values according to where you want the text to start
 80022de:	2100      	movs	r1, #0
 80022e0:	2000      	movs	r0, #0
 80022e2:	f000 fa01 	bl	80026e8 <ssd1306_SetCursor>
    ssd1306_WriteString(buffer, Font_7x10, White); // Replace with your font and color choice
 80022e6:	4a06      	ldr	r2, [pc, #24]	; (8002300 <Error_Handler+0x38>)
 80022e8:	1d38      	adds	r0, r7, #4
 80022ea:	2301      	movs	r3, #1
 80022ec:	ca06      	ldmia	r2, {r1, r2}
 80022ee:	f000 f9d5 	bl	800269c <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80022f2:	f000 f8cf 	bl	8002494 <ssd1306_UpdateScreen>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022f6:	b672      	cpsid	i
}
 80022f8:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022fa:	e7fe      	b.n	80022fa <Error_Handler+0x32>
 80022fc:	0800cae4 	.word	0x0800cae4
 8002300:	2400000c 	.word	0x2400000c

08002304 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af04      	add	r7, sp, #16
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800231e:	f04f 33ff 	mov.w	r3, #4294967295
 8002322:	9302      	str	r3, [sp, #8]
 8002324:	2301      	movs	r3, #1
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	1dfb      	adds	r3, r7, #7
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	2301      	movs	r3, #1
 800232e:	2200      	movs	r2, #0
 8002330:	2178      	movs	r1, #120	; 0x78
 8002332:	4803      	ldr	r0, [pc, #12]	; (8002340 <ssd1306_WriteCommand+0x2c>)
 8002334:	f002 fe7e 	bl	8005034 <HAL_I2C_Mem_Write>
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	24000700 	.word	0x24000700

08002344 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af04      	add	r7, sp, #16
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	b29b      	uxth	r3, r3
 8002352:	f04f 32ff 	mov.w	r2, #4294967295
 8002356:	9202      	str	r2, [sp, #8]
 8002358:	9301      	str	r3, [sp, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	2301      	movs	r3, #1
 8002360:	2240      	movs	r2, #64	; 0x40
 8002362:	2178      	movs	r1, #120	; 0x78
 8002364:	4803      	ldr	r0, [pc, #12]	; (8002374 <ssd1306_WriteData+0x30>)
 8002366:	f002 fe65 	bl	8005034 <HAL_I2C_Mem_Write>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	24000700 	.word	0x24000700

08002378 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800237c:	f7ff ffc2 	bl	8002304 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002380:	2064      	movs	r0, #100	; 0x64
 8002382:	f000 febd 	bl	8003100 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002386:	2000      	movs	r0, #0
 8002388:	f000 fa0c 	bl	80027a4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800238c:	2020      	movs	r0, #32
 800238e:	f7ff ffc1 	bl	8002314 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002392:	2000      	movs	r0, #0
 8002394:	f7ff ffbe 	bl	8002314 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002398:	20b0      	movs	r0, #176	; 0xb0
 800239a:	f7ff ffbb 	bl	8002314 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800239e:	20c8      	movs	r0, #200	; 0xc8
 80023a0:	f7ff ffb8 	bl	8002314 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80023a4:	2000      	movs	r0, #0
 80023a6:	f7ff ffb5 	bl	8002314 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80023aa:	2010      	movs	r0, #16
 80023ac:	f7ff ffb2 	bl	8002314 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80023b0:	2040      	movs	r0, #64	; 0x40
 80023b2:	f7ff ffaf 	bl	8002314 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80023b6:	20ff      	movs	r0, #255	; 0xff
 80023b8:	f000 f9e1 	bl	800277e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80023bc:	20a1      	movs	r0, #161	; 0xa1
 80023be:	f7ff ffa9 	bl	8002314 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80023c2:	20a6      	movs	r0, #166	; 0xa6
 80023c4:	f7ff ffa6 	bl	8002314 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80023c8:	20a8      	movs	r0, #168	; 0xa8
 80023ca:	f7ff ffa3 	bl	8002314 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80023ce:	203f      	movs	r0, #63	; 0x3f
 80023d0:	f7ff ffa0 	bl	8002314 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80023d4:	20a4      	movs	r0, #164	; 0xa4
 80023d6:	f7ff ff9d 	bl	8002314 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80023da:	20d3      	movs	r0, #211	; 0xd3
 80023dc:	f7ff ff9a 	bl	8002314 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80023e0:	2000      	movs	r0, #0
 80023e2:	f7ff ff97 	bl	8002314 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80023e6:	20d5      	movs	r0, #213	; 0xd5
 80023e8:	f7ff ff94 	bl	8002314 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80023ec:	20f0      	movs	r0, #240	; 0xf0
 80023ee:	f7ff ff91 	bl	8002314 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80023f2:	20d9      	movs	r0, #217	; 0xd9
 80023f4:	f7ff ff8e 	bl	8002314 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80023f8:	2022      	movs	r0, #34	; 0x22
 80023fa:	f7ff ff8b 	bl	8002314 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80023fe:	20da      	movs	r0, #218	; 0xda
 8002400:	f7ff ff88 	bl	8002314 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002404:	2012      	movs	r0, #18
 8002406:	f7ff ff85 	bl	8002314 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800240a:	20db      	movs	r0, #219	; 0xdb
 800240c:	f7ff ff82 	bl	8002314 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002410:	2020      	movs	r0, #32
 8002412:	f7ff ff7f 	bl	8002314 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002416:	208d      	movs	r0, #141	; 0x8d
 8002418:	f7ff ff7c 	bl	8002314 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800241c:	2014      	movs	r0, #20
 800241e:	f7ff ff79 	bl	8002314 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002422:	2001      	movs	r0, #1
 8002424:	f000 f9be 	bl	80027a4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002428:	2000      	movs	r0, #0
 800242a:	f000 f80f 	bl	800244c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800242e:	f000 f831 	bl	8002494 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002432:	4b05      	ldr	r3, [pc, #20]	; (8002448 <ssd1306_Init+0xd0>)
 8002434:	2200      	movs	r2, #0
 8002436:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002438:	4b03      	ldr	r3, [pc, #12]	; (8002448 <ssd1306_Init+0xd0>)
 800243a:	2200      	movs	r2, #0
 800243c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800243e:	4b02      	ldr	r3, [pc, #8]	; (8002448 <ssd1306_Init+0xd0>)
 8002440:	2201      	movs	r2, #1
 8002442:	711a      	strb	r2, [r3, #4]
}
 8002444:	bf00      	nop
 8002446:	bd80      	pop	{r7, pc}
 8002448:	240004e0 	.word	0x240004e0

0800244c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	e00d      	b.n	8002478 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <ssd1306_Fill+0x1a>
 8002462:	2100      	movs	r1, #0
 8002464:	e000      	b.n	8002468 <ssd1306_Fill+0x1c>
 8002466:	21ff      	movs	r1, #255	; 0xff
 8002468:	4a09      	ldr	r2, [pc, #36]	; (8002490 <ssd1306_Fill+0x44>)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4413      	add	r3, r2
 800246e:	460a      	mov	r2, r1
 8002470:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	3301      	adds	r3, #1
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800247e:	d3ed      	bcc.n	800245c <ssd1306_Fill+0x10>
    }
}
 8002480:	bf00      	nop
 8002482:	bf00      	nop
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	240000e0 	.word	0x240000e0

08002494 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800249a:	2300      	movs	r3, #0
 800249c:	71fb      	strb	r3, [r7, #7]
 800249e:	e016      	b.n	80024ce <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	3b50      	subs	r3, #80	; 0x50
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff ff34 	bl	8002314 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80024ac:	2000      	movs	r0, #0
 80024ae:	f7ff ff31 	bl	8002314 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80024b2:	2010      	movs	r0, #16
 80024b4:	f7ff ff2e 	bl	8002314 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	01db      	lsls	r3, r3, #7
 80024bc:	4a08      	ldr	r2, [pc, #32]	; (80024e0 <ssd1306_UpdateScreen+0x4c>)
 80024be:	4413      	add	r3, r2
 80024c0:	2180      	movs	r1, #128	; 0x80
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff ff3e 	bl	8002344 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	3301      	adds	r3, #1
 80024cc:	71fb      	strb	r3, [r7, #7]
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	2b07      	cmp	r3, #7
 80024d2:	d9e5      	bls.n	80024a0 <ssd1306_UpdateScreen+0xc>
    }
}
 80024d4:	bf00      	nop
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	240000e0 	.word	0x240000e0

080024e4 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	71fb      	strb	r3, [r7, #7]
 80024ee:	460b      	mov	r3, r1
 80024f0:	71bb      	strb	r3, [r7, #6]
 80024f2:	4613      	mov	r3, r2
 80024f4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	db3d      	blt.n	800257a <ssd1306_DrawPixel+0x96>
 80024fe:	79bb      	ldrb	r3, [r7, #6]
 8002500:	2b3f      	cmp	r3, #63	; 0x3f
 8002502:	d83a      	bhi.n	800257a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002504:	797b      	ldrb	r3, [r7, #5]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d11a      	bne.n	8002540 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800250a:	79fa      	ldrb	r2, [r7, #7]
 800250c:	79bb      	ldrb	r3, [r7, #6]
 800250e:	08db      	lsrs	r3, r3, #3
 8002510:	b2d8      	uxtb	r0, r3
 8002512:	4603      	mov	r3, r0
 8002514:	01db      	lsls	r3, r3, #7
 8002516:	4413      	add	r3, r2
 8002518:	4a1b      	ldr	r2, [pc, #108]	; (8002588 <ssd1306_DrawPixel+0xa4>)
 800251a:	5cd3      	ldrb	r3, [r2, r3]
 800251c:	b25a      	sxtb	r2, r3
 800251e:	79bb      	ldrb	r3, [r7, #6]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	2101      	movs	r1, #1
 8002526:	fa01 f303 	lsl.w	r3, r1, r3
 800252a:	b25b      	sxtb	r3, r3
 800252c:	4313      	orrs	r3, r2
 800252e:	b259      	sxtb	r1, r3
 8002530:	79fa      	ldrb	r2, [r7, #7]
 8002532:	4603      	mov	r3, r0
 8002534:	01db      	lsls	r3, r3, #7
 8002536:	4413      	add	r3, r2
 8002538:	b2c9      	uxtb	r1, r1
 800253a:	4a13      	ldr	r2, [pc, #76]	; (8002588 <ssd1306_DrawPixel+0xa4>)
 800253c:	54d1      	strb	r1, [r2, r3]
 800253e:	e01d      	b.n	800257c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002540:	79fa      	ldrb	r2, [r7, #7]
 8002542:	79bb      	ldrb	r3, [r7, #6]
 8002544:	08db      	lsrs	r3, r3, #3
 8002546:	b2d8      	uxtb	r0, r3
 8002548:	4603      	mov	r3, r0
 800254a:	01db      	lsls	r3, r3, #7
 800254c:	4413      	add	r3, r2
 800254e:	4a0e      	ldr	r2, [pc, #56]	; (8002588 <ssd1306_DrawPixel+0xa4>)
 8002550:	5cd3      	ldrb	r3, [r2, r3]
 8002552:	b25a      	sxtb	r2, r3
 8002554:	79bb      	ldrb	r3, [r7, #6]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	2101      	movs	r1, #1
 800255c:	fa01 f303 	lsl.w	r3, r1, r3
 8002560:	b25b      	sxtb	r3, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	b25b      	sxtb	r3, r3
 8002566:	4013      	ands	r3, r2
 8002568:	b259      	sxtb	r1, r3
 800256a:	79fa      	ldrb	r2, [r7, #7]
 800256c:	4603      	mov	r3, r0
 800256e:	01db      	lsls	r3, r3, #7
 8002570:	4413      	add	r3, r2
 8002572:	b2c9      	uxtb	r1, r1
 8002574:	4a04      	ldr	r2, [pc, #16]	; (8002588 <ssd1306_DrawPixel+0xa4>)
 8002576:	54d1      	strb	r1, [r2, r3]
 8002578:	e000      	b.n	800257c <ssd1306_DrawPixel+0x98>
        return;
 800257a:	bf00      	nop
    }
}
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	240000e0 	.word	0x240000e0

0800258c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800258c:	b590      	push	{r4, r7, lr}
 800258e:	b089      	sub	sp, #36	; 0x24
 8002590:	af00      	add	r7, sp, #0
 8002592:	4604      	mov	r4, r0
 8002594:	1d38      	adds	r0, r7, #4
 8002596:	e880 0006 	stmia.w	r0, {r1, r2}
 800259a:	461a      	mov	r2, r3
 800259c:	4623      	mov	r3, r4
 800259e:	73fb      	strb	r3, [r7, #15]
 80025a0:	4613      	mov	r3, r2
 80025a2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	2b1f      	cmp	r3, #31
 80025a8:	d902      	bls.n	80025b0 <ssd1306_WriteChar+0x24>
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	2b7e      	cmp	r3, #126	; 0x7e
 80025ae:	d901      	bls.n	80025b4 <ssd1306_WriteChar+0x28>
        return 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	e06d      	b.n	8002690 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80025b4:	4b38      	ldr	r3, [pc, #224]	; (8002698 <ssd1306_WriteChar+0x10c>)
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	461a      	mov	r2, r3
 80025ba:	793b      	ldrb	r3, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	2b80      	cmp	r3, #128	; 0x80
 80025c0:	dc06      	bgt.n	80025d0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80025c2:	4b35      	ldr	r3, [pc, #212]	; (8002698 <ssd1306_WriteChar+0x10c>)
 80025c4:	885b      	ldrh	r3, [r3, #2]
 80025c6:	461a      	mov	r2, r3
 80025c8:	797b      	ldrb	r3, [r7, #5]
 80025ca:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80025cc:	2b40      	cmp	r3, #64	; 0x40
 80025ce:	dd01      	ble.n	80025d4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	e05d      	b.n	8002690 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80025d4:	2300      	movs	r3, #0
 80025d6:	61fb      	str	r3, [r7, #28]
 80025d8:	e04c      	b.n	8002674 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	3b20      	subs	r3, #32
 80025e0:	7979      	ldrb	r1, [r7, #5]
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4619      	mov	r1, r3
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	440b      	add	r3, r1
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80025f4:	2300      	movs	r3, #0
 80025f6:	61bb      	str	r3, [r7, #24]
 80025f8:	e034      	b.n	8002664 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d012      	beq.n	8002630 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800260a:	4b23      	ldr	r3, [pc, #140]	; (8002698 <ssd1306_WriteChar+0x10c>)
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	b2da      	uxtb	r2, r3
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	b2db      	uxtb	r3, r3
 8002614:	4413      	add	r3, r2
 8002616:	b2d8      	uxtb	r0, r3
 8002618:	4b1f      	ldr	r3, [pc, #124]	; (8002698 <ssd1306_WriteChar+0x10c>)
 800261a:	885b      	ldrh	r3, [r3, #2]
 800261c:	b2da      	uxtb	r2, r3
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	4413      	add	r3, r2
 8002624:	b2db      	uxtb	r3, r3
 8002626:	7bba      	ldrb	r2, [r7, #14]
 8002628:	4619      	mov	r1, r3
 800262a:	f7ff ff5b 	bl	80024e4 <ssd1306_DrawPixel>
 800262e:	e016      	b.n	800265e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002630:	4b19      	ldr	r3, [pc, #100]	; (8002698 <ssd1306_WriteChar+0x10c>)
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	b2da      	uxtb	r2, r3
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	4413      	add	r3, r2
 800263c:	b2d8      	uxtb	r0, r3
 800263e:	4b16      	ldr	r3, [pc, #88]	; (8002698 <ssd1306_WriteChar+0x10c>)
 8002640:	885b      	ldrh	r3, [r3, #2]
 8002642:	b2da      	uxtb	r2, r3
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	4413      	add	r3, r2
 800264a:	b2d9      	uxtb	r1, r3
 800264c:	7bbb      	ldrb	r3, [r7, #14]
 800264e:	2b00      	cmp	r3, #0
 8002650:	bf0c      	ite	eq
 8002652:	2301      	moveq	r3, #1
 8002654:	2300      	movne	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	461a      	mov	r2, r3
 800265a:	f7ff ff43 	bl	80024e4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	3301      	adds	r3, #1
 8002662:	61bb      	str	r3, [r7, #24]
 8002664:	793b      	ldrb	r3, [r7, #4]
 8002666:	461a      	mov	r2, r3
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	4293      	cmp	r3, r2
 800266c:	d3c5      	bcc.n	80025fa <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3301      	adds	r3, #1
 8002672:	61fb      	str	r3, [r7, #28]
 8002674:	797b      	ldrb	r3, [r7, #5]
 8002676:	461a      	mov	r2, r3
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	4293      	cmp	r3, r2
 800267c:	d3ad      	bcc.n	80025da <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <ssd1306_WriteChar+0x10c>)
 8002680:	881a      	ldrh	r2, [r3, #0]
 8002682:	793b      	ldrb	r3, [r7, #4]
 8002684:	b29b      	uxth	r3, r3
 8002686:	4413      	add	r3, r2
 8002688:	b29a      	uxth	r2, r3
 800268a:	4b03      	ldr	r3, [pc, #12]	; (8002698 <ssd1306_WriteChar+0x10c>)
 800268c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800268e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3724      	adds	r7, #36	; 0x24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd90      	pop	{r4, r7, pc}
 8002698:	240004e0 	.word	0x240004e0

0800269c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	1d38      	adds	r0, r7, #4
 80026a6:	e880 0006 	stmia.w	r0, {r1, r2}
 80026aa:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80026ac:	e012      	b.n	80026d4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	7818      	ldrb	r0, [r3, #0]
 80026b2:	78fb      	ldrb	r3, [r7, #3]
 80026b4:	1d3a      	adds	r2, r7, #4
 80026b6:	ca06      	ldmia	r2, {r1, r2}
 80026b8:	f7ff ff68 	bl	800258c <ssd1306_WriteChar>
 80026bc:	4603      	mov	r3, r0
 80026be:	461a      	mov	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d002      	beq.n	80026ce <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	e008      	b.n	80026e0 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	3301      	adds	r3, #1
 80026d2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1e8      	bne.n	80026ae <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	781b      	ldrb	r3, [r3, #0]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	460a      	mov	r2, r1
 80026f2:	71fb      	strb	r3, [r7, #7]
 80026f4:	4613      	mov	r3, r2
 80026f6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80026f8:	79fb      	ldrb	r3, [r7, #7]
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <ssd1306_SetCursor+0x2c>)
 80026fe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002700:	79bb      	ldrb	r3, [r7, #6]
 8002702:	b29a      	uxth	r2, r3
 8002704:	4b03      	ldr	r3, [pc, #12]	; (8002714 <ssd1306_SetCursor+0x2c>)
 8002706:	805a      	strh	r2, [r3, #2]
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	240004e0 	.word	0x240004e0

08002718 <ssd1306_DrawFilledRectangle>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_DrawFilledRectangle(uint8_t x, uint8_t y, uint8_t width, uint8_t height, SSD1306_COLOR color) {
 8002718:	b590      	push	{r4, r7, lr}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	4604      	mov	r4, r0
 8002720:	4608      	mov	r0, r1
 8002722:	4611      	mov	r1, r2
 8002724:	461a      	mov	r2, r3
 8002726:	4623      	mov	r3, r4
 8002728:	71fb      	strb	r3, [r7, #7]
 800272a:	4603      	mov	r3, r0
 800272c:	71bb      	strb	r3, [r7, #6]
 800272e:	460b      	mov	r3, r1
 8002730:	717b      	strb	r3, [r7, #5]
 8002732:	4613      	mov	r3, r2
 8002734:	713b      	strb	r3, [r7, #4]
    uint8_t i, j;
    for (i = x; i < x + width; i++) {
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	73fb      	strb	r3, [r7, #15]
 800273a:	e015      	b.n	8002768 <ssd1306_DrawFilledRectangle+0x50>
        for (j = y; j < y + height; j++) {
 800273c:	79bb      	ldrb	r3, [r7, #6]
 800273e:	73bb      	strb	r3, [r7, #14]
 8002740:	e009      	b.n	8002756 <ssd1306_DrawFilledRectangle+0x3e>
            ssd1306_DrawPixel(i, j, color);
 8002742:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002746:	7bb9      	ldrb	r1, [r7, #14]
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff feca 	bl	80024e4 <ssd1306_DrawPixel>
        for (j = y; j < y + height; j++) {
 8002750:	7bbb      	ldrb	r3, [r7, #14]
 8002752:	3301      	adds	r3, #1
 8002754:	73bb      	strb	r3, [r7, #14]
 8002756:	7bba      	ldrb	r2, [r7, #14]
 8002758:	79b9      	ldrb	r1, [r7, #6]
 800275a:	793b      	ldrb	r3, [r7, #4]
 800275c:	440b      	add	r3, r1
 800275e:	429a      	cmp	r2, r3
 8002760:	dbef      	blt.n	8002742 <ssd1306_DrawFilledRectangle+0x2a>
    for (i = x; i < x + width; i++) {
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	3301      	adds	r3, #1
 8002766:	73fb      	strb	r3, [r7, #15]
 8002768:	7bfa      	ldrb	r2, [r7, #15]
 800276a:	79f9      	ldrb	r1, [r7, #7]
 800276c:	797b      	ldrb	r3, [r7, #5]
 800276e:	440b      	add	r3, r1
 8002770:	429a      	cmp	r2, r3
 8002772:	dbe3      	blt.n	800273c <ssd1306_DrawFilledRectangle+0x24>
        }
    }
}
 8002774:	bf00      	nop
 8002776:	bf00      	nop
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	bd90      	pop	{r4, r7, pc}

0800277e <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800277e:	b580      	push	{r7, lr}
 8002780:	b084      	sub	sp, #16
 8002782:	af00      	add	r7, sp, #0
 8002784:	4603      	mov	r3, r0
 8002786:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002788:	2381      	movs	r3, #129	; 0x81
 800278a:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800278c:	7bfb      	ldrb	r3, [r7, #15]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fdc0 	bl	8002314 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fdbc 	bl	8002314 <ssd1306_WriteCommand>
}
 800279c:	bf00      	nop
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80027b4:	23af      	movs	r3, #175	; 0xaf
 80027b6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80027b8:	4b08      	ldr	r3, [pc, #32]	; (80027dc <ssd1306_SetDisplayOn+0x38>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	715a      	strb	r2, [r3, #5]
 80027be:	e004      	b.n	80027ca <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80027c0:	23ae      	movs	r3, #174	; 0xae
 80027c2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80027c4:	4b05      	ldr	r3, [pc, #20]	; (80027dc <ssd1306_SetDisplayOn+0x38>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fda1 	bl	8002314 <ssd1306_WriteCommand>
}
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	240004e0 	.word	0x240004e0

080027e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e6:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <HAL_MspInit+0x30>)
 80027e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027ec:	4a08      	ldr	r2, [pc, #32]	; (8002810 <HAL_MspInit+0x30>)
 80027ee:	f043 0302 	orr.w	r3, r3, #2
 80027f2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80027f6:	4b06      	ldr	r3, [pc, #24]	; (8002810 <HAL_MspInit+0x30>)
 80027f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	607b      	str	r3, [r7, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	58024400 	.word	0x58024400

08002814 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b0ba      	sub	sp, #232	; 0xe8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800282c:	f107 0318 	add.w	r3, r7, #24
 8002830:	22bc      	movs	r2, #188	; 0xbc
 8002832:	2100      	movs	r1, #0
 8002834:	4618      	mov	r0, r3
 8002836:	f009 fc35 	bl	800c0a4 <memset>
  if(hadc->Instance==ADC3)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a30      	ldr	r2, [pc, #192]	; (8002900 <HAL_ADC_MspInit+0xec>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d159      	bne.n	80028f8 <HAL_ADC_MspInit+0xe4>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002844:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002848:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 800284a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800284e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002852:	f107 0318 	add.w	r3, r7, #24
 8002856:	4618      	mov	r0, r3
 8002858:	f004 faa2 	bl	8006da0 <HAL_RCCEx_PeriphCLKConfig>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8002862:	f7ff fd31 	bl	80022c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002866:	4b27      	ldr	r3, [pc, #156]	; (8002904 <HAL_ADC_MspInit+0xf0>)
 8002868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800286c:	4a25      	ldr	r2, [pc, #148]	; (8002904 <HAL_ADC_MspInit+0xf0>)
 800286e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002872:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002876:	4b23      	ldr	r3, [pc, #140]	; (8002904 <HAL_ADC_MspInit+0xf0>)
 8002878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800287c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002884:	4b1f      	ldr	r3, [pc, #124]	; (8002904 <HAL_ADC_MspInit+0xf0>)
 8002886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800288a:	4a1e      	ldr	r2, [pc, #120]	; (8002904 <HAL_ADC_MspInit+0xf0>)
 800288c:	f043 0320 	orr.w	r3, r3, #32
 8002890:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002894:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <HAL_ADC_MspInit+0xf0>)
 8002896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800289a:	f003 0320 	and.w	r3, r3, #32
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028a2:	4b18      	ldr	r3, [pc, #96]	; (8002904 <HAL_ADC_MspInit+0xf0>)
 80028a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028a8:	4a16      	ldr	r2, [pc, #88]	; (8002904 <HAL_ADC_MspInit+0xf0>)
 80028aa:	f043 0304 	orr.w	r3, r3, #4
 80028ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028b2:	4b14      	ldr	r3, [pc, #80]	; (8002904 <HAL_ADC_MspInit+0xf0>)
 80028b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	68fb      	ldr	r3, [r7, #12]
    PF8     ------> ADC3_INP7
    PF10     ------> ADC3_INP6
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_10;
 80028c0:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 80028c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028c8:	2303      	movs	r3, #3
 80028ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80028d8:	4619      	mov	r1, r3
 80028da:	480b      	ldr	r0, [pc, #44]	; (8002908 <HAL_ADC_MspInit+0xf4>)
 80028dc:	f002 f938 	bl	8004b50 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80028e0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80028e4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80028e8:	f000 fc3a 	bl	8003160 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80028ec:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80028f0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80028f4:	f000 fc34 	bl	8003160 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80028f8:	bf00      	nop
 80028fa:	37e8      	adds	r7, #232	; 0xe8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	58026000 	.word	0x58026000
 8002904:	58024400 	.word	0x58024400
 8002908:	58021400 	.word	0x58021400

0800290c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b0b8      	sub	sp, #224	; 0xe0
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002914:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002924:	f107 0310 	add.w	r3, r7, #16
 8002928:	22bc      	movs	r2, #188	; 0xbc
 800292a:	2100      	movs	r1, #0
 800292c:	4618      	mov	r0, r3
 800292e:	f009 fbb9 	bl	800c0a4 <memset>
  if(hi2c->Instance==I2C1)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a25      	ldr	r2, [pc, #148]	; (80029cc <HAL_I2C_MspInit+0xc0>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d143      	bne.n	80029c4 <HAL_I2C_MspInit+0xb8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800293c:	2308      	movs	r3, #8
 800293e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_HSI;
 8002940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002944:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002948:	f107 0310 	add.w	r3, r7, #16
 800294c:	4618      	mov	r0, r3
 800294e:	f004 fa27 	bl	8006da0 <HAL_RCCEx_PeriphCLKConfig>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002958:	f7ff fcb6 	bl	80022c8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800295c:	4b1c      	ldr	r3, [pc, #112]	; (80029d0 <HAL_I2C_MspInit+0xc4>)
 800295e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002962:	4a1b      	ldr	r2, [pc, #108]	; (80029d0 <HAL_I2C_MspInit+0xc4>)
 8002964:	f043 0302 	orr.w	r3, r3, #2
 8002968:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800296c:	4b18      	ldr	r3, [pc, #96]	; (80029d0 <HAL_I2C_MspInit+0xc4>)
 800296e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800297a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800297e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002982:	2312      	movs	r3, #18
 8002984:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002988:	2301      	movs	r3, #1
 800298a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800298e:	2302      	movs	r3, #2
 8002990:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002994:	2304      	movs	r3, #4
 8002996:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800299e:	4619      	mov	r1, r3
 80029a0:	480c      	ldr	r0, [pc, #48]	; (80029d4 <HAL_I2C_MspInit+0xc8>)
 80029a2:	f002 f8d5 	bl	8004b50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029a6:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <HAL_I2C_MspInit+0xc4>)
 80029a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029ac:	4a08      	ldr	r2, [pc, #32]	; (80029d0 <HAL_I2C_MspInit+0xc4>)
 80029ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_I2C_MspInit+0xc4>)
 80029b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80029c4:	bf00      	nop
 80029c6:	37e0      	adds	r7, #224	; 0xe0
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40005400 	.word	0x40005400
 80029d0:	58024400 	.word	0x58024400
 80029d4:	58020400 	.word	0x58020400

080029d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a32      	ldr	r2, [pc, #200]	; (8002ab0 <HAL_TIM_Base_MspInit+0xd8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d10f      	bne.n	8002a0a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029ea:	4b32      	ldr	r3, [pc, #200]	; (8002ab4 <HAL_TIM_Base_MspInit+0xdc>)
 80029ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029f0:	4a30      	ldr	r2, [pc, #192]	; (8002ab4 <HAL_TIM_Base_MspInit+0xdc>)
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80029fa:	4b2e      	ldr	r3, [pc, #184]	; (8002ab4 <HAL_TIM_Base_MspInit+0xdc>)
 80029fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002a08:	e04d      	b.n	8002aa6 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM3)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a2a      	ldr	r2, [pc, #168]	; (8002ab8 <HAL_TIM_Base_MspInit+0xe0>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d117      	bne.n	8002a44 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a14:	4b27      	ldr	r3, [pc, #156]	; (8002ab4 <HAL_TIM_Base_MspInit+0xdc>)
 8002a16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a1a:	4a26      	ldr	r2, [pc, #152]	; (8002ab4 <HAL_TIM_Base_MspInit+0xdc>)
 8002a1c:	f043 0302 	orr.w	r3, r3, #2
 8002a20:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a24:	4b23      	ldr	r3, [pc, #140]	; (8002ab4 <HAL_TIM_Base_MspInit+0xdc>)
 8002a26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a32:	2200      	movs	r2, #0
 8002a34:	2100      	movs	r1, #0
 8002a36:	201d      	movs	r0, #29
 8002a38:	f002 f855 	bl	8004ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a3c:	201d      	movs	r0, #29
 8002a3e:	f002 f86c 	bl	8004b1a <HAL_NVIC_EnableIRQ>
}
 8002a42:	e030      	b.n	8002aa6 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM5)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a1c      	ldr	r2, [pc, #112]	; (8002abc <HAL_TIM_Base_MspInit+0xe4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d117      	bne.n	8002a7e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a4e:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <HAL_TIM_Base_MspInit+0xdc>)
 8002a50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a54:	4a17      	ldr	r2, [pc, #92]	; (8002ab4 <HAL_TIM_Base_MspInit+0xdc>)
 8002a56:	f043 0308 	orr.w	r3, r3, #8
 8002a5a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a5e:	4b15      	ldr	r3, [pc, #84]	; (8002ab4 <HAL_TIM_Base_MspInit+0xdc>)
 8002a60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2100      	movs	r1, #0
 8002a70:	2032      	movs	r0, #50	; 0x32
 8002a72:	f002 f838 	bl	8004ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002a76:	2032      	movs	r0, #50	; 0x32
 8002a78:	f002 f84f 	bl	8004b1a <HAL_NVIC_EnableIRQ>
}
 8002a7c:	e013      	b.n	8002aa6 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM14)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a0f      	ldr	r2, [pc, #60]	; (8002ac0 <HAL_TIM_Base_MspInit+0xe8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d10e      	bne.n	8002aa6 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002a88:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <HAL_TIM_Base_MspInit+0xdc>)
 8002a8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a8e:	4a09      	ldr	r2, [pc, #36]	; (8002ab4 <HAL_TIM_Base_MspInit+0xdc>)
 8002a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <HAL_TIM_Base_MspInit+0xdc>)
 8002a9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
}
 8002aa6:	bf00      	nop
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40010000 	.word	0x40010000
 8002ab4:	58024400 	.word	0x58024400
 8002ab8:	40000400 	.word	0x40000400
 8002abc:	40000c00 	.word	0x40000c00
 8002ac0:	40002000 	.word	0x40002000

08002ac4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08a      	sub	sp, #40	; 0x28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002acc:	f107 0314 	add.w	r3, r7, #20
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
 8002ada:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a1a      	ldr	r2, [pc, #104]	; (8002b4c <HAL_TIM_Encoder_MspInit+0x88>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d12e      	bne.n	8002b44 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ae6:	4b1a      	ldr	r3, [pc, #104]	; (8002b50 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002ae8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002aec:	4a18      	ldr	r2, [pc, #96]	; (8002b50 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002aee:	f043 0304 	orr.w	r3, r3, #4
 8002af2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002af6:	4b16      	ldr	r3, [pc, #88]	; (8002b50 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002af8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b04:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b0a:	4a11      	ldr	r2, [pc, #68]	; (8002b50 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002b0c:	f043 0308 	orr.w	r3, r3, #8
 8002b10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b14:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002b22:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b30:	2300      	movs	r3, #0
 8002b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b34:	2302      	movs	r3, #2
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b38:	f107 0314 	add.w	r3, r7, #20
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4805      	ldr	r0, [pc, #20]	; (8002b54 <HAL_TIM_Encoder_MspInit+0x90>)
 8002b40:	f002 f806 	bl	8004b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002b44:	bf00      	nop
 8002b46:	3728      	adds	r7, #40	; 0x28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40000800 	.word	0x40000800
 8002b50:	58024400 	.word	0x58024400
 8002b54:	58020c00 	.word	0x58020c00

08002b58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b60:	f107 030c 	add.w	r3, r7, #12
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
 8002b6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM14)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a13      	ldr	r2, [pc, #76]	; (8002bc4 <HAL_TIM_MspPostInit+0x6c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d11f      	bne.n	8002bba <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b7a:	4b13      	ldr	r3, [pc, #76]	; (8002bc8 <HAL_TIM_MspPostInit+0x70>)
 8002b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b80:	4a11      	ldr	r2, [pc, #68]	; (8002bc8 <HAL_TIM_MspPostInit+0x70>)
 8002b82:	f043 0320 	orr.w	r3, r3, #32
 8002b86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b8a:	4b0f      	ldr	r3, [pc, #60]	; (8002bc8 <HAL_TIM_MspPostInit+0x70>)
 8002b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b90:	f003 0320 	and.w	r3, r3, #32
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PF9     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002baa:	2309      	movs	r3, #9
 8002bac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bae:	f107 030c 	add.w	r3, r7, #12
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4805      	ldr	r0, [pc, #20]	; (8002bcc <HAL_TIM_MspPostInit+0x74>)
 8002bb6:	f001 ffcb 	bl	8004b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002bba:	bf00      	nop
 8002bbc:	3720      	adds	r7, #32
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40002000 	.word	0x40002000
 8002bc8:	58024400 	.word	0x58024400
 8002bcc:	58021400 	.word	0x58021400

08002bd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b0b8      	sub	sp, #224	; 0xe0
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	60da      	str	r2, [r3, #12]
 8002be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002be8:	f107 0310 	add.w	r3, r7, #16
 8002bec:	22bc      	movs	r2, #188	; 0xbc
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f009 fa57 	bl	800c0a4 <memset>
  if(huart->Instance==USART3)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a25      	ldr	r2, [pc, #148]	; (8002c90 <HAL_UART_MspInit+0xc0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d142      	bne.n	8002c86 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002c00:	2302      	movs	r3, #2
 8002c02:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002c04:	2300      	movs	r3, #0
 8002c06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c0a:	f107 0310 	add.w	r3, r7, #16
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f004 f8c6 	bl	8006da0 <HAL_RCCEx_PeriphCLKConfig>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002c1a:	f7ff fb55 	bl	80022c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c1e:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <HAL_UART_MspInit+0xc4>)
 8002c20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c24:	4a1b      	ldr	r2, [pc, #108]	; (8002c94 <HAL_UART_MspInit+0xc4>)
 8002c26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c2e:	4b19      	ldr	r3, [pc, #100]	; (8002c94 <HAL_UART_MspInit+0xc4>)
 8002c30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c3c:	4b15      	ldr	r3, [pc, #84]	; (8002c94 <HAL_UART_MspInit+0xc4>)
 8002c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c42:	4a14      	ldr	r2, [pc, #80]	; (8002c94 <HAL_UART_MspInit+0xc4>)
 8002c44:	f043 0308 	orr.w	r3, r3, #8
 8002c48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c4c:	4b11      	ldr	r3, [pc, #68]	; (8002c94 <HAL_UART_MspInit+0xc4>)
 8002c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002c5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c62:	2302      	movs	r3, #2
 8002c64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c74:	2307      	movs	r3, #7
 8002c76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c7a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4805      	ldr	r0, [pc, #20]	; (8002c98 <HAL_UART_MspInit+0xc8>)
 8002c82:	f001 ff65 	bl	8004b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c86:	bf00      	nop
 8002c88:	37e0      	adds	r7, #224	; 0xe0
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40004800 	.word	0x40004800
 8002c94:	58024400 	.word	0x58024400
 8002c98:	58020c00 	.word	0x58020c00

08002c9c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b0b8      	sub	sp, #224	; 0xe0
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	60da      	str	r2, [r3, #12]
 8002cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cb4:	f107 0310 	add.w	r3, r7, #16
 8002cb8:	22bc      	movs	r2, #188	; 0xbc
 8002cba:	2100      	movs	r1, #0
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f009 f9f1 	bl	800c0a4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a2f      	ldr	r2, [pc, #188]	; (8002d84 <HAL_PCD_MspInit+0xe8>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d156      	bne.n	8002d7a <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002ccc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002cd0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002cd2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002cd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cda:	f107 0310 	add.w	r3, r7, #16
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f004 f85e 	bl	8006da0 <HAL_RCCEx_PeriphCLKConfig>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8002cea:	f7ff faed 	bl	80022c8 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002cee:	f003 f88f 	bl	8005e10 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf2:	4b25      	ldr	r3, [pc, #148]	; (8002d88 <HAL_PCD_MspInit+0xec>)
 8002cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cf8:	4a23      	ldr	r2, [pc, #140]	; (8002d88 <HAL_PCD_MspInit+0xec>)
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d02:	4b21      	ldr	r3, [pc, #132]	; (8002d88 <HAL_PCD_MspInit+0xec>)
 8002d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002d10:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002d14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d24:	2300      	movs	r3, #0
 8002d26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002d2a:	230a      	movs	r3, #10
 8002d2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d34:	4619      	mov	r1, r3
 8002d36:	4815      	ldr	r0, [pc, #84]	; (8002d8c <HAL_PCD_MspInit+0xf0>)
 8002d38:	f001 ff0a 	bl	8004b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d44:	2300      	movs	r3, #0
 8002d46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002d50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d54:	4619      	mov	r1, r3
 8002d56:	480d      	ldr	r0, [pc, #52]	; (8002d8c <HAL_PCD_MspInit+0xf0>)
 8002d58:	f001 fefa 	bl	8004b50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002d5c:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <HAL_PCD_MspInit+0xec>)
 8002d5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d62:	4a09      	ldr	r2, [pc, #36]	; (8002d88 <HAL_PCD_MspInit+0xec>)
 8002d64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d68:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002d6c:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <HAL_PCD_MspInit+0xec>)
 8002d6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d76:	60bb      	str	r3, [r7, #8]
 8002d78:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002d7a:	bf00      	nop
 8002d7c:	37e0      	adds	r7, #224	; 0xe0
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40080000 	.word	0x40080000
 8002d88:	58024400 	.word	0x58024400
 8002d8c:	58020000 	.word	0x58020000

08002d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d94:	e7fe      	b.n	8002d94 <NMI_Handler+0x4>

08002d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d96:	b480      	push	{r7}
 8002d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d9a:	e7fe      	b.n	8002d9a <HardFault_Handler+0x4>

08002d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002da0:	e7fe      	b.n	8002da0 <MemManage_Handler+0x4>

08002da2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002da2:	b480      	push	{r7}
 8002da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002da6:	e7fe      	b.n	8002da6 <BusFault_Handler+0x4>

08002da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dac:	e7fe      	b.n	8002dac <UsageFault_Handler+0x4>

08002dae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dae:	b480      	push	{r7}
 8002db0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002db2:	bf00      	nop
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dc0:	bf00      	nop
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ddc:	f000 f970 	bl	80030c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002de0:	bf00      	nop
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002de8:	4802      	ldr	r0, [pc, #8]	; (8002df4 <TIM3_IRQHandler+0x10>)
 8002dea:	f006 fcd3 	bl	8009794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	24001f28 	.word	0x24001f28

08002df8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002dfc:	4802      	ldr	r0, [pc, #8]	; (8002e08 <TIM5_IRQHandler+0x10>)
 8002dfe:	f006 fcc9 	bl	8009794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	24000b54 	.word	0x24000b54

08002e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e14:	4a14      	ldr	r2, [pc, #80]	; (8002e68 <_sbrk+0x5c>)
 8002e16:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <_sbrk+0x60>)
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e20:	4b13      	ldr	r3, [pc, #76]	; (8002e70 <_sbrk+0x64>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d102      	bne.n	8002e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e28:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <_sbrk+0x64>)
 8002e2a:	4a12      	ldr	r2, [pc, #72]	; (8002e74 <_sbrk+0x68>)
 8002e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e2e:	4b10      	ldr	r3, [pc, #64]	; (8002e70 <_sbrk+0x64>)
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4413      	add	r3, r2
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d207      	bcs.n	8002e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e3c:	f009 f8e0 	bl	800c000 <__errno>
 8002e40:	4603      	mov	r3, r0
 8002e42:	220c      	movs	r2, #12
 8002e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e46:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4a:	e009      	b.n	8002e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e4c:	4b08      	ldr	r3, [pc, #32]	; (8002e70 <_sbrk+0x64>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e52:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <_sbrk+0x64>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4413      	add	r3, r2
 8002e5a:	4a05      	ldr	r2, [pc, #20]	; (8002e70 <_sbrk+0x64>)
 8002e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	24080000 	.word	0x24080000
 8002e6c:	00000400 	.word	0x00000400
 8002e70:	240004e8 	.word	0x240004e8
 8002e74:	24002c08 	.word	0x24002c08

08002e78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002e7c:	4b37      	ldr	r3, [pc, #220]	; (8002f5c <SystemInit+0xe4>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e82:	4a36      	ldr	r2, [pc, #216]	; (8002f5c <SystemInit+0xe4>)
 8002e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e8c:	4b34      	ldr	r3, [pc, #208]	; (8002f60 <SystemInit+0xe8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	2b06      	cmp	r3, #6
 8002e96:	d807      	bhi.n	8002ea8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e98:	4b31      	ldr	r3, [pc, #196]	; (8002f60 <SystemInit+0xe8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f023 030f 	bic.w	r3, r3, #15
 8002ea0:	4a2f      	ldr	r2, [pc, #188]	; (8002f60 <SystemInit+0xe8>)
 8002ea2:	f043 0307 	orr.w	r3, r3, #7
 8002ea6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002ea8:	4b2e      	ldr	r3, [pc, #184]	; (8002f64 <SystemInit+0xec>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a2d      	ldr	r2, [pc, #180]	; (8002f64 <SystemInit+0xec>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002eb4:	4b2b      	ldr	r3, [pc, #172]	; (8002f64 <SystemInit+0xec>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002eba:	4b2a      	ldr	r3, [pc, #168]	; (8002f64 <SystemInit+0xec>)
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	4929      	ldr	r1, [pc, #164]	; (8002f64 <SystemInit+0xec>)
 8002ec0:	4b29      	ldr	r3, [pc, #164]	; (8002f68 <SystemInit+0xf0>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002ec6:	4b26      	ldr	r3, [pc, #152]	; (8002f60 <SystemInit+0xe8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d007      	beq.n	8002ee2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002ed2:	4b23      	ldr	r3, [pc, #140]	; (8002f60 <SystemInit+0xe8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 030f 	bic.w	r3, r3, #15
 8002eda:	4a21      	ldr	r2, [pc, #132]	; (8002f60 <SystemInit+0xe8>)
 8002edc:	f043 0307 	orr.w	r3, r3, #7
 8002ee0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002ee2:	4b20      	ldr	r3, [pc, #128]	; (8002f64 <SystemInit+0xec>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002ee8:	4b1e      	ldr	r3, [pc, #120]	; (8002f64 <SystemInit+0xec>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002eee:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <SystemInit+0xec>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002ef4:	4b1b      	ldr	r3, [pc, #108]	; (8002f64 <SystemInit+0xec>)
 8002ef6:	4a1d      	ldr	r2, [pc, #116]	; (8002f6c <SystemInit+0xf4>)
 8002ef8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002efa:	4b1a      	ldr	r3, [pc, #104]	; (8002f64 <SystemInit+0xec>)
 8002efc:	4a1c      	ldr	r2, [pc, #112]	; (8002f70 <SystemInit+0xf8>)
 8002efe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002f00:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <SystemInit+0xec>)
 8002f02:	4a1c      	ldr	r2, [pc, #112]	; (8002f74 <SystemInit+0xfc>)
 8002f04:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002f06:	4b17      	ldr	r3, [pc, #92]	; (8002f64 <SystemInit+0xec>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002f0c:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <SystemInit+0xec>)
 8002f0e:	4a19      	ldr	r2, [pc, #100]	; (8002f74 <SystemInit+0xfc>)
 8002f10:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002f12:	4b14      	ldr	r3, [pc, #80]	; (8002f64 <SystemInit+0xec>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002f18:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <SystemInit+0xec>)
 8002f1a:	4a16      	ldr	r2, [pc, #88]	; (8002f74 <SystemInit+0xfc>)
 8002f1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002f1e:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <SystemInit+0xec>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f24:	4b0f      	ldr	r3, [pc, #60]	; (8002f64 <SystemInit+0xec>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a0e      	ldr	r2, [pc, #56]	; (8002f64 <SystemInit+0xec>)
 8002f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <SystemInit+0xec>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002f36:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <SystemInit+0x100>)
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	4b10      	ldr	r3, [pc, #64]	; (8002f7c <SystemInit+0x104>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f42:	d202      	bcs.n	8002f4a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002f44:	4b0e      	ldr	r3, [pc, #56]	; (8002f80 <SystemInit+0x108>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002f4a:	4b0e      	ldr	r3, [pc, #56]	; (8002f84 <SystemInit+0x10c>)
 8002f4c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002f50:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002f52:	bf00      	nop
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	e000ed00 	.word	0xe000ed00
 8002f60:	52002000 	.word	0x52002000
 8002f64:	58024400 	.word	0x58024400
 8002f68:	eaf6ed7f 	.word	0xeaf6ed7f
 8002f6c:	02020200 	.word	0x02020200
 8002f70:	01ff0000 	.word	0x01ff0000
 8002f74:	01010280 	.word	0x01010280
 8002f78:	5c001000 	.word	0x5c001000
 8002f7c:	ffff0000 	.word	0xffff0000
 8002f80:	51008108 	.word	0x51008108
 8002f84:	52004000 	.word	0x52004000

08002f88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002f88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fc0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f8c:	f7ff ff74 	bl	8002e78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f90:	480c      	ldr	r0, [pc, #48]	; (8002fc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f92:	490d      	ldr	r1, [pc, #52]	; (8002fc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f94:	4a0d      	ldr	r2, [pc, #52]	; (8002fcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f98:	e002      	b.n	8002fa0 <LoopCopyDataInit>

08002f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f9e:	3304      	adds	r3, #4

08002fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fa4:	d3f9      	bcc.n	8002f9a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fa6:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002fa8:	4c0a      	ldr	r4, [pc, #40]	; (8002fd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fac:	e001      	b.n	8002fb2 <LoopFillZerobss>

08002fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fb0:	3204      	adds	r2, #4

08002fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fb4:	d3fb      	bcc.n	8002fae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fb6:	f009 f829 	bl	800c00c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fba:	f7fe faa7 	bl	800150c <main>
  bx  lr
 8002fbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fc0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002fc4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002fc8:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 8002fcc:	0800f978 	.word	0x0800f978
  ldr r2, =_sbss
 8002fd0:	24000098 	.word	0x24000098
  ldr r4, =_ebss
 8002fd4:	24002c04 	.word	0x24002c04

08002fd8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fd8:	e7fe      	b.n	8002fd8 <ADC3_IRQHandler>
	...

08002fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fe2:	2003      	movs	r0, #3
 8002fe4:	f001 fd74 	bl	8004ad0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002fe8:	f003 fd04 	bl	80069f4 <HAL_RCC_GetSysClockFreq>
 8002fec:	4602      	mov	r2, r0
 8002fee:	4b15      	ldr	r3, [pc, #84]	; (8003044 <HAL_Init+0x68>)
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	0a1b      	lsrs	r3, r3, #8
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	4913      	ldr	r1, [pc, #76]	; (8003048 <HAL_Init+0x6c>)
 8002ffa:	5ccb      	ldrb	r3, [r1, r3]
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	fa22 f303 	lsr.w	r3, r2, r3
 8003004:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003006:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <HAL_Init+0x68>)
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	4a0e      	ldr	r2, [pc, #56]	; (8003048 <HAL_Init+0x6c>)
 8003010:	5cd3      	ldrb	r3, [r2, r3]
 8003012:	f003 031f 	and.w	r3, r3, #31
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	fa22 f303 	lsr.w	r3, r2, r3
 800301c:	4a0b      	ldr	r2, [pc, #44]	; (800304c <HAL_Init+0x70>)
 800301e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003020:	4a0b      	ldr	r2, [pc, #44]	; (8003050 <HAL_Init+0x74>)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003026:	2000      	movs	r0, #0
 8003028:	f000 f814 	bl	8003054 <HAL_InitTick>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e002      	b.n	800303c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003036:	f7ff fbd3 	bl	80027e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	58024400 	.word	0x58024400
 8003048:	0800f8fc 	.word	0x0800f8fc
 800304c:	24000028 	.word	0x24000028
 8003050:	24000024 	.word	0x24000024

08003054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800305c:	4b15      	ldr	r3, [pc, #84]	; (80030b4 <HAL_InitTick+0x60>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e021      	b.n	80030ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003068:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <HAL_InitTick+0x64>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <HAL_InitTick+0x60>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	4619      	mov	r1, r3
 8003072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003076:	fbb3 f3f1 	udiv	r3, r3, r1
 800307a:	fbb2 f3f3 	udiv	r3, r2, r3
 800307e:	4618      	mov	r0, r3
 8003080:	f001 fd59 	bl	8004b36 <HAL_SYSTICK_Config>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e00e      	b.n	80030ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b0f      	cmp	r3, #15
 8003092:	d80a      	bhi.n	80030aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003094:	2200      	movs	r2, #0
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	f04f 30ff 	mov.w	r0, #4294967295
 800309c:	f001 fd23 	bl	8004ae6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030a0:	4a06      	ldr	r2, [pc, #24]	; (80030bc <HAL_InitTick+0x68>)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	e000      	b.n	80030ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	24000030 	.word	0x24000030
 80030b8:	24000024 	.word	0x24000024
 80030bc:	2400002c 	.word	0x2400002c

080030c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030c4:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <HAL_IncTick+0x20>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	461a      	mov	r2, r3
 80030ca:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <HAL_IncTick+0x24>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4413      	add	r3, r2
 80030d0:	4a04      	ldr	r2, [pc, #16]	; (80030e4 <HAL_IncTick+0x24>)
 80030d2:	6013      	str	r3, [r2, #0]
}
 80030d4:	bf00      	nop
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	24000030 	.word	0x24000030
 80030e4:	24002bf0 	.word	0x24002bf0

080030e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  return uwTick;
 80030ec:	4b03      	ldr	r3, [pc, #12]	; (80030fc <HAL_GetTick+0x14>)
 80030ee:	681b      	ldr	r3, [r3, #0]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	24002bf0 	.word	0x24002bf0

08003100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003108:	f7ff ffee 	bl	80030e8 <HAL_GetTick>
 800310c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003118:	d005      	beq.n	8003126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800311a:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <HAL_Delay+0x44>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4413      	add	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003126:	bf00      	nop
 8003128:	f7ff ffde 	bl	80030e8 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	429a      	cmp	r2, r3
 8003136:	d8f7      	bhi.n	8003128 <HAL_Delay+0x28>
  {
  }
}
 8003138:	bf00      	nop
 800313a:	bf00      	nop
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	24000030 	.word	0x24000030

08003148 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800314c:	4b03      	ldr	r3, [pc, #12]	; (800315c <HAL_GetREVID+0x14>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	0c1b      	lsrs	r3, r3, #16
}
 8003152:	4618      	mov	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	5c001000 	.word	0x5c001000

08003160 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800316a:	4b07      	ldr	r3, [pc, #28]	; (8003188 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	43db      	mvns	r3, r3
 8003172:	401a      	ands	r2, r3
 8003174:	4904      	ldr	r1, [pc, #16]	; (8003188 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	4313      	orrs	r3, r2
 800317a:	604b      	str	r3, [r1, #4]
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	58000400 	.word	0x58000400

0800318c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	431a      	orrs	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	609a      	str	r2, [r3, #8]
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	609a      	str	r2, [r3, #8]
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	3360      	adds	r3, #96	; 0x60
 8003206:	461a      	mov	r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	430b      	orrs	r3, r1
 8003222:	431a      	orrs	r2, r3
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003228:	bf00      	nop
 800322a:	371c      	adds	r7, #28
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f003 031f 	and.w	r3, r3, #31
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	fa01 f303 	lsl.w	r3, r1, r3
 8003254:	431a      	orrs	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	611a      	str	r2, [r3, #16]
}
 800325a:	bf00      	nop
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003266:	b480      	push	{r7}
 8003268:	b087      	sub	sp, #28
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	3360      	adds	r3, #96	; 0x60
 8003276:	461a      	mov	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	431a      	orrs	r2, r3
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	601a      	str	r2, [r3, #0]
  }
}
 8003290:	bf00      	nop
 8003292:	371c      	adds	r7, #28
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b087      	sub	sp, #28
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	3330      	adds	r3, #48	; 0x30
 80032d2:	461a      	mov	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	0a1b      	lsrs	r3, r3, #8
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	4413      	add	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	f003 031f 	and.w	r3, r3, #31
 80032ec:	211f      	movs	r1, #31
 80032ee:	fa01 f303 	lsl.w	r3, r1, r3
 80032f2:	43db      	mvns	r3, r3
 80032f4:	401a      	ands	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	0e9b      	lsrs	r3, r3, #26
 80032fa:	f003 011f 	and.w	r1, r3, #31
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	f003 031f 	and.w	r3, r3, #31
 8003304:	fa01 f303 	lsl.w	r3, r1, r3
 8003308:	431a      	orrs	r2, r3
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800330e:	bf00      	nop
 8003310:	371c      	adds	r7, #28
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800331a:	b480      	push	{r7}
 800331c:	b087      	sub	sp, #28
 800331e:	af00      	add	r7, sp, #0
 8003320:	60f8      	str	r0, [r7, #12]
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	3314      	adds	r3, #20
 800332a:	461a      	mov	r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	0e5b      	lsrs	r3, r3, #25
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	4413      	add	r3, r2
 8003338:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	0d1b      	lsrs	r3, r3, #20
 8003342:	f003 031f 	and.w	r3, r3, #31
 8003346:	2107      	movs	r1, #7
 8003348:	fa01 f303 	lsl.w	r3, r1, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	401a      	ands	r2, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	0d1b      	lsrs	r3, r3, #20
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	fa01 f303 	lsl.w	r3, r1, r3
 800335e:	431a      	orrs	r2, r3
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003364:	bf00      	nop
 8003366:	371c      	adds	r7, #28
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003388:	43db      	mvns	r3, r3
 800338a:	401a      	ands	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f003 0318 	and.w	r3, r3, #24
 8003392:	4908      	ldr	r1, [pc, #32]	; (80033b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003394:	40d9      	lsrs	r1, r3
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	400b      	ands	r3, r1
 800339a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800339e:	431a      	orrs	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80033a6:	bf00      	nop
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	000fffff 	.word	0x000fffff

080033b8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 031f 	and.w	r3, r3, #31
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	4b04      	ldr	r3, [pc, #16]	; (8003410 <LL_ADC_DisableDeepPowerDown+0x20>)
 80033fe:	4013      	ands	r3, r2
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6093      	str	r3, [r2, #8]
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	5fffffc0 	.word	0x5fffffc0

08003414 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003424:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003428:	d101      	bne.n	800342e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	4b05      	ldr	r3, [pc, #20]	; (8003460 <LL_ADC_EnableInternalRegulator+0x24>)
 800344a:	4013      	ands	r3, r2
 800344c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	6fffffc0 	.word	0x6fffffc0

08003464 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003474:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003478:	d101      	bne.n	800347e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <LL_ADC_Enable+0x24>)
 800349a:	4013      	ands	r3, r2
 800349c:	f043 0201 	orr.w	r2, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	7fffffc0 	.word	0x7fffffc0

080034b4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <LL_ADC_Disable+0x24>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	f043 0202 	orr.w	r2, r3, #2
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	7fffffc0 	.word	0x7fffffc0

080034dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <LL_ADC_IsEnabled+0x18>
 80034f0:	2301      	movs	r3, #1
 80034f2:	e000      	b.n	80034f6 <LL_ADC_IsEnabled+0x1a>
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b02      	cmp	r3, #2
 8003514:	d101      	bne.n	800351a <LL_ADC_IsDisableOngoing+0x18>
 8003516:	2301      	movs	r3, #1
 8003518:	e000      	b.n	800351c <LL_ADC_IsDisableOngoing+0x1a>
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	4b05      	ldr	r3, [pc, #20]	; (800354c <LL_ADC_REG_StartConversion+0x24>)
 8003536:	4013      	ands	r3, r2
 8003538:	f043 0204 	orr.w	r2, r3, #4
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	7fffffc0 	.word	0x7fffffc0

08003550 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <LL_ADC_REG_StopConversion+0x24>)
 800355e:	4013      	ands	r3, r2
 8003560:	f043 0210 	orr.w	r2, r3, #16
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	7fffffc0 	.word	0x7fffffc0

08003578 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b04      	cmp	r3, #4
 800358a:	d101      	bne.n	8003590 <LL_ADC_REG_IsConversionOngoing+0x18>
 800358c:	2301      	movs	r3, #1
 800358e:	e000      	b.n	8003592 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
	...

080035a0 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <LL_ADC_INJ_StopConversion+0x24>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	f043 0220 	orr.w	r2, r3, #32
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	7fffffc0 	.word	0x7fffffc0

080035c8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d101      	bne.n	80035e0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80035dc:	2301      	movs	r3, #1
 80035de:	e000      	b.n	80035e2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035f0:	b590      	push	{r4, r7, lr}
 80035f2:	b089      	sub	sp, #36	; 0x24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035f8:	2300      	movs	r3, #0
 80035fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e18e      	b.n	8003928 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003614:	2b00      	cmp	r3, #0
 8003616:	d109      	bne.n	800362c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7ff f8fb 	bl	8002814 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff feef 	bl	8003414 <LL_ADC_IsDeepPowerDownEnabled>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d004      	beq.n	8003646 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff fed5 	bl	80033f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff ff0a 	bl	8003464 <LL_ADC_IsInternalRegulatorEnabled>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d114      	bne.n	8003680 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff feee 	bl	800343c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003660:	4b9a      	ldr	r3, [pc, #616]	; (80038cc <HAL_ADC_Init+0x2dc>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	099b      	lsrs	r3, r3, #6
 8003666:	4a9a      	ldr	r2, [pc, #616]	; (80038d0 <HAL_ADC_Init+0x2e0>)
 8003668:	fba2 2303 	umull	r2, r3, r2, r3
 800366c:	099b      	lsrs	r3, r3, #6
 800366e:	3301      	adds	r3, #1
 8003670:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003672:	e002      	b.n	800367a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	3b01      	subs	r3, #1
 8003678:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1f9      	bne.n	8003674 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff feed 	bl	8003464 <LL_ADC_IsInternalRegulatorEnabled>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10d      	bne.n	80036ac <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003694:	f043 0210 	orr.w	r2, r3, #16
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a0:	f043 0201 	orr.w	r2, r3, #1
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff ff61 	bl	8003578 <LL_ADC_REG_IsConversionOngoing>
 80036b6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036bc:	f003 0310 	and.w	r3, r3, #16
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f040 8128 	bne.w	8003916 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f040 8124 	bne.w	8003916 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80036d6:	f043 0202 	orr.w	r2, r3, #2
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff fefa 	bl	80034dc <LL_ADC_IsEnabled>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d136      	bne.n	800375c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a78      	ldr	r2, [pc, #480]	; (80038d4 <HAL_ADC_Init+0x2e4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d004      	beq.n	8003702 <HAL_ADC_Init+0x112>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a76      	ldr	r2, [pc, #472]	; (80038d8 <HAL_ADC_Init+0x2e8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d10e      	bne.n	8003720 <HAL_ADC_Init+0x130>
 8003702:	4874      	ldr	r0, [pc, #464]	; (80038d4 <HAL_ADC_Init+0x2e4>)
 8003704:	f7ff feea 	bl	80034dc <LL_ADC_IsEnabled>
 8003708:	4604      	mov	r4, r0
 800370a:	4873      	ldr	r0, [pc, #460]	; (80038d8 <HAL_ADC_Init+0x2e8>)
 800370c:	f7ff fee6 	bl	80034dc <LL_ADC_IsEnabled>
 8003710:	4603      	mov	r3, r0
 8003712:	4323      	orrs	r3, r4
 8003714:	2b00      	cmp	r3, #0
 8003716:	bf0c      	ite	eq
 8003718:	2301      	moveq	r3, #1
 800371a:	2300      	movne	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	e008      	b.n	8003732 <HAL_ADC_Init+0x142>
 8003720:	486e      	ldr	r0, [pc, #440]	; (80038dc <HAL_ADC_Init+0x2ec>)
 8003722:	f7ff fedb 	bl	80034dc <LL_ADC_IsEnabled>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	bf0c      	ite	eq
 800372c:	2301      	moveq	r3, #1
 800372e:	2300      	movne	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d012      	beq.n	800375c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a66      	ldr	r2, [pc, #408]	; (80038d4 <HAL_ADC_Init+0x2e4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d004      	beq.n	800374a <HAL_ADC_Init+0x15a>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a64      	ldr	r2, [pc, #400]	; (80038d8 <HAL_ADC_Init+0x2e8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d101      	bne.n	800374e <HAL_ADC_Init+0x15e>
 800374a:	4a65      	ldr	r2, [pc, #404]	; (80038e0 <HAL_ADC_Init+0x2f0>)
 800374c:	e000      	b.n	8003750 <HAL_ADC_Init+0x160>
 800374e:	4a65      	ldr	r2, [pc, #404]	; (80038e4 <HAL_ADC_Init+0x2f4>)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	4619      	mov	r1, r3
 8003756:	4610      	mov	r0, r2
 8003758:	f7ff fd18 	bl	800318c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800375c:	f7ff fcf4 	bl	8003148 <HAL_GetREVID>
 8003760:	4603      	mov	r3, r0
 8003762:	f241 0203 	movw	r2, #4099	; 0x1003
 8003766:	4293      	cmp	r3, r2
 8003768:	d914      	bls.n	8003794 <HAL_ADC_Init+0x1a4>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	2b10      	cmp	r3, #16
 8003770:	d110      	bne.n	8003794 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	7d5b      	ldrb	r3, [r3, #21]
 8003776:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800377c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003782:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	7f1b      	ldrb	r3, [r3, #28]
 8003788:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800378a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800378c:	f043 030c 	orr.w	r3, r3, #12
 8003790:	61bb      	str	r3, [r7, #24]
 8003792:	e00d      	b.n	80037b0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	7d5b      	ldrb	r3, [r3, #21]
 8003798:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800379e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80037a4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	7f1b      	ldrb	r3, [r3, #28]
 80037aa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	7f1b      	ldrb	r3, [r3, #28]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d106      	bne.n	80037c6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	3b01      	subs	r3, #1
 80037be:	045b      	lsls	r3, r3, #17
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d009      	beq.n	80037e2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037da:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4313      	orrs	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	4b3f      	ldr	r3, [pc, #252]	; (80038e8 <HAL_ADC_Init+0x2f8>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6812      	ldr	r2, [r2, #0]
 80037f0:	69b9      	ldr	r1, [r7, #24]
 80037f2:	430b      	orrs	r3, r1
 80037f4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff febc 	bl	8003578 <LL_ADC_REG_IsConversionOngoing>
 8003800:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff fede 	bl	80035c8 <LL_ADC_INJ_IsConversionOngoing>
 800380c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d14a      	bne.n	80038aa <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d147      	bne.n	80038aa <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	7d1b      	ldrb	r3, [r3, #20]
 800381e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003824:	4313      	orrs	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	4b2f      	ldr	r3, [pc, #188]	; (80038ec <HAL_ADC_Init+0x2fc>)
 8003830:	4013      	ands	r3, r2
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6812      	ldr	r2, [r2, #0]
 8003836:	69b9      	ldr	r1, [r7, #24]
 8003838:	430b      	orrs	r3, r1
 800383a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003842:	2b01      	cmp	r3, #1
 8003844:	d11b      	bne.n	800387e <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691a      	ldr	r2, [r3, #16]
 8003852:	4b27      	ldr	r3, [pc, #156]	; (80038f0 <HAL_ADC_Init+0x300>)
 8003854:	4013      	ands	r3, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800385a:	3a01      	subs	r2, #1
 800385c:	0411      	lsls	r1, r2, #16
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003862:	4311      	orrs	r1, r2
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003868:	4311      	orrs	r1, r2
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800386e:	430a      	orrs	r2, r1
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	611a      	str	r2, [r3, #16]
 800387c:	e007      	b.n	800388e <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0201 	bic.w	r2, r2, #1
 800388c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 ff39 	bl	800471c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d120      	bne.n	80038f4 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b8:	f023 010f 	bic.w	r1, r3, #15
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	1e5a      	subs	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	631a      	str	r2, [r3, #48]	; 0x30
 80038ca:	e01b      	b.n	8003904 <HAL_ADC_Init+0x314>
 80038cc:	24000024 	.word	0x24000024
 80038d0:	053e2d63 	.word	0x053e2d63
 80038d4:	40022000 	.word	0x40022000
 80038d8:	40022100 	.word	0x40022100
 80038dc:	58026000 	.word	0x58026000
 80038e0:	40022300 	.word	0x40022300
 80038e4:	58026300 	.word	0x58026300
 80038e8:	fff0c003 	.word	0xfff0c003
 80038ec:	ffffbffc 	.word	0xffffbffc
 80038f0:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 020f 	bic.w	r2, r2, #15
 8003902:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003908:	f023 0303 	bic.w	r3, r3, #3
 800390c:	f043 0201 	orr.w	r2, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	655a      	str	r2, [r3, #84]	; 0x54
 8003914:	e007      	b.n	8003926 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391a:	f043 0210 	orr.w	r2, r3, #16
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003926:	7ffb      	ldrb	r3, [r7, #31]
}
 8003928:	4618      	mov	r0, r3
 800392a:	3724      	adds	r7, #36	; 0x24
 800392c:	46bd      	mov	sp, r7
 800392e:	bd90      	pop	{r4, r7, pc}

08003930 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a5c      	ldr	r2, [pc, #368]	; (8003ab0 <HAL_ADC_Start+0x180>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d004      	beq.n	800394c <HAL_ADC_Start+0x1c>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a5b      	ldr	r2, [pc, #364]	; (8003ab4 <HAL_ADC_Start+0x184>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d101      	bne.n	8003950 <HAL_ADC_Start+0x20>
 800394c:	4b5a      	ldr	r3, [pc, #360]	; (8003ab8 <HAL_ADC_Start+0x188>)
 800394e:	e000      	b.n	8003952 <HAL_ADC_Start+0x22>
 8003950:	4b5a      	ldr	r3, [pc, #360]	; (8003abc <HAL_ADC_Start+0x18c>)
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff fd30 	bl	80033b8 <LL_ADC_GetMultimode>
 8003958:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff fe0a 	bl	8003578 <LL_ADC_REG_IsConversionOngoing>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	f040 809a 	bne.w	8003aa0 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_ADC_Start+0x4a>
 8003976:	2302      	movs	r3, #2
 8003978:	e095      	b.n	8003aa6 <HAL_ADC_Start+0x176>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fde0 	bl	8004548 <ADC_Enable>
 8003988:	4603      	mov	r3, r0
 800398a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800398c:	7dfb      	ldrb	r3, [r7, #23]
 800398e:	2b00      	cmp	r3, #0
 8003990:	f040 8081 	bne.w	8003a96 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003998:	4b49      	ldr	r3, [pc, #292]	; (8003ac0 <HAL_ADC_Start+0x190>)
 800399a:	4013      	ands	r3, r2
 800399c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a42      	ldr	r2, [pc, #264]	; (8003ab4 <HAL_ADC_Start+0x184>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d002      	beq.n	80039b4 <HAL_ADC_Start+0x84>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	e000      	b.n	80039b6 <HAL_ADC_Start+0x86>
 80039b4:	4b3e      	ldr	r3, [pc, #248]	; (8003ab0 <HAL_ADC_Start+0x180>)
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6812      	ldr	r2, [r2, #0]
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d002      	beq.n	80039c4 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d105      	bne.n	80039d0 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039dc:	d106      	bne.n	80039ec <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e2:	f023 0206 	bic.w	r2, r3, #6
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	659a      	str	r2, [r3, #88]	; 0x58
 80039ea:	e002      	b.n	80039f2 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	221c      	movs	r2, #28
 80039f8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a2b      	ldr	r2, [pc, #172]	; (8003ab4 <HAL_ADC_Start+0x184>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d002      	beq.n	8003a12 <HAL_ADC_Start+0xe2>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	e000      	b.n	8003a14 <HAL_ADC_Start+0xe4>
 8003a12:	4b27      	ldr	r3, [pc, #156]	; (8003ab0 <HAL_ADC_Start+0x180>)
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6812      	ldr	r2, [r2, #0]
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d008      	beq.n	8003a2e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d005      	beq.n	8003a2e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	2b05      	cmp	r3, #5
 8003a26:	d002      	beq.n	8003a2e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	2b09      	cmp	r3, #9
 8003a2c:	d114      	bne.n	8003a58 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d007      	beq.n	8003a4c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff fd69 	bl	8003528 <LL_ADC_REG_StartConversion>
 8003a56:	e025      	b.n	8003aa4 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a12      	ldr	r2, [pc, #72]	; (8003ab4 <HAL_ADC_Start+0x184>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d002      	beq.n	8003a74 <HAL_ADC_Start+0x144>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	e000      	b.n	8003a76 <HAL_ADC_Start+0x146>
 8003a74:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <HAL_ADC_Start+0x180>)
 8003a76:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00f      	beq.n	8003aa4 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	655a      	str	r2, [r3, #84]	; 0x54
 8003a94:	e006      	b.n	8003aa4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003a9e:	e001      	b.n	8003aa4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40022000 	.word	0x40022000
 8003ab4:	40022100 	.word	0x40022100
 8003ab8:	40022300 	.word	0x40022300
 8003abc:	58026300 	.word	0x58026300
 8003ac0:	fffff0fe 	.word	0xfffff0fe

08003ac4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <HAL_ADC_Stop+0x16>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e021      	b.n	8003b1e <HAL_ADC_Stop+0x5a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003ae2:	2103      	movs	r1, #3
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 fc73 	bl	80043d0 <ADC_ConversionStop>
 8003aea:	4603      	mov	r3, r0
 8003aec:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10f      	bne.n	8003b14 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 fdb1 	bl	800465c <ADC_Disable>
 8003afa:	4603      	mov	r3, r0
 8003afc:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d107      	bne.n	8003b14 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b08:	4b07      	ldr	r3, [pc, #28]	; (8003b28 <HAL_ADC_Stop+0x64>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	f043 0201 	orr.w	r2, r3, #1
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	ffffeefe 	.word	0xffffeefe

08003b2c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a72      	ldr	r2, [pc, #456]	; (8003d04 <HAL_ADC_PollForConversion+0x1d8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d004      	beq.n	8003b4a <HAL_ADC_PollForConversion+0x1e>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a70      	ldr	r2, [pc, #448]	; (8003d08 <HAL_ADC_PollForConversion+0x1dc>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d101      	bne.n	8003b4e <HAL_ADC_PollForConversion+0x22>
 8003b4a:	4b70      	ldr	r3, [pc, #448]	; (8003d0c <HAL_ADC_PollForConversion+0x1e0>)
 8003b4c:	e000      	b.n	8003b50 <HAL_ADC_PollForConversion+0x24>
 8003b4e:	4b70      	ldr	r3, [pc, #448]	; (8003d10 <HAL_ADC_PollForConversion+0x1e4>)
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff fc31 	bl	80033b8 <LL_ADC_GetMultimode>
 8003b56:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d102      	bne.n	8003b66 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003b60:	2308      	movs	r3, #8
 8003b62:	61fb      	str	r3, [r7, #28]
 8003b64:	e037      	b.n	8003bd6 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	2b05      	cmp	r3, #5
 8003b70:	d002      	beq.n	8003b78 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2b09      	cmp	r3, #9
 8003b76:	d111      	bne.n	8003b9c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d007      	beq.n	8003b96 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8a:	f043 0220 	orr.w	r2, r3, #32
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e0b1      	b.n	8003cfa <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003b96:	2304      	movs	r3, #4
 8003b98:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003b9a:	e01c      	b.n	8003bd6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a58      	ldr	r2, [pc, #352]	; (8003d04 <HAL_ADC_PollForConversion+0x1d8>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d004      	beq.n	8003bb0 <HAL_ADC_PollForConversion+0x84>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a57      	ldr	r2, [pc, #348]	; (8003d08 <HAL_ADC_PollForConversion+0x1dc>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d101      	bne.n	8003bb4 <HAL_ADC_PollForConversion+0x88>
 8003bb0:	4b56      	ldr	r3, [pc, #344]	; (8003d0c <HAL_ADC_PollForConversion+0x1e0>)
 8003bb2:	e000      	b.n	8003bb6 <HAL_ADC_PollForConversion+0x8a>
 8003bb4:	4b56      	ldr	r3, [pc, #344]	; (8003d10 <HAL_ADC_PollForConversion+0x1e4>)
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff fc0c 	bl	80033d4 <LL_ADC_GetMultiDMATransfer>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d007      	beq.n	8003bd2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc6:	f043 0220 	orr.w	r2, r3, #32
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e093      	b.n	8003cfa <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003bd2:	2304      	movs	r3, #4
 8003bd4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003bd6:	f7ff fa87 	bl	80030e8 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003bdc:	e021      	b.n	8003c22 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be4:	d01d      	beq.n	8003c22 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003be6:	f7ff fa7f 	bl	80030e8 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d302      	bcc.n	8003bfc <HAL_ADC_PollForConversion+0xd0>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d112      	bne.n	8003c22 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	4013      	ands	r3, r2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10b      	bne.n	8003c22 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0e:	f043 0204 	orr.w	r2, r3, #4
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e06b      	b.n	8003cfa <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0d6      	beq.n	8003bde <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff fb2b 	bl	800329c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d01c      	beq.n	8003c86 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	7d5b      	ldrb	r3, [r3, #21]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d118      	bne.n	8003c86 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	d111      	bne.n	8003c86 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d105      	bne.n	8003c86 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7e:	f043 0201 	orr.w	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a1f      	ldr	r2, [pc, #124]	; (8003d08 <HAL_ADC_PollForConversion+0x1dc>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d002      	beq.n	8003c96 <HAL_ADC_PollForConversion+0x16a>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	e000      	b.n	8003c98 <HAL_ADC_PollForConversion+0x16c>
 8003c96:	4b1b      	ldr	r3, [pc, #108]	; (8003d04 <HAL_ADC_PollForConversion+0x1d8>)
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6812      	ldr	r2, [r2, #0]
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d008      	beq.n	8003cb2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d005      	beq.n	8003cb2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2b05      	cmp	r3, #5
 8003caa:	d002      	beq.n	8003cb2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2b09      	cmp	r3, #9
 8003cb0:	d104      	bne.n	8003cbc <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	61bb      	str	r3, [r7, #24]
 8003cba:	e00c      	b.n	8003cd6 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a11      	ldr	r2, [pc, #68]	; (8003d08 <HAL_ADC_PollForConversion+0x1dc>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d002      	beq.n	8003ccc <HAL_ADC_PollForConversion+0x1a0>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	e000      	b.n	8003cce <HAL_ADC_PollForConversion+0x1a2>
 8003ccc:	4b0d      	ldr	r3, [pc, #52]	; (8003d04 <HAL_ADC_PollForConversion+0x1d8>)
 8003cce:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d104      	bne.n	8003ce6 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2208      	movs	r2, #8
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	e008      	b.n	8003cf8 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d103      	bne.n	8003cf8 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	220c      	movs	r2, #12
 8003cf6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3720      	adds	r7, #32
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40022000 	.word	0x40022000
 8003d08:	40022100 	.word	0x40022100
 8003d0c:	40022300 	.word	0x40022300
 8003d10:	58026300 	.word	0x58026300

08003d14 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
	...

08003d30 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d30:	b590      	push	{r4, r7, lr}
 8003d32:	b0a1      	sub	sp, #132	; 0x84
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	4a9d      	ldr	r2, [pc, #628]	; (8003fc0 <HAL_ADC_ConfigChannel+0x290>)
 8003d4a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_ADC_ConfigChannel+0x2a>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e321      	b.n	800439e <HAL_ADC_ConfigChannel+0x66e>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff fc06 	bl	8003578 <LL_ADC_REG_IsConversionOngoing>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f040 8306 	bne.w	8004380 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d108      	bne.n	8003d92 <HAL_ADC_ConfigChannel+0x62>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	0e9b      	lsrs	r3, r3, #26
 8003d86:	f003 031f 	and.w	r3, r3, #31
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	e016      	b.n	8003dc0 <HAL_ADC_ConfigChannel+0x90>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d9a:	fa93 f3a3 	rbit	r3, r3
 8003d9e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003da0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003da2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003da4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003daa:	2320      	movs	r3, #32
 8003dac:	e003      	b.n	8003db6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003dae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003db0:	fab3 f383 	clz	r3, r3
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	f003 031f 	and.w	r3, r3, #31
 8003dba:	2201      	movs	r2, #1
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	69d1      	ldr	r1, [r2, #28]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6812      	ldr	r2, [r2, #0]
 8003dca:	430b      	orrs	r3, r1
 8003dcc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6818      	ldr	r0, [r3, #0]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	6859      	ldr	r1, [r3, #4]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	f7ff fa71 	bl	80032c2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff fbc7 	bl	8003578 <LL_ADC_REG_IsConversionOngoing>
 8003dea:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff fbe9 	bl	80035c8 <LL_ADC_INJ_IsConversionOngoing>
 8003df6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003df8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f040 80b3 	bne.w	8003f66 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f040 80af 	bne.w	8003f66 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6818      	ldr	r0, [r3, #0]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	6819      	ldr	r1, [r3, #0]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	461a      	mov	r2, r3
 8003e16:	f7ff fa80 	bl	800331a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003e1a:	4b6a      	ldr	r3, [pc, #424]	; (8003fc4 <HAL_ADC_ConfigChannel+0x294>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003e22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e26:	d10b      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x110>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	695a      	ldr	r2, [r3, #20]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	089b      	lsrs	r3, r3, #2
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	e01d      	b.n	8003e7c <HAL_ADC_ConfigChannel+0x14c>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f003 0310 	and.w	r3, r3, #16
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10b      	bne.n	8003e66 <HAL_ADC_ConfigChannel+0x136>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	695a      	ldr	r2, [r3, #20]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	089b      	lsrs	r3, r3, #2
 8003e5a:	f003 0307 	and.w	r3, r3, #7
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	e00a      	b.n	8003e7c <HAL_ADC_ConfigChannel+0x14c>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	695a      	ldr	r2, [r3, #20]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	089b      	lsrs	r3, r3, #2
 8003e72:	f003 0304 	and.w	r3, r3, #4
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d027      	beq.n	8003ed6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6818      	ldr	r0, [r3, #0]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	6919      	ldr	r1, [r3, #16]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e94:	f7ff f9ae 	bl	80031f4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	6919      	ldr	r1, [r3, #16]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	7e5b      	ldrb	r3, [r3, #25]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d102      	bne.n	8003eae <HAL_ADC_ConfigChannel+0x17e>
 8003ea8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003eac:	e000      	b.n	8003eb0 <HAL_ADC_ConfigChannel+0x180>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f7ff f9d8 	bl	8003266 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6818      	ldr	r0, [r3, #0]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	6919      	ldr	r1, [r3, #16]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	7e1b      	ldrb	r3, [r3, #24]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d102      	bne.n	8003ecc <HAL_ADC_ConfigChannel+0x19c>
 8003ec6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003eca:	e000      	b.n	8003ece <HAL_ADC_ConfigChannel+0x19e>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	461a      	mov	r2, r3
 8003ed0:	f7ff f9b0 	bl	8003234 <LL_ADC_SetDataRightShift>
 8003ed4:	e047      	b.n	8003f66 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003edc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	069b      	lsls	r3, r3, #26
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d107      	bne.n	8003efa <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ef8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	069b      	lsls	r3, r3, #26
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d107      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f1c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	069b      	lsls	r3, r3, #26
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d107      	bne.n	8003f42 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f40:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	069b      	lsls	r3, r3, #26
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d107      	bne.n	8003f66 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f64:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff fab6 	bl	80034dc <LL_ADC_IsEnabled>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f040 820d 	bne.w	8004392 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	6819      	ldr	r1, [r3, #0]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	461a      	mov	r2, r3
 8003f86:	f7ff f9f3 	bl	8003370 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	4a0c      	ldr	r2, [pc, #48]	; (8003fc0 <HAL_ADC_ConfigChannel+0x290>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	f040 8133 	bne.w	80041fc <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d110      	bne.n	8003fc8 <HAL_ADC_ConfigChannel+0x298>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	0e9b      	lsrs	r3, r3, #26
 8003fac:	3301      	adds	r3, #1
 8003fae:	f003 031f 	and.w	r3, r3, #31
 8003fb2:	2b09      	cmp	r3, #9
 8003fb4:	bf94      	ite	ls
 8003fb6:	2301      	movls	r3, #1
 8003fb8:	2300      	movhi	r3, #0
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	e01e      	b.n	8003ffc <HAL_ADC_ConfigChannel+0x2cc>
 8003fbe:	bf00      	nop
 8003fc0:	47ff0000 	.word	0x47ff0000
 8003fc4:	5c001000 	.word	0x5c001000
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fd0:	fa93 f3a3 	rbit	r3, r3
 8003fd4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003fd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003fda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003fe0:	2320      	movs	r3, #32
 8003fe2:	e003      	b.n	8003fec <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003fe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fe6:	fab3 f383 	clz	r3, r3
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	3301      	adds	r3, #1
 8003fee:	f003 031f 	and.w	r3, r3, #31
 8003ff2:	2b09      	cmp	r3, #9
 8003ff4:	bf94      	ite	ls
 8003ff6:	2301      	movls	r3, #1
 8003ff8:	2300      	movhi	r3, #0
 8003ffa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d079      	beq.n	80040f4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004008:	2b00      	cmp	r3, #0
 800400a:	d107      	bne.n	800401c <HAL_ADC_ConfigChannel+0x2ec>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	0e9b      	lsrs	r3, r3, #26
 8004012:	3301      	adds	r3, #1
 8004014:	069b      	lsls	r3, r3, #26
 8004016:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800401a:	e015      	b.n	8004048 <HAL_ADC_ConfigChannel+0x318>
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004024:	fa93 f3a3 	rbit	r3, r3
 8004028:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800402a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800402c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800402e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004034:	2320      	movs	r3, #32
 8004036:	e003      	b.n	8004040 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800403a:	fab3 f383 	clz	r3, r3
 800403e:	b2db      	uxtb	r3, r3
 8004040:	3301      	adds	r3, #1
 8004042:	069b      	lsls	r3, r3, #26
 8004044:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004050:	2b00      	cmp	r3, #0
 8004052:	d109      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x338>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	0e9b      	lsrs	r3, r3, #26
 800405a:	3301      	adds	r3, #1
 800405c:	f003 031f 	and.w	r3, r3, #31
 8004060:	2101      	movs	r1, #1
 8004062:	fa01 f303 	lsl.w	r3, r1, r3
 8004066:	e017      	b.n	8004098 <HAL_ADC_ConfigChannel+0x368>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004070:	fa93 f3a3 	rbit	r3, r3
 8004074:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004078:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800407a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004080:	2320      	movs	r3, #32
 8004082:	e003      	b.n	800408c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004086:	fab3 f383 	clz	r3, r3
 800408a:	b2db      	uxtb	r3, r3
 800408c:	3301      	adds	r3, #1
 800408e:	f003 031f 	and.w	r3, r3, #31
 8004092:	2101      	movs	r1, #1
 8004094:	fa01 f303 	lsl.w	r3, r1, r3
 8004098:	ea42 0103 	orr.w	r1, r2, r3
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10a      	bne.n	80040be <HAL_ADC_ConfigChannel+0x38e>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	0e9b      	lsrs	r3, r3, #26
 80040ae:	3301      	adds	r3, #1
 80040b0:	f003 021f 	and.w	r2, r3, #31
 80040b4:	4613      	mov	r3, r2
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	4413      	add	r3, r2
 80040ba:	051b      	lsls	r3, r3, #20
 80040bc:	e018      	b.n	80040f0 <HAL_ADC_ConfigChannel+0x3c0>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c6:	fa93 f3a3 	rbit	r3, r3
 80040ca:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80040cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ce:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80040d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80040d6:	2320      	movs	r3, #32
 80040d8:	e003      	b.n	80040e2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80040da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040dc:	fab3 f383 	clz	r3, r3
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	3301      	adds	r3, #1
 80040e4:	f003 021f 	and.w	r2, r3, #31
 80040e8:	4613      	mov	r3, r2
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	4413      	add	r3, r2
 80040ee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040f0:	430b      	orrs	r3, r1
 80040f2:	e07e      	b.n	80041f2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d107      	bne.n	8004110 <HAL_ADC_ConfigChannel+0x3e0>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	0e9b      	lsrs	r3, r3, #26
 8004106:	3301      	adds	r3, #1
 8004108:	069b      	lsls	r3, r3, #26
 800410a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800410e:	e015      	b.n	800413c <HAL_ADC_ConfigChannel+0x40c>
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004118:	fa93 f3a3 	rbit	r3, r3
 800411c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004128:	2320      	movs	r3, #32
 800412a:	e003      	b.n	8004134 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800412c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412e:	fab3 f383 	clz	r3, r3
 8004132:	b2db      	uxtb	r3, r3
 8004134:	3301      	adds	r3, #1
 8004136:	069b      	lsls	r3, r3, #26
 8004138:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004144:	2b00      	cmp	r3, #0
 8004146:	d109      	bne.n	800415c <HAL_ADC_ConfigChannel+0x42c>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	0e9b      	lsrs	r3, r3, #26
 800414e:	3301      	adds	r3, #1
 8004150:	f003 031f 	and.w	r3, r3, #31
 8004154:	2101      	movs	r1, #1
 8004156:	fa01 f303 	lsl.w	r3, r1, r3
 800415a:	e017      	b.n	800418c <HAL_ADC_ConfigChannel+0x45c>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	fa93 f3a3 	rbit	r3, r3
 8004168:	61bb      	str	r3, [r7, #24]
  return result;
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004174:	2320      	movs	r3, #32
 8004176:	e003      	b.n	8004180 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	fab3 f383 	clz	r3, r3
 800417e:	b2db      	uxtb	r3, r3
 8004180:	3301      	adds	r3, #1
 8004182:	f003 031f 	and.w	r3, r3, #31
 8004186:	2101      	movs	r1, #1
 8004188:	fa01 f303 	lsl.w	r3, r1, r3
 800418c:	ea42 0103 	orr.w	r1, r2, r3
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10d      	bne.n	80041b8 <HAL_ADC_ConfigChannel+0x488>
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	0e9b      	lsrs	r3, r3, #26
 80041a2:	3301      	adds	r3, #1
 80041a4:	f003 021f 	and.w	r2, r3, #31
 80041a8:	4613      	mov	r3, r2
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	4413      	add	r3, r2
 80041ae:	3b1e      	subs	r3, #30
 80041b0:	051b      	lsls	r3, r3, #20
 80041b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041b6:	e01b      	b.n	80041f0 <HAL_ADC_ConfigChannel+0x4c0>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	fa93 f3a3 	rbit	r3, r3
 80041c4:	60fb      	str	r3, [r7, #12]
  return result;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80041d0:	2320      	movs	r3, #32
 80041d2:	e003      	b.n	80041dc <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	fab3 f383 	clz	r3, r3
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	3301      	adds	r3, #1
 80041de:	f003 021f 	and.w	r2, r3, #31
 80041e2:	4613      	mov	r3, r2
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	4413      	add	r3, r2
 80041e8:	3b1e      	subs	r3, #30
 80041ea:	051b      	lsls	r3, r3, #20
 80041ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041f0:	430b      	orrs	r3, r1
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	6892      	ldr	r2, [r2, #8]
 80041f6:	4619      	mov	r1, r3
 80041f8:	f7ff f88f 	bl	800331a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	f280 80c6 	bge.w	8004392 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a67      	ldr	r2, [pc, #412]	; (80043a8 <HAL_ADC_ConfigChannel+0x678>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d004      	beq.n	800421a <HAL_ADC_ConfigChannel+0x4ea>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a65      	ldr	r2, [pc, #404]	; (80043ac <HAL_ADC_ConfigChannel+0x67c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d101      	bne.n	800421e <HAL_ADC_ConfigChannel+0x4ee>
 800421a:	4b65      	ldr	r3, [pc, #404]	; (80043b0 <HAL_ADC_ConfigChannel+0x680>)
 800421c:	e000      	b.n	8004220 <HAL_ADC_ConfigChannel+0x4f0>
 800421e:	4b65      	ldr	r3, [pc, #404]	; (80043b4 <HAL_ADC_ConfigChannel+0x684>)
 8004220:	4618      	mov	r0, r3
 8004222:	f7fe ffd9 	bl	80031d8 <LL_ADC_GetCommonPathInternalCh>
 8004226:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a5e      	ldr	r2, [pc, #376]	; (80043a8 <HAL_ADC_ConfigChannel+0x678>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d004      	beq.n	800423c <HAL_ADC_ConfigChannel+0x50c>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a5d      	ldr	r2, [pc, #372]	; (80043ac <HAL_ADC_ConfigChannel+0x67c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d10e      	bne.n	800425a <HAL_ADC_ConfigChannel+0x52a>
 800423c:	485a      	ldr	r0, [pc, #360]	; (80043a8 <HAL_ADC_ConfigChannel+0x678>)
 800423e:	f7ff f94d 	bl	80034dc <LL_ADC_IsEnabled>
 8004242:	4604      	mov	r4, r0
 8004244:	4859      	ldr	r0, [pc, #356]	; (80043ac <HAL_ADC_ConfigChannel+0x67c>)
 8004246:	f7ff f949 	bl	80034dc <LL_ADC_IsEnabled>
 800424a:	4603      	mov	r3, r0
 800424c:	4323      	orrs	r3, r4
 800424e:	2b00      	cmp	r3, #0
 8004250:	bf0c      	ite	eq
 8004252:	2301      	moveq	r3, #1
 8004254:	2300      	movne	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	e008      	b.n	800426c <HAL_ADC_ConfigChannel+0x53c>
 800425a:	4857      	ldr	r0, [pc, #348]	; (80043b8 <HAL_ADC_ConfigChannel+0x688>)
 800425c:	f7ff f93e 	bl	80034dc <LL_ADC_IsEnabled>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	bf0c      	ite	eq
 8004266:	2301      	moveq	r3, #1
 8004268:	2300      	movne	r3, #0
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d07d      	beq.n	800436c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a51      	ldr	r2, [pc, #324]	; (80043bc <HAL_ADC_ConfigChannel+0x68c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d130      	bne.n	80042dc <HAL_ADC_ConfigChannel+0x5ac>
 800427a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800427c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d12b      	bne.n	80042dc <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a4b      	ldr	r2, [pc, #300]	; (80043b8 <HAL_ADC_ConfigChannel+0x688>)
 800428a:	4293      	cmp	r3, r2
 800428c:	f040 8081 	bne.w	8004392 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a44      	ldr	r2, [pc, #272]	; (80043a8 <HAL_ADC_ConfigChannel+0x678>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d004      	beq.n	80042a4 <HAL_ADC_ConfigChannel+0x574>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a43      	ldr	r2, [pc, #268]	; (80043ac <HAL_ADC_ConfigChannel+0x67c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d101      	bne.n	80042a8 <HAL_ADC_ConfigChannel+0x578>
 80042a4:	4a42      	ldr	r2, [pc, #264]	; (80043b0 <HAL_ADC_ConfigChannel+0x680>)
 80042a6:	e000      	b.n	80042aa <HAL_ADC_ConfigChannel+0x57a>
 80042a8:	4a42      	ldr	r2, [pc, #264]	; (80043b4 <HAL_ADC_ConfigChannel+0x684>)
 80042aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042b0:	4619      	mov	r1, r3
 80042b2:	4610      	mov	r0, r2
 80042b4:	f7fe ff7d 	bl	80031b2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042b8:	4b41      	ldr	r3, [pc, #260]	; (80043c0 <HAL_ADC_ConfigChannel+0x690>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	099b      	lsrs	r3, r3, #6
 80042be:	4a41      	ldr	r2, [pc, #260]	; (80043c4 <HAL_ADC_ConfigChannel+0x694>)
 80042c0:	fba2 2303 	umull	r2, r3, r2, r3
 80042c4:	099b      	lsrs	r3, r3, #6
 80042c6:	3301      	adds	r3, #1
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80042cc:	e002      	b.n	80042d4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	3b01      	subs	r3, #1
 80042d2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1f9      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042da:	e05a      	b.n	8004392 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a39      	ldr	r2, [pc, #228]	; (80043c8 <HAL_ADC_ConfigChannel+0x698>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d11e      	bne.n	8004324 <HAL_ADC_ConfigChannel+0x5f4>
 80042e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d119      	bne.n	8004324 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a30      	ldr	r2, [pc, #192]	; (80043b8 <HAL_ADC_ConfigChannel+0x688>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d14b      	bne.n	8004392 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a2a      	ldr	r2, [pc, #168]	; (80043a8 <HAL_ADC_ConfigChannel+0x678>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d004      	beq.n	800430e <HAL_ADC_ConfigChannel+0x5de>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a28      	ldr	r2, [pc, #160]	; (80043ac <HAL_ADC_ConfigChannel+0x67c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d101      	bne.n	8004312 <HAL_ADC_ConfigChannel+0x5e2>
 800430e:	4a28      	ldr	r2, [pc, #160]	; (80043b0 <HAL_ADC_ConfigChannel+0x680>)
 8004310:	e000      	b.n	8004314 <HAL_ADC_ConfigChannel+0x5e4>
 8004312:	4a28      	ldr	r2, [pc, #160]	; (80043b4 <HAL_ADC_ConfigChannel+0x684>)
 8004314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800431a:	4619      	mov	r1, r3
 800431c:	4610      	mov	r0, r2
 800431e:	f7fe ff48 	bl	80031b2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004322:	e036      	b.n	8004392 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a28      	ldr	r2, [pc, #160]	; (80043cc <HAL_ADC_ConfigChannel+0x69c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d131      	bne.n	8004392 <HAL_ADC_ConfigChannel+0x662>
 800432e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004330:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d12c      	bne.n	8004392 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1e      	ldr	r2, [pc, #120]	; (80043b8 <HAL_ADC_ConfigChannel+0x688>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d127      	bne.n	8004392 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a18      	ldr	r2, [pc, #96]	; (80043a8 <HAL_ADC_ConfigChannel+0x678>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d004      	beq.n	8004356 <HAL_ADC_ConfigChannel+0x626>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a16      	ldr	r2, [pc, #88]	; (80043ac <HAL_ADC_ConfigChannel+0x67c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d101      	bne.n	800435a <HAL_ADC_ConfigChannel+0x62a>
 8004356:	4a16      	ldr	r2, [pc, #88]	; (80043b0 <HAL_ADC_ConfigChannel+0x680>)
 8004358:	e000      	b.n	800435c <HAL_ADC_ConfigChannel+0x62c>
 800435a:	4a16      	ldr	r2, [pc, #88]	; (80043b4 <HAL_ADC_ConfigChannel+0x684>)
 800435c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800435e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004362:	4619      	mov	r1, r3
 8004364:	4610      	mov	r0, r2
 8004366:	f7fe ff24 	bl	80031b2 <LL_ADC_SetCommonPathInternalCh>
 800436a:	e012      	b.n	8004392 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004370:	f043 0220 	orr.w	r2, r3, #32
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800437e:	e008      	b.n	8004392 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004384:	f043 0220 	orr.w	r2, r3, #32
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800439a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3784      	adds	r7, #132	; 0x84
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd90      	pop	{r4, r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40022000 	.word	0x40022000
 80043ac:	40022100 	.word	0x40022100
 80043b0:	40022300 	.word	0x40022300
 80043b4:	58026300 	.word	0x58026300
 80043b8:	58026000 	.word	0x58026000
 80043bc:	cb840000 	.word	0xcb840000
 80043c0:	24000024 	.word	0x24000024
 80043c4:	053e2d63 	.word	0x053e2d63
 80043c8:	c7520000 	.word	0xc7520000
 80043cc:	cfb80000 	.word	0xcfb80000

080043d0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b088      	sub	sp, #32
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80043da:	2300      	movs	r3, #0
 80043dc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff f8c6 	bl	8003578 <LL_ADC_REG_IsConversionOngoing>
 80043ec:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7ff f8e8 	bl	80035c8 <LL_ADC_INJ_IsConversionOngoing>
 80043f8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d103      	bne.n	8004408 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 8098 	beq.w	8004538 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d02a      	beq.n	800446c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	7d5b      	ldrb	r3, [r3, #21]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d126      	bne.n	800446c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	7d1b      	ldrb	r3, [r3, #20]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d122      	bne.n	800446c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004426:	2301      	movs	r3, #1
 8004428:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800442a:	e014      	b.n	8004456 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	4a45      	ldr	r2, [pc, #276]	; (8004544 <ADC_ConversionStop+0x174>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d90d      	bls.n	8004450 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004438:	f043 0210 	orr.w	r2, r3, #16
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004444:	f043 0201 	orr.w	r2, r3, #1
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e074      	b.n	800453a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	3301      	adds	r3, #1
 8004454:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004460:	2b40      	cmp	r3, #64	; 0x40
 8004462:	d1e3      	bne.n	800442c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2240      	movs	r2, #64	; 0x40
 800446a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	2b02      	cmp	r3, #2
 8004470:	d014      	beq.n	800449c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff f87e 	bl	8003578 <LL_ADC_REG_IsConversionOngoing>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00c      	beq.n	800449c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff f83b 	bl	8003502 <LL_ADC_IsDisableOngoing>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d104      	bne.n	800449c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff f85a 	bl	8003550 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d014      	beq.n	80044cc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff f88e 	bl	80035c8 <LL_ADC_INJ_IsConversionOngoing>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00c      	beq.n	80044cc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff f823 	bl	8003502 <LL_ADC_IsDisableOngoing>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d104      	bne.n	80044cc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff f86a 	bl	80035a0 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d005      	beq.n	80044de <ADC_ConversionStop+0x10e>
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	2b03      	cmp	r3, #3
 80044d6:	d105      	bne.n	80044e4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80044d8:	230c      	movs	r3, #12
 80044da:	617b      	str	r3, [r7, #20]
        break;
 80044dc:	e005      	b.n	80044ea <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80044de:	2308      	movs	r3, #8
 80044e0:	617b      	str	r3, [r7, #20]
        break;
 80044e2:	e002      	b.n	80044ea <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80044e4:	2304      	movs	r3, #4
 80044e6:	617b      	str	r3, [r7, #20]
        break;
 80044e8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80044ea:	f7fe fdfd 	bl	80030e8 <HAL_GetTick>
 80044ee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80044f0:	e01b      	b.n	800452a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80044f2:	f7fe fdf9 	bl	80030e8 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b05      	cmp	r3, #5
 80044fe:	d914      	bls.n	800452a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	4013      	ands	r3, r2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00d      	beq.n	800452a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004512:	f043 0210 	orr.w	r2, r3, #16
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451e:	f043 0201 	orr.w	r2, r3, #1
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e007      	b.n	800453a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	4013      	ands	r3, r2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1dc      	bne.n	80044f2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3720      	adds	r7, #32
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	000cdbff 	.word	0x000cdbff

08004548 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f7fe ffc1 	bl	80034dc <LL_ADC_IsEnabled>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d16e      	bne.n	800463e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	4b38      	ldr	r3, [pc, #224]	; (8004648 <ADC_Enable+0x100>)
 8004568:	4013      	ands	r3, r2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00d      	beq.n	800458a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004572:	f043 0210 	orr.w	r2, r3, #16
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457e:	f043 0201 	orr.w	r2, r3, #1
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e05a      	b.n	8004640 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f7fe ff7c 	bl	800348c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004594:	f7fe fda8 	bl	80030e8 <HAL_GetTick>
 8004598:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a2b      	ldr	r2, [pc, #172]	; (800464c <ADC_Enable+0x104>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d004      	beq.n	80045ae <ADC_Enable+0x66>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a29      	ldr	r2, [pc, #164]	; (8004650 <ADC_Enable+0x108>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d101      	bne.n	80045b2 <ADC_Enable+0x6a>
 80045ae:	4b29      	ldr	r3, [pc, #164]	; (8004654 <ADC_Enable+0x10c>)
 80045b0:	e000      	b.n	80045b4 <ADC_Enable+0x6c>
 80045b2:	4b29      	ldr	r3, [pc, #164]	; (8004658 <ADC_Enable+0x110>)
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fe feff 	bl	80033b8 <LL_ADC_GetMultimode>
 80045ba:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a23      	ldr	r2, [pc, #140]	; (8004650 <ADC_Enable+0x108>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d002      	beq.n	80045cc <ADC_Enable+0x84>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	e000      	b.n	80045ce <ADC_Enable+0x86>
 80045cc:	4b1f      	ldr	r3, [pc, #124]	; (800464c <ADC_Enable+0x104>)
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6812      	ldr	r2, [r2, #0]
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d02c      	beq.n	8004630 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d130      	bne.n	800463e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045dc:	e028      	b.n	8004630 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fe ff7a 	bl	80034dc <LL_ADC_IsEnabled>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d104      	bne.n	80045f8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fe ff4a 	bl	800348c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80045f8:	f7fe fd76 	bl	80030e8 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d914      	bls.n	8004630 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b01      	cmp	r3, #1
 8004612:	d00d      	beq.n	8004630 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004618:	f043 0210 	orr.w	r2, r3, #16
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004624:	f043 0201 	orr.w	r2, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e007      	b.n	8004640 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b01      	cmp	r3, #1
 800463c:	d1cf      	bne.n	80045de <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	8000003f 	.word	0x8000003f
 800464c:	40022000 	.word	0x40022000
 8004650:	40022100 	.word	0x40022100
 8004654:	40022300 	.word	0x40022300
 8004658:	58026300 	.word	0x58026300

0800465c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4618      	mov	r0, r3
 800466a:	f7fe ff4a 	bl	8003502 <LL_ADC_IsDisableOngoing>
 800466e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4618      	mov	r0, r3
 8004676:	f7fe ff31 	bl	80034dc <LL_ADC_IsEnabled>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d047      	beq.n	8004710 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d144      	bne.n	8004710 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f003 030d 	and.w	r3, r3, #13
 8004690:	2b01      	cmp	r3, #1
 8004692:	d10c      	bne.n	80046ae <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f7fe ff0b 	bl	80034b4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2203      	movs	r2, #3
 80046a4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80046a6:	f7fe fd1f 	bl	80030e8 <HAL_GetTick>
 80046aa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80046ac:	e029      	b.n	8004702 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b2:	f043 0210 	orr.w	r2, r3, #16
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046be:	f043 0201 	orr.w	r2, r3, #1
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e023      	b.n	8004712 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80046ca:	f7fe fd0d 	bl	80030e8 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d914      	bls.n	8004702 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00d      	beq.n	8004702 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ea:	f043 0210 	orr.w	r2, r3, #16
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f6:	f043 0201 	orr.w	r2, r3, #1
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e007      	b.n	8004712 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1dc      	bne.n	80046ca <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
	...

0800471c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a79      	ldr	r2, [pc, #484]	; (8004910 <ADC_ConfigureBoostMode+0x1f4>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d004      	beq.n	8004738 <ADC_ConfigureBoostMode+0x1c>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a78      	ldr	r2, [pc, #480]	; (8004914 <ADC_ConfigureBoostMode+0x1f8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d109      	bne.n	800474c <ADC_ConfigureBoostMode+0x30>
 8004738:	4b77      	ldr	r3, [pc, #476]	; (8004918 <ADC_ConfigureBoostMode+0x1fc>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004740:	2b00      	cmp	r3, #0
 8004742:	bf14      	ite	ne
 8004744:	2301      	movne	r3, #1
 8004746:	2300      	moveq	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	e008      	b.n	800475e <ADC_ConfigureBoostMode+0x42>
 800474c:	4b73      	ldr	r3, [pc, #460]	; (800491c <ADC_ConfigureBoostMode+0x200>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004754:	2b00      	cmp	r3, #0
 8004756:	bf14      	ite	ne
 8004758:	2301      	movne	r3, #1
 800475a:	2300      	moveq	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d01c      	beq.n	800479c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004762:	f002 fac1 	bl	8006ce8 <HAL_RCC_GetHCLKFreq>
 8004766:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004770:	d010      	beq.n	8004794 <ADC_ConfigureBoostMode+0x78>
 8004772:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004776:	d871      	bhi.n	800485c <ADC_ConfigureBoostMode+0x140>
 8004778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800477c:	d002      	beq.n	8004784 <ADC_ConfigureBoostMode+0x68>
 800477e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004782:	d16b      	bne.n	800485c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	0c1b      	lsrs	r3, r3, #16
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004790:	60fb      	str	r3, [r7, #12]
        break;
 8004792:	e066      	b.n	8004862 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	089b      	lsrs	r3, r3, #2
 8004798:	60fb      	str	r3, [r7, #12]
        break;
 800479a:	e062      	b.n	8004862 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800479c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80047a0:	f003 fa3e 	bl	8007c20 <HAL_RCCEx_GetPeriphCLKFreq>
 80047a4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80047ae:	d051      	beq.n	8004854 <ADC_ConfigureBoostMode+0x138>
 80047b0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80047b4:	d854      	bhi.n	8004860 <ADC_ConfigureBoostMode+0x144>
 80047b6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80047ba:	d047      	beq.n	800484c <ADC_ConfigureBoostMode+0x130>
 80047bc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80047c0:	d84e      	bhi.n	8004860 <ADC_ConfigureBoostMode+0x144>
 80047c2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80047c6:	d03d      	beq.n	8004844 <ADC_ConfigureBoostMode+0x128>
 80047c8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80047cc:	d848      	bhi.n	8004860 <ADC_ConfigureBoostMode+0x144>
 80047ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047d2:	d033      	beq.n	800483c <ADC_ConfigureBoostMode+0x120>
 80047d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047d8:	d842      	bhi.n	8004860 <ADC_ConfigureBoostMode+0x144>
 80047da:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80047de:	d029      	beq.n	8004834 <ADC_ConfigureBoostMode+0x118>
 80047e0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80047e4:	d83c      	bhi.n	8004860 <ADC_ConfigureBoostMode+0x144>
 80047e6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80047ea:	d01a      	beq.n	8004822 <ADC_ConfigureBoostMode+0x106>
 80047ec:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80047f0:	d836      	bhi.n	8004860 <ADC_ConfigureBoostMode+0x144>
 80047f2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80047f6:	d014      	beq.n	8004822 <ADC_ConfigureBoostMode+0x106>
 80047f8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80047fc:	d830      	bhi.n	8004860 <ADC_ConfigureBoostMode+0x144>
 80047fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004802:	d00e      	beq.n	8004822 <ADC_ConfigureBoostMode+0x106>
 8004804:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004808:	d82a      	bhi.n	8004860 <ADC_ConfigureBoostMode+0x144>
 800480a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800480e:	d008      	beq.n	8004822 <ADC_ConfigureBoostMode+0x106>
 8004810:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004814:	d824      	bhi.n	8004860 <ADC_ConfigureBoostMode+0x144>
 8004816:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800481a:	d002      	beq.n	8004822 <ADC_ConfigureBoostMode+0x106>
 800481c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004820:	d11e      	bne.n	8004860 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	0c9b      	lsrs	r3, r3, #18
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004830:	60fb      	str	r3, [r7, #12]
        break;
 8004832:	e016      	b.n	8004862 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	091b      	lsrs	r3, r3, #4
 8004838:	60fb      	str	r3, [r7, #12]
        break;
 800483a:	e012      	b.n	8004862 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	095b      	lsrs	r3, r3, #5
 8004840:	60fb      	str	r3, [r7, #12]
        break;
 8004842:	e00e      	b.n	8004862 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	099b      	lsrs	r3, r3, #6
 8004848:	60fb      	str	r3, [r7, #12]
        break;
 800484a:	e00a      	b.n	8004862 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	09db      	lsrs	r3, r3, #7
 8004850:	60fb      	str	r3, [r7, #12]
        break;
 8004852:	e006      	b.n	8004862 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	0a1b      	lsrs	r3, r3, #8
 8004858:	60fb      	str	r3, [r7, #12]
        break;
 800485a:	e002      	b.n	8004862 <ADC_ConfigureBoostMode+0x146>
        break;
 800485c:	bf00      	nop
 800485e:	e000      	b.n	8004862 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004860:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004862:	f7fe fc71 	bl	8003148 <HAL_GetREVID>
 8004866:	4603      	mov	r3, r0
 8004868:	f241 0203 	movw	r2, #4099	; 0x1003
 800486c:	4293      	cmp	r3, r2
 800486e:	d815      	bhi.n	800489c <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4a2b      	ldr	r2, [pc, #172]	; (8004920 <ADC_ConfigureBoostMode+0x204>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d908      	bls.n	800488a <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689a      	ldr	r2, [r3, #8]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004886:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004888:	e03e      	b.n	8004908 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004898:	609a      	str	r2, [r3, #8]
}
 800489a:	e035      	b.n	8004908 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	085b      	lsrs	r3, r3, #1
 80048a0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4a1f      	ldr	r2, [pc, #124]	; (8004924 <ADC_ConfigureBoostMode+0x208>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d808      	bhi.n	80048bc <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80048b8:	609a      	str	r2, [r3, #8]
}
 80048ba:	e025      	b.n	8004908 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4a1a      	ldr	r2, [pc, #104]	; (8004928 <ADC_ConfigureBoostMode+0x20c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d80a      	bhi.n	80048da <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048d6:	609a      	str	r2, [r3, #8]
}
 80048d8:	e016      	b.n	8004908 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4a13      	ldr	r2, [pc, #76]	; (800492c <ADC_ConfigureBoostMode+0x210>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d80a      	bhi.n	80048f8 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f4:	609a      	str	r2, [r3, #8]
}
 80048f6:	e007      	b.n	8004908 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004906:	609a      	str	r2, [r3, #8]
}
 8004908:	bf00      	nop
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40022000 	.word	0x40022000
 8004914:	40022100 	.word	0x40022100
 8004918:	40022300 	.word	0x40022300
 800491c:	58026300 	.word	0x58026300
 8004920:	01312d00 	.word	0x01312d00
 8004924:	005f5e10 	.word	0x005f5e10
 8004928:	00bebc20 	.word	0x00bebc20
 800492c:	017d7840 	.word	0x017d7840

08004930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f003 0307 	and.w	r3, r3, #7
 800493e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004940:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <__NVIC_SetPriorityGrouping+0x40>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800494c:	4013      	ands	r3, r2
 800494e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004958:	4b06      	ldr	r3, [pc, #24]	; (8004974 <__NVIC_SetPriorityGrouping+0x44>)
 800495a:	4313      	orrs	r3, r2
 800495c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800495e:	4a04      	ldr	r2, [pc, #16]	; (8004970 <__NVIC_SetPriorityGrouping+0x40>)
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	60d3      	str	r3, [r2, #12]
}
 8004964:	bf00      	nop
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	e000ed00 	.word	0xe000ed00
 8004974:	05fa0000 	.word	0x05fa0000

08004978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800497c:	4b04      	ldr	r3, [pc, #16]	; (8004990 <__NVIC_GetPriorityGrouping+0x18>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	0a1b      	lsrs	r3, r3, #8
 8004982:	f003 0307 	and.w	r3, r3, #7
}
 8004986:	4618      	mov	r0, r3
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	e000ed00 	.word	0xe000ed00

08004994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	4603      	mov	r3, r0
 800499c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800499e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	db0b      	blt.n	80049be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049a6:	88fb      	ldrh	r3, [r7, #6]
 80049a8:	f003 021f 	and.w	r2, r3, #31
 80049ac:	4907      	ldr	r1, [pc, #28]	; (80049cc <__NVIC_EnableIRQ+0x38>)
 80049ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049b2:	095b      	lsrs	r3, r3, #5
 80049b4:	2001      	movs	r0, #1
 80049b6:	fa00 f202 	lsl.w	r2, r0, r2
 80049ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	e000e100 	.word	0xe000e100

080049d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	4603      	mov	r3, r0
 80049d8:	6039      	str	r1, [r7, #0]
 80049da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80049dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	db0a      	blt.n	80049fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	490c      	ldr	r1, [pc, #48]	; (8004a1c <__NVIC_SetPriority+0x4c>)
 80049ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049ee:	0112      	lsls	r2, r2, #4
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	440b      	add	r3, r1
 80049f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049f8:	e00a      	b.n	8004a10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	4908      	ldr	r1, [pc, #32]	; (8004a20 <__NVIC_SetPriority+0x50>)
 8004a00:	88fb      	ldrh	r3, [r7, #6]
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	3b04      	subs	r3, #4
 8004a08:	0112      	lsls	r2, r2, #4
 8004a0a:	b2d2      	uxtb	r2, r2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	761a      	strb	r2, [r3, #24]
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	e000e100 	.word	0xe000e100
 8004a20:	e000ed00 	.word	0xe000ed00

08004a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b089      	sub	sp, #36	; 0x24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	f1c3 0307 	rsb	r3, r3, #7
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	bf28      	it	cs
 8004a42:	2304      	movcs	r3, #4
 8004a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	3304      	adds	r3, #4
 8004a4a:	2b06      	cmp	r3, #6
 8004a4c:	d902      	bls.n	8004a54 <NVIC_EncodePriority+0x30>
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	3b03      	subs	r3, #3
 8004a52:	e000      	b.n	8004a56 <NVIC_EncodePriority+0x32>
 8004a54:	2300      	movs	r3, #0
 8004a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a58:	f04f 32ff 	mov.w	r2, #4294967295
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a62:	43da      	mvns	r2, r3
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	401a      	ands	r2, r3
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	fa01 f303 	lsl.w	r3, r1, r3
 8004a76:	43d9      	mvns	r1, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a7c:	4313      	orrs	r3, r2
         );
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3724      	adds	r7, #36	; 0x24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
	...

08004a8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3b01      	subs	r3, #1
 8004a98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a9c:	d301      	bcc.n	8004aa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e00f      	b.n	8004ac2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004aa2:	4a0a      	ldr	r2, [pc, #40]	; (8004acc <SysTick_Config+0x40>)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004aaa:	210f      	movs	r1, #15
 8004aac:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab0:	f7ff ff8e 	bl	80049d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ab4:	4b05      	ldr	r3, [pc, #20]	; (8004acc <SysTick_Config+0x40>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004aba:	4b04      	ldr	r3, [pc, #16]	; (8004acc <SysTick_Config+0x40>)
 8004abc:	2207      	movs	r2, #7
 8004abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	e000e010 	.word	0xe000e010

08004ad0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f7ff ff29 	bl	8004930 <__NVIC_SetPriorityGrouping>
}
 8004ade:	bf00      	nop
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b086      	sub	sp, #24
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	4603      	mov	r3, r0
 8004aee:	60b9      	str	r1, [r7, #8]
 8004af0:	607a      	str	r2, [r7, #4]
 8004af2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004af4:	f7ff ff40 	bl	8004978 <__NVIC_GetPriorityGrouping>
 8004af8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	68b9      	ldr	r1, [r7, #8]
 8004afe:	6978      	ldr	r0, [r7, #20]
 8004b00:	f7ff ff90 	bl	8004a24 <NVIC_EncodePriority>
 8004b04:	4602      	mov	r2, r0
 8004b06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b0a:	4611      	mov	r1, r2
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff ff5f 	bl	80049d0 <__NVIC_SetPriority>
}
 8004b12:	bf00      	nop
 8004b14:	3718      	adds	r7, #24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b082      	sub	sp, #8
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	4603      	mov	r3, r0
 8004b22:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7ff ff33 	bl	8004994 <__NVIC_EnableIRQ>
}
 8004b2e:	bf00      	nop
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b082      	sub	sp, #8
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7ff ffa4 	bl	8004a8c <SysTick_Config>
 8004b44:	4603      	mov	r3, r0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
	...

08004b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b089      	sub	sp, #36	; 0x24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004b5e:	4b89      	ldr	r3, [pc, #548]	; (8004d84 <HAL_GPIO_Init+0x234>)
 8004b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b62:	e194      	b.n	8004e8e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	2101      	movs	r1, #1
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b70:	4013      	ands	r3, r2
 8004b72:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f000 8186 	beq.w	8004e88 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f003 0303 	and.w	r3, r3, #3
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d005      	beq.n	8004b94 <HAL_GPIO_Init+0x44>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f003 0303 	and.w	r3, r3, #3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d130      	bne.n	8004bf6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	2203      	movs	r2, #3
 8004ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba4:	43db      	mvns	r3, r3
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bca:	2201      	movs	r2, #1
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd2:	43db      	mvns	r3, r3
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	091b      	lsrs	r3, r3, #4
 8004be0:	f003 0201 	and.w	r2, r3, #1
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	2b03      	cmp	r3, #3
 8004c00:	d017      	beq.n	8004c32 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	2203      	movs	r2, #3
 8004c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c12:	43db      	mvns	r3, r3
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	4013      	ands	r3, r2
 8004c18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	689a      	ldr	r2, [r3, #8]
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	fa02 f303 	lsl.w	r3, r2, r3
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d123      	bne.n	8004c86 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	08da      	lsrs	r2, r3, #3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	3208      	adds	r2, #8
 8004c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	f003 0307 	and.w	r3, r3, #7
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	220f      	movs	r2, #15
 8004c56:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5a:	43db      	mvns	r3, r3
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	691a      	ldr	r2, [r3, #16]
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	08da      	lsrs	r2, r3, #3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3208      	adds	r2, #8
 8004c80:	69b9      	ldr	r1, [r7, #24]
 8004c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	2203      	movs	r2, #3
 8004c92:	fa02 f303 	lsl.w	r3, r2, r3
 8004c96:	43db      	mvns	r3, r3
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f003 0203 	and.w	r2, r3, #3
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 80e0 	beq.w	8004e88 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cc8:	4b2f      	ldr	r3, [pc, #188]	; (8004d88 <HAL_GPIO_Init+0x238>)
 8004cca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004cce:	4a2e      	ldr	r2, [pc, #184]	; (8004d88 <HAL_GPIO_Init+0x238>)
 8004cd0:	f043 0302 	orr.w	r3, r3, #2
 8004cd4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004cd8:	4b2b      	ldr	r3, [pc, #172]	; (8004d88 <HAL_GPIO_Init+0x238>)
 8004cda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ce6:	4a29      	ldr	r2, [pc, #164]	; (8004d8c <HAL_GPIO_Init+0x23c>)
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	089b      	lsrs	r3, r3, #2
 8004cec:	3302      	adds	r3, #2
 8004cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	220f      	movs	r2, #15
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	43db      	mvns	r3, r3
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	4013      	ands	r3, r2
 8004d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a20      	ldr	r2, [pc, #128]	; (8004d90 <HAL_GPIO_Init+0x240>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d052      	beq.n	8004db8 <HAL_GPIO_Init+0x268>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a1f      	ldr	r2, [pc, #124]	; (8004d94 <HAL_GPIO_Init+0x244>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d031      	beq.n	8004d7e <HAL_GPIO_Init+0x22e>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a1e      	ldr	r2, [pc, #120]	; (8004d98 <HAL_GPIO_Init+0x248>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d02b      	beq.n	8004d7a <HAL_GPIO_Init+0x22a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a1d      	ldr	r2, [pc, #116]	; (8004d9c <HAL_GPIO_Init+0x24c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d025      	beq.n	8004d76 <HAL_GPIO_Init+0x226>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a1c      	ldr	r2, [pc, #112]	; (8004da0 <HAL_GPIO_Init+0x250>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d01f      	beq.n	8004d72 <HAL_GPIO_Init+0x222>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a1b      	ldr	r2, [pc, #108]	; (8004da4 <HAL_GPIO_Init+0x254>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d019      	beq.n	8004d6e <HAL_GPIO_Init+0x21e>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a1a      	ldr	r2, [pc, #104]	; (8004da8 <HAL_GPIO_Init+0x258>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d013      	beq.n	8004d6a <HAL_GPIO_Init+0x21a>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a19      	ldr	r2, [pc, #100]	; (8004dac <HAL_GPIO_Init+0x25c>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d00d      	beq.n	8004d66 <HAL_GPIO_Init+0x216>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a18      	ldr	r2, [pc, #96]	; (8004db0 <HAL_GPIO_Init+0x260>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d007      	beq.n	8004d62 <HAL_GPIO_Init+0x212>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a17      	ldr	r2, [pc, #92]	; (8004db4 <HAL_GPIO_Init+0x264>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d101      	bne.n	8004d5e <HAL_GPIO_Init+0x20e>
 8004d5a:	2309      	movs	r3, #9
 8004d5c:	e02d      	b.n	8004dba <HAL_GPIO_Init+0x26a>
 8004d5e:	230a      	movs	r3, #10
 8004d60:	e02b      	b.n	8004dba <HAL_GPIO_Init+0x26a>
 8004d62:	2308      	movs	r3, #8
 8004d64:	e029      	b.n	8004dba <HAL_GPIO_Init+0x26a>
 8004d66:	2307      	movs	r3, #7
 8004d68:	e027      	b.n	8004dba <HAL_GPIO_Init+0x26a>
 8004d6a:	2306      	movs	r3, #6
 8004d6c:	e025      	b.n	8004dba <HAL_GPIO_Init+0x26a>
 8004d6e:	2305      	movs	r3, #5
 8004d70:	e023      	b.n	8004dba <HAL_GPIO_Init+0x26a>
 8004d72:	2304      	movs	r3, #4
 8004d74:	e021      	b.n	8004dba <HAL_GPIO_Init+0x26a>
 8004d76:	2303      	movs	r3, #3
 8004d78:	e01f      	b.n	8004dba <HAL_GPIO_Init+0x26a>
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	e01d      	b.n	8004dba <HAL_GPIO_Init+0x26a>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e01b      	b.n	8004dba <HAL_GPIO_Init+0x26a>
 8004d82:	bf00      	nop
 8004d84:	58000080 	.word	0x58000080
 8004d88:	58024400 	.word	0x58024400
 8004d8c:	58000400 	.word	0x58000400
 8004d90:	58020000 	.word	0x58020000
 8004d94:	58020400 	.word	0x58020400
 8004d98:	58020800 	.word	0x58020800
 8004d9c:	58020c00 	.word	0x58020c00
 8004da0:	58021000 	.word	0x58021000
 8004da4:	58021400 	.word	0x58021400
 8004da8:	58021800 	.word	0x58021800
 8004dac:	58021c00 	.word	0x58021c00
 8004db0:	58022000 	.word	0x58022000
 8004db4:	58022400 	.word	0x58022400
 8004db8:	2300      	movs	r3, #0
 8004dba:	69fa      	ldr	r2, [r7, #28]
 8004dbc:	f002 0203 	and.w	r2, r2, #3
 8004dc0:	0092      	lsls	r2, r2, #2
 8004dc2:	4093      	lsls	r3, r2
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dca:	4938      	ldr	r1, [pc, #224]	; (8004eac <HAL_GPIO_Init+0x35c>)
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	089b      	lsrs	r3, r3, #2
 8004dd0:	3302      	adds	r3, #2
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	43db      	mvns	r3, r3
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	4013      	ands	r3, r2
 8004de8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004dfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	43db      	mvns	r3, r3
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	4013      	ands	r3, r2
 8004e16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004e2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	43db      	mvns	r3, r3
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	4013      	ands	r3, r2
 8004e42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d003      	beq.n	8004e58 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	43db      	mvns	r3, r3
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	fa22 f303 	lsr.w	r3, r2, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f47f ae63 	bne.w	8004b64 <HAL_GPIO_Init+0x14>
  }
}
 8004e9e:	bf00      	nop
 8004ea0:	bf00      	nop
 8004ea2:	3724      	adds	r7, #36	; 0x24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	58000400 	.word	0x58000400

08004eb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	460b      	mov	r3, r1
 8004eba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691a      	ldr	r2, [r3, #16]
 8004ec0:	887b      	ldrh	r3, [r7, #2]
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d002      	beq.n	8004ece <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	73fb      	strb	r3, [r7, #15]
 8004ecc:	e001      	b.n	8004ed2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	460b      	mov	r3, r1
 8004eea:	807b      	strh	r3, [r7, #2]
 8004eec:	4613      	mov	r3, r2
 8004eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ef0:	787b      	ldrb	r3, [r7, #1]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ef6:	887a      	ldrh	r2, [r7, #2]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004efc:	e003      	b.n	8004f06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004efe:	887b      	ldrh	r3, [r7, #2]
 8004f00:	041a      	lsls	r2, r3, #16
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	619a      	str	r2, [r3, #24]
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
	...

08004f14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e07f      	b.n	8005026 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d106      	bne.n	8004f40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7fd fce6 	bl	800290c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2224      	movs	r2, #36	; 0x24
 8004f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0201 	bic.w	r2, r2, #1
 8004f56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d107      	bne.n	8004f8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689a      	ldr	r2, [r3, #8]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f8a:	609a      	str	r2, [r3, #8]
 8004f8c:	e006      	b.n	8004f9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689a      	ldr	r2, [r3, #8]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004f9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d104      	bne.n	8004fae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6859      	ldr	r1, [r3, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	4b1d      	ldr	r3, [pc, #116]	; (8005030 <HAL_I2C_Init+0x11c>)
 8004fba:	430b      	orrs	r3, r1
 8004fbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fcc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	691a      	ldr	r2, [r3, #16]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	69d9      	ldr	r1, [r3, #28]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a1a      	ldr	r2, [r3, #32]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0201 	orr.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2220      	movs	r2, #32
 8005012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	02008000 	.word	0x02008000

08005034 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b088      	sub	sp, #32
 8005038:	af02      	add	r7, sp, #8
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	4608      	mov	r0, r1
 800503e:	4611      	mov	r1, r2
 8005040:	461a      	mov	r2, r3
 8005042:	4603      	mov	r3, r0
 8005044:	817b      	strh	r3, [r7, #10]
 8005046:	460b      	mov	r3, r1
 8005048:	813b      	strh	r3, [r7, #8]
 800504a:	4613      	mov	r3, r2
 800504c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b20      	cmp	r3, #32
 8005058:	f040 80f9 	bne.w	800524e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800505c:	6a3b      	ldr	r3, [r7, #32]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d002      	beq.n	8005068 <HAL_I2C_Mem_Write+0x34>
 8005062:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005064:	2b00      	cmp	r3, #0
 8005066:	d105      	bne.n	8005074 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800506e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e0ed      	b.n	8005250 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800507a:	2b01      	cmp	r3, #1
 800507c:	d101      	bne.n	8005082 <HAL_I2C_Mem_Write+0x4e>
 800507e:	2302      	movs	r3, #2
 8005080:	e0e6      	b.n	8005250 <HAL_I2C_Mem_Write+0x21c>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800508a:	f7fe f82d 	bl	80030e8 <HAL_GetTick>
 800508e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	2319      	movs	r3, #25
 8005096:	2201      	movs	r2, #1
 8005098:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 fac3 	bl	8005628 <I2C_WaitOnFlagUntilTimeout>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e0d1      	b.n	8005250 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2221      	movs	r2, #33	; 0x21
 80050b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2240      	movs	r2, #64	; 0x40
 80050b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6a3a      	ldr	r2, [r7, #32]
 80050c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80050cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050d4:	88f8      	ldrh	r0, [r7, #6]
 80050d6:	893a      	ldrh	r2, [r7, #8]
 80050d8:	8979      	ldrh	r1, [r7, #10]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	9301      	str	r3, [sp, #4]
 80050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	4603      	mov	r3, r0
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 f9d3 	bl	8005490 <I2C_RequestMemoryWrite>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d005      	beq.n	80050fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e0a9      	b.n	8005250 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005100:	b29b      	uxth	r3, r3
 8005102:	2bff      	cmp	r3, #255	; 0xff
 8005104:	d90e      	bls.n	8005124 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	22ff      	movs	r2, #255	; 0xff
 800510a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005110:	b2da      	uxtb	r2, r3
 8005112:	8979      	ldrh	r1, [r7, #10]
 8005114:	2300      	movs	r3, #0
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 fc2b 	bl	8005978 <I2C_TransferConfig>
 8005122:	e00f      	b.n	8005144 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005128:	b29a      	uxth	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005132:	b2da      	uxtb	r2, r3
 8005134:	8979      	ldrh	r1, [r7, #10]
 8005136:	2300      	movs	r3, #0
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f000 fc1a 	bl	8005978 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 faad 	bl	80056a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e07b      	b.n	8005250 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	781a      	ldrb	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	1c5a      	adds	r2, r3, #1
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005172:	b29b      	uxth	r3, r3
 8005174:	3b01      	subs	r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005180:	3b01      	subs	r3, #1
 8005182:	b29a      	uxth	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518c:	b29b      	uxth	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d034      	beq.n	80051fc <HAL_I2C_Mem_Write+0x1c8>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005196:	2b00      	cmp	r3, #0
 8005198:	d130      	bne.n	80051fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a0:	2200      	movs	r2, #0
 80051a2:	2180      	movs	r1, #128	; 0x80
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f000 fa3f 	bl	8005628 <I2C_WaitOnFlagUntilTimeout>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e04d      	b.n	8005250 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2bff      	cmp	r3, #255	; 0xff
 80051bc:	d90e      	bls.n	80051dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	22ff      	movs	r2, #255	; 0xff
 80051c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	8979      	ldrh	r1, [r7, #10]
 80051cc:	2300      	movs	r3, #0
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 fbcf 	bl	8005978 <I2C_TransferConfig>
 80051da:	e00f      	b.n	80051fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	8979      	ldrh	r1, [r7, #10]
 80051ee:	2300      	movs	r3, #0
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 fbbe 	bl	8005978 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d19e      	bne.n	8005144 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 fa8c 	bl	8005728 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e01a      	b.n	8005250 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2220      	movs	r2, #32
 8005220:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6859      	ldr	r1, [r3, #4]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	4b0a      	ldr	r3, [pc, #40]	; (8005258 <HAL_I2C_Mem_Write+0x224>)
 800522e:	400b      	ands	r3, r1
 8005230:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2220      	movs	r2, #32
 8005236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	e000      	b.n	8005250 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800524e:	2302      	movs	r3, #2
  }
}
 8005250:	4618      	mov	r0, r3
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	fe00e800 	.word	0xfe00e800

0800525c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b088      	sub	sp, #32
 8005260:	af02      	add	r7, sp, #8
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	4608      	mov	r0, r1
 8005266:	4611      	mov	r1, r2
 8005268:	461a      	mov	r2, r3
 800526a:	4603      	mov	r3, r0
 800526c:	817b      	strh	r3, [r7, #10]
 800526e:	460b      	mov	r3, r1
 8005270:	813b      	strh	r3, [r7, #8]
 8005272:	4613      	mov	r3, r2
 8005274:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b20      	cmp	r3, #32
 8005280:	f040 80fd 	bne.w	800547e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d002      	beq.n	8005290 <HAL_I2C_Mem_Read+0x34>
 800528a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800528c:	2b00      	cmp	r3, #0
 800528e:	d105      	bne.n	800529c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005296:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e0f1      	b.n	8005480 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d101      	bne.n	80052aa <HAL_I2C_Mem_Read+0x4e>
 80052a6:	2302      	movs	r3, #2
 80052a8:	e0ea      	b.n	8005480 <HAL_I2C_Mem_Read+0x224>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80052b2:	f7fd ff19 	bl	80030e8 <HAL_GetTick>
 80052b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	2319      	movs	r3, #25
 80052be:	2201      	movs	r2, #1
 80052c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f000 f9af 	bl	8005628 <I2C_WaitOnFlagUntilTimeout>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e0d5      	b.n	8005480 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2222      	movs	r2, #34	; 0x22
 80052d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2240      	movs	r2, #64	; 0x40
 80052e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6a3a      	ldr	r2, [r7, #32]
 80052ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80052f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052fc:	88f8      	ldrh	r0, [r7, #6]
 80052fe:	893a      	ldrh	r2, [r7, #8]
 8005300:	8979      	ldrh	r1, [r7, #10]
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	9301      	str	r3, [sp, #4]
 8005306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	4603      	mov	r3, r0
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 f913 	bl	8005538 <I2C_RequestMemoryRead>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d005      	beq.n	8005324 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e0ad      	b.n	8005480 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005328:	b29b      	uxth	r3, r3
 800532a:	2bff      	cmp	r3, #255	; 0xff
 800532c:	d90e      	bls.n	800534c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	22ff      	movs	r2, #255	; 0xff
 8005332:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005338:	b2da      	uxtb	r2, r3
 800533a:	8979      	ldrh	r1, [r7, #10]
 800533c:	4b52      	ldr	r3, [pc, #328]	; (8005488 <HAL_I2C_Mem_Read+0x22c>)
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 fb17 	bl	8005978 <I2C_TransferConfig>
 800534a:	e00f      	b.n	800536c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800535a:	b2da      	uxtb	r2, r3
 800535c:	8979      	ldrh	r1, [r7, #10]
 800535e:	4b4a      	ldr	r3, [pc, #296]	; (8005488 <HAL_I2C_Mem_Read+0x22c>)
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 fb06 	bl	8005978 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005372:	2200      	movs	r2, #0
 8005374:	2104      	movs	r1, #4
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 f956 	bl	8005628 <I2C_WaitOnFlagUntilTimeout>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e07c      	b.n	8005480 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	b2d2      	uxtb	r2, r2
 8005392:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	1c5a      	adds	r2, r3, #1
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a2:	3b01      	subs	r3, #1
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053bc:	b29b      	uxth	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d034      	beq.n	800542c <HAL_I2C_Mem_Read+0x1d0>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d130      	bne.n	800542c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d0:	2200      	movs	r2, #0
 80053d2:	2180      	movs	r1, #128	; 0x80
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 f927 	bl	8005628 <I2C_WaitOnFlagUntilTimeout>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d001      	beq.n	80053e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e04d      	b.n	8005480 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	2bff      	cmp	r3, #255	; 0xff
 80053ec:	d90e      	bls.n	800540c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	22ff      	movs	r2, #255	; 0xff
 80053f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	8979      	ldrh	r1, [r7, #10]
 80053fc:	2300      	movs	r3, #0
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 fab7 	bl	8005978 <I2C_TransferConfig>
 800540a:	e00f      	b.n	800542c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800541a:	b2da      	uxtb	r2, r3
 800541c:	8979      	ldrh	r1, [r7, #10]
 800541e:	2300      	movs	r3, #0
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 faa6 	bl	8005978 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005430:	b29b      	uxth	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d19a      	bne.n	800536c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 f974 	bl	8005728 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e01a      	b.n	8005480 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2220      	movs	r2, #32
 8005450:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6859      	ldr	r1, [r3, #4]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	4b0b      	ldr	r3, [pc, #44]	; (800548c <HAL_I2C_Mem_Read+0x230>)
 800545e:	400b      	ands	r3, r1
 8005460:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2220      	movs	r2, #32
 8005466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	e000      	b.n	8005480 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800547e:	2302      	movs	r3, #2
  }
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	80002400 	.word	0x80002400
 800548c:	fe00e800 	.word	0xfe00e800

08005490 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af02      	add	r7, sp, #8
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	4608      	mov	r0, r1
 800549a:	4611      	mov	r1, r2
 800549c:	461a      	mov	r2, r3
 800549e:	4603      	mov	r3, r0
 80054a0:	817b      	strh	r3, [r7, #10]
 80054a2:	460b      	mov	r3, r1
 80054a4:	813b      	strh	r3, [r7, #8]
 80054a6:	4613      	mov	r3, r2
 80054a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80054aa:	88fb      	ldrh	r3, [r7, #6]
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	8979      	ldrh	r1, [r7, #10]
 80054b0:	4b20      	ldr	r3, [pc, #128]	; (8005534 <I2C_RequestMemoryWrite+0xa4>)
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 fa5d 	bl	8005978 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054be:	69fa      	ldr	r2, [r7, #28]
 80054c0:	69b9      	ldr	r1, [r7, #24]
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f000 f8f0 	bl	80056a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e02c      	b.n	800552c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054d2:	88fb      	ldrh	r3, [r7, #6]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d105      	bne.n	80054e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054d8:	893b      	ldrh	r3, [r7, #8]
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	629a      	str	r2, [r3, #40]	; 0x28
 80054e2:	e015      	b.n	8005510 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80054e4:	893b      	ldrh	r3, [r7, #8]
 80054e6:	0a1b      	lsrs	r3, r3, #8
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054f2:	69fa      	ldr	r2, [r7, #28]
 80054f4:	69b9      	ldr	r1, [r7, #24]
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 f8d6 	bl	80056a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e012      	b.n	800552c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005506:	893b      	ldrh	r3, [r7, #8]
 8005508:	b2da      	uxtb	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	2200      	movs	r2, #0
 8005518:	2180      	movs	r1, #128	; 0x80
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f000 f884 	bl	8005628 <I2C_WaitOnFlagUntilTimeout>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e000      	b.n	800552c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	80002000 	.word	0x80002000

08005538 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af02      	add	r7, sp, #8
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	4608      	mov	r0, r1
 8005542:	4611      	mov	r1, r2
 8005544:	461a      	mov	r2, r3
 8005546:	4603      	mov	r3, r0
 8005548:	817b      	strh	r3, [r7, #10]
 800554a:	460b      	mov	r3, r1
 800554c:	813b      	strh	r3, [r7, #8]
 800554e:	4613      	mov	r3, r2
 8005550:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005552:	88fb      	ldrh	r3, [r7, #6]
 8005554:	b2da      	uxtb	r2, r3
 8005556:	8979      	ldrh	r1, [r7, #10]
 8005558:	4b20      	ldr	r3, [pc, #128]	; (80055dc <I2C_RequestMemoryRead+0xa4>)
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	2300      	movs	r3, #0
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f000 fa0a 	bl	8005978 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005564:	69fa      	ldr	r2, [r7, #28]
 8005566:	69b9      	ldr	r1, [r7, #24]
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 f89d 	bl	80056a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e02c      	b.n	80055d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005578:	88fb      	ldrh	r3, [r7, #6]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d105      	bne.n	800558a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800557e:	893b      	ldrh	r3, [r7, #8]
 8005580:	b2da      	uxtb	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	629a      	str	r2, [r3, #40]	; 0x28
 8005588:	e015      	b.n	80055b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800558a:	893b      	ldrh	r3, [r7, #8]
 800558c:	0a1b      	lsrs	r3, r3, #8
 800558e:	b29b      	uxth	r3, r3
 8005590:	b2da      	uxtb	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005598:	69fa      	ldr	r2, [r7, #28]
 800559a:	69b9      	ldr	r1, [r7, #24]
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 f883 	bl	80056a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e012      	b.n	80055d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055ac:	893b      	ldrh	r3, [r7, #8]
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	2200      	movs	r2, #0
 80055be:	2140      	movs	r1, #64	; 0x40
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 f831 	bl	8005628 <I2C_WaitOnFlagUntilTimeout>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e000      	b.n	80055d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	80002000 	.word	0x80002000

080055e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d103      	bne.n	80055fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2200      	movs	r2, #0
 80055fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b01      	cmp	r3, #1
 800560a:	d007      	beq.n	800561c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699a      	ldr	r2, [r3, #24]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0201 	orr.w	r2, r2, #1
 800561a:	619a      	str	r2, [r3, #24]
  }
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	603b      	str	r3, [r7, #0]
 8005634:	4613      	mov	r3, r2
 8005636:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005638:	e022      	b.n	8005680 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005640:	d01e      	beq.n	8005680 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005642:	f7fd fd51 	bl	80030e8 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	429a      	cmp	r2, r3
 8005650:	d302      	bcc.n	8005658 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d113      	bne.n	8005680 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565c:	f043 0220 	orr.w	r2, r3, #32
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2220      	movs	r2, #32
 8005668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e00f      	b.n	80056a0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699a      	ldr	r2, [r3, #24]
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	4013      	ands	r3, r2
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	429a      	cmp	r2, r3
 800568e:	bf0c      	ite	eq
 8005690:	2301      	moveq	r3, #1
 8005692:	2300      	movne	r3, #0
 8005694:	b2db      	uxtb	r3, r3
 8005696:	461a      	mov	r2, r3
 8005698:	79fb      	ldrb	r3, [r7, #7]
 800569a:	429a      	cmp	r2, r3
 800569c:	d0cd      	beq.n	800563a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80056b4:	e02c      	b.n	8005710 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	68b9      	ldr	r1, [r7, #8]
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 f870 	bl	80057a0 <I2C_IsErrorOccurred>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e02a      	b.n	8005720 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d0:	d01e      	beq.n	8005710 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056d2:	f7fd fd09 	bl	80030e8 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d302      	bcc.n	80056e8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d113      	bne.n	8005710 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ec:	f043 0220 	orr.w	r2, r3, #32
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2220      	movs	r2, #32
 80056f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e007      	b.n	8005720 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b02      	cmp	r3, #2
 800571c:	d1cb      	bne.n	80056b6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005734:	e028      	b.n	8005788 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	68b9      	ldr	r1, [r7, #8]
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 f830 	bl	80057a0 <I2C_IsErrorOccurred>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e026      	b.n	8005798 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800574a:	f7fd fccd 	bl	80030e8 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	429a      	cmp	r2, r3
 8005758:	d302      	bcc.n	8005760 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d113      	bne.n	8005788 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005764:	f043 0220 	orr.w	r2, r3, #32
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2220      	movs	r2, #32
 8005770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e007      	b.n	8005798 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	f003 0320 	and.w	r3, r3, #32
 8005792:	2b20      	cmp	r3, #32
 8005794:	d1cf      	bne.n	8005736 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08a      	sub	sp, #40	; 0x28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057ac:	2300      	movs	r3, #0
 80057ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80057ba:	2300      	movs	r3, #0
 80057bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	f003 0310 	and.w	r3, r3, #16
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d075      	beq.n	80058b8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2210      	movs	r2, #16
 80057d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80057d4:	e056      	b.n	8005884 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057dc:	d052      	beq.n	8005884 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80057de:	f7fd fc83 	bl	80030e8 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d302      	bcc.n	80057f4 <I2C_IsErrorOccurred+0x54>
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d147      	bne.n	8005884 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005806:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005816:	d12e      	bne.n	8005876 <I2C_IsErrorOccurred+0xd6>
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800581e:	d02a      	beq.n	8005876 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005820:	7cfb      	ldrb	r3, [r7, #19]
 8005822:	2b20      	cmp	r3, #32
 8005824:	d027      	beq.n	8005876 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005834:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005836:	f7fd fc57 	bl	80030e8 <HAL_GetTick>
 800583a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800583c:	e01b      	b.n	8005876 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800583e:	f7fd fc53 	bl	80030e8 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	2b19      	cmp	r3, #25
 800584a:	d914      	bls.n	8005876 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005850:	f043 0220 	orr.w	r2, r3, #32
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	f003 0320 	and.w	r3, r3, #32
 8005880:	2b20      	cmp	r3, #32
 8005882:	d1dc      	bne.n	800583e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	f003 0320 	and.w	r3, r3, #32
 800588e:	2b20      	cmp	r3, #32
 8005890:	d003      	beq.n	800589a <I2C_IsErrorOccurred+0xfa>
 8005892:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005896:	2b00      	cmp	r3, #0
 8005898:	d09d      	beq.n	80057d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800589a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d103      	bne.n	80058aa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2220      	movs	r2, #32
 80058a8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	f043 0304 	orr.w	r3, r3, #4
 80058b0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00b      	beq.n	80058e2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	f043 0301 	orr.w	r3, r3, #1
 80058d0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00b      	beq.n	8005904 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	f043 0308 	orr.w	r3, r3, #8
 80058f2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00b      	beq.n	8005926 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	f043 0302 	orr.w	r3, r3, #2
 8005914:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800591e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800592a:	2b00      	cmp	r3, #0
 800592c:	d01c      	beq.n	8005968 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f7ff fe56 	bl	80055e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6859      	ldr	r1, [r3, #4]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	4b0d      	ldr	r3, [pc, #52]	; (8005974 <I2C_IsErrorOccurred+0x1d4>)
 8005940:	400b      	ands	r3, r1
 8005942:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	431a      	orrs	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800596c:	4618      	mov	r0, r3
 800596e:	3728      	adds	r7, #40	; 0x28
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	fe00e800 	.word	0xfe00e800

08005978 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	607b      	str	r3, [r7, #4]
 8005982:	460b      	mov	r3, r1
 8005984:	817b      	strh	r3, [r7, #10]
 8005986:	4613      	mov	r3, r2
 8005988:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800598a:	897b      	ldrh	r3, [r7, #10]
 800598c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005990:	7a7b      	ldrb	r3, [r7, #9]
 8005992:	041b      	lsls	r3, r3, #16
 8005994:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005998:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059a6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	0d5b      	lsrs	r3, r3, #21
 80059b2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80059b6:	4b08      	ldr	r3, [pc, #32]	; (80059d8 <I2C_TransferConfig+0x60>)
 80059b8:	430b      	orrs	r3, r1
 80059ba:	43db      	mvns	r3, r3
 80059bc:	ea02 0103 	and.w	r1, r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80059ca:	bf00      	nop
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	03ff63ff 	.word	0x03ff63ff

080059dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b20      	cmp	r3, #32
 80059f0:	d138      	bne.n	8005a64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e032      	b.n	8005a66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2224      	movs	r2, #36	; 0x24
 8005a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 0201 	bic.w	r2, r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6819      	ldr	r1, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0201 	orr.w	r2, r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a60:	2300      	movs	r3, #0
 8005a62:	e000      	b.n	8005a66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a64:	2302      	movs	r3, #2
  }
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b085      	sub	sp, #20
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
 8005a7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b20      	cmp	r3, #32
 8005a86:	d139      	bne.n	8005afc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d101      	bne.n	8005a96 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a92:	2302      	movs	r3, #2
 8005a94:	e033      	b.n	8005afe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2224      	movs	r2, #36	; 0x24
 8005aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f022 0201 	bic.w	r2, r2, #1
 8005ab4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005ac4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	021b      	lsls	r3, r3, #8
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 0201 	orr.w	r2, r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2220      	movs	r2, #32
 8005aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005af8:	2300      	movs	r3, #0
 8005afa:	e000      	b.n	8005afe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005afc:	2302      	movs	r3, #2
  }
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005b0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b0c:	b08f      	sub	sp, #60	; 0x3c
 8005b0e:	af0a      	add	r7, sp, #40	; 0x28
 8005b10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e116      	b.n	8005d4a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d106      	bne.n	8005b3c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7fd f8b0 	bl	8002c9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2203      	movs	r2, #3
 8005b40:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d102      	bne.n	8005b56 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f005 ffba 	bl	800bad4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	603b      	str	r3, [r7, #0]
 8005b66:	687e      	ldr	r6, [r7, #4]
 8005b68:	466d      	mov	r5, sp
 8005b6a:	f106 0410 	add.w	r4, r6, #16
 8005b6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b7e:	1d33      	adds	r3, r6, #4
 8005b80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b82:	6838      	ldr	r0, [r7, #0]
 8005b84:	f005 ff38 	bl	800b9f8 <USB_CoreInit>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d005      	beq.n	8005b9a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2202      	movs	r2, #2
 8005b92:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e0d7      	b.n	8005d4a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f005 ffa8 	bl	800baf6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	73fb      	strb	r3, [r7, #15]
 8005baa:	e04a      	b.n	8005c42 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005bac:	7bfa      	ldrb	r2, [r7, #15]
 8005bae:	6879      	ldr	r1, [r7, #4]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	1a9b      	subs	r3, r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	440b      	add	r3, r1
 8005bba:	333d      	adds	r3, #61	; 0x3d
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005bc0:	7bfa      	ldrb	r2, [r7, #15]
 8005bc2:	6879      	ldr	r1, [r7, #4]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	1a9b      	subs	r3, r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	440b      	add	r3, r1
 8005bce:	333c      	adds	r3, #60	; 0x3c
 8005bd0:	7bfa      	ldrb	r2, [r7, #15]
 8005bd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005bd4:	7bfa      	ldrb	r2, [r7, #15]
 8005bd6:	7bfb      	ldrb	r3, [r7, #15]
 8005bd8:	b298      	uxth	r0, r3
 8005bda:	6879      	ldr	r1, [r7, #4]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	00db      	lsls	r3, r3, #3
 8005be0:	1a9b      	subs	r3, r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	440b      	add	r3, r1
 8005be6:	3342      	adds	r3, #66	; 0x42
 8005be8:	4602      	mov	r2, r0
 8005bea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005bec:	7bfa      	ldrb	r2, [r7, #15]
 8005bee:	6879      	ldr	r1, [r7, #4]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	1a9b      	subs	r3, r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	440b      	add	r3, r1
 8005bfa:	333f      	adds	r3, #63	; 0x3f
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005c00:	7bfa      	ldrb	r2, [r7, #15]
 8005c02:	6879      	ldr	r1, [r7, #4]
 8005c04:	4613      	mov	r3, r2
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	1a9b      	subs	r3, r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	440b      	add	r3, r1
 8005c0e:	3344      	adds	r3, #68	; 0x44
 8005c10:	2200      	movs	r2, #0
 8005c12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005c14:	7bfa      	ldrb	r2, [r7, #15]
 8005c16:	6879      	ldr	r1, [r7, #4]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	1a9b      	subs	r3, r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	440b      	add	r3, r1
 8005c22:	3348      	adds	r3, #72	; 0x48
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005c28:	7bfa      	ldrb	r2, [r7, #15]
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	00db      	lsls	r3, r3, #3
 8005c30:	1a9b      	subs	r3, r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	440b      	add	r3, r1
 8005c36:	3350      	adds	r3, #80	; 0x50
 8005c38:	2200      	movs	r2, #0
 8005c3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	73fb      	strb	r3, [r7, #15]
 8005c42:	7bfa      	ldrb	r2, [r7, #15]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d3af      	bcc.n	8005bac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	73fb      	strb	r3, [r7, #15]
 8005c50:	e044      	b.n	8005cdc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005c52:	7bfa      	ldrb	r2, [r7, #15]
 8005c54:	6879      	ldr	r1, [r7, #4]
 8005c56:	4613      	mov	r3, r2
 8005c58:	00db      	lsls	r3, r3, #3
 8005c5a:	1a9b      	subs	r3, r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	440b      	add	r3, r1
 8005c60:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005c64:	2200      	movs	r2, #0
 8005c66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005c68:	7bfa      	ldrb	r2, [r7, #15]
 8005c6a:	6879      	ldr	r1, [r7, #4]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	00db      	lsls	r3, r3, #3
 8005c70:	1a9b      	subs	r3, r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	440b      	add	r3, r1
 8005c76:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005c7a:	7bfa      	ldrb	r2, [r7, #15]
 8005c7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005c7e:	7bfa      	ldrb	r2, [r7, #15]
 8005c80:	6879      	ldr	r1, [r7, #4]
 8005c82:	4613      	mov	r3, r2
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	1a9b      	subs	r3, r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	440b      	add	r3, r1
 8005c8c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005c90:	2200      	movs	r2, #0
 8005c92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005c94:	7bfa      	ldrb	r2, [r7, #15]
 8005c96:	6879      	ldr	r1, [r7, #4]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	00db      	lsls	r3, r3, #3
 8005c9c:	1a9b      	subs	r3, r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	440b      	add	r3, r1
 8005ca2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005caa:	7bfa      	ldrb	r2, [r7, #15]
 8005cac:	6879      	ldr	r1, [r7, #4]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	1a9b      	subs	r3, r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	440b      	add	r3, r1
 8005cb8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005cc0:	7bfa      	ldrb	r2, [r7, #15]
 8005cc2:	6879      	ldr	r1, [r7, #4]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	1a9b      	subs	r3, r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	440b      	add	r3, r1
 8005cce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cd6:	7bfb      	ldrb	r3, [r7, #15]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	73fb      	strb	r3, [r7, #15]
 8005cdc:	7bfa      	ldrb	r2, [r7, #15]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d3b5      	bcc.n	8005c52 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	603b      	str	r3, [r7, #0]
 8005cec:	687e      	ldr	r6, [r7, #4]
 8005cee:	466d      	mov	r5, sp
 8005cf0:	f106 0410 	add.w	r4, r6, #16
 8005cf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cfc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005d00:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d04:	1d33      	adds	r3, r6, #4
 8005d06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d08:	6838      	ldr	r0, [r7, #0]
 8005d0a:	f005 ff41 	bl	800bb90 <USB_DevInit>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d005      	beq.n	8005d20 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2202      	movs	r2, #2
 8005d18:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e014      	b.n	8005d4a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d102      	bne.n	8005d3e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f80b 	bl	8005d54 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f006 f8fb 	bl	800bf3e <USB_DevDisconnect>

  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005d54 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d82:	4b05      	ldr	r3, [pc, #20]	; (8005d98 <HAL_PCDEx_ActivateLPM+0x44>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3714      	adds	r7, #20
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	10000003 	.word	0x10000003

08005d9c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005da4:	4b19      	ldr	r3, [pc, #100]	; (8005e0c <HAL_PWREx_ConfigSupply+0x70>)
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	f003 0304 	and.w	r3, r3, #4
 8005dac:	2b04      	cmp	r3, #4
 8005dae:	d00a      	beq.n	8005dc6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005db0:	4b16      	ldr	r3, [pc, #88]	; (8005e0c <HAL_PWREx_ConfigSupply+0x70>)
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f003 0307 	and.w	r3, r3, #7
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d001      	beq.n	8005dc2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e01f      	b.n	8005e02 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	e01d      	b.n	8005e02 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005dc6:	4b11      	ldr	r3, [pc, #68]	; (8005e0c <HAL_PWREx_ConfigSupply+0x70>)
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f023 0207 	bic.w	r2, r3, #7
 8005dce:	490f      	ldr	r1, [pc, #60]	; (8005e0c <HAL_PWREx_ConfigSupply+0x70>)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005dd6:	f7fd f987 	bl	80030e8 <HAL_GetTick>
 8005dda:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ddc:	e009      	b.n	8005df2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005dde:	f7fd f983 	bl	80030e8 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dec:	d901      	bls.n	8005df2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e007      	b.n	8005e02 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005df2:	4b06      	ldr	r3, [pc, #24]	; (8005e0c <HAL_PWREx_ConfigSupply+0x70>)
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dfe:	d1ee      	bne.n	8005dde <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	58024800 	.word	0x58024800

08005e10 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005e10:	b480      	push	{r7}
 8005e12:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005e14:	4b05      	ldr	r3, [pc, #20]	; (8005e2c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	4a04      	ldr	r2, [pc, #16]	; (8005e2c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005e1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e1e:	60d3      	str	r3, [r2, #12]
}
 8005e20:	bf00      	nop
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	58024800 	.word	0x58024800

08005e30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b08c      	sub	sp, #48	; 0x30
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d102      	bne.n	8005e44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	f000 bc1c 	b.w	800667c <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 8087 	beq.w	8005f60 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e52:	4b9e      	ldr	r3, [pc, #632]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e5c:	4b9b      	ldr	r3, [pc, #620]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8005e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e60:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e64:	2b10      	cmp	r3, #16
 8005e66:	d007      	beq.n	8005e78 <HAL_RCC_OscConfig+0x48>
 8005e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6a:	2b18      	cmp	r3, #24
 8005e6c:	d110      	bne.n	8005e90 <HAL_RCC_OscConfig+0x60>
 8005e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e70:	f003 0303 	and.w	r3, r3, #3
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d10b      	bne.n	8005e90 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e78:	4b94      	ldr	r3, [pc, #592]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d06c      	beq.n	8005f5e <HAL_RCC_OscConfig+0x12e>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d168      	bne.n	8005f5e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e3f5      	b.n	800667c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e98:	d106      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x78>
 8005e9a:	4b8c      	ldr	r3, [pc, #560]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a8b      	ldr	r2, [pc, #556]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8005ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ea4:	6013      	str	r3, [r2, #0]
 8005ea6:	e02e      	b.n	8005f06 <HAL_RCC_OscConfig+0xd6>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10c      	bne.n	8005eca <HAL_RCC_OscConfig+0x9a>
 8005eb0:	4b86      	ldr	r3, [pc, #536]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a85      	ldr	r2, [pc, #532]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8005eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eba:	6013      	str	r3, [r2, #0]
 8005ebc:	4b83      	ldr	r3, [pc, #524]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a82      	ldr	r2, [pc, #520]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8005ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ec6:	6013      	str	r3, [r2, #0]
 8005ec8:	e01d      	b.n	8005f06 <HAL_RCC_OscConfig+0xd6>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ed2:	d10c      	bne.n	8005eee <HAL_RCC_OscConfig+0xbe>
 8005ed4:	4b7d      	ldr	r3, [pc, #500]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a7c      	ldr	r2, [pc, #496]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8005eda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ede:	6013      	str	r3, [r2, #0]
 8005ee0:	4b7a      	ldr	r3, [pc, #488]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a79      	ldr	r2, [pc, #484]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8005ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	e00b      	b.n	8005f06 <HAL_RCC_OscConfig+0xd6>
 8005eee:	4b77      	ldr	r3, [pc, #476]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a76      	ldr	r2, [pc, #472]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8005ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ef8:	6013      	str	r3, [r2, #0]
 8005efa:	4b74      	ldr	r3, [pc, #464]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a73      	ldr	r2, [pc, #460]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8005f00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f04:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d013      	beq.n	8005f36 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f0e:	f7fd f8eb 	bl	80030e8 <HAL_GetTick>
 8005f12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f14:	e008      	b.n	8005f28 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f16:	f7fd f8e7 	bl	80030e8 <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	2b64      	cmp	r3, #100	; 0x64
 8005f22:	d901      	bls.n	8005f28 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e3a9      	b.n	800667c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f28:	4b68      	ldr	r3, [pc, #416]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d0f0      	beq.n	8005f16 <HAL_RCC_OscConfig+0xe6>
 8005f34:	e014      	b.n	8005f60 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f36:	f7fd f8d7 	bl	80030e8 <HAL_GetTick>
 8005f3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f3c:	e008      	b.n	8005f50 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f3e:	f7fd f8d3 	bl	80030e8 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	2b64      	cmp	r3, #100	; 0x64
 8005f4a:	d901      	bls.n	8005f50 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e395      	b.n	800667c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f50:	4b5e      	ldr	r3, [pc, #376]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1f0      	bne.n	8005f3e <HAL_RCC_OscConfig+0x10e>
 8005f5c:	e000      	b.n	8005f60 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f5e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 80ca 	beq.w	8006102 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f6e:	4b57      	ldr	r3, [pc, #348]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f76:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f78:	4b54      	ldr	r3, [pc, #336]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8005f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d007      	beq.n	8005f94 <HAL_RCC_OscConfig+0x164>
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	2b18      	cmp	r3, #24
 8005f88:	d156      	bne.n	8006038 <HAL_RCC_OscConfig+0x208>
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	f003 0303 	and.w	r3, r3, #3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d151      	bne.n	8006038 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f94:	4b4d      	ldr	r3, [pc, #308]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0304 	and.w	r3, r3, #4
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d005      	beq.n	8005fac <HAL_RCC_OscConfig+0x17c>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e367      	b.n	800667c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005fac:	4b47      	ldr	r3, [pc, #284]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f023 0219 	bic.w	r2, r3, #25
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	4944      	ldr	r1, [pc, #272]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005fbe:	f7fd f893 	bl	80030e8 <HAL_GetTick>
 8005fc2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fc4:	e008      	b.n	8005fd8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fc6:	f7fd f88f 	bl	80030e8 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d901      	bls.n	8005fd8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e351      	b.n	800667c <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fd8:	4b3c      	ldr	r3, [pc, #240]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d0f0      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fe4:	f7fd f8b0 	bl	8003148 <HAL_GetREVID>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	f241 0203 	movw	r2, #4099	; 0x1003
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d817      	bhi.n	8006022 <HAL_RCC_OscConfig+0x1f2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	2b40      	cmp	r3, #64	; 0x40
 8005ff8:	d108      	bne.n	800600c <HAL_RCC_OscConfig+0x1dc>
 8005ffa:	4b34      	ldr	r3, [pc, #208]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006002:	4a32      	ldr	r2, [pc, #200]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8006004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006008:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800600a:	e07a      	b.n	8006102 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800600c:	4b2f      	ldr	r3, [pc, #188]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	031b      	lsls	r3, r3, #12
 800601a:	492c      	ldr	r1, [pc, #176]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 800601c:	4313      	orrs	r3, r2
 800601e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006020:	e06f      	b.n	8006102 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006022:	4b2a      	ldr	r3, [pc, #168]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	061b      	lsls	r3, r3, #24
 8006030:	4926      	ldr	r1, [pc, #152]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8006032:	4313      	orrs	r3, r2
 8006034:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006036:	e064      	b.n	8006102 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d047      	beq.n	80060d0 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006040:	4b22      	ldr	r3, [pc, #136]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f023 0219 	bic.w	r2, r3, #25
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	491f      	ldr	r1, [pc, #124]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 800604e:	4313      	orrs	r3, r2
 8006050:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006052:	f7fd f849 	bl	80030e8 <HAL_GetTick>
 8006056:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006058:	e008      	b.n	800606c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800605a:	f7fd f845 	bl	80030e8 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	2b02      	cmp	r3, #2
 8006066:	d901      	bls.n	800606c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e307      	b.n	800667c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800606c:	4b17      	ldr	r3, [pc, #92]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0304 	and.w	r3, r3, #4
 8006074:	2b00      	cmp	r3, #0
 8006076:	d0f0      	beq.n	800605a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006078:	f7fd f866 	bl	8003148 <HAL_GetREVID>
 800607c:	4603      	mov	r3, r0
 800607e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006082:	4293      	cmp	r3, r2
 8006084:	d817      	bhi.n	80060b6 <HAL_RCC_OscConfig+0x286>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	2b40      	cmp	r3, #64	; 0x40
 800608c:	d108      	bne.n	80060a0 <HAL_RCC_OscConfig+0x270>
 800608e:	4b0f      	ldr	r3, [pc, #60]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006096:	4a0d      	ldr	r2, [pc, #52]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 8006098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800609c:	6053      	str	r3, [r2, #4]
 800609e:	e030      	b.n	8006102 <HAL_RCC_OscConfig+0x2d2>
 80060a0:	4b0a      	ldr	r3, [pc, #40]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	031b      	lsls	r3, r3, #12
 80060ae:	4907      	ldr	r1, [pc, #28]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	604b      	str	r3, [r1, #4]
 80060b4:	e025      	b.n	8006102 <HAL_RCC_OscConfig+0x2d2>
 80060b6:	4b05      	ldr	r3, [pc, #20]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	061b      	lsls	r3, r3, #24
 80060c4:	4901      	ldr	r1, [pc, #4]	; (80060cc <HAL_RCC_OscConfig+0x29c>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	604b      	str	r3, [r1, #4]
 80060ca:	e01a      	b.n	8006102 <HAL_RCC_OscConfig+0x2d2>
 80060cc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060d0:	4b9e      	ldr	r3, [pc, #632]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a9d      	ldr	r2, [pc, #628]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 80060d6:	f023 0301 	bic.w	r3, r3, #1
 80060da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060dc:	f7fd f804 	bl	80030e8 <HAL_GetTick>
 80060e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060e2:	e008      	b.n	80060f6 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060e4:	f7fd f800 	bl	80030e8 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e2c2      	b.n	800667c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060f6:	4b95      	ldr	r3, [pc, #596]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0304 	and.w	r3, r3, #4
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1f0      	bne.n	80060e4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0310 	and.w	r3, r3, #16
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 80a9 	beq.w	8006262 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006110:	4b8e      	ldr	r3, [pc, #568]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006118:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800611a:	4b8c      	ldr	r3, [pc, #560]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 800611c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	2b08      	cmp	r3, #8
 8006124:	d007      	beq.n	8006136 <HAL_RCC_OscConfig+0x306>
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	2b18      	cmp	r3, #24
 800612a:	d13a      	bne.n	80061a2 <HAL_RCC_OscConfig+0x372>
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	f003 0303 	and.w	r3, r3, #3
 8006132:	2b01      	cmp	r3, #1
 8006134:	d135      	bne.n	80061a2 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006136:	4b85      	ldr	r3, [pc, #532]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800613e:	2b00      	cmp	r3, #0
 8006140:	d005      	beq.n	800614e <HAL_RCC_OscConfig+0x31e>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	69db      	ldr	r3, [r3, #28]
 8006146:	2b80      	cmp	r3, #128	; 0x80
 8006148:	d001      	beq.n	800614e <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e296      	b.n	800667c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800614e:	f7fc fffb 	bl	8003148 <HAL_GetREVID>
 8006152:	4603      	mov	r3, r0
 8006154:	f241 0203 	movw	r2, #4099	; 0x1003
 8006158:	4293      	cmp	r3, r2
 800615a:	d817      	bhi.n	800618c <HAL_RCC_OscConfig+0x35c>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	2b20      	cmp	r3, #32
 8006162:	d108      	bne.n	8006176 <HAL_RCC_OscConfig+0x346>
 8006164:	4b79      	ldr	r3, [pc, #484]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800616c:	4a77      	ldr	r2, [pc, #476]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 800616e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006172:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006174:	e075      	b.n	8006262 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006176:	4b75      	ldr	r3, [pc, #468]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	069b      	lsls	r3, r3, #26
 8006184:	4971      	ldr	r1, [pc, #452]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 8006186:	4313      	orrs	r3, r2
 8006188:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800618a:	e06a      	b.n	8006262 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800618c:	4b6f      	ldr	r3, [pc, #444]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	061b      	lsls	r3, r3, #24
 800619a:	496c      	ldr	r1, [pc, #432]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 800619c:	4313      	orrs	r3, r2
 800619e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061a0:	e05f      	b.n	8006262 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d042      	beq.n	8006230 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80061aa:	4b68      	ldr	r3, [pc, #416]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a67      	ldr	r2, [pc, #412]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 80061b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b6:	f7fc ff97 	bl	80030e8 <HAL_GetTick>
 80061ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061bc:	e008      	b.n	80061d0 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80061be:	f7fc ff93 	bl	80030e8 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d901      	bls.n	80061d0 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e255      	b.n	800667c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061d0:	4b5e      	ldr	r3, [pc, #376]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d0f0      	beq.n	80061be <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061dc:	f7fc ffb4 	bl	8003148 <HAL_GetREVID>
 80061e0:	4603      	mov	r3, r0
 80061e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d817      	bhi.n	800621a <HAL_RCC_OscConfig+0x3ea>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	2b20      	cmp	r3, #32
 80061f0:	d108      	bne.n	8006204 <HAL_RCC_OscConfig+0x3d4>
 80061f2:	4b56      	ldr	r3, [pc, #344]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80061fa:	4a54      	ldr	r2, [pc, #336]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 80061fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006200:	6053      	str	r3, [r2, #4]
 8006202:	e02e      	b.n	8006262 <HAL_RCC_OscConfig+0x432>
 8006204:	4b51      	ldr	r3, [pc, #324]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	069b      	lsls	r3, r3, #26
 8006212:	494e      	ldr	r1, [pc, #312]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 8006214:	4313      	orrs	r3, r2
 8006216:	604b      	str	r3, [r1, #4]
 8006218:	e023      	b.n	8006262 <HAL_RCC_OscConfig+0x432>
 800621a:	4b4c      	ldr	r3, [pc, #304]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	061b      	lsls	r3, r3, #24
 8006228:	4948      	ldr	r1, [pc, #288]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 800622a:	4313      	orrs	r3, r2
 800622c:	60cb      	str	r3, [r1, #12]
 800622e:	e018      	b.n	8006262 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006230:	4b46      	ldr	r3, [pc, #280]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a45      	ldr	r2, [pc, #276]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 8006236:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800623a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800623c:	f7fc ff54 	bl	80030e8 <HAL_GetTick>
 8006240:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006242:	e008      	b.n	8006256 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006244:	f7fc ff50 	bl	80030e8 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	2b02      	cmp	r3, #2
 8006250:	d901      	bls.n	8006256 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e212      	b.n	800667c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006256:	4b3d      	ldr	r3, [pc, #244]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1f0      	bne.n	8006244 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0308 	and.w	r3, r3, #8
 800626a:	2b00      	cmp	r3, #0
 800626c:	d036      	beq.n	80062dc <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d019      	beq.n	80062aa <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006276:	4b35      	ldr	r3, [pc, #212]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 8006278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800627a:	4a34      	ldr	r2, [pc, #208]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 800627c:	f043 0301 	orr.w	r3, r3, #1
 8006280:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006282:	f7fc ff31 	bl	80030e8 <HAL_GetTick>
 8006286:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006288:	e008      	b.n	800629c <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800628a:	f7fc ff2d 	bl	80030e8 <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	2b02      	cmp	r3, #2
 8006296:	d901      	bls.n	800629c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e1ef      	b.n	800667c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800629c:	4b2b      	ldr	r3, [pc, #172]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 800629e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062a0:	f003 0302 	and.w	r3, r3, #2
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d0f0      	beq.n	800628a <HAL_RCC_OscConfig+0x45a>
 80062a8:	e018      	b.n	80062dc <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062aa:	4b28      	ldr	r3, [pc, #160]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 80062ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ae:	4a27      	ldr	r2, [pc, #156]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 80062b0:	f023 0301 	bic.w	r3, r3, #1
 80062b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062b6:	f7fc ff17 	bl	80030e8 <HAL_GetTick>
 80062ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062bc:	e008      	b.n	80062d0 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062be:	f7fc ff13 	bl	80030e8 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d901      	bls.n	80062d0 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e1d5      	b.n	800667c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062d0:	4b1e      	ldr	r3, [pc, #120]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 80062d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062d4:	f003 0302 	and.w	r3, r3, #2
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1f0      	bne.n	80062be <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0320 	and.w	r3, r3, #32
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d039      	beq.n	800635c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d019      	beq.n	8006324 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80062f0:	4b16      	ldr	r3, [pc, #88]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a15      	ldr	r2, [pc, #84]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 80062f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80062fc:	f7fc fef4 	bl	80030e8 <HAL_GetTick>
 8006300:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006302:	e008      	b.n	8006316 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006304:	f7fc fef0 	bl	80030e8 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b02      	cmp	r3, #2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e1b2      	b.n	800667c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006316:	4b0d      	ldr	r3, [pc, #52]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d0f0      	beq.n	8006304 <HAL_RCC_OscConfig+0x4d4>
 8006322:	e01b      	b.n	800635c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006324:	4b09      	ldr	r3, [pc, #36]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a08      	ldr	r2, [pc, #32]	; (800634c <HAL_RCC_OscConfig+0x51c>)
 800632a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800632e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006330:	f7fc feda 	bl	80030e8 <HAL_GetTick>
 8006334:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006336:	e00b      	b.n	8006350 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006338:	f7fc fed6 	bl	80030e8 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	2b02      	cmp	r3, #2
 8006344:	d904      	bls.n	8006350 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e198      	b.n	800667c <HAL_RCC_OscConfig+0x84c>
 800634a:	bf00      	nop
 800634c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006350:	4ba3      	ldr	r3, [pc, #652]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1ed      	bne.n	8006338 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0304 	and.w	r3, r3, #4
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 8081 	beq.w	800646c <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800636a:	4b9e      	ldr	r3, [pc, #632]	; (80065e4 <HAL_RCC_OscConfig+0x7b4>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a9d      	ldr	r2, [pc, #628]	; (80065e4 <HAL_RCC_OscConfig+0x7b4>)
 8006370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006374:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006376:	f7fc feb7 	bl	80030e8 <HAL_GetTick>
 800637a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800637c:	e008      	b.n	8006390 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800637e:	f7fc feb3 	bl	80030e8 <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	2b64      	cmp	r3, #100	; 0x64
 800638a:	d901      	bls.n	8006390 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e175      	b.n	800667c <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006390:	4b94      	ldr	r3, [pc, #592]	; (80065e4 <HAL_RCC_OscConfig+0x7b4>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006398:	2b00      	cmp	r3, #0
 800639a:	d0f0      	beq.n	800637e <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d106      	bne.n	80063b2 <HAL_RCC_OscConfig+0x582>
 80063a4:	4b8e      	ldr	r3, [pc, #568]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 80063a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a8:	4a8d      	ldr	r2, [pc, #564]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 80063aa:	f043 0301 	orr.w	r3, r3, #1
 80063ae:	6713      	str	r3, [r2, #112]	; 0x70
 80063b0:	e02d      	b.n	800640e <HAL_RCC_OscConfig+0x5de>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10c      	bne.n	80063d4 <HAL_RCC_OscConfig+0x5a4>
 80063ba:	4b89      	ldr	r3, [pc, #548]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 80063bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063be:	4a88      	ldr	r2, [pc, #544]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 80063c0:	f023 0301 	bic.w	r3, r3, #1
 80063c4:	6713      	str	r3, [r2, #112]	; 0x70
 80063c6:	4b86      	ldr	r3, [pc, #536]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 80063c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ca:	4a85      	ldr	r2, [pc, #532]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 80063cc:	f023 0304 	bic.w	r3, r3, #4
 80063d0:	6713      	str	r3, [r2, #112]	; 0x70
 80063d2:	e01c      	b.n	800640e <HAL_RCC_OscConfig+0x5de>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	2b05      	cmp	r3, #5
 80063da:	d10c      	bne.n	80063f6 <HAL_RCC_OscConfig+0x5c6>
 80063dc:	4b80      	ldr	r3, [pc, #512]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 80063de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e0:	4a7f      	ldr	r2, [pc, #508]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 80063e2:	f043 0304 	orr.w	r3, r3, #4
 80063e6:	6713      	str	r3, [r2, #112]	; 0x70
 80063e8:	4b7d      	ldr	r3, [pc, #500]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 80063ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ec:	4a7c      	ldr	r2, [pc, #496]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 80063ee:	f043 0301 	orr.w	r3, r3, #1
 80063f2:	6713      	str	r3, [r2, #112]	; 0x70
 80063f4:	e00b      	b.n	800640e <HAL_RCC_OscConfig+0x5de>
 80063f6:	4b7a      	ldr	r3, [pc, #488]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 80063f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fa:	4a79      	ldr	r2, [pc, #484]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 80063fc:	f023 0301 	bic.w	r3, r3, #1
 8006400:	6713      	str	r3, [r2, #112]	; 0x70
 8006402:	4b77      	ldr	r3, [pc, #476]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 8006404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006406:	4a76      	ldr	r2, [pc, #472]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 8006408:	f023 0304 	bic.w	r3, r3, #4
 800640c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d015      	beq.n	8006442 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006416:	f7fc fe67 	bl	80030e8 <HAL_GetTick>
 800641a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800641c:	e00a      	b.n	8006434 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800641e:	f7fc fe63 	bl	80030e8 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	f241 3288 	movw	r2, #5000	; 0x1388
 800642c:	4293      	cmp	r3, r2
 800642e:	d901      	bls.n	8006434 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e123      	b.n	800667c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006434:	4b6a      	ldr	r3, [pc, #424]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 8006436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d0ee      	beq.n	800641e <HAL_RCC_OscConfig+0x5ee>
 8006440:	e014      	b.n	800646c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006442:	f7fc fe51 	bl	80030e8 <HAL_GetTick>
 8006446:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006448:	e00a      	b.n	8006460 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800644a:	f7fc fe4d 	bl	80030e8 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	f241 3288 	movw	r2, #5000	; 0x1388
 8006458:	4293      	cmp	r3, r2
 800645a:	d901      	bls.n	8006460 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e10d      	b.n	800667c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006460:	4b5f      	ldr	r3, [pc, #380]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 8006462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006464:	f003 0302 	and.w	r3, r3, #2
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1ee      	bne.n	800644a <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006470:	2b00      	cmp	r3, #0
 8006472:	f000 8102 	beq.w	800667a <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006476:	4b5a      	ldr	r3, [pc, #360]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800647e:	2b18      	cmp	r3, #24
 8006480:	f000 80bd 	beq.w	80065fe <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	2b02      	cmp	r3, #2
 800648a:	f040 8095 	bne.w	80065b8 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800648e:	4b54      	ldr	r3, [pc, #336]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a53      	ldr	r2, [pc, #332]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 8006494:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800649a:	f7fc fe25 	bl	80030e8 <HAL_GetTick>
 800649e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064a0:	e008      	b.n	80064b4 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064a2:	f7fc fe21 	bl	80030e8 <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d901      	bls.n	80064b4 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e0e3      	b.n	800667c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064b4:	4b4a      	ldr	r3, [pc, #296]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1f0      	bne.n	80064a2 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064c0:	4b47      	ldr	r3, [pc, #284]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 80064c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064c4:	4b48      	ldr	r3, [pc, #288]	; (80065e8 <HAL_RCC_OscConfig+0x7b8>)
 80064c6:	4013      	ands	r3, r2
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80064d0:	0112      	lsls	r2, r2, #4
 80064d2:	430a      	orrs	r2, r1
 80064d4:	4942      	ldr	r1, [pc, #264]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	628b      	str	r3, [r1, #40]	; 0x28
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064de:	3b01      	subs	r3, #1
 80064e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e8:	3b01      	subs	r3, #1
 80064ea:	025b      	lsls	r3, r3, #9
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	431a      	orrs	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f4:	3b01      	subs	r3, #1
 80064f6:	041b      	lsls	r3, r3, #16
 80064f8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80064fc:	431a      	orrs	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006502:	3b01      	subs	r3, #1
 8006504:	061b      	lsls	r3, r3, #24
 8006506:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800650a:	4935      	ldr	r1, [pc, #212]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 800650c:	4313      	orrs	r3, r2
 800650e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006510:	4b33      	ldr	r3, [pc, #204]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 8006512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006514:	4a32      	ldr	r2, [pc, #200]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 8006516:	f023 0301 	bic.w	r3, r3, #1
 800651a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800651c:	4b30      	ldr	r3, [pc, #192]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 800651e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006520:	4b32      	ldr	r3, [pc, #200]	; (80065ec <HAL_RCC_OscConfig+0x7bc>)
 8006522:	4013      	ands	r3, r2
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006528:	00d2      	lsls	r2, r2, #3
 800652a:	492d      	ldr	r1, [pc, #180]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 800652c:	4313      	orrs	r3, r2
 800652e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006530:	4b2b      	ldr	r3, [pc, #172]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 8006532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006534:	f023 020c 	bic.w	r2, r3, #12
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653c:	4928      	ldr	r1, [pc, #160]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 800653e:	4313      	orrs	r3, r2
 8006540:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006542:	4b27      	ldr	r3, [pc, #156]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 8006544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006546:	f023 0202 	bic.w	r2, r3, #2
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800654e:	4924      	ldr	r1, [pc, #144]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 8006550:	4313      	orrs	r3, r2
 8006552:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006554:	4b22      	ldr	r3, [pc, #136]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006558:	4a21      	ldr	r2, [pc, #132]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 800655a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800655e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006560:	4b1f      	ldr	r3, [pc, #124]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 8006562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006564:	4a1e      	ldr	r2, [pc, #120]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 8006566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800656a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800656c:	4b1c      	ldr	r3, [pc, #112]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 800656e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006570:	4a1b      	ldr	r2, [pc, #108]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 8006572:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006576:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006578:	4b19      	ldr	r3, [pc, #100]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 800657a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657c:	4a18      	ldr	r2, [pc, #96]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 800657e:	f043 0301 	orr.w	r3, r3, #1
 8006582:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006584:	4b16      	ldr	r3, [pc, #88]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a15      	ldr	r2, [pc, #84]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 800658a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800658e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006590:	f7fc fdaa 	bl	80030e8 <HAL_GetTick>
 8006594:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006596:	e008      	b.n	80065aa <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006598:	f7fc fda6 	bl	80030e8 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e068      	b.n	800667c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065aa:	4b0d      	ldr	r3, [pc, #52]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d0f0      	beq.n	8006598 <HAL_RCC_OscConfig+0x768>
 80065b6:	e060      	b.n	800667a <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065b8:	4b09      	ldr	r3, [pc, #36]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a08      	ldr	r2, [pc, #32]	; (80065e0 <HAL_RCC_OscConfig+0x7b0>)
 80065be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c4:	f7fc fd90 	bl	80030e8 <HAL_GetTick>
 80065c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065ca:	e011      	b.n	80065f0 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065cc:	f7fc fd8c 	bl	80030e8 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d90a      	bls.n	80065f0 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e04e      	b.n	800667c <HAL_RCC_OscConfig+0x84c>
 80065de:	bf00      	nop
 80065e0:	58024400 	.word	0x58024400
 80065e4:	58024800 	.word	0x58024800
 80065e8:	fffffc0c 	.word	0xfffffc0c
 80065ec:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065f0:	4b24      	ldr	r3, [pc, #144]	; (8006684 <HAL_RCC_OscConfig+0x854>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1e7      	bne.n	80065cc <HAL_RCC_OscConfig+0x79c>
 80065fc:	e03d      	b.n	800667a <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80065fe:	4b21      	ldr	r3, [pc, #132]	; (8006684 <HAL_RCC_OscConfig+0x854>)
 8006600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006602:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006604:	4b1f      	ldr	r3, [pc, #124]	; (8006684 <HAL_RCC_OscConfig+0x854>)
 8006606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006608:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660e:	2b01      	cmp	r3, #1
 8006610:	d031      	beq.n	8006676 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	f003 0203 	and.w	r2, r3, #3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800661c:	429a      	cmp	r2, r3
 800661e:	d12a      	bne.n	8006676 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	091b      	lsrs	r3, r3, #4
 8006624:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800662c:	429a      	cmp	r2, r3
 800662e:	d122      	bne.n	8006676 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800663c:	429a      	cmp	r2, r3
 800663e:	d11a      	bne.n	8006676 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	0a5b      	lsrs	r3, r3, #9
 8006644:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800664c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800664e:	429a      	cmp	r2, r3
 8006650:	d111      	bne.n	8006676 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	0c1b      	lsrs	r3, r3, #16
 8006656:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006660:	429a      	cmp	r2, r3
 8006662:	d108      	bne.n	8006676 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	0e1b      	lsrs	r3, r3, #24
 8006668:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006670:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006672:	429a      	cmp	r2, r3
 8006674:	d001      	beq.n	800667a <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e000      	b.n	800667c <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3730      	adds	r7, #48	; 0x30
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	58024400 	.word	0x58024400

08006688 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d101      	bne.n	800669c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e19c      	b.n	80069d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800669c:	4b8a      	ldr	r3, [pc, #552]	; (80068c8 <HAL_RCC_ClockConfig+0x240>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 030f 	and.w	r3, r3, #15
 80066a4:	683a      	ldr	r2, [r7, #0]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d910      	bls.n	80066cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066aa:	4b87      	ldr	r3, [pc, #540]	; (80068c8 <HAL_RCC_ClockConfig+0x240>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f023 020f 	bic.w	r2, r3, #15
 80066b2:	4985      	ldr	r1, [pc, #532]	; (80068c8 <HAL_RCC_ClockConfig+0x240>)
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ba:	4b83      	ldr	r3, [pc, #524]	; (80068c8 <HAL_RCC_ClockConfig+0x240>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 030f 	and.w	r3, r3, #15
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d001      	beq.n	80066cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e184      	b.n	80069d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0304 	and.w	r3, r3, #4
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d010      	beq.n	80066fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	691a      	ldr	r2, [r3, #16]
 80066dc:	4b7b      	ldr	r3, [pc, #492]	; (80068cc <HAL_RCC_ClockConfig+0x244>)
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d908      	bls.n	80066fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80066e8:	4b78      	ldr	r3, [pc, #480]	; (80068cc <HAL_RCC_ClockConfig+0x244>)
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	4975      	ldr	r1, [pc, #468]	; (80068cc <HAL_RCC_ClockConfig+0x244>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0308 	and.w	r3, r3, #8
 8006702:	2b00      	cmp	r3, #0
 8006704:	d010      	beq.n	8006728 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	695a      	ldr	r2, [r3, #20]
 800670a:	4b70      	ldr	r3, [pc, #448]	; (80068cc <HAL_RCC_ClockConfig+0x244>)
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006712:	429a      	cmp	r2, r3
 8006714:	d908      	bls.n	8006728 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006716:	4b6d      	ldr	r3, [pc, #436]	; (80068cc <HAL_RCC_ClockConfig+0x244>)
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	496a      	ldr	r1, [pc, #424]	; (80068cc <HAL_RCC_ClockConfig+0x244>)
 8006724:	4313      	orrs	r3, r2
 8006726:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0310 	and.w	r3, r3, #16
 8006730:	2b00      	cmp	r3, #0
 8006732:	d010      	beq.n	8006756 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	699a      	ldr	r2, [r3, #24]
 8006738:	4b64      	ldr	r3, [pc, #400]	; (80068cc <HAL_RCC_ClockConfig+0x244>)
 800673a:	69db      	ldr	r3, [r3, #28]
 800673c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006740:	429a      	cmp	r2, r3
 8006742:	d908      	bls.n	8006756 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006744:	4b61      	ldr	r3, [pc, #388]	; (80068cc <HAL_RCC_ClockConfig+0x244>)
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	495e      	ldr	r1, [pc, #376]	; (80068cc <HAL_RCC_ClockConfig+0x244>)
 8006752:	4313      	orrs	r3, r2
 8006754:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0320 	and.w	r3, r3, #32
 800675e:	2b00      	cmp	r3, #0
 8006760:	d010      	beq.n	8006784 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	69da      	ldr	r2, [r3, #28]
 8006766:	4b59      	ldr	r3, [pc, #356]	; (80068cc <HAL_RCC_ClockConfig+0x244>)
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800676e:	429a      	cmp	r2, r3
 8006770:	d908      	bls.n	8006784 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006772:	4b56      	ldr	r3, [pc, #344]	; (80068cc <HAL_RCC_ClockConfig+0x244>)
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	4953      	ldr	r1, [pc, #332]	; (80068cc <HAL_RCC_ClockConfig+0x244>)
 8006780:	4313      	orrs	r3, r2
 8006782:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0302 	and.w	r3, r3, #2
 800678c:	2b00      	cmp	r3, #0
 800678e:	d010      	beq.n	80067b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	68da      	ldr	r2, [r3, #12]
 8006794:	4b4d      	ldr	r3, [pc, #308]	; (80068cc <HAL_RCC_ClockConfig+0x244>)
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	f003 030f 	and.w	r3, r3, #15
 800679c:	429a      	cmp	r2, r3
 800679e:	d908      	bls.n	80067b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067a0:	4b4a      	ldr	r3, [pc, #296]	; (80068cc <HAL_RCC_ClockConfig+0x244>)
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	f023 020f 	bic.w	r2, r3, #15
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	4947      	ldr	r1, [pc, #284]	; (80068cc <HAL_RCC_ClockConfig+0x244>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d055      	beq.n	800686a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80067be:	4b43      	ldr	r3, [pc, #268]	; (80068cc <HAL_RCC_ClockConfig+0x244>)
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	4940      	ldr	r1, [pc, #256]	; (80068cc <HAL_RCC_ClockConfig+0x244>)
 80067cc:	4313      	orrs	r3, r2
 80067ce:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d107      	bne.n	80067e8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80067d8:	4b3c      	ldr	r3, [pc, #240]	; (80068cc <HAL_RCC_ClockConfig+0x244>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d121      	bne.n	8006828 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e0f6      	b.n	80069d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	2b03      	cmp	r3, #3
 80067ee:	d107      	bne.n	8006800 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80067f0:	4b36      	ldr	r3, [pc, #216]	; (80068cc <HAL_RCC_ClockConfig+0x244>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d115      	bne.n	8006828 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e0ea      	b.n	80069d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d107      	bne.n	8006818 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006808:	4b30      	ldr	r3, [pc, #192]	; (80068cc <HAL_RCC_ClockConfig+0x244>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006810:	2b00      	cmp	r3, #0
 8006812:	d109      	bne.n	8006828 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e0de      	b.n	80069d6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006818:	4b2c      	ldr	r3, [pc, #176]	; (80068cc <HAL_RCC_ClockConfig+0x244>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0304 	and.w	r3, r3, #4
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e0d6      	b.n	80069d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006828:	4b28      	ldr	r3, [pc, #160]	; (80068cc <HAL_RCC_ClockConfig+0x244>)
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	f023 0207 	bic.w	r2, r3, #7
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	4925      	ldr	r1, [pc, #148]	; (80068cc <HAL_RCC_ClockConfig+0x244>)
 8006836:	4313      	orrs	r3, r2
 8006838:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800683a:	f7fc fc55 	bl	80030e8 <HAL_GetTick>
 800683e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006840:	e00a      	b.n	8006858 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006842:	f7fc fc51 	bl	80030e8 <HAL_GetTick>
 8006846:	4602      	mov	r2, r0
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006850:	4293      	cmp	r3, r2
 8006852:	d901      	bls.n	8006858 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e0be      	b.n	80069d6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006858:	4b1c      	ldr	r3, [pc, #112]	; (80068cc <HAL_RCC_ClockConfig+0x244>)
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	00db      	lsls	r3, r3, #3
 8006866:	429a      	cmp	r2, r3
 8006868:	d1eb      	bne.n	8006842 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d010      	beq.n	8006898 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68da      	ldr	r2, [r3, #12]
 800687a:	4b14      	ldr	r3, [pc, #80]	; (80068cc <HAL_RCC_ClockConfig+0x244>)
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	f003 030f 	and.w	r3, r3, #15
 8006882:	429a      	cmp	r2, r3
 8006884:	d208      	bcs.n	8006898 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006886:	4b11      	ldr	r3, [pc, #68]	; (80068cc <HAL_RCC_ClockConfig+0x244>)
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	f023 020f 	bic.w	r2, r3, #15
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	490e      	ldr	r1, [pc, #56]	; (80068cc <HAL_RCC_ClockConfig+0x244>)
 8006894:	4313      	orrs	r3, r2
 8006896:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006898:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <HAL_RCC_ClockConfig+0x240>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 030f 	and.w	r3, r3, #15
 80068a0:	683a      	ldr	r2, [r7, #0]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d214      	bcs.n	80068d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068a6:	4b08      	ldr	r3, [pc, #32]	; (80068c8 <HAL_RCC_ClockConfig+0x240>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f023 020f 	bic.w	r2, r3, #15
 80068ae:	4906      	ldr	r1, [pc, #24]	; (80068c8 <HAL_RCC_ClockConfig+0x240>)
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068b6:	4b04      	ldr	r3, [pc, #16]	; (80068c8 <HAL_RCC_ClockConfig+0x240>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 030f 	and.w	r3, r3, #15
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d005      	beq.n	80068d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e086      	b.n	80069d6 <HAL_RCC_ClockConfig+0x34e>
 80068c8:	52002000 	.word	0x52002000
 80068cc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d010      	beq.n	80068fe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	691a      	ldr	r2, [r3, #16]
 80068e0:	4b3f      	ldr	r3, [pc, #252]	; (80069e0 <HAL_RCC_ClockConfig+0x358>)
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d208      	bcs.n	80068fe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80068ec:	4b3c      	ldr	r3, [pc, #240]	; (80069e0 <HAL_RCC_ClockConfig+0x358>)
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	4939      	ldr	r1, [pc, #228]	; (80069e0 <HAL_RCC_ClockConfig+0x358>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0308 	and.w	r3, r3, #8
 8006906:	2b00      	cmp	r3, #0
 8006908:	d010      	beq.n	800692c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	695a      	ldr	r2, [r3, #20]
 800690e:	4b34      	ldr	r3, [pc, #208]	; (80069e0 <HAL_RCC_ClockConfig+0x358>)
 8006910:	69db      	ldr	r3, [r3, #28]
 8006912:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006916:	429a      	cmp	r2, r3
 8006918:	d208      	bcs.n	800692c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800691a:	4b31      	ldr	r3, [pc, #196]	; (80069e0 <HAL_RCC_ClockConfig+0x358>)
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	492e      	ldr	r1, [pc, #184]	; (80069e0 <HAL_RCC_ClockConfig+0x358>)
 8006928:	4313      	orrs	r3, r2
 800692a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0310 	and.w	r3, r3, #16
 8006934:	2b00      	cmp	r3, #0
 8006936:	d010      	beq.n	800695a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	699a      	ldr	r2, [r3, #24]
 800693c:	4b28      	ldr	r3, [pc, #160]	; (80069e0 <HAL_RCC_ClockConfig+0x358>)
 800693e:	69db      	ldr	r3, [r3, #28]
 8006940:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006944:	429a      	cmp	r2, r3
 8006946:	d208      	bcs.n	800695a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006948:	4b25      	ldr	r3, [pc, #148]	; (80069e0 <HAL_RCC_ClockConfig+0x358>)
 800694a:	69db      	ldr	r3, [r3, #28]
 800694c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	4922      	ldr	r1, [pc, #136]	; (80069e0 <HAL_RCC_ClockConfig+0x358>)
 8006956:	4313      	orrs	r3, r2
 8006958:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0320 	and.w	r3, r3, #32
 8006962:	2b00      	cmp	r3, #0
 8006964:	d010      	beq.n	8006988 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	69da      	ldr	r2, [r3, #28]
 800696a:	4b1d      	ldr	r3, [pc, #116]	; (80069e0 <HAL_RCC_ClockConfig+0x358>)
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006972:	429a      	cmp	r2, r3
 8006974:	d208      	bcs.n	8006988 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006976:	4b1a      	ldr	r3, [pc, #104]	; (80069e0 <HAL_RCC_ClockConfig+0x358>)
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	69db      	ldr	r3, [r3, #28]
 8006982:	4917      	ldr	r1, [pc, #92]	; (80069e0 <HAL_RCC_ClockConfig+0x358>)
 8006984:	4313      	orrs	r3, r2
 8006986:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006988:	f000 f834 	bl	80069f4 <HAL_RCC_GetSysClockFreq>
 800698c:	4602      	mov	r2, r0
 800698e:	4b14      	ldr	r3, [pc, #80]	; (80069e0 <HAL_RCC_ClockConfig+0x358>)
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	0a1b      	lsrs	r3, r3, #8
 8006994:	f003 030f 	and.w	r3, r3, #15
 8006998:	4912      	ldr	r1, [pc, #72]	; (80069e4 <HAL_RCC_ClockConfig+0x35c>)
 800699a:	5ccb      	ldrb	r3, [r1, r3]
 800699c:	f003 031f 	and.w	r3, r3, #31
 80069a0:	fa22 f303 	lsr.w	r3, r2, r3
 80069a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069a6:	4b0e      	ldr	r3, [pc, #56]	; (80069e0 <HAL_RCC_ClockConfig+0x358>)
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	f003 030f 	and.w	r3, r3, #15
 80069ae:	4a0d      	ldr	r2, [pc, #52]	; (80069e4 <HAL_RCC_ClockConfig+0x35c>)
 80069b0:	5cd3      	ldrb	r3, [r2, r3]
 80069b2:	f003 031f 	and.w	r3, r3, #31
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	fa22 f303 	lsr.w	r3, r2, r3
 80069bc:	4a0a      	ldr	r2, [pc, #40]	; (80069e8 <HAL_RCC_ClockConfig+0x360>)
 80069be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80069c0:	4a0a      	ldr	r2, [pc, #40]	; (80069ec <HAL_RCC_ClockConfig+0x364>)
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80069c6:	4b0a      	ldr	r3, [pc, #40]	; (80069f0 <HAL_RCC_ClockConfig+0x368>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fc fb42 	bl	8003054 <HAL_InitTick>
 80069d0:	4603      	mov	r3, r0
 80069d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80069d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3718      	adds	r7, #24
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	58024400 	.word	0x58024400
 80069e4:	0800f8fc 	.word	0x0800f8fc
 80069e8:	24000028 	.word	0x24000028
 80069ec:	24000024 	.word	0x24000024
 80069f0:	2400002c 	.word	0x2400002c

080069f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b089      	sub	sp, #36	; 0x24
 80069f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069fa:	4bb3      	ldr	r3, [pc, #716]	; (8006cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a02:	2b18      	cmp	r3, #24
 8006a04:	f200 8155 	bhi.w	8006cb2 <HAL_RCC_GetSysClockFreq+0x2be>
 8006a08:	a201      	add	r2, pc, #4	; (adr r2, 8006a10 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0e:	bf00      	nop
 8006a10:	08006a75 	.word	0x08006a75
 8006a14:	08006cb3 	.word	0x08006cb3
 8006a18:	08006cb3 	.word	0x08006cb3
 8006a1c:	08006cb3 	.word	0x08006cb3
 8006a20:	08006cb3 	.word	0x08006cb3
 8006a24:	08006cb3 	.word	0x08006cb3
 8006a28:	08006cb3 	.word	0x08006cb3
 8006a2c:	08006cb3 	.word	0x08006cb3
 8006a30:	08006a9b 	.word	0x08006a9b
 8006a34:	08006cb3 	.word	0x08006cb3
 8006a38:	08006cb3 	.word	0x08006cb3
 8006a3c:	08006cb3 	.word	0x08006cb3
 8006a40:	08006cb3 	.word	0x08006cb3
 8006a44:	08006cb3 	.word	0x08006cb3
 8006a48:	08006cb3 	.word	0x08006cb3
 8006a4c:	08006cb3 	.word	0x08006cb3
 8006a50:	08006aa1 	.word	0x08006aa1
 8006a54:	08006cb3 	.word	0x08006cb3
 8006a58:	08006cb3 	.word	0x08006cb3
 8006a5c:	08006cb3 	.word	0x08006cb3
 8006a60:	08006cb3 	.word	0x08006cb3
 8006a64:	08006cb3 	.word	0x08006cb3
 8006a68:	08006cb3 	.word	0x08006cb3
 8006a6c:	08006cb3 	.word	0x08006cb3
 8006a70:	08006aa7 	.word	0x08006aa7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a74:	4b94      	ldr	r3, [pc, #592]	; (8006cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0320 	and.w	r3, r3, #32
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d009      	beq.n	8006a94 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a80:	4b91      	ldr	r3, [pc, #580]	; (8006cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	08db      	lsrs	r3, r3, #3
 8006a86:	f003 0303 	and.w	r3, r3, #3
 8006a8a:	4a90      	ldr	r2, [pc, #576]	; (8006ccc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a90:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006a92:	e111      	b.n	8006cb8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006a94:	4b8d      	ldr	r3, [pc, #564]	; (8006ccc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a96:	61bb      	str	r3, [r7, #24]
    break;
 8006a98:	e10e      	b.n	8006cb8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006a9a:	4b8d      	ldr	r3, [pc, #564]	; (8006cd0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006a9c:	61bb      	str	r3, [r7, #24]
    break;
 8006a9e:	e10b      	b.n	8006cb8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006aa0:	4b8c      	ldr	r3, [pc, #560]	; (8006cd4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006aa2:	61bb      	str	r3, [r7, #24]
    break;
 8006aa4:	e108      	b.n	8006cb8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006aa6:	4b88      	ldr	r3, [pc, #544]	; (8006cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aaa:	f003 0303 	and.w	r3, r3, #3
 8006aae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006ab0:	4b85      	ldr	r3, [pc, #532]	; (8006cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab4:	091b      	lsrs	r3, r3, #4
 8006ab6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006aba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006abc:	4b82      	ldr	r3, [pc, #520]	; (8006cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006ac6:	4b80      	ldr	r3, [pc, #512]	; (8006cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aca:	08db      	lsrs	r3, r3, #3
 8006acc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	fb02 f303 	mul.w	r3, r2, r3
 8006ad6:	ee07 3a90 	vmov	s15, r3
 8006ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ade:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 80e1 	beq.w	8006cac <HAL_RCC_GetSysClockFreq+0x2b8>
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	f000 8083 	beq.w	8006bf8 <HAL_RCC_GetSysClockFreq+0x204>
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	f200 80a1 	bhi.w	8006c3c <HAL_RCC_GetSysClockFreq+0x248>
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d003      	beq.n	8006b08 <HAL_RCC_GetSysClockFreq+0x114>
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d056      	beq.n	8006bb4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006b06:	e099      	b.n	8006c3c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b08:	4b6f      	ldr	r3, [pc, #444]	; (8006cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0320 	and.w	r3, r3, #32
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d02d      	beq.n	8006b70 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b14:	4b6c      	ldr	r3, [pc, #432]	; (8006cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	08db      	lsrs	r3, r3, #3
 8006b1a:	f003 0303 	and.w	r3, r3, #3
 8006b1e:	4a6b      	ldr	r2, [pc, #428]	; (8006ccc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b20:	fa22 f303 	lsr.w	r3, r2, r3
 8006b24:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	ee07 3a90 	vmov	s15, r3
 8006b2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	ee07 3a90 	vmov	s15, r3
 8006b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b3e:	4b62      	ldr	r3, [pc, #392]	; (8006cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b46:	ee07 3a90 	vmov	s15, r3
 8006b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b52:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006cd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006b6e:	e087      	b.n	8006c80 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	ee07 3a90 	vmov	s15, r3
 8006b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b7a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006cdc <HAL_RCC_GetSysClockFreq+0x2e8>
 8006b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b82:	4b51      	ldr	r3, [pc, #324]	; (8006cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b8a:	ee07 3a90 	vmov	s15, r3
 8006b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b92:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b96:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006cd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bb2:	e065      	b.n	8006c80 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	ee07 3a90 	vmov	s15, r3
 8006bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bbe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006ce0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bc6:	4b40      	ldr	r3, [pc, #256]	; (8006cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bce:	ee07 3a90 	vmov	s15, r3
 8006bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bda:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006cd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bf6:	e043      	b.n	8006c80 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	ee07 3a90 	vmov	s15, r3
 8006bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c02:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006ce4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c0a:	4b2f      	ldr	r3, [pc, #188]	; (8006cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c12:	ee07 3a90 	vmov	s15, r3
 8006c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c1e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006cd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c3a:	e021      	b.n	8006c80 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	ee07 3a90 	vmov	s15, r3
 8006c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c46:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006ce0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c4e:	4b1e      	ldr	r3, [pc, #120]	; (8006cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c56:	ee07 3a90 	vmov	s15, r3
 8006c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c62:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006cd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c7e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006c80:	4b11      	ldr	r3, [pc, #68]	; (8006cc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c84:	0a5b      	lsrs	r3, r3, #9
 8006c86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	ee07 3a90 	vmov	s15, r3
 8006c94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c98:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ca4:	ee17 3a90 	vmov	r3, s15
 8006ca8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006caa:	e005      	b.n	8006cb8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006cac:	2300      	movs	r3, #0
 8006cae:	61bb      	str	r3, [r7, #24]
    break;
 8006cb0:	e002      	b.n	8006cb8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006cb2:	4b07      	ldr	r3, [pc, #28]	; (8006cd0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006cb4:	61bb      	str	r3, [r7, #24]
    break;
 8006cb6:	bf00      	nop
  }

  return sysclockfreq;
 8006cb8:	69bb      	ldr	r3, [r7, #24]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3724      	adds	r7, #36	; 0x24
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	58024400 	.word	0x58024400
 8006ccc:	03d09000 	.word	0x03d09000
 8006cd0:	003d0900 	.word	0x003d0900
 8006cd4:	007a1200 	.word	0x007a1200
 8006cd8:	46000000 	.word	0x46000000
 8006cdc:	4c742400 	.word	0x4c742400
 8006ce0:	4a742400 	.word	0x4a742400
 8006ce4:	4af42400 	.word	0x4af42400

08006ce8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006cee:	f7ff fe81 	bl	80069f4 <HAL_RCC_GetSysClockFreq>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	4b10      	ldr	r3, [pc, #64]	; (8006d38 <HAL_RCC_GetHCLKFreq+0x50>)
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	0a1b      	lsrs	r3, r3, #8
 8006cfa:	f003 030f 	and.w	r3, r3, #15
 8006cfe:	490f      	ldr	r1, [pc, #60]	; (8006d3c <HAL_RCC_GetHCLKFreq+0x54>)
 8006d00:	5ccb      	ldrb	r3, [r1, r3]
 8006d02:	f003 031f 	and.w	r3, r3, #31
 8006d06:	fa22 f303 	lsr.w	r3, r2, r3
 8006d0a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d0c:	4b0a      	ldr	r3, [pc, #40]	; (8006d38 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	f003 030f 	and.w	r3, r3, #15
 8006d14:	4a09      	ldr	r2, [pc, #36]	; (8006d3c <HAL_RCC_GetHCLKFreq+0x54>)
 8006d16:	5cd3      	ldrb	r3, [r2, r3]
 8006d18:	f003 031f 	and.w	r3, r3, #31
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d22:	4a07      	ldr	r2, [pc, #28]	; (8006d40 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d24:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d26:	4a07      	ldr	r2, [pc, #28]	; (8006d44 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006d2c:	4b04      	ldr	r3, [pc, #16]	; (8006d40 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	58024400 	.word	0x58024400
 8006d3c:	0800f8fc 	.word	0x0800f8fc
 8006d40:	24000028 	.word	0x24000028
 8006d44:	24000024 	.word	0x24000024

08006d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006d4c:	f7ff ffcc 	bl	8006ce8 <HAL_RCC_GetHCLKFreq>
 8006d50:	4602      	mov	r2, r0
 8006d52:	4b06      	ldr	r3, [pc, #24]	; (8006d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	091b      	lsrs	r3, r3, #4
 8006d58:	f003 0307 	and.w	r3, r3, #7
 8006d5c:	4904      	ldr	r1, [pc, #16]	; (8006d70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d5e:	5ccb      	ldrb	r3, [r1, r3]
 8006d60:	f003 031f 	and.w	r3, r3, #31
 8006d64:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	58024400 	.word	0x58024400
 8006d70:	0800f8fc 	.word	0x0800f8fc

08006d74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006d78:	f7ff ffb6 	bl	8006ce8 <HAL_RCC_GetHCLKFreq>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	4b06      	ldr	r3, [pc, #24]	; (8006d98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	0a1b      	lsrs	r3, r3, #8
 8006d84:	f003 0307 	and.w	r3, r3, #7
 8006d88:	4904      	ldr	r1, [pc, #16]	; (8006d9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d8a:	5ccb      	ldrb	r3, [r1, r3]
 8006d8c:	f003 031f 	and.w	r3, r3, #31
 8006d90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	58024400 	.word	0x58024400
 8006d9c:	0800f8fc 	.word	0x0800f8fc

08006da0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006da8:	2300      	movs	r3, #0
 8006daa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006dac:	2300      	movs	r3, #0
 8006dae:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d03f      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006dc4:	d02a      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006dc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006dca:	d824      	bhi.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006dcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dd0:	d018      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006dd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dd6:	d81e      	bhi.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d003      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006ddc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006de0:	d007      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006de2:	e018      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006de4:	4bab      	ldr	r3, [pc, #684]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de8:	4aaa      	ldr	r2, [pc, #680]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006df0:	e015      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	3304      	adds	r3, #4
 8006df6:	2102      	movs	r1, #2
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f001 fff3 	bl	8008de4 <RCCEx_PLL2_Config>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006e02:	e00c      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	3324      	adds	r3, #36	; 0x24
 8006e08:	2102      	movs	r1, #2
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f002 f89c 	bl	8008f48 <RCCEx_PLL3_Config>
 8006e10:	4603      	mov	r3, r0
 8006e12:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006e14:	e003      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	75fb      	strb	r3, [r7, #23]
      break;
 8006e1a:	e000      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006e1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e1e:	7dfb      	ldrb	r3, [r7, #23]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d109      	bne.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006e24:	4b9b      	ldr	r3, [pc, #620]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e30:	4998      	ldr	r1, [pc, #608]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	650b      	str	r3, [r1, #80]	; 0x50
 8006e36:	e001      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e38:	7dfb      	ldrb	r3, [r7, #23]
 8006e3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d03d      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e4c:	2b04      	cmp	r3, #4
 8006e4e:	d826      	bhi.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006e50:	a201      	add	r2, pc, #4	; (adr r2, 8006e58 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e56:	bf00      	nop
 8006e58:	08006e6d 	.word	0x08006e6d
 8006e5c:	08006e7b 	.word	0x08006e7b
 8006e60:	08006e8d 	.word	0x08006e8d
 8006e64:	08006ea5 	.word	0x08006ea5
 8006e68:	08006ea5 	.word	0x08006ea5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e6c:	4b89      	ldr	r3, [pc, #548]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e70:	4a88      	ldr	r2, [pc, #544]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e78:	e015      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	2100      	movs	r1, #0
 8006e80:	4618      	mov	r0, r3
 8006e82:	f001 ffaf 	bl	8008de4 <RCCEx_PLL2_Config>
 8006e86:	4603      	mov	r3, r0
 8006e88:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e8a:	e00c      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	3324      	adds	r3, #36	; 0x24
 8006e90:	2100      	movs	r1, #0
 8006e92:	4618      	mov	r0, r3
 8006e94:	f002 f858 	bl	8008f48 <RCCEx_PLL3_Config>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e9c:	e003      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ea2:	e000      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006ea4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ea6:	7dfb      	ldrb	r3, [r7, #23]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d109      	bne.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006eac:	4b79      	ldr	r3, [pc, #484]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eb0:	f023 0207 	bic.w	r2, r3, #7
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb8:	4976      	ldr	r1, [pc, #472]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	650b      	str	r3, [r1, #80]	; 0x50
 8006ebe:	e001      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ec0:	7dfb      	ldrb	r3, [r7, #23]
 8006ec2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d042      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ed8:	d02b      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ede:	d825      	bhi.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006ee0:	2bc0      	cmp	r3, #192	; 0xc0
 8006ee2:	d028      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006ee4:	2bc0      	cmp	r3, #192	; 0xc0
 8006ee6:	d821      	bhi.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006ee8:	2b80      	cmp	r3, #128	; 0x80
 8006eea:	d016      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006eec:	2b80      	cmp	r3, #128	; 0x80
 8006eee:	d81d      	bhi.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d002      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006ef4:	2b40      	cmp	r3, #64	; 0x40
 8006ef6:	d007      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006ef8:	e018      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006efa:	4b66      	ldr	r3, [pc, #408]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efe:	4a65      	ldr	r2, [pc, #404]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006f06:	e017      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f001 ff68 	bl	8008de4 <RCCEx_PLL2_Config>
 8006f14:	4603      	mov	r3, r0
 8006f16:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006f18:	e00e      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	3324      	adds	r3, #36	; 0x24
 8006f1e:	2100      	movs	r1, #0
 8006f20:	4618      	mov	r0, r3
 8006f22:	f002 f811 	bl	8008f48 <RCCEx_PLL3_Config>
 8006f26:	4603      	mov	r3, r0
 8006f28:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006f2a:	e005      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f30:	e002      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006f32:	bf00      	nop
 8006f34:	e000      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006f36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f38:	7dfb      	ldrb	r3, [r7, #23]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d109      	bne.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006f3e:	4b55      	ldr	r3, [pc, #340]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f42:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f4a:	4952      	ldr	r1, [pc, #328]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	650b      	str	r3, [r1, #80]	; 0x50
 8006f50:	e001      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f52:	7dfb      	ldrb	r3, [r7, #23]
 8006f54:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d049      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f6c:	d030      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006f6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f72:	d82a      	bhi.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006f74:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f78:	d02c      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006f7a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f7e:	d824      	bhi.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006f80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f84:	d018      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006f86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f8a:	d81e      	bhi.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d003      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006f90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f94:	d007      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006f96:	e018      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f98:	4b3e      	ldr	r3, [pc, #248]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9c:	4a3d      	ldr	r2, [pc, #244]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fa2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fa4:	e017      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	2100      	movs	r1, #0
 8006fac:	4618      	mov	r0, r3
 8006fae:	f001 ff19 	bl	8008de4 <RCCEx_PLL2_Config>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006fb6:	e00e      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	3324      	adds	r3, #36	; 0x24
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f001 ffc2 	bl	8008f48 <RCCEx_PLL3_Config>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fc8:	e005      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	75fb      	strb	r3, [r7, #23]
      break;
 8006fce:	e002      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006fd0:	bf00      	nop
 8006fd2:	e000      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006fd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fd6:	7dfb      	ldrb	r3, [r7, #23]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10a      	bne.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006fdc:	4b2d      	ldr	r3, [pc, #180]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fe0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006fea:	492a      	ldr	r1, [pc, #168]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	658b      	str	r3, [r1, #88]	; 0x58
 8006ff0:	e001      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff2:	7dfb      	ldrb	r3, [r7, #23]
 8006ff4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d04c      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007008:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800700c:	d030      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800700e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007012:	d82a      	bhi.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007014:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007018:	d02c      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800701a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800701e:	d824      	bhi.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007020:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007024:	d018      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007026:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800702a:	d81e      	bhi.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800702c:	2b00      	cmp	r3, #0
 800702e:	d003      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007034:	d007      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007036:	e018      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007038:	4b16      	ldr	r3, [pc, #88]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800703a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703c:	4a15      	ldr	r2, [pc, #84]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800703e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007042:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007044:	e017      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	3304      	adds	r3, #4
 800704a:	2100      	movs	r1, #0
 800704c:	4618      	mov	r0, r3
 800704e:	f001 fec9 	bl	8008de4 <RCCEx_PLL2_Config>
 8007052:	4603      	mov	r3, r0
 8007054:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007056:	e00e      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	3324      	adds	r3, #36	; 0x24
 800705c:	2100      	movs	r1, #0
 800705e:	4618      	mov	r0, r3
 8007060:	f001 ff72 	bl	8008f48 <RCCEx_PLL3_Config>
 8007064:	4603      	mov	r3, r0
 8007066:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007068:	e005      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	75fb      	strb	r3, [r7, #23]
      break;
 800706e:	e002      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007070:	bf00      	nop
 8007072:	e000      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007074:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007076:	7dfb      	ldrb	r3, [r7, #23]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10d      	bne.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800707c:	4b05      	ldr	r3, [pc, #20]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800707e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007080:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800708a:	4902      	ldr	r1, [pc, #8]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800708c:	4313      	orrs	r3, r2
 800708e:	658b      	str	r3, [r1, #88]	; 0x58
 8007090:	e004      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007092:	bf00      	nop
 8007094:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007098:	7dfb      	ldrb	r3, [r7, #23]
 800709a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d032      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ac:	2b30      	cmp	r3, #48	; 0x30
 80070ae:	d01c      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80070b0:	2b30      	cmp	r3, #48	; 0x30
 80070b2:	d817      	bhi.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80070b4:	2b20      	cmp	r3, #32
 80070b6:	d00c      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80070b8:	2b20      	cmp	r3, #32
 80070ba:	d813      	bhi.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d016      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80070c0:	2b10      	cmp	r3, #16
 80070c2:	d10f      	bne.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070c4:	4baf      	ldr	r3, [pc, #700]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80070c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c8:	4aae      	ldr	r2, [pc, #696]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80070ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80070d0:	e00e      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	3304      	adds	r3, #4
 80070d6:	2102      	movs	r1, #2
 80070d8:	4618      	mov	r0, r3
 80070da:	f001 fe83 	bl	8008de4 <RCCEx_PLL2_Config>
 80070de:	4603      	mov	r3, r0
 80070e0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80070e2:	e005      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	75fb      	strb	r3, [r7, #23]
      break;
 80070e8:	e002      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80070ea:	bf00      	nop
 80070ec:	e000      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80070ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070f0:	7dfb      	ldrb	r3, [r7, #23]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d109      	bne.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80070f6:	4ba3      	ldr	r3, [pc, #652]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80070f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007102:	49a0      	ldr	r1, [pc, #640]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007104:	4313      	orrs	r3, r2
 8007106:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007108:	e001      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800710a:	7dfb      	ldrb	r3, [r7, #23]
 800710c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d047      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800711e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007122:	d030      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007124:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007128:	d82a      	bhi.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800712a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800712e:	d02c      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007130:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007134:	d824      	bhi.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800713a:	d018      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800713c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007140:	d81e      	bhi.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007142:	2b00      	cmp	r3, #0
 8007144:	d003      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800714a:	d007      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800714c:	e018      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800714e:	4b8d      	ldr	r3, [pc, #564]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007152:	4a8c      	ldr	r2, [pc, #560]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007158:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800715a:	e017      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3304      	adds	r3, #4
 8007160:	2100      	movs	r1, #0
 8007162:	4618      	mov	r0, r3
 8007164:	f001 fe3e 	bl	8008de4 <RCCEx_PLL2_Config>
 8007168:	4603      	mov	r3, r0
 800716a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800716c:	e00e      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	3324      	adds	r3, #36	; 0x24
 8007172:	2100      	movs	r1, #0
 8007174:	4618      	mov	r0, r3
 8007176:	f001 fee7 	bl	8008f48 <RCCEx_PLL3_Config>
 800717a:	4603      	mov	r3, r0
 800717c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800717e:	e005      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	75fb      	strb	r3, [r7, #23]
      break;
 8007184:	e002      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007186:	bf00      	nop
 8007188:	e000      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800718a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800718c:	7dfb      	ldrb	r3, [r7, #23]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d109      	bne.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007192:	4b7c      	ldr	r3, [pc, #496]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007196:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800719e:	4979      	ldr	r1, [pc, #484]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	650b      	str	r3, [r1, #80]	; 0x50
 80071a4:	e001      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a6:	7dfb      	ldrb	r3, [r7, #23]
 80071a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d049      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071be:	d02e      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80071c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071c4:	d828      	bhi.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80071c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80071ca:	d02a      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80071cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80071d0:	d822      	bhi.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80071d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80071d6:	d026      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80071d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80071dc:	d81c      	bhi.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80071de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071e2:	d010      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80071e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071e8:	d816      	bhi.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d01d      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80071ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071f2:	d111      	bne.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	3304      	adds	r3, #4
 80071f8:	2101      	movs	r1, #1
 80071fa:	4618      	mov	r0, r3
 80071fc:	f001 fdf2 	bl	8008de4 <RCCEx_PLL2_Config>
 8007200:	4603      	mov	r3, r0
 8007202:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007204:	e012      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	3324      	adds	r3, #36	; 0x24
 800720a:	2101      	movs	r1, #1
 800720c:	4618      	mov	r0, r3
 800720e:	f001 fe9b 	bl	8008f48 <RCCEx_PLL3_Config>
 8007212:	4603      	mov	r3, r0
 8007214:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007216:	e009      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	75fb      	strb	r3, [r7, #23]
      break;
 800721c:	e006      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800721e:	bf00      	nop
 8007220:	e004      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007222:	bf00      	nop
 8007224:	e002      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007226:	bf00      	nop
 8007228:	e000      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800722a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800722c:	7dfb      	ldrb	r3, [r7, #23]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d109      	bne.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007232:	4b54      	ldr	r3, [pc, #336]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007236:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800723e:	4951      	ldr	r1, [pc, #324]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007240:	4313      	orrs	r3, r2
 8007242:	650b      	str	r3, [r1, #80]	; 0x50
 8007244:	e001      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007246:	7dfb      	ldrb	r3, [r7, #23]
 8007248:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d04b      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800725c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007260:	d02e      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007262:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007266:	d828      	bhi.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800726c:	d02a      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800726e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007272:	d822      	bhi.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007274:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007278:	d026      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800727a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800727e:	d81c      	bhi.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007280:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007284:	d010      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007286:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800728a:	d816      	bhi.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800728c:	2b00      	cmp	r3, #0
 800728e:	d01d      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007290:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007294:	d111      	bne.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	3304      	adds	r3, #4
 800729a:	2101      	movs	r1, #1
 800729c:	4618      	mov	r0, r3
 800729e:	f001 fda1 	bl	8008de4 <RCCEx_PLL2_Config>
 80072a2:	4603      	mov	r3, r0
 80072a4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80072a6:	e012      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	3324      	adds	r3, #36	; 0x24
 80072ac:	2101      	movs	r1, #1
 80072ae:	4618      	mov	r0, r3
 80072b0:	f001 fe4a 	bl	8008f48 <RCCEx_PLL3_Config>
 80072b4:	4603      	mov	r3, r0
 80072b6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80072b8:	e009      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	75fb      	strb	r3, [r7, #23]
      break;
 80072be:	e006      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80072c0:	bf00      	nop
 80072c2:	e004      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80072c4:	bf00      	nop
 80072c6:	e002      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80072c8:	bf00      	nop
 80072ca:	e000      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80072cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072ce:	7dfb      	ldrb	r3, [r7, #23]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10a      	bne.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80072d4:	4b2b      	ldr	r3, [pc, #172]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072d8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072e2:	4928      	ldr	r1, [pc, #160]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072e4:	4313      	orrs	r3, r2
 80072e6:	658b      	str	r3, [r1, #88]	; 0x58
 80072e8:	e001      	b.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ea:	7dfb      	ldrb	r3, [r7, #23]
 80072ec:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d02f      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007302:	d00e      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007304:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007308:	d814      	bhi.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800730a:	2b00      	cmp	r3, #0
 800730c:	d015      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800730e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007312:	d10f      	bne.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007314:	4b1b      	ldr	r3, [pc, #108]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007318:	4a1a      	ldr	r2, [pc, #104]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800731a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800731e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007320:	e00c      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	3304      	adds	r3, #4
 8007326:	2101      	movs	r1, #1
 8007328:	4618      	mov	r0, r3
 800732a:	f001 fd5b 	bl	8008de4 <RCCEx_PLL2_Config>
 800732e:	4603      	mov	r3, r0
 8007330:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007332:	e003      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	75fb      	strb	r3, [r7, #23]
      break;
 8007338:	e000      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800733a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800733c:	7dfb      	ldrb	r3, [r7, #23]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d109      	bne.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007342:	4b10      	ldr	r3, [pc, #64]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007346:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800734e:	490d      	ldr	r1, [pc, #52]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007350:	4313      	orrs	r3, r2
 8007352:	650b      	str	r3, [r1, #80]	; 0x50
 8007354:	e001      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007356:	7dfb      	ldrb	r3, [r7, #23]
 8007358:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d033      	beq.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800736a:	2b03      	cmp	r3, #3
 800736c:	d81c      	bhi.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800736e:	a201      	add	r2, pc, #4	; (adr r2, 8007374 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007374:	080073af 	.word	0x080073af
 8007378:	08007389 	.word	0x08007389
 800737c:	08007397 	.word	0x08007397
 8007380:	080073af 	.word	0x080073af
 8007384:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007388:	4bb8      	ldr	r3, [pc, #736]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800738a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738c:	4ab7      	ldr	r2, [pc, #732]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800738e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007392:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007394:	e00c      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	3304      	adds	r3, #4
 800739a:	2102      	movs	r1, #2
 800739c:	4618      	mov	r0, r3
 800739e:	f001 fd21 	bl	8008de4 <RCCEx_PLL2_Config>
 80073a2:	4603      	mov	r3, r0
 80073a4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80073a6:	e003      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	75fb      	strb	r3, [r7, #23]
      break;
 80073ac:	e000      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80073ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073b0:	7dfb      	ldrb	r3, [r7, #23]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d109      	bne.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80073b6:	4bad      	ldr	r3, [pc, #692]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073ba:	f023 0203 	bic.w	r2, r3, #3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073c2:	49aa      	ldr	r1, [pc, #680]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073c4:	4313      	orrs	r3, r2
 80073c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80073c8:	e001      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ca:	7dfb      	ldrb	r3, [r7, #23]
 80073cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 8086 	beq.w	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073dc:	4ba4      	ldr	r3, [pc, #656]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4aa3      	ldr	r2, [pc, #652]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80073e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073e8:	f7fb fe7e 	bl	80030e8 <HAL_GetTick>
 80073ec:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073ee:	e009      	b.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073f0:	f7fb fe7a 	bl	80030e8 <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	2b64      	cmp	r3, #100	; 0x64
 80073fc:	d902      	bls.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	75fb      	strb	r3, [r7, #23]
        break;
 8007402:	e005      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007404:	4b9a      	ldr	r3, [pc, #616]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800740c:	2b00      	cmp	r3, #0
 800740e:	d0ef      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007410:	7dfb      	ldrb	r3, [r7, #23]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d166      	bne.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007416:	4b95      	ldr	r3, [pc, #596]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007418:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007420:	4053      	eors	r3, r2
 8007422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007426:	2b00      	cmp	r3, #0
 8007428:	d013      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800742a:	4b90      	ldr	r3, [pc, #576]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800742c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800742e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007432:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007434:	4b8d      	ldr	r3, [pc, #564]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007438:	4a8c      	ldr	r2, [pc, #560]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800743a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800743e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007440:	4b8a      	ldr	r3, [pc, #552]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007444:	4a89      	ldr	r2, [pc, #548]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800744a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800744c:	4a87      	ldr	r2, [pc, #540]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800745c:	d115      	bne.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800745e:	f7fb fe43 	bl	80030e8 <HAL_GetTick>
 8007462:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007464:	e00b      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007466:	f7fb fe3f 	bl	80030e8 <HAL_GetTick>
 800746a:	4602      	mov	r2, r0
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	f241 3288 	movw	r2, #5000	; 0x1388
 8007474:	4293      	cmp	r3, r2
 8007476:	d902      	bls.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007478:	2303      	movs	r3, #3
 800747a:	75fb      	strb	r3, [r7, #23]
            break;
 800747c:	e005      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800747e:	4b7b      	ldr	r3, [pc, #492]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007482:	f003 0302 	and.w	r3, r3, #2
 8007486:	2b00      	cmp	r3, #0
 8007488:	d0ed      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800748a:	7dfb      	ldrb	r3, [r7, #23]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d126      	bne.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800749a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800749e:	d10d      	bne.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80074a0:	4b72      	ldr	r3, [pc, #456]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074ae:	0919      	lsrs	r1, r3, #4
 80074b0:	4b70      	ldr	r3, [pc, #448]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80074b2:	400b      	ands	r3, r1
 80074b4:	496d      	ldr	r1, [pc, #436]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	610b      	str	r3, [r1, #16]
 80074ba:	e005      	b.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80074bc:	4b6b      	ldr	r3, [pc, #428]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	4a6a      	ldr	r2, [pc, #424]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80074c6:	6113      	str	r3, [r2, #16]
 80074c8:	4b68      	ldr	r3, [pc, #416]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074d6:	4965      	ldr	r1, [pc, #404]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074d8:	4313      	orrs	r3, r2
 80074da:	670b      	str	r3, [r1, #112]	; 0x70
 80074dc:	e004      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80074de:	7dfb      	ldrb	r3, [r7, #23]
 80074e0:	75bb      	strb	r3, [r7, #22]
 80074e2:	e001      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e4:	7dfb      	ldrb	r3, [r7, #23]
 80074e6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0301 	and.w	r3, r3, #1
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d07e      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074f8:	2b28      	cmp	r3, #40	; 0x28
 80074fa:	d867      	bhi.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80074fc:	a201      	add	r2, pc, #4	; (adr r2, 8007504 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80074fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007502:	bf00      	nop
 8007504:	080075d3 	.word	0x080075d3
 8007508:	080075cd 	.word	0x080075cd
 800750c:	080075cd 	.word	0x080075cd
 8007510:	080075cd 	.word	0x080075cd
 8007514:	080075cd 	.word	0x080075cd
 8007518:	080075cd 	.word	0x080075cd
 800751c:	080075cd 	.word	0x080075cd
 8007520:	080075cd 	.word	0x080075cd
 8007524:	080075a9 	.word	0x080075a9
 8007528:	080075cd 	.word	0x080075cd
 800752c:	080075cd 	.word	0x080075cd
 8007530:	080075cd 	.word	0x080075cd
 8007534:	080075cd 	.word	0x080075cd
 8007538:	080075cd 	.word	0x080075cd
 800753c:	080075cd 	.word	0x080075cd
 8007540:	080075cd 	.word	0x080075cd
 8007544:	080075bb 	.word	0x080075bb
 8007548:	080075cd 	.word	0x080075cd
 800754c:	080075cd 	.word	0x080075cd
 8007550:	080075cd 	.word	0x080075cd
 8007554:	080075cd 	.word	0x080075cd
 8007558:	080075cd 	.word	0x080075cd
 800755c:	080075cd 	.word	0x080075cd
 8007560:	080075cd 	.word	0x080075cd
 8007564:	080075d3 	.word	0x080075d3
 8007568:	080075cd 	.word	0x080075cd
 800756c:	080075cd 	.word	0x080075cd
 8007570:	080075cd 	.word	0x080075cd
 8007574:	080075cd 	.word	0x080075cd
 8007578:	080075cd 	.word	0x080075cd
 800757c:	080075cd 	.word	0x080075cd
 8007580:	080075cd 	.word	0x080075cd
 8007584:	080075d3 	.word	0x080075d3
 8007588:	080075cd 	.word	0x080075cd
 800758c:	080075cd 	.word	0x080075cd
 8007590:	080075cd 	.word	0x080075cd
 8007594:	080075cd 	.word	0x080075cd
 8007598:	080075cd 	.word	0x080075cd
 800759c:	080075cd 	.word	0x080075cd
 80075a0:	080075cd 	.word	0x080075cd
 80075a4:	080075d3 	.word	0x080075d3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	3304      	adds	r3, #4
 80075ac:	2101      	movs	r1, #1
 80075ae:	4618      	mov	r0, r3
 80075b0:	f001 fc18 	bl	8008de4 <RCCEx_PLL2_Config>
 80075b4:	4603      	mov	r3, r0
 80075b6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80075b8:	e00c      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	3324      	adds	r3, #36	; 0x24
 80075be:	2101      	movs	r1, #1
 80075c0:	4618      	mov	r0, r3
 80075c2:	f001 fcc1 	bl	8008f48 <RCCEx_PLL3_Config>
 80075c6:	4603      	mov	r3, r0
 80075c8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80075ca:	e003      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	75fb      	strb	r3, [r7, #23]
      break;
 80075d0:	e000      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80075d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075d4:	7dfb      	ldrb	r3, [r7, #23]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d109      	bne.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80075da:	4b24      	ldr	r3, [pc, #144]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075de:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075e6:	4921      	ldr	r1, [pc, #132]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075e8:	4313      	orrs	r3, r2
 80075ea:	654b      	str	r3, [r1, #84]	; 0x54
 80075ec:	e001      	b.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ee:	7dfb      	ldrb	r3, [r7, #23]
 80075f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 0302 	and.w	r3, r3, #2
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d03e      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007602:	2b05      	cmp	r3, #5
 8007604:	d820      	bhi.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8007606:	a201      	add	r2, pc, #4	; (adr r2, 800760c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8007608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760c:	0800764f 	.word	0x0800764f
 8007610:	08007625 	.word	0x08007625
 8007614:	08007637 	.word	0x08007637
 8007618:	0800764f 	.word	0x0800764f
 800761c:	0800764f 	.word	0x0800764f
 8007620:	0800764f 	.word	0x0800764f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	3304      	adds	r3, #4
 8007628:	2101      	movs	r1, #1
 800762a:	4618      	mov	r0, r3
 800762c:	f001 fbda 	bl	8008de4 <RCCEx_PLL2_Config>
 8007630:	4603      	mov	r3, r0
 8007632:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007634:	e00c      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	3324      	adds	r3, #36	; 0x24
 800763a:	2101      	movs	r1, #1
 800763c:	4618      	mov	r0, r3
 800763e:	f001 fc83 	bl	8008f48 <RCCEx_PLL3_Config>
 8007642:	4603      	mov	r3, r0
 8007644:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007646:	e003      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	75fb      	strb	r3, [r7, #23]
      break;
 800764c:	e000      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800764e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007650:	7dfb      	ldrb	r3, [r7, #23]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d110      	bne.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007656:	4b05      	ldr	r3, [pc, #20]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800765a:	f023 0207 	bic.w	r2, r3, #7
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007662:	4902      	ldr	r1, [pc, #8]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007664:	4313      	orrs	r3, r2
 8007666:	654b      	str	r3, [r1, #84]	; 0x54
 8007668:	e008      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800766a:	bf00      	nop
 800766c:	58024400 	.word	0x58024400
 8007670:	58024800 	.word	0x58024800
 8007674:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007678:	7dfb      	ldrb	r3, [r7, #23]
 800767a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 0304 	and.w	r3, r3, #4
 8007684:	2b00      	cmp	r3, #0
 8007686:	d039      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800768e:	2b05      	cmp	r3, #5
 8007690:	d820      	bhi.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007692:	a201      	add	r2, pc, #4	; (adr r2, 8007698 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007698:	080076db 	.word	0x080076db
 800769c:	080076b1 	.word	0x080076b1
 80076a0:	080076c3 	.word	0x080076c3
 80076a4:	080076db 	.word	0x080076db
 80076a8:	080076db 	.word	0x080076db
 80076ac:	080076db 	.word	0x080076db
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	3304      	adds	r3, #4
 80076b4:	2101      	movs	r1, #1
 80076b6:	4618      	mov	r0, r3
 80076b8:	f001 fb94 	bl	8008de4 <RCCEx_PLL2_Config>
 80076bc:	4603      	mov	r3, r0
 80076be:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80076c0:	e00c      	b.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	3324      	adds	r3, #36	; 0x24
 80076c6:	2101      	movs	r1, #1
 80076c8:	4618      	mov	r0, r3
 80076ca:	f001 fc3d 	bl	8008f48 <RCCEx_PLL3_Config>
 80076ce:	4603      	mov	r3, r0
 80076d0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80076d2:	e003      	b.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	75fb      	strb	r3, [r7, #23]
      break;
 80076d8:	e000      	b.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80076da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076dc:	7dfb      	ldrb	r3, [r7, #23]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d10a      	bne.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80076e2:	4bb7      	ldr	r3, [pc, #732]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80076e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076e6:	f023 0207 	bic.w	r2, r3, #7
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076f0:	49b3      	ldr	r1, [pc, #716]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80076f2:	4313      	orrs	r3, r2
 80076f4:	658b      	str	r3, [r1, #88]	; 0x58
 80076f6:	e001      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076f8:	7dfb      	ldrb	r3, [r7, #23]
 80076fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0320 	and.w	r3, r3, #32
 8007704:	2b00      	cmp	r3, #0
 8007706:	d04b      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800770e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007712:	d02e      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007714:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007718:	d828      	bhi.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800771a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800771e:	d02a      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007724:	d822      	bhi.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007726:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800772a:	d026      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800772c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007730:	d81c      	bhi.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007732:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007736:	d010      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800773c:	d816      	bhi.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800773e:	2b00      	cmp	r3, #0
 8007740:	d01d      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007742:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007746:	d111      	bne.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	3304      	adds	r3, #4
 800774c:	2100      	movs	r1, #0
 800774e:	4618      	mov	r0, r3
 8007750:	f001 fb48 	bl	8008de4 <RCCEx_PLL2_Config>
 8007754:	4603      	mov	r3, r0
 8007756:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007758:	e012      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	3324      	adds	r3, #36	; 0x24
 800775e:	2102      	movs	r1, #2
 8007760:	4618      	mov	r0, r3
 8007762:	f001 fbf1 	bl	8008f48 <RCCEx_PLL3_Config>
 8007766:	4603      	mov	r3, r0
 8007768:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800776a:	e009      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	75fb      	strb	r3, [r7, #23]
      break;
 8007770:	e006      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007772:	bf00      	nop
 8007774:	e004      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007776:	bf00      	nop
 8007778:	e002      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800777a:	bf00      	nop
 800777c:	e000      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800777e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007780:	7dfb      	ldrb	r3, [r7, #23]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10a      	bne.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007786:	4b8e      	ldr	r3, [pc, #568]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800778a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007794:	498a      	ldr	r1, [pc, #552]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007796:	4313      	orrs	r3, r2
 8007798:	654b      	str	r3, [r1, #84]	; 0x54
 800779a:	e001      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800779c:	7dfb      	ldrb	r3, [r7, #23]
 800779e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d04b      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077b2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80077b6:	d02e      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80077b8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80077bc:	d828      	bhi.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80077be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c2:	d02a      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80077c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c8:	d822      	bhi.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80077ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80077ce:	d026      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80077d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80077d4:	d81c      	bhi.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80077d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077da:	d010      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80077dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077e0:	d816      	bhi.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d01d      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80077e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077ea:	d111      	bne.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	3304      	adds	r3, #4
 80077f0:	2100      	movs	r1, #0
 80077f2:	4618      	mov	r0, r3
 80077f4:	f001 faf6 	bl	8008de4 <RCCEx_PLL2_Config>
 80077f8:	4603      	mov	r3, r0
 80077fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80077fc:	e012      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	3324      	adds	r3, #36	; 0x24
 8007802:	2102      	movs	r1, #2
 8007804:	4618      	mov	r0, r3
 8007806:	f001 fb9f 	bl	8008f48 <RCCEx_PLL3_Config>
 800780a:	4603      	mov	r3, r0
 800780c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800780e:	e009      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	75fb      	strb	r3, [r7, #23]
      break;
 8007814:	e006      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007816:	bf00      	nop
 8007818:	e004      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800781a:	bf00      	nop
 800781c:	e002      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800781e:	bf00      	nop
 8007820:	e000      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007822:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007824:	7dfb      	ldrb	r3, [r7, #23]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10a      	bne.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800782a:	4b65      	ldr	r3, [pc, #404]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800782c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800782e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007838:	4961      	ldr	r1, [pc, #388]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800783a:	4313      	orrs	r3, r2
 800783c:	658b      	str	r3, [r1, #88]	; 0x58
 800783e:	e001      	b.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007840:	7dfb      	ldrb	r3, [r7, #23]
 8007842:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800784c:	2b00      	cmp	r3, #0
 800784e:	d04b      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007856:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800785a:	d02e      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800785c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007860:	d828      	bhi.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007862:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007866:	d02a      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800786c:	d822      	bhi.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800786e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007872:	d026      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007874:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007878:	d81c      	bhi.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800787a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800787e:	d010      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007880:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007884:	d816      	bhi.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007886:	2b00      	cmp	r3, #0
 8007888:	d01d      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800788a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800788e:	d111      	bne.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	3304      	adds	r3, #4
 8007894:	2100      	movs	r1, #0
 8007896:	4618      	mov	r0, r3
 8007898:	f001 faa4 	bl	8008de4 <RCCEx_PLL2_Config>
 800789c:	4603      	mov	r3, r0
 800789e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80078a0:	e012      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	3324      	adds	r3, #36	; 0x24
 80078a6:	2102      	movs	r1, #2
 80078a8:	4618      	mov	r0, r3
 80078aa:	f001 fb4d 	bl	8008f48 <RCCEx_PLL3_Config>
 80078ae:	4603      	mov	r3, r0
 80078b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80078b2:	e009      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	75fb      	strb	r3, [r7, #23]
      break;
 80078b8:	e006      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80078ba:	bf00      	nop
 80078bc:	e004      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80078be:	bf00      	nop
 80078c0:	e002      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80078c2:	bf00      	nop
 80078c4:	e000      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80078c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078c8:	7dfb      	ldrb	r3, [r7, #23]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10a      	bne.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80078ce:	4b3c      	ldr	r3, [pc, #240]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80078d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078dc:	4938      	ldr	r1, [pc, #224]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80078de:	4313      	orrs	r3, r2
 80078e0:	658b      	str	r3, [r1, #88]	; 0x58
 80078e2:	e001      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e4:	7dfb      	ldrb	r3, [r7, #23]
 80078e6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 0308 	and.w	r3, r3, #8
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d01a      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078fe:	d10a      	bne.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	3324      	adds	r3, #36	; 0x24
 8007904:	2102      	movs	r1, #2
 8007906:	4618      	mov	r0, r3
 8007908:	f001 fb1e 	bl	8008f48 <RCCEx_PLL3_Config>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007916:	4b2a      	ldr	r3, [pc, #168]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800791a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007924:	4926      	ldr	r1, [pc, #152]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007926:	4313      	orrs	r3, r2
 8007928:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 0310 	and.w	r3, r3, #16
 8007932:	2b00      	cmp	r3, #0
 8007934:	d01a      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800793c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007940:	d10a      	bne.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	3324      	adds	r3, #36	; 0x24
 8007946:	2102      	movs	r1, #2
 8007948:	4618      	mov	r0, r3
 800794a:	f001 fafd 	bl	8008f48 <RCCEx_PLL3_Config>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d001      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007958:	4b19      	ldr	r3, [pc, #100]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800795a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800795c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007966:	4916      	ldr	r1, [pc, #88]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007968:	4313      	orrs	r3, r2
 800796a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d036      	beq.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800797e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007982:	d01f      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007984:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007988:	d817      	bhi.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800798a:	2b00      	cmp	r3, #0
 800798c:	d003      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800798e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007992:	d009      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007994:	e011      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	3304      	adds	r3, #4
 800799a:	2100      	movs	r1, #0
 800799c:	4618      	mov	r0, r3
 800799e:	f001 fa21 	bl	8008de4 <RCCEx_PLL2_Config>
 80079a2:	4603      	mov	r3, r0
 80079a4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80079a6:	e00e      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	3324      	adds	r3, #36	; 0x24
 80079ac:	2102      	movs	r1, #2
 80079ae:	4618      	mov	r0, r3
 80079b0:	f001 faca 	bl	8008f48 <RCCEx_PLL3_Config>
 80079b4:	4603      	mov	r3, r0
 80079b6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80079b8:	e005      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	75fb      	strb	r3, [r7, #23]
      break;
 80079be:	e002      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80079c0:	58024400 	.word	0x58024400
      break;
 80079c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10a      	bne.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80079cc:	4b93      	ldr	r3, [pc, #588]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80079da:	4990      	ldr	r1, [pc, #576]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079dc:	4313      	orrs	r3, r2
 80079de:	658b      	str	r3, [r1, #88]	; 0x58
 80079e0:	e001      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e2:	7dfb      	ldrb	r3, [r7, #23]
 80079e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d033      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079fc:	d01c      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80079fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a02:	d816      	bhi.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007a04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a08:	d003      	beq.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007a0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a0e:	d007      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007a10:	e00f      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a12:	4b82      	ldr	r3, [pc, #520]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a16:	4a81      	ldr	r2, [pc, #516]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007a1e:	e00c      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	3324      	adds	r3, #36	; 0x24
 8007a24:	2101      	movs	r1, #1
 8007a26:	4618      	mov	r0, r3
 8007a28:	f001 fa8e 	bl	8008f48 <RCCEx_PLL3_Config>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007a30:	e003      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	75fb      	strb	r3, [r7, #23]
      break;
 8007a36:	e000      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007a38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a3a:	7dfb      	ldrb	r3, [r7, #23]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10a      	bne.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a40:	4b76      	ldr	r3, [pc, #472]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a4e:	4973      	ldr	r1, [pc, #460]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a50:	4313      	orrs	r3, r2
 8007a52:	654b      	str	r3, [r1, #84]	; 0x54
 8007a54:	e001      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a56:	7dfb      	ldrb	r3, [r7, #23]
 8007a58:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d029      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d003      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a72:	d007      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007a74:	e00f      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a76:	4b69      	ldr	r3, [pc, #420]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7a:	4a68      	ldr	r2, [pc, #416]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007a82:	e00b      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	3304      	adds	r3, #4
 8007a88:	2102      	movs	r1, #2
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f001 f9aa 	bl	8008de4 <RCCEx_PLL2_Config>
 8007a90:	4603      	mov	r3, r0
 8007a92:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007a94:	e002      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	75fb      	strb	r3, [r7, #23]
      break;
 8007a9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a9c:	7dfb      	ldrb	r3, [r7, #23]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d109      	bne.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007aa2:	4b5e      	ldr	r3, [pc, #376]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aa6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aae:	495b      	ldr	r1, [pc, #364]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007ab4:	e001      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab6:	7dfb      	ldrb	r3, [r7, #23]
 8007ab8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00a      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	3324      	adds	r3, #36	; 0x24
 8007aca:	2102      	movs	r1, #2
 8007acc:	4618      	mov	r0, r3
 8007ace:	f001 fa3b 	bl	8008f48 <RCCEx_PLL3_Config>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d001      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d030      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007af0:	d017      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007af2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007af6:	d811      	bhi.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007afc:	d013      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007afe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b02:	d80b      	bhi.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d010      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b0c:	d106      	bne.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b0e:	4b43      	ldr	r3, [pc, #268]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b12:	4a42      	ldr	r2, [pc, #264]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007b1a:	e007      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b20:	e004      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007b22:	bf00      	nop
 8007b24:	e002      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007b26:	bf00      	nop
 8007b28:	e000      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007b2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b2c:	7dfb      	ldrb	r3, [r7, #23]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d109      	bne.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b32:	4b3a      	ldr	r3, [pc, #232]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b3e:	4937      	ldr	r1, [pc, #220]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b40:	4313      	orrs	r3, r2
 8007b42:	654b      	str	r3, [r1, #84]	; 0x54
 8007b44:	e001      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b46:	7dfb      	ldrb	r3, [r7, #23]
 8007b48:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d008      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b56:	4b31      	ldr	r3, [pc, #196]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b5a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b62:	492e      	ldr	r1, [pc, #184]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b64:	4313      	orrs	r3, r2
 8007b66:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d009      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007b74:	4b29      	ldr	r3, [pc, #164]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b82:	4926      	ldr	r1, [pc, #152]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b84:	4313      	orrs	r3, r2
 8007b86:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d008      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b94:	4b21      	ldr	r3, [pc, #132]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b98:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ba0:	491e      	ldr	r1, [pc, #120]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00d      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007bb2:	4b1a      	ldr	r3, [pc, #104]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	4a19      	ldr	r2, [pc, #100]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007bbc:	6113      	str	r3, [r2, #16]
 8007bbe:	4b17      	ldr	r3, [pc, #92]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bc0:	691a      	ldr	r2, [r3, #16]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007bc8:	4914      	ldr	r1, [pc, #80]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	da08      	bge.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007bd6:	4b11      	ldr	r3, [pc, #68]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007be2:	490e      	ldr	r1, [pc, #56]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007be4:	4313      	orrs	r3, r2
 8007be6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d009      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007bf4:	4b09      	ldr	r3, [pc, #36]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c02:	4906      	ldr	r1, [pc, #24]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007c08:	7dbb      	ldrb	r3, [r7, #22]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d101      	bne.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	e000      	b.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3718      	adds	r7, #24
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	58024400 	.word	0x58024400

08007c20 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b090      	sub	sp, #64	; 0x40
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c2e:	f040 8095 	bne.w	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007c32:	4bae      	ldr	r3, [pc, #696]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c36:	f003 0307 	and.w	r3, r3, #7
 8007c3a:	633b      	str	r3, [r7, #48]	; 0x30
 8007c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3e:	2b04      	cmp	r3, #4
 8007c40:	f200 8088 	bhi.w	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007c44:	a201      	add	r2, pc, #4	; (adr r2, 8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8007c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4a:	bf00      	nop
 8007c4c:	08007c61 	.word	0x08007c61
 8007c50:	08007c89 	.word	0x08007c89
 8007c54:	08007cb1 	.word	0x08007cb1
 8007c58:	08007d4d 	.word	0x08007d4d
 8007c5c:	08007cd9 	.word	0x08007cd9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c60:	4ba2      	ldr	r3, [pc, #648]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c6c:	d108      	bne.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 ff64 	bl	8008b40 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c7c:	f000 bc95 	b.w	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007c80:	2300      	movs	r3, #0
 8007c82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c84:	f000 bc91 	b.w	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c88:	4b98      	ldr	r3, [pc, #608]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c94:	d108      	bne.n	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c96:	f107 0318 	add.w	r3, r7, #24
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f000 fca8 	bl	80085f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ca4:	f000 bc81 	b.w	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cac:	f000 bc7d 	b.w	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007cb0:	4b8e      	ldr	r3, [pc, #568]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cbc:	d108      	bne.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cbe:	f107 030c 	add.w	r3, r7, #12
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f000 fde8 	bl	8008898 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ccc:	f000 bc6d 	b.w	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cd4:	f000 bc69 	b.w	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007cd8:	4b84      	ldr	r3, [pc, #528]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ce0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ce2:	4b82      	ldr	r3, [pc, #520]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 0304 	and.w	r3, r3, #4
 8007cea:	2b04      	cmp	r3, #4
 8007cec:	d10c      	bne.n	8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8007cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d109      	bne.n	8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007cf4:	4b7d      	ldr	r3, [pc, #500]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	08db      	lsrs	r3, r3, #3
 8007cfa:	f003 0303 	and.w	r3, r3, #3
 8007cfe:	4a7c      	ldr	r2, [pc, #496]	; (8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8007d00:	fa22 f303 	lsr.w	r3, r2, r3
 8007d04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d06:	e01f      	b.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d08:	4b78      	ldr	r3, [pc, #480]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d14:	d106      	bne.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d1c:	d102      	bne.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007d1e:	4b75      	ldr	r3, [pc, #468]	; (8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007d20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d22:	e011      	b.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d24:	4b71      	ldr	r3, [pc, #452]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d30:	d106      	bne.n	8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8007d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d38:	d102      	bne.n	8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007d3a:	4b6f      	ldr	r3, [pc, #444]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8007d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d3e:	e003      	b.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007d40:	2300      	movs	r3, #0
 8007d42:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007d44:	f000 bc31 	b.w	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007d48:	f000 bc2f 	b.w	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007d4c:	4b6b      	ldr	r3, [pc, #428]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d50:	f000 bc2b 	b.w	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007d54:	2300      	movs	r3, #0
 8007d56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d58:	f000 bc27 	b.w	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d62:	f040 8095 	bne.w	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007d66:	4b61      	ldr	r3, [pc, #388]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d6a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007d6e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d76:	d04d      	beq.n	8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8007d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d7e:	f200 8084 	bhi.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d84:	2bc0      	cmp	r3, #192	; 0xc0
 8007d86:	d07d      	beq.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8a:	2bc0      	cmp	r3, #192	; 0xc0
 8007d8c:	d87d      	bhi.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d90:	2b80      	cmp	r3, #128	; 0x80
 8007d92:	d02d      	beq.n	8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8007d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d96:	2b80      	cmp	r3, #128	; 0x80
 8007d98:	d877      	bhi.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d003      	beq.n	8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8007da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da2:	2b40      	cmp	r3, #64	; 0x40
 8007da4:	d012      	beq.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8007da6:	e070      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007da8:	4b50      	ldr	r3, [pc, #320]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007db0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007db4:	d107      	bne.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f000 fec0 	bl	8008b40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007dc4:	e3f1      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dca:	e3ee      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007dcc:	4b47      	ldr	r3, [pc, #284]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007dd8:	d107      	bne.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dda:	f107 0318 	add.w	r3, r7, #24
 8007dde:	4618      	mov	r0, r3
 8007de0:	f000 fc06 	bl	80085f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007de8:	e3df      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007dea:	2300      	movs	r3, #0
 8007dec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dee:	e3dc      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007df0:	4b3e      	ldr	r3, [pc, #248]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007df8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dfc:	d107      	bne.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dfe:	f107 030c 	add.w	r3, r7, #12
 8007e02:	4618      	mov	r0, r3
 8007e04:	f000 fd48 	bl	8008898 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e0c:	e3cd      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e12:	e3ca      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007e14:	4b35      	ldr	r3, [pc, #212]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e1c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e1e:	4b33      	ldr	r3, [pc, #204]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 0304 	and.w	r3, r3, #4
 8007e26:	2b04      	cmp	r3, #4
 8007e28:	d10c      	bne.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8007e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d109      	bne.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e30:	4b2e      	ldr	r3, [pc, #184]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	08db      	lsrs	r3, r3, #3
 8007e36:	f003 0303 	and.w	r3, r3, #3
 8007e3a:	4a2d      	ldr	r2, [pc, #180]	; (8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8007e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e42:	e01e      	b.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e44:	4b29      	ldr	r3, [pc, #164]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e50:	d106      	bne.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8007e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e58:	d102      	bne.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007e5a:	4b26      	ldr	r3, [pc, #152]	; (8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e5e:	e010      	b.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e60:	4b22      	ldr	r3, [pc, #136]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e6c:	d106      	bne.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8007e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e74:	d102      	bne.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007e76:	4b20      	ldr	r3, [pc, #128]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8007e78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e7a:	e002      	b.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007e80:	e393      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007e82:	e392      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007e84:	4b1d      	ldr	r3, [pc, #116]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007e86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e88:	e38f      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e8e:	e38c      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e96:	f040 80a7 	bne.w	8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007e9a:	4b14      	ldr	r3, [pc, #80]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e9e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007ea2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007eaa:	d05f      	beq.n	8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007eb2:	f200 8096 	bhi.w	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ebc:	f000 808e 	beq.w	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8007ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ec6:	f200 808c 	bhi.w	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ed0:	d03a      	beq.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ed8:	f200 8083 	bhi.w	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00e      	beq.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8007ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ee8:	d01c      	beq.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8007eea:	e07a      	b.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007eec:	58024400 	.word	0x58024400
 8007ef0:	03d09000 	.word	0x03d09000
 8007ef4:	003d0900 	.word	0x003d0900
 8007ef8:	007a1200 	.word	0x007a1200
 8007efc:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f00:	4baa      	ldr	r3, [pc, #680]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f0c:	d107      	bne.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f12:	4618      	mov	r0, r3
 8007f14:	f000 fe14 	bl	8008b40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007f1c:	e345      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f22:	e342      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f24:	4ba1      	ldr	r3, [pc, #644]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f30:	d107      	bne.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f32:	f107 0318 	add.w	r3, r7, #24
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 fb5a 	bl	80085f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007f40:	e333      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007f42:	2300      	movs	r3, #0
 8007f44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f46:	e330      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f48:	4b98      	ldr	r3, [pc, #608]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f54:	d107      	bne.n	8007f66 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f56:	f107 030c 	add.w	r3, r7, #12
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f000 fc9c 	bl	8008898 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007f64:	e321      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007f66:	2300      	movs	r3, #0
 8007f68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f6a:	e31e      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007f6c:	4b8f      	ldr	r3, [pc, #572]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f74:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f76:	4b8d      	ldr	r3, [pc, #564]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 0304 	and.w	r3, r3, #4
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	d10c      	bne.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8007f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d109      	bne.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f88:	4b88      	ldr	r3, [pc, #544]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	08db      	lsrs	r3, r3, #3
 8007f8e:	f003 0303 	and.w	r3, r3, #3
 8007f92:	4a87      	ldr	r2, [pc, #540]	; (80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007f94:	fa22 f303 	lsr.w	r3, r2, r3
 8007f98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f9a:	e01e      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f9c:	4b83      	ldr	r3, [pc, #524]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fa8:	d106      	bne.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8007faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fb0:	d102      	bne.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007fb2:	4b80      	ldr	r3, [pc, #512]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fb6:	e010      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007fb8:	4b7c      	ldr	r3, [pc, #496]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fc4:	d106      	bne.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8007fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fcc:	d102      	bne.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007fce:	4b7a      	ldr	r3, [pc, #488]	; (80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fd2:	e002      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007fd8:	e2e7      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007fda:	e2e6      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007fdc:	4b77      	ldr	r3, [pc, #476]	; (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007fde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fe0:	e2e3      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fe6:	e2e0      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fee:	f040 809c 	bne.w	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007ff2:	4b6e      	ldr	r3, [pc, #440]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ff6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007ffa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008002:	d054      	beq.n	80080ae <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8008004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008006:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800800a:	f200 808b 	bhi.w	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800800e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008010:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008014:	f000 8083 	beq.w	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8008018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800801e:	f200 8081 	bhi.w	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008024:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008028:	d02f      	beq.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800802a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008030:	d878      	bhi.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008034:	2b00      	cmp	r3, #0
 8008036:	d004      	beq.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800803e:	d012      	beq.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008040:	e070      	b.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008042:	4b5a      	ldr	r3, [pc, #360]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800804a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800804e:	d107      	bne.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008054:	4618      	mov	r0, r3
 8008056:	f000 fd73 	bl	8008b40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800805a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800805e:	e2a4      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008060:	2300      	movs	r3, #0
 8008062:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008064:	e2a1      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008066:	4b51      	ldr	r3, [pc, #324]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800806e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008072:	d107      	bne.n	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008074:	f107 0318 	add.w	r3, r7, #24
 8008078:	4618      	mov	r0, r3
 800807a:	f000 fab9 	bl	80085f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8008082:	e292      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008084:	2300      	movs	r3, #0
 8008086:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008088:	e28f      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800808a:	4b48      	ldr	r3, [pc, #288]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008092:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008096:	d107      	bne.n	80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008098:	f107 030c 	add.w	r3, r7, #12
 800809c:	4618      	mov	r0, r3
 800809e:	f000 fbfb 	bl	8008898 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80080a6:	e280      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80080a8:	2300      	movs	r3, #0
 80080aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080ac:	e27d      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80080ae:	4b3f      	ldr	r3, [pc, #252]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80080b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80080b6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80080b8:	4b3c      	ldr	r3, [pc, #240]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 0304 	and.w	r3, r3, #4
 80080c0:	2b04      	cmp	r3, #4
 80080c2:	d10c      	bne.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80080c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d109      	bne.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080ca:	4b38      	ldr	r3, [pc, #224]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	08db      	lsrs	r3, r3, #3
 80080d0:	f003 0303 	and.w	r3, r3, #3
 80080d4:	4a36      	ldr	r2, [pc, #216]	; (80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80080d6:	fa22 f303 	lsr.w	r3, r2, r3
 80080da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080dc:	e01e      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80080de:	4b33      	ldr	r3, [pc, #204]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080ea:	d106      	bne.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80080ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080f2:	d102      	bne.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80080f4:	4b2f      	ldr	r3, [pc, #188]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80080f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080f8:	e010      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80080fa:	4b2c      	ldr	r3, [pc, #176]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008102:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008106:	d106      	bne.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8008108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800810a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800810e:	d102      	bne.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008110:	4b29      	ldr	r3, [pc, #164]	; (80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008114:	e002      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008116:	2300      	movs	r3, #0
 8008118:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800811a:	e246      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800811c:	e245      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800811e:	4b27      	ldr	r3, [pc, #156]	; (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008120:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008122:	e242      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008124:	2300      	movs	r3, #0
 8008126:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008128:	e23f      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008130:	f040 80a8 	bne.w	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008134:	4b1d      	ldr	r3, [pc, #116]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008138:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800813c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800813e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008140:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008144:	d060      	beq.n	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8008146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008148:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800814c:	f200 8097 	bhi.w	800827e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008152:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008156:	f000 808f 	beq.w	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800815a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008160:	f200 808d 	bhi.w	800827e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008166:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800816a:	d03b      	beq.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800816c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008172:	f200 8084 	bhi.w	800827e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008178:	2b00      	cmp	r3, #0
 800817a:	d004      	beq.n	8008186 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800817c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008182:	d01d      	beq.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8008184:	e07b      	b.n	800827e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008186:	4b09      	ldr	r3, [pc, #36]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800818e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008192:	d107      	bne.n	80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008198:	4618      	mov	r0, r3
 800819a:	f000 fcd1 	bl	8008b40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800819e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80081a2:	e202      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80081a4:	2300      	movs	r3, #0
 80081a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081a8:	e1ff      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80081aa:	bf00      	nop
 80081ac:	58024400 	.word	0x58024400
 80081b0:	03d09000 	.word	0x03d09000
 80081b4:	003d0900 	.word	0x003d0900
 80081b8:	007a1200 	.word	0x007a1200
 80081bc:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081c0:	4ba3      	ldr	r3, [pc, #652]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081cc:	d107      	bne.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081ce:	f107 0318 	add.w	r3, r7, #24
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 fa0c 	bl	80085f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80081dc:	e1e5      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80081de:	2300      	movs	r3, #0
 80081e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081e2:	e1e2      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081e4:	4b9a      	ldr	r3, [pc, #616]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081f0:	d107      	bne.n	8008202 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081f2:	f107 030c 	add.w	r3, r7, #12
 80081f6:	4618      	mov	r0, r3
 80081f8:	f000 fb4e 	bl	8008898 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008200:	e1d3      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008202:	2300      	movs	r3, #0
 8008204:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008206:	e1d0      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008208:	4b91      	ldr	r3, [pc, #580]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800820a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800820c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008210:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008212:	4b8f      	ldr	r3, [pc, #572]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f003 0304 	and.w	r3, r3, #4
 800821a:	2b04      	cmp	r3, #4
 800821c:	d10c      	bne.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800821e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008220:	2b00      	cmp	r3, #0
 8008222:	d109      	bne.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008224:	4b8a      	ldr	r3, [pc, #552]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	08db      	lsrs	r3, r3, #3
 800822a:	f003 0303 	and.w	r3, r3, #3
 800822e:	4a89      	ldr	r2, [pc, #548]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008230:	fa22 f303 	lsr.w	r3, r2, r3
 8008234:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008236:	e01e      	b.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008238:	4b85      	ldr	r3, [pc, #532]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008244:	d106      	bne.n	8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8008246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008248:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800824c:	d102      	bne.n	8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800824e:	4b82      	ldr	r3, [pc, #520]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008250:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008252:	e010      	b.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008254:	4b7e      	ldr	r3, [pc, #504]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800825c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008260:	d106      	bne.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008264:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008268:	d102      	bne.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800826a:	4b7c      	ldr	r3, [pc, #496]	; (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800826c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800826e:	e002      	b.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008270:	2300      	movs	r3, #0
 8008272:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008274:	e199      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008276:	e198      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008278:	4b79      	ldr	r3, [pc, #484]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800827a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800827c:	e195      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800827e:	2300      	movs	r3, #0
 8008280:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008282:	e192      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800828a:	d173      	bne.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800828c:	4b70      	ldr	r3, [pc, #448]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800828e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008290:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008294:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008298:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800829c:	d02f      	beq.n	80082fe <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800829e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082a4:	d863      	bhi.n	800836e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80082a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d004      	beq.n	80082b6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80082ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082b2:	d012      	beq.n	80082da <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 80082b4:	e05b      	b.n	800836e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80082b6:	4b66      	ldr	r3, [pc, #408]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082c2:	d107      	bne.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082c4:	f107 0318 	add.w	r3, r7, #24
 80082c8:	4618      	mov	r0, r3
 80082ca:	f000 f991 	bl	80085f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80082d2:	e16a      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80082d4:	2300      	movs	r3, #0
 80082d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082d8:	e167      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082da:	4b5d      	ldr	r3, [pc, #372]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082e6:	d107      	bne.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082e8:	f107 030c 	add.w	r3, r7, #12
 80082ec:	4618      	mov	r0, r3
 80082ee:	f000 fad3 	bl	8008898 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80082f6:	e158      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80082f8:	2300      	movs	r3, #0
 80082fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082fc:	e155      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80082fe:	4b54      	ldr	r3, [pc, #336]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008302:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008306:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008308:	4b51      	ldr	r3, [pc, #324]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 0304 	and.w	r3, r3, #4
 8008310:	2b04      	cmp	r3, #4
 8008312:	d10c      	bne.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8008314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008316:	2b00      	cmp	r3, #0
 8008318:	d109      	bne.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800831a:	4b4d      	ldr	r3, [pc, #308]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	08db      	lsrs	r3, r3, #3
 8008320:	f003 0303 	and.w	r3, r3, #3
 8008324:	4a4b      	ldr	r2, [pc, #300]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008326:	fa22 f303 	lsr.w	r3, r2, r3
 800832a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800832c:	e01e      	b.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800832e:	4b48      	ldr	r3, [pc, #288]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800833a:	d106      	bne.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800833c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800833e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008342:	d102      	bne.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008344:	4b44      	ldr	r3, [pc, #272]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008346:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008348:	e010      	b.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800834a:	4b41      	ldr	r3, [pc, #260]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008352:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008356:	d106      	bne.n	8008366 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8008358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800835a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800835e:	d102      	bne.n	8008366 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008360:	4b3e      	ldr	r3, [pc, #248]	; (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008364:	e002      	b.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008366:	2300      	movs	r3, #0
 8008368:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800836a:	e11e      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800836c:	e11d      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800836e:	2300      	movs	r3, #0
 8008370:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008372:	e11a      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800837a:	d133      	bne.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800837c:	4b34      	ldr	r3, [pc, #208]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800837e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008384:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008388:	2b00      	cmp	r3, #0
 800838a:	d004      	beq.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800838c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008392:	d012      	beq.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008394:	e023      	b.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008396:	4b2e      	ldr	r3, [pc, #184]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800839e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083a2:	d107      	bne.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083a8:	4618      	mov	r0, r3
 80083aa:	f000 fbc9 	bl	8008b40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80083b2:	e0fa      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083b4:	2300      	movs	r3, #0
 80083b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083b8:	e0f7      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083ba:	4b25      	ldr	r3, [pc, #148]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083c6:	d107      	bne.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083c8:	f107 0318 	add.w	r3, r7, #24
 80083cc:	4618      	mov	r0, r3
 80083ce:	f000 f90f 	bl	80085f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80083d2:	6a3b      	ldr	r3, [r7, #32]
 80083d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80083d6:	e0e8      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083d8:	2300      	movs	r3, #0
 80083da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083dc:	e0e5      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80083de:	2300      	movs	r3, #0
 80083e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083e2:	e0e2      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083ea:	f040 808f 	bne.w	800850c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80083ee:	4b18      	ldr	r3, [pc, #96]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80083f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083f2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80083f6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80083f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083fe:	d075      	beq.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8008400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008402:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008406:	d87e      	bhi.n	8008506 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800840e:	d060      	beq.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8008410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008416:	d876      	bhi.n	8008506 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800841e:	d045      	beq.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8008420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008422:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008426:	d86e      	bhi.n	8008506 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800842e:	d02b      	beq.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8008430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008432:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008436:	d866      	bhi.n	8008506 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843a:	2b00      	cmp	r3, #0
 800843c:	d004      	beq.n	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800843e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008440:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008444:	d00e      	beq.n	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008446:	e05e      	b.n	8008506 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008448:	f000 f8bc 	bl	80085c4 <HAL_RCCEx_GetD3PCLK1Freq>
 800844c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800844e:	e0ac      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008450:	58024400 	.word	0x58024400
 8008454:	03d09000 	.word	0x03d09000
 8008458:	003d0900 	.word	0x003d0900
 800845c:	007a1200 	.word	0x007a1200
 8008460:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008464:	4b53      	ldr	r3, [pc, #332]	; (80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800846c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008470:	d107      	bne.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008472:	f107 0318 	add.w	r3, r7, #24
 8008476:	4618      	mov	r0, r3
 8008478:	f000 f8ba 	bl	80085f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008480:	e093      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008482:	2300      	movs	r3, #0
 8008484:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008486:	e090      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008488:	4b4a      	ldr	r3, [pc, #296]	; (80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008494:	d107      	bne.n	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008496:	f107 030c 	add.w	r3, r7, #12
 800849a:	4618      	mov	r0, r3
 800849c:	f000 f9fc 	bl	8008898 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80084a4:	e081      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084a6:	2300      	movs	r3, #0
 80084a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084aa:	e07e      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80084ac:	4b41      	ldr	r3, [pc, #260]	; (80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0304 	and.w	r3, r3, #4
 80084b4:	2b04      	cmp	r3, #4
 80084b6:	d109      	bne.n	80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80084b8:	4b3e      	ldr	r3, [pc, #248]	; (80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	08db      	lsrs	r3, r3, #3
 80084be:	f003 0303 	and.w	r3, r3, #3
 80084c2:	4a3d      	ldr	r2, [pc, #244]	; (80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80084c4:	fa22 f303 	lsr.w	r3, r2, r3
 80084c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80084ca:	e06e      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084cc:	2300      	movs	r3, #0
 80084ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084d0:	e06b      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80084d2:	4b38      	ldr	r3, [pc, #224]	; (80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084de:	d102      	bne.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 80084e0:	4b36      	ldr	r3, [pc, #216]	; (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80084e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80084e4:	e061      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80084e6:	2300      	movs	r3, #0
 80084e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084ea:	e05e      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80084ec:	4b31      	ldr	r3, [pc, #196]	; (80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084f8:	d102      	bne.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 80084fa:	4b31      	ldr	r3, [pc, #196]	; (80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80084fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80084fe:	e054      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008500:	2300      	movs	r3, #0
 8008502:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008504:	e051      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008506:	2300      	movs	r3, #0
 8008508:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800850a:	e04e      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008512:	d148      	bne.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008514:	4b27      	ldr	r3, [pc, #156]	; (80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008518:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800851c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800851e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008524:	d02a      	beq.n	800857c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800852c:	d838      	bhi.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800852e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008530:	2b00      	cmp	r3, #0
 8008532:	d004      	beq.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008536:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800853a:	d00d      	beq.n	8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800853c:	e030      	b.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800853e:	4b1d      	ldr	r3, [pc, #116]	; (80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008546:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800854a:	d102      	bne.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800854c:	4b1c      	ldr	r3, [pc, #112]	; (80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800854e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008550:	e02b      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008552:	2300      	movs	r3, #0
 8008554:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008556:	e028      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008558:	4b16      	ldr	r3, [pc, #88]	; (80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008560:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008564:	d107      	bne.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800856a:	4618      	mov	r0, r3
 800856c:	f000 fae8 	bl	8008b40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008572:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008574:	e019      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008576:	2300      	movs	r3, #0
 8008578:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800857a:	e016      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800857c:	4b0d      	ldr	r3, [pc, #52]	; (80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008584:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008588:	d107      	bne.n	800859a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800858a:	f107 0318 	add.w	r3, r7, #24
 800858e:	4618      	mov	r0, r3
 8008590:	f000 f82e 	bl	80085f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008598:	e007      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800859a:	2300      	movs	r3, #0
 800859c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800859e:	e004      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80085a0:	2300      	movs	r3, #0
 80085a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085a4:	e001      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 80085a6:	2300      	movs	r3, #0
 80085a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80085aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3740      	adds	r7, #64	; 0x40
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	58024400 	.word	0x58024400
 80085b8:	03d09000 	.word	0x03d09000
 80085bc:	003d0900 	.word	0x003d0900
 80085c0:	007a1200 	.word	0x007a1200

080085c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80085c8:	f7fe fb8e 	bl	8006ce8 <HAL_RCC_GetHCLKFreq>
 80085cc:	4602      	mov	r2, r0
 80085ce:	4b06      	ldr	r3, [pc, #24]	; (80085e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	091b      	lsrs	r3, r3, #4
 80085d4:	f003 0307 	and.w	r3, r3, #7
 80085d8:	4904      	ldr	r1, [pc, #16]	; (80085ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80085da:	5ccb      	ldrb	r3, [r1, r3]
 80085dc:	f003 031f 	and.w	r3, r3, #31
 80085e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	58024400 	.word	0x58024400
 80085ec:	0800f8fc 	.word	0x0800f8fc

080085f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b089      	sub	sp, #36	; 0x24
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80085f8:	4ba1      	ldr	r3, [pc, #644]	; (8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fc:	f003 0303 	and.w	r3, r3, #3
 8008600:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008602:	4b9f      	ldr	r3, [pc, #636]	; (8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008606:	0b1b      	lsrs	r3, r3, #12
 8008608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800860c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800860e:	4b9c      	ldr	r3, [pc, #624]	; (8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008612:	091b      	lsrs	r3, r3, #4
 8008614:	f003 0301 	and.w	r3, r3, #1
 8008618:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800861a:	4b99      	ldr	r3, [pc, #612]	; (8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800861c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800861e:	08db      	lsrs	r3, r3, #3
 8008620:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008624:	693a      	ldr	r2, [r7, #16]
 8008626:	fb02 f303 	mul.w	r3, r2, r3
 800862a:	ee07 3a90 	vmov	s15, r3
 800862e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008632:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	2b00      	cmp	r3, #0
 800863a:	f000 8111 	beq.w	8008860 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	2b02      	cmp	r3, #2
 8008642:	f000 8083 	beq.w	800874c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	2b02      	cmp	r3, #2
 800864a:	f200 80a1 	bhi.w	8008790 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d003      	beq.n	800865c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	2b01      	cmp	r3, #1
 8008658:	d056      	beq.n	8008708 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800865a:	e099      	b.n	8008790 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800865c:	4b88      	ldr	r3, [pc, #544]	; (8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f003 0320 	and.w	r3, r3, #32
 8008664:	2b00      	cmp	r3, #0
 8008666:	d02d      	beq.n	80086c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008668:	4b85      	ldr	r3, [pc, #532]	; (8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	08db      	lsrs	r3, r3, #3
 800866e:	f003 0303 	and.w	r3, r3, #3
 8008672:	4a84      	ldr	r2, [pc, #528]	; (8008884 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008674:	fa22 f303 	lsr.w	r3, r2, r3
 8008678:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	ee07 3a90 	vmov	s15, r3
 8008680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	ee07 3a90 	vmov	s15, r3
 800868a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800868e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008692:	4b7b      	ldr	r3, [pc, #492]	; (8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800869a:	ee07 3a90 	vmov	s15, r3
 800869e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80086a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086be:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80086c2:	e087      	b.n	80087d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	ee07 3a90 	vmov	s15, r3
 80086ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800888c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80086d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086d6:	4b6a      	ldr	r3, [pc, #424]	; (8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086de:	ee07 3a90 	vmov	s15, r3
 80086e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80086ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008702:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008706:	e065      	b.n	80087d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	ee07 3a90 	vmov	s15, r3
 800870e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008712:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008890 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800871a:	4b59      	ldr	r3, [pc, #356]	; (8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800871c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008722:	ee07 3a90 	vmov	s15, r3
 8008726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800872a:	ed97 6a03 	vldr	s12, [r7, #12]
 800872e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800873a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800873e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008746:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800874a:	e043      	b.n	80087d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	ee07 3a90 	vmov	s15, r3
 8008752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008756:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008894 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800875a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800875e:	4b48      	ldr	r3, [pc, #288]	; (8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008766:	ee07 3a90 	vmov	s15, r3
 800876a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800876e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008772:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800877a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800877e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800878a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800878e:	e021      	b.n	80087d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	ee07 3a90 	vmov	s15, r3
 8008796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800879a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008890 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800879e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087a2:	4b37      	ldr	r3, [pc, #220]	; (8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087aa:	ee07 3a90 	vmov	s15, r3
 80087ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80087b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80087d4:	4b2a      	ldr	r3, [pc, #168]	; (8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d8:	0a5b      	lsrs	r3, r3, #9
 80087da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087de:	ee07 3a90 	vmov	s15, r3
 80087e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80087f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087fa:	ee17 2a90 	vmov	r2, s15
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008802:	4b1f      	ldr	r3, [pc, #124]	; (8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008806:	0c1b      	lsrs	r3, r3, #16
 8008808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800880c:	ee07 3a90 	vmov	s15, r3
 8008810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008814:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008818:	ee37 7a87 	vadd.f32	s14, s15, s14
 800881c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008828:	ee17 2a90 	vmov	r2, s15
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008830:	4b13      	ldr	r3, [pc, #76]	; (8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008834:	0e1b      	lsrs	r3, r3, #24
 8008836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800883a:	ee07 3a90 	vmov	s15, r3
 800883e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008842:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008846:	ee37 7a87 	vadd.f32	s14, s15, s14
 800884a:	edd7 6a07 	vldr	s13, [r7, #28]
 800884e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008856:	ee17 2a90 	vmov	r2, s15
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800885e:	e008      	b.n	8008872 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	609a      	str	r2, [r3, #8]
}
 8008872:	bf00      	nop
 8008874:	3724      	adds	r7, #36	; 0x24
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	58024400 	.word	0x58024400
 8008884:	03d09000 	.word	0x03d09000
 8008888:	46000000 	.word	0x46000000
 800888c:	4c742400 	.word	0x4c742400
 8008890:	4a742400 	.word	0x4a742400
 8008894:	4af42400 	.word	0x4af42400

08008898 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008898:	b480      	push	{r7}
 800889a:	b089      	sub	sp, #36	; 0x24
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088a0:	4ba1      	ldr	r3, [pc, #644]	; (8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a4:	f003 0303 	and.w	r3, r3, #3
 80088a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80088aa:	4b9f      	ldr	r3, [pc, #636]	; (8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ae:	0d1b      	lsrs	r3, r3, #20
 80088b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80088b6:	4b9c      	ldr	r3, [pc, #624]	; (8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ba:	0a1b      	lsrs	r3, r3, #8
 80088bc:	f003 0301 	and.w	r3, r3, #1
 80088c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80088c2:	4b99      	ldr	r3, [pc, #612]	; (8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088c6:	08db      	lsrs	r3, r3, #3
 80088c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088cc:	693a      	ldr	r2, [r7, #16]
 80088ce:	fb02 f303 	mul.w	r3, r2, r3
 80088d2:	ee07 3a90 	vmov	s15, r3
 80088d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f000 8111 	beq.w	8008b08 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	f000 8083 	beq.w	80089f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	f200 80a1 	bhi.w	8008a38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d003      	beq.n	8008904 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d056      	beq.n	80089b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008902:	e099      	b.n	8008a38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008904:	4b88      	ldr	r3, [pc, #544]	; (8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 0320 	and.w	r3, r3, #32
 800890c:	2b00      	cmp	r3, #0
 800890e:	d02d      	beq.n	800896c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008910:	4b85      	ldr	r3, [pc, #532]	; (8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	08db      	lsrs	r3, r3, #3
 8008916:	f003 0303 	and.w	r3, r3, #3
 800891a:	4a84      	ldr	r2, [pc, #528]	; (8008b2c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800891c:	fa22 f303 	lsr.w	r3, r2, r3
 8008920:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	ee07 3a90 	vmov	s15, r3
 8008928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	ee07 3a90 	vmov	s15, r3
 8008932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800893a:	4b7b      	ldr	r3, [pc, #492]	; (8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800893c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008942:	ee07 3a90 	vmov	s15, r3
 8008946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800894a:	ed97 6a03 	vldr	s12, [r7, #12]
 800894e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800895a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800895e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008966:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800896a:	e087      	b.n	8008a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	ee07 3a90 	vmov	s15, r3
 8008972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008976:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008b34 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800897a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800897e:	4b6a      	ldr	r3, [pc, #424]	; (8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008986:	ee07 3a90 	vmov	s15, r3
 800898a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800898e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008992:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800899a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800899e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089ae:	e065      	b.n	8008a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	ee07 3a90 	vmov	s15, r3
 80089b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008b38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80089be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089c2:	4b59      	ldr	r3, [pc, #356]	; (8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ca:	ee07 3a90 	vmov	s15, r3
 80089ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80089d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089f2:	e043      	b.n	8008a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	ee07 3a90 	vmov	s15, r3
 80089fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008b3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a06:	4b48      	ldr	r3, [pc, #288]	; (8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a0e:	ee07 3a90 	vmov	s15, r3
 8008a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a16:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a1a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a36:	e021      	b.n	8008a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	ee07 3a90 	vmov	s15, r3
 8008a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a42:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008b38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a4a:	4b37      	ldr	r3, [pc, #220]	; (8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a52:	ee07 3a90 	vmov	s15, r3
 8008a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a5e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a7a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008a7c:	4b2a      	ldr	r3, [pc, #168]	; (8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a80:	0a5b      	lsrs	r3, r3, #9
 8008a82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a86:	ee07 3a90 	vmov	s15, r3
 8008a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a96:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aa2:	ee17 2a90 	vmov	r2, s15
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008aaa:	4b1f      	ldr	r3, [pc, #124]	; (8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aae:	0c1b      	lsrs	r3, r3, #16
 8008ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ab4:	ee07 3a90 	vmov	s15, r3
 8008ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008abc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ac0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ac4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ad0:	ee17 2a90 	vmov	r2, s15
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008ad8:	4b13      	ldr	r3, [pc, #76]	; (8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008adc:	0e1b      	lsrs	r3, r3, #24
 8008ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ae2:	ee07 3a90 	vmov	s15, r3
 8008ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008aee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008af2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008af6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008afe:	ee17 2a90 	vmov	r2, s15
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008b06:	e008      	b.n	8008b1a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	609a      	str	r2, [r3, #8]
}
 8008b1a:	bf00      	nop
 8008b1c:	3724      	adds	r7, #36	; 0x24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	58024400 	.word	0x58024400
 8008b2c:	03d09000 	.word	0x03d09000
 8008b30:	46000000 	.word	0x46000000
 8008b34:	4c742400 	.word	0x4c742400
 8008b38:	4a742400 	.word	0x4a742400
 8008b3c:	4af42400 	.word	0x4af42400

08008b40 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b089      	sub	sp, #36	; 0x24
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b48:	4ba0      	ldr	r3, [pc, #640]	; (8008dcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b4c:	f003 0303 	and.w	r3, r3, #3
 8008b50:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008b52:	4b9e      	ldr	r3, [pc, #632]	; (8008dcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b56:	091b      	lsrs	r3, r3, #4
 8008b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b5c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008b5e:	4b9b      	ldr	r3, [pc, #620]	; (8008dcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b62:	f003 0301 	and.w	r3, r3, #1
 8008b66:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008b68:	4b98      	ldr	r3, [pc, #608]	; (8008dcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b6c:	08db      	lsrs	r3, r3, #3
 8008b6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b72:	693a      	ldr	r2, [r7, #16]
 8008b74:	fb02 f303 	mul.w	r3, r2, r3
 8008b78:	ee07 3a90 	vmov	s15, r3
 8008b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b80:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f000 8111 	beq.w	8008dae <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	f000 8083 	beq.w	8008c9a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	f200 80a1 	bhi.w	8008cde <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d003      	beq.n	8008baa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d056      	beq.n	8008c56 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008ba8:	e099      	b.n	8008cde <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008baa:	4b88      	ldr	r3, [pc, #544]	; (8008dcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 0320 	and.w	r3, r3, #32
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d02d      	beq.n	8008c12 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008bb6:	4b85      	ldr	r3, [pc, #532]	; (8008dcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	08db      	lsrs	r3, r3, #3
 8008bbc:	f003 0303 	and.w	r3, r3, #3
 8008bc0:	4a83      	ldr	r2, [pc, #524]	; (8008dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8008bc6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	ee07 3a90 	vmov	s15, r3
 8008bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	ee07 3a90 	vmov	s15, r3
 8008bd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008be0:	4b7a      	ldr	r3, [pc, #488]	; (8008dcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008be8:	ee07 3a90 	vmov	s15, r3
 8008bec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bf0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bf4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008bf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c0c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008c10:	e087      	b.n	8008d22 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	ee07 3a90 	vmov	s15, r3
 8008c18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c1c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008c20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c24:	4b69      	ldr	r3, [pc, #420]	; (8008dcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c2c:	ee07 3a90 	vmov	s15, r3
 8008c30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c34:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c38:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c54:	e065      	b.n	8008d22 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	ee07 3a90 	vmov	s15, r3
 8008c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c60:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008ddc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008c64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c68:	4b58      	ldr	r3, [pc, #352]	; (8008dcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c70:	ee07 3a90 	vmov	s15, r3
 8008c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c78:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c7c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c98:	e043      	b.n	8008d22 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	ee07 3a90 	vmov	s15, r3
 8008ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ca4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008de0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008ca8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cac:	4b47      	ldr	r3, [pc, #284]	; (8008dcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cb4:	ee07 3a90 	vmov	s15, r3
 8008cb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cc0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008cc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ccc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cd8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008cdc:	e021      	b.n	8008d22 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	ee07 3a90 	vmov	s15, r3
 8008ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ce8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008cec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cf0:	4b36      	ldr	r3, [pc, #216]	; (8008dcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cf8:	ee07 3a90 	vmov	s15, r3
 8008cfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d00:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d04:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d1c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d20:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008d22:	4b2a      	ldr	r3, [pc, #168]	; (8008dcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d26:	0a5b      	lsrs	r3, r3, #9
 8008d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d2c:	ee07 3a90 	vmov	s15, r3
 8008d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d48:	ee17 2a90 	vmov	r2, s15
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008d50:	4b1e      	ldr	r3, [pc, #120]	; (8008dcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d54:	0c1b      	lsrs	r3, r3, #16
 8008d56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d5a:	ee07 3a90 	vmov	s15, r3
 8008d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d76:	ee17 2a90 	vmov	r2, s15
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008d7e:	4b13      	ldr	r3, [pc, #76]	; (8008dcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d82:	0e1b      	lsrs	r3, r3, #24
 8008d84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d88:	ee07 3a90 	vmov	s15, r3
 8008d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d98:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008da0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008da4:	ee17 2a90 	vmov	r2, s15
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008dac:	e008      	b.n	8008dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	609a      	str	r2, [r3, #8]
}
 8008dc0:	bf00      	nop
 8008dc2:	3724      	adds	r7, #36	; 0x24
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr
 8008dcc:	58024400 	.word	0x58024400
 8008dd0:	03d09000 	.word	0x03d09000
 8008dd4:	46000000 	.word	0x46000000
 8008dd8:	4c742400 	.word	0x4c742400
 8008ddc:	4a742400 	.word	0x4a742400
 8008de0:	4af42400 	.word	0x4af42400

08008de4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008dee:	2300      	movs	r3, #0
 8008df0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008df2:	4b53      	ldr	r3, [pc, #332]	; (8008f40 <RCCEx_PLL2_Config+0x15c>)
 8008df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df6:	f003 0303 	and.w	r3, r3, #3
 8008dfa:	2b03      	cmp	r3, #3
 8008dfc:	d101      	bne.n	8008e02 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e099      	b.n	8008f36 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008e02:	4b4f      	ldr	r3, [pc, #316]	; (8008f40 <RCCEx_PLL2_Config+0x15c>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a4e      	ldr	r2, [pc, #312]	; (8008f40 <RCCEx_PLL2_Config+0x15c>)
 8008e08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e0e:	f7fa f96b 	bl	80030e8 <HAL_GetTick>
 8008e12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e14:	e008      	b.n	8008e28 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008e16:	f7fa f967 	bl	80030e8 <HAL_GetTick>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	1ad3      	subs	r3, r2, r3
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d901      	bls.n	8008e28 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e086      	b.n	8008f36 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e28:	4b45      	ldr	r3, [pc, #276]	; (8008f40 <RCCEx_PLL2_Config+0x15c>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d1f0      	bne.n	8008e16 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008e34:	4b42      	ldr	r3, [pc, #264]	; (8008f40 <RCCEx_PLL2_Config+0x15c>)
 8008e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e38:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	031b      	lsls	r3, r3, #12
 8008e42:	493f      	ldr	r1, [pc, #252]	; (8008f40 <RCCEx_PLL2_Config+0x15c>)
 8008e44:	4313      	orrs	r3, r2
 8008e46:	628b      	str	r3, [r1, #40]	; 0x28
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	3b01      	subs	r3, #1
 8008e4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	3b01      	subs	r3, #1
 8008e58:	025b      	lsls	r3, r3, #9
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	431a      	orrs	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	3b01      	subs	r3, #1
 8008e64:	041b      	lsls	r3, r3, #16
 8008e66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008e6a:	431a      	orrs	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	691b      	ldr	r3, [r3, #16]
 8008e70:	3b01      	subs	r3, #1
 8008e72:	061b      	lsls	r3, r3, #24
 8008e74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008e78:	4931      	ldr	r1, [pc, #196]	; (8008f40 <RCCEx_PLL2_Config+0x15c>)
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008e7e:	4b30      	ldr	r3, [pc, #192]	; (8008f40 <RCCEx_PLL2_Config+0x15c>)
 8008e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	695b      	ldr	r3, [r3, #20]
 8008e8a:	492d      	ldr	r1, [pc, #180]	; (8008f40 <RCCEx_PLL2_Config+0x15c>)
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008e90:	4b2b      	ldr	r3, [pc, #172]	; (8008f40 <RCCEx_PLL2_Config+0x15c>)
 8008e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e94:	f023 0220 	bic.w	r2, r3, #32
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	4928      	ldr	r1, [pc, #160]	; (8008f40 <RCCEx_PLL2_Config+0x15c>)
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008ea2:	4b27      	ldr	r3, [pc, #156]	; (8008f40 <RCCEx_PLL2_Config+0x15c>)
 8008ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea6:	4a26      	ldr	r2, [pc, #152]	; (8008f40 <RCCEx_PLL2_Config+0x15c>)
 8008ea8:	f023 0310 	bic.w	r3, r3, #16
 8008eac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008eae:	4b24      	ldr	r3, [pc, #144]	; (8008f40 <RCCEx_PLL2_Config+0x15c>)
 8008eb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008eb2:	4b24      	ldr	r3, [pc, #144]	; (8008f44 <RCCEx_PLL2_Config+0x160>)
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	69d2      	ldr	r2, [r2, #28]
 8008eba:	00d2      	lsls	r2, r2, #3
 8008ebc:	4920      	ldr	r1, [pc, #128]	; (8008f40 <RCCEx_PLL2_Config+0x15c>)
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008ec2:	4b1f      	ldr	r3, [pc, #124]	; (8008f40 <RCCEx_PLL2_Config+0x15c>)
 8008ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec6:	4a1e      	ldr	r2, [pc, #120]	; (8008f40 <RCCEx_PLL2_Config+0x15c>)
 8008ec8:	f043 0310 	orr.w	r3, r3, #16
 8008ecc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d106      	bne.n	8008ee2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008ed4:	4b1a      	ldr	r3, [pc, #104]	; (8008f40 <RCCEx_PLL2_Config+0x15c>)
 8008ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed8:	4a19      	ldr	r2, [pc, #100]	; (8008f40 <RCCEx_PLL2_Config+0x15c>)
 8008eda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ede:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ee0:	e00f      	b.n	8008f02 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d106      	bne.n	8008ef6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008ee8:	4b15      	ldr	r3, [pc, #84]	; (8008f40 <RCCEx_PLL2_Config+0x15c>)
 8008eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eec:	4a14      	ldr	r2, [pc, #80]	; (8008f40 <RCCEx_PLL2_Config+0x15c>)
 8008eee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ef2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ef4:	e005      	b.n	8008f02 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008ef6:	4b12      	ldr	r3, [pc, #72]	; (8008f40 <RCCEx_PLL2_Config+0x15c>)
 8008ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efa:	4a11      	ldr	r2, [pc, #68]	; (8008f40 <RCCEx_PLL2_Config+0x15c>)
 8008efc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f00:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008f02:	4b0f      	ldr	r3, [pc, #60]	; (8008f40 <RCCEx_PLL2_Config+0x15c>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a0e      	ldr	r2, [pc, #56]	; (8008f40 <RCCEx_PLL2_Config+0x15c>)
 8008f08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f0e:	f7fa f8eb 	bl	80030e8 <HAL_GetTick>
 8008f12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f14:	e008      	b.n	8008f28 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008f16:	f7fa f8e7 	bl	80030e8 <HAL_GetTick>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	1ad3      	subs	r3, r2, r3
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	d901      	bls.n	8008f28 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f24:	2303      	movs	r3, #3
 8008f26:	e006      	b.n	8008f36 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f28:	4b05      	ldr	r3, [pc, #20]	; (8008f40 <RCCEx_PLL2_Config+0x15c>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d0f0      	beq.n	8008f16 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3710      	adds	r7, #16
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	58024400 	.word	0x58024400
 8008f44:	ffff0007 	.word	0xffff0007

08008f48 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f52:	2300      	movs	r3, #0
 8008f54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f56:	4b53      	ldr	r3, [pc, #332]	; (80090a4 <RCCEx_PLL3_Config+0x15c>)
 8008f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f5a:	f003 0303 	and.w	r3, r3, #3
 8008f5e:	2b03      	cmp	r3, #3
 8008f60:	d101      	bne.n	8008f66 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	e099      	b.n	800909a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008f66:	4b4f      	ldr	r3, [pc, #316]	; (80090a4 <RCCEx_PLL3_Config+0x15c>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a4e      	ldr	r2, [pc, #312]	; (80090a4 <RCCEx_PLL3_Config+0x15c>)
 8008f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f72:	f7fa f8b9 	bl	80030e8 <HAL_GetTick>
 8008f76:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f78:	e008      	b.n	8008f8c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008f7a:	f7fa f8b5 	bl	80030e8 <HAL_GetTick>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	1ad3      	subs	r3, r2, r3
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	d901      	bls.n	8008f8c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008f88:	2303      	movs	r3, #3
 8008f8a:	e086      	b.n	800909a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f8c:	4b45      	ldr	r3, [pc, #276]	; (80090a4 <RCCEx_PLL3_Config+0x15c>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1f0      	bne.n	8008f7a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008f98:	4b42      	ldr	r3, [pc, #264]	; (80090a4 <RCCEx_PLL3_Config+0x15c>)
 8008f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f9c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	051b      	lsls	r3, r3, #20
 8008fa6:	493f      	ldr	r1, [pc, #252]	; (80090a4 <RCCEx_PLL3_Config+0x15c>)
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	628b      	str	r3, [r1, #40]	; 0x28
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	025b      	lsls	r3, r3, #9
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	431a      	orrs	r2, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	041b      	lsls	r3, r3, #16
 8008fca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008fce:	431a      	orrs	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	061b      	lsls	r3, r3, #24
 8008fd8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008fdc:	4931      	ldr	r1, [pc, #196]	; (80090a4 <RCCEx_PLL3_Config+0x15c>)
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008fe2:	4b30      	ldr	r3, [pc, #192]	; (80090a4 <RCCEx_PLL3_Config+0x15c>)
 8008fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	695b      	ldr	r3, [r3, #20]
 8008fee:	492d      	ldr	r1, [pc, #180]	; (80090a4 <RCCEx_PLL3_Config+0x15c>)
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008ff4:	4b2b      	ldr	r3, [pc, #172]	; (80090a4 <RCCEx_PLL3_Config+0x15c>)
 8008ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	699b      	ldr	r3, [r3, #24]
 8009000:	4928      	ldr	r1, [pc, #160]	; (80090a4 <RCCEx_PLL3_Config+0x15c>)
 8009002:	4313      	orrs	r3, r2
 8009004:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009006:	4b27      	ldr	r3, [pc, #156]	; (80090a4 <RCCEx_PLL3_Config+0x15c>)
 8009008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800900a:	4a26      	ldr	r2, [pc, #152]	; (80090a4 <RCCEx_PLL3_Config+0x15c>)
 800900c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009010:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009012:	4b24      	ldr	r3, [pc, #144]	; (80090a4 <RCCEx_PLL3_Config+0x15c>)
 8009014:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009016:	4b24      	ldr	r3, [pc, #144]	; (80090a8 <RCCEx_PLL3_Config+0x160>)
 8009018:	4013      	ands	r3, r2
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	69d2      	ldr	r2, [r2, #28]
 800901e:	00d2      	lsls	r2, r2, #3
 8009020:	4920      	ldr	r1, [pc, #128]	; (80090a4 <RCCEx_PLL3_Config+0x15c>)
 8009022:	4313      	orrs	r3, r2
 8009024:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009026:	4b1f      	ldr	r3, [pc, #124]	; (80090a4 <RCCEx_PLL3_Config+0x15c>)
 8009028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902a:	4a1e      	ldr	r2, [pc, #120]	; (80090a4 <RCCEx_PLL3_Config+0x15c>)
 800902c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009030:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d106      	bne.n	8009046 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009038:	4b1a      	ldr	r3, [pc, #104]	; (80090a4 <RCCEx_PLL3_Config+0x15c>)
 800903a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800903c:	4a19      	ldr	r2, [pc, #100]	; (80090a4 <RCCEx_PLL3_Config+0x15c>)
 800903e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009042:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009044:	e00f      	b.n	8009066 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d106      	bne.n	800905a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800904c:	4b15      	ldr	r3, [pc, #84]	; (80090a4 <RCCEx_PLL3_Config+0x15c>)
 800904e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009050:	4a14      	ldr	r2, [pc, #80]	; (80090a4 <RCCEx_PLL3_Config+0x15c>)
 8009052:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009056:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009058:	e005      	b.n	8009066 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800905a:	4b12      	ldr	r3, [pc, #72]	; (80090a4 <RCCEx_PLL3_Config+0x15c>)
 800905c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905e:	4a11      	ldr	r2, [pc, #68]	; (80090a4 <RCCEx_PLL3_Config+0x15c>)
 8009060:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009064:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009066:	4b0f      	ldr	r3, [pc, #60]	; (80090a4 <RCCEx_PLL3_Config+0x15c>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a0e      	ldr	r2, [pc, #56]	; (80090a4 <RCCEx_PLL3_Config+0x15c>)
 800906c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009070:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009072:	f7fa f839 	bl	80030e8 <HAL_GetTick>
 8009076:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009078:	e008      	b.n	800908c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800907a:	f7fa f835 	bl	80030e8 <HAL_GetTick>
 800907e:	4602      	mov	r2, r0
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	1ad3      	subs	r3, r2, r3
 8009084:	2b02      	cmp	r3, #2
 8009086:	d901      	bls.n	800908c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009088:	2303      	movs	r3, #3
 800908a:	e006      	b.n	800909a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800908c:	4b05      	ldr	r3, [pc, #20]	; (80090a4 <RCCEx_PLL3_Config+0x15c>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009094:	2b00      	cmp	r3, #0
 8009096:	d0f0      	beq.n	800907a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009098:	7bfb      	ldrb	r3, [r7, #15]
}
 800909a:	4618      	mov	r0, r3
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	58024400 	.word	0x58024400
 80090a8:	ffff0007 	.word	0xffff0007

080090ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d101      	bne.n	80090be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	e049      	b.n	8009152 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d106      	bne.n	80090d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f7f9 fc80 	bl	80029d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2202      	movs	r2, #2
 80090dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	3304      	adds	r3, #4
 80090e8:	4619      	mov	r1, r3
 80090ea:	4610      	mov	r0, r2
 80090ec:	f000 fea6 	bl	8009e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2201      	movs	r2, #1
 8009114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3708      	adds	r7, #8
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
	...

0800915c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800915c:	b480      	push	{r7}
 800915e:	b085      	sub	sp, #20
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800916a:	b2db      	uxtb	r3, r3
 800916c:	2b01      	cmp	r3, #1
 800916e:	d001      	beq.n	8009174 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	e054      	b.n	800921e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2202      	movs	r2, #2
 8009178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68da      	ldr	r2, [r3, #12]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f042 0201 	orr.w	r2, r2, #1
 800918a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a26      	ldr	r2, [pc, #152]	; (800922c <HAL_TIM_Base_Start_IT+0xd0>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d022      	beq.n	80091dc <HAL_TIM_Base_Start_IT+0x80>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800919e:	d01d      	beq.n	80091dc <HAL_TIM_Base_Start_IT+0x80>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a22      	ldr	r2, [pc, #136]	; (8009230 <HAL_TIM_Base_Start_IT+0xd4>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d018      	beq.n	80091dc <HAL_TIM_Base_Start_IT+0x80>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a21      	ldr	r2, [pc, #132]	; (8009234 <HAL_TIM_Base_Start_IT+0xd8>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d013      	beq.n	80091dc <HAL_TIM_Base_Start_IT+0x80>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a1f      	ldr	r2, [pc, #124]	; (8009238 <HAL_TIM_Base_Start_IT+0xdc>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d00e      	beq.n	80091dc <HAL_TIM_Base_Start_IT+0x80>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a1e      	ldr	r2, [pc, #120]	; (800923c <HAL_TIM_Base_Start_IT+0xe0>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d009      	beq.n	80091dc <HAL_TIM_Base_Start_IT+0x80>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a1c      	ldr	r2, [pc, #112]	; (8009240 <HAL_TIM_Base_Start_IT+0xe4>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d004      	beq.n	80091dc <HAL_TIM_Base_Start_IT+0x80>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a1b      	ldr	r2, [pc, #108]	; (8009244 <HAL_TIM_Base_Start_IT+0xe8>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d115      	bne.n	8009208 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	689a      	ldr	r2, [r3, #8]
 80091e2:	4b19      	ldr	r3, [pc, #100]	; (8009248 <HAL_TIM_Base_Start_IT+0xec>)
 80091e4:	4013      	ands	r3, r2
 80091e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2b06      	cmp	r3, #6
 80091ec:	d015      	beq.n	800921a <HAL_TIM_Base_Start_IT+0xbe>
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091f4:	d011      	beq.n	800921a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f042 0201 	orr.w	r2, r2, #1
 8009204:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009206:	e008      	b.n	800921a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f042 0201 	orr.w	r2, r2, #1
 8009216:	601a      	str	r2, [r3, #0]
 8009218:	e000      	b.n	800921c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800921a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3714      	adds	r7, #20
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	40010000 	.word	0x40010000
 8009230:	40000400 	.word	0x40000400
 8009234:	40000800 	.word	0x40000800
 8009238:	40000c00 	.word	0x40000c00
 800923c:	40010400 	.word	0x40010400
 8009240:	40001800 	.word	0x40001800
 8009244:	40014000 	.word	0x40014000
 8009248:	00010007 	.word	0x00010007

0800924c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d101      	bne.n	800925e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	e049      	b.n	80092f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009264:	b2db      	uxtb	r3, r3
 8009266:	2b00      	cmp	r3, #0
 8009268:	d106      	bne.n	8009278 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 f841 	bl	80092fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2202      	movs	r2, #2
 800927c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	3304      	adds	r3, #4
 8009288:	4619      	mov	r1, r3
 800928a:	4610      	mov	r0, r2
 800928c:	f000 fdd6 	bl	8009e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80092fa:	b480      	push	{r7}
 80092fc:	b083      	sub	sp, #12
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009302:	bf00      	nop
 8009304:	370c      	adds	r7, #12
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
	...

08009310 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d109      	bne.n	8009334 <HAL_TIM_PWM_Start+0x24>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009326:	b2db      	uxtb	r3, r3
 8009328:	2b01      	cmp	r3, #1
 800932a:	bf14      	ite	ne
 800932c:	2301      	movne	r3, #1
 800932e:	2300      	moveq	r3, #0
 8009330:	b2db      	uxtb	r3, r3
 8009332:	e03c      	b.n	80093ae <HAL_TIM_PWM_Start+0x9e>
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	2b04      	cmp	r3, #4
 8009338:	d109      	bne.n	800934e <HAL_TIM_PWM_Start+0x3e>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009340:	b2db      	uxtb	r3, r3
 8009342:	2b01      	cmp	r3, #1
 8009344:	bf14      	ite	ne
 8009346:	2301      	movne	r3, #1
 8009348:	2300      	moveq	r3, #0
 800934a:	b2db      	uxtb	r3, r3
 800934c:	e02f      	b.n	80093ae <HAL_TIM_PWM_Start+0x9e>
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	2b08      	cmp	r3, #8
 8009352:	d109      	bne.n	8009368 <HAL_TIM_PWM_Start+0x58>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800935a:	b2db      	uxtb	r3, r3
 800935c:	2b01      	cmp	r3, #1
 800935e:	bf14      	ite	ne
 8009360:	2301      	movne	r3, #1
 8009362:	2300      	moveq	r3, #0
 8009364:	b2db      	uxtb	r3, r3
 8009366:	e022      	b.n	80093ae <HAL_TIM_PWM_Start+0x9e>
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	2b0c      	cmp	r3, #12
 800936c:	d109      	bne.n	8009382 <HAL_TIM_PWM_Start+0x72>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009374:	b2db      	uxtb	r3, r3
 8009376:	2b01      	cmp	r3, #1
 8009378:	bf14      	ite	ne
 800937a:	2301      	movne	r3, #1
 800937c:	2300      	moveq	r3, #0
 800937e:	b2db      	uxtb	r3, r3
 8009380:	e015      	b.n	80093ae <HAL_TIM_PWM_Start+0x9e>
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	2b10      	cmp	r3, #16
 8009386:	d109      	bne.n	800939c <HAL_TIM_PWM_Start+0x8c>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800938e:	b2db      	uxtb	r3, r3
 8009390:	2b01      	cmp	r3, #1
 8009392:	bf14      	ite	ne
 8009394:	2301      	movne	r3, #1
 8009396:	2300      	moveq	r3, #0
 8009398:	b2db      	uxtb	r3, r3
 800939a:	e008      	b.n	80093ae <HAL_TIM_PWM_Start+0x9e>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	bf14      	ite	ne
 80093a8:	2301      	movne	r3, #1
 80093aa:	2300      	moveq	r3, #0
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d001      	beq.n	80093b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e0a1      	b.n	80094fa <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d104      	bne.n	80093c6 <HAL_TIM_PWM_Start+0xb6>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2202      	movs	r2, #2
 80093c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093c4:	e023      	b.n	800940e <HAL_TIM_PWM_Start+0xfe>
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	2b04      	cmp	r3, #4
 80093ca:	d104      	bne.n	80093d6 <HAL_TIM_PWM_Start+0xc6>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2202      	movs	r2, #2
 80093d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093d4:	e01b      	b.n	800940e <HAL_TIM_PWM_Start+0xfe>
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	2b08      	cmp	r3, #8
 80093da:	d104      	bne.n	80093e6 <HAL_TIM_PWM_Start+0xd6>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2202      	movs	r2, #2
 80093e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093e4:	e013      	b.n	800940e <HAL_TIM_PWM_Start+0xfe>
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	2b0c      	cmp	r3, #12
 80093ea:	d104      	bne.n	80093f6 <HAL_TIM_PWM_Start+0xe6>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2202      	movs	r2, #2
 80093f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80093f4:	e00b      	b.n	800940e <HAL_TIM_PWM_Start+0xfe>
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	2b10      	cmp	r3, #16
 80093fa:	d104      	bne.n	8009406 <HAL_TIM_PWM_Start+0xf6>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2202      	movs	r2, #2
 8009400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009404:	e003      	b.n	800940e <HAL_TIM_PWM_Start+0xfe>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2202      	movs	r2, #2
 800940a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2201      	movs	r2, #1
 8009414:	6839      	ldr	r1, [r7, #0]
 8009416:	4618      	mov	r0, r3
 8009418:	f001 f91e 	bl	800a658 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a38      	ldr	r2, [pc, #224]	; (8009504 <HAL_TIM_PWM_Start+0x1f4>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d013      	beq.n	800944e <HAL_TIM_PWM_Start+0x13e>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a37      	ldr	r2, [pc, #220]	; (8009508 <HAL_TIM_PWM_Start+0x1f8>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d00e      	beq.n	800944e <HAL_TIM_PWM_Start+0x13e>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a35      	ldr	r2, [pc, #212]	; (800950c <HAL_TIM_PWM_Start+0x1fc>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d009      	beq.n	800944e <HAL_TIM_PWM_Start+0x13e>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a34      	ldr	r2, [pc, #208]	; (8009510 <HAL_TIM_PWM_Start+0x200>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d004      	beq.n	800944e <HAL_TIM_PWM_Start+0x13e>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a32      	ldr	r2, [pc, #200]	; (8009514 <HAL_TIM_PWM_Start+0x204>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d101      	bne.n	8009452 <HAL_TIM_PWM_Start+0x142>
 800944e:	2301      	movs	r3, #1
 8009450:	e000      	b.n	8009454 <HAL_TIM_PWM_Start+0x144>
 8009452:	2300      	movs	r3, #0
 8009454:	2b00      	cmp	r3, #0
 8009456:	d007      	beq.n	8009468 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009466:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a25      	ldr	r2, [pc, #148]	; (8009504 <HAL_TIM_PWM_Start+0x1f4>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d022      	beq.n	80094b8 <HAL_TIM_PWM_Start+0x1a8>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800947a:	d01d      	beq.n	80094b8 <HAL_TIM_PWM_Start+0x1a8>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a25      	ldr	r2, [pc, #148]	; (8009518 <HAL_TIM_PWM_Start+0x208>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d018      	beq.n	80094b8 <HAL_TIM_PWM_Start+0x1a8>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a24      	ldr	r2, [pc, #144]	; (800951c <HAL_TIM_PWM_Start+0x20c>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d013      	beq.n	80094b8 <HAL_TIM_PWM_Start+0x1a8>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a22      	ldr	r2, [pc, #136]	; (8009520 <HAL_TIM_PWM_Start+0x210>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d00e      	beq.n	80094b8 <HAL_TIM_PWM_Start+0x1a8>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a1a      	ldr	r2, [pc, #104]	; (8009508 <HAL_TIM_PWM_Start+0x1f8>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d009      	beq.n	80094b8 <HAL_TIM_PWM_Start+0x1a8>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a1e      	ldr	r2, [pc, #120]	; (8009524 <HAL_TIM_PWM_Start+0x214>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d004      	beq.n	80094b8 <HAL_TIM_PWM_Start+0x1a8>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a16      	ldr	r2, [pc, #88]	; (800950c <HAL_TIM_PWM_Start+0x1fc>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d115      	bne.n	80094e4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	689a      	ldr	r2, [r3, #8]
 80094be:	4b1a      	ldr	r3, [pc, #104]	; (8009528 <HAL_TIM_PWM_Start+0x218>)
 80094c0:	4013      	ands	r3, r2
 80094c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2b06      	cmp	r3, #6
 80094c8:	d015      	beq.n	80094f6 <HAL_TIM_PWM_Start+0x1e6>
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094d0:	d011      	beq.n	80094f6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f042 0201 	orr.w	r2, r2, #1
 80094e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094e2:	e008      	b.n	80094f6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f042 0201 	orr.w	r2, r2, #1
 80094f2:	601a      	str	r2, [r3, #0]
 80094f4:	e000      	b.n	80094f8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	40010000 	.word	0x40010000
 8009508:	40010400 	.word	0x40010400
 800950c:	40014000 	.word	0x40014000
 8009510:	40014400 	.word	0x40014400
 8009514:	40014800 	.word	0x40014800
 8009518:	40000400 	.word	0x40000400
 800951c:	40000800 	.word	0x40000800
 8009520:	40000c00 	.word	0x40000c00
 8009524:	40001800 	.word	0x40001800
 8009528:	00010007 	.word	0x00010007

0800952c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b086      	sub	sp, #24
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d101      	bne.n	8009540 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	e08f      	b.n	8009660 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009546:	b2db      	uxtb	r3, r3
 8009548:	2b00      	cmp	r3, #0
 800954a:	d106      	bne.n	800955a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f7f9 fab5 	bl	8002ac4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2202      	movs	r2, #2
 800955e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	6899      	ldr	r1, [r3, #8]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	4b3e      	ldr	r3, [pc, #248]	; (8009668 <HAL_TIM_Encoder_Init+0x13c>)
 800956e:	400b      	ands	r3, r1
 8009570:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	3304      	adds	r3, #4
 800957a:	4619      	mov	r1, r3
 800957c:	4610      	mov	r0, r2
 800957e:	f000 fc5d 	bl	8009e3c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	6a1b      	ldr	r3, [r3, #32]
 8009598:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	697a      	ldr	r2, [r7, #20]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80095a4:	693a      	ldr	r2, [r7, #16]
 80095a6:	4b31      	ldr	r3, [pc, #196]	; (800966c <HAL_TIM_Encoder_Init+0x140>)
 80095a8:	4013      	ands	r3, r2
 80095aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	689a      	ldr	r2, [r3, #8]
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	699b      	ldr	r3, [r3, #24]
 80095b4:	021b      	lsls	r3, r3, #8
 80095b6:	4313      	orrs	r3, r2
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80095be:	693a      	ldr	r2, [r7, #16]
 80095c0:	4b2b      	ldr	r3, [pc, #172]	; (8009670 <HAL_TIM_Encoder_Init+0x144>)
 80095c2:	4013      	ands	r3, r2
 80095c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80095c6:	693a      	ldr	r2, [r7, #16]
 80095c8:	4b2a      	ldr	r3, [pc, #168]	; (8009674 <HAL_TIM_Encoder_Init+0x148>)
 80095ca:	4013      	ands	r3, r2
 80095cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	68da      	ldr	r2, [r3, #12]
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	69db      	ldr	r3, [r3, #28]
 80095d6:	021b      	lsls	r3, r3, #8
 80095d8:	4313      	orrs	r3, r2
 80095da:	693a      	ldr	r2, [r7, #16]
 80095dc:	4313      	orrs	r3, r2
 80095de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	011a      	lsls	r2, r3, #4
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	6a1b      	ldr	r3, [r3, #32]
 80095ea:	031b      	lsls	r3, r3, #12
 80095ec:	4313      	orrs	r3, r2
 80095ee:	693a      	ldr	r2, [r7, #16]
 80095f0:	4313      	orrs	r3, r2
 80095f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80095fa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009602:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	685a      	ldr	r2, [r3, #4]
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	695b      	ldr	r3, [r3, #20]
 800960c:	011b      	lsls	r3, r3, #4
 800960e:	4313      	orrs	r3, r2
 8009610:	68fa      	ldr	r2, [r7, #12]
 8009612:	4313      	orrs	r3, r2
 8009614:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	697a      	ldr	r2, [r7, #20]
 800961c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	693a      	ldr	r2, [r7, #16]
 8009624:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2201      	movs	r2, #1
 8009632:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2201      	movs	r2, #1
 800963a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2201      	movs	r2, #1
 8009642:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2201      	movs	r2, #1
 800964a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2201      	movs	r2, #1
 8009652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2201      	movs	r2, #1
 800965a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3718      	adds	r7, #24
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	fffebff8 	.word	0xfffebff8
 800966c:	fffffcfc 	.word	0xfffffcfc
 8009670:	fffff3f3 	.word	0xfffff3f3
 8009674:	ffff0f0f 	.word	0xffff0f0f

08009678 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009688:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009690:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009698:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096a0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d110      	bne.n	80096ca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80096a8:	7bfb      	ldrb	r3, [r7, #15]
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d102      	bne.n	80096b4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80096ae:	7b7b      	ldrb	r3, [r7, #13]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d001      	beq.n	80096b8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	e069      	b.n	800978c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2202      	movs	r2, #2
 80096bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2202      	movs	r2, #2
 80096c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096c8:	e031      	b.n	800972e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	2b04      	cmp	r3, #4
 80096ce:	d110      	bne.n	80096f2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80096d0:	7bbb      	ldrb	r3, [r7, #14]
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d102      	bne.n	80096dc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80096d6:	7b3b      	ldrb	r3, [r7, #12]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d001      	beq.n	80096e0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e055      	b.n	800978c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2202      	movs	r2, #2
 80096e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2202      	movs	r2, #2
 80096ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096f0:	e01d      	b.n	800972e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80096f2:	7bfb      	ldrb	r3, [r7, #15]
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d108      	bne.n	800970a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80096f8:	7bbb      	ldrb	r3, [r7, #14]
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d105      	bne.n	800970a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80096fe:	7b7b      	ldrb	r3, [r7, #13]
 8009700:	2b01      	cmp	r3, #1
 8009702:	d102      	bne.n	800970a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009704:	7b3b      	ldrb	r3, [r7, #12]
 8009706:	2b01      	cmp	r3, #1
 8009708:	d001      	beq.n	800970e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	e03e      	b.n	800978c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2202      	movs	r2, #2
 8009712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2202      	movs	r2, #2
 800971a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2202      	movs	r2, #2
 8009722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2202      	movs	r2, #2
 800972a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d003      	beq.n	800973c <HAL_TIM_Encoder_Start+0xc4>
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	2b04      	cmp	r3, #4
 8009738:	d008      	beq.n	800974c <HAL_TIM_Encoder_Start+0xd4>
 800973a:	e00f      	b.n	800975c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2201      	movs	r2, #1
 8009742:	2100      	movs	r1, #0
 8009744:	4618      	mov	r0, r3
 8009746:	f000 ff87 	bl	800a658 <TIM_CCxChannelCmd>
      break;
 800974a:	e016      	b.n	800977a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2201      	movs	r2, #1
 8009752:	2104      	movs	r1, #4
 8009754:	4618      	mov	r0, r3
 8009756:	f000 ff7f 	bl	800a658 <TIM_CCxChannelCmd>
      break;
 800975a:	e00e      	b.n	800977a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2201      	movs	r2, #1
 8009762:	2100      	movs	r1, #0
 8009764:	4618      	mov	r0, r3
 8009766:	f000 ff77 	bl	800a658 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2201      	movs	r2, #1
 8009770:	2104      	movs	r1, #4
 8009772:	4618      	mov	r0, r3
 8009774:	f000 ff70 	bl	800a658 <TIM_CCxChannelCmd>
      break;
 8009778:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f042 0201 	orr.w	r2, r2, #1
 8009788:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800978a:	2300      	movs	r3, #0
}
 800978c:	4618      	mov	r0, r3
 800978e:	3710      	adds	r7, #16
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	f003 0302 	and.w	r3, r3, #2
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	d122      	bne.n	80097f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	f003 0302 	and.w	r3, r3, #2
 80097b4:	2b02      	cmp	r3, #2
 80097b6:	d11b      	bne.n	80097f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f06f 0202 	mvn.w	r2, #2
 80097c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2201      	movs	r2, #1
 80097c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	699b      	ldr	r3, [r3, #24]
 80097ce:	f003 0303 	and.w	r3, r3, #3
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d003      	beq.n	80097de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fb12 	bl	8009e00 <HAL_TIM_IC_CaptureCallback>
 80097dc:	e005      	b.n	80097ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fb04 	bl	8009dec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 fb15 	bl	8009e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	f003 0304 	and.w	r3, r3, #4
 80097fa:	2b04      	cmp	r3, #4
 80097fc:	d122      	bne.n	8009844 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	f003 0304 	and.w	r3, r3, #4
 8009808:	2b04      	cmp	r3, #4
 800980a:	d11b      	bne.n	8009844 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f06f 0204 	mvn.w	r2, #4
 8009814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2202      	movs	r2, #2
 800981a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	699b      	ldr	r3, [r3, #24]
 8009822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009826:	2b00      	cmp	r3, #0
 8009828:	d003      	beq.n	8009832 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fae8 	bl	8009e00 <HAL_TIM_IC_CaptureCallback>
 8009830:	e005      	b.n	800983e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 fada 	bl	8009dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 faeb 	bl	8009e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	691b      	ldr	r3, [r3, #16]
 800984a:	f003 0308 	and.w	r3, r3, #8
 800984e:	2b08      	cmp	r3, #8
 8009850:	d122      	bne.n	8009898 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	f003 0308 	and.w	r3, r3, #8
 800985c:	2b08      	cmp	r3, #8
 800985e:	d11b      	bne.n	8009898 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f06f 0208 	mvn.w	r2, #8
 8009868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2204      	movs	r2, #4
 800986e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	69db      	ldr	r3, [r3, #28]
 8009876:	f003 0303 	and.w	r3, r3, #3
 800987a:	2b00      	cmp	r3, #0
 800987c:	d003      	beq.n	8009886 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 fabe 	bl	8009e00 <HAL_TIM_IC_CaptureCallback>
 8009884:	e005      	b.n	8009892 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fab0 	bl	8009dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 fac1 	bl	8009e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	f003 0310 	and.w	r3, r3, #16
 80098a2:	2b10      	cmp	r3, #16
 80098a4:	d122      	bne.n	80098ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	f003 0310 	and.w	r3, r3, #16
 80098b0:	2b10      	cmp	r3, #16
 80098b2:	d11b      	bne.n	80098ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f06f 0210 	mvn.w	r2, #16
 80098bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2208      	movs	r2, #8
 80098c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	69db      	ldr	r3, [r3, #28]
 80098ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d003      	beq.n	80098da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 fa94 	bl	8009e00 <HAL_TIM_IC_CaptureCallback>
 80098d8:	e005      	b.n	80098e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fa86 	bl	8009dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 fa97 	bl	8009e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2200      	movs	r2, #0
 80098ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	691b      	ldr	r3, [r3, #16]
 80098f2:	f003 0301 	and.w	r3, r3, #1
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d10e      	bne.n	8009918 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	f003 0301 	and.w	r3, r3, #1
 8009904:	2b01      	cmp	r3, #1
 8009906:	d107      	bne.n	8009918 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f06f 0201 	mvn.w	r2, #1
 8009910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f7f7 f9d0 	bl	8000cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009922:	2b80      	cmp	r3, #128	; 0x80
 8009924:	d10e      	bne.n	8009944 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009930:	2b80      	cmp	r3, #128	; 0x80
 8009932:	d107      	bne.n	8009944 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800993c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 ff48 	bl	800a7d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800994e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009952:	d10e      	bne.n	8009972 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800995e:	2b80      	cmp	r3, #128	; 0x80
 8009960:	d107      	bne.n	8009972 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800996a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 ff3b 	bl	800a7e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800997c:	2b40      	cmp	r3, #64	; 0x40
 800997e:	d10e      	bne.n	800999e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	68db      	ldr	r3, [r3, #12]
 8009986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800998a:	2b40      	cmp	r3, #64	; 0x40
 800998c:	d107      	bne.n	800999e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fa45 	bl	8009e28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	f003 0320 	and.w	r3, r3, #32
 80099a8:	2b20      	cmp	r3, #32
 80099aa:	d10e      	bne.n	80099ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	f003 0320 	and.w	r3, r3, #32
 80099b6:	2b20      	cmp	r3, #32
 80099b8:	d107      	bne.n	80099ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f06f 0220 	mvn.w	r2, #32
 80099c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 fefb 	bl	800a7c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80099ca:	bf00      	nop
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
	...

080099d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b086      	sub	sp, #24
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099e0:	2300      	movs	r3, #0
 80099e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d101      	bne.n	80099f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80099ee:	2302      	movs	r3, #2
 80099f0:	e0ff      	b.n	8009bf2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2201      	movs	r2, #1
 80099f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2b14      	cmp	r3, #20
 80099fe:	f200 80f0 	bhi.w	8009be2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009a02:	a201      	add	r2, pc, #4	; (adr r2, 8009a08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a08:	08009a5d 	.word	0x08009a5d
 8009a0c:	08009be3 	.word	0x08009be3
 8009a10:	08009be3 	.word	0x08009be3
 8009a14:	08009be3 	.word	0x08009be3
 8009a18:	08009a9d 	.word	0x08009a9d
 8009a1c:	08009be3 	.word	0x08009be3
 8009a20:	08009be3 	.word	0x08009be3
 8009a24:	08009be3 	.word	0x08009be3
 8009a28:	08009adf 	.word	0x08009adf
 8009a2c:	08009be3 	.word	0x08009be3
 8009a30:	08009be3 	.word	0x08009be3
 8009a34:	08009be3 	.word	0x08009be3
 8009a38:	08009b1f 	.word	0x08009b1f
 8009a3c:	08009be3 	.word	0x08009be3
 8009a40:	08009be3 	.word	0x08009be3
 8009a44:	08009be3 	.word	0x08009be3
 8009a48:	08009b61 	.word	0x08009b61
 8009a4c:	08009be3 	.word	0x08009be3
 8009a50:	08009be3 	.word	0x08009be3
 8009a54:	08009be3 	.word	0x08009be3
 8009a58:	08009ba1 	.word	0x08009ba1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	68b9      	ldr	r1, [r7, #8]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f000 fa84 	bl	8009f70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	699a      	ldr	r2, [r3, #24]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f042 0208 	orr.w	r2, r2, #8
 8009a76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	699a      	ldr	r2, [r3, #24]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f022 0204 	bic.w	r2, r2, #4
 8009a86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	6999      	ldr	r1, [r3, #24]
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	691a      	ldr	r2, [r3, #16]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	430a      	orrs	r2, r1
 8009a98:	619a      	str	r2, [r3, #24]
      break;
 8009a9a:	e0a5      	b.n	8009be8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	68b9      	ldr	r1, [r7, #8]
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f000 faf4 	bl	800a090 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	699a      	ldr	r2, [r3, #24]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ab6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	699a      	ldr	r2, [r3, #24]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	6999      	ldr	r1, [r3, #24]
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	691b      	ldr	r3, [r3, #16]
 8009ad2:	021a      	lsls	r2, r3, #8
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	430a      	orrs	r2, r1
 8009ada:	619a      	str	r2, [r3, #24]
      break;
 8009adc:	e084      	b.n	8009be8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68b9      	ldr	r1, [r7, #8]
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f000 fb5d 	bl	800a1a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	69da      	ldr	r2, [r3, #28]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f042 0208 	orr.w	r2, r2, #8
 8009af8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	69da      	ldr	r2, [r3, #28]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f022 0204 	bic.w	r2, r2, #4
 8009b08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	69d9      	ldr	r1, [r3, #28]
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	691a      	ldr	r2, [r3, #16]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	430a      	orrs	r2, r1
 8009b1a:	61da      	str	r2, [r3, #28]
      break;
 8009b1c:	e064      	b.n	8009be8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	68b9      	ldr	r1, [r7, #8]
 8009b24:	4618      	mov	r0, r3
 8009b26:	f000 fbc5 	bl	800a2b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	69da      	ldr	r2, [r3, #28]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	69da      	ldr	r2, [r3, #28]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	69d9      	ldr	r1, [r3, #28]
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	021a      	lsls	r2, r3, #8
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	430a      	orrs	r2, r1
 8009b5c:	61da      	str	r2, [r3, #28]
      break;
 8009b5e:	e043      	b.n	8009be8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	68b9      	ldr	r1, [r7, #8]
 8009b66:	4618      	mov	r0, r3
 8009b68:	f000 fc0e 	bl	800a388 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f042 0208 	orr.w	r2, r2, #8
 8009b7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f022 0204 	bic.w	r2, r2, #4
 8009b8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	691a      	ldr	r2, [r3, #16]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	430a      	orrs	r2, r1
 8009b9c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009b9e:	e023      	b.n	8009be8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	68b9      	ldr	r1, [r7, #8]
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f000 fc52 	bl	800a450 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	021a      	lsls	r2, r3, #8
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	430a      	orrs	r2, r1
 8009bde:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009be0:	e002      	b.n	8009be8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	75fb      	strb	r3, [r7, #23]
      break;
 8009be6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3718      	adds	r7, #24
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop

08009bfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d101      	bne.n	8009c18 <HAL_TIM_ConfigClockSource+0x1c>
 8009c14:	2302      	movs	r3, #2
 8009c16:	e0dc      	b.n	8009dd2 <HAL_TIM_ConfigClockSource+0x1d6>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2202      	movs	r2, #2
 8009c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	4b6a      	ldr	r3, [pc, #424]	; (8009ddc <HAL_TIM_ConfigClockSource+0x1e0>)
 8009c34:	4013      	ands	r3, r2
 8009c36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	68ba      	ldr	r2, [r7, #8]
 8009c46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a64      	ldr	r2, [pc, #400]	; (8009de0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	f000 80a9 	beq.w	8009da6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009c54:	4a62      	ldr	r2, [pc, #392]	; (8009de0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	f200 80ae 	bhi.w	8009db8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c5c:	4a61      	ldr	r2, [pc, #388]	; (8009de4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	f000 80a1 	beq.w	8009da6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009c64:	4a5f      	ldr	r2, [pc, #380]	; (8009de4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	f200 80a6 	bhi.w	8009db8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c6c:	4a5e      	ldr	r2, [pc, #376]	; (8009de8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	f000 8099 	beq.w	8009da6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009c74:	4a5c      	ldr	r2, [pc, #368]	; (8009de8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	f200 809e 	bhi.w	8009db8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c7c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009c80:	f000 8091 	beq.w	8009da6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009c84:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009c88:	f200 8096 	bhi.w	8009db8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c90:	f000 8089 	beq.w	8009da6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009c94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c98:	f200 808e 	bhi.w	8009db8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ca0:	d03e      	beq.n	8009d20 <HAL_TIM_ConfigClockSource+0x124>
 8009ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ca6:	f200 8087 	bhi.w	8009db8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cae:	f000 8086 	beq.w	8009dbe <HAL_TIM_ConfigClockSource+0x1c2>
 8009cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cb6:	d87f      	bhi.n	8009db8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009cb8:	2b70      	cmp	r3, #112	; 0x70
 8009cba:	d01a      	beq.n	8009cf2 <HAL_TIM_ConfigClockSource+0xf6>
 8009cbc:	2b70      	cmp	r3, #112	; 0x70
 8009cbe:	d87b      	bhi.n	8009db8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009cc0:	2b60      	cmp	r3, #96	; 0x60
 8009cc2:	d050      	beq.n	8009d66 <HAL_TIM_ConfigClockSource+0x16a>
 8009cc4:	2b60      	cmp	r3, #96	; 0x60
 8009cc6:	d877      	bhi.n	8009db8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009cc8:	2b50      	cmp	r3, #80	; 0x50
 8009cca:	d03c      	beq.n	8009d46 <HAL_TIM_ConfigClockSource+0x14a>
 8009ccc:	2b50      	cmp	r3, #80	; 0x50
 8009cce:	d873      	bhi.n	8009db8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009cd0:	2b40      	cmp	r3, #64	; 0x40
 8009cd2:	d058      	beq.n	8009d86 <HAL_TIM_ConfigClockSource+0x18a>
 8009cd4:	2b40      	cmp	r3, #64	; 0x40
 8009cd6:	d86f      	bhi.n	8009db8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009cd8:	2b30      	cmp	r3, #48	; 0x30
 8009cda:	d064      	beq.n	8009da6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009cdc:	2b30      	cmp	r3, #48	; 0x30
 8009cde:	d86b      	bhi.n	8009db8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ce0:	2b20      	cmp	r3, #32
 8009ce2:	d060      	beq.n	8009da6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009ce4:	2b20      	cmp	r3, #32
 8009ce6:	d867      	bhi.n	8009db8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d05c      	beq.n	8009da6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009cec:	2b10      	cmp	r3, #16
 8009cee:	d05a      	beq.n	8009da6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009cf0:	e062      	b.n	8009db8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6818      	ldr	r0, [r3, #0]
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	6899      	ldr	r1, [r3, #8]
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	685a      	ldr	r2, [r3, #4]
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	f000 fc89 	bl	800a618 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009d14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	68ba      	ldr	r2, [r7, #8]
 8009d1c:	609a      	str	r2, [r3, #8]
      break;
 8009d1e:	e04f      	b.n	8009dc0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6818      	ldr	r0, [r3, #0]
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	6899      	ldr	r1, [r3, #8]
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	685a      	ldr	r2, [r3, #4]
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	f000 fc72 	bl	800a618 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	689a      	ldr	r2, [r3, #8]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d42:	609a      	str	r2, [r3, #8]
      break;
 8009d44:	e03c      	b.n	8009dc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6818      	ldr	r0, [r3, #0]
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	6859      	ldr	r1, [r3, #4]
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	461a      	mov	r2, r3
 8009d54:	f000 fbe2 	bl	800a51c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2150      	movs	r1, #80	; 0x50
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f000 fc3c 	bl	800a5dc <TIM_ITRx_SetConfig>
      break;
 8009d64:	e02c      	b.n	8009dc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6818      	ldr	r0, [r3, #0]
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	6859      	ldr	r1, [r3, #4]
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	461a      	mov	r2, r3
 8009d74:	f000 fc01 	bl	800a57a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2160      	movs	r1, #96	; 0x60
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f000 fc2c 	bl	800a5dc <TIM_ITRx_SetConfig>
      break;
 8009d84:	e01c      	b.n	8009dc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6818      	ldr	r0, [r3, #0]
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	6859      	ldr	r1, [r3, #4]
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	461a      	mov	r2, r3
 8009d94:	f000 fbc2 	bl	800a51c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	2140      	movs	r1, #64	; 0x40
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f000 fc1c 	bl	800a5dc <TIM_ITRx_SetConfig>
      break;
 8009da4:	e00c      	b.n	8009dc0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4619      	mov	r1, r3
 8009db0:	4610      	mov	r0, r2
 8009db2:	f000 fc13 	bl	800a5dc <TIM_ITRx_SetConfig>
      break;
 8009db6:	e003      	b.n	8009dc0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009db8:	2301      	movs	r3, #1
 8009dba:	73fb      	strb	r3, [r7, #15]
      break;
 8009dbc:	e000      	b.n	8009dc0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009dbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	ffceff88 	.word	0xffceff88
 8009de0:	00100040 	.word	0x00100040
 8009de4:	00100030 	.word	0x00100030
 8009de8:	00100020 	.word	0x00100020

08009dec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009df4:	bf00      	nop
 8009df6:	370c      	adds	r7, #12
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e08:	bf00      	nop
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e1c:	bf00      	nop
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e30:	bf00      	nop
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b085      	sub	sp, #20
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4a40      	ldr	r2, [pc, #256]	; (8009f50 <TIM_Base_SetConfig+0x114>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d013      	beq.n	8009e7c <TIM_Base_SetConfig+0x40>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e5a:	d00f      	beq.n	8009e7c <TIM_Base_SetConfig+0x40>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4a3d      	ldr	r2, [pc, #244]	; (8009f54 <TIM_Base_SetConfig+0x118>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d00b      	beq.n	8009e7c <TIM_Base_SetConfig+0x40>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a3c      	ldr	r2, [pc, #240]	; (8009f58 <TIM_Base_SetConfig+0x11c>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d007      	beq.n	8009e7c <TIM_Base_SetConfig+0x40>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4a3b      	ldr	r2, [pc, #236]	; (8009f5c <TIM_Base_SetConfig+0x120>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d003      	beq.n	8009e7c <TIM_Base_SetConfig+0x40>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4a3a      	ldr	r2, [pc, #232]	; (8009f60 <TIM_Base_SetConfig+0x124>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d108      	bne.n	8009e8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4a2f      	ldr	r2, [pc, #188]	; (8009f50 <TIM_Base_SetConfig+0x114>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d01f      	beq.n	8009ed6 <TIM_Base_SetConfig+0x9a>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e9c:	d01b      	beq.n	8009ed6 <TIM_Base_SetConfig+0x9a>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4a2c      	ldr	r2, [pc, #176]	; (8009f54 <TIM_Base_SetConfig+0x118>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d017      	beq.n	8009ed6 <TIM_Base_SetConfig+0x9a>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4a2b      	ldr	r2, [pc, #172]	; (8009f58 <TIM_Base_SetConfig+0x11c>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d013      	beq.n	8009ed6 <TIM_Base_SetConfig+0x9a>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4a2a      	ldr	r2, [pc, #168]	; (8009f5c <TIM_Base_SetConfig+0x120>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d00f      	beq.n	8009ed6 <TIM_Base_SetConfig+0x9a>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	4a29      	ldr	r2, [pc, #164]	; (8009f60 <TIM_Base_SetConfig+0x124>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d00b      	beq.n	8009ed6 <TIM_Base_SetConfig+0x9a>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	4a28      	ldr	r2, [pc, #160]	; (8009f64 <TIM_Base_SetConfig+0x128>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d007      	beq.n	8009ed6 <TIM_Base_SetConfig+0x9a>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	4a27      	ldr	r2, [pc, #156]	; (8009f68 <TIM_Base_SetConfig+0x12c>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d003      	beq.n	8009ed6 <TIM_Base_SetConfig+0x9a>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	4a26      	ldr	r2, [pc, #152]	; (8009f6c <TIM_Base_SetConfig+0x130>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d108      	bne.n	8009ee8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009edc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	695b      	ldr	r3, [r3, #20]
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	689a      	ldr	r2, [r3, #8]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4a10      	ldr	r2, [pc, #64]	; (8009f50 <TIM_Base_SetConfig+0x114>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d00f      	beq.n	8009f34 <TIM_Base_SetConfig+0xf8>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a12      	ldr	r2, [pc, #72]	; (8009f60 <TIM_Base_SetConfig+0x124>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d00b      	beq.n	8009f34 <TIM_Base_SetConfig+0xf8>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	4a11      	ldr	r2, [pc, #68]	; (8009f64 <TIM_Base_SetConfig+0x128>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d007      	beq.n	8009f34 <TIM_Base_SetConfig+0xf8>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	4a10      	ldr	r2, [pc, #64]	; (8009f68 <TIM_Base_SetConfig+0x12c>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d003      	beq.n	8009f34 <TIM_Base_SetConfig+0xf8>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	4a0f      	ldr	r2, [pc, #60]	; (8009f6c <TIM_Base_SetConfig+0x130>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d103      	bne.n	8009f3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	691a      	ldr	r2, [r3, #16]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	615a      	str	r2, [r3, #20]
}
 8009f42:	bf00      	nop
 8009f44:	3714      	adds	r7, #20
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop
 8009f50:	40010000 	.word	0x40010000
 8009f54:	40000400 	.word	0x40000400
 8009f58:	40000800 	.word	0x40000800
 8009f5c:	40000c00 	.word	0x40000c00
 8009f60:	40010400 	.word	0x40010400
 8009f64:	40014000 	.word	0x40014000
 8009f68:	40014400 	.word	0x40014400
 8009f6c:	40014800 	.word	0x40014800

08009f70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b087      	sub	sp, #28
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6a1b      	ldr	r3, [r3, #32]
 8009f7e:	f023 0201 	bic.w	r2, r3, #1
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6a1b      	ldr	r3, [r3, #32]
 8009f8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	699b      	ldr	r3, [r3, #24]
 8009f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	4b37      	ldr	r3, [pc, #220]	; (800a078 <TIM_OC1_SetConfig+0x108>)
 8009f9c:	4013      	ands	r3, r2
 8009f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f023 0303 	bic.w	r3, r3, #3
 8009fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	68fa      	ldr	r2, [r7, #12]
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	f023 0302 	bic.w	r3, r3, #2
 8009fb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	697a      	ldr	r2, [r7, #20]
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	4a2d      	ldr	r2, [pc, #180]	; (800a07c <TIM_OC1_SetConfig+0x10c>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d00f      	beq.n	8009fec <TIM_OC1_SetConfig+0x7c>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	4a2c      	ldr	r2, [pc, #176]	; (800a080 <TIM_OC1_SetConfig+0x110>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d00b      	beq.n	8009fec <TIM_OC1_SetConfig+0x7c>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4a2b      	ldr	r2, [pc, #172]	; (800a084 <TIM_OC1_SetConfig+0x114>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d007      	beq.n	8009fec <TIM_OC1_SetConfig+0x7c>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a2a      	ldr	r2, [pc, #168]	; (800a088 <TIM_OC1_SetConfig+0x118>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d003      	beq.n	8009fec <TIM_OC1_SetConfig+0x7c>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a29      	ldr	r2, [pc, #164]	; (800a08c <TIM_OC1_SetConfig+0x11c>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d10c      	bne.n	800a006 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	f023 0308 	bic.w	r3, r3, #8
 8009ff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	697a      	ldr	r2, [r7, #20]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	f023 0304 	bic.w	r3, r3, #4
 800a004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	4a1c      	ldr	r2, [pc, #112]	; (800a07c <TIM_OC1_SetConfig+0x10c>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d00f      	beq.n	800a02e <TIM_OC1_SetConfig+0xbe>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	4a1b      	ldr	r2, [pc, #108]	; (800a080 <TIM_OC1_SetConfig+0x110>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d00b      	beq.n	800a02e <TIM_OC1_SetConfig+0xbe>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	4a1a      	ldr	r2, [pc, #104]	; (800a084 <TIM_OC1_SetConfig+0x114>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d007      	beq.n	800a02e <TIM_OC1_SetConfig+0xbe>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4a19      	ldr	r2, [pc, #100]	; (800a088 <TIM_OC1_SetConfig+0x118>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d003      	beq.n	800a02e <TIM_OC1_SetConfig+0xbe>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4a18      	ldr	r2, [pc, #96]	; (800a08c <TIM_OC1_SetConfig+0x11c>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d111      	bne.n	800a052 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a03c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	695b      	ldr	r3, [r3, #20]
 800a042:	693a      	ldr	r2, [r7, #16]
 800a044:	4313      	orrs	r3, r2
 800a046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	699b      	ldr	r3, [r3, #24]
 800a04c:	693a      	ldr	r2, [r7, #16]
 800a04e:	4313      	orrs	r3, r2
 800a050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	693a      	ldr	r2, [r7, #16]
 800a056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	685a      	ldr	r2, [r3, #4]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	697a      	ldr	r2, [r7, #20]
 800a06a:	621a      	str	r2, [r3, #32]
}
 800a06c:	bf00      	nop
 800a06e:	371c      	adds	r7, #28
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr
 800a078:	fffeff8f 	.word	0xfffeff8f
 800a07c:	40010000 	.word	0x40010000
 800a080:	40010400 	.word	0x40010400
 800a084:	40014000 	.word	0x40014000
 800a088:	40014400 	.word	0x40014400
 800a08c:	40014800 	.word	0x40014800

0800a090 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a090:	b480      	push	{r7}
 800a092:	b087      	sub	sp, #28
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6a1b      	ldr	r3, [r3, #32]
 800a09e:	f023 0210 	bic.w	r2, r3, #16
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a1b      	ldr	r3, [r3, #32]
 800a0aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	699b      	ldr	r3, [r3, #24]
 800a0b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	4b34      	ldr	r3, [pc, #208]	; (800a18c <TIM_OC2_SetConfig+0xfc>)
 800a0bc:	4013      	ands	r3, r2
 800a0be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	021b      	lsls	r3, r3, #8
 800a0ce:	68fa      	ldr	r2, [r7, #12]
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	f023 0320 	bic.w	r3, r3, #32
 800a0da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	011b      	lsls	r3, r3, #4
 800a0e2:	697a      	ldr	r2, [r7, #20]
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4a29      	ldr	r2, [pc, #164]	; (800a190 <TIM_OC2_SetConfig+0x100>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d003      	beq.n	800a0f8 <TIM_OC2_SetConfig+0x68>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	4a28      	ldr	r2, [pc, #160]	; (800a194 <TIM_OC2_SetConfig+0x104>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d10d      	bne.n	800a114 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	68db      	ldr	r3, [r3, #12]
 800a104:	011b      	lsls	r3, r3, #4
 800a106:	697a      	ldr	r2, [r7, #20]
 800a108:	4313      	orrs	r3, r2
 800a10a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a112:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4a1e      	ldr	r2, [pc, #120]	; (800a190 <TIM_OC2_SetConfig+0x100>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d00f      	beq.n	800a13c <TIM_OC2_SetConfig+0xac>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4a1d      	ldr	r2, [pc, #116]	; (800a194 <TIM_OC2_SetConfig+0x104>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d00b      	beq.n	800a13c <TIM_OC2_SetConfig+0xac>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4a1c      	ldr	r2, [pc, #112]	; (800a198 <TIM_OC2_SetConfig+0x108>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d007      	beq.n	800a13c <TIM_OC2_SetConfig+0xac>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a1b      	ldr	r2, [pc, #108]	; (800a19c <TIM_OC2_SetConfig+0x10c>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d003      	beq.n	800a13c <TIM_OC2_SetConfig+0xac>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4a1a      	ldr	r2, [pc, #104]	; (800a1a0 <TIM_OC2_SetConfig+0x110>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d113      	bne.n	800a164 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a142:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a14a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	695b      	ldr	r3, [r3, #20]
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	693a      	ldr	r2, [r7, #16]
 800a154:	4313      	orrs	r3, r2
 800a156:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	699b      	ldr	r3, [r3, #24]
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	693a      	ldr	r2, [r7, #16]
 800a160:	4313      	orrs	r3, r2
 800a162:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	693a      	ldr	r2, [r7, #16]
 800a168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	685a      	ldr	r2, [r3, #4]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	697a      	ldr	r2, [r7, #20]
 800a17c:	621a      	str	r2, [r3, #32]
}
 800a17e:	bf00      	nop
 800a180:	371c      	adds	r7, #28
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	feff8fff 	.word	0xfeff8fff
 800a190:	40010000 	.word	0x40010000
 800a194:	40010400 	.word	0x40010400
 800a198:	40014000 	.word	0x40014000
 800a19c:	40014400 	.word	0x40014400
 800a1a0:	40014800 	.word	0x40014800

0800a1a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b087      	sub	sp, #28
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a1b      	ldr	r3, [r3, #32]
 800a1be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	69db      	ldr	r3, [r3, #28]
 800a1ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	4b33      	ldr	r3, [pc, #204]	; (800a29c <TIM_OC3_SetConfig+0xf8>)
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f023 0303 	bic.w	r3, r3, #3
 800a1da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	021b      	lsls	r3, r3, #8
 800a1f4:	697a      	ldr	r2, [r7, #20]
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	4a28      	ldr	r2, [pc, #160]	; (800a2a0 <TIM_OC3_SetConfig+0xfc>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d003      	beq.n	800a20a <TIM_OC3_SetConfig+0x66>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	4a27      	ldr	r2, [pc, #156]	; (800a2a4 <TIM_OC3_SetConfig+0x100>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d10d      	bne.n	800a226 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a210:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	021b      	lsls	r3, r3, #8
 800a218:	697a      	ldr	r2, [r7, #20]
 800a21a:	4313      	orrs	r3, r2
 800a21c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4a1d      	ldr	r2, [pc, #116]	; (800a2a0 <TIM_OC3_SetConfig+0xfc>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d00f      	beq.n	800a24e <TIM_OC3_SetConfig+0xaa>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4a1c      	ldr	r2, [pc, #112]	; (800a2a4 <TIM_OC3_SetConfig+0x100>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d00b      	beq.n	800a24e <TIM_OC3_SetConfig+0xaa>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4a1b      	ldr	r2, [pc, #108]	; (800a2a8 <TIM_OC3_SetConfig+0x104>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d007      	beq.n	800a24e <TIM_OC3_SetConfig+0xaa>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4a1a      	ldr	r2, [pc, #104]	; (800a2ac <TIM_OC3_SetConfig+0x108>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d003      	beq.n	800a24e <TIM_OC3_SetConfig+0xaa>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4a19      	ldr	r2, [pc, #100]	; (800a2b0 <TIM_OC3_SetConfig+0x10c>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d113      	bne.n	800a276 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a25c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	695b      	ldr	r3, [r3, #20]
 800a262:	011b      	lsls	r3, r3, #4
 800a264:	693a      	ldr	r2, [r7, #16]
 800a266:	4313      	orrs	r3, r2
 800a268:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	699b      	ldr	r3, [r3, #24]
 800a26e:	011b      	lsls	r3, r3, #4
 800a270:	693a      	ldr	r2, [r7, #16]
 800a272:	4313      	orrs	r3, r2
 800a274:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	693a      	ldr	r2, [r7, #16]
 800a27a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	685a      	ldr	r2, [r3, #4]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	697a      	ldr	r2, [r7, #20]
 800a28e:	621a      	str	r2, [r3, #32]
}
 800a290:	bf00      	nop
 800a292:	371c      	adds	r7, #28
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr
 800a29c:	fffeff8f 	.word	0xfffeff8f
 800a2a0:	40010000 	.word	0x40010000
 800a2a4:	40010400 	.word	0x40010400
 800a2a8:	40014000 	.word	0x40014000
 800a2ac:	40014400 	.word	0x40014400
 800a2b0:	40014800 	.word	0x40014800

0800a2b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b087      	sub	sp, #28
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a1b      	ldr	r3, [r3, #32]
 800a2c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a1b      	ldr	r3, [r3, #32]
 800a2ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	69db      	ldr	r3, [r3, #28]
 800a2da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a2dc:	68fa      	ldr	r2, [r7, #12]
 800a2de:	4b24      	ldr	r3, [pc, #144]	; (800a370 <TIM_OC4_SetConfig+0xbc>)
 800a2e0:	4013      	ands	r3, r2
 800a2e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	021b      	lsls	r3, r3, #8
 800a2f2:	68fa      	ldr	r2, [r7, #12]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	031b      	lsls	r3, r3, #12
 800a306:	693a      	ldr	r2, [r7, #16]
 800a308:	4313      	orrs	r3, r2
 800a30a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4a19      	ldr	r2, [pc, #100]	; (800a374 <TIM_OC4_SetConfig+0xc0>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d00f      	beq.n	800a334 <TIM_OC4_SetConfig+0x80>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4a18      	ldr	r2, [pc, #96]	; (800a378 <TIM_OC4_SetConfig+0xc4>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d00b      	beq.n	800a334 <TIM_OC4_SetConfig+0x80>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	4a17      	ldr	r2, [pc, #92]	; (800a37c <TIM_OC4_SetConfig+0xc8>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d007      	beq.n	800a334 <TIM_OC4_SetConfig+0x80>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	4a16      	ldr	r2, [pc, #88]	; (800a380 <TIM_OC4_SetConfig+0xcc>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d003      	beq.n	800a334 <TIM_OC4_SetConfig+0x80>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4a15      	ldr	r2, [pc, #84]	; (800a384 <TIM_OC4_SetConfig+0xd0>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d109      	bne.n	800a348 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a33a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	695b      	ldr	r3, [r3, #20]
 800a340:	019b      	lsls	r3, r3, #6
 800a342:	697a      	ldr	r2, [r7, #20]
 800a344:	4313      	orrs	r3, r2
 800a346:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	697a      	ldr	r2, [r7, #20]
 800a34c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	68fa      	ldr	r2, [r7, #12]
 800a352:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	685a      	ldr	r2, [r3, #4]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	693a      	ldr	r2, [r7, #16]
 800a360:	621a      	str	r2, [r3, #32]
}
 800a362:	bf00      	nop
 800a364:	371c      	adds	r7, #28
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr
 800a36e:	bf00      	nop
 800a370:	feff8fff 	.word	0xfeff8fff
 800a374:	40010000 	.word	0x40010000
 800a378:	40010400 	.word	0x40010400
 800a37c:	40014000 	.word	0x40014000
 800a380:	40014400 	.word	0x40014400
 800a384:	40014800 	.word	0x40014800

0800a388 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a388:	b480      	push	{r7}
 800a38a:	b087      	sub	sp, #28
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6a1b      	ldr	r3, [r3, #32]
 800a396:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a1b      	ldr	r3, [r3, #32]
 800a3a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	4b21      	ldr	r3, [pc, #132]	; (800a438 <TIM_OC5_SetConfig+0xb0>)
 800a3b4:	4013      	ands	r3, r2
 800a3b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	68fa      	ldr	r2, [r7, #12]
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a3c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	041b      	lsls	r3, r3, #16
 800a3d0:	693a      	ldr	r2, [r7, #16]
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	4a18      	ldr	r2, [pc, #96]	; (800a43c <TIM_OC5_SetConfig+0xb4>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d00f      	beq.n	800a3fe <TIM_OC5_SetConfig+0x76>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	4a17      	ldr	r2, [pc, #92]	; (800a440 <TIM_OC5_SetConfig+0xb8>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d00b      	beq.n	800a3fe <TIM_OC5_SetConfig+0x76>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4a16      	ldr	r2, [pc, #88]	; (800a444 <TIM_OC5_SetConfig+0xbc>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d007      	beq.n	800a3fe <TIM_OC5_SetConfig+0x76>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a15      	ldr	r2, [pc, #84]	; (800a448 <TIM_OC5_SetConfig+0xc0>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d003      	beq.n	800a3fe <TIM_OC5_SetConfig+0x76>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a14      	ldr	r2, [pc, #80]	; (800a44c <TIM_OC5_SetConfig+0xc4>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d109      	bne.n	800a412 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a404:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	695b      	ldr	r3, [r3, #20]
 800a40a:	021b      	lsls	r3, r3, #8
 800a40c:	697a      	ldr	r2, [r7, #20]
 800a40e:	4313      	orrs	r3, r2
 800a410:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	697a      	ldr	r2, [r7, #20]
 800a416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	68fa      	ldr	r2, [r7, #12]
 800a41c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	685a      	ldr	r2, [r3, #4]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	693a      	ldr	r2, [r7, #16]
 800a42a:	621a      	str	r2, [r3, #32]
}
 800a42c:	bf00      	nop
 800a42e:	371c      	adds	r7, #28
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr
 800a438:	fffeff8f 	.word	0xfffeff8f
 800a43c:	40010000 	.word	0x40010000
 800a440:	40010400 	.word	0x40010400
 800a444:	40014000 	.word	0x40014000
 800a448:	40014400 	.word	0x40014400
 800a44c:	40014800 	.word	0x40014800

0800a450 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a450:	b480      	push	{r7}
 800a452:	b087      	sub	sp, #28
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6a1b      	ldr	r3, [r3, #32]
 800a45e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6a1b      	ldr	r3, [r3, #32]
 800a46a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a478:	68fa      	ldr	r2, [r7, #12]
 800a47a:	4b22      	ldr	r3, [pc, #136]	; (800a504 <TIM_OC6_SetConfig+0xb4>)
 800a47c:	4013      	ands	r3, r2
 800a47e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	021b      	lsls	r3, r3, #8
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	4313      	orrs	r3, r2
 800a48a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a492:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	051b      	lsls	r3, r3, #20
 800a49a:	693a      	ldr	r2, [r7, #16]
 800a49c:	4313      	orrs	r3, r2
 800a49e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4a19      	ldr	r2, [pc, #100]	; (800a508 <TIM_OC6_SetConfig+0xb8>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d00f      	beq.n	800a4c8 <TIM_OC6_SetConfig+0x78>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4a18      	ldr	r2, [pc, #96]	; (800a50c <TIM_OC6_SetConfig+0xbc>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d00b      	beq.n	800a4c8 <TIM_OC6_SetConfig+0x78>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4a17      	ldr	r2, [pc, #92]	; (800a510 <TIM_OC6_SetConfig+0xc0>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d007      	beq.n	800a4c8 <TIM_OC6_SetConfig+0x78>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a16      	ldr	r2, [pc, #88]	; (800a514 <TIM_OC6_SetConfig+0xc4>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d003      	beq.n	800a4c8 <TIM_OC6_SetConfig+0x78>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4a15      	ldr	r2, [pc, #84]	; (800a518 <TIM_OC6_SetConfig+0xc8>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d109      	bne.n	800a4dc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a4ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	695b      	ldr	r3, [r3, #20]
 800a4d4:	029b      	lsls	r3, r3, #10
 800a4d6:	697a      	ldr	r2, [r7, #20]
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	697a      	ldr	r2, [r7, #20]
 800a4e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	68fa      	ldr	r2, [r7, #12]
 800a4e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	685a      	ldr	r2, [r3, #4]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	693a      	ldr	r2, [r7, #16]
 800a4f4:	621a      	str	r2, [r3, #32]
}
 800a4f6:	bf00      	nop
 800a4f8:	371c      	adds	r7, #28
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop
 800a504:	feff8fff 	.word	0xfeff8fff
 800a508:	40010000 	.word	0x40010000
 800a50c:	40010400 	.word	0x40010400
 800a510:	40014000 	.word	0x40014000
 800a514:	40014400 	.word	0x40014400
 800a518:	40014800 	.word	0x40014800

0800a51c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b087      	sub	sp, #28
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	6a1b      	ldr	r3, [r3, #32]
 800a52c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	6a1b      	ldr	r3, [r3, #32]
 800a532:	f023 0201 	bic.w	r2, r3, #1
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	699b      	ldr	r3, [r3, #24]
 800a53e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	011b      	lsls	r3, r3, #4
 800a54c:	693a      	ldr	r2, [r7, #16]
 800a54e:	4313      	orrs	r3, r2
 800a550:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	f023 030a 	bic.w	r3, r3, #10
 800a558:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a55a:	697a      	ldr	r2, [r7, #20]
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	4313      	orrs	r3, r2
 800a560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	693a      	ldr	r2, [r7, #16]
 800a566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	697a      	ldr	r2, [r7, #20]
 800a56c:	621a      	str	r2, [r3, #32]
}
 800a56e:	bf00      	nop
 800a570:	371c      	adds	r7, #28
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr

0800a57a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a57a:	b480      	push	{r7}
 800a57c:	b087      	sub	sp, #28
 800a57e:	af00      	add	r7, sp, #0
 800a580:	60f8      	str	r0, [r7, #12]
 800a582:	60b9      	str	r1, [r7, #8]
 800a584:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	6a1b      	ldr	r3, [r3, #32]
 800a58a:	f023 0210 	bic.w	r2, r3, #16
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	699b      	ldr	r3, [r3, #24]
 800a596:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	6a1b      	ldr	r3, [r3, #32]
 800a59c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a5a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	031b      	lsls	r3, r3, #12
 800a5aa:	697a      	ldr	r2, [r7, #20]
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a5b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	011b      	lsls	r3, r3, #4
 800a5bc:	693a      	ldr	r2, [r7, #16]
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	697a      	ldr	r2, [r7, #20]
 800a5c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	693a      	ldr	r2, [r7, #16]
 800a5cc:	621a      	str	r2, [r3, #32]
}
 800a5ce:	bf00      	nop
 800a5d0:	371c      	adds	r7, #28
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr
	...

0800a5dc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b085      	sub	sp, #20
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a5ec:	68fa      	ldr	r2, [r7, #12]
 800a5ee:	4b09      	ldr	r3, [pc, #36]	; (800a614 <TIM_ITRx_SetConfig+0x38>)
 800a5f0:	4013      	ands	r3, r2
 800a5f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a5f4:	683a      	ldr	r2, [r7, #0]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	f043 0307 	orr.w	r3, r3, #7
 800a5fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	68fa      	ldr	r2, [r7, #12]
 800a604:	609a      	str	r2, [r3, #8]
}
 800a606:	bf00      	nop
 800a608:	3714      	adds	r7, #20
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop
 800a614:	ffcfff8f 	.word	0xffcfff8f

0800a618 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a618:	b480      	push	{r7}
 800a61a:	b087      	sub	sp, #28
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	607a      	str	r2, [r7, #4]
 800a624:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a632:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	021a      	lsls	r2, r3, #8
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	431a      	orrs	r2, r3
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	4313      	orrs	r3, r2
 800a640:	697a      	ldr	r2, [r7, #20]
 800a642:	4313      	orrs	r3, r2
 800a644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	697a      	ldr	r2, [r7, #20]
 800a64a:	609a      	str	r2, [r3, #8]
}
 800a64c:	bf00      	nop
 800a64e:	371c      	adds	r7, #28
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a658:	b480      	push	{r7}
 800a65a:	b087      	sub	sp, #28
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	f003 031f 	and.w	r3, r3, #31
 800a66a:	2201      	movs	r2, #1
 800a66c:	fa02 f303 	lsl.w	r3, r2, r3
 800a670:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	6a1a      	ldr	r2, [r3, #32]
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	43db      	mvns	r3, r3
 800a67a:	401a      	ands	r2, r3
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	6a1a      	ldr	r2, [r3, #32]
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	f003 031f 	and.w	r3, r3, #31
 800a68a:	6879      	ldr	r1, [r7, #4]
 800a68c:	fa01 f303 	lsl.w	r3, r1, r3
 800a690:	431a      	orrs	r2, r3
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	621a      	str	r2, [r3, #32]
}
 800a696:	bf00      	nop
 800a698:	371c      	adds	r7, #28
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr
	...

0800a6a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d101      	bne.n	800a6bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a6b8:	2302      	movs	r3, #2
 800a6ba:	e06d      	b.n	800a798 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2202      	movs	r2, #2
 800a6c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a30      	ldr	r2, [pc, #192]	; (800a7a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d004      	beq.n	800a6f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a2f      	ldr	r2, [pc, #188]	; (800a7a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d108      	bne.n	800a702 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a6f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	68fa      	ldr	r2, [r7, #12]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a708:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	68fa      	ldr	r2, [r7, #12]
 800a710:	4313      	orrs	r3, r2
 800a712:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a20      	ldr	r2, [pc, #128]	; (800a7a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d022      	beq.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a72e:	d01d      	beq.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a1d      	ldr	r2, [pc, #116]	; (800a7ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d018      	beq.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a1c      	ldr	r2, [pc, #112]	; (800a7b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d013      	beq.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a1a      	ldr	r2, [pc, #104]	; (800a7b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d00e      	beq.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a15      	ldr	r2, [pc, #84]	; (800a7a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d009      	beq.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a16      	ldr	r2, [pc, #88]	; (800a7b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d004      	beq.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a15      	ldr	r2, [pc, #84]	; (800a7bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d10c      	bne.n	800a786 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a772:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	68ba      	ldr	r2, [r7, #8]
 800a77a:	4313      	orrs	r3, r2
 800a77c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	68ba      	ldr	r2, [r7, #8]
 800a784:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2201      	movs	r2, #1
 800a78a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a796:	2300      	movs	r3, #0
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3714      	adds	r7, #20
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr
 800a7a4:	40010000 	.word	0x40010000
 800a7a8:	40010400 	.word	0x40010400
 800a7ac:	40000400 	.word	0x40000400
 800a7b0:	40000800 	.word	0x40000800
 800a7b4:	40000c00 	.word	0x40000c00
 800a7b8:	40001800 	.word	0x40001800
 800a7bc:	40014000 	.word	0x40014000

0800a7c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a7c8:	bf00      	nop
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a7dc:	bf00      	nop
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b083      	sub	sp, #12
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a7f0:	bf00      	nop
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b082      	sub	sp, #8
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d101      	bne.n	800a80e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	e042      	b.n	800a894 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a814:	2b00      	cmp	r3, #0
 800a816:	d106      	bne.n	800a826 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f7f8 f9d5 	bl	8002bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2224      	movs	r2, #36	; 0x24
 800a82a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f022 0201 	bic.w	r2, r2, #1
 800a83c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 f8c2 	bl	800a9c8 <UART_SetConfig>
 800a844:	4603      	mov	r3, r0
 800a846:	2b01      	cmp	r3, #1
 800a848:	d101      	bne.n	800a84e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a84a:	2301      	movs	r3, #1
 800a84c:	e022      	b.n	800a894 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a852:	2b00      	cmp	r3, #0
 800a854:	d002      	beq.n	800a85c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 fe16 	bl	800b488 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	685a      	ldr	r2, [r3, #4]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a86a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	689a      	ldr	r2, [r3, #8]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a87a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f042 0201 	orr.w	r2, r2, #1
 800a88a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 fe9d 	bl	800b5cc <UART_CheckIdleState>
 800a892:	4603      	mov	r3, r0
}
 800a894:	4618      	mov	r0, r3
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b08a      	sub	sp, #40	; 0x28
 800a8a0:	af02      	add	r7, sp, #8
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	60b9      	str	r1, [r7, #8]
 800a8a6:	603b      	str	r3, [r7, #0]
 800a8a8:	4613      	mov	r3, r2
 800a8aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8b2:	2b20      	cmp	r3, #32
 800a8b4:	f040 8083 	bne.w	800a9be <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d002      	beq.n	800a8c4 <HAL_UART_Transmit+0x28>
 800a8be:	88fb      	ldrh	r3, [r7, #6]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d101      	bne.n	800a8c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e07b      	b.n	800a9c0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d101      	bne.n	800a8d6 <HAL_UART_Transmit+0x3a>
 800a8d2:	2302      	movs	r3, #2
 800a8d4:	e074      	b.n	800a9c0 <HAL_UART_Transmit+0x124>
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2221      	movs	r2, #33	; 0x21
 800a8ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a8ee:	f7f8 fbfb 	bl	80030e8 <HAL_GetTick>
 800a8f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	88fa      	ldrh	r2, [r7, #6]
 800a8f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	88fa      	ldrh	r2, [r7, #6]
 800a900:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a90c:	d108      	bne.n	800a920 <HAL_UART_Transmit+0x84>
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d104      	bne.n	800a920 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a916:	2300      	movs	r3, #0
 800a918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	61bb      	str	r3, [r7, #24]
 800a91e:	e003      	b.n	800a928 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a924:	2300      	movs	r3, #0
 800a926:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a930:	e02c      	b.n	800a98c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	9300      	str	r3, [sp, #0]
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	2200      	movs	r2, #0
 800a93a:	2180      	movs	r1, #128	; 0x80
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	f000 fe90 	bl	800b662 <UART_WaitOnFlagUntilTimeout>
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d001      	beq.n	800a94c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a948:	2303      	movs	r3, #3
 800a94a:	e039      	b.n	800a9c0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a94c:	69fb      	ldr	r3, [r7, #28]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d10b      	bne.n	800a96a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a952:	69bb      	ldr	r3, [r7, #24]
 800a954:	881b      	ldrh	r3, [r3, #0]
 800a956:	461a      	mov	r2, r3
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a960:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a962:	69bb      	ldr	r3, [r7, #24]
 800a964:	3302      	adds	r3, #2
 800a966:	61bb      	str	r3, [r7, #24]
 800a968:	e007      	b.n	800a97a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a96a:	69fb      	ldr	r3, [r7, #28]
 800a96c:	781a      	ldrb	r2, [r3, #0]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a974:	69fb      	ldr	r3, [r7, #28]
 800a976:	3301      	adds	r3, #1
 800a978:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a980:	b29b      	uxth	r3, r3
 800a982:	3b01      	subs	r3, #1
 800a984:	b29a      	uxth	r2, r3
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a992:	b29b      	uxth	r3, r3
 800a994:	2b00      	cmp	r3, #0
 800a996:	d1cc      	bne.n	800a932 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	9300      	str	r3, [sp, #0]
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	2140      	movs	r1, #64	; 0x40
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f000 fe5d 	bl	800b662 <UART_WaitOnFlagUntilTimeout>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d001      	beq.n	800a9b2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a9ae:	2303      	movs	r3, #3
 800a9b0:	e006      	b.n	800a9c0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2220      	movs	r2, #32
 800a9b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	e000      	b.n	800a9c0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a9be:	2302      	movs	r3, #2
  }
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3720      	adds	r7, #32
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9c8:	b5b0      	push	{r4, r5, r7, lr}
 800a9ca:	b08e      	sub	sp, #56	; 0x38
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	689a      	ldr	r2, [r3, #8]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	691b      	ldr	r3, [r3, #16]
 800a9de:	431a      	orrs	r2, r3
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	695b      	ldr	r3, [r3, #20]
 800a9e4:	431a      	orrs	r2, r3
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	69db      	ldr	r3, [r3, #28]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	4bbf      	ldr	r3, [pc, #764]	; (800acf4 <UART_SetConfig+0x32c>)
 800a9f6:	4013      	ands	r3, r2
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	6812      	ldr	r2, [r2, #0]
 800a9fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a9fe:	430b      	orrs	r3, r1
 800aa00:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	68da      	ldr	r2, [r3, #12]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	430a      	orrs	r2, r1
 800aa16:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	699b      	ldr	r3, [r3, #24]
 800aa1c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4ab5      	ldr	r2, [pc, #724]	; (800acf8 <UART_SetConfig+0x330>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d004      	beq.n	800aa32 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6a1b      	ldr	r3, [r3, #32]
 800aa2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	689a      	ldr	r2, [r3, #8]
 800aa38:	4bb0      	ldr	r3, [pc, #704]	; (800acfc <UART_SetConfig+0x334>)
 800aa3a:	4013      	ands	r3, r2
 800aa3c:	687a      	ldr	r2, [r7, #4]
 800aa3e:	6812      	ldr	r2, [r2, #0]
 800aa40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aa42:	430b      	orrs	r3, r1
 800aa44:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4c:	f023 010f 	bic.w	r1, r3, #15
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	430a      	orrs	r2, r1
 800aa5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4aa7      	ldr	r2, [pc, #668]	; (800ad00 <UART_SetConfig+0x338>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d176      	bne.n	800ab54 <UART_SetConfig+0x18c>
 800aa66:	4ba7      	ldr	r3, [pc, #668]	; (800ad04 <UART_SetConfig+0x33c>)
 800aa68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa6e:	2b28      	cmp	r3, #40	; 0x28
 800aa70:	d86c      	bhi.n	800ab4c <UART_SetConfig+0x184>
 800aa72:	a201      	add	r2, pc, #4	; (adr r2, 800aa78 <UART_SetConfig+0xb0>)
 800aa74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa78:	0800ab1d 	.word	0x0800ab1d
 800aa7c:	0800ab4d 	.word	0x0800ab4d
 800aa80:	0800ab4d 	.word	0x0800ab4d
 800aa84:	0800ab4d 	.word	0x0800ab4d
 800aa88:	0800ab4d 	.word	0x0800ab4d
 800aa8c:	0800ab4d 	.word	0x0800ab4d
 800aa90:	0800ab4d 	.word	0x0800ab4d
 800aa94:	0800ab4d 	.word	0x0800ab4d
 800aa98:	0800ab25 	.word	0x0800ab25
 800aa9c:	0800ab4d 	.word	0x0800ab4d
 800aaa0:	0800ab4d 	.word	0x0800ab4d
 800aaa4:	0800ab4d 	.word	0x0800ab4d
 800aaa8:	0800ab4d 	.word	0x0800ab4d
 800aaac:	0800ab4d 	.word	0x0800ab4d
 800aab0:	0800ab4d 	.word	0x0800ab4d
 800aab4:	0800ab4d 	.word	0x0800ab4d
 800aab8:	0800ab2d 	.word	0x0800ab2d
 800aabc:	0800ab4d 	.word	0x0800ab4d
 800aac0:	0800ab4d 	.word	0x0800ab4d
 800aac4:	0800ab4d 	.word	0x0800ab4d
 800aac8:	0800ab4d 	.word	0x0800ab4d
 800aacc:	0800ab4d 	.word	0x0800ab4d
 800aad0:	0800ab4d 	.word	0x0800ab4d
 800aad4:	0800ab4d 	.word	0x0800ab4d
 800aad8:	0800ab35 	.word	0x0800ab35
 800aadc:	0800ab4d 	.word	0x0800ab4d
 800aae0:	0800ab4d 	.word	0x0800ab4d
 800aae4:	0800ab4d 	.word	0x0800ab4d
 800aae8:	0800ab4d 	.word	0x0800ab4d
 800aaec:	0800ab4d 	.word	0x0800ab4d
 800aaf0:	0800ab4d 	.word	0x0800ab4d
 800aaf4:	0800ab4d 	.word	0x0800ab4d
 800aaf8:	0800ab3d 	.word	0x0800ab3d
 800aafc:	0800ab4d 	.word	0x0800ab4d
 800ab00:	0800ab4d 	.word	0x0800ab4d
 800ab04:	0800ab4d 	.word	0x0800ab4d
 800ab08:	0800ab4d 	.word	0x0800ab4d
 800ab0c:	0800ab4d 	.word	0x0800ab4d
 800ab10:	0800ab4d 	.word	0x0800ab4d
 800ab14:	0800ab4d 	.word	0x0800ab4d
 800ab18:	0800ab45 	.word	0x0800ab45
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab22:	e222      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ab24:	2304      	movs	r3, #4
 800ab26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab2a:	e21e      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ab2c:	2308      	movs	r3, #8
 800ab2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab32:	e21a      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ab34:	2310      	movs	r3, #16
 800ab36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab3a:	e216      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ab3c:	2320      	movs	r3, #32
 800ab3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab42:	e212      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ab44:	2340      	movs	r3, #64	; 0x40
 800ab46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab4a:	e20e      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ab4c:	2380      	movs	r3, #128	; 0x80
 800ab4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab52:	e20a      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4a6b      	ldr	r2, [pc, #428]	; (800ad08 <UART_SetConfig+0x340>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d130      	bne.n	800abc0 <UART_SetConfig+0x1f8>
 800ab5e:	4b69      	ldr	r3, [pc, #420]	; (800ad04 <UART_SetConfig+0x33c>)
 800ab60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab62:	f003 0307 	and.w	r3, r3, #7
 800ab66:	2b05      	cmp	r3, #5
 800ab68:	d826      	bhi.n	800abb8 <UART_SetConfig+0x1f0>
 800ab6a:	a201      	add	r2, pc, #4	; (adr r2, 800ab70 <UART_SetConfig+0x1a8>)
 800ab6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab70:	0800ab89 	.word	0x0800ab89
 800ab74:	0800ab91 	.word	0x0800ab91
 800ab78:	0800ab99 	.word	0x0800ab99
 800ab7c:	0800aba1 	.word	0x0800aba1
 800ab80:	0800aba9 	.word	0x0800aba9
 800ab84:	0800abb1 	.word	0x0800abb1
 800ab88:	2300      	movs	r3, #0
 800ab8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab8e:	e1ec      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ab90:	2304      	movs	r3, #4
 800ab92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab96:	e1e8      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ab98:	2308      	movs	r3, #8
 800ab9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab9e:	e1e4      	b.n	800af6a <UART_SetConfig+0x5a2>
 800aba0:	2310      	movs	r3, #16
 800aba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aba6:	e1e0      	b.n	800af6a <UART_SetConfig+0x5a2>
 800aba8:	2320      	movs	r3, #32
 800abaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abae:	e1dc      	b.n	800af6a <UART_SetConfig+0x5a2>
 800abb0:	2340      	movs	r3, #64	; 0x40
 800abb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abb6:	e1d8      	b.n	800af6a <UART_SetConfig+0x5a2>
 800abb8:	2380      	movs	r3, #128	; 0x80
 800abba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abbe:	e1d4      	b.n	800af6a <UART_SetConfig+0x5a2>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a51      	ldr	r2, [pc, #324]	; (800ad0c <UART_SetConfig+0x344>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d130      	bne.n	800ac2c <UART_SetConfig+0x264>
 800abca:	4b4e      	ldr	r3, [pc, #312]	; (800ad04 <UART_SetConfig+0x33c>)
 800abcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abce:	f003 0307 	and.w	r3, r3, #7
 800abd2:	2b05      	cmp	r3, #5
 800abd4:	d826      	bhi.n	800ac24 <UART_SetConfig+0x25c>
 800abd6:	a201      	add	r2, pc, #4	; (adr r2, 800abdc <UART_SetConfig+0x214>)
 800abd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abdc:	0800abf5 	.word	0x0800abf5
 800abe0:	0800abfd 	.word	0x0800abfd
 800abe4:	0800ac05 	.word	0x0800ac05
 800abe8:	0800ac0d 	.word	0x0800ac0d
 800abec:	0800ac15 	.word	0x0800ac15
 800abf0:	0800ac1d 	.word	0x0800ac1d
 800abf4:	2300      	movs	r3, #0
 800abf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abfa:	e1b6      	b.n	800af6a <UART_SetConfig+0x5a2>
 800abfc:	2304      	movs	r3, #4
 800abfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac02:	e1b2      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ac04:	2308      	movs	r3, #8
 800ac06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac0a:	e1ae      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ac0c:	2310      	movs	r3, #16
 800ac0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac12:	e1aa      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ac14:	2320      	movs	r3, #32
 800ac16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac1a:	e1a6      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ac1c:	2340      	movs	r3, #64	; 0x40
 800ac1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac22:	e1a2      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ac24:	2380      	movs	r3, #128	; 0x80
 800ac26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac2a:	e19e      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a37      	ldr	r2, [pc, #220]	; (800ad10 <UART_SetConfig+0x348>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d130      	bne.n	800ac98 <UART_SetConfig+0x2d0>
 800ac36:	4b33      	ldr	r3, [pc, #204]	; (800ad04 <UART_SetConfig+0x33c>)
 800ac38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac3a:	f003 0307 	and.w	r3, r3, #7
 800ac3e:	2b05      	cmp	r3, #5
 800ac40:	d826      	bhi.n	800ac90 <UART_SetConfig+0x2c8>
 800ac42:	a201      	add	r2, pc, #4	; (adr r2, 800ac48 <UART_SetConfig+0x280>)
 800ac44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac48:	0800ac61 	.word	0x0800ac61
 800ac4c:	0800ac69 	.word	0x0800ac69
 800ac50:	0800ac71 	.word	0x0800ac71
 800ac54:	0800ac79 	.word	0x0800ac79
 800ac58:	0800ac81 	.word	0x0800ac81
 800ac5c:	0800ac89 	.word	0x0800ac89
 800ac60:	2300      	movs	r3, #0
 800ac62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac66:	e180      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ac68:	2304      	movs	r3, #4
 800ac6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac6e:	e17c      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ac70:	2308      	movs	r3, #8
 800ac72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac76:	e178      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ac78:	2310      	movs	r3, #16
 800ac7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac7e:	e174      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ac80:	2320      	movs	r3, #32
 800ac82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac86:	e170      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ac88:	2340      	movs	r3, #64	; 0x40
 800ac8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac8e:	e16c      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ac90:	2380      	movs	r3, #128	; 0x80
 800ac92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac96:	e168      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a1d      	ldr	r2, [pc, #116]	; (800ad14 <UART_SetConfig+0x34c>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d142      	bne.n	800ad28 <UART_SetConfig+0x360>
 800aca2:	4b18      	ldr	r3, [pc, #96]	; (800ad04 <UART_SetConfig+0x33c>)
 800aca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aca6:	f003 0307 	and.w	r3, r3, #7
 800acaa:	2b05      	cmp	r3, #5
 800acac:	d838      	bhi.n	800ad20 <UART_SetConfig+0x358>
 800acae:	a201      	add	r2, pc, #4	; (adr r2, 800acb4 <UART_SetConfig+0x2ec>)
 800acb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb4:	0800accd 	.word	0x0800accd
 800acb8:	0800acd5 	.word	0x0800acd5
 800acbc:	0800acdd 	.word	0x0800acdd
 800acc0:	0800ace5 	.word	0x0800ace5
 800acc4:	0800aced 	.word	0x0800aced
 800acc8:	0800ad19 	.word	0x0800ad19
 800accc:	2300      	movs	r3, #0
 800acce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acd2:	e14a      	b.n	800af6a <UART_SetConfig+0x5a2>
 800acd4:	2304      	movs	r3, #4
 800acd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acda:	e146      	b.n	800af6a <UART_SetConfig+0x5a2>
 800acdc:	2308      	movs	r3, #8
 800acde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ace2:	e142      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ace4:	2310      	movs	r3, #16
 800ace6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acea:	e13e      	b.n	800af6a <UART_SetConfig+0x5a2>
 800acec:	2320      	movs	r3, #32
 800acee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acf2:	e13a      	b.n	800af6a <UART_SetConfig+0x5a2>
 800acf4:	cfff69f3 	.word	0xcfff69f3
 800acf8:	58000c00 	.word	0x58000c00
 800acfc:	11fff4ff 	.word	0x11fff4ff
 800ad00:	40011000 	.word	0x40011000
 800ad04:	58024400 	.word	0x58024400
 800ad08:	40004400 	.word	0x40004400
 800ad0c:	40004800 	.word	0x40004800
 800ad10:	40004c00 	.word	0x40004c00
 800ad14:	40005000 	.word	0x40005000
 800ad18:	2340      	movs	r3, #64	; 0x40
 800ad1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad1e:	e124      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ad20:	2380      	movs	r3, #128	; 0x80
 800ad22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad26:	e120      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4acc      	ldr	r2, [pc, #816]	; (800b060 <UART_SetConfig+0x698>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d176      	bne.n	800ae20 <UART_SetConfig+0x458>
 800ad32:	4bcc      	ldr	r3, [pc, #816]	; (800b064 <UART_SetConfig+0x69c>)
 800ad34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad3a:	2b28      	cmp	r3, #40	; 0x28
 800ad3c:	d86c      	bhi.n	800ae18 <UART_SetConfig+0x450>
 800ad3e:	a201      	add	r2, pc, #4	; (adr r2, 800ad44 <UART_SetConfig+0x37c>)
 800ad40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad44:	0800ade9 	.word	0x0800ade9
 800ad48:	0800ae19 	.word	0x0800ae19
 800ad4c:	0800ae19 	.word	0x0800ae19
 800ad50:	0800ae19 	.word	0x0800ae19
 800ad54:	0800ae19 	.word	0x0800ae19
 800ad58:	0800ae19 	.word	0x0800ae19
 800ad5c:	0800ae19 	.word	0x0800ae19
 800ad60:	0800ae19 	.word	0x0800ae19
 800ad64:	0800adf1 	.word	0x0800adf1
 800ad68:	0800ae19 	.word	0x0800ae19
 800ad6c:	0800ae19 	.word	0x0800ae19
 800ad70:	0800ae19 	.word	0x0800ae19
 800ad74:	0800ae19 	.word	0x0800ae19
 800ad78:	0800ae19 	.word	0x0800ae19
 800ad7c:	0800ae19 	.word	0x0800ae19
 800ad80:	0800ae19 	.word	0x0800ae19
 800ad84:	0800adf9 	.word	0x0800adf9
 800ad88:	0800ae19 	.word	0x0800ae19
 800ad8c:	0800ae19 	.word	0x0800ae19
 800ad90:	0800ae19 	.word	0x0800ae19
 800ad94:	0800ae19 	.word	0x0800ae19
 800ad98:	0800ae19 	.word	0x0800ae19
 800ad9c:	0800ae19 	.word	0x0800ae19
 800ada0:	0800ae19 	.word	0x0800ae19
 800ada4:	0800ae01 	.word	0x0800ae01
 800ada8:	0800ae19 	.word	0x0800ae19
 800adac:	0800ae19 	.word	0x0800ae19
 800adb0:	0800ae19 	.word	0x0800ae19
 800adb4:	0800ae19 	.word	0x0800ae19
 800adb8:	0800ae19 	.word	0x0800ae19
 800adbc:	0800ae19 	.word	0x0800ae19
 800adc0:	0800ae19 	.word	0x0800ae19
 800adc4:	0800ae09 	.word	0x0800ae09
 800adc8:	0800ae19 	.word	0x0800ae19
 800adcc:	0800ae19 	.word	0x0800ae19
 800add0:	0800ae19 	.word	0x0800ae19
 800add4:	0800ae19 	.word	0x0800ae19
 800add8:	0800ae19 	.word	0x0800ae19
 800addc:	0800ae19 	.word	0x0800ae19
 800ade0:	0800ae19 	.word	0x0800ae19
 800ade4:	0800ae11 	.word	0x0800ae11
 800ade8:	2301      	movs	r3, #1
 800adea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adee:	e0bc      	b.n	800af6a <UART_SetConfig+0x5a2>
 800adf0:	2304      	movs	r3, #4
 800adf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adf6:	e0b8      	b.n	800af6a <UART_SetConfig+0x5a2>
 800adf8:	2308      	movs	r3, #8
 800adfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adfe:	e0b4      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ae00:	2310      	movs	r3, #16
 800ae02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae06:	e0b0      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ae08:	2320      	movs	r3, #32
 800ae0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae0e:	e0ac      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ae10:	2340      	movs	r3, #64	; 0x40
 800ae12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae16:	e0a8      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ae18:	2380      	movs	r3, #128	; 0x80
 800ae1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae1e:	e0a4      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a90      	ldr	r2, [pc, #576]	; (800b068 <UART_SetConfig+0x6a0>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d130      	bne.n	800ae8c <UART_SetConfig+0x4c4>
 800ae2a:	4b8e      	ldr	r3, [pc, #568]	; (800b064 <UART_SetConfig+0x69c>)
 800ae2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae2e:	f003 0307 	and.w	r3, r3, #7
 800ae32:	2b05      	cmp	r3, #5
 800ae34:	d826      	bhi.n	800ae84 <UART_SetConfig+0x4bc>
 800ae36:	a201      	add	r2, pc, #4	; (adr r2, 800ae3c <UART_SetConfig+0x474>)
 800ae38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae3c:	0800ae55 	.word	0x0800ae55
 800ae40:	0800ae5d 	.word	0x0800ae5d
 800ae44:	0800ae65 	.word	0x0800ae65
 800ae48:	0800ae6d 	.word	0x0800ae6d
 800ae4c:	0800ae75 	.word	0x0800ae75
 800ae50:	0800ae7d 	.word	0x0800ae7d
 800ae54:	2300      	movs	r3, #0
 800ae56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae5a:	e086      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ae5c:	2304      	movs	r3, #4
 800ae5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae62:	e082      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ae64:	2308      	movs	r3, #8
 800ae66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae6a:	e07e      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ae6c:	2310      	movs	r3, #16
 800ae6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae72:	e07a      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ae74:	2320      	movs	r3, #32
 800ae76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae7a:	e076      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ae7c:	2340      	movs	r3, #64	; 0x40
 800ae7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae82:	e072      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ae84:	2380      	movs	r3, #128	; 0x80
 800ae86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae8a:	e06e      	b.n	800af6a <UART_SetConfig+0x5a2>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a76      	ldr	r2, [pc, #472]	; (800b06c <UART_SetConfig+0x6a4>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d130      	bne.n	800aef8 <UART_SetConfig+0x530>
 800ae96:	4b73      	ldr	r3, [pc, #460]	; (800b064 <UART_SetConfig+0x69c>)
 800ae98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae9a:	f003 0307 	and.w	r3, r3, #7
 800ae9e:	2b05      	cmp	r3, #5
 800aea0:	d826      	bhi.n	800aef0 <UART_SetConfig+0x528>
 800aea2:	a201      	add	r2, pc, #4	; (adr r2, 800aea8 <UART_SetConfig+0x4e0>)
 800aea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea8:	0800aec1 	.word	0x0800aec1
 800aeac:	0800aec9 	.word	0x0800aec9
 800aeb0:	0800aed1 	.word	0x0800aed1
 800aeb4:	0800aed9 	.word	0x0800aed9
 800aeb8:	0800aee1 	.word	0x0800aee1
 800aebc:	0800aee9 	.word	0x0800aee9
 800aec0:	2300      	movs	r3, #0
 800aec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aec6:	e050      	b.n	800af6a <UART_SetConfig+0x5a2>
 800aec8:	2304      	movs	r3, #4
 800aeca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aece:	e04c      	b.n	800af6a <UART_SetConfig+0x5a2>
 800aed0:	2308      	movs	r3, #8
 800aed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aed6:	e048      	b.n	800af6a <UART_SetConfig+0x5a2>
 800aed8:	2310      	movs	r3, #16
 800aeda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aede:	e044      	b.n	800af6a <UART_SetConfig+0x5a2>
 800aee0:	2320      	movs	r3, #32
 800aee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aee6:	e040      	b.n	800af6a <UART_SetConfig+0x5a2>
 800aee8:	2340      	movs	r3, #64	; 0x40
 800aeea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeee:	e03c      	b.n	800af6a <UART_SetConfig+0x5a2>
 800aef0:	2380      	movs	r3, #128	; 0x80
 800aef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aef6:	e038      	b.n	800af6a <UART_SetConfig+0x5a2>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4a5c      	ldr	r2, [pc, #368]	; (800b070 <UART_SetConfig+0x6a8>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d130      	bne.n	800af64 <UART_SetConfig+0x59c>
 800af02:	4b58      	ldr	r3, [pc, #352]	; (800b064 <UART_SetConfig+0x69c>)
 800af04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af06:	f003 0307 	and.w	r3, r3, #7
 800af0a:	2b05      	cmp	r3, #5
 800af0c:	d826      	bhi.n	800af5c <UART_SetConfig+0x594>
 800af0e:	a201      	add	r2, pc, #4	; (adr r2, 800af14 <UART_SetConfig+0x54c>)
 800af10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af14:	0800af2d 	.word	0x0800af2d
 800af18:	0800af35 	.word	0x0800af35
 800af1c:	0800af3d 	.word	0x0800af3d
 800af20:	0800af45 	.word	0x0800af45
 800af24:	0800af4d 	.word	0x0800af4d
 800af28:	0800af55 	.word	0x0800af55
 800af2c:	2302      	movs	r3, #2
 800af2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af32:	e01a      	b.n	800af6a <UART_SetConfig+0x5a2>
 800af34:	2304      	movs	r3, #4
 800af36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af3a:	e016      	b.n	800af6a <UART_SetConfig+0x5a2>
 800af3c:	2308      	movs	r3, #8
 800af3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af42:	e012      	b.n	800af6a <UART_SetConfig+0x5a2>
 800af44:	2310      	movs	r3, #16
 800af46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af4a:	e00e      	b.n	800af6a <UART_SetConfig+0x5a2>
 800af4c:	2320      	movs	r3, #32
 800af4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af52:	e00a      	b.n	800af6a <UART_SetConfig+0x5a2>
 800af54:	2340      	movs	r3, #64	; 0x40
 800af56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af5a:	e006      	b.n	800af6a <UART_SetConfig+0x5a2>
 800af5c:	2380      	movs	r3, #128	; 0x80
 800af5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af62:	e002      	b.n	800af6a <UART_SetConfig+0x5a2>
 800af64:	2380      	movs	r3, #128	; 0x80
 800af66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4a40      	ldr	r2, [pc, #256]	; (800b070 <UART_SetConfig+0x6a8>)
 800af70:	4293      	cmp	r3, r2
 800af72:	f040 80ef 	bne.w	800b154 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800af76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800af7a:	2b20      	cmp	r3, #32
 800af7c:	dc46      	bgt.n	800b00c <UART_SetConfig+0x644>
 800af7e:	2b02      	cmp	r3, #2
 800af80:	f2c0 8081 	blt.w	800b086 <UART_SetConfig+0x6be>
 800af84:	3b02      	subs	r3, #2
 800af86:	2b1e      	cmp	r3, #30
 800af88:	d87d      	bhi.n	800b086 <UART_SetConfig+0x6be>
 800af8a:	a201      	add	r2, pc, #4	; (adr r2, 800af90 <UART_SetConfig+0x5c8>)
 800af8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af90:	0800b013 	.word	0x0800b013
 800af94:	0800b087 	.word	0x0800b087
 800af98:	0800b01b 	.word	0x0800b01b
 800af9c:	0800b087 	.word	0x0800b087
 800afa0:	0800b087 	.word	0x0800b087
 800afa4:	0800b087 	.word	0x0800b087
 800afa8:	0800b02b 	.word	0x0800b02b
 800afac:	0800b087 	.word	0x0800b087
 800afb0:	0800b087 	.word	0x0800b087
 800afb4:	0800b087 	.word	0x0800b087
 800afb8:	0800b087 	.word	0x0800b087
 800afbc:	0800b087 	.word	0x0800b087
 800afc0:	0800b087 	.word	0x0800b087
 800afc4:	0800b087 	.word	0x0800b087
 800afc8:	0800b03b 	.word	0x0800b03b
 800afcc:	0800b087 	.word	0x0800b087
 800afd0:	0800b087 	.word	0x0800b087
 800afd4:	0800b087 	.word	0x0800b087
 800afd8:	0800b087 	.word	0x0800b087
 800afdc:	0800b087 	.word	0x0800b087
 800afe0:	0800b087 	.word	0x0800b087
 800afe4:	0800b087 	.word	0x0800b087
 800afe8:	0800b087 	.word	0x0800b087
 800afec:	0800b087 	.word	0x0800b087
 800aff0:	0800b087 	.word	0x0800b087
 800aff4:	0800b087 	.word	0x0800b087
 800aff8:	0800b087 	.word	0x0800b087
 800affc:	0800b087 	.word	0x0800b087
 800b000:	0800b087 	.word	0x0800b087
 800b004:	0800b087 	.word	0x0800b087
 800b008:	0800b079 	.word	0x0800b079
 800b00c:	2b40      	cmp	r3, #64	; 0x40
 800b00e:	d036      	beq.n	800b07e <UART_SetConfig+0x6b6>
 800b010:	e039      	b.n	800b086 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b012:	f7fd fad7 	bl	80085c4 <HAL_RCCEx_GetD3PCLK1Freq>
 800b016:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b018:	e03b      	b.n	800b092 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b01a:	f107 0314 	add.w	r3, r7, #20
 800b01e:	4618      	mov	r0, r3
 800b020:	f7fd fae6 	bl	80085f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b028:	e033      	b.n	800b092 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b02a:	f107 0308 	add.w	r3, r7, #8
 800b02e:	4618      	mov	r0, r3
 800b030:	f7fd fc32 	bl	8008898 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b038:	e02b      	b.n	800b092 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b03a:	4b0a      	ldr	r3, [pc, #40]	; (800b064 <UART_SetConfig+0x69c>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f003 0320 	and.w	r3, r3, #32
 800b042:	2b00      	cmp	r3, #0
 800b044:	d009      	beq.n	800b05a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b046:	4b07      	ldr	r3, [pc, #28]	; (800b064 <UART_SetConfig+0x69c>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	08db      	lsrs	r3, r3, #3
 800b04c:	f003 0303 	and.w	r3, r3, #3
 800b050:	4a08      	ldr	r2, [pc, #32]	; (800b074 <UART_SetConfig+0x6ac>)
 800b052:	fa22 f303 	lsr.w	r3, r2, r3
 800b056:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b058:	e01b      	b.n	800b092 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800b05a:	4b06      	ldr	r3, [pc, #24]	; (800b074 <UART_SetConfig+0x6ac>)
 800b05c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b05e:	e018      	b.n	800b092 <UART_SetConfig+0x6ca>
 800b060:	40011400 	.word	0x40011400
 800b064:	58024400 	.word	0x58024400
 800b068:	40007800 	.word	0x40007800
 800b06c:	40007c00 	.word	0x40007c00
 800b070:	58000c00 	.word	0x58000c00
 800b074:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b078:	4bc4      	ldr	r3, [pc, #784]	; (800b38c <UART_SetConfig+0x9c4>)
 800b07a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b07c:	e009      	b.n	800b092 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b07e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b082:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b084:	e005      	b.n	800b092 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800b086:	2300      	movs	r3, #0
 800b088:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b08a:	2301      	movs	r3, #1
 800b08c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b090:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b094:	2b00      	cmp	r3, #0
 800b096:	f000 81da 	beq.w	800b44e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b09e:	4abc      	ldr	r2, [pc, #752]	; (800b390 <UART_SetConfig+0x9c8>)
 800b0a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0ac:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	685a      	ldr	r2, [r3, #4]
 800b0b2:	4613      	mov	r3, r2
 800b0b4:	005b      	lsls	r3, r3, #1
 800b0b6:	4413      	add	r3, r2
 800b0b8:	6a3a      	ldr	r2, [r7, #32]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d305      	bcc.n	800b0ca <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b0c4:	6a3a      	ldr	r2, [r7, #32]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d903      	bls.n	800b0d2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b0d0:	e1bd      	b.n	800b44e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f04f 0100 	mov.w	r1, #0
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0de:	4aac      	ldr	r2, [pc, #688]	; (800b390 <UART_SetConfig+0x9c8>)
 800b0e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0e4:	b29a      	uxth	r2, r3
 800b0e6:	f04f 0300 	mov.w	r3, #0
 800b0ea:	f7f5 f951 	bl	8000390 <__aeabi_uldivmod>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	4610      	mov	r0, r2
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	f04f 0200 	mov.w	r2, #0
 800b0fa:	f04f 0300 	mov.w	r3, #0
 800b0fe:	020b      	lsls	r3, r1, #8
 800b100:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b104:	0202      	lsls	r2, r0, #8
 800b106:	6879      	ldr	r1, [r7, #4]
 800b108:	6849      	ldr	r1, [r1, #4]
 800b10a:	0849      	lsrs	r1, r1, #1
 800b10c:	4608      	mov	r0, r1
 800b10e:	f04f 0100 	mov.w	r1, #0
 800b112:	1814      	adds	r4, r2, r0
 800b114:	eb43 0501 	adc.w	r5, r3, r1
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	461a      	mov	r2, r3
 800b11e:	f04f 0300 	mov.w	r3, #0
 800b122:	4620      	mov	r0, r4
 800b124:	4629      	mov	r1, r5
 800b126:	f7f5 f933 	bl	8000390 <__aeabi_uldivmod>
 800b12a:	4602      	mov	r2, r0
 800b12c:	460b      	mov	r3, r1
 800b12e:	4613      	mov	r3, r2
 800b130:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b134:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b138:	d308      	bcc.n	800b14c <UART_SetConfig+0x784>
 800b13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b140:	d204      	bcs.n	800b14c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b148:	60da      	str	r2, [r3, #12]
 800b14a:	e180      	b.n	800b44e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800b14c:	2301      	movs	r3, #1
 800b14e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b152:	e17c      	b.n	800b44e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	69db      	ldr	r3, [r3, #28]
 800b158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b15c:	f040 80be 	bne.w	800b2dc <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800b160:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b164:	2b20      	cmp	r3, #32
 800b166:	dc49      	bgt.n	800b1fc <UART_SetConfig+0x834>
 800b168:	2b00      	cmp	r3, #0
 800b16a:	db7c      	blt.n	800b266 <UART_SetConfig+0x89e>
 800b16c:	2b20      	cmp	r3, #32
 800b16e:	d87a      	bhi.n	800b266 <UART_SetConfig+0x89e>
 800b170:	a201      	add	r2, pc, #4	; (adr r2, 800b178 <UART_SetConfig+0x7b0>)
 800b172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b176:	bf00      	nop
 800b178:	0800b203 	.word	0x0800b203
 800b17c:	0800b20b 	.word	0x0800b20b
 800b180:	0800b267 	.word	0x0800b267
 800b184:	0800b267 	.word	0x0800b267
 800b188:	0800b213 	.word	0x0800b213
 800b18c:	0800b267 	.word	0x0800b267
 800b190:	0800b267 	.word	0x0800b267
 800b194:	0800b267 	.word	0x0800b267
 800b198:	0800b223 	.word	0x0800b223
 800b19c:	0800b267 	.word	0x0800b267
 800b1a0:	0800b267 	.word	0x0800b267
 800b1a4:	0800b267 	.word	0x0800b267
 800b1a8:	0800b267 	.word	0x0800b267
 800b1ac:	0800b267 	.word	0x0800b267
 800b1b0:	0800b267 	.word	0x0800b267
 800b1b4:	0800b267 	.word	0x0800b267
 800b1b8:	0800b233 	.word	0x0800b233
 800b1bc:	0800b267 	.word	0x0800b267
 800b1c0:	0800b267 	.word	0x0800b267
 800b1c4:	0800b267 	.word	0x0800b267
 800b1c8:	0800b267 	.word	0x0800b267
 800b1cc:	0800b267 	.word	0x0800b267
 800b1d0:	0800b267 	.word	0x0800b267
 800b1d4:	0800b267 	.word	0x0800b267
 800b1d8:	0800b267 	.word	0x0800b267
 800b1dc:	0800b267 	.word	0x0800b267
 800b1e0:	0800b267 	.word	0x0800b267
 800b1e4:	0800b267 	.word	0x0800b267
 800b1e8:	0800b267 	.word	0x0800b267
 800b1ec:	0800b267 	.word	0x0800b267
 800b1f0:	0800b267 	.word	0x0800b267
 800b1f4:	0800b267 	.word	0x0800b267
 800b1f8:	0800b259 	.word	0x0800b259
 800b1fc:	2b40      	cmp	r3, #64	; 0x40
 800b1fe:	d02e      	beq.n	800b25e <UART_SetConfig+0x896>
 800b200:	e031      	b.n	800b266 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b202:	f7fb fda1 	bl	8006d48 <HAL_RCC_GetPCLK1Freq>
 800b206:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b208:	e033      	b.n	800b272 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b20a:	f7fb fdb3 	bl	8006d74 <HAL_RCC_GetPCLK2Freq>
 800b20e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b210:	e02f      	b.n	800b272 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b212:	f107 0314 	add.w	r3, r7, #20
 800b216:	4618      	mov	r0, r3
 800b218:	f7fd f9ea 	bl	80085f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b21c:	69bb      	ldr	r3, [r7, #24]
 800b21e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b220:	e027      	b.n	800b272 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b222:	f107 0308 	add.w	r3, r7, #8
 800b226:	4618      	mov	r0, r3
 800b228:	f7fd fb36 	bl	8008898 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b230:	e01f      	b.n	800b272 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b232:	4b58      	ldr	r3, [pc, #352]	; (800b394 <UART_SetConfig+0x9cc>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f003 0320 	and.w	r3, r3, #32
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d009      	beq.n	800b252 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b23e:	4b55      	ldr	r3, [pc, #340]	; (800b394 <UART_SetConfig+0x9cc>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	08db      	lsrs	r3, r3, #3
 800b244:	f003 0303 	and.w	r3, r3, #3
 800b248:	4a53      	ldr	r2, [pc, #332]	; (800b398 <UART_SetConfig+0x9d0>)
 800b24a:	fa22 f303 	lsr.w	r3, r2, r3
 800b24e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b250:	e00f      	b.n	800b272 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800b252:	4b51      	ldr	r3, [pc, #324]	; (800b398 <UART_SetConfig+0x9d0>)
 800b254:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b256:	e00c      	b.n	800b272 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b258:	4b4c      	ldr	r3, [pc, #304]	; (800b38c <UART_SetConfig+0x9c4>)
 800b25a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b25c:	e009      	b.n	800b272 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b25e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b262:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b264:	e005      	b.n	800b272 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800b266:	2300      	movs	r3, #0
 800b268:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b26a:	2301      	movs	r3, #1
 800b26c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b270:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b274:	2b00      	cmp	r3, #0
 800b276:	f000 80ea 	beq.w	800b44e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27e:	4a44      	ldr	r2, [pc, #272]	; (800b390 <UART_SetConfig+0x9c8>)
 800b280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b284:	461a      	mov	r2, r3
 800b286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b288:	fbb3 f3f2 	udiv	r3, r3, r2
 800b28c:	005a      	lsls	r2, r3, #1
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	085b      	lsrs	r3, r3, #1
 800b294:	441a      	add	r2, r3
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b29e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a2:	2b0f      	cmp	r3, #15
 800b2a4:	d916      	bls.n	800b2d4 <UART_SetConfig+0x90c>
 800b2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2ac:	d212      	bcs.n	800b2d4 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	f023 030f 	bic.w	r3, r3, #15
 800b2b6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ba:	085b      	lsrs	r3, r3, #1
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	f003 0307 	and.w	r3, r3, #7
 800b2c2:	b29a      	uxth	r2, r3
 800b2c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b2d0:	60da      	str	r2, [r3, #12]
 800b2d2:	e0bc      	b.n	800b44e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b2da:	e0b8      	b.n	800b44e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b2dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b2e0:	2b20      	cmp	r3, #32
 800b2e2:	dc4b      	bgt.n	800b37c <UART_SetConfig+0x9b4>
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	f2c0 8087 	blt.w	800b3f8 <UART_SetConfig+0xa30>
 800b2ea:	2b20      	cmp	r3, #32
 800b2ec:	f200 8084 	bhi.w	800b3f8 <UART_SetConfig+0xa30>
 800b2f0:	a201      	add	r2, pc, #4	; (adr r2, 800b2f8 <UART_SetConfig+0x930>)
 800b2f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f6:	bf00      	nop
 800b2f8:	0800b383 	.word	0x0800b383
 800b2fc:	0800b39d 	.word	0x0800b39d
 800b300:	0800b3f9 	.word	0x0800b3f9
 800b304:	0800b3f9 	.word	0x0800b3f9
 800b308:	0800b3a5 	.word	0x0800b3a5
 800b30c:	0800b3f9 	.word	0x0800b3f9
 800b310:	0800b3f9 	.word	0x0800b3f9
 800b314:	0800b3f9 	.word	0x0800b3f9
 800b318:	0800b3b5 	.word	0x0800b3b5
 800b31c:	0800b3f9 	.word	0x0800b3f9
 800b320:	0800b3f9 	.word	0x0800b3f9
 800b324:	0800b3f9 	.word	0x0800b3f9
 800b328:	0800b3f9 	.word	0x0800b3f9
 800b32c:	0800b3f9 	.word	0x0800b3f9
 800b330:	0800b3f9 	.word	0x0800b3f9
 800b334:	0800b3f9 	.word	0x0800b3f9
 800b338:	0800b3c5 	.word	0x0800b3c5
 800b33c:	0800b3f9 	.word	0x0800b3f9
 800b340:	0800b3f9 	.word	0x0800b3f9
 800b344:	0800b3f9 	.word	0x0800b3f9
 800b348:	0800b3f9 	.word	0x0800b3f9
 800b34c:	0800b3f9 	.word	0x0800b3f9
 800b350:	0800b3f9 	.word	0x0800b3f9
 800b354:	0800b3f9 	.word	0x0800b3f9
 800b358:	0800b3f9 	.word	0x0800b3f9
 800b35c:	0800b3f9 	.word	0x0800b3f9
 800b360:	0800b3f9 	.word	0x0800b3f9
 800b364:	0800b3f9 	.word	0x0800b3f9
 800b368:	0800b3f9 	.word	0x0800b3f9
 800b36c:	0800b3f9 	.word	0x0800b3f9
 800b370:	0800b3f9 	.word	0x0800b3f9
 800b374:	0800b3f9 	.word	0x0800b3f9
 800b378:	0800b3eb 	.word	0x0800b3eb
 800b37c:	2b40      	cmp	r3, #64	; 0x40
 800b37e:	d037      	beq.n	800b3f0 <UART_SetConfig+0xa28>
 800b380:	e03a      	b.n	800b3f8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b382:	f7fb fce1 	bl	8006d48 <HAL_RCC_GetPCLK1Freq>
 800b386:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b388:	e03c      	b.n	800b404 <UART_SetConfig+0xa3c>
 800b38a:	bf00      	nop
 800b38c:	003d0900 	.word	0x003d0900
 800b390:	0800f90c 	.word	0x0800f90c
 800b394:	58024400 	.word	0x58024400
 800b398:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b39c:	f7fb fcea 	bl	8006d74 <HAL_RCC_GetPCLK2Freq>
 800b3a0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b3a2:	e02f      	b.n	800b404 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3a4:	f107 0314 	add.w	r3, r7, #20
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f7fd f921 	bl	80085f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b3ae:	69bb      	ldr	r3, [r7, #24]
 800b3b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b3b2:	e027      	b.n	800b404 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3b4:	f107 0308 	add.w	r3, r7, #8
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f7fd fa6d 	bl	8008898 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b3c2:	e01f      	b.n	800b404 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3c4:	4b2c      	ldr	r3, [pc, #176]	; (800b478 <UART_SetConfig+0xab0>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f003 0320 	and.w	r3, r3, #32
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d009      	beq.n	800b3e4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b3d0:	4b29      	ldr	r3, [pc, #164]	; (800b478 <UART_SetConfig+0xab0>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	08db      	lsrs	r3, r3, #3
 800b3d6:	f003 0303 	and.w	r3, r3, #3
 800b3da:	4a28      	ldr	r2, [pc, #160]	; (800b47c <UART_SetConfig+0xab4>)
 800b3dc:	fa22 f303 	lsr.w	r3, r2, r3
 800b3e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b3e2:	e00f      	b.n	800b404 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800b3e4:	4b25      	ldr	r3, [pc, #148]	; (800b47c <UART_SetConfig+0xab4>)
 800b3e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b3e8:	e00c      	b.n	800b404 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b3ea:	4b25      	ldr	r3, [pc, #148]	; (800b480 <UART_SetConfig+0xab8>)
 800b3ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b3ee:	e009      	b.n	800b404 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b3f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b3f6:	e005      	b.n	800b404 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b402:	bf00      	nop
    }

    if (pclk != 0U)
 800b404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b406:	2b00      	cmp	r3, #0
 800b408:	d021      	beq.n	800b44e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b40e:	4a1d      	ldr	r2, [pc, #116]	; (800b484 <UART_SetConfig+0xabc>)
 800b410:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b414:	461a      	mov	r2, r3
 800b416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b418:	fbb3 f2f2 	udiv	r2, r3, r2
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	085b      	lsrs	r3, r3, #1
 800b422:	441a      	add	r2, r3
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	fbb2 f3f3 	udiv	r3, r2, r3
 800b42c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b430:	2b0f      	cmp	r3, #15
 800b432:	d909      	bls.n	800b448 <UART_SetConfig+0xa80>
 800b434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b43a:	d205      	bcs.n	800b448 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43e:	b29a      	uxth	r2, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	60da      	str	r2, [r3, #12]
 800b446:	e002      	b.n	800b44e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b448:	2301      	movs	r3, #1
 800b44a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2201      	movs	r2, #1
 800b452:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2201      	movs	r2, #1
 800b45a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2200      	movs	r2, #0
 800b468:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b46a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3738      	adds	r7, #56	; 0x38
 800b472:	46bd      	mov	sp, r7
 800b474:	bdb0      	pop	{r4, r5, r7, pc}
 800b476:	bf00      	nop
 800b478:	58024400 	.word	0x58024400
 800b47c:	03d09000 	.word	0x03d09000
 800b480:	003d0900 	.word	0x003d0900
 800b484:	0800f90c 	.word	0x0800f90c

0800b488 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b488:	b480      	push	{r7}
 800b48a:	b083      	sub	sp, #12
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b494:	f003 0301 	and.w	r3, r3, #1
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d00a      	beq.n	800b4b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	430a      	orrs	r2, r1
 800b4b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b6:	f003 0302 	and.w	r3, r3, #2
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00a      	beq.n	800b4d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	430a      	orrs	r2, r1
 800b4d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4d8:	f003 0304 	and.w	r3, r3, #4
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d00a      	beq.n	800b4f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	430a      	orrs	r2, r1
 800b4f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4fa:	f003 0308 	and.w	r3, r3, #8
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00a      	beq.n	800b518 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	430a      	orrs	r2, r1
 800b516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b51c:	f003 0310 	and.w	r3, r3, #16
 800b520:	2b00      	cmp	r3, #0
 800b522:	d00a      	beq.n	800b53a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	430a      	orrs	r2, r1
 800b538:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b53e:	f003 0320 	and.w	r3, r3, #32
 800b542:	2b00      	cmp	r3, #0
 800b544:	d00a      	beq.n	800b55c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	430a      	orrs	r2, r1
 800b55a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b564:	2b00      	cmp	r3, #0
 800b566:	d01a      	beq.n	800b59e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	430a      	orrs	r2, r1
 800b57c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b586:	d10a      	bne.n	800b59e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	430a      	orrs	r2, r1
 800b59c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d00a      	beq.n	800b5c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	430a      	orrs	r2, r1
 800b5be:	605a      	str	r2, [r3, #4]
  }
}
 800b5c0:	bf00      	nop
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b086      	sub	sp, #24
 800b5d0:	af02      	add	r7, sp, #8
 800b5d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b5dc:	f7f7 fd84 	bl	80030e8 <HAL_GetTick>
 800b5e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f003 0308 	and.w	r3, r3, #8
 800b5ec:	2b08      	cmp	r3, #8
 800b5ee:	d10e      	bne.n	800b60e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b5f4:	9300      	str	r3, [sp, #0]
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 f82f 	bl	800b662 <UART_WaitOnFlagUntilTimeout>
 800b604:	4603      	mov	r3, r0
 800b606:	2b00      	cmp	r3, #0
 800b608:	d001      	beq.n	800b60e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b60a:	2303      	movs	r3, #3
 800b60c:	e025      	b.n	800b65a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f003 0304 	and.w	r3, r3, #4
 800b618:	2b04      	cmp	r3, #4
 800b61a:	d10e      	bne.n	800b63a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b61c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b620:	9300      	str	r3, [sp, #0]
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	2200      	movs	r2, #0
 800b626:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f000 f819 	bl	800b662 <UART_WaitOnFlagUntilTimeout>
 800b630:	4603      	mov	r3, r0
 800b632:	2b00      	cmp	r3, #0
 800b634:	d001      	beq.n	800b63a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b636:	2303      	movs	r3, #3
 800b638:	e00f      	b.n	800b65a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2220      	movs	r2, #32
 800b63e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2220      	movs	r2, #32
 800b646:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2200      	movs	r2, #0
 800b64e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b658:	2300      	movs	r3, #0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3710      	adds	r7, #16
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b09c      	sub	sp, #112	; 0x70
 800b666:	af00      	add	r7, sp, #0
 800b668:	60f8      	str	r0, [r7, #12]
 800b66a:	60b9      	str	r1, [r7, #8]
 800b66c:	603b      	str	r3, [r7, #0]
 800b66e:	4613      	mov	r3, r2
 800b670:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b672:	e0a9      	b.n	800b7c8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b67a:	f000 80a5 	beq.w	800b7c8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b67e:	f7f7 fd33 	bl	80030e8 <HAL_GetTick>
 800b682:	4602      	mov	r2, r0
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	1ad3      	subs	r3, r2, r3
 800b688:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d302      	bcc.n	800b694 <UART_WaitOnFlagUntilTimeout+0x32>
 800b68e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b690:	2b00      	cmp	r3, #0
 800b692:	d140      	bne.n	800b716 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b69a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b69c:	e853 3f00 	ldrex	r3, [r3]
 800b6a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b6a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b6a8:	667b      	str	r3, [r7, #100]	; 0x64
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b6b4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b6b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b6ba:	e841 2300 	strex	r3, r2, [r1]
 800b6be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b6c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d1e6      	bne.n	800b694 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	3308      	adds	r3, #8
 800b6cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6d0:	e853 3f00 	ldrex	r3, [r3]
 800b6d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d8:	f023 0301 	bic.w	r3, r3, #1
 800b6dc:	663b      	str	r3, [r7, #96]	; 0x60
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	3308      	adds	r3, #8
 800b6e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b6e6:	64ba      	str	r2, [r7, #72]	; 0x48
 800b6e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b6ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6ee:	e841 2300 	strex	r3, r2, [r1]
 800b6f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b6f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d1e5      	bne.n	800b6c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2220      	movs	r2, #32
 800b6fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2220      	movs	r2, #32
 800b706:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2200      	movs	r2, #0
 800b70e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b712:	2303      	movs	r3, #3
 800b714:	e069      	b.n	800b7ea <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f003 0304 	and.w	r3, r3, #4
 800b720:	2b00      	cmp	r3, #0
 800b722:	d051      	beq.n	800b7c8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	69db      	ldr	r3, [r3, #28]
 800b72a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b72e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b732:	d149      	bne.n	800b7c8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b73c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b746:	e853 3f00 	ldrex	r3, [r3]
 800b74a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b752:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	461a      	mov	r2, r3
 800b75a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b75c:	637b      	str	r3, [r7, #52]	; 0x34
 800b75e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b760:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b764:	e841 2300 	strex	r3, r2, [r1]
 800b768:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d1e6      	bne.n	800b73e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	3308      	adds	r3, #8
 800b776:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	e853 3f00 	ldrex	r3, [r3]
 800b77e:	613b      	str	r3, [r7, #16]
   return(result);
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	f023 0301 	bic.w	r3, r3, #1
 800b786:	66bb      	str	r3, [r7, #104]	; 0x68
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	3308      	adds	r3, #8
 800b78e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b790:	623a      	str	r2, [r7, #32]
 800b792:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b794:	69f9      	ldr	r1, [r7, #28]
 800b796:	6a3a      	ldr	r2, [r7, #32]
 800b798:	e841 2300 	strex	r3, r2, [r1]
 800b79c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b79e:	69bb      	ldr	r3, [r7, #24]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d1e5      	bne.n	800b770 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2220      	movs	r2, #32
 800b7a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2220      	movs	r2, #32
 800b7b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2220      	movs	r2, #32
 800b7b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b7c4:	2303      	movs	r3, #3
 800b7c6:	e010      	b.n	800b7ea <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	69da      	ldr	r2, [r3, #28]
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	4013      	ands	r3, r2
 800b7d2:	68ba      	ldr	r2, [r7, #8]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	bf0c      	ite	eq
 800b7d8:	2301      	moveq	r3, #1
 800b7da:	2300      	movne	r3, #0
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	461a      	mov	r2, r3
 800b7e0:	79fb      	ldrb	r3, [r7, #7]
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	f43f af46 	beq.w	800b674 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b7e8:	2300      	movs	r3, #0
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3770      	adds	r7, #112	; 0x70
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b7f2:	b480      	push	{r7}
 800b7f4:	b085      	sub	sp, #20
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b800:	2b01      	cmp	r3, #1
 800b802:	d101      	bne.n	800b808 <HAL_UARTEx_DisableFifoMode+0x16>
 800b804:	2302      	movs	r3, #2
 800b806:	e027      	b.n	800b858 <HAL_UARTEx_DisableFifoMode+0x66>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2201      	movs	r2, #1
 800b80c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2224      	movs	r2, #36	; 0x24
 800b814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	681a      	ldr	r2, [r3, #0]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f022 0201 	bic.w	r2, r2, #1
 800b82e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b836:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	68fa      	ldr	r2, [r7, #12]
 800b844:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2220      	movs	r2, #32
 800b84a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2200      	movs	r2, #0
 800b852:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b856:	2300      	movs	r3, #0
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3714      	adds	r7, #20
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr

0800b864 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b874:	2b01      	cmp	r3, #1
 800b876:	d101      	bne.n	800b87c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b878:	2302      	movs	r3, #2
 800b87a:	e02d      	b.n	800b8d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2201      	movs	r2, #1
 800b880:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2224      	movs	r2, #36	; 0x24
 800b888:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	681a      	ldr	r2, [r3, #0]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f022 0201 	bic.w	r2, r2, #1
 800b8a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	689b      	ldr	r3, [r3, #8]
 800b8aa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	683a      	ldr	r2, [r7, #0]
 800b8b4:	430a      	orrs	r2, r1
 800b8b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f000 f84f 	bl	800b95c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	68fa      	ldr	r2, [r7, #12]
 800b8c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2220      	movs	r2, #32
 800b8ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3710      	adds	r7, #16
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b8f0:	2b01      	cmp	r3, #1
 800b8f2:	d101      	bne.n	800b8f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b8f4:	2302      	movs	r3, #2
 800b8f6:	e02d      	b.n	800b954 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2224      	movs	r2, #36	; 0x24
 800b904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f022 0201 	bic.w	r2, r2, #1
 800b91e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	689b      	ldr	r3, [r3, #8]
 800b926:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	683a      	ldr	r2, [r7, #0]
 800b930:	430a      	orrs	r2, r1
 800b932:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f000 f811 	bl	800b95c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	68fa      	ldr	r2, [r7, #12]
 800b940:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2220      	movs	r2, #32
 800b946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2200      	movs	r2, #0
 800b94e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b952:	2300      	movs	r3, #0
}
 800b954:	4618      	mov	r0, r3
 800b956:	3710      	adds	r7, #16
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b085      	sub	sp, #20
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d108      	bne.n	800b97e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2201      	movs	r2, #1
 800b970:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2201      	movs	r2, #1
 800b978:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b97c:	e031      	b.n	800b9e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b97e:	2310      	movs	r3, #16
 800b980:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b982:	2310      	movs	r3, #16
 800b984:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	689b      	ldr	r3, [r3, #8]
 800b98c:	0e5b      	lsrs	r3, r3, #25
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	f003 0307 	and.w	r3, r3, #7
 800b994:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	689b      	ldr	r3, [r3, #8]
 800b99c:	0f5b      	lsrs	r3, r3, #29
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	f003 0307 	and.w	r3, r3, #7
 800b9a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b9a6:	7bbb      	ldrb	r3, [r7, #14]
 800b9a8:	7b3a      	ldrb	r2, [r7, #12]
 800b9aa:	4911      	ldr	r1, [pc, #68]	; (800b9f0 <UARTEx_SetNbDataToProcess+0x94>)
 800b9ac:	5c8a      	ldrb	r2, [r1, r2]
 800b9ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b9b2:	7b3a      	ldrb	r2, [r7, #12]
 800b9b4:	490f      	ldr	r1, [pc, #60]	; (800b9f4 <UARTEx_SetNbDataToProcess+0x98>)
 800b9b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b9b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9bc:	b29a      	uxth	r2, r3
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b9c4:	7bfb      	ldrb	r3, [r7, #15]
 800b9c6:	7b7a      	ldrb	r2, [r7, #13]
 800b9c8:	4909      	ldr	r1, [pc, #36]	; (800b9f0 <UARTEx_SetNbDataToProcess+0x94>)
 800b9ca:	5c8a      	ldrb	r2, [r1, r2]
 800b9cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b9d0:	7b7a      	ldrb	r2, [r7, #13]
 800b9d2:	4908      	ldr	r1, [pc, #32]	; (800b9f4 <UARTEx_SetNbDataToProcess+0x98>)
 800b9d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b9d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9da:	b29a      	uxth	r2, r3
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b9e2:	bf00      	nop
 800b9e4:	3714      	adds	r7, #20
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr
 800b9ee:	bf00      	nop
 800b9f0:	0800f924 	.word	0x0800f924
 800b9f4:	0800f92c 	.word	0x0800f92c

0800b9f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b9f8:	b084      	sub	sp, #16
 800b9fa:	b580      	push	{r7, lr}
 800b9fc:	b084      	sub	sp, #16
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	6078      	str	r0, [r7, #4]
 800ba02:	f107 001c 	add.w	r0, r7, #28
 800ba06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ba0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d120      	bne.n	800ba52 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	68da      	ldr	r2, [r3, #12]
 800ba20:	4b2a      	ldr	r3, [pc, #168]	; (800bacc <USB_CoreInit+0xd4>)
 800ba22:	4013      	ands	r3, r2
 800ba24:	687a      	ldr	r2, [r7, #4]
 800ba26:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	68db      	ldr	r3, [r3, #12]
 800ba2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ba34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba36:	2b01      	cmp	r3, #1
 800ba38:	d105      	bne.n	800ba46 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	68db      	ldr	r3, [r3, #12]
 800ba3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 faa8 	bl	800bf9c <USB_CoreReset>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	73fb      	strb	r3, [r7, #15]
 800ba50:	e01a      	b.n	800ba88 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	68db      	ldr	r3, [r3, #12]
 800ba56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f000 fa9c 	bl	800bf9c <USB_CoreReset>
 800ba64:	4603      	mov	r3, r0
 800ba66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ba68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d106      	bne.n	800ba7c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	639a      	str	r2, [r3, #56]	; 0x38
 800ba7a:	e005      	b.n	800ba88 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ba88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	d116      	bne.n	800babc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba92:	b29a      	uxth	r2, r3
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ba9c:	4b0c      	ldr	r3, [pc, #48]	; (800bad0 <USB_CoreInit+0xd8>)
 800ba9e:	4313      	orrs	r3, r2
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	689b      	ldr	r3, [r3, #8]
 800baa8:	f043 0206 	orr.w	r2, r3, #6
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	689b      	ldr	r3, [r3, #8]
 800bab4:	f043 0220 	orr.w	r2, r3, #32
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800babc:	7bfb      	ldrb	r3, [r7, #15]
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3710      	adds	r7, #16
 800bac2:	46bd      	mov	sp, r7
 800bac4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bac8:	b004      	add	sp, #16
 800baca:	4770      	bx	lr
 800bacc:	ffbdffbf 	.word	0xffbdffbf
 800bad0:	03ee0000 	.word	0x03ee0000

0800bad4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	689b      	ldr	r3, [r3, #8]
 800bae0:	f023 0201 	bic.w	r2, r3, #1
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bae8:	2300      	movs	r3, #0
}
 800baea:	4618      	mov	r0, r3
 800baec:	370c      	adds	r7, #12
 800baee:	46bd      	mov	sp, r7
 800baf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf4:	4770      	bx	lr

0800baf6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800baf6:	b580      	push	{r7, lr}
 800baf8:	b084      	sub	sp, #16
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	6078      	str	r0, [r7, #4]
 800bafe:	460b      	mov	r3, r1
 800bb00:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bb02:	2300      	movs	r3, #0
 800bb04:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	68db      	ldr	r3, [r3, #12]
 800bb0a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bb12:	78fb      	ldrb	r3, [r7, #3]
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d115      	bne.n	800bb44 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	68db      	ldr	r3, [r3, #12]
 800bb1c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bb24:	2001      	movs	r0, #1
 800bb26:	f7f7 faeb 	bl	8003100 <HAL_Delay>
      ms++;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f000 fa25 	bl	800bf80 <USB_GetMode>
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	d01e      	beq.n	800bb7a <USB_SetCurrentMode+0x84>
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2b31      	cmp	r3, #49	; 0x31
 800bb40:	d9f0      	bls.n	800bb24 <USB_SetCurrentMode+0x2e>
 800bb42:	e01a      	b.n	800bb7a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bb44:	78fb      	ldrb	r3, [r7, #3]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d115      	bne.n	800bb76 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	68db      	ldr	r3, [r3, #12]
 800bb4e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bb56:	2001      	movs	r0, #1
 800bb58:	f7f7 fad2 	bl	8003100 <HAL_Delay>
      ms++;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	3301      	adds	r3, #1
 800bb60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 fa0c 	bl	800bf80 <USB_GetMode>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d005      	beq.n	800bb7a <USB_SetCurrentMode+0x84>
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2b31      	cmp	r3, #49	; 0x31
 800bb72:	d9f0      	bls.n	800bb56 <USB_SetCurrentMode+0x60>
 800bb74:	e001      	b.n	800bb7a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bb76:	2301      	movs	r3, #1
 800bb78:	e005      	b.n	800bb86 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2b32      	cmp	r3, #50	; 0x32
 800bb7e:	d101      	bne.n	800bb84 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bb80:	2301      	movs	r3, #1
 800bb82:	e000      	b.n	800bb86 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bb84:	2300      	movs	r3, #0
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3710      	adds	r7, #16
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
	...

0800bb90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bb90:	b084      	sub	sp, #16
 800bb92:	b580      	push	{r7, lr}
 800bb94:	b086      	sub	sp, #24
 800bb96:	af00      	add	r7, sp, #0
 800bb98:	6078      	str	r0, [r7, #4]
 800bb9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bb9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bba2:	2300      	movs	r3, #0
 800bba4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bbaa:	2300      	movs	r3, #0
 800bbac:	613b      	str	r3, [r7, #16]
 800bbae:	e009      	b.n	800bbc4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	3340      	adds	r3, #64	; 0x40
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	4413      	add	r3, r2
 800bbba:	2200      	movs	r2, #0
 800bbbc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	613b      	str	r3, [r7, #16]
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	2b0e      	cmp	r3, #14
 800bbc8:	d9f2      	bls.n	800bbb0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bbca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d11c      	bne.n	800bc0a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	68fa      	ldr	r2, [r7, #12]
 800bbda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbde:	f043 0302 	orr.w	r3, r3, #2
 800bbe2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbe8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	601a      	str	r2, [r3, #0]
 800bc08:	e005      	b.n	800bc16 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	2300      	movs	r3, #0
 800bc20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc28:	4619      	mov	r1, r3
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc30:	461a      	mov	r2, r3
 800bc32:	680b      	ldr	r3, [r1, #0]
 800bc34:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bc36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc38:	2b01      	cmp	r3, #1
 800bc3a:	d10c      	bne.n	800bc56 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d104      	bne.n	800bc4c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bc42:	2100      	movs	r1, #0
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f000 f961 	bl	800bf0c <USB_SetDevSpeed>
 800bc4a:	e008      	b.n	800bc5e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bc4c:	2101      	movs	r1, #1
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f000 f95c 	bl	800bf0c <USB_SetDevSpeed>
 800bc54:	e003      	b.n	800bc5e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bc56:	2103      	movs	r1, #3
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 f957 	bl	800bf0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bc5e:	2110      	movs	r1, #16
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f000 f8f3 	bl	800be4c <USB_FlushTxFifo>
 800bc66:	4603      	mov	r3, r0
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d001      	beq.n	800bc70 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f000 f91d 	bl	800beb0 <USB_FlushRxFifo>
 800bc76:	4603      	mov	r3, r0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d001      	beq.n	800bc80 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc86:	461a      	mov	r2, r3
 800bc88:	2300      	movs	r3, #0
 800bc8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc92:	461a      	mov	r2, r3
 800bc94:	2300      	movs	r3, #0
 800bc96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc9e:	461a      	mov	r2, r3
 800bca0:	2300      	movs	r3, #0
 800bca2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bca4:	2300      	movs	r3, #0
 800bca6:	613b      	str	r3, [r7, #16]
 800bca8:	e043      	b.n	800bd32 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	015a      	lsls	r2, r3, #5
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bcbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bcc0:	d118      	bne.n	800bcf4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d10a      	bne.n	800bcde <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	015a      	lsls	r2, r3, #5
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	4413      	add	r3, r2
 800bcd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bcda:	6013      	str	r3, [r2, #0]
 800bcdc:	e013      	b.n	800bd06 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	015a      	lsls	r2, r3, #5
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	4413      	add	r3, r2
 800bce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcea:	461a      	mov	r2, r3
 800bcec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bcf0:	6013      	str	r3, [r2, #0]
 800bcf2:	e008      	b.n	800bd06 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	015a      	lsls	r2, r3, #5
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	4413      	add	r3, r2
 800bcfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd00:	461a      	mov	r2, r3
 800bd02:	2300      	movs	r3, #0
 800bd04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	015a      	lsls	r2, r3, #5
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd12:	461a      	mov	r2, r3
 800bd14:	2300      	movs	r3, #0
 800bd16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	015a      	lsls	r2, r3, #5
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	4413      	add	r3, r2
 800bd20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd24:	461a      	mov	r2, r3
 800bd26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bd2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	3301      	adds	r3, #1
 800bd30:	613b      	str	r3, [r7, #16]
 800bd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd34:	693a      	ldr	r2, [r7, #16]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d3b7      	bcc.n	800bcaa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	613b      	str	r3, [r7, #16]
 800bd3e:	e043      	b.n	800bdc8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	015a      	lsls	r2, r3, #5
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	4413      	add	r3, r2
 800bd48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd56:	d118      	bne.n	800bd8a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d10a      	bne.n	800bd74 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	015a      	lsls	r2, r3, #5
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	4413      	add	r3, r2
 800bd66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bd70:	6013      	str	r3, [r2, #0]
 800bd72:	e013      	b.n	800bd9c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	015a      	lsls	r2, r3, #5
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	4413      	add	r3, r2
 800bd7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd80:	461a      	mov	r2, r3
 800bd82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bd86:	6013      	str	r3, [r2, #0]
 800bd88:	e008      	b.n	800bd9c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	015a      	lsls	r2, r3, #5
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	4413      	add	r3, r2
 800bd92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd96:	461a      	mov	r2, r3
 800bd98:	2300      	movs	r3, #0
 800bd9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	015a      	lsls	r2, r3, #5
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	4413      	add	r3, r2
 800bda4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bda8:	461a      	mov	r2, r3
 800bdaa:	2300      	movs	r3, #0
 800bdac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	015a      	lsls	r2, r3, #5
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	4413      	add	r3, r2
 800bdb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdba:	461a      	mov	r2, r3
 800bdbc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bdc0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	613b      	str	r3, [r7, #16]
 800bdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdca:	693a      	ldr	r2, [r7, #16]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d3b7      	bcc.n	800bd40 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdd6:	691b      	ldr	r3, [r3, #16]
 800bdd8:	68fa      	ldr	r2, [r7, #12]
 800bdda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bdde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bde2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2200      	movs	r2, #0
 800bde8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bdf0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bdf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d105      	bne.n	800be04 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	699b      	ldr	r3, [r3, #24]
 800bdfc:	f043 0210 	orr.w	r2, r3, #16
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	699a      	ldr	r2, [r3, #24]
 800be08:	4b0e      	ldr	r3, [pc, #56]	; (800be44 <USB_DevInit+0x2b4>)
 800be0a:	4313      	orrs	r3, r2
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800be10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be12:	2b00      	cmp	r3, #0
 800be14:	d005      	beq.n	800be22 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	699b      	ldr	r3, [r3, #24]
 800be1a:	f043 0208 	orr.w	r2, r3, #8
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800be22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be24:	2b01      	cmp	r3, #1
 800be26:	d105      	bne.n	800be34 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	699a      	ldr	r2, [r3, #24]
 800be2c:	4b06      	ldr	r3, [pc, #24]	; (800be48 <USB_DevInit+0x2b8>)
 800be2e:	4313      	orrs	r3, r2
 800be30:	687a      	ldr	r2, [r7, #4]
 800be32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800be34:	7dfb      	ldrb	r3, [r7, #23]
}
 800be36:	4618      	mov	r0, r3
 800be38:	3718      	adds	r7, #24
 800be3a:	46bd      	mov	sp, r7
 800be3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be40:	b004      	add	sp, #16
 800be42:	4770      	bx	lr
 800be44:	803c3800 	.word	0x803c3800
 800be48:	40000004 	.word	0x40000004

0800be4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b085      	sub	sp, #20
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800be56:	2300      	movs	r3, #0
 800be58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	3301      	adds	r3, #1
 800be5e:	60fb      	str	r3, [r7, #12]
 800be60:	4a12      	ldr	r2, [pc, #72]	; (800beac <USB_FlushTxFifo+0x60>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d901      	bls.n	800be6a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800be66:	2303      	movs	r3, #3
 800be68:	e01a      	b.n	800bea0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	691b      	ldr	r3, [r3, #16]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	daf3      	bge.n	800be5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800be72:	2300      	movs	r3, #0
 800be74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	019b      	lsls	r3, r3, #6
 800be7a:	f043 0220 	orr.w	r2, r3, #32
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	3301      	adds	r3, #1
 800be86:	60fb      	str	r3, [r7, #12]
 800be88:	4a08      	ldr	r2, [pc, #32]	; (800beac <USB_FlushTxFifo+0x60>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d901      	bls.n	800be92 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800be8e:	2303      	movs	r3, #3
 800be90:	e006      	b.n	800bea0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	691b      	ldr	r3, [r3, #16]
 800be96:	f003 0320 	and.w	r3, r3, #32
 800be9a:	2b20      	cmp	r3, #32
 800be9c:	d0f1      	beq.n	800be82 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800be9e:	2300      	movs	r3, #0
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3714      	adds	r7, #20
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr
 800beac:	00030d40 	.word	0x00030d40

0800beb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b085      	sub	sp, #20
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800beb8:	2300      	movs	r3, #0
 800beba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	3301      	adds	r3, #1
 800bec0:	60fb      	str	r3, [r7, #12]
 800bec2:	4a11      	ldr	r2, [pc, #68]	; (800bf08 <USB_FlushRxFifo+0x58>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d901      	bls.n	800becc <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800bec8:	2303      	movs	r3, #3
 800beca:	e017      	b.n	800befc <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	691b      	ldr	r3, [r3, #16]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	daf3      	bge.n	800bebc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bed4:	2300      	movs	r3, #0
 800bed6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2210      	movs	r2, #16
 800bedc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	3301      	adds	r3, #1
 800bee2:	60fb      	str	r3, [r7, #12]
 800bee4:	4a08      	ldr	r2, [pc, #32]	; (800bf08 <USB_FlushRxFifo+0x58>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d901      	bls.n	800beee <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800beea:	2303      	movs	r3, #3
 800beec:	e006      	b.n	800befc <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	691b      	ldr	r3, [r3, #16]
 800bef2:	f003 0310 	and.w	r3, r3, #16
 800bef6:	2b10      	cmp	r3, #16
 800bef8:	d0f1      	beq.n	800bede <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800befa:	2300      	movs	r3, #0
}
 800befc:	4618      	mov	r0, r3
 800befe:	3714      	adds	r7, #20
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr
 800bf08:	00030d40 	.word	0x00030d40

0800bf0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b085      	sub	sp, #20
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	460b      	mov	r3, r1
 800bf16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf22:	681a      	ldr	r2, [r3, #0]
 800bf24:	78fb      	ldrb	r3, [r7, #3]
 800bf26:	68f9      	ldr	r1, [r7, #12]
 800bf28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bf30:	2300      	movs	r3, #0
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3714      	adds	r7, #20
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr

0800bf3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bf3e:	b480      	push	{r7}
 800bf40:	b085      	sub	sp, #20
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	68fa      	ldr	r2, [r7, #12]
 800bf54:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bf58:	f023 0303 	bic.w	r3, r3, #3
 800bf5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	68fa      	ldr	r2, [r7, #12]
 800bf68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf6c:	f043 0302 	orr.w	r3, r3, #2
 800bf70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bf72:	2300      	movs	r3, #0
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3714      	adds	r7, #20
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	4770      	bx	lr

0800bf80 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b083      	sub	sp, #12
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	695b      	ldr	r3, [r3, #20]
 800bf8c:	f003 0301 	and.w	r3, r3, #1
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	370c      	adds	r7, #12
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b085      	sub	sp, #20
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	3301      	adds	r3, #1
 800bfac:	60fb      	str	r3, [r7, #12]
 800bfae:	4a13      	ldr	r2, [pc, #76]	; (800bffc <USB_CoreReset+0x60>)
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d901      	bls.n	800bfb8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800bfb4:	2303      	movs	r3, #3
 800bfb6:	e01a      	b.n	800bfee <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	691b      	ldr	r3, [r3, #16]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	daf3      	bge.n	800bfa8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	691b      	ldr	r3, [r3, #16]
 800bfc8:	f043 0201 	orr.w	r2, r3, #1
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	60fb      	str	r3, [r7, #12]
 800bfd6:	4a09      	ldr	r2, [pc, #36]	; (800bffc <USB_CoreReset+0x60>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d901      	bls.n	800bfe0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800bfdc:	2303      	movs	r3, #3
 800bfde:	e006      	b.n	800bfee <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	691b      	ldr	r3, [r3, #16]
 800bfe4:	f003 0301 	and.w	r3, r3, #1
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	d0f1      	beq.n	800bfd0 <USB_CoreReset+0x34>

  return HAL_OK;
 800bfec:	2300      	movs	r3, #0
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3714      	adds	r7, #20
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop
 800bffc:	00030d40 	.word	0x00030d40

0800c000 <__errno>:
 800c000:	4b01      	ldr	r3, [pc, #4]	; (800c008 <__errno+0x8>)
 800c002:	6818      	ldr	r0, [r3, #0]
 800c004:	4770      	bx	lr
 800c006:	bf00      	nop
 800c008:	24000034 	.word	0x24000034

0800c00c <__libc_init_array>:
 800c00c:	b570      	push	{r4, r5, r6, lr}
 800c00e:	4d0d      	ldr	r5, [pc, #52]	; (800c044 <__libc_init_array+0x38>)
 800c010:	4c0d      	ldr	r4, [pc, #52]	; (800c048 <__libc_init_array+0x3c>)
 800c012:	1b64      	subs	r4, r4, r5
 800c014:	10a4      	asrs	r4, r4, #2
 800c016:	2600      	movs	r6, #0
 800c018:	42a6      	cmp	r6, r4
 800c01a:	d109      	bne.n	800c030 <__libc_init_array+0x24>
 800c01c:	4d0b      	ldr	r5, [pc, #44]	; (800c04c <__libc_init_array+0x40>)
 800c01e:	4c0c      	ldr	r4, [pc, #48]	; (800c050 <__libc_init_array+0x44>)
 800c020:	f000 fc56 	bl	800c8d0 <_init>
 800c024:	1b64      	subs	r4, r4, r5
 800c026:	10a4      	asrs	r4, r4, #2
 800c028:	2600      	movs	r6, #0
 800c02a:	42a6      	cmp	r6, r4
 800c02c:	d105      	bne.n	800c03a <__libc_init_array+0x2e>
 800c02e:	bd70      	pop	{r4, r5, r6, pc}
 800c030:	f855 3b04 	ldr.w	r3, [r5], #4
 800c034:	4798      	blx	r3
 800c036:	3601      	adds	r6, #1
 800c038:	e7ee      	b.n	800c018 <__libc_init_array+0xc>
 800c03a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c03e:	4798      	blx	r3
 800c040:	3601      	adds	r6, #1
 800c042:	e7f2      	b.n	800c02a <__libc_init_array+0x1e>
 800c044:	0800f970 	.word	0x0800f970
 800c048:	0800f970 	.word	0x0800f970
 800c04c:	0800f970 	.word	0x0800f970
 800c050:	0800f974 	.word	0x0800f974

0800c054 <memcpy>:
 800c054:	440a      	add	r2, r1
 800c056:	4291      	cmp	r1, r2
 800c058:	f100 33ff 	add.w	r3, r0, #4294967295
 800c05c:	d100      	bne.n	800c060 <memcpy+0xc>
 800c05e:	4770      	bx	lr
 800c060:	b510      	push	{r4, lr}
 800c062:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c066:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c06a:	4291      	cmp	r1, r2
 800c06c:	d1f9      	bne.n	800c062 <memcpy+0xe>
 800c06e:	bd10      	pop	{r4, pc}

0800c070 <memmove>:
 800c070:	4288      	cmp	r0, r1
 800c072:	b510      	push	{r4, lr}
 800c074:	eb01 0402 	add.w	r4, r1, r2
 800c078:	d902      	bls.n	800c080 <memmove+0x10>
 800c07a:	4284      	cmp	r4, r0
 800c07c:	4623      	mov	r3, r4
 800c07e:	d807      	bhi.n	800c090 <memmove+0x20>
 800c080:	1e43      	subs	r3, r0, #1
 800c082:	42a1      	cmp	r1, r4
 800c084:	d008      	beq.n	800c098 <memmove+0x28>
 800c086:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c08a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c08e:	e7f8      	b.n	800c082 <memmove+0x12>
 800c090:	4402      	add	r2, r0
 800c092:	4601      	mov	r1, r0
 800c094:	428a      	cmp	r2, r1
 800c096:	d100      	bne.n	800c09a <memmove+0x2a>
 800c098:	bd10      	pop	{r4, pc}
 800c09a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c09e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c0a2:	e7f7      	b.n	800c094 <memmove+0x24>

0800c0a4 <memset>:
 800c0a4:	4402      	add	r2, r0
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	d100      	bne.n	800c0ae <memset+0xa>
 800c0ac:	4770      	bx	lr
 800c0ae:	f803 1b01 	strb.w	r1, [r3], #1
 800c0b2:	e7f9      	b.n	800c0a8 <memset+0x4>

0800c0b4 <siprintf>:
 800c0b4:	b40e      	push	{r1, r2, r3}
 800c0b6:	b500      	push	{lr}
 800c0b8:	b09c      	sub	sp, #112	; 0x70
 800c0ba:	ab1d      	add	r3, sp, #116	; 0x74
 800c0bc:	9002      	str	r0, [sp, #8]
 800c0be:	9006      	str	r0, [sp, #24]
 800c0c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c0c4:	4809      	ldr	r0, [pc, #36]	; (800c0ec <siprintf+0x38>)
 800c0c6:	9107      	str	r1, [sp, #28]
 800c0c8:	9104      	str	r1, [sp, #16]
 800c0ca:	4909      	ldr	r1, [pc, #36]	; (800c0f0 <siprintf+0x3c>)
 800c0cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0d0:	9105      	str	r1, [sp, #20]
 800c0d2:	6800      	ldr	r0, [r0, #0]
 800c0d4:	9301      	str	r3, [sp, #4]
 800c0d6:	a902      	add	r1, sp, #8
 800c0d8:	f000 f870 	bl	800c1bc <_svfiprintf_r>
 800c0dc:	9b02      	ldr	r3, [sp, #8]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	701a      	strb	r2, [r3, #0]
 800c0e2:	b01c      	add	sp, #112	; 0x70
 800c0e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0e8:	b003      	add	sp, #12
 800c0ea:	4770      	bx	lr
 800c0ec:	24000034 	.word	0x24000034
 800c0f0:	ffff0208 	.word	0xffff0208

0800c0f4 <strcpy>:
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0fa:	f803 2b01 	strb.w	r2, [r3], #1
 800c0fe:	2a00      	cmp	r2, #0
 800c100:	d1f9      	bne.n	800c0f6 <strcpy+0x2>
 800c102:	4770      	bx	lr

0800c104 <__ssputs_r>:
 800c104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c108:	688e      	ldr	r6, [r1, #8]
 800c10a:	429e      	cmp	r6, r3
 800c10c:	4682      	mov	sl, r0
 800c10e:	460c      	mov	r4, r1
 800c110:	4690      	mov	r8, r2
 800c112:	461f      	mov	r7, r3
 800c114:	d838      	bhi.n	800c188 <__ssputs_r+0x84>
 800c116:	898a      	ldrh	r2, [r1, #12]
 800c118:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c11c:	d032      	beq.n	800c184 <__ssputs_r+0x80>
 800c11e:	6825      	ldr	r5, [r4, #0]
 800c120:	6909      	ldr	r1, [r1, #16]
 800c122:	eba5 0901 	sub.w	r9, r5, r1
 800c126:	6965      	ldr	r5, [r4, #20]
 800c128:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c12c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c130:	3301      	adds	r3, #1
 800c132:	444b      	add	r3, r9
 800c134:	106d      	asrs	r5, r5, #1
 800c136:	429d      	cmp	r5, r3
 800c138:	bf38      	it	cc
 800c13a:	461d      	movcc	r5, r3
 800c13c:	0553      	lsls	r3, r2, #21
 800c13e:	d531      	bpl.n	800c1a4 <__ssputs_r+0xa0>
 800c140:	4629      	mov	r1, r5
 800c142:	f000 fb1f 	bl	800c784 <_malloc_r>
 800c146:	4606      	mov	r6, r0
 800c148:	b950      	cbnz	r0, 800c160 <__ssputs_r+0x5c>
 800c14a:	230c      	movs	r3, #12
 800c14c:	f8ca 3000 	str.w	r3, [sl]
 800c150:	89a3      	ldrh	r3, [r4, #12]
 800c152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c156:	81a3      	strh	r3, [r4, #12]
 800c158:	f04f 30ff 	mov.w	r0, #4294967295
 800c15c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c160:	6921      	ldr	r1, [r4, #16]
 800c162:	464a      	mov	r2, r9
 800c164:	f7ff ff76 	bl	800c054 <memcpy>
 800c168:	89a3      	ldrh	r3, [r4, #12]
 800c16a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c16e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c172:	81a3      	strh	r3, [r4, #12]
 800c174:	6126      	str	r6, [r4, #16]
 800c176:	6165      	str	r5, [r4, #20]
 800c178:	444e      	add	r6, r9
 800c17a:	eba5 0509 	sub.w	r5, r5, r9
 800c17e:	6026      	str	r6, [r4, #0]
 800c180:	60a5      	str	r5, [r4, #8]
 800c182:	463e      	mov	r6, r7
 800c184:	42be      	cmp	r6, r7
 800c186:	d900      	bls.n	800c18a <__ssputs_r+0x86>
 800c188:	463e      	mov	r6, r7
 800c18a:	4632      	mov	r2, r6
 800c18c:	6820      	ldr	r0, [r4, #0]
 800c18e:	4641      	mov	r1, r8
 800c190:	f7ff ff6e 	bl	800c070 <memmove>
 800c194:	68a3      	ldr	r3, [r4, #8]
 800c196:	6822      	ldr	r2, [r4, #0]
 800c198:	1b9b      	subs	r3, r3, r6
 800c19a:	4432      	add	r2, r6
 800c19c:	60a3      	str	r3, [r4, #8]
 800c19e:	6022      	str	r2, [r4, #0]
 800c1a0:	2000      	movs	r0, #0
 800c1a2:	e7db      	b.n	800c15c <__ssputs_r+0x58>
 800c1a4:	462a      	mov	r2, r5
 800c1a6:	f000 fb47 	bl	800c838 <_realloc_r>
 800c1aa:	4606      	mov	r6, r0
 800c1ac:	2800      	cmp	r0, #0
 800c1ae:	d1e1      	bne.n	800c174 <__ssputs_r+0x70>
 800c1b0:	6921      	ldr	r1, [r4, #16]
 800c1b2:	4650      	mov	r0, sl
 800c1b4:	f000 fa96 	bl	800c6e4 <_free_r>
 800c1b8:	e7c7      	b.n	800c14a <__ssputs_r+0x46>
	...

0800c1bc <_svfiprintf_r>:
 800c1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c0:	4698      	mov	r8, r3
 800c1c2:	898b      	ldrh	r3, [r1, #12]
 800c1c4:	061b      	lsls	r3, r3, #24
 800c1c6:	b09d      	sub	sp, #116	; 0x74
 800c1c8:	4607      	mov	r7, r0
 800c1ca:	460d      	mov	r5, r1
 800c1cc:	4614      	mov	r4, r2
 800c1ce:	d50e      	bpl.n	800c1ee <_svfiprintf_r+0x32>
 800c1d0:	690b      	ldr	r3, [r1, #16]
 800c1d2:	b963      	cbnz	r3, 800c1ee <_svfiprintf_r+0x32>
 800c1d4:	2140      	movs	r1, #64	; 0x40
 800c1d6:	f000 fad5 	bl	800c784 <_malloc_r>
 800c1da:	6028      	str	r0, [r5, #0]
 800c1dc:	6128      	str	r0, [r5, #16]
 800c1de:	b920      	cbnz	r0, 800c1ea <_svfiprintf_r+0x2e>
 800c1e0:	230c      	movs	r3, #12
 800c1e2:	603b      	str	r3, [r7, #0]
 800c1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e8:	e0d1      	b.n	800c38e <_svfiprintf_r+0x1d2>
 800c1ea:	2340      	movs	r3, #64	; 0x40
 800c1ec:	616b      	str	r3, [r5, #20]
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	9309      	str	r3, [sp, #36]	; 0x24
 800c1f2:	2320      	movs	r3, #32
 800c1f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1fc:	2330      	movs	r3, #48	; 0x30
 800c1fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c3a8 <_svfiprintf_r+0x1ec>
 800c202:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c206:	f04f 0901 	mov.w	r9, #1
 800c20a:	4623      	mov	r3, r4
 800c20c:	469a      	mov	sl, r3
 800c20e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c212:	b10a      	cbz	r2, 800c218 <_svfiprintf_r+0x5c>
 800c214:	2a25      	cmp	r2, #37	; 0x25
 800c216:	d1f9      	bne.n	800c20c <_svfiprintf_r+0x50>
 800c218:	ebba 0b04 	subs.w	fp, sl, r4
 800c21c:	d00b      	beq.n	800c236 <_svfiprintf_r+0x7a>
 800c21e:	465b      	mov	r3, fp
 800c220:	4622      	mov	r2, r4
 800c222:	4629      	mov	r1, r5
 800c224:	4638      	mov	r0, r7
 800c226:	f7ff ff6d 	bl	800c104 <__ssputs_r>
 800c22a:	3001      	adds	r0, #1
 800c22c:	f000 80aa 	beq.w	800c384 <_svfiprintf_r+0x1c8>
 800c230:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c232:	445a      	add	r2, fp
 800c234:	9209      	str	r2, [sp, #36]	; 0x24
 800c236:	f89a 3000 	ldrb.w	r3, [sl]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	f000 80a2 	beq.w	800c384 <_svfiprintf_r+0x1c8>
 800c240:	2300      	movs	r3, #0
 800c242:	f04f 32ff 	mov.w	r2, #4294967295
 800c246:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c24a:	f10a 0a01 	add.w	sl, sl, #1
 800c24e:	9304      	str	r3, [sp, #16]
 800c250:	9307      	str	r3, [sp, #28]
 800c252:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c256:	931a      	str	r3, [sp, #104]	; 0x68
 800c258:	4654      	mov	r4, sl
 800c25a:	2205      	movs	r2, #5
 800c25c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c260:	4851      	ldr	r0, [pc, #324]	; (800c3a8 <_svfiprintf_r+0x1ec>)
 800c262:	f7f4 f845 	bl	80002f0 <memchr>
 800c266:	9a04      	ldr	r2, [sp, #16]
 800c268:	b9d8      	cbnz	r0, 800c2a2 <_svfiprintf_r+0xe6>
 800c26a:	06d0      	lsls	r0, r2, #27
 800c26c:	bf44      	itt	mi
 800c26e:	2320      	movmi	r3, #32
 800c270:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c274:	0711      	lsls	r1, r2, #28
 800c276:	bf44      	itt	mi
 800c278:	232b      	movmi	r3, #43	; 0x2b
 800c27a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c27e:	f89a 3000 	ldrb.w	r3, [sl]
 800c282:	2b2a      	cmp	r3, #42	; 0x2a
 800c284:	d015      	beq.n	800c2b2 <_svfiprintf_r+0xf6>
 800c286:	9a07      	ldr	r2, [sp, #28]
 800c288:	4654      	mov	r4, sl
 800c28a:	2000      	movs	r0, #0
 800c28c:	f04f 0c0a 	mov.w	ip, #10
 800c290:	4621      	mov	r1, r4
 800c292:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c296:	3b30      	subs	r3, #48	; 0x30
 800c298:	2b09      	cmp	r3, #9
 800c29a:	d94e      	bls.n	800c33a <_svfiprintf_r+0x17e>
 800c29c:	b1b0      	cbz	r0, 800c2cc <_svfiprintf_r+0x110>
 800c29e:	9207      	str	r2, [sp, #28]
 800c2a0:	e014      	b.n	800c2cc <_svfiprintf_r+0x110>
 800c2a2:	eba0 0308 	sub.w	r3, r0, r8
 800c2a6:	fa09 f303 	lsl.w	r3, r9, r3
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	9304      	str	r3, [sp, #16]
 800c2ae:	46a2      	mov	sl, r4
 800c2b0:	e7d2      	b.n	800c258 <_svfiprintf_r+0x9c>
 800c2b2:	9b03      	ldr	r3, [sp, #12]
 800c2b4:	1d19      	adds	r1, r3, #4
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	9103      	str	r1, [sp, #12]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	bfbb      	ittet	lt
 800c2be:	425b      	neglt	r3, r3
 800c2c0:	f042 0202 	orrlt.w	r2, r2, #2
 800c2c4:	9307      	strge	r3, [sp, #28]
 800c2c6:	9307      	strlt	r3, [sp, #28]
 800c2c8:	bfb8      	it	lt
 800c2ca:	9204      	strlt	r2, [sp, #16]
 800c2cc:	7823      	ldrb	r3, [r4, #0]
 800c2ce:	2b2e      	cmp	r3, #46	; 0x2e
 800c2d0:	d10c      	bne.n	800c2ec <_svfiprintf_r+0x130>
 800c2d2:	7863      	ldrb	r3, [r4, #1]
 800c2d4:	2b2a      	cmp	r3, #42	; 0x2a
 800c2d6:	d135      	bne.n	800c344 <_svfiprintf_r+0x188>
 800c2d8:	9b03      	ldr	r3, [sp, #12]
 800c2da:	1d1a      	adds	r2, r3, #4
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	9203      	str	r2, [sp, #12]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	bfb8      	it	lt
 800c2e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c2e8:	3402      	adds	r4, #2
 800c2ea:	9305      	str	r3, [sp, #20]
 800c2ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c3b8 <_svfiprintf_r+0x1fc>
 800c2f0:	7821      	ldrb	r1, [r4, #0]
 800c2f2:	2203      	movs	r2, #3
 800c2f4:	4650      	mov	r0, sl
 800c2f6:	f7f3 fffb 	bl	80002f0 <memchr>
 800c2fa:	b140      	cbz	r0, 800c30e <_svfiprintf_r+0x152>
 800c2fc:	2340      	movs	r3, #64	; 0x40
 800c2fe:	eba0 000a 	sub.w	r0, r0, sl
 800c302:	fa03 f000 	lsl.w	r0, r3, r0
 800c306:	9b04      	ldr	r3, [sp, #16]
 800c308:	4303      	orrs	r3, r0
 800c30a:	3401      	adds	r4, #1
 800c30c:	9304      	str	r3, [sp, #16]
 800c30e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c312:	4826      	ldr	r0, [pc, #152]	; (800c3ac <_svfiprintf_r+0x1f0>)
 800c314:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c318:	2206      	movs	r2, #6
 800c31a:	f7f3 ffe9 	bl	80002f0 <memchr>
 800c31e:	2800      	cmp	r0, #0
 800c320:	d038      	beq.n	800c394 <_svfiprintf_r+0x1d8>
 800c322:	4b23      	ldr	r3, [pc, #140]	; (800c3b0 <_svfiprintf_r+0x1f4>)
 800c324:	bb1b      	cbnz	r3, 800c36e <_svfiprintf_r+0x1b2>
 800c326:	9b03      	ldr	r3, [sp, #12]
 800c328:	3307      	adds	r3, #7
 800c32a:	f023 0307 	bic.w	r3, r3, #7
 800c32e:	3308      	adds	r3, #8
 800c330:	9303      	str	r3, [sp, #12]
 800c332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c334:	4433      	add	r3, r6
 800c336:	9309      	str	r3, [sp, #36]	; 0x24
 800c338:	e767      	b.n	800c20a <_svfiprintf_r+0x4e>
 800c33a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c33e:	460c      	mov	r4, r1
 800c340:	2001      	movs	r0, #1
 800c342:	e7a5      	b.n	800c290 <_svfiprintf_r+0xd4>
 800c344:	2300      	movs	r3, #0
 800c346:	3401      	adds	r4, #1
 800c348:	9305      	str	r3, [sp, #20]
 800c34a:	4619      	mov	r1, r3
 800c34c:	f04f 0c0a 	mov.w	ip, #10
 800c350:	4620      	mov	r0, r4
 800c352:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c356:	3a30      	subs	r2, #48	; 0x30
 800c358:	2a09      	cmp	r2, #9
 800c35a:	d903      	bls.n	800c364 <_svfiprintf_r+0x1a8>
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d0c5      	beq.n	800c2ec <_svfiprintf_r+0x130>
 800c360:	9105      	str	r1, [sp, #20]
 800c362:	e7c3      	b.n	800c2ec <_svfiprintf_r+0x130>
 800c364:	fb0c 2101 	mla	r1, ip, r1, r2
 800c368:	4604      	mov	r4, r0
 800c36a:	2301      	movs	r3, #1
 800c36c:	e7f0      	b.n	800c350 <_svfiprintf_r+0x194>
 800c36e:	ab03      	add	r3, sp, #12
 800c370:	9300      	str	r3, [sp, #0]
 800c372:	462a      	mov	r2, r5
 800c374:	4b0f      	ldr	r3, [pc, #60]	; (800c3b4 <_svfiprintf_r+0x1f8>)
 800c376:	a904      	add	r1, sp, #16
 800c378:	4638      	mov	r0, r7
 800c37a:	f3af 8000 	nop.w
 800c37e:	1c42      	adds	r2, r0, #1
 800c380:	4606      	mov	r6, r0
 800c382:	d1d6      	bne.n	800c332 <_svfiprintf_r+0x176>
 800c384:	89ab      	ldrh	r3, [r5, #12]
 800c386:	065b      	lsls	r3, r3, #25
 800c388:	f53f af2c 	bmi.w	800c1e4 <_svfiprintf_r+0x28>
 800c38c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c38e:	b01d      	add	sp, #116	; 0x74
 800c390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c394:	ab03      	add	r3, sp, #12
 800c396:	9300      	str	r3, [sp, #0]
 800c398:	462a      	mov	r2, r5
 800c39a:	4b06      	ldr	r3, [pc, #24]	; (800c3b4 <_svfiprintf_r+0x1f8>)
 800c39c:	a904      	add	r1, sp, #16
 800c39e:	4638      	mov	r0, r7
 800c3a0:	f000 f87a 	bl	800c498 <_printf_i>
 800c3a4:	e7eb      	b.n	800c37e <_svfiprintf_r+0x1c2>
 800c3a6:	bf00      	nop
 800c3a8:	0800f934 	.word	0x0800f934
 800c3ac:	0800f93e 	.word	0x0800f93e
 800c3b0:	00000000 	.word	0x00000000
 800c3b4:	0800c105 	.word	0x0800c105
 800c3b8:	0800f93a 	.word	0x0800f93a

0800c3bc <_printf_common>:
 800c3bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3c0:	4616      	mov	r6, r2
 800c3c2:	4699      	mov	r9, r3
 800c3c4:	688a      	ldr	r2, [r1, #8]
 800c3c6:	690b      	ldr	r3, [r1, #16]
 800c3c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	bfb8      	it	lt
 800c3d0:	4613      	movlt	r3, r2
 800c3d2:	6033      	str	r3, [r6, #0]
 800c3d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c3d8:	4607      	mov	r7, r0
 800c3da:	460c      	mov	r4, r1
 800c3dc:	b10a      	cbz	r2, 800c3e2 <_printf_common+0x26>
 800c3de:	3301      	adds	r3, #1
 800c3e0:	6033      	str	r3, [r6, #0]
 800c3e2:	6823      	ldr	r3, [r4, #0]
 800c3e4:	0699      	lsls	r1, r3, #26
 800c3e6:	bf42      	ittt	mi
 800c3e8:	6833      	ldrmi	r3, [r6, #0]
 800c3ea:	3302      	addmi	r3, #2
 800c3ec:	6033      	strmi	r3, [r6, #0]
 800c3ee:	6825      	ldr	r5, [r4, #0]
 800c3f0:	f015 0506 	ands.w	r5, r5, #6
 800c3f4:	d106      	bne.n	800c404 <_printf_common+0x48>
 800c3f6:	f104 0a19 	add.w	sl, r4, #25
 800c3fa:	68e3      	ldr	r3, [r4, #12]
 800c3fc:	6832      	ldr	r2, [r6, #0]
 800c3fe:	1a9b      	subs	r3, r3, r2
 800c400:	42ab      	cmp	r3, r5
 800c402:	dc26      	bgt.n	800c452 <_printf_common+0x96>
 800c404:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c408:	1e13      	subs	r3, r2, #0
 800c40a:	6822      	ldr	r2, [r4, #0]
 800c40c:	bf18      	it	ne
 800c40e:	2301      	movne	r3, #1
 800c410:	0692      	lsls	r2, r2, #26
 800c412:	d42b      	bmi.n	800c46c <_printf_common+0xb0>
 800c414:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c418:	4649      	mov	r1, r9
 800c41a:	4638      	mov	r0, r7
 800c41c:	47c0      	blx	r8
 800c41e:	3001      	adds	r0, #1
 800c420:	d01e      	beq.n	800c460 <_printf_common+0xa4>
 800c422:	6823      	ldr	r3, [r4, #0]
 800c424:	68e5      	ldr	r5, [r4, #12]
 800c426:	6832      	ldr	r2, [r6, #0]
 800c428:	f003 0306 	and.w	r3, r3, #6
 800c42c:	2b04      	cmp	r3, #4
 800c42e:	bf08      	it	eq
 800c430:	1aad      	subeq	r5, r5, r2
 800c432:	68a3      	ldr	r3, [r4, #8]
 800c434:	6922      	ldr	r2, [r4, #16]
 800c436:	bf0c      	ite	eq
 800c438:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c43c:	2500      	movne	r5, #0
 800c43e:	4293      	cmp	r3, r2
 800c440:	bfc4      	itt	gt
 800c442:	1a9b      	subgt	r3, r3, r2
 800c444:	18ed      	addgt	r5, r5, r3
 800c446:	2600      	movs	r6, #0
 800c448:	341a      	adds	r4, #26
 800c44a:	42b5      	cmp	r5, r6
 800c44c:	d11a      	bne.n	800c484 <_printf_common+0xc8>
 800c44e:	2000      	movs	r0, #0
 800c450:	e008      	b.n	800c464 <_printf_common+0xa8>
 800c452:	2301      	movs	r3, #1
 800c454:	4652      	mov	r2, sl
 800c456:	4649      	mov	r1, r9
 800c458:	4638      	mov	r0, r7
 800c45a:	47c0      	blx	r8
 800c45c:	3001      	adds	r0, #1
 800c45e:	d103      	bne.n	800c468 <_printf_common+0xac>
 800c460:	f04f 30ff 	mov.w	r0, #4294967295
 800c464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c468:	3501      	adds	r5, #1
 800c46a:	e7c6      	b.n	800c3fa <_printf_common+0x3e>
 800c46c:	18e1      	adds	r1, r4, r3
 800c46e:	1c5a      	adds	r2, r3, #1
 800c470:	2030      	movs	r0, #48	; 0x30
 800c472:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c476:	4422      	add	r2, r4
 800c478:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c47c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c480:	3302      	adds	r3, #2
 800c482:	e7c7      	b.n	800c414 <_printf_common+0x58>
 800c484:	2301      	movs	r3, #1
 800c486:	4622      	mov	r2, r4
 800c488:	4649      	mov	r1, r9
 800c48a:	4638      	mov	r0, r7
 800c48c:	47c0      	blx	r8
 800c48e:	3001      	adds	r0, #1
 800c490:	d0e6      	beq.n	800c460 <_printf_common+0xa4>
 800c492:	3601      	adds	r6, #1
 800c494:	e7d9      	b.n	800c44a <_printf_common+0x8e>
	...

0800c498 <_printf_i>:
 800c498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c49c:	460c      	mov	r4, r1
 800c49e:	4691      	mov	r9, r2
 800c4a0:	7e27      	ldrb	r7, [r4, #24]
 800c4a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c4a4:	2f78      	cmp	r7, #120	; 0x78
 800c4a6:	4680      	mov	r8, r0
 800c4a8:	469a      	mov	sl, r3
 800c4aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c4ae:	d807      	bhi.n	800c4c0 <_printf_i+0x28>
 800c4b0:	2f62      	cmp	r7, #98	; 0x62
 800c4b2:	d80a      	bhi.n	800c4ca <_printf_i+0x32>
 800c4b4:	2f00      	cmp	r7, #0
 800c4b6:	f000 80d8 	beq.w	800c66a <_printf_i+0x1d2>
 800c4ba:	2f58      	cmp	r7, #88	; 0x58
 800c4bc:	f000 80a3 	beq.w	800c606 <_printf_i+0x16e>
 800c4c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c4c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c4c8:	e03a      	b.n	800c540 <_printf_i+0xa8>
 800c4ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c4ce:	2b15      	cmp	r3, #21
 800c4d0:	d8f6      	bhi.n	800c4c0 <_printf_i+0x28>
 800c4d2:	a001      	add	r0, pc, #4	; (adr r0, 800c4d8 <_printf_i+0x40>)
 800c4d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c4d8:	0800c531 	.word	0x0800c531
 800c4dc:	0800c545 	.word	0x0800c545
 800c4e0:	0800c4c1 	.word	0x0800c4c1
 800c4e4:	0800c4c1 	.word	0x0800c4c1
 800c4e8:	0800c4c1 	.word	0x0800c4c1
 800c4ec:	0800c4c1 	.word	0x0800c4c1
 800c4f0:	0800c545 	.word	0x0800c545
 800c4f4:	0800c4c1 	.word	0x0800c4c1
 800c4f8:	0800c4c1 	.word	0x0800c4c1
 800c4fc:	0800c4c1 	.word	0x0800c4c1
 800c500:	0800c4c1 	.word	0x0800c4c1
 800c504:	0800c651 	.word	0x0800c651
 800c508:	0800c575 	.word	0x0800c575
 800c50c:	0800c633 	.word	0x0800c633
 800c510:	0800c4c1 	.word	0x0800c4c1
 800c514:	0800c4c1 	.word	0x0800c4c1
 800c518:	0800c673 	.word	0x0800c673
 800c51c:	0800c4c1 	.word	0x0800c4c1
 800c520:	0800c575 	.word	0x0800c575
 800c524:	0800c4c1 	.word	0x0800c4c1
 800c528:	0800c4c1 	.word	0x0800c4c1
 800c52c:	0800c63b 	.word	0x0800c63b
 800c530:	680b      	ldr	r3, [r1, #0]
 800c532:	1d1a      	adds	r2, r3, #4
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	600a      	str	r2, [r1, #0]
 800c538:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c53c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c540:	2301      	movs	r3, #1
 800c542:	e0a3      	b.n	800c68c <_printf_i+0x1f4>
 800c544:	6825      	ldr	r5, [r4, #0]
 800c546:	6808      	ldr	r0, [r1, #0]
 800c548:	062e      	lsls	r6, r5, #24
 800c54a:	f100 0304 	add.w	r3, r0, #4
 800c54e:	d50a      	bpl.n	800c566 <_printf_i+0xce>
 800c550:	6805      	ldr	r5, [r0, #0]
 800c552:	600b      	str	r3, [r1, #0]
 800c554:	2d00      	cmp	r5, #0
 800c556:	da03      	bge.n	800c560 <_printf_i+0xc8>
 800c558:	232d      	movs	r3, #45	; 0x2d
 800c55a:	426d      	negs	r5, r5
 800c55c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c560:	485e      	ldr	r0, [pc, #376]	; (800c6dc <_printf_i+0x244>)
 800c562:	230a      	movs	r3, #10
 800c564:	e019      	b.n	800c59a <_printf_i+0x102>
 800c566:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c56a:	6805      	ldr	r5, [r0, #0]
 800c56c:	600b      	str	r3, [r1, #0]
 800c56e:	bf18      	it	ne
 800c570:	b22d      	sxthne	r5, r5
 800c572:	e7ef      	b.n	800c554 <_printf_i+0xbc>
 800c574:	680b      	ldr	r3, [r1, #0]
 800c576:	6825      	ldr	r5, [r4, #0]
 800c578:	1d18      	adds	r0, r3, #4
 800c57a:	6008      	str	r0, [r1, #0]
 800c57c:	0628      	lsls	r0, r5, #24
 800c57e:	d501      	bpl.n	800c584 <_printf_i+0xec>
 800c580:	681d      	ldr	r5, [r3, #0]
 800c582:	e002      	b.n	800c58a <_printf_i+0xf2>
 800c584:	0669      	lsls	r1, r5, #25
 800c586:	d5fb      	bpl.n	800c580 <_printf_i+0xe8>
 800c588:	881d      	ldrh	r5, [r3, #0]
 800c58a:	4854      	ldr	r0, [pc, #336]	; (800c6dc <_printf_i+0x244>)
 800c58c:	2f6f      	cmp	r7, #111	; 0x6f
 800c58e:	bf0c      	ite	eq
 800c590:	2308      	moveq	r3, #8
 800c592:	230a      	movne	r3, #10
 800c594:	2100      	movs	r1, #0
 800c596:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c59a:	6866      	ldr	r6, [r4, #4]
 800c59c:	60a6      	str	r6, [r4, #8]
 800c59e:	2e00      	cmp	r6, #0
 800c5a0:	bfa2      	ittt	ge
 800c5a2:	6821      	ldrge	r1, [r4, #0]
 800c5a4:	f021 0104 	bicge.w	r1, r1, #4
 800c5a8:	6021      	strge	r1, [r4, #0]
 800c5aa:	b90d      	cbnz	r5, 800c5b0 <_printf_i+0x118>
 800c5ac:	2e00      	cmp	r6, #0
 800c5ae:	d04d      	beq.n	800c64c <_printf_i+0x1b4>
 800c5b0:	4616      	mov	r6, r2
 800c5b2:	fbb5 f1f3 	udiv	r1, r5, r3
 800c5b6:	fb03 5711 	mls	r7, r3, r1, r5
 800c5ba:	5dc7      	ldrb	r7, [r0, r7]
 800c5bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c5c0:	462f      	mov	r7, r5
 800c5c2:	42bb      	cmp	r3, r7
 800c5c4:	460d      	mov	r5, r1
 800c5c6:	d9f4      	bls.n	800c5b2 <_printf_i+0x11a>
 800c5c8:	2b08      	cmp	r3, #8
 800c5ca:	d10b      	bne.n	800c5e4 <_printf_i+0x14c>
 800c5cc:	6823      	ldr	r3, [r4, #0]
 800c5ce:	07df      	lsls	r7, r3, #31
 800c5d0:	d508      	bpl.n	800c5e4 <_printf_i+0x14c>
 800c5d2:	6923      	ldr	r3, [r4, #16]
 800c5d4:	6861      	ldr	r1, [r4, #4]
 800c5d6:	4299      	cmp	r1, r3
 800c5d8:	bfde      	ittt	le
 800c5da:	2330      	movle	r3, #48	; 0x30
 800c5dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c5e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c5e4:	1b92      	subs	r2, r2, r6
 800c5e6:	6122      	str	r2, [r4, #16]
 800c5e8:	f8cd a000 	str.w	sl, [sp]
 800c5ec:	464b      	mov	r3, r9
 800c5ee:	aa03      	add	r2, sp, #12
 800c5f0:	4621      	mov	r1, r4
 800c5f2:	4640      	mov	r0, r8
 800c5f4:	f7ff fee2 	bl	800c3bc <_printf_common>
 800c5f8:	3001      	adds	r0, #1
 800c5fa:	d14c      	bne.n	800c696 <_printf_i+0x1fe>
 800c5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c600:	b004      	add	sp, #16
 800c602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c606:	4835      	ldr	r0, [pc, #212]	; (800c6dc <_printf_i+0x244>)
 800c608:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c60c:	6823      	ldr	r3, [r4, #0]
 800c60e:	680e      	ldr	r6, [r1, #0]
 800c610:	061f      	lsls	r7, r3, #24
 800c612:	f856 5b04 	ldr.w	r5, [r6], #4
 800c616:	600e      	str	r6, [r1, #0]
 800c618:	d514      	bpl.n	800c644 <_printf_i+0x1ac>
 800c61a:	07d9      	lsls	r1, r3, #31
 800c61c:	bf44      	itt	mi
 800c61e:	f043 0320 	orrmi.w	r3, r3, #32
 800c622:	6023      	strmi	r3, [r4, #0]
 800c624:	b91d      	cbnz	r5, 800c62e <_printf_i+0x196>
 800c626:	6823      	ldr	r3, [r4, #0]
 800c628:	f023 0320 	bic.w	r3, r3, #32
 800c62c:	6023      	str	r3, [r4, #0]
 800c62e:	2310      	movs	r3, #16
 800c630:	e7b0      	b.n	800c594 <_printf_i+0xfc>
 800c632:	6823      	ldr	r3, [r4, #0]
 800c634:	f043 0320 	orr.w	r3, r3, #32
 800c638:	6023      	str	r3, [r4, #0]
 800c63a:	2378      	movs	r3, #120	; 0x78
 800c63c:	4828      	ldr	r0, [pc, #160]	; (800c6e0 <_printf_i+0x248>)
 800c63e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c642:	e7e3      	b.n	800c60c <_printf_i+0x174>
 800c644:	065e      	lsls	r6, r3, #25
 800c646:	bf48      	it	mi
 800c648:	b2ad      	uxthmi	r5, r5
 800c64a:	e7e6      	b.n	800c61a <_printf_i+0x182>
 800c64c:	4616      	mov	r6, r2
 800c64e:	e7bb      	b.n	800c5c8 <_printf_i+0x130>
 800c650:	680b      	ldr	r3, [r1, #0]
 800c652:	6826      	ldr	r6, [r4, #0]
 800c654:	6960      	ldr	r0, [r4, #20]
 800c656:	1d1d      	adds	r5, r3, #4
 800c658:	600d      	str	r5, [r1, #0]
 800c65a:	0635      	lsls	r5, r6, #24
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	d501      	bpl.n	800c664 <_printf_i+0x1cc>
 800c660:	6018      	str	r0, [r3, #0]
 800c662:	e002      	b.n	800c66a <_printf_i+0x1d2>
 800c664:	0671      	lsls	r1, r6, #25
 800c666:	d5fb      	bpl.n	800c660 <_printf_i+0x1c8>
 800c668:	8018      	strh	r0, [r3, #0]
 800c66a:	2300      	movs	r3, #0
 800c66c:	6123      	str	r3, [r4, #16]
 800c66e:	4616      	mov	r6, r2
 800c670:	e7ba      	b.n	800c5e8 <_printf_i+0x150>
 800c672:	680b      	ldr	r3, [r1, #0]
 800c674:	1d1a      	adds	r2, r3, #4
 800c676:	600a      	str	r2, [r1, #0]
 800c678:	681e      	ldr	r6, [r3, #0]
 800c67a:	6862      	ldr	r2, [r4, #4]
 800c67c:	2100      	movs	r1, #0
 800c67e:	4630      	mov	r0, r6
 800c680:	f7f3 fe36 	bl	80002f0 <memchr>
 800c684:	b108      	cbz	r0, 800c68a <_printf_i+0x1f2>
 800c686:	1b80      	subs	r0, r0, r6
 800c688:	6060      	str	r0, [r4, #4]
 800c68a:	6863      	ldr	r3, [r4, #4]
 800c68c:	6123      	str	r3, [r4, #16]
 800c68e:	2300      	movs	r3, #0
 800c690:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c694:	e7a8      	b.n	800c5e8 <_printf_i+0x150>
 800c696:	6923      	ldr	r3, [r4, #16]
 800c698:	4632      	mov	r2, r6
 800c69a:	4649      	mov	r1, r9
 800c69c:	4640      	mov	r0, r8
 800c69e:	47d0      	blx	sl
 800c6a0:	3001      	adds	r0, #1
 800c6a2:	d0ab      	beq.n	800c5fc <_printf_i+0x164>
 800c6a4:	6823      	ldr	r3, [r4, #0]
 800c6a6:	079b      	lsls	r3, r3, #30
 800c6a8:	d413      	bmi.n	800c6d2 <_printf_i+0x23a>
 800c6aa:	68e0      	ldr	r0, [r4, #12]
 800c6ac:	9b03      	ldr	r3, [sp, #12]
 800c6ae:	4298      	cmp	r0, r3
 800c6b0:	bfb8      	it	lt
 800c6b2:	4618      	movlt	r0, r3
 800c6b4:	e7a4      	b.n	800c600 <_printf_i+0x168>
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	4632      	mov	r2, r6
 800c6ba:	4649      	mov	r1, r9
 800c6bc:	4640      	mov	r0, r8
 800c6be:	47d0      	blx	sl
 800c6c0:	3001      	adds	r0, #1
 800c6c2:	d09b      	beq.n	800c5fc <_printf_i+0x164>
 800c6c4:	3501      	adds	r5, #1
 800c6c6:	68e3      	ldr	r3, [r4, #12]
 800c6c8:	9903      	ldr	r1, [sp, #12]
 800c6ca:	1a5b      	subs	r3, r3, r1
 800c6cc:	42ab      	cmp	r3, r5
 800c6ce:	dcf2      	bgt.n	800c6b6 <_printf_i+0x21e>
 800c6d0:	e7eb      	b.n	800c6aa <_printf_i+0x212>
 800c6d2:	2500      	movs	r5, #0
 800c6d4:	f104 0619 	add.w	r6, r4, #25
 800c6d8:	e7f5      	b.n	800c6c6 <_printf_i+0x22e>
 800c6da:	bf00      	nop
 800c6dc:	0800f945 	.word	0x0800f945
 800c6e0:	0800f956 	.word	0x0800f956

0800c6e4 <_free_r>:
 800c6e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6e6:	2900      	cmp	r1, #0
 800c6e8:	d048      	beq.n	800c77c <_free_r+0x98>
 800c6ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6ee:	9001      	str	r0, [sp, #4]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	f1a1 0404 	sub.w	r4, r1, #4
 800c6f6:	bfb8      	it	lt
 800c6f8:	18e4      	addlt	r4, r4, r3
 800c6fa:	f000 f8d3 	bl	800c8a4 <__malloc_lock>
 800c6fe:	4a20      	ldr	r2, [pc, #128]	; (800c780 <_free_r+0x9c>)
 800c700:	9801      	ldr	r0, [sp, #4]
 800c702:	6813      	ldr	r3, [r2, #0]
 800c704:	4615      	mov	r5, r2
 800c706:	b933      	cbnz	r3, 800c716 <_free_r+0x32>
 800c708:	6063      	str	r3, [r4, #4]
 800c70a:	6014      	str	r4, [r2, #0]
 800c70c:	b003      	add	sp, #12
 800c70e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c712:	f000 b8cd 	b.w	800c8b0 <__malloc_unlock>
 800c716:	42a3      	cmp	r3, r4
 800c718:	d90b      	bls.n	800c732 <_free_r+0x4e>
 800c71a:	6821      	ldr	r1, [r4, #0]
 800c71c:	1862      	adds	r2, r4, r1
 800c71e:	4293      	cmp	r3, r2
 800c720:	bf04      	itt	eq
 800c722:	681a      	ldreq	r2, [r3, #0]
 800c724:	685b      	ldreq	r3, [r3, #4]
 800c726:	6063      	str	r3, [r4, #4]
 800c728:	bf04      	itt	eq
 800c72a:	1852      	addeq	r2, r2, r1
 800c72c:	6022      	streq	r2, [r4, #0]
 800c72e:	602c      	str	r4, [r5, #0]
 800c730:	e7ec      	b.n	800c70c <_free_r+0x28>
 800c732:	461a      	mov	r2, r3
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	b10b      	cbz	r3, 800c73c <_free_r+0x58>
 800c738:	42a3      	cmp	r3, r4
 800c73a:	d9fa      	bls.n	800c732 <_free_r+0x4e>
 800c73c:	6811      	ldr	r1, [r2, #0]
 800c73e:	1855      	adds	r5, r2, r1
 800c740:	42a5      	cmp	r5, r4
 800c742:	d10b      	bne.n	800c75c <_free_r+0x78>
 800c744:	6824      	ldr	r4, [r4, #0]
 800c746:	4421      	add	r1, r4
 800c748:	1854      	adds	r4, r2, r1
 800c74a:	42a3      	cmp	r3, r4
 800c74c:	6011      	str	r1, [r2, #0]
 800c74e:	d1dd      	bne.n	800c70c <_free_r+0x28>
 800c750:	681c      	ldr	r4, [r3, #0]
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	6053      	str	r3, [r2, #4]
 800c756:	4421      	add	r1, r4
 800c758:	6011      	str	r1, [r2, #0]
 800c75a:	e7d7      	b.n	800c70c <_free_r+0x28>
 800c75c:	d902      	bls.n	800c764 <_free_r+0x80>
 800c75e:	230c      	movs	r3, #12
 800c760:	6003      	str	r3, [r0, #0]
 800c762:	e7d3      	b.n	800c70c <_free_r+0x28>
 800c764:	6825      	ldr	r5, [r4, #0]
 800c766:	1961      	adds	r1, r4, r5
 800c768:	428b      	cmp	r3, r1
 800c76a:	bf04      	itt	eq
 800c76c:	6819      	ldreq	r1, [r3, #0]
 800c76e:	685b      	ldreq	r3, [r3, #4]
 800c770:	6063      	str	r3, [r4, #4]
 800c772:	bf04      	itt	eq
 800c774:	1949      	addeq	r1, r1, r5
 800c776:	6021      	streq	r1, [r4, #0]
 800c778:	6054      	str	r4, [r2, #4]
 800c77a:	e7c7      	b.n	800c70c <_free_r+0x28>
 800c77c:	b003      	add	sp, #12
 800c77e:	bd30      	pop	{r4, r5, pc}
 800c780:	240004ec 	.word	0x240004ec

0800c784 <_malloc_r>:
 800c784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c786:	1ccd      	adds	r5, r1, #3
 800c788:	f025 0503 	bic.w	r5, r5, #3
 800c78c:	3508      	adds	r5, #8
 800c78e:	2d0c      	cmp	r5, #12
 800c790:	bf38      	it	cc
 800c792:	250c      	movcc	r5, #12
 800c794:	2d00      	cmp	r5, #0
 800c796:	4606      	mov	r6, r0
 800c798:	db01      	blt.n	800c79e <_malloc_r+0x1a>
 800c79a:	42a9      	cmp	r1, r5
 800c79c:	d903      	bls.n	800c7a6 <_malloc_r+0x22>
 800c79e:	230c      	movs	r3, #12
 800c7a0:	6033      	str	r3, [r6, #0]
 800c7a2:	2000      	movs	r0, #0
 800c7a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7a6:	f000 f87d 	bl	800c8a4 <__malloc_lock>
 800c7aa:	4921      	ldr	r1, [pc, #132]	; (800c830 <_malloc_r+0xac>)
 800c7ac:	680a      	ldr	r2, [r1, #0]
 800c7ae:	4614      	mov	r4, r2
 800c7b0:	b99c      	cbnz	r4, 800c7da <_malloc_r+0x56>
 800c7b2:	4f20      	ldr	r7, [pc, #128]	; (800c834 <_malloc_r+0xb0>)
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	b923      	cbnz	r3, 800c7c2 <_malloc_r+0x3e>
 800c7b8:	4621      	mov	r1, r4
 800c7ba:	4630      	mov	r0, r6
 800c7bc:	f000 f862 	bl	800c884 <_sbrk_r>
 800c7c0:	6038      	str	r0, [r7, #0]
 800c7c2:	4629      	mov	r1, r5
 800c7c4:	4630      	mov	r0, r6
 800c7c6:	f000 f85d 	bl	800c884 <_sbrk_r>
 800c7ca:	1c43      	adds	r3, r0, #1
 800c7cc:	d123      	bne.n	800c816 <_malloc_r+0x92>
 800c7ce:	230c      	movs	r3, #12
 800c7d0:	6033      	str	r3, [r6, #0]
 800c7d2:	4630      	mov	r0, r6
 800c7d4:	f000 f86c 	bl	800c8b0 <__malloc_unlock>
 800c7d8:	e7e3      	b.n	800c7a2 <_malloc_r+0x1e>
 800c7da:	6823      	ldr	r3, [r4, #0]
 800c7dc:	1b5b      	subs	r3, r3, r5
 800c7de:	d417      	bmi.n	800c810 <_malloc_r+0x8c>
 800c7e0:	2b0b      	cmp	r3, #11
 800c7e2:	d903      	bls.n	800c7ec <_malloc_r+0x68>
 800c7e4:	6023      	str	r3, [r4, #0]
 800c7e6:	441c      	add	r4, r3
 800c7e8:	6025      	str	r5, [r4, #0]
 800c7ea:	e004      	b.n	800c7f6 <_malloc_r+0x72>
 800c7ec:	6863      	ldr	r3, [r4, #4]
 800c7ee:	42a2      	cmp	r2, r4
 800c7f0:	bf0c      	ite	eq
 800c7f2:	600b      	streq	r3, [r1, #0]
 800c7f4:	6053      	strne	r3, [r2, #4]
 800c7f6:	4630      	mov	r0, r6
 800c7f8:	f000 f85a 	bl	800c8b0 <__malloc_unlock>
 800c7fc:	f104 000b 	add.w	r0, r4, #11
 800c800:	1d23      	adds	r3, r4, #4
 800c802:	f020 0007 	bic.w	r0, r0, #7
 800c806:	1ac2      	subs	r2, r0, r3
 800c808:	d0cc      	beq.n	800c7a4 <_malloc_r+0x20>
 800c80a:	1a1b      	subs	r3, r3, r0
 800c80c:	50a3      	str	r3, [r4, r2]
 800c80e:	e7c9      	b.n	800c7a4 <_malloc_r+0x20>
 800c810:	4622      	mov	r2, r4
 800c812:	6864      	ldr	r4, [r4, #4]
 800c814:	e7cc      	b.n	800c7b0 <_malloc_r+0x2c>
 800c816:	1cc4      	adds	r4, r0, #3
 800c818:	f024 0403 	bic.w	r4, r4, #3
 800c81c:	42a0      	cmp	r0, r4
 800c81e:	d0e3      	beq.n	800c7e8 <_malloc_r+0x64>
 800c820:	1a21      	subs	r1, r4, r0
 800c822:	4630      	mov	r0, r6
 800c824:	f000 f82e 	bl	800c884 <_sbrk_r>
 800c828:	3001      	adds	r0, #1
 800c82a:	d1dd      	bne.n	800c7e8 <_malloc_r+0x64>
 800c82c:	e7cf      	b.n	800c7ce <_malloc_r+0x4a>
 800c82e:	bf00      	nop
 800c830:	240004ec 	.word	0x240004ec
 800c834:	240004f0 	.word	0x240004f0

0800c838 <_realloc_r>:
 800c838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c83a:	4607      	mov	r7, r0
 800c83c:	4614      	mov	r4, r2
 800c83e:	460e      	mov	r6, r1
 800c840:	b921      	cbnz	r1, 800c84c <_realloc_r+0x14>
 800c842:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c846:	4611      	mov	r1, r2
 800c848:	f7ff bf9c 	b.w	800c784 <_malloc_r>
 800c84c:	b922      	cbnz	r2, 800c858 <_realloc_r+0x20>
 800c84e:	f7ff ff49 	bl	800c6e4 <_free_r>
 800c852:	4625      	mov	r5, r4
 800c854:	4628      	mov	r0, r5
 800c856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c858:	f000 f830 	bl	800c8bc <_malloc_usable_size_r>
 800c85c:	42a0      	cmp	r0, r4
 800c85e:	d20f      	bcs.n	800c880 <_realloc_r+0x48>
 800c860:	4621      	mov	r1, r4
 800c862:	4638      	mov	r0, r7
 800c864:	f7ff ff8e 	bl	800c784 <_malloc_r>
 800c868:	4605      	mov	r5, r0
 800c86a:	2800      	cmp	r0, #0
 800c86c:	d0f2      	beq.n	800c854 <_realloc_r+0x1c>
 800c86e:	4631      	mov	r1, r6
 800c870:	4622      	mov	r2, r4
 800c872:	f7ff fbef 	bl	800c054 <memcpy>
 800c876:	4631      	mov	r1, r6
 800c878:	4638      	mov	r0, r7
 800c87a:	f7ff ff33 	bl	800c6e4 <_free_r>
 800c87e:	e7e9      	b.n	800c854 <_realloc_r+0x1c>
 800c880:	4635      	mov	r5, r6
 800c882:	e7e7      	b.n	800c854 <_realloc_r+0x1c>

0800c884 <_sbrk_r>:
 800c884:	b538      	push	{r3, r4, r5, lr}
 800c886:	4d06      	ldr	r5, [pc, #24]	; (800c8a0 <_sbrk_r+0x1c>)
 800c888:	2300      	movs	r3, #0
 800c88a:	4604      	mov	r4, r0
 800c88c:	4608      	mov	r0, r1
 800c88e:	602b      	str	r3, [r5, #0]
 800c890:	f7f6 fabc 	bl	8002e0c <_sbrk>
 800c894:	1c43      	adds	r3, r0, #1
 800c896:	d102      	bne.n	800c89e <_sbrk_r+0x1a>
 800c898:	682b      	ldr	r3, [r5, #0]
 800c89a:	b103      	cbz	r3, 800c89e <_sbrk_r+0x1a>
 800c89c:	6023      	str	r3, [r4, #0]
 800c89e:	bd38      	pop	{r3, r4, r5, pc}
 800c8a0:	24002bf4 	.word	0x24002bf4

0800c8a4 <__malloc_lock>:
 800c8a4:	4801      	ldr	r0, [pc, #4]	; (800c8ac <__malloc_lock+0x8>)
 800c8a6:	f000 b811 	b.w	800c8cc <__retarget_lock_acquire_recursive>
 800c8aa:	bf00      	nop
 800c8ac:	24002bfc 	.word	0x24002bfc

0800c8b0 <__malloc_unlock>:
 800c8b0:	4801      	ldr	r0, [pc, #4]	; (800c8b8 <__malloc_unlock+0x8>)
 800c8b2:	f000 b80c 	b.w	800c8ce <__retarget_lock_release_recursive>
 800c8b6:	bf00      	nop
 800c8b8:	24002bfc 	.word	0x24002bfc

0800c8bc <_malloc_usable_size_r>:
 800c8bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8c0:	1f18      	subs	r0, r3, #4
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	bfbc      	itt	lt
 800c8c6:	580b      	ldrlt	r3, [r1, r0]
 800c8c8:	18c0      	addlt	r0, r0, r3
 800c8ca:	4770      	bx	lr

0800c8cc <__retarget_lock_acquire_recursive>:
 800c8cc:	4770      	bx	lr

0800c8ce <__retarget_lock_release_recursive>:
 800c8ce:	4770      	bx	lr

0800c8d0 <_init>:
 800c8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8d2:	bf00      	nop
 800c8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8d6:	bc08      	pop	{r3}
 800c8d8:	469e      	mov	lr, r3
 800c8da:	4770      	bx	lr

0800c8dc <_fini>:
 800c8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8de:	bf00      	nop
 800c8e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8e2:	bc08      	pop	{r3}
 800c8e4:	469e      	mov	lr, r3
 800c8e6:	4770      	bx	lr
