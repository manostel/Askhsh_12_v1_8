
Askhsh_12_v1_8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f5c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800a1fc  0800a1fc  0001a1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a2c0  0800a2c0  0001a2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a2c8  0800a2c8  0001a2c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a2cc  0800a2cc  0001a2cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800a2d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006e8  24000074  0800a344  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400075c  0800a344  0002075c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002e1ca  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000043bf  00000000  00000000  0004e26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001928  00000000  00000000  00052630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000017e0  00000000  00000000  00053f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a921  00000000  00000000  00055738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000204b4  00000000  00000000  00090059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017a7cd  00000000  00000000  000b050d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0022acda  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007128  00000000  00000000  0022ad30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a1e4 	.word	0x0800a1e4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	0800a1e4 	.word	0x0800a1e4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <delayUS_DWT>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void delayUS_DWT(volatile uint32_t microseconds)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000690:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <delayUS_DWT+0x40>)
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000696:	f004 f999 	bl	80049cc <HAL_RCC_GetHCLKFreq>
 800069a:	4603      	mov	r3, r0
 800069c:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <delayUS_DWT+0x44>)
 800069e:	fba2 2303 	umull	r2, r3, r2, r3
 80006a2:	0c9b      	lsrs	r3, r3, #18
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	fb02 f303 	mul.w	r3, r2, r3
 80006aa:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80006ac:	bf00      	nop
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <delayUS_DWT+0x40>)
 80006b0:	685a      	ldr	r2, [r3, #4]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	1ad2      	subs	r2, r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d3f8      	bcc.n	80006ae <delayUS_DWT+0x26>
}
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	e0001000 	.word	0xe0001000
 80006cc:	431bde83 	.word	0x431bde83

080006d0 <writeSDA>:
#define HEX2BCD(v)	((v) % 10 + (v) / 10 * 16)
#define BCD2HEX(v)	((v) % 16 + (v) / 16 * 10)


// SDA Write(output) Mode
static void writeSDA(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SDA;
 80006d6:	2301      	movs	r3, #1
 80006d8:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80006de:	2302      	movs	r3, #2
 80006e0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4619      	mov	r1, r3
 80006e6:	4803      	ldr	r0, [pc, #12]	; (80006f4 <writeSDA+0x24>)
 80006e8:	f002 fd78 	bl	80031dc <HAL_GPIO_Init>
	
}
 80006ec:	bf00      	nop
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	58021400 	.word	0x58021400

080006f8 <readSDA>:


// SDA Read(input) Mode
static void readSDA(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SDA;
 80006fe:	2301      	movs	r3, #1
 8000700:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_INPUT;
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8000706:	2302      	movs	r3, #2
 8000708:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800070a:	2302      	movs	r3, #2
 800070c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);	
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	4619      	mov	r1, r3
 8000712:	4803      	ldr	r0, [pc, #12]	; (8000720 <readSDA+0x28>)
 8000714:	f002 fd62 	bl	80031dc <HAL_GPIO_Init>
}
 8000718:	bf00      	nop
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	58021400 	.word	0x58021400

08000724 <DS1302_SendCmd>:


/* Отправка адреса или команды */
static void DS1302_SendCmd(uint8_t cmd) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i ++) 
 800072e:	2300      	movs	r3, #0
 8000730:	73fb      	strb	r3, [r7, #15]
 8000732:	e01e      	b.n	8000772 <DS1302_SendCmd+0x4e>
	{	
		//		DS1302_SDA = (bit)(addr & 1);
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA, (cmd & 1) ?  GPIO_PIN_SET :  GPIO_PIN_RESET);
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	461a      	mov	r2, r3
 800073e:	2101      	movs	r1, #1
 8000740:	4810      	ldr	r0, [pc, #64]	; (8000784 <DS1302_SendCmd+0x60>)
 8000742:	f002 ff13 	bl	800356c <HAL_GPIO_WritePin>
		//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	2102      	movs	r1, #2
 800074a:	480e      	ldr	r0, [pc, #56]	; (8000784 <DS1302_SendCmd+0x60>)
 800074c:	f002 ff0e 	bl	800356c <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff ff99 	bl	8000688 <delayUS_DWT>
		//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2102      	movs	r1, #2
 800075a:	480a      	ldr	r0, [pc, #40]	; (8000784 <DS1302_SendCmd+0x60>)
 800075c:	f002 ff06 	bl	800356c <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 8000760:	2001      	movs	r0, #1
 8000762:	f7ff ff91 	bl	8000688 <delayUS_DWT>
		cmd >>= 1;
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	085b      	lsrs	r3, r3, #1
 800076a:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i ++) 
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	3301      	adds	r3, #1
 8000770:	73fb      	strb	r3, [r7, #15]
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	2b07      	cmp	r3, #7
 8000776:	d9dd      	bls.n	8000734 <DS1302_SendCmd+0x10>
	}
}
 8000778:	bf00      	nop
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	58021400 	.word	0x58021400

08000788 <DS1302_WriteByte>:


/* Прочитать байт по адресу 'addr' */
static void DS1302_WriteByte(uint8_t addr, uint8_t d)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	460a      	mov	r2, r1
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	4613      	mov	r3, r2
 8000796:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	//	DS1302_RST = 1;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_SET);	
 8000798:	2201      	movs	r2, #1
 800079a:	2104      	movs	r1, #4
 800079c:	481c      	ldr	r0, [pc, #112]	; (8000810 <DS1302_WriteByte+0x88>)
 800079e:	f002 fee5 	bl	800356c <HAL_GPIO_WritePin>
	
	//addr = addr & 0xFE;
	DS1302_SendCmd(addr);	// Отправка адреса
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ffbd 	bl	8000724 <DS1302_SendCmd>
	
	for (i = 0; i < 8; i ++) 
 80007aa:	2300      	movs	r3, #0
 80007ac:	73fb      	strb	r3, [r7, #15]
 80007ae:	e01e      	b.n	80007ee <DS1302_WriteByte+0x66>
	{
		//		DS1302_SDA = (bit)(d & 1);
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA, (d & 1) ?  GPIO_PIN_SET :  GPIO_PIN_RESET);
 80007b0:	79bb      	ldrb	r3, [r7, #6]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	461a      	mov	r2, r3
 80007ba:	2101      	movs	r1, #1
 80007bc:	4814      	ldr	r0, [pc, #80]	; (8000810 <DS1302_WriteByte+0x88>)
 80007be:	f002 fed5 	bl	800356c <HAL_GPIO_WritePin>
		//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	2102      	movs	r1, #2
 80007c6:	4812      	ldr	r0, [pc, #72]	; (8000810 <DS1302_WriteByte+0x88>)
 80007c8:	f002 fed0 	bl	800356c <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 80007cc:	2001      	movs	r0, #1
 80007ce:	f7ff ff5b 	bl	8000688 <delayUS_DWT>
		//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2102      	movs	r1, #2
 80007d6:	480e      	ldr	r0, [pc, #56]	; (8000810 <DS1302_WriteByte+0x88>)
 80007d8:	f002 fec8 	bl	800356c <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 80007dc:	2001      	movs	r0, #1
 80007de:	f7ff ff53 	bl	8000688 <delayUS_DWT>
		d >>= 1;
 80007e2:	79bb      	ldrb	r3, [r7, #6]
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	71bb      	strb	r3, [r7, #6]
	for (i = 0; i < 8; i ++) 
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	3301      	adds	r3, #1
 80007ec:	73fb      	strb	r3, [r7, #15]
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2b07      	cmp	r3, #7
 80007f2:	d9dd      	bls.n	80007b0 <DS1302_WriteByte+0x28>
	}
	
	//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2104      	movs	r1, #4
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <DS1302_WriteByte+0x88>)
 80007fa:	f002 feb7 	bl	800356c <HAL_GPIO_WritePin>
	//	DS1302_SDA = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA,  GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2101      	movs	r1, #1
 8000802:	4803      	ldr	r0, [pc, #12]	; (8000810 <DS1302_WriteByte+0x88>)
 8000804:	f002 feb2 	bl	800356c <HAL_GPIO_WritePin>
}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	58021400 	.word	0x58021400

08000814 <DS1302_ReadByte>:
}


/* Reads a byte from addr */
static uint8_t DS1302_ReadByte(uint8_t addr)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t temp = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	73bb      	strb	r3, [r7, #14]

	//	DS1302_RST = 1;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_SET);	
 8000822:	2201      	movs	r2, #1
 8000824:	2104      	movs	r1, #4
 8000826:	4822      	ldr	r0, [pc, #136]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000828:	f002 fea0 	bl	800356c <HAL_GPIO_WritePin>
	addr = addr | 0x01; 	// Generate Read Address
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	71fb      	strb	r3, [r7, #7]

	DS1302_SendCmd(addr);	// Sends address
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff74 	bl	8000724 <DS1302_SendCmd>
	
	readSDA();
 800083c:	f7ff ff5c 	bl	80006f8 <readSDA>
	for (i = 0; i < 8; i ++) 
 8000840:	2300      	movs	r3, #0
 8000842:	73fb      	strb	r3, [r7, #15]
 8000844:	e020      	b.n	8000888 <DS1302_ReadByte+0x74>
	{
		temp >>= 1;
 8000846:	7bbb      	ldrb	r3, [r7, #14]
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	73bb      	strb	r3, [r7, #14]
		//		if(DS1302_SDA)
		if(HAL_GPIO_ReadPin(DS1302_GPIO, DS1302_SDA))
 800084c:	2101      	movs	r1, #1
 800084e:	4818      	ldr	r0, [pc, #96]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000850:	f002 fe74 	bl	800353c <HAL_GPIO_ReadPin>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d003      	beq.n	8000862 <DS1302_ReadByte+0x4e>
			temp |= 0x80;
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000860:	73bb      	strb	r3, [r7, #14]
		//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	2102      	movs	r1, #2
 8000866:	4812      	ldr	r0, [pc, #72]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000868:	f002 fe80 	bl	800356c <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff ff0b 	bl	8000688 <delayUS_DWT>
		//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2102      	movs	r1, #2
 8000876:	480e      	ldr	r0, [pc, #56]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000878:	f002 fe78 	bl	800356c <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 800087c:	2001      	movs	r0, #1
 800087e:	f7ff ff03 	bl	8000688 <delayUS_DWT>
	for (i = 0; i < 8; i ++) 
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	3301      	adds	r3, #1
 8000886:	73fb      	strb	r3, [r7, #15]
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	2b07      	cmp	r3, #7
 800088c:	d9db      	bls.n	8000846 <DS1302_ReadByte+0x32>
	}
	writeSDA();
 800088e:	f7ff ff1f 	bl	80006d0 <writeSDA>

	//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2104      	movs	r1, #4
 8000896:	4806      	ldr	r0, [pc, #24]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000898:	f002 fe68 	bl	800356c <HAL_GPIO_WritePin>
	//	DS1302_SDA = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA,  GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2101      	movs	r1, #1
 80008a0:	4803      	ldr	r0, [pc, #12]	; (80008b0 <DS1302_ReadByte+0x9c>)
 80008a2:	f002 fe63 	bl	800356c <HAL_GPIO_WritePin>
	return temp;
 80008a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	58021400 	.word	0x58021400

080008b4 <DS1302_WriteTime>:
}


/* Writes time byte by byte from 'buf' */
void DS1302_WriteTime(uint8_t *buf) 
{	
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	DS1302_WriteByte(DS1302_CONTROL, 0x00);			// Отключить защиту от записи
 80008bc:	2100      	movs	r1, #0
 80008be:	208e      	movs	r0, #142	; 0x8e
 80008c0:	f7ff ff62 	bl	8000788 <DS1302_WriteByte>
	delayUS_DWT(1);
 80008c4:	2001      	movs	r0, #1
 80008c6:	f7ff fedf 	bl	8000688 <delayUS_DWT>
	DS1302_WriteByte(DS1302_SEC, 0x80);
 80008ca:	2180      	movs	r1, #128	; 0x80
 80008cc:	2080      	movs	r0, #128	; 0x80
 80008ce:	f7ff ff5b 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_YEAR, HEX2BCD(buf[1]));
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3301      	adds	r3, #1
 80008d6:	781a      	ldrb	r2, [r3, #0]
 80008d8:	4b69      	ldr	r3, [pc, #420]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80008da:	fba3 1302 	umull	r1, r3, r3, r2
 80008de:	08d9      	lsrs	r1, r3, #3
 80008e0:	460b      	mov	r3, r1
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	440b      	add	r3, r1
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3301      	adds	r3, #1
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	4963      	ldr	r1, [pc, #396]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80008f4:	fba1 1303 	umull	r1, r3, r1, r3
 80008f8:	08db      	lsrs	r3, r3, #3
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	011b      	lsls	r3, r3, #4
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	4413      	add	r3, r2
 8000902:	b2db      	uxtb	r3, r3
 8000904:	4619      	mov	r1, r3
 8000906:	208c      	movs	r0, #140	; 0x8c
 8000908:	f7ff ff3e 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_MONTH, HEX2BCD(buf[2]));
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3302      	adds	r3, #2
 8000910:	781a      	ldrb	r2, [r3, #0]
 8000912:	4b5b      	ldr	r3, [pc, #364]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000914:	fba3 1302 	umull	r1, r3, r3, r2
 8000918:	08d9      	lsrs	r1, r3, #3
 800091a:	460b      	mov	r3, r1
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	440b      	add	r3, r1
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	b2da      	uxtb	r2, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3302      	adds	r3, #2
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4954      	ldr	r1, [pc, #336]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 800092e:	fba1 1303 	umull	r1, r3, r1, r3
 8000932:	08db      	lsrs	r3, r3, #3
 8000934:	b2db      	uxtb	r3, r3
 8000936:	011b      	lsls	r3, r3, #4
 8000938:	b2db      	uxtb	r3, r3
 800093a:	4413      	add	r3, r2
 800093c:	b2db      	uxtb	r3, r3
 800093e:	4619      	mov	r1, r3
 8000940:	2088      	movs	r0, #136	; 0x88
 8000942:	f7ff ff21 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_DATE, HEX2BCD(buf[3]));
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3303      	adds	r3, #3
 800094a:	781a      	ldrb	r2, [r3, #0]
 800094c:	4b4c      	ldr	r3, [pc, #304]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 800094e:	fba3 1302 	umull	r1, r3, r3, r2
 8000952:	08d9      	lsrs	r1, r3, #3
 8000954:	460b      	mov	r3, r1
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	440b      	add	r3, r1
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	b2da      	uxtb	r2, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3303      	adds	r3, #3
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	4946      	ldr	r1, [pc, #280]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000968:	fba1 1303 	umull	r1, r3, r1, r3
 800096c:	08db      	lsrs	r3, r3, #3
 800096e:	b2db      	uxtb	r3, r3
 8000970:	011b      	lsls	r3, r3, #4
 8000972:	b2db      	uxtb	r3, r3
 8000974:	4413      	add	r3, r2
 8000976:	b2db      	uxtb	r3, r3
 8000978:	4619      	mov	r1, r3
 800097a:	2086      	movs	r0, #134	; 0x86
 800097c:	f7ff ff04 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_HOUR, HEX2BCD(buf[4]));
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3304      	adds	r3, #4
 8000984:	781a      	ldrb	r2, [r3, #0]
 8000986:	4b3e      	ldr	r3, [pc, #248]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000988:	fba3 1302 	umull	r1, r3, r3, r2
 800098c:	08d9      	lsrs	r1, r3, #3
 800098e:	460b      	mov	r3, r1
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	440b      	add	r3, r1
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	b2da      	uxtb	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	3304      	adds	r3, #4
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	4937      	ldr	r1, [pc, #220]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80009a2:	fba1 1303 	umull	r1, r3, r1, r3
 80009a6:	08db      	lsrs	r3, r3, #3
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	011b      	lsls	r3, r3, #4
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	4413      	add	r3, r2
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	4619      	mov	r1, r3
 80009b4:	2084      	movs	r0, #132	; 0x84
 80009b6:	f7ff fee7 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_MIN, HEX2BCD(buf[5]));
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	3305      	adds	r3, #5
 80009be:	781a      	ldrb	r2, [r3, #0]
 80009c0:	4b2f      	ldr	r3, [pc, #188]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80009c2:	fba3 1302 	umull	r1, r3, r3, r2
 80009c6:	08d9      	lsrs	r1, r3, #3
 80009c8:	460b      	mov	r3, r1
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	440b      	add	r3, r1
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3305      	adds	r3, #5
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	4929      	ldr	r1, [pc, #164]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80009dc:	fba1 1303 	umull	r1, r3, r1, r3
 80009e0:	08db      	lsrs	r3, r3, #3
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	011b      	lsls	r3, r3, #4
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	4413      	add	r3, r2
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4619      	mov	r1, r3
 80009ee:	2082      	movs	r0, #130	; 0x82
 80009f0:	f7ff feca 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_SEC, HEX2BCD(buf[6]));
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3306      	adds	r3, #6
 80009f8:	781a      	ldrb	r2, [r3, #0]
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80009fc:	fba3 1302 	umull	r1, r3, r3, r2
 8000a00:	08d9      	lsrs	r1, r3, #3
 8000a02:	460b      	mov	r3, r1
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	440b      	add	r3, r1
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3306      	adds	r3, #6
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	491a      	ldr	r1, [pc, #104]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000a16:	fba1 1303 	umull	r1, r3, r1, r3
 8000a1a:	08db      	lsrs	r3, r3, #3
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	011b      	lsls	r3, r3, #4
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	4413      	add	r3, r2
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	4619      	mov	r1, r3
 8000a28:	2080      	movs	r0, #128	; 0x80
 8000a2a:	f7ff fead 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_DAY, HEX2BCD(buf[7]));
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	3307      	adds	r3, #7
 8000a32:	781a      	ldrb	r2, [r3, #0]
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000a36:	fba3 1302 	umull	r1, r3, r3, r2
 8000a3a:	08d9      	lsrs	r1, r3, #3
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	440b      	add	r3, r1
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3307      	adds	r3, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	490c      	ldr	r1, [pc, #48]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000a50:	fba1 1303 	umull	r1, r3, r1, r3
 8000a54:	08db      	lsrs	r3, r3, #3
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	011b      	lsls	r3, r3, #4
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	4413      	add	r3, r2
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	4619      	mov	r1, r3
 8000a62:	208a      	movs	r0, #138	; 0x8a
 8000a64:	f7ff fe90 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_CONTROL, 0x80);			// Включить защиту от записи
 8000a68:	2180      	movs	r1, #128	; 0x80
 8000a6a:	208e      	movs	r0, #142	; 0x8e
 8000a6c:	f7ff fe8c 	bl	8000788 <DS1302_WriteByte>
	delayUS_DWT(1);
 8000a70:	2001      	movs	r0, #1
 8000a72:	f7ff fe09 	bl	8000688 <delayUS_DWT>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	cccccccd 	.word	0xcccccccd

08000a84 <DS1302_ReadTime>:


/* Reads time byte by byte to 'buf' */
void DS1302_ReadTime(uint8_t *buf)  
{ 
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
   	uint8_t tmp;
	
	tmp = DS1302_ReadByte(DS1302_YEAR); 	
 8000a8c:	208c      	movs	r0, #140	; 0x8c
 8000a8e:	f7ff fec1 	bl	8000814 <DS1302_ReadByte>
 8000a92:	4603      	mov	r3, r0
 8000a94:	73fb      	strb	r3, [r7, #15]
	buf[1] = BCD2HEX(tmp);		 
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
 8000a98:	f003 030f 	and.w	r3, r3, #15
 8000a9c:	b2d9      	uxtb	r1, r3
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
 8000aa0:	091b      	lsrs	r3, r3, #4
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	0092      	lsls	r2, r2, #2
 8000aa8:	4413      	add	r3, r2
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	440a      	add	r2, r1
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_MONTH); 	
 8000ab8:	2088      	movs	r0, #136	; 0x88
 8000aba:	f7ff feab 	bl	8000814 <DS1302_ReadByte>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	73fb      	strb	r3, [r7, #15]
	buf[2] = BCD2HEX(tmp);	 
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	f003 030f 	and.w	r3, r3, #15
 8000ac8:	b2d9      	uxtb	r1, r3
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	091b      	lsrs	r3, r3, #4
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	0092      	lsls	r2, r2, #2
 8000ad4:	4413      	add	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	3302      	adds	r3, #2
 8000ade:	440a      	add	r2, r1
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_DATE); 	
 8000ae4:	2086      	movs	r0, #134	; 0x86
 8000ae6:	f7ff fe95 	bl	8000814 <DS1302_ReadByte>
 8000aea:	4603      	mov	r3, r0
 8000aec:	73fb      	strb	r3, [r7, #15]
	buf[3] = BCD2HEX(tmp);
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	f003 030f 	and.w	r3, r3, #15
 8000af4:	b2d9      	uxtb	r1, r3
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
 8000af8:	091b      	lsrs	r3, r3, #4
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	461a      	mov	r2, r3
 8000afe:	0092      	lsls	r2, r2, #2
 8000b00:	4413      	add	r3, r2
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3303      	adds	r3, #3
 8000b0a:	440a      	add	r2, r1
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_HOUR);		
 8000b10:	2084      	movs	r0, #132	; 0x84
 8000b12:	f7ff fe7f 	bl	8000814 <DS1302_ReadByte>
 8000b16:	4603      	mov	r3, r0
 8000b18:	73fb      	strb	r3, [r7, #15]
	buf[4] = BCD2HEX(tmp);
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
 8000b1c:	f003 030f 	and.w	r3, r3, #15
 8000b20:	b2d9      	uxtb	r1, r3
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	091b      	lsrs	r3, r3, #4
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	461a      	mov	r2, r3
 8000b2a:	0092      	lsls	r2, r2, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3304      	adds	r3, #4
 8000b36:	440a      	add	r2, r1
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_MIN);		
 8000b3c:	2082      	movs	r0, #130	; 0x82
 8000b3e:	f7ff fe69 	bl	8000814 <DS1302_ReadByte>
 8000b42:	4603      	mov	r3, r0
 8000b44:	73fb      	strb	r3, [r7, #15]
	buf[5] = BCD2HEX(tmp); 
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
 8000b48:	f003 030f 	and.w	r3, r3, #15
 8000b4c:	b2d9      	uxtb	r1, r3
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	091b      	lsrs	r3, r3, #4
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	461a      	mov	r2, r3
 8000b56:	0092      	lsls	r2, r2, #2
 8000b58:	4413      	add	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	3305      	adds	r3, #5
 8000b62:	440a      	add	r2, r1
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte((DS1302_SEC)) & 0x7F;
 8000b68:	2080      	movs	r0, #128	; 0x80
 8000b6a:	f7ff fe53 	bl	8000814 <DS1302_ReadByte>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b74:	73fb      	strb	r3, [r7, #15]
	buf[6] = BCD2HEX(tmp);
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	f003 030f 	and.w	r3, r3, #15
 8000b7c:	b2d9      	uxtb	r1, r3
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	091b      	lsrs	r3, r3, #4
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	461a      	mov	r2, r3
 8000b86:	0092      	lsls	r2, r2, #2
 8000b88:	4413      	add	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3306      	adds	r3, #6
 8000b92:	440a      	add	r2, r1
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_DAY);		
 8000b98:	208a      	movs	r0, #138	; 0x8a
 8000b9a:	f7ff fe3b 	bl	8000814 <DS1302_ReadByte>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	73fb      	strb	r3, [r7, #15]
	buf[7] = BCD2HEX(tmp);
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	f003 030f 	and.w	r3, r3, #15
 8000ba8:	b2d9      	uxtb	r1, r3
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	091b      	lsrs	r3, r3, #4
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	0092      	lsls	r2, r2, #2
 8000bb4:	4413      	add	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3307      	adds	r3, #7
 8000bbe:	440a      	add	r2, r1
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	701a      	strb	r2, [r3, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <DS1302_Init>:


/* Инициализация */
void DS1302_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
	DWT_Delay_Init(); //Инициализация таймера для отсчета милисекунд
 8000bd2:	f000 f849 	bl	8000c68 <DWT_Delay_Init>

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SCLK | DS1302_SDA | DS1302_RST;
 8000bd6:	2307      	movs	r3, #7
 8000bd8:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bde:	2302      	movs	r3, #2
 8000be0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	480d      	ldr	r0, [pc, #52]	; (8000c1c <DS1302_Init+0x50>)
 8000be8:	f002 faf8 	bl	80031dc <HAL_GPIO_Init>
	
	DS1302_WriteByte(DS1302_CHARGER, 0x00);			// Отключить Trickle Charger
 8000bec:	2100      	movs	r1, #0
 8000bee:	2090      	movs	r0, #144	; 0x90
 8000bf0:	f7ff fdca 	bl	8000788 <DS1302_WriteByte>
		
	//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2104      	movs	r1, #4
 8000bf8:	4808      	ldr	r0, [pc, #32]	; (8000c1c <DS1302_Init+0x50>)
 8000bfa:	f002 fcb7 	bl	800356c <HAL_GPIO_WritePin>
	//	DS1302_SCK = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2102      	movs	r1, #2
 8000c02:	4806      	ldr	r0, [pc, #24]	; (8000c1c <DS1302_Init+0x50>)
 8000c04:	f002 fcb2 	bl	800356c <HAL_GPIO_WritePin>

	delayUS_DWT(10); // Меньше 10 мкс делать не стоит.
 8000c08:	200a      	movs	r0, #10
 8000c0a:	f7ff fd3d 	bl	8000688 <delayUS_DWT>
	DS1302_ClockStart();
 8000c0e:	f000 f807 	bl	8000c20 <DS1302_ClockStart>
}
 8000c12:	bf00      	nop
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	58021400 	.word	0x58021400

08000c20 <DS1302_ClockStart>:

//Запуск часов.
//Изначально DS1302 в режиме HALT (остановлена, режим энергосбережения).
//Чтоб начался отсчет времени необходимо однократно выполнить эту функцию.
void DS1302_ClockStart(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
	uint8_t buf = 0x00;
 8000c26:	2300      	movs	r3, #0
 8000c28:	71fb      	strb	r3, [r7, #7]

	DS1302_WriteByte(DS1302_CONTROL, 0x00);			// Отключить защиту от записи
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	208e      	movs	r0, #142	; 0x8e
 8000c2e:	f7ff fdab 	bl	8000788 <DS1302_WriteByte>
	delayUS_DWT(1);
 8000c32:	2001      	movs	r0, #1
 8000c34:	f7ff fd28 	bl	8000688 <delayUS_DWT>

	buf = DS1302_ReadByte(DS1302_SEC) & 0x7F;		// Записываем в 8 бит 0. При этом сохраняем установленное значение секунд.
 8000c38:	2080      	movs	r0, #128	; 0x80
 8000c3a:	f7ff fdeb 	bl	8000814 <DS1302_ReadByte>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c44:	71fb      	strb	r3, [r7, #7]
	DS1302_WriteByte(DS1302_SEC, buf);
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	2080      	movs	r0, #128	; 0x80
 8000c4c:	f7ff fd9c 	bl	8000788 <DS1302_WriteByte>

	DS1302_WriteByte(DS1302_CONTROL, 0x80);			// Включить защиту от записи
 8000c50:	2180      	movs	r1, #128	; 0x80
 8000c52:	208e      	movs	r0, #142	; 0x8e
 8000c54:	f7ff fd98 	bl	8000788 <DS1302_WriteByte>
	delayUS_DWT(1);
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f7ff fd15 	bl	8000688 <delayUS_DWT>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <DWT_Delay_Init+0x58>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <DWT_Delay_Init+0x58>)
 8000c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c76:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <DWT_Delay_Init+0x58>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	4a10      	ldr	r2, [pc, #64]	; (8000cc0 <DWT_Delay_Init+0x58>)
 8000c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c82:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c8a:	f023 0301 	bic.w	r3, r3, #1
 8000c8e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000ca2:	bf00      	nop
     __ASM volatile ("NOP");
 8000ca4:	bf00      	nop
     __ASM volatile ("NOP");
 8000ca6:	bf00      	nop

     /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e000      	b.n	8000cb6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000cb4:	2301      	movs	r3, #1
  }
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000edf0 	.word	0xe000edf0
 8000cc4:	e0001000 	.word	0xe0001000

08000cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cca:	b0a9      	sub	sp, #164	; 0xa4
 8000ccc:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	uint16_t LED_DutyCycle = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd4:	f001 f940 	bl	8001f58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd8:	f000 f8ac 	bl	8000e34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cdc:	f000 fbdc 	bl	8001498 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000ce0:	f000 fb5c 	bl	800139c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ce4:	f000 fba6 	bl	8001434 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000ce8:	f000 f9d2 	bl	8001090 <MX_I2C1_Init>
  MX_ADC3_Init();
 8000cec:	f000 f92c 	bl	8000f48 <MX_ADC3_Init>
  MX_TIM1_Init();
 8000cf0:	f000 fa0e 	bl	8001110 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000cf4:	f000 fa60 	bl	80011b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000cf8:	f000 faac 	bl	8001254 <MX_TIM4_Init>
  MX_TIM14_Init();
 8000cfc:	f000 fb00 	bl	8001300 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000d00:	213c      	movs	r1, #60	; 0x3c
 8000d02:	4843      	ldr	r0, [pc, #268]	; (8000e10 <main+0x148>)
 8000d04:	f006 fab0 	bl	8007268 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4842      	ldr	r0, [pc, #264]	; (8000e14 <main+0x14c>)
 8000d0c:	f006 f8f8 	bl	8006f00 <HAL_TIM_PWM_Start>
  DS1302_Init();
 8000d10:	f7ff ff5c 	bl	8000bcc <DS1302_Init>
  HAL_Delay(1000);
 8000d14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d18:	f001 f9b0 	bl	800207c <HAL_Delay>
  char tempBuffer[100];
  char time[8];
  char time_to_set[8]={0,5,06,23,01,54,00,1};//Contr,Year,Mounth,Date,Hour,Min,Sec,Day
 8000d1c:	4a3e      	ldr	r2, [pc, #248]	; (8000e18 <main+0x150>)
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d26:	e883 0003 	stmia.w	r3, {r0, r1}
  DS1302_WriteTime(time_to_set);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fdc0 	bl	80008b4 <DS1302_WriteTime>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  DS1302_ReadTime(time);
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fea3 	bl	8000a84 <DS1302_ReadTime>
	  sprintf(tempBuffer,"\n\r %2d/%2d/%2d%2d:%2d:%2d \n\r",time[1],time[2],time[3],time[4],time[5],time[6]);
 8000d3e:	7f7b      	ldrb	r3, [r7, #29]
 8000d40:	461d      	mov	r5, r3
 8000d42:	7fbb      	ldrb	r3, [r7, #30]
 8000d44:	461e      	mov	r6, r3
 8000d46:	7ffb      	ldrb	r3, [r7, #31]
 8000d48:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d4c:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8000d50:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
 8000d54:	4604      	mov	r4, r0
 8000d56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000d5a:	9403      	str	r4, [sp, #12]
 8000d5c:	9102      	str	r1, [sp, #8]
 8000d5e:	9201      	str	r2, [sp, #4]
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	4633      	mov	r3, r6
 8000d64:	462a      	mov	r2, r5
 8000d66:	492d      	ldr	r1, [pc, #180]	; (8000e1c <main+0x154>)
 8000d68:	f008 fe36 	bl	80099d8 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)tempBuffer, strlen(tempBuffer), HAL_MAX_DELAY);
 8000d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fab5 	bl	80002e0 <strlen>
 8000d76:	4603      	mov	r3, r0
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d82:	4827      	ldr	r0, [pc, #156]	; (8000e20 <main+0x158>)
 8000d84:	f007 fa1c 	bl	80081c0 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000d88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d8c:	f001 f976 	bl	800207c <HAL_Delay>

      LED_DutyCycle = TIM4->CNT; //65536/tic*64
 8000d90:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <main+0x15c>)
 8000d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d94:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

//      TIM14->CCR1 = LED_DutyCycle;

      sprintf(uartBuf, "Encoder count: %d\r\n", (int)TIM4->CNT);
 8000d98:	4b22      	ldr	r3, [pc, #136]	; (8000e24 <main+0x15c>)
 8000d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4922      	ldr	r1, [pc, #136]	; (8000e28 <main+0x160>)
 8000da0:	4822      	ldr	r0, [pc, #136]	; (8000e2c <main+0x164>)
 8000da2:	f008 fe19 	bl	80099d8 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 8000da6:	4821      	ldr	r0, [pc, #132]	; (8000e2c <main+0x164>)
 8000da8:	f7ff fa9a 	bl	80002e0 <strlen>
 8000dac:	4603      	mov	r3, r0
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	f04f 33ff 	mov.w	r3, #4294967295
 8000db4:	491d      	ldr	r1, [pc, #116]	; (8000e2c <main+0x164>)
 8000db6:	481a      	ldr	r0, [pc, #104]	; (8000e20 <main+0x158>)
 8000db8:	f007 fa02 	bl	80081c0 <HAL_UART_Transmit>

      HAL_Delay(10);
 8000dbc:	200a      	movs	r0, #10
 8000dbe:	f001 f95d 	bl	800207c <HAL_Delay>

      uint16_t encoderReading = TIM4->CNT;  // Original reading
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <main+0x15c>)
 8000dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

      // Scale the reading to a range of 1 second to 300 seconds
      uint16_t scaledTime = MIN_TIME + ((encoderReading * (MAX_TIME - MIN_TIME)) / MAX_ENCODER_VALUE);
 8000dca:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8000dce:	f240 122b 	movw	r2, #299	; 0x12b
 8000dd2:	fb02 f303 	mul.w	r3, r2, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	da01      	bge.n	8000dde <main+0x116>
 8000dda:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8000dde:	129b      	asrs	r3, r3, #10
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	3301      	adds	r3, #1
 8000de4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

      // Now scaledTime should be in the range of 1 second to 300 seconds
      char buffer[20];
      sprintf(buffer, "Scaled Time: %d seconds\n", scaledTime);
 8000de8:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8000dec:	463b      	mov	r3, r7
 8000dee:	4910      	ldr	r1, [pc, #64]	; (8000e30 <main+0x168>)
 8000df0:	4618      	mov	r0, r3
 8000df2:	f008 fdf1 	bl	80099d8 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000df6:	463b      	mov	r3, r7
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fa71 	bl	80002e0 <strlen>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	4639      	mov	r1, r7
 8000e04:	f04f 33ff 	mov.w	r3, #4294967295
 8000e08:	4805      	ldr	r0, [pc, #20]	; (8000e20 <main+0x158>)
 8000e0a:	f007 f9d9 	bl	80081c0 <HAL_UART_Transmit>
  {
 8000e0e:	e791      	b.n	8000d34 <main+0x6c>
 8000e10:	2400009c 	.word	0x2400009c
 8000e14:	240006fc 	.word	0x240006fc
 8000e18:	0800a24c 	.word	0x0800a24c
 8000e1c:	0800a1fc 	.word	0x0800a1fc
 8000e20:	240000e8 	.word	0x240000e8
 8000e24:	40000800 	.word	0x40000800
 8000e28:	0800a21c 	.word	0x0800a21c
 8000e2c:	2400067c 	.word	0x2400067c
 8000e30:	0800a230 	.word	0x0800a230

08000e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b09c      	sub	sp, #112	; 0x70
 8000e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3e:	224c      	movs	r2, #76	; 0x4c
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f008 fdc0 	bl	80099c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2220      	movs	r2, #32
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f008 fdba 	bl	80099c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e54:	2002      	movs	r0, #2
 8000e56:	f002 fe13 	bl	8003a80 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	603b      	str	r3, [r7, #0]
 8000e5e:	4b37      	ldr	r3, [pc, #220]	; (8000f3c <SystemClock_Config+0x108>)
 8000e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e62:	4a36      	ldr	r2, [pc, #216]	; (8000f3c <SystemClock_Config+0x108>)
 8000e64:	f023 0301 	bic.w	r3, r3, #1
 8000e68:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e6a:	4b34      	ldr	r3, [pc, #208]	; (8000f3c <SystemClock_Config+0x108>)
 8000e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	4b32      	ldr	r3, [pc, #200]	; (8000f40 <SystemClock_Config+0x10c>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4a31      	ldr	r2, [pc, #196]	; (8000f40 <SystemClock_Config+0x10c>)
 8000e7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e7e:	6193      	str	r3, [r2, #24]
 8000e80:	4b2f      	ldr	r3, [pc, #188]	; (8000f40 <SystemClock_Config+0x10c>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e8c:	bf00      	nop
 8000e8e:	4b2c      	ldr	r3, [pc, #176]	; (8000f40 <SystemClock_Config+0x10c>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e9a:	d1f8      	bne.n	8000e8e <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_CSI);
 8000e9c:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <SystemClock_Config+0x110>)
 8000e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea0:	f023 0303 	bic.w	r3, r3, #3
 8000ea4:	4a27      	ldr	r2, [pc, #156]	; (8000f44 <SystemClock_Config+0x110>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSI;
 8000eac:	2312      	movs	r3, #18
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb4:	2340      	movs	r3, #64	; 0x40
 8000eb6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000ebc:	2320      	movs	r3, #32
 8000ebe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 37;
 8000ecc:	2325      	movs	r3, #37	; 0x25
 8000ece:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000edc:	2308      	movs	r3, #8
 8000ede:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000ee4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ee8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f002 fe10 	bl	8003b14 <HAL_RCC_OscConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000efa:	f000 fc53 	bl	80017a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efe:	233f      	movs	r3, #63	; 0x3f
 8000f00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f02:	2303      	movs	r3, #3
 8000f04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2101      	movs	r1, #1
 8000f22:	4618      	mov	r0, r3
 8000f24:	f003 fa22 	bl	800436c <HAL_RCC_ClockConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8000f2e:	f000 fc39 	bl	80017a4 <Error_Handler>
  }
}
 8000f32:	bf00      	nop
 8000f34:	3770      	adds	r7, #112	; 0x70
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	58000400 	.word	0x58000400
 8000f40:	58024800 	.word	0x58024800
 8000f44:	58024400 	.word	0x58024400

08000f48 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
 8000f5c:	615a      	str	r2, [r3, #20]
 8000f5e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000f60:	4b45      	ldr	r3, [pc, #276]	; (8001078 <MX_ADC3_Init+0x130>)
 8000f62:	4a46      	ldr	r2, [pc, #280]	; (800107c <MX_ADC3_Init+0x134>)
 8000f64:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000f66:	4b44      	ldr	r3, [pc, #272]	; (8001078 <MX_ADC3_Init+0x130>)
 8000f68:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000f6c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f6e:	4b42      	ldr	r3, [pc, #264]	; (8001078 <MX_ADC3_Init+0x130>)
 8000f70:	2208      	movs	r2, #8
 8000f72:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f74:	4b40      	ldr	r3, [pc, #256]	; (8001078 <MX_ADC3_Init+0x130>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f7a:	4b3f      	ldr	r3, [pc, #252]	; (8001078 <MX_ADC3_Init+0x130>)
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000f80:	4b3d      	ldr	r3, [pc, #244]	; (8001078 <MX_ADC3_Init+0x130>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000f86:	4b3c      	ldr	r3, [pc, #240]	; (8001078 <MX_ADC3_Init+0x130>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 5;
 8000f8c:	4b3a      	ldr	r3, [pc, #232]	; (8001078 <MX_ADC3_Init+0x130>)
 8000f8e:	2205      	movs	r2, #5
 8000f90:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000f92:	4b39      	ldr	r3, [pc, #228]	; (8001078 <MX_ADC3_Init+0x130>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f98:	4b37      	ldr	r3, [pc, #220]	; (8001078 <MX_ADC3_Init+0x130>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f9e:	4b36      	ldr	r3, [pc, #216]	; (8001078 <MX_ADC3_Init+0x130>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000fa4:	4b34      	ldr	r3, [pc, #208]	; (8001078 <MX_ADC3_Init+0x130>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000faa:	4b33      	ldr	r3, [pc, #204]	; (8001078 <MX_ADC3_Init+0x130>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000fb0:	4b31      	ldr	r3, [pc, #196]	; (8001078 <MX_ADC3_Init+0x130>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000fb6:	4b30      	ldr	r3, [pc, #192]	; (8001078 <MX_ADC3_Init+0x130>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000fbe:	482e      	ldr	r0, [pc, #184]	; (8001078 <MX_ADC3_Init+0x130>)
 8000fc0:	f001 fa2e 	bl	8002420 <HAL_ADC_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000fca:	f000 fbeb 	bl	80017a4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd2:	2306      	movs	r3, #6
 8000fd4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fda:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000fde:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	4619      	mov	r1, r3
 8000fec:	4822      	ldr	r0, [pc, #136]	; (8001078 <MX_ADC3_Init+0x130>)
 8000fee:	f001 fbb7 	bl	8002760 <HAL_ADC_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8000ff8:	f000 fbd4 	bl	80017a4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ffc:	4b20      	ldr	r3, [pc, #128]	; (8001080 <MX_ADC3_Init+0x138>)
 8000ffe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001000:	230c      	movs	r3, #12
 8001002:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	4619      	mov	r1, r3
 8001008:	481b      	ldr	r0, [pc, #108]	; (8001078 <MX_ADC3_Init+0x130>)
 800100a:	f001 fba9 	bl	8002760 <HAL_ADC_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8001014:	f000 fbc6 	bl	80017a4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001018:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <MX_ADC3_Init+0x13c>)
 800101a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800101c:	2312      	movs	r3, #18
 800101e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	4619      	mov	r1, r3
 8001024:	4814      	ldr	r0, [pc, #80]	; (8001078 <MX_ADC3_Init+0x130>)
 8001026:	f001 fb9b 	bl	8002760 <HAL_ADC_ConfigChannel>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_ADC3_Init+0xec>
  {
    Error_Handler();
 8001030:	f000 fbb8 	bl	80017a4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <MX_ADC3_Init+0x140>)
 8001036:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001038:	2318      	movs	r3, #24
 800103a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	4619      	mov	r1, r3
 8001040:	480d      	ldr	r0, [pc, #52]	; (8001078 <MX_ADC3_Init+0x130>)
 8001042:	f001 fb8d 	bl	8002760 <HAL_ADC_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_ADC3_Init+0x108>
  {
    Error_Handler();
 800104c:	f000 fbaa 	bl	80017a4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001050:	4b0e      	ldr	r3, [pc, #56]	; (800108c <MX_ADC3_Init+0x144>)
 8001052:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001054:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001058:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	4619      	mov	r1, r3
 800105e:	4806      	ldr	r0, [pc, #24]	; (8001078 <MX_ADC3_Init+0x130>)
 8001060:	f001 fb7e 	bl	8002760 <HAL_ADC_ConfigChannel>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_ADC3_Init+0x126>
  {
    Error_Handler();
 800106a:	f000 fb9b 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	3720      	adds	r7, #32
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	24000618 	.word	0x24000618
 800107c:	58026000 	.word	0x58026000
 8001080:	04300002 	.word	0x04300002
 8001084:	10c00010 	.word	0x10c00010
 8001088:	14f00020 	.word	0x14f00020
 800108c:	19200040 	.word	0x19200040

08001090 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001094:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <MX_I2C1_Init+0x74>)
 8001096:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <MX_I2C1_Init+0x78>)
 8001098:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B0DCFB;
 800109a:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <MX_I2C1_Init+0x74>)
 800109c:	4a1b      	ldr	r2, [pc, #108]	; (800110c <MX_I2C1_Init+0x7c>)
 800109e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010a0:	4b18      	ldr	r3, [pc, #96]	; (8001104 <MX_I2C1_Init+0x74>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <MX_I2C1_Init+0x74>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <MX_I2C1_Init+0x74>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_I2C1_Init+0x74>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <MX_I2C1_Init+0x74>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <MX_I2C1_Init+0x74>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <MX_I2C1_Init+0x74>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ca:	480e      	ldr	r0, [pc, #56]	; (8001104 <MX_I2C1_Init+0x74>)
 80010cc:	f002 fa68 	bl	80035a0 <HAL_I2C_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010d6:	f000 fb65 	bl	80017a4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010da:	2100      	movs	r1, #0
 80010dc:	4809      	ldr	r0, [pc, #36]	; (8001104 <MX_I2C1_Init+0x74>)
 80010de:	f002 faef 	bl	80036c0 <HAL_I2CEx_ConfigAnalogFilter>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010e8:	f000 fb5c 	bl	80017a4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010ec:	2100      	movs	r1, #0
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_I2C1_Init+0x74>)
 80010f0:	f002 fb31 	bl	8003756 <HAL_I2CEx_ConfigDigitalFilter>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010fa:	f000 fb53 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	24000178 	.word	0x24000178
 8001108:	40005400 	.word	0x40005400
 800110c:	10b0dcfb 	.word	0x10b0dcfb

08001110 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001116:	f107 0310 	add.w	r3, r7, #16
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800112e:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <MX_TIM1_Init+0xa0>)
 8001130:	4a20      	ldr	r2, [pc, #128]	; (80011b4 <MX_TIM1_Init+0xa4>)
 8001132:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001134:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <MX_TIM1_Init+0xa0>)
 8001136:	2200      	movs	r2, #0
 8001138:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <MX_TIM1_Init+0xa0>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001140:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <MX_TIM1_Init+0xa0>)
 8001142:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001146:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001148:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <MX_TIM1_Init+0xa0>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <MX_TIM1_Init+0xa0>)
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001154:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <MX_TIM1_Init+0xa0>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800115a:	4815      	ldr	r0, [pc, #84]	; (80011b0 <MX_TIM1_Init+0xa0>)
 800115c:	f005 fe18 	bl	8006d90 <HAL_TIM_Base_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001166:	f000 fb1d 	bl	80017a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800116a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800116e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	4619      	mov	r1, r3
 8001176:	480e      	ldr	r0, [pc, #56]	; (80011b0 <MX_TIM1_Init+0xa0>)
 8001178:	f006 fa18 	bl	80075ac <HAL_TIM_ConfigClockSource>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001182:	f000 fb0f 	bl	80017a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	4619      	mov	r1, r3
 8001196:	4806      	ldr	r0, [pc, #24]	; (80011b0 <MX_TIM1_Init+0xa0>)
 8001198:	f006 ff34 	bl	8008004 <HAL_TIMEx_MasterConfigSynchronization>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011a2:	f000 faff 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	3720      	adds	r7, #32
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	240006b0 	.word	0x240006b0
 80011b4:	40010000 	.word	0x40010000

080011b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011d6:	4b1d      	ldr	r3, [pc, #116]	; (800124c <MX_TIM3_Init+0x94>)
 80011d8:	4a1d      	ldr	r2, [pc, #116]	; (8001250 <MX_TIM3_Init+0x98>)
 80011da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011dc:	4b1b      	ldr	r3, [pc, #108]	; (800124c <MX_TIM3_Init+0x94>)
 80011de:	2200      	movs	r2, #0
 80011e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e2:	4b1a      	ldr	r3, [pc, #104]	; (800124c <MX_TIM3_Init+0x94>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011e8:	4b18      	ldr	r3, [pc, #96]	; (800124c <MX_TIM3_Init+0x94>)
 80011ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <MX_TIM3_Init+0x94>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <MX_TIM3_Init+0x94>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011fc:	4813      	ldr	r0, [pc, #76]	; (800124c <MX_TIM3_Init+0x94>)
 80011fe:	f005 fdc7 	bl	8006d90 <HAL_TIM_Base_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001208:	f000 facc 	bl	80017a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800120c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001210:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001212:	f107 0310 	add.w	r3, r7, #16
 8001216:	4619      	mov	r1, r3
 8001218:	480c      	ldr	r0, [pc, #48]	; (800124c <MX_TIM3_Init+0x94>)
 800121a:	f006 f9c7 	bl	80075ac <HAL_TIM_ConfigClockSource>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001224:	f000 fabe 	bl	80017a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001228:	2300      	movs	r3, #0
 800122a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	4619      	mov	r1, r3
 8001234:	4805      	ldr	r0, [pc, #20]	; (800124c <MX_TIM3_Init+0x94>)
 8001236:	f006 fee5 	bl	8008004 <HAL_TIMEx_MasterConfigSynchronization>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001240:	f000 fab0 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	3720      	adds	r7, #32
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	240005cc 	.word	0x240005cc
 8001250:	40000400 	.word	0x40000400

08001254 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08c      	sub	sp, #48	; 0x30
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	2224      	movs	r2, #36	; 0x24
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f008 fbb0 	bl	80099c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001268:	463b      	mov	r3, r7
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001272:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <MX_TIM4_Init+0xa4>)
 8001274:	4a21      	ldr	r2, [pc, #132]	; (80012fc <MX_TIM4_Init+0xa8>)
 8001276:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <MX_TIM4_Init+0xa4>)
 800127a:	2200      	movs	r2, #0
 800127c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127e:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <MX_TIM4_Init+0xa4>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1024;
 8001284:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <MX_TIM4_Init+0xa4>)
 8001286:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800128a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128c:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <MX_TIM4_Init+0xa4>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <MX_TIM4_Init+0xa4>)
 8001294:	2280      	movs	r2, #128	; 0x80
 8001296:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001298:	2303      	movs	r3, #3
 800129a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012a0:	2301      	movs	r3, #1
 80012a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012b0:	2301      	movs	r3, #1
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	4619      	mov	r1, r3
 80012c2:	480d      	ldr	r0, [pc, #52]	; (80012f8 <MX_TIM4_Init+0xa4>)
 80012c4:	f005 ff2a 	bl	800711c <HAL_TIM_Encoder_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80012ce:	f000 fa69 	bl	80017a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012da:	463b      	mov	r3, r7
 80012dc:	4619      	mov	r1, r3
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <MX_TIM4_Init+0xa4>)
 80012e0:	f006 fe90 	bl	8008004 <HAL_TIMEx_MasterConfigSynchronization>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80012ea:	f000 fa5b 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	3730      	adds	r7, #48	; 0x30
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2400009c 	.word	0x2400009c
 80012fc:	40000800 	.word	0x40000800

08001300 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
 8001314:	615a      	str	r2, [r3, #20]
 8001316:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001318:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <MX_TIM14_Init+0x94>)
 800131a:	4a1f      	ldr	r2, [pc, #124]	; (8001398 <MX_TIM14_Init+0x98>)
 800131c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800131e:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <MX_TIM14_Init+0x94>)
 8001320:	2200      	movs	r2, #0
 8001322:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <MX_TIM14_Init+0x94>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <MX_TIM14_Init+0x94>)
 800132c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001330:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001332:	4b18      	ldr	r3, [pc, #96]	; (8001394 <MX_TIM14_Init+0x94>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001338:	4b16      	ldr	r3, [pc, #88]	; (8001394 <MX_TIM14_Init+0x94>)
 800133a:	2200      	movs	r2, #0
 800133c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800133e:	4815      	ldr	r0, [pc, #84]	; (8001394 <MX_TIM14_Init+0x94>)
 8001340:	f005 fd26 	bl	8006d90 <HAL_TIM_Base_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 800134a:	f000 fa2b 	bl	80017a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800134e:	4811      	ldr	r0, [pc, #68]	; (8001394 <MX_TIM14_Init+0x94>)
 8001350:	f005 fd75 	bl	8006e3e <HAL_TIM_PWM_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 800135a:	f000 fa23 	bl	80017a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800135e:	2360      	movs	r3, #96	; 0x60
 8001360:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	2200      	movs	r2, #0
 8001372:	4619      	mov	r1, r3
 8001374:	4807      	ldr	r0, [pc, #28]	; (8001394 <MX_TIM14_Init+0x94>)
 8001376:	f006 f805 	bl	8007384 <HAL_TIM_PWM_ConfigChannel>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001380:	f000 fa10 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001384:	4803      	ldr	r0, [pc, #12]	; (8001394 <MX_TIM14_Init+0x94>)
 8001386:	f000 fbb9 	bl	8001afc <HAL_TIM_MspPostInit>

}
 800138a:	bf00      	nop
 800138c:	3720      	adds	r7, #32
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	240006fc 	.word	0x240006fc
 8001398:	40002000 	.word	0x40002000

0800139c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013a0:	4b22      	ldr	r3, [pc, #136]	; (800142c <MX_USART3_UART_Init+0x90>)
 80013a2:	4a23      	ldr	r2, [pc, #140]	; (8001430 <MX_USART3_UART_Init+0x94>)
 80013a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013a6:	4b21      	ldr	r3, [pc, #132]	; (800142c <MX_USART3_UART_Init+0x90>)
 80013a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013ae:	4b1f      	ldr	r3, [pc, #124]	; (800142c <MX_USART3_UART_Init+0x90>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013b4:	4b1d      	ldr	r3, [pc, #116]	; (800142c <MX_USART3_UART_Init+0x90>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <MX_USART3_UART_Init+0x90>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013c0:	4b1a      	ldr	r3, [pc, #104]	; (800142c <MX_USART3_UART_Init+0x90>)
 80013c2:	220c      	movs	r2, #12
 80013c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c6:	4b19      	ldr	r3, [pc, #100]	; (800142c <MX_USART3_UART_Init+0x90>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013cc:	4b17      	ldr	r3, [pc, #92]	; (800142c <MX_USART3_UART_Init+0x90>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013d2:	4b16      	ldr	r3, [pc, #88]	; (800142c <MX_USART3_UART_Init+0x90>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <MX_USART3_UART_Init+0x90>)
 80013da:	2200      	movs	r2, #0
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013de:	4b13      	ldr	r3, [pc, #76]	; (800142c <MX_USART3_UART_Init+0x90>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013e4:	4811      	ldr	r0, [pc, #68]	; (800142c <MX_USART3_UART_Init+0x90>)
 80013e6:	f006 fe9b 	bl	8008120 <HAL_UART_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013f0:	f000 f9d8 	bl	80017a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013f4:	2100      	movs	r1, #0
 80013f6:	480d      	ldr	r0, [pc, #52]	; (800142c <MX_USART3_UART_Init+0x90>)
 80013f8:	f007 fec6 	bl	8009188 <HAL_UARTEx_SetTxFifoThreshold>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001402:	f000 f9cf 	bl	80017a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001406:	2100      	movs	r1, #0
 8001408:	4808      	ldr	r0, [pc, #32]	; (800142c <MX_USART3_UART_Init+0x90>)
 800140a:	f007 fefb 	bl	8009204 <HAL_UARTEx_SetRxFifoThreshold>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001414:	f000 f9c6 	bl	80017a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001418:	4804      	ldr	r0, [pc, #16]	; (800142c <MX_USART3_UART_Init+0x90>)
 800141a:	f007 fe7c 	bl	8009116 <HAL_UARTEx_DisableFifoMode>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001424:	f000 f9be 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	240000e8 	.word	0x240000e8
 8001430:	40004800 	.word	0x40004800

08001434 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001438:	4b15      	ldr	r3, [pc, #84]	; (8001490 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800143a:	4a16      	ldr	r2, [pc, #88]	; (8001494 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800143c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800143e:	4b14      	ldr	r3, [pc, #80]	; (8001490 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001440:	2209      	movs	r2, #9
 8001442:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001446:	2202      	movs	r2, #2
 8001448:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001452:	2202      	movs	r2, #2
 8001454:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001458:	2201      	movs	r2, #1
 800145a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800145e:	2200      	movs	r2, #0
 8001460:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001464:	2200      	movs	r2, #0
 8001466:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001468:	4b09      	ldr	r3, [pc, #36]	; (8001490 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800146a:	2201      	movs	r2, #1
 800146c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001470:	2201      	movs	r2, #1
 8001472:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001476:	2200      	movs	r2, #0
 8001478:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800147a:	4805      	ldr	r0, [pc, #20]	; (8001490 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800147c:	f002 f9b7 	bl	80037ee <HAL_PCD_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001486:	f000 f98d 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	240001c4 	.word	0x240001c4
 8001494:	40080000 	.word	0x40080000

08001498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08e      	sub	sp, #56	; 0x38
 800149c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
 80014ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ae:	4bb5      	ldr	r3, [pc, #724]	; (8001784 <MX_GPIO_Init+0x2ec>)
 80014b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b4:	4ab3      	ldr	r2, [pc, #716]	; (8001784 <MX_GPIO_Init+0x2ec>)
 80014b6:	f043 0310 	orr.w	r3, r3, #16
 80014ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014be:	4bb1      	ldr	r3, [pc, #708]	; (8001784 <MX_GPIO_Init+0x2ec>)
 80014c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c4:	f003 0310 	and.w	r3, r3, #16
 80014c8:	623b      	str	r3, [r7, #32]
 80014ca:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014cc:	4bad      	ldr	r3, [pc, #692]	; (8001784 <MX_GPIO_Init+0x2ec>)
 80014ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d2:	4aac      	ldr	r2, [pc, #688]	; (8001784 <MX_GPIO_Init+0x2ec>)
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014dc:	4ba9      	ldr	r3, [pc, #676]	; (8001784 <MX_GPIO_Init+0x2ec>)
 80014de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	61fb      	str	r3, [r7, #28]
 80014e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ea:	4ba6      	ldr	r3, [pc, #664]	; (8001784 <MX_GPIO_Init+0x2ec>)
 80014ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f0:	4aa4      	ldr	r2, [pc, #656]	; (8001784 <MX_GPIO_Init+0x2ec>)
 80014f2:	f043 0320 	orr.w	r3, r3, #32
 80014f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014fa:	4ba2      	ldr	r3, [pc, #648]	; (8001784 <MX_GPIO_Init+0x2ec>)
 80014fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001500:	f003 0320 	and.w	r3, r3, #32
 8001504:	61bb      	str	r3, [r7, #24]
 8001506:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001508:	4b9e      	ldr	r3, [pc, #632]	; (8001784 <MX_GPIO_Init+0x2ec>)
 800150a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150e:	4a9d      	ldr	r2, [pc, #628]	; (8001784 <MX_GPIO_Init+0x2ec>)
 8001510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001514:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001518:	4b9a      	ldr	r3, [pc, #616]	; (8001784 <MX_GPIO_Init+0x2ec>)
 800151a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	4b97      	ldr	r3, [pc, #604]	; (8001784 <MX_GPIO_Init+0x2ec>)
 8001528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152c:	4a95      	ldr	r2, [pc, #596]	; (8001784 <MX_GPIO_Init+0x2ec>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001536:	4b93      	ldr	r3, [pc, #588]	; (8001784 <MX_GPIO_Init+0x2ec>)
 8001538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001544:	4b8f      	ldr	r3, [pc, #572]	; (8001784 <MX_GPIO_Init+0x2ec>)
 8001546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154a:	4a8e      	ldr	r2, [pc, #568]	; (8001784 <MX_GPIO_Init+0x2ec>)
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001554:	4b8b      	ldr	r3, [pc, #556]	; (8001784 <MX_GPIO_Init+0x2ec>)
 8001556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001562:	4b88      	ldr	r3, [pc, #544]	; (8001784 <MX_GPIO_Init+0x2ec>)
 8001564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001568:	4a86      	ldr	r2, [pc, #536]	; (8001784 <MX_GPIO_Init+0x2ec>)
 800156a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800156e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001572:	4b84      	ldr	r3, [pc, #528]	; (8001784 <MX_GPIO_Init+0x2ec>)
 8001574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001580:	4b80      	ldr	r3, [pc, #512]	; (8001784 <MX_GPIO_Init+0x2ec>)
 8001582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001586:	4a7f      	ldr	r2, [pc, #508]	; (8001784 <MX_GPIO_Init+0x2ec>)
 8001588:	f043 0308 	orr.w	r3, r3, #8
 800158c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001590:	4b7c      	ldr	r3, [pc, #496]	; (8001784 <MX_GPIO_Init+0x2ec>)
 8001592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, RTC_CLK_Pin|RTC_RST_Pin, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	2106      	movs	r1, #6
 80015a2:	4879      	ldr	r0, [pc, #484]	; (8001788 <MX_GPIO_Init+0x2f0>)
 80015a4:	f001 ffe2 	bl	800356c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80015a8:	2200      	movs	r2, #0
 80015aa:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80015ae:	4877      	ldr	r0, [pc, #476]	; (800178c <MX_GPIO_Init+0x2f4>)
 80015b0:	f001 ffdc 	bl	800356c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2140      	movs	r1, #64	; 0x40
 80015b8:	4875      	ldr	r0, [pc, #468]	; (8001790 <MX_GPIO_Init+0x2f8>)
 80015ba:	f001 ffd7 	bl	800356c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80015be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c4:	2303      	movs	r3, #3
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d0:	4619      	mov	r1, r3
 80015d2:	4870      	ldr	r0, [pc, #448]	; (8001794 <MX_GPIO_Init+0x2fc>)
 80015d4:	f001 fe02 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80015d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ec:	4619      	mov	r1, r3
 80015ee:	486a      	ldr	r0, [pc, #424]	; (8001798 <MX_GPIO_Init+0x300>)
 80015f0:	f001 fdf4 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : RTC_IO_Pin */
  GPIO_InitStruct.Pin = RTC_IO_Pin;
 80015f4:	2301      	movs	r3, #1
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RTC_IO_GPIO_Port, &GPIO_InitStruct);
 8001600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001604:	4619      	mov	r1, r3
 8001606:	4860      	ldr	r0, [pc, #384]	; (8001788 <MX_GPIO_Init+0x2f0>)
 8001608:	f001 fde8 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RTC_CLK_Pin RTC_RST_Pin */
  GPIO_InitStruct.Pin = RTC_CLK_Pin|RTC_RST_Pin;
 800160c:	2306      	movs	r3, #6
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001610:	2301      	movs	r3, #1
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800161c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001620:	4619      	mov	r1, r3
 8001622:	4859      	ldr	r0, [pc, #356]	; (8001788 <MX_GPIO_Init+0x2f0>)
 8001624:	f001 fdda 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF4 PF6 PF7 PF8
                           PF11 PF12 PF13 PF14
                           PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001628:	f64f 13d0 	movw	r3, #63952	; 0xf9d0
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800162e:	2303      	movs	r3, #3
 8001630:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163a:	4619      	mov	r1, r3
 800163c:	4852      	ldr	r0, [pc, #328]	; (8001788 <MX_GPIO_Init+0x2f0>)
 800163e:	f001 fdcd 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001642:	f641 73f1 	movw	r3, #8177	; 0x1ff1
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001648:	2303      	movs	r3, #3
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001654:	4619      	mov	r1, r3
 8001656:	4850      	ldr	r0, [pc, #320]	; (8001798 <MX_GPIO_Init+0x300>)
 8001658:	f001 fdc0 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDC_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 800165c:	2302      	movs	r3, #2
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800166c:	230b      	movs	r3, #11
 800166e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 8001670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001674:	4619      	mov	r1, r3
 8001676:	4848      	ldr	r0, [pc, #288]	; (8001798 <MX_GPIO_Init+0x300>)
 8001678:	f001 fdb0 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800167c:	f248 03ff 	movw	r3, #33023	; 0x80ff
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001682:	2303      	movs	r3, #3
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168e:	4619      	mov	r1, r3
 8001690:	4842      	ldr	r0, [pc, #264]	; (800179c <MX_GPIO_Init+0x304>)
 8001692:	f001 fda3 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB15 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001696:	f649 4377 	movw	r3, #40055	; 0x9c77
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800169c:	2303      	movs	r3, #3
 800169e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a8:	4619      	mov	r1, r3
 80016aa:	4838      	ldr	r0, [pc, #224]	; (800178c <MX_GPIO_Init+0x2f4>)
 80016ac:	f001 fd96 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG8 PG9
                           PG10 PG12 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80016b0:	f24d 733f 	movw	r3, #55103	; 0xd73f
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016b6:	2303      	movs	r3, #3
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c2:	4619      	mov	r1, r3
 80016c4:	4832      	ldr	r0, [pc, #200]	; (8001790 <MX_GPIO_Init+0x2f8>)
 80016c6:	f001 fd89 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80016ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016dc:	230b      	movs	r3, #11
 80016de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80016e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e4:	4619      	mov	r1, r3
 80016e6:	4829      	ldr	r0, [pc, #164]	; (800178c <MX_GPIO_Init+0x2f4>)
 80016e8:	f001 fd78 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80016ec:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f2:	2301      	movs	r3, #1
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2300      	movs	r3, #0
 80016fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001702:	4619      	mov	r1, r3
 8001704:	4821      	ldr	r0, [pc, #132]	; (800178c <MX_GPIO_Init+0x2f4>)
 8001706:	f001 fd69 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15
 800170a:	f64c 43ff 	movw	r3, #52479	; 0xccff
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001710:	2303      	movs	r3, #3
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171c:	4619      	mov	r1, r3
 800171e:	4820      	ldr	r0, [pc, #128]	; (80017a0 <MX_GPIO_Init+0x308>)
 8001720:	f001 fd5c 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001724:	2340      	movs	r3, #64	; 0x40
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001728:	2301      	movs	r3, #1
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	2300      	movs	r3, #0
 8001732:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001738:	4619      	mov	r1, r3
 800173a:	4815      	ldr	r0, [pc, #84]	; (8001790 <MX_GPIO_Init+0x2f8>)
 800173c:	f001 fd4e 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001744:	2300      	movs	r3, #0
 8001746:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800174c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001750:	4619      	mov	r1, r3
 8001752:	480f      	ldr	r0, [pc, #60]	; (8001790 <MX_GPIO_Init+0x2f8>)
 8001754:	f001 fd42 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001758:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800176a:	230b      	movs	r3, #11
 800176c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800176e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001772:	4619      	mov	r1, r3
 8001774:	4806      	ldr	r0, [pc, #24]	; (8001790 <MX_GPIO_Init+0x2f8>)
 8001776:	f001 fd31 	bl	80031dc <HAL_GPIO_Init>

}
 800177a:	bf00      	nop
 800177c:	3738      	adds	r7, #56	; 0x38
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	58024400 	.word	0x58024400
 8001788:	58021400 	.word	0x58021400
 800178c:	58020400 	.word	0x58020400
 8001790:	58021800 	.word	0x58021800
 8001794:	58021000 	.word	0x58021000
 8001798:	58020800 	.word	0x58020800
 800179c:	58020000 	.word	0x58020000
 80017a0:	58020c00 	.word	0x58020c00

080017a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a8:	b672      	cpsid	i
}
 80017aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ac:	e7fe      	b.n	80017ac <Error_Handler+0x8>
	...

080017b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b6:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <HAL_MspInit+0x30>)
 80017b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017bc:	4a08      	ldr	r2, [pc, #32]	; (80017e0 <HAL_MspInit+0x30>)
 80017be:	f043 0302 	orr.w	r3, r3, #2
 80017c2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_MspInit+0x30>)
 80017c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	607b      	str	r3, [r7, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	58024400 	.word	0x58024400

080017e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b0ba      	sub	sp, #232	; 0xe8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017fc:	f107 0318 	add.w	r3, r7, #24
 8001800:	22bc      	movs	r2, #188	; 0xbc
 8001802:	2100      	movs	r1, #0
 8001804:	4618      	mov	r0, r3
 8001806:	f008 f8df 	bl	80099c8 <memset>
  if(hadc->Instance==ADC3)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a38      	ldr	r2, [pc, #224]	; (80018f0 <HAL_ADC_MspInit+0x10c>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d169      	bne.n	80018e8 <HAL_ADC_MspInit+0x104>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001814:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001818:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 800181a:	2301      	movs	r3, #1
 800181c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 37;
 800181e:	2325      	movs	r3, #37	; 0x25
 8001820:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 1;
 8001822:	2301      	movs	r3, #1
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001826:	2302      	movs	r3, #2
 8001828:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800182a:	2302      	movs	r3, #2
 800182c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001832:	2320      	movs	r3, #32
 8001834:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8001836:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800183a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800183c:	2300      	movs	r3, #0
 800183e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001842:	f107 0318 	add.w	r3, r7, #24
 8001846:	4618      	mov	r0, r3
 8001848:	f003 f91c 	bl	8004a84 <HAL_RCCEx_PeriphCLKConfig>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8001852:	f7ff ffa7 	bl	80017a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001856:	4b27      	ldr	r3, [pc, #156]	; (80018f4 <HAL_ADC_MspInit+0x110>)
 8001858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185c:	4a25      	ldr	r2, [pc, #148]	; (80018f4 <HAL_ADC_MspInit+0x110>)
 800185e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001862:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001866:	4b23      	ldr	r3, [pc, #140]	; (80018f4 <HAL_ADC_MspInit+0x110>)
 8001868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001874:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <HAL_ADC_MspInit+0x110>)
 8001876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800187a:	4a1e      	ldr	r2, [pc, #120]	; (80018f4 <HAL_ADC_MspInit+0x110>)
 800187c:	f043 0320 	orr.w	r3, r3, #32
 8001880:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001884:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <HAL_ADC_MspInit+0x110>)
 8001886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800188a:	f003 0320 	and.w	r3, r3, #32
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001892:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <HAL_ADC_MspInit+0x110>)
 8001894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001898:	4a16      	ldr	r2, [pc, #88]	; (80018f4 <HAL_ADC_MspInit+0x110>)
 800189a:	f043 0304 	orr.w	r3, r3, #4
 800189e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <HAL_ADC_MspInit+0x110>)
 80018a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]
    PF5     ------> ADC3_INP4
    PF10     ------> ADC3_INP6
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_10;
 80018b0:	f44f 6385 	mov.w	r3, #1064	; 0x428
 80018b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018b8:	2303      	movs	r3, #3
 80018ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018c8:	4619      	mov	r1, r3
 80018ca:	480b      	ldr	r0, [pc, #44]	; (80018f8 <HAL_ADC_MspInit+0x114>)
 80018cc:	f001 fc86 	bl	80031dc <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80018d0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80018d4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80018d8:	f000 fc00 	bl	80020dc <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80018dc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80018e0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80018e4:	f000 fbfa 	bl	80020dc <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80018e8:	bf00      	nop
 80018ea:	37e8      	adds	r7, #232	; 0xe8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	58026000 	.word	0x58026000
 80018f4:	58024400 	.word	0x58024400
 80018f8:	58021400 	.word	0x58021400

080018fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b0b8      	sub	sp, #224	; 0xe0
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001914:	f107 0310 	add.w	r3, r7, #16
 8001918:	22bc      	movs	r2, #188	; 0xbc
 800191a:	2100      	movs	r1, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f008 f853 	bl	80099c8 <memset>
  if(hi2c->Instance==I2C1)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a25      	ldr	r2, [pc, #148]	; (80019bc <HAL_I2C_MspInit+0xc0>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d143      	bne.n	80019b4 <HAL_I2C_MspInit+0xb8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800192c:	2308      	movs	r3, #8
 800192e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_HSI;
 8001930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001934:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001938:	f107 0310 	add.w	r3, r7, #16
 800193c:	4618      	mov	r0, r3
 800193e:	f003 f8a1 	bl	8004a84 <HAL_RCCEx_PeriphCLKConfig>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001948:	f7ff ff2c 	bl	80017a4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194c:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <HAL_I2C_MspInit+0xc4>)
 800194e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001952:	4a1b      	ldr	r2, [pc, #108]	; (80019c0 <HAL_I2C_MspInit+0xc4>)
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800195c:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <HAL_I2C_MspInit+0xc4>)
 800195e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800196a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800196e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001972:	2312      	movs	r3, #18
 8001974:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001978:	2301      	movs	r3, #1
 800197a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800197e:	2302      	movs	r3, #2
 8001980:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001984:	2304      	movs	r3, #4
 8001986:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800198e:	4619      	mov	r1, r3
 8001990:	480c      	ldr	r0, [pc, #48]	; (80019c4 <HAL_I2C_MspInit+0xc8>)
 8001992:	f001 fc23 	bl	80031dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <HAL_I2C_MspInit+0xc4>)
 8001998:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800199c:	4a08      	ldr	r2, [pc, #32]	; (80019c0 <HAL_I2C_MspInit+0xc4>)
 800199e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_I2C_MspInit+0xc4>)
 80019a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019b4:	bf00      	nop
 80019b6:	37e0      	adds	r7, #224	; 0xe0
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40005400 	.word	0x40005400
 80019c0:	58024400 	.word	0x58024400
 80019c4:	58020400 	.word	0x58020400

080019c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a20      	ldr	r2, [pc, #128]	; (8001a58 <HAL_TIM_Base_MspInit+0x90>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d10f      	bne.n	80019fa <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019da:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <HAL_TIM_Base_MspInit+0x94>)
 80019dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019e0:	4a1e      	ldr	r2, [pc, #120]	; (8001a5c <HAL_TIM_Base_MspInit+0x94>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80019ea:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <HAL_TIM_Base_MspInit+0x94>)
 80019ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80019f8:	e028      	b.n	8001a4c <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM3)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a18      	ldr	r2, [pc, #96]	; (8001a60 <HAL_TIM_Base_MspInit+0x98>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d10f      	bne.n	8001a24 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a04:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <HAL_TIM_Base_MspInit+0x94>)
 8001a06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a0a:	4a14      	ldr	r2, [pc, #80]	; (8001a5c <HAL_TIM_Base_MspInit+0x94>)
 8001a0c:	f043 0302 	orr.w	r3, r3, #2
 8001a10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <HAL_TIM_Base_MspInit+0x94>)
 8001a16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	693b      	ldr	r3, [r7, #16]
}
 8001a22:	e013      	b.n	8001a4c <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM14)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <HAL_TIM_Base_MspInit+0x9c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d10e      	bne.n	8001a4c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <HAL_TIM_Base_MspInit+0x94>)
 8001a30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a34:	4a09      	ldr	r2, [pc, #36]	; (8001a5c <HAL_TIM_Base_MspInit+0x94>)
 8001a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <HAL_TIM_Base_MspInit+0x94>)
 8001a40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
}
 8001a4c:	bf00      	nop
 8001a4e:	371c      	adds	r7, #28
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	40010000 	.word	0x40010000
 8001a5c:	58024400 	.word	0x58024400
 8001a60:	40000400 	.word	0x40000400
 8001a64:	40002000 	.word	0x40002000

08001a68 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	; 0x28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a1a      	ldr	r2, [pc, #104]	; (8001af0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d12e      	bne.n	8001ae8 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001a8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a90:	4a18      	ldr	r2, [pc, #96]	; (8001af4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001a92:	f043 0304 	orr.w	r3, r3, #4
 8001a96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a9a:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001a9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aae:	4a11      	ldr	r2, [pc, #68]	; (8001af4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001ab0:	f043 0308 	orr.w	r3, r3, #8
 8001ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ab8:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001ac6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <HAL_TIM_Encoder_MspInit+0x90>)
 8001ae4:	f001 fb7a 	bl	80031dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ae8:	bf00      	nop
 8001aea:	3728      	adds	r7, #40	; 0x28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40000800 	.word	0x40000800
 8001af4:	58024400 	.word	0x58024400
 8001af8:	58020c00 	.word	0x58020c00

08001afc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM14)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a13      	ldr	r2, [pc, #76]	; (8001b68 <HAL_TIM_MspPostInit+0x6c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d11f      	bne.n	8001b5e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b1e:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <HAL_TIM_MspPostInit+0x70>)
 8001b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b24:	4a11      	ldr	r2, [pc, #68]	; (8001b6c <HAL_TIM_MspPostInit+0x70>)
 8001b26:	f043 0320 	orr.w	r3, r3, #32
 8001b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <HAL_TIM_MspPostInit+0x70>)
 8001b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b34:	f003 0320 	and.w	r3, r3, #32
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PF9     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	2302      	movs	r3, #2
 8001b44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001b4e:	2309      	movs	r3, #9
 8001b50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b52:	f107 030c 	add.w	r3, r7, #12
 8001b56:	4619      	mov	r1, r3
 8001b58:	4805      	ldr	r0, [pc, #20]	; (8001b70 <HAL_TIM_MspPostInit+0x74>)
 8001b5a:	f001 fb3f 	bl	80031dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001b5e:	bf00      	nop
 8001b60:	3720      	adds	r7, #32
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40002000 	.word	0x40002000
 8001b6c:	58024400 	.word	0x58024400
 8001b70:	58021400 	.word	0x58021400

08001b74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b0b8      	sub	sp, #224	; 0xe0
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b8c:	f107 0310 	add.w	r3, r7, #16
 8001b90:	22bc      	movs	r2, #188	; 0xbc
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f007 ff17 	bl	80099c8 <memset>
  if(huart->Instance==USART3)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a25      	ldr	r2, [pc, #148]	; (8001c34 <HAL_UART_MspInit+0xc0>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d142      	bne.n	8001c2a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bae:	f107 0310 	add.w	r3, r7, #16
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f002 ff66 	bl	8004a84 <HAL_RCCEx_PeriphCLKConfig>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001bbe:	f7ff fdf1 	bl	80017a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bc2:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <HAL_UART_MspInit+0xc4>)
 8001bc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bc8:	4a1b      	ldr	r2, [pc, #108]	; (8001c38 <HAL_UART_MspInit+0xc4>)
 8001bca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001bd2:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <HAL_UART_MspInit+0xc4>)
 8001bd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001be0:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <HAL_UART_MspInit+0xc4>)
 8001be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be6:	4a14      	ldr	r2, [pc, #80]	; (8001c38 <HAL_UART_MspInit+0xc4>)
 8001be8:	f043 0308 	orr.w	r3, r3, #8
 8001bec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <HAL_UART_MspInit+0xc4>)
 8001bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001bfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c18:	2307      	movs	r3, #7
 8001c1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c1e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c22:	4619      	mov	r1, r3
 8001c24:	4805      	ldr	r0, [pc, #20]	; (8001c3c <HAL_UART_MspInit+0xc8>)
 8001c26:	f001 fad9 	bl	80031dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c2a:	bf00      	nop
 8001c2c:	37e0      	adds	r7, #224	; 0xe0
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40004800 	.word	0x40004800
 8001c38:	58024400 	.word	0x58024400
 8001c3c:	58020c00 	.word	0x58020c00

08001c40 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b0b8      	sub	sp, #224	; 0xe0
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c58:	f107 0310 	add.w	r3, r7, #16
 8001c5c:	22bc      	movs	r2, #188	; 0xbc
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f007 feb1 	bl	80099c8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a2f      	ldr	r2, [pc, #188]	; (8001d28 <HAL_PCD_MspInit+0xe8>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d156      	bne.n	8001d1e <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001c70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001c74:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001c76:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c7e:	f107 0310 	add.w	r3, r7, #16
 8001c82:	4618      	mov	r0, r3
 8001c84:	f002 fefe 	bl	8004a84 <HAL_RCCEx_PeriphCLKConfig>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8001c8e:	f7ff fd89 	bl	80017a4 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001c92:	f001 ff2f 	bl	8003af4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <HAL_PCD_MspInit+0xec>)
 8001c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9c:	4a23      	ldr	r2, [pc, #140]	; (8001d2c <HAL_PCD_MspInit+0xec>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ca6:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <HAL_PCD_MspInit+0xec>)
 8001ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001cb4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001cb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001cce:	230a      	movs	r3, #10
 8001cd0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4815      	ldr	r0, [pc, #84]	; (8001d30 <HAL_PCD_MspInit+0xf0>)
 8001cdc:	f001 fa7e 	bl	80031dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ce4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001cf4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	480d      	ldr	r0, [pc, #52]	; (8001d30 <HAL_PCD_MspInit+0xf0>)
 8001cfc:	f001 fa6e 	bl	80031dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001d00:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <HAL_PCD_MspInit+0xec>)
 8001d02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d06:	4a09      	ldr	r2, [pc, #36]	; (8001d2c <HAL_PCD_MspInit+0xec>)
 8001d08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d0c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_PCD_MspInit+0xec>)
 8001d12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001d1e:	bf00      	nop
 8001d20:	37e0      	adds	r7, #224	; 0xe0
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40080000 	.word	0x40080000
 8001d2c:	58024400 	.word	0x58024400
 8001d30:	58020000 	.word	0x58020000

08001d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d38:	e7fe      	b.n	8001d38 <NMI_Handler+0x4>

08001d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d3e:	e7fe      	b.n	8001d3e <HardFault_Handler+0x4>

08001d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <MemManage_Handler+0x4>

08001d46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d4a:	e7fe      	b.n	8001d4a <BusFault_Handler+0x4>

08001d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <UsageFault_Handler+0x4>

08001d52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d80:	f000 f95c 	bl	800203c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d90:	4a14      	ldr	r2, [pc, #80]	; (8001de4 <_sbrk+0x5c>)
 8001d92:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <_sbrk+0x60>)
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d9c:	4b13      	ldr	r3, [pc, #76]	; (8001dec <_sbrk+0x64>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d102      	bne.n	8001daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da4:	4b11      	ldr	r3, [pc, #68]	; (8001dec <_sbrk+0x64>)
 8001da6:	4a12      	ldr	r2, [pc, #72]	; (8001df0 <_sbrk+0x68>)
 8001da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <_sbrk+0x64>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d207      	bcs.n	8001dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db8:	f007 fdb4 	bl	8009924 <__errno>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	220c      	movs	r2, #12
 8001dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc6:	e009      	b.n	8001ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <_sbrk+0x64>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dce:	4b07      	ldr	r3, [pc, #28]	; (8001dec <_sbrk+0x64>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4a05      	ldr	r2, [pc, #20]	; (8001dec <_sbrk+0x64>)
 8001dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dda:	68fb      	ldr	r3, [r7, #12]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	24080000 	.word	0x24080000
 8001de8:	00000400 	.word	0x00000400
 8001dec:	24000090 	.word	0x24000090
 8001df0:	24000760 	.word	0x24000760

08001df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001df8:	4b37      	ldr	r3, [pc, #220]	; (8001ed8 <SystemInit+0xe4>)
 8001dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfe:	4a36      	ldr	r2, [pc, #216]	; (8001ed8 <SystemInit+0xe4>)
 8001e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e08:	4b34      	ldr	r3, [pc, #208]	; (8001edc <SystemInit+0xe8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 030f 	and.w	r3, r3, #15
 8001e10:	2b06      	cmp	r3, #6
 8001e12:	d807      	bhi.n	8001e24 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e14:	4b31      	ldr	r3, [pc, #196]	; (8001edc <SystemInit+0xe8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f023 030f 	bic.w	r3, r3, #15
 8001e1c:	4a2f      	ldr	r2, [pc, #188]	; (8001edc <SystemInit+0xe8>)
 8001e1e:	f043 0307 	orr.w	r3, r3, #7
 8001e22:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001e24:	4b2e      	ldr	r3, [pc, #184]	; (8001ee0 <SystemInit+0xec>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a2d      	ldr	r2, [pc, #180]	; (8001ee0 <SystemInit+0xec>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e30:	4b2b      	ldr	r3, [pc, #172]	; (8001ee0 <SystemInit+0xec>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001e36:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <SystemInit+0xec>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	4929      	ldr	r1, [pc, #164]	; (8001ee0 <SystemInit+0xec>)
 8001e3c:	4b29      	ldr	r3, [pc, #164]	; (8001ee4 <SystemInit+0xf0>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e42:	4b26      	ldr	r3, [pc, #152]	; (8001edc <SystemInit+0xe8>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d007      	beq.n	8001e5e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e4e:	4b23      	ldr	r3, [pc, #140]	; (8001edc <SystemInit+0xe8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 030f 	bic.w	r3, r3, #15
 8001e56:	4a21      	ldr	r2, [pc, #132]	; (8001edc <SystemInit+0xe8>)
 8001e58:	f043 0307 	orr.w	r3, r3, #7
 8001e5c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001e5e:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <SystemInit+0xec>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001e64:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <SystemInit+0xec>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <SystemInit+0xec>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001e70:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <SystemInit+0xec>)
 8001e72:	4a1d      	ldr	r2, [pc, #116]	; (8001ee8 <SystemInit+0xf4>)
 8001e74:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001e76:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <SystemInit+0xec>)
 8001e78:	4a1c      	ldr	r2, [pc, #112]	; (8001eec <SystemInit+0xf8>)
 8001e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001e7c:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <SystemInit+0xec>)
 8001e7e:	4a1c      	ldr	r2, [pc, #112]	; (8001ef0 <SystemInit+0xfc>)
 8001e80:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e82:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <SystemInit+0xec>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001e88:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <SystemInit+0xec>)
 8001e8a:	4a19      	ldr	r2, [pc, #100]	; (8001ef0 <SystemInit+0xfc>)
 8001e8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e8e:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <SystemInit+0xec>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <SystemInit+0xec>)
 8001e96:	4a16      	ldr	r2, [pc, #88]	; (8001ef0 <SystemInit+0xfc>)
 8001e98:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e9a:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <SystemInit+0xec>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <SystemInit+0xec>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0e      	ldr	r2, [pc, #56]	; (8001ee0 <SystemInit+0xec>)
 8001ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eaa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <SystemInit+0xec>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001eb2:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <SystemInit+0x100>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <SystemInit+0x104>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ebe:	d202      	bcs.n	8001ec6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001ec0:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <SystemInit+0x108>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <SystemInit+0x10c>)
 8001ec8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001ecc:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001ece:	bf00      	nop
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00
 8001edc:	52002000 	.word	0x52002000
 8001ee0:	58024400 	.word	0x58024400
 8001ee4:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ee8:	02020200 	.word	0x02020200
 8001eec:	01ff0000 	.word	0x01ff0000
 8001ef0:	01010280 	.word	0x01010280
 8001ef4:	5c001000 	.word	0x5c001000
 8001ef8:	ffff0000 	.word	0xffff0000
 8001efc:	51008108 	.word	0x51008108
 8001f00:	52004000 	.word	0x52004000

08001f04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001f04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f3c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f08:	f7ff ff74 	bl	8001df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f0c:	480c      	ldr	r0, [pc, #48]	; (8001f40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f0e:	490d      	ldr	r1, [pc, #52]	; (8001f44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f10:	4a0d      	ldr	r2, [pc, #52]	; (8001f48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f14:	e002      	b.n	8001f1c <LoopCopyDataInit>

08001f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f1a:	3304      	adds	r3, #4

08001f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f20:	d3f9      	bcc.n	8001f16 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f24:	4c0a      	ldr	r4, [pc, #40]	; (8001f50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f28:	e001      	b.n	8001f2e <LoopFillZerobss>

08001f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f2c:	3204      	adds	r2, #4

08001f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f30:	d3fb      	bcc.n	8001f2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f32:	f007 fcfd 	bl	8009930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f36:	f7fe fec7 	bl	8000cc8 <main>
  bx  lr
 8001f3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f3c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001f40:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f44:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001f48:	0800a2d0 	.word	0x0800a2d0
  ldr r2, =_sbss
 8001f4c:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001f50:	2400075c 	.word	0x2400075c

08001f54 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f54:	e7fe      	b.n	8001f54 <ADC3_IRQHandler>
	...

08001f58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f5e:	2003      	movs	r0, #3
 8001f60:	f001 f90a 	bl	8003178 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f64:	f002 fbb8 	bl	80046d8 <HAL_RCC_GetSysClockFreq>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <HAL_Init+0x68>)
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	0a1b      	lsrs	r3, r3, #8
 8001f70:	f003 030f 	and.w	r3, r3, #15
 8001f74:	4913      	ldr	r1, [pc, #76]	; (8001fc4 <HAL_Init+0x6c>)
 8001f76:	5ccb      	ldrb	r3, [r1, r3]
 8001f78:	f003 031f 	and.w	r3, r3, #31
 8001f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f80:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f82:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <HAL_Init+0x68>)
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	4a0e      	ldr	r2, [pc, #56]	; (8001fc4 <HAL_Init+0x6c>)
 8001f8c:	5cd3      	ldrb	r3, [r2, r3]
 8001f8e:	f003 031f 	and.w	r3, r3, #31
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	fa22 f303 	lsr.w	r3, r2, r3
 8001f98:	4a0b      	ldr	r2, [pc, #44]	; (8001fc8 <HAL_Init+0x70>)
 8001f9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f9c:	4a0b      	ldr	r2, [pc, #44]	; (8001fcc <HAL_Init+0x74>)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f000 f814 	bl	8001fd0 <HAL_InitTick>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e002      	b.n	8001fb8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001fb2:	f7ff fbfd 	bl	80017b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	58024400 	.word	0x58024400
 8001fc4:	0800a254 	.word	0x0800a254
 8001fc8:	24000004 	.word	0x24000004
 8001fcc:	24000000 	.word	0x24000000

08001fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001fd8:	4b15      	ldr	r3, [pc, #84]	; (8002030 <HAL_InitTick+0x60>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e021      	b.n	8002028 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001fe4:	4b13      	ldr	r3, [pc, #76]	; (8002034 <HAL_InitTick+0x64>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	4b11      	ldr	r3, [pc, #68]	; (8002030 <HAL_InitTick+0x60>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	4619      	mov	r1, r3
 8001fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f001 f8e1 	bl	80031c2 <HAL_SYSTICK_Config>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e00e      	b.n	8002028 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b0f      	cmp	r3, #15
 800200e:	d80a      	bhi.n	8002026 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002010:	2200      	movs	r2, #0
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	f04f 30ff 	mov.w	r0, #4294967295
 8002018:	f001 f8b9 	bl	800318e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800201c:	4a06      	ldr	r2, [pc, #24]	; (8002038 <HAL_InitTick+0x68>)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	e000      	b.n	8002028 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	2400000c 	.word	0x2400000c
 8002034:	24000000 	.word	0x24000000
 8002038:	24000008 	.word	0x24000008

0800203c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_IncTick+0x20>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_IncTick+0x24>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4413      	add	r3, r2
 800204c:	4a04      	ldr	r2, [pc, #16]	; (8002060 <HAL_IncTick+0x24>)
 800204e:	6013      	str	r3, [r2, #0]
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	2400000c 	.word	0x2400000c
 8002060:	24000748 	.word	0x24000748

08002064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return uwTick;
 8002068:	4b03      	ldr	r3, [pc, #12]	; (8002078 <HAL_GetTick+0x14>)
 800206a:	681b      	ldr	r3, [r3, #0]
}
 800206c:	4618      	mov	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	24000748 	.word	0x24000748

0800207c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002084:	f7ff ffee 	bl	8002064 <HAL_GetTick>
 8002088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002094:	d005      	beq.n	80020a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002096:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <HAL_Delay+0x44>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4413      	add	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020a2:	bf00      	nop
 80020a4:	f7ff ffde 	bl	8002064 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d8f7      	bhi.n	80020a4 <HAL_Delay+0x28>
  {
  }
}
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	2400000c 	.word	0x2400000c

080020c4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80020c8:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <HAL_GetREVID+0x14>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	0c1b      	lsrs	r3, r3, #16
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	5c001000 	.word	0x5c001000

080020dc <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	401a      	ands	r2, r3
 80020f0:	4904      	ldr	r1, [pc, #16]	; (8002104 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	604b      	str	r3, [r1, #4]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	58000400 	.word	0x58000400

08002108 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	609a      	str	r2, [r3, #8]
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	609a      	str	r2, [r3, #8]
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002170:	b480      	push	{r7}
 8002172:	b087      	sub	sp, #28
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	3360      	adds	r3, #96	; 0x60
 8002182:	461a      	mov	r2, r3
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	430b      	orrs	r3, r1
 800219e:	431a      	orrs	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80021a4:	bf00      	nop
 80021a6:	371c      	adds	r7, #28
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f003 031f 	and.w	r3, r3, #31
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	fa01 f303 	lsl.w	r3, r1, r3
 80021d0:	431a      	orrs	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	611a      	str	r2, [r3, #16]
}
 80021d6:	bf00      	nop
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b087      	sub	sp, #28
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	3360      	adds	r3, #96	; 0x60
 80021f2:	461a      	mov	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	431a      	orrs	r2, r3
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	601a      	str	r2, [r3, #0]
  }
}
 800220c:	bf00      	nop
 800220e:	371c      	adds	r7, #28
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	3330      	adds	r3, #48	; 0x30
 8002228:	461a      	mov	r2, r3
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	0a1b      	lsrs	r3, r3, #8
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	f003 030c 	and.w	r3, r3, #12
 8002234:	4413      	add	r3, r2
 8002236:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	211f      	movs	r1, #31
 8002244:	fa01 f303 	lsl.w	r3, r1, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	401a      	ands	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	0e9b      	lsrs	r3, r3, #26
 8002250:	f003 011f 	and.w	r1, r3, #31
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f003 031f 	and.w	r3, r3, #31
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	431a      	orrs	r2, r3
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002264:	bf00      	nop
 8002266:	371c      	adds	r7, #28
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	3314      	adds	r3, #20
 8002280:	461a      	mov	r2, r3
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	0e5b      	lsrs	r3, r3, #25
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	4413      	add	r3, r2
 800228e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	0d1b      	lsrs	r3, r3, #20
 8002298:	f003 031f 	and.w	r3, r3, #31
 800229c:	2107      	movs	r1, #7
 800229e:	fa01 f303 	lsl.w	r3, r1, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	401a      	ands	r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	0d1b      	lsrs	r3, r3, #20
 80022aa:	f003 031f 	and.w	r3, r3, #31
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	fa01 f303 	lsl.w	r3, r1, r3
 80022b4:	431a      	orrs	r2, r3
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80022ba:	bf00      	nop
 80022bc:	371c      	adds	r7, #28
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022e0:	43db      	mvns	r3, r3
 80022e2:	401a      	ands	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f003 0318 	and.w	r3, r3, #24
 80022ea:	4908      	ldr	r1, [pc, #32]	; (800230c <LL_ADC_SetChannelSingleDiff+0x44>)
 80022ec:	40d9      	lsrs	r1, r3
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	400b      	ands	r3, r1
 80022f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022f6:	431a      	orrs	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	000fffff 	.word	0x000fffff

08002310 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	4b04      	ldr	r3, [pc, #16]	; (8002330 <LL_ADC_DisableDeepPowerDown+0x20>)
 800231e:	4013      	ands	r3, r2
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6093      	str	r3, [r2, #8]
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	5fffffc0 	.word	0x5fffffc0

08002334 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002348:	d101      	bne.n	800234e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <LL_ADC_EnableInternalRegulator+0x24>)
 800236a:	4013      	ands	r3, r2
 800236c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	6fffffc0 	.word	0x6fffffc0

08002384 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002394:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002398:	d101      	bne.n	800239e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d101      	bne.n	80023c4 <LL_ADC_IsEnabled+0x18>
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <LL_ADC_IsEnabled+0x1a>
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d101      	bne.n	80023ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b08      	cmp	r3, #8
 800240a:	d101      	bne.n	8002410 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002420:	b590      	push	{r4, r7, lr}
 8002422:	b089      	sub	sp, #36	; 0x24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800242c:	2300      	movs	r3, #0
 800242e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e18e      	b.n	8002758 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002444:	2b00      	cmp	r3, #0
 8002446:	d109      	bne.n	800245c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7ff f9cb 	bl	80017e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff67 	bl	8002334 <LL_ADC_IsDeepPowerDownEnabled>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d004      	beq.n	8002476 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff4d 	bl	8002310 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff ff82 	bl	8002384 <LL_ADC_IsInternalRegulatorEnabled>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d114      	bne.n	80024b0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff ff66 	bl	800235c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002490:	4b9a      	ldr	r3, [pc, #616]	; (80026fc <HAL_ADC_Init+0x2dc>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	099b      	lsrs	r3, r3, #6
 8002496:	4a9a      	ldr	r2, [pc, #616]	; (8002700 <HAL_ADC_Init+0x2e0>)
 8002498:	fba2 2303 	umull	r2, r3, r2, r3
 800249c:	099b      	lsrs	r3, r3, #6
 800249e:	3301      	adds	r3, #1
 80024a0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024a2:	e002      	b.n	80024aa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1f9      	bne.n	80024a4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff65 	bl	8002384 <LL_ADC_IsInternalRegulatorEnabled>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10d      	bne.n	80024dc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c4:	f043 0210 	orr.w	r2, r3, #16
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d0:	f043 0201 	orr.w	r2, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff ff76 	bl	80023d2 <LL_ADC_REG_IsConversionOngoing>
 80024e6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ec:	f003 0310 	and.w	r3, r3, #16
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f040 8128 	bne.w	8002746 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f040 8124 	bne.w	8002746 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002502:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002506:	f043 0202 	orr.w	r2, r3, #2
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff ff4a 	bl	80023ac <LL_ADC_IsEnabled>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d136      	bne.n	800258c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a78      	ldr	r2, [pc, #480]	; (8002704 <HAL_ADC_Init+0x2e4>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d004      	beq.n	8002532 <HAL_ADC_Init+0x112>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a76      	ldr	r2, [pc, #472]	; (8002708 <HAL_ADC_Init+0x2e8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d10e      	bne.n	8002550 <HAL_ADC_Init+0x130>
 8002532:	4874      	ldr	r0, [pc, #464]	; (8002704 <HAL_ADC_Init+0x2e4>)
 8002534:	f7ff ff3a 	bl	80023ac <LL_ADC_IsEnabled>
 8002538:	4604      	mov	r4, r0
 800253a:	4873      	ldr	r0, [pc, #460]	; (8002708 <HAL_ADC_Init+0x2e8>)
 800253c:	f7ff ff36 	bl	80023ac <LL_ADC_IsEnabled>
 8002540:	4603      	mov	r3, r0
 8002542:	4323      	orrs	r3, r4
 8002544:	2b00      	cmp	r3, #0
 8002546:	bf0c      	ite	eq
 8002548:	2301      	moveq	r3, #1
 800254a:	2300      	movne	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	e008      	b.n	8002562 <HAL_ADC_Init+0x142>
 8002550:	486e      	ldr	r0, [pc, #440]	; (800270c <HAL_ADC_Init+0x2ec>)
 8002552:	f7ff ff2b 	bl	80023ac <LL_ADC_IsEnabled>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf0c      	ite	eq
 800255c:	2301      	moveq	r3, #1
 800255e:	2300      	movne	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d012      	beq.n	800258c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a66      	ldr	r2, [pc, #408]	; (8002704 <HAL_ADC_Init+0x2e4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d004      	beq.n	800257a <HAL_ADC_Init+0x15a>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a64      	ldr	r2, [pc, #400]	; (8002708 <HAL_ADC_Init+0x2e8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d101      	bne.n	800257e <HAL_ADC_Init+0x15e>
 800257a:	4a65      	ldr	r2, [pc, #404]	; (8002710 <HAL_ADC_Init+0x2f0>)
 800257c:	e000      	b.n	8002580 <HAL_ADC_Init+0x160>
 800257e:	4a65      	ldr	r2, [pc, #404]	; (8002714 <HAL_ADC_Init+0x2f4>)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4619      	mov	r1, r3
 8002586:	4610      	mov	r0, r2
 8002588:	f7ff fdbe 	bl	8002108 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800258c:	f7ff fd9a 	bl	80020c4 <HAL_GetREVID>
 8002590:	4603      	mov	r3, r0
 8002592:	f241 0203 	movw	r2, #4099	; 0x1003
 8002596:	4293      	cmp	r3, r2
 8002598:	d914      	bls.n	80025c4 <HAL_ADC_Init+0x1a4>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b10      	cmp	r3, #16
 80025a0:	d110      	bne.n	80025c4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	7d5b      	ldrb	r3, [r3, #21]
 80025a6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80025ac:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80025b2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	7f1b      	ldrb	r3, [r3, #28]
 80025b8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80025ba:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80025bc:	f043 030c 	orr.w	r3, r3, #12
 80025c0:	61bb      	str	r3, [r7, #24]
 80025c2:	e00d      	b.n	80025e0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	7d5b      	ldrb	r3, [r3, #21]
 80025c8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80025ce:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80025d4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	7f1b      	ldrb	r3, [r3, #28]
 80025da:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	7f1b      	ldrb	r3, [r3, #28]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d106      	bne.n	80025f6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	3b01      	subs	r3, #1
 80025ee:	045b      	lsls	r3, r3, #17
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d009      	beq.n	8002612 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	4b3f      	ldr	r3, [pc, #252]	; (8002718 <HAL_ADC_Init+0x2f8>)
 800261a:	4013      	ands	r3, r2
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6812      	ldr	r2, [r2, #0]
 8002620:	69b9      	ldr	r1, [r7, #24]
 8002622:	430b      	orrs	r3, r1
 8002624:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fed1 	bl	80023d2 <LL_ADC_REG_IsConversionOngoing>
 8002630:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fede 	bl	80023f8 <LL_ADC_INJ_IsConversionOngoing>
 800263c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d14a      	bne.n	80026da <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d147      	bne.n	80026da <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	7d1b      	ldrb	r3, [r3, #20]
 800264e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	4b2f      	ldr	r3, [pc, #188]	; (800271c <HAL_ADC_Init+0x2fc>)
 8002660:	4013      	ands	r3, r2
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6812      	ldr	r2, [r2, #0]
 8002666:	69b9      	ldr	r1, [r7, #24]
 8002668:	430b      	orrs	r3, r1
 800266a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002672:	2b01      	cmp	r3, #1
 8002674:	d11b      	bne.n	80026ae <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691a      	ldr	r2, [r3, #16]
 8002682:	4b27      	ldr	r3, [pc, #156]	; (8002720 <HAL_ADC_Init+0x300>)
 8002684:	4013      	ands	r3, r2
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800268a:	3a01      	subs	r2, #1
 800268c:	0411      	lsls	r1, r2, #16
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002692:	4311      	orrs	r1, r2
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002698:	4311      	orrs	r1, r2
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800269e:	430a      	orrs	r2, r1
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0201 	orr.w	r2, r2, #1
 80026aa:	611a      	str	r2, [r3, #16]
 80026ac:	e007      	b.n	80026be <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	691a      	ldr	r2, [r3, #16]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0201 	bic.w	r2, r2, #1
 80026bc:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 fb93 	bl	8002e00 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d120      	bne.n	8002724 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	f023 010f 	bic.w	r1, r3, #15
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	1e5a      	subs	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	631a      	str	r2, [r3, #48]	; 0x30
 80026fa:	e01b      	b.n	8002734 <HAL_ADC_Init+0x314>
 80026fc:	24000000 	.word	0x24000000
 8002700:	053e2d63 	.word	0x053e2d63
 8002704:	40022000 	.word	0x40022000
 8002708:	40022100 	.word	0x40022100
 800270c:	58026000 	.word	0x58026000
 8002710:	40022300 	.word	0x40022300
 8002714:	58026300 	.word	0x58026300
 8002718:	fff0c003 	.word	0xfff0c003
 800271c:	ffffbffc 	.word	0xffffbffc
 8002720:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 020f 	bic.w	r2, r2, #15
 8002732:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002738:	f023 0303 	bic.w	r3, r3, #3
 800273c:	f043 0201 	orr.w	r2, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	655a      	str	r2, [r3, #84]	; 0x54
 8002744:	e007      	b.n	8002756 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274a:	f043 0210 	orr.w	r2, r3, #16
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002756:	7ffb      	ldrb	r3, [r7, #31]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3724      	adds	r7, #36	; 0x24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd90      	pop	{r4, r7, pc}

08002760 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002760:	b590      	push	{r4, r7, lr}
 8002762:	b0a1      	sub	sp, #132	; 0x84
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	4a9d      	ldr	r2, [pc, #628]	; (80029f0 <HAL_ADC_ConfigChannel+0x290>)
 800277a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_ADC_ConfigChannel+0x2a>
 8002786:	2302      	movs	r3, #2
 8002788:	e321      	b.n	8002dce <HAL_ADC_ConfigChannel+0x66e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fe1b 	bl	80023d2 <LL_ADC_REG_IsConversionOngoing>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f040 8306 	bne.w	8002db0 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d108      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x62>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	0e9b      	lsrs	r3, r3, #26
 80027b6:	f003 031f 	and.w	r3, r3, #31
 80027ba:	2201      	movs	r2, #1
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	e016      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x90>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027d2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80027da:	2320      	movs	r3, #32
 80027dc:	e003      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80027de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027e0:	fab3 f383 	clz	r3, r3
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	f003 031f 	and.w	r3, r3, #31
 80027ea:	2201      	movs	r2, #1
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	69d1      	ldr	r1, [r2, #28]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	6812      	ldr	r2, [r2, #0]
 80027fa:	430b      	orrs	r3, r1
 80027fc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	6859      	ldr	r1, [r3, #4]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	f7ff fd04 	bl	8002218 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff fddc 	bl	80023d2 <LL_ADC_REG_IsConversionOngoing>
 800281a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff fde9 	bl	80023f8 <LL_ADC_INJ_IsConversionOngoing>
 8002826:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002828:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800282a:	2b00      	cmp	r3, #0
 800282c:	f040 80b3 	bne.w	8002996 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002830:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002832:	2b00      	cmp	r3, #0
 8002834:	f040 80af 	bne.w	8002996 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	6819      	ldr	r1, [r3, #0]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	461a      	mov	r2, r3
 8002846:	f7ff fd13 	bl	8002270 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800284a:	4b6a      	ldr	r3, [pc, #424]	; (80029f4 <HAL_ADC_ConfigChannel+0x294>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002852:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002856:	d10b      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x110>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	695a      	ldr	r2, [r3, #20]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	089b      	lsrs	r3, r3, #2
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	e01d      	b.n	80028ac <HAL_ADC_ConfigChannel+0x14c>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f003 0310 	and.w	r3, r3, #16
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10b      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x136>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	695a      	ldr	r2, [r3, #20]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	089b      	lsrs	r3, r3, #2
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	e00a      	b.n	80028ac <HAL_ADC_ConfigChannel+0x14c>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	695a      	ldr	r2, [r3, #20]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	089b      	lsrs	r3, r3, #2
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d027      	beq.n	8002906 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6919      	ldr	r1, [r3, #16]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028c4:	f7ff fc54 	bl	8002170 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	6919      	ldr	r1, [r3, #16]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	7e5b      	ldrb	r3, [r3, #25]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d102      	bne.n	80028de <HAL_ADC_ConfigChannel+0x17e>
 80028d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80028dc:	e000      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x180>
 80028de:	2300      	movs	r3, #0
 80028e0:	461a      	mov	r2, r3
 80028e2:	f7ff fc7e 	bl	80021e2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	6919      	ldr	r1, [r3, #16]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	7e1b      	ldrb	r3, [r3, #24]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d102      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x19c>
 80028f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028fa:	e000      	b.n	80028fe <HAL_ADC_ConfigChannel+0x19e>
 80028fc:	2300      	movs	r3, #0
 80028fe:	461a      	mov	r2, r3
 8002900:	f7ff fc56 	bl	80021b0 <LL_ADC_SetDataRightShift>
 8002904:	e047      	b.n	8002996 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800290c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	069b      	lsls	r3, r3, #26
 8002916:	429a      	cmp	r2, r3
 8002918:	d107      	bne.n	800292a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002928:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002930:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	069b      	lsls	r3, r3, #26
 800293a:	429a      	cmp	r2, r3
 800293c:	d107      	bne.n	800294e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800294c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002954:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	069b      	lsls	r3, r3, #26
 800295e:	429a      	cmp	r2, r3
 8002960:	d107      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002970:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002978:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	069b      	lsls	r3, r3, #26
 8002982:	429a      	cmp	r2, r3
 8002984:	d107      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002994:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fd06 	bl	80023ac <LL_ADC_IsEnabled>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f040 820d 	bne.w	8002dc2 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6818      	ldr	r0, [r3, #0]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	6819      	ldr	r1, [r3, #0]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	461a      	mov	r2, r3
 80029b6:	f7ff fc87 	bl	80022c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	4a0c      	ldr	r2, [pc, #48]	; (80029f0 <HAL_ADC_ConfigChannel+0x290>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	f040 8133 	bne.w	8002c2c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d110      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x298>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	0e9b      	lsrs	r3, r3, #26
 80029dc:	3301      	adds	r3, #1
 80029de:	f003 031f 	and.w	r3, r3, #31
 80029e2:	2b09      	cmp	r3, #9
 80029e4:	bf94      	ite	ls
 80029e6:	2301      	movls	r3, #1
 80029e8:	2300      	movhi	r3, #0
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	e01e      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x2cc>
 80029ee:	bf00      	nop
 80029f0:	47ff0000 	.word	0x47ff0000
 80029f4:	5c001000 	.word	0x5c001000
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a00:	fa93 f3a3 	rbit	r3, r3
 8002a04:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a08:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002a10:	2320      	movs	r3, #32
 8002a12:	e003      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002a14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a16:	fab3 f383 	clz	r3, r3
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	f003 031f 	and.w	r3, r3, #31
 8002a22:	2b09      	cmp	r3, #9
 8002a24:	bf94      	ite	ls
 8002a26:	2301      	movls	r3, #1
 8002a28:	2300      	movhi	r3, #0
 8002a2a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d079      	beq.n	8002b24 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d107      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x2ec>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	0e9b      	lsrs	r3, r3, #26
 8002a42:	3301      	adds	r3, #1
 8002a44:	069b      	lsls	r3, r3, #26
 8002a46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a4a:	e015      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x318>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a54:	fa93 f3a3 	rbit	r3, r3
 8002a58:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a5c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002a64:	2320      	movs	r3, #32
 8002a66:	e003      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a6a:	fab3 f383 	clz	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	3301      	adds	r3, #1
 8002a72:	069b      	lsls	r3, r3, #26
 8002a74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d109      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x338>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	0e9b      	lsrs	r3, r3, #26
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	f003 031f 	and.w	r3, r3, #31
 8002a90:	2101      	movs	r1, #1
 8002a92:	fa01 f303 	lsl.w	r3, r1, r3
 8002a96:	e017      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x368>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aa0:	fa93 f3a3 	rbit	r3, r3
 8002aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002ab0:	2320      	movs	r3, #32
 8002ab2:	e003      	b.n	8002abc <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ab6:	fab3 f383 	clz	r3, r3
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	3301      	adds	r3, #1
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac8:	ea42 0103 	orr.w	r1, r2, r3
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10a      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x38e>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	0e9b      	lsrs	r3, r3, #26
 8002ade:	3301      	adds	r3, #1
 8002ae0:	f003 021f 	and.w	r2, r3, #31
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4413      	add	r3, r2
 8002aea:	051b      	lsls	r3, r3, #20
 8002aec:	e018      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x3c0>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002b06:	2320      	movs	r3, #32
 8002b08:	e003      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b0c:	fab3 f383 	clz	r3, r3
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	3301      	adds	r3, #1
 8002b14:	f003 021f 	and.w	r2, r3, #31
 8002b18:	4613      	mov	r3, r2
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	4413      	add	r3, r2
 8002b1e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b20:	430b      	orrs	r3, r1
 8002b22:	e07e      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d107      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x3e0>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	0e9b      	lsrs	r3, r3, #26
 8002b36:	3301      	adds	r3, #1
 8002b38:	069b      	lsls	r3, r3, #26
 8002b3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b3e:	e015      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x40c>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b48:	fa93 f3a3 	rbit	r3, r3
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002b58:	2320      	movs	r3, #32
 8002b5a:	e003      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5e:	fab3 f383 	clz	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	3301      	adds	r3, #1
 8002b66:	069b      	lsls	r3, r3, #26
 8002b68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d109      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x42c>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	0e9b      	lsrs	r3, r3, #26
 8002b7e:	3301      	adds	r3, #1
 8002b80:	f003 031f 	and.w	r3, r3, #31
 8002b84:	2101      	movs	r1, #1
 8002b86:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8a:	e017      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x45c>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	fa93 f3a3 	rbit	r3, r3
 8002b98:	61bb      	str	r3, [r7, #24]
  return result;
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002ba4:	2320      	movs	r3, #32
 8002ba6:	e003      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	fab3 f383 	clz	r3, r3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	f003 031f 	and.w	r3, r3, #31
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbc:	ea42 0103 	orr.w	r1, r2, r3
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10d      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x488>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	0e9b      	lsrs	r3, r3, #26
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	f003 021f 	and.w	r2, r3, #31
 8002bd8:	4613      	mov	r3, r2
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4413      	add	r3, r2
 8002bde:	3b1e      	subs	r3, #30
 8002be0:	051b      	lsls	r3, r3, #20
 8002be2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002be6:	e01b      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x4c0>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	60fb      	str	r3, [r7, #12]
  return result;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002c00:	2320      	movs	r3, #32
 8002c02:	e003      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	f003 021f 	and.w	r2, r3, #31
 8002c12:	4613      	mov	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4413      	add	r3, r2
 8002c18:	3b1e      	subs	r3, #30
 8002c1a:	051b      	lsls	r3, r3, #20
 8002c1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c20:	430b      	orrs	r3, r1
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	6892      	ldr	r2, [r2, #8]
 8002c26:	4619      	mov	r1, r3
 8002c28:	f7ff fb22 	bl	8002270 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f280 80c6 	bge.w	8002dc2 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a67      	ldr	r2, [pc, #412]	; (8002dd8 <HAL_ADC_ConfigChannel+0x678>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d004      	beq.n	8002c4a <HAL_ADC_ConfigChannel+0x4ea>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a65      	ldr	r2, [pc, #404]	; (8002ddc <HAL_ADC_ConfigChannel+0x67c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d101      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x4ee>
 8002c4a:	4b65      	ldr	r3, [pc, #404]	; (8002de0 <HAL_ADC_ConfigChannel+0x680>)
 8002c4c:	e000      	b.n	8002c50 <HAL_ADC_ConfigChannel+0x4f0>
 8002c4e:	4b65      	ldr	r3, [pc, #404]	; (8002de4 <HAL_ADC_ConfigChannel+0x684>)
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff fa7f 	bl	8002154 <LL_ADC_GetCommonPathInternalCh>
 8002c56:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a5e      	ldr	r2, [pc, #376]	; (8002dd8 <HAL_ADC_ConfigChannel+0x678>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d004      	beq.n	8002c6c <HAL_ADC_ConfigChannel+0x50c>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a5d      	ldr	r2, [pc, #372]	; (8002ddc <HAL_ADC_ConfigChannel+0x67c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d10e      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x52a>
 8002c6c:	485a      	ldr	r0, [pc, #360]	; (8002dd8 <HAL_ADC_ConfigChannel+0x678>)
 8002c6e:	f7ff fb9d 	bl	80023ac <LL_ADC_IsEnabled>
 8002c72:	4604      	mov	r4, r0
 8002c74:	4859      	ldr	r0, [pc, #356]	; (8002ddc <HAL_ADC_ConfigChannel+0x67c>)
 8002c76:	f7ff fb99 	bl	80023ac <LL_ADC_IsEnabled>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	4323      	orrs	r3, r4
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	bf0c      	ite	eq
 8002c82:	2301      	moveq	r3, #1
 8002c84:	2300      	movne	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	e008      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x53c>
 8002c8a:	4857      	ldr	r0, [pc, #348]	; (8002de8 <HAL_ADC_ConfigChannel+0x688>)
 8002c8c:	f7ff fb8e 	bl	80023ac <LL_ADC_IsEnabled>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	bf0c      	ite	eq
 8002c96:	2301      	moveq	r3, #1
 8002c98:	2300      	movne	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d07d      	beq.n	8002d9c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a51      	ldr	r2, [pc, #324]	; (8002dec <HAL_ADC_ConfigChannel+0x68c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d130      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x5ac>
 8002caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d12b      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a4b      	ldr	r2, [pc, #300]	; (8002de8 <HAL_ADC_ConfigChannel+0x688>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	f040 8081 	bne.w	8002dc2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a44      	ldr	r2, [pc, #272]	; (8002dd8 <HAL_ADC_ConfigChannel+0x678>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d004      	beq.n	8002cd4 <HAL_ADC_ConfigChannel+0x574>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a43      	ldr	r2, [pc, #268]	; (8002ddc <HAL_ADC_ConfigChannel+0x67c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d101      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x578>
 8002cd4:	4a42      	ldr	r2, [pc, #264]	; (8002de0 <HAL_ADC_ConfigChannel+0x680>)
 8002cd6:	e000      	b.n	8002cda <HAL_ADC_ConfigChannel+0x57a>
 8002cd8:	4a42      	ldr	r2, [pc, #264]	; (8002de4 <HAL_ADC_ConfigChannel+0x684>)
 8002cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4610      	mov	r0, r2
 8002ce4:	f7ff fa23 	bl	800212e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ce8:	4b41      	ldr	r3, [pc, #260]	; (8002df0 <HAL_ADC_ConfigChannel+0x690>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	099b      	lsrs	r3, r3, #6
 8002cee:	4a41      	ldr	r2, [pc, #260]	; (8002df4 <HAL_ADC_ConfigChannel+0x694>)
 8002cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf4:	099b      	lsrs	r3, r3, #6
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002cfc:	e002      	b.n	8002d04 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	3b01      	subs	r3, #1
 8002d02:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f9      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d0a:	e05a      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a39      	ldr	r2, [pc, #228]	; (8002df8 <HAL_ADC_ConfigChannel+0x698>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d11e      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x5f4>
 8002d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d119      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a30      	ldr	r2, [pc, #192]	; (8002de8 <HAL_ADC_ConfigChannel+0x688>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d14b      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a2a      	ldr	r2, [pc, #168]	; (8002dd8 <HAL_ADC_ConfigChannel+0x678>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d004      	beq.n	8002d3e <HAL_ADC_ConfigChannel+0x5de>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a28      	ldr	r2, [pc, #160]	; (8002ddc <HAL_ADC_ConfigChannel+0x67c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d101      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x5e2>
 8002d3e:	4a28      	ldr	r2, [pc, #160]	; (8002de0 <HAL_ADC_ConfigChannel+0x680>)
 8002d40:	e000      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x5e4>
 8002d42:	4a28      	ldr	r2, [pc, #160]	; (8002de4 <HAL_ADC_ConfigChannel+0x684>)
 8002d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	f7ff f9ee 	bl	800212e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d52:	e036      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a28      	ldr	r2, [pc, #160]	; (8002dfc <HAL_ADC_ConfigChannel+0x69c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d131      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x662>
 8002d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d12c      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a1e      	ldr	r2, [pc, #120]	; (8002de8 <HAL_ADC_ConfigChannel+0x688>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d127      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a18      	ldr	r2, [pc, #96]	; (8002dd8 <HAL_ADC_ConfigChannel+0x678>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d004      	beq.n	8002d86 <HAL_ADC_ConfigChannel+0x626>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a16      	ldr	r2, [pc, #88]	; (8002ddc <HAL_ADC_ConfigChannel+0x67c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d101      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x62a>
 8002d86:	4a16      	ldr	r2, [pc, #88]	; (8002de0 <HAL_ADC_ConfigChannel+0x680>)
 8002d88:	e000      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x62c>
 8002d8a:	4a16      	ldr	r2, [pc, #88]	; (8002de4 <HAL_ADC_ConfigChannel+0x684>)
 8002d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d92:	4619      	mov	r1, r3
 8002d94:	4610      	mov	r0, r2
 8002d96:	f7ff f9ca 	bl	800212e <LL_ADC_SetCommonPathInternalCh>
 8002d9a:	e012      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da0:	f043 0220 	orr.w	r2, r3, #32
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002dae:	e008      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db4:	f043 0220 	orr.w	r2, r3, #32
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002dca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3784      	adds	r7, #132	; 0x84
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd90      	pop	{r4, r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40022000 	.word	0x40022000
 8002ddc:	40022100 	.word	0x40022100
 8002de0:	40022300 	.word	0x40022300
 8002de4:	58026300 	.word	0x58026300
 8002de8:	58026000 	.word	0x58026000
 8002dec:	cb840000 	.word	0xcb840000
 8002df0:	24000000 	.word	0x24000000
 8002df4:	053e2d63 	.word	0x053e2d63
 8002df8:	c7520000 	.word	0xc7520000
 8002dfc:	cfb80000 	.word	0xcfb80000

08002e00 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a79      	ldr	r2, [pc, #484]	; (8002ff4 <ADC_ConfigureBoostMode+0x1f4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d004      	beq.n	8002e1c <ADC_ConfigureBoostMode+0x1c>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a78      	ldr	r2, [pc, #480]	; (8002ff8 <ADC_ConfigureBoostMode+0x1f8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d109      	bne.n	8002e30 <ADC_ConfigureBoostMode+0x30>
 8002e1c:	4b77      	ldr	r3, [pc, #476]	; (8002ffc <ADC_ConfigureBoostMode+0x1fc>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bf14      	ite	ne
 8002e28:	2301      	movne	r3, #1
 8002e2a:	2300      	moveq	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	e008      	b.n	8002e42 <ADC_ConfigureBoostMode+0x42>
 8002e30:	4b73      	ldr	r3, [pc, #460]	; (8003000 <ADC_ConfigureBoostMode+0x200>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bf14      	ite	ne
 8002e3c:	2301      	movne	r3, #1
 8002e3e:	2300      	moveq	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d01c      	beq.n	8002e80 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002e46:	f001 fdc1 	bl	80049cc <HAL_RCC_GetHCLKFreq>
 8002e4a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e54:	d010      	beq.n	8002e78 <ADC_ConfigureBoostMode+0x78>
 8002e56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e5a:	d871      	bhi.n	8002f40 <ADC_ConfigureBoostMode+0x140>
 8002e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e60:	d002      	beq.n	8002e68 <ADC_ConfigureBoostMode+0x68>
 8002e62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e66:	d16b      	bne.n	8002f40 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	0c1b      	lsrs	r3, r3, #16
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e74:	60fb      	str	r3, [r7, #12]
        break;
 8002e76:	e066      	b.n	8002f46 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	089b      	lsrs	r3, r3, #2
 8002e7c:	60fb      	str	r3, [r7, #12]
        break;
 8002e7e:	e062      	b.n	8002f46 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002e80:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002e84:	f002 fd3e 	bl	8005904 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e88:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002e92:	d051      	beq.n	8002f38 <ADC_ConfigureBoostMode+0x138>
 8002e94:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002e98:	d854      	bhi.n	8002f44 <ADC_ConfigureBoostMode+0x144>
 8002e9a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002e9e:	d047      	beq.n	8002f30 <ADC_ConfigureBoostMode+0x130>
 8002ea0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002ea4:	d84e      	bhi.n	8002f44 <ADC_ConfigureBoostMode+0x144>
 8002ea6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002eaa:	d03d      	beq.n	8002f28 <ADC_ConfigureBoostMode+0x128>
 8002eac:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002eb0:	d848      	bhi.n	8002f44 <ADC_ConfigureBoostMode+0x144>
 8002eb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eb6:	d033      	beq.n	8002f20 <ADC_ConfigureBoostMode+0x120>
 8002eb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ebc:	d842      	bhi.n	8002f44 <ADC_ConfigureBoostMode+0x144>
 8002ebe:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002ec2:	d029      	beq.n	8002f18 <ADC_ConfigureBoostMode+0x118>
 8002ec4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002ec8:	d83c      	bhi.n	8002f44 <ADC_ConfigureBoostMode+0x144>
 8002eca:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002ece:	d01a      	beq.n	8002f06 <ADC_ConfigureBoostMode+0x106>
 8002ed0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002ed4:	d836      	bhi.n	8002f44 <ADC_ConfigureBoostMode+0x144>
 8002ed6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002eda:	d014      	beq.n	8002f06 <ADC_ConfigureBoostMode+0x106>
 8002edc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002ee0:	d830      	bhi.n	8002f44 <ADC_ConfigureBoostMode+0x144>
 8002ee2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ee6:	d00e      	beq.n	8002f06 <ADC_ConfigureBoostMode+0x106>
 8002ee8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eec:	d82a      	bhi.n	8002f44 <ADC_ConfigureBoostMode+0x144>
 8002eee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ef2:	d008      	beq.n	8002f06 <ADC_ConfigureBoostMode+0x106>
 8002ef4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ef8:	d824      	bhi.n	8002f44 <ADC_ConfigureBoostMode+0x144>
 8002efa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002efe:	d002      	beq.n	8002f06 <ADC_ConfigureBoostMode+0x106>
 8002f00:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f04:	d11e      	bne.n	8002f44 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	0c9b      	lsrs	r3, r3, #18
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f14:	60fb      	str	r3, [r7, #12]
        break;
 8002f16:	e016      	b.n	8002f46 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	091b      	lsrs	r3, r3, #4
 8002f1c:	60fb      	str	r3, [r7, #12]
        break;
 8002f1e:	e012      	b.n	8002f46 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	60fb      	str	r3, [r7, #12]
        break;
 8002f26:	e00e      	b.n	8002f46 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	099b      	lsrs	r3, r3, #6
 8002f2c:	60fb      	str	r3, [r7, #12]
        break;
 8002f2e:	e00a      	b.n	8002f46 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	09db      	lsrs	r3, r3, #7
 8002f34:	60fb      	str	r3, [r7, #12]
        break;
 8002f36:	e006      	b.n	8002f46 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	0a1b      	lsrs	r3, r3, #8
 8002f3c:	60fb      	str	r3, [r7, #12]
        break;
 8002f3e:	e002      	b.n	8002f46 <ADC_ConfigureBoostMode+0x146>
        break;
 8002f40:	bf00      	nop
 8002f42:	e000      	b.n	8002f46 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8002f44:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002f46:	f7ff f8bd 	bl	80020c4 <HAL_GetREVID>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d815      	bhi.n	8002f80 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4a2b      	ldr	r2, [pc, #172]	; (8003004 <ADC_ConfigureBoostMode+0x204>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d908      	bls.n	8002f6e <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f6a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002f6c:	e03e      	b.n	8002fec <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f7c:	609a      	str	r2, [r3, #8]
}
 8002f7e:	e035      	b.n	8002fec <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	085b      	lsrs	r3, r3, #1
 8002f84:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4a1f      	ldr	r2, [pc, #124]	; (8003008 <ADC_ConfigureBoostMode+0x208>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d808      	bhi.n	8002fa0 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002f9c:	609a      	str	r2, [r3, #8]
}
 8002f9e:	e025      	b.n	8002fec <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4a1a      	ldr	r2, [pc, #104]	; (800300c <ADC_ConfigureBoostMode+0x20c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d80a      	bhi.n	8002fbe <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fba:	609a      	str	r2, [r3, #8]
}
 8002fbc:	e016      	b.n	8002fec <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	4a13      	ldr	r2, [pc, #76]	; (8003010 <ADC_ConfigureBoostMode+0x210>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d80a      	bhi.n	8002fdc <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd8:	609a      	str	r2, [r3, #8]
}
 8002fda:	e007      	b.n	8002fec <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002fea:	609a      	str	r2, [r3, #8]
}
 8002fec:	bf00      	nop
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40022000 	.word	0x40022000
 8002ff8:	40022100 	.word	0x40022100
 8002ffc:	40022300 	.word	0x40022300
 8003000:	58026300 	.word	0x58026300
 8003004:	01312d00 	.word	0x01312d00
 8003008:	005f5e10 	.word	0x005f5e10
 800300c:	00bebc20 	.word	0x00bebc20
 8003010:	017d7840 	.word	0x017d7840

08003014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003024:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <__NVIC_SetPriorityGrouping+0x40>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003030:	4013      	ands	r3, r2
 8003032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800303c:	4b06      	ldr	r3, [pc, #24]	; (8003058 <__NVIC_SetPriorityGrouping+0x44>)
 800303e:	4313      	orrs	r3, r2
 8003040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003042:	4a04      	ldr	r2, [pc, #16]	; (8003054 <__NVIC_SetPriorityGrouping+0x40>)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	60d3      	str	r3, [r2, #12]
}
 8003048:	bf00      	nop
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	e000ed00 	.word	0xe000ed00
 8003058:	05fa0000 	.word	0x05fa0000

0800305c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003060:	4b04      	ldr	r3, [pc, #16]	; (8003074 <__NVIC_GetPriorityGrouping+0x18>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	0a1b      	lsrs	r3, r3, #8
 8003066:	f003 0307 	and.w	r3, r3, #7
}
 800306a:	4618      	mov	r0, r3
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	6039      	str	r1, [r7, #0]
 8003082:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003084:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003088:	2b00      	cmp	r3, #0
 800308a:	db0a      	blt.n	80030a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	b2da      	uxtb	r2, r3
 8003090:	490c      	ldr	r1, [pc, #48]	; (80030c4 <__NVIC_SetPriority+0x4c>)
 8003092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003096:	0112      	lsls	r2, r2, #4
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	440b      	add	r3, r1
 800309c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030a0:	e00a      	b.n	80030b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	4908      	ldr	r1, [pc, #32]	; (80030c8 <__NVIC_SetPriority+0x50>)
 80030a8:	88fb      	ldrh	r3, [r7, #6]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	3b04      	subs	r3, #4
 80030b0:	0112      	lsls	r2, r2, #4
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	440b      	add	r3, r1
 80030b6:	761a      	strb	r2, [r3, #24]
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	e000e100 	.word	0xe000e100
 80030c8:	e000ed00 	.word	0xe000ed00

080030cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b089      	sub	sp, #36	; 0x24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f1c3 0307 	rsb	r3, r3, #7
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	bf28      	it	cs
 80030ea:	2304      	movcs	r3, #4
 80030ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	3304      	adds	r3, #4
 80030f2:	2b06      	cmp	r3, #6
 80030f4:	d902      	bls.n	80030fc <NVIC_EncodePriority+0x30>
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3b03      	subs	r3, #3
 80030fa:	e000      	b.n	80030fe <NVIC_EncodePriority+0x32>
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003100:	f04f 32ff 	mov.w	r2, #4294967295
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	43da      	mvns	r2, r3
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	401a      	ands	r2, r3
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003114:	f04f 31ff 	mov.w	r1, #4294967295
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	fa01 f303 	lsl.w	r3, r1, r3
 800311e:	43d9      	mvns	r1, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003124:	4313      	orrs	r3, r2
         );
}
 8003126:	4618      	mov	r0, r3
 8003128:	3724      	adds	r7, #36	; 0x24
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
	...

08003134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3b01      	subs	r3, #1
 8003140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003144:	d301      	bcc.n	800314a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003146:	2301      	movs	r3, #1
 8003148:	e00f      	b.n	800316a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800314a:	4a0a      	ldr	r2, [pc, #40]	; (8003174 <SysTick_Config+0x40>)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3b01      	subs	r3, #1
 8003150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003152:	210f      	movs	r1, #15
 8003154:	f04f 30ff 	mov.w	r0, #4294967295
 8003158:	f7ff ff8e 	bl	8003078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800315c:	4b05      	ldr	r3, [pc, #20]	; (8003174 <SysTick_Config+0x40>)
 800315e:	2200      	movs	r2, #0
 8003160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003162:	4b04      	ldr	r3, [pc, #16]	; (8003174 <SysTick_Config+0x40>)
 8003164:	2207      	movs	r2, #7
 8003166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	e000e010 	.word	0xe000e010

08003178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff ff47 	bl	8003014 <__NVIC_SetPriorityGrouping>
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b086      	sub	sp, #24
 8003192:	af00      	add	r7, sp, #0
 8003194:	4603      	mov	r3, r0
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607a      	str	r2, [r7, #4]
 800319a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800319c:	f7ff ff5e 	bl	800305c <__NVIC_GetPriorityGrouping>
 80031a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	6978      	ldr	r0, [r7, #20]
 80031a8:	f7ff ff90 	bl	80030cc <NVIC_EncodePriority>
 80031ac:	4602      	mov	r2, r0
 80031ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031b2:	4611      	mov	r1, r2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff ff5f 	bl	8003078 <__NVIC_SetPriority>
}
 80031ba:	bf00      	nop
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff ffb2 	bl	8003134 <SysTick_Config>
 80031d0:	4603      	mov	r3, r0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031dc:	b480      	push	{r7}
 80031de:	b089      	sub	sp, #36	; 0x24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80031ea:	4b89      	ldr	r3, [pc, #548]	; (8003410 <HAL_GPIO_Init+0x234>)
 80031ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80031ee:	e194      	b.n	800351a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	2101      	movs	r1, #1
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	fa01 f303 	lsl.w	r3, r1, r3
 80031fc:	4013      	ands	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 8186 	beq.w	8003514 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 0303 	and.w	r3, r3, #3
 8003210:	2b01      	cmp	r3, #1
 8003212:	d005      	beq.n	8003220 <HAL_GPIO_Init+0x44>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d130      	bne.n	8003282 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	2203      	movs	r2, #3
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	68da      	ldr	r2, [r3, #12]
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4313      	orrs	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003256:	2201      	movs	r2, #1
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43db      	mvns	r3, r3
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4013      	ands	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	091b      	lsrs	r3, r3, #4
 800326c:	f003 0201 	and.w	r2, r3, #1
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4313      	orrs	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	2b03      	cmp	r3, #3
 800328c:	d017      	beq.n	80032be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	2203      	movs	r2, #3
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43db      	mvns	r3, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4013      	ands	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d123      	bne.n	8003312 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	08da      	lsrs	r2, r3, #3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3208      	adds	r2, #8
 80032d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	220f      	movs	r2, #15
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	43db      	mvns	r3, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4013      	ands	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	691a      	ldr	r2, [r3, #16]
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4313      	orrs	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	08da      	lsrs	r2, r3, #3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3208      	adds	r2, #8
 800330c:	69b9      	ldr	r1, [r7, #24]
 800330e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	2203      	movs	r2, #3
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	43db      	mvns	r3, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4013      	ands	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f003 0203 	and.w	r2, r3, #3
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 80e0 	beq.w	8003514 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003354:	4b2f      	ldr	r3, [pc, #188]	; (8003414 <HAL_GPIO_Init+0x238>)
 8003356:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800335a:	4a2e      	ldr	r2, [pc, #184]	; (8003414 <HAL_GPIO_Init+0x238>)
 800335c:	f043 0302 	orr.w	r3, r3, #2
 8003360:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003364:	4b2b      	ldr	r3, [pc, #172]	; (8003414 <HAL_GPIO_Init+0x238>)
 8003366:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003372:	4a29      	ldr	r2, [pc, #164]	; (8003418 <HAL_GPIO_Init+0x23c>)
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	089b      	lsrs	r3, r3, #2
 8003378:	3302      	adds	r3, #2
 800337a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800337e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	220f      	movs	r2, #15
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	43db      	mvns	r3, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4013      	ands	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a20      	ldr	r2, [pc, #128]	; (800341c <HAL_GPIO_Init+0x240>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d052      	beq.n	8003444 <HAL_GPIO_Init+0x268>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a1f      	ldr	r2, [pc, #124]	; (8003420 <HAL_GPIO_Init+0x244>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d031      	beq.n	800340a <HAL_GPIO_Init+0x22e>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a1e      	ldr	r2, [pc, #120]	; (8003424 <HAL_GPIO_Init+0x248>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d02b      	beq.n	8003406 <HAL_GPIO_Init+0x22a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a1d      	ldr	r2, [pc, #116]	; (8003428 <HAL_GPIO_Init+0x24c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d025      	beq.n	8003402 <HAL_GPIO_Init+0x226>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a1c      	ldr	r2, [pc, #112]	; (800342c <HAL_GPIO_Init+0x250>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d01f      	beq.n	80033fe <HAL_GPIO_Init+0x222>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a1b      	ldr	r2, [pc, #108]	; (8003430 <HAL_GPIO_Init+0x254>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d019      	beq.n	80033fa <HAL_GPIO_Init+0x21e>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a1a      	ldr	r2, [pc, #104]	; (8003434 <HAL_GPIO_Init+0x258>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d013      	beq.n	80033f6 <HAL_GPIO_Init+0x21a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a19      	ldr	r2, [pc, #100]	; (8003438 <HAL_GPIO_Init+0x25c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d00d      	beq.n	80033f2 <HAL_GPIO_Init+0x216>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a18      	ldr	r2, [pc, #96]	; (800343c <HAL_GPIO_Init+0x260>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d007      	beq.n	80033ee <HAL_GPIO_Init+0x212>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a17      	ldr	r2, [pc, #92]	; (8003440 <HAL_GPIO_Init+0x264>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d101      	bne.n	80033ea <HAL_GPIO_Init+0x20e>
 80033e6:	2309      	movs	r3, #9
 80033e8:	e02d      	b.n	8003446 <HAL_GPIO_Init+0x26a>
 80033ea:	230a      	movs	r3, #10
 80033ec:	e02b      	b.n	8003446 <HAL_GPIO_Init+0x26a>
 80033ee:	2308      	movs	r3, #8
 80033f0:	e029      	b.n	8003446 <HAL_GPIO_Init+0x26a>
 80033f2:	2307      	movs	r3, #7
 80033f4:	e027      	b.n	8003446 <HAL_GPIO_Init+0x26a>
 80033f6:	2306      	movs	r3, #6
 80033f8:	e025      	b.n	8003446 <HAL_GPIO_Init+0x26a>
 80033fa:	2305      	movs	r3, #5
 80033fc:	e023      	b.n	8003446 <HAL_GPIO_Init+0x26a>
 80033fe:	2304      	movs	r3, #4
 8003400:	e021      	b.n	8003446 <HAL_GPIO_Init+0x26a>
 8003402:	2303      	movs	r3, #3
 8003404:	e01f      	b.n	8003446 <HAL_GPIO_Init+0x26a>
 8003406:	2302      	movs	r3, #2
 8003408:	e01d      	b.n	8003446 <HAL_GPIO_Init+0x26a>
 800340a:	2301      	movs	r3, #1
 800340c:	e01b      	b.n	8003446 <HAL_GPIO_Init+0x26a>
 800340e:	bf00      	nop
 8003410:	58000080 	.word	0x58000080
 8003414:	58024400 	.word	0x58024400
 8003418:	58000400 	.word	0x58000400
 800341c:	58020000 	.word	0x58020000
 8003420:	58020400 	.word	0x58020400
 8003424:	58020800 	.word	0x58020800
 8003428:	58020c00 	.word	0x58020c00
 800342c:	58021000 	.word	0x58021000
 8003430:	58021400 	.word	0x58021400
 8003434:	58021800 	.word	0x58021800
 8003438:	58021c00 	.word	0x58021c00
 800343c:	58022000 	.word	0x58022000
 8003440:	58022400 	.word	0x58022400
 8003444:	2300      	movs	r3, #0
 8003446:	69fa      	ldr	r2, [r7, #28]
 8003448:	f002 0203 	and.w	r2, r2, #3
 800344c:	0092      	lsls	r2, r2, #2
 800344e:	4093      	lsls	r3, r2
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003456:	4938      	ldr	r1, [pc, #224]	; (8003538 <HAL_GPIO_Init+0x35c>)
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	089b      	lsrs	r3, r3, #2
 800345c:	3302      	adds	r3, #2
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	43db      	mvns	r3, r3
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	4013      	ands	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4313      	orrs	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800348a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	43db      	mvns	r3, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4013      	ands	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80034b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	43db      	mvns	r3, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	43db      	mvns	r3, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4013      	ands	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	3301      	adds	r3, #1
 8003518:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	fa22 f303 	lsr.w	r3, r2, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	f47f ae63 	bne.w	80031f0 <HAL_GPIO_Init+0x14>
  }
}
 800352a:	bf00      	nop
 800352c:	bf00      	nop
 800352e:	3724      	adds	r7, #36	; 0x24
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	58000400 	.word	0x58000400

0800353c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	460b      	mov	r3, r1
 8003546:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691a      	ldr	r2, [r3, #16]
 800354c:	887b      	ldrh	r3, [r7, #2]
 800354e:	4013      	ands	r3, r2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003554:	2301      	movs	r3, #1
 8003556:	73fb      	strb	r3, [r7, #15]
 8003558:	e001      	b.n	800355e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800355a:	2300      	movs	r3, #0
 800355c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800355e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	460b      	mov	r3, r1
 8003576:	807b      	strh	r3, [r7, #2]
 8003578:	4613      	mov	r3, r2
 800357a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800357c:	787b      	ldrb	r3, [r7, #1]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003582:	887a      	ldrh	r2, [r7, #2]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003588:	e003      	b.n	8003592 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800358a:	887b      	ldrh	r3, [r7, #2]
 800358c:	041a      	lsls	r2, r3, #16
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	619a      	str	r2, [r3, #24]
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
	...

080035a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e07f      	b.n	80036b2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d106      	bne.n	80035cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fe f998 	bl	80018fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2224      	movs	r2, #36	; 0x24
 80035d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0201 	bic.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003600:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d107      	bne.n	800361a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003616:	609a      	str	r2, [r3, #8]
 8003618:	e006      	b.n	8003628 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003626:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d104      	bne.n	800363a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003638:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6859      	ldr	r1, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	4b1d      	ldr	r3, [pc, #116]	; (80036bc <HAL_I2C_Init+0x11c>)
 8003646:	430b      	orrs	r3, r1
 8003648:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003658:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691a      	ldr	r2, [r3, #16]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69d9      	ldr	r1, [r3, #28]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1a      	ldr	r2, [r3, #32]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0201 	orr.w	r2, r2, #1
 8003692:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2220      	movs	r2, #32
 800369e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	02008000 	.word	0x02008000

080036c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b20      	cmp	r3, #32
 80036d4:	d138      	bne.n	8003748 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e032      	b.n	800374a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2224      	movs	r2, #36	; 0x24
 80036f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0201 	bic.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003712:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6819      	ldr	r1, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0201 	orr.w	r2, r2, #1
 8003732:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	e000      	b.n	800374a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003748:	2302      	movs	r3, #2
  }
}
 800374a:	4618      	mov	r0, r3
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003756:	b480      	push	{r7}
 8003758:	b085      	sub	sp, #20
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b20      	cmp	r3, #32
 800376a:	d139      	bne.n	80037e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003776:	2302      	movs	r3, #2
 8003778:	e033      	b.n	80037e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2224      	movs	r2, #36	; 0x24
 8003786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0201 	bic.w	r2, r2, #1
 8003798:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	021b      	lsls	r3, r3, #8
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0201 	orr.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	e000      	b.n	80037e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037e0:	2302      	movs	r3, #2
  }
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037f0:	b08f      	sub	sp, #60	; 0x3c
 80037f2:	af0a      	add	r7, sp, #40	; 0x28
 80037f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e116      	b.n	8003a2e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fe fa10 	bl	8001c40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2203      	movs	r2, #3
 8003824:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003830:	2b00      	cmp	r3, #0
 8003832:	d102      	bne.n	800383a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f005 fdda 	bl	80093f8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	603b      	str	r3, [r7, #0]
 800384a:	687e      	ldr	r6, [r7, #4]
 800384c:	466d      	mov	r5, sp
 800384e:	f106 0410 	add.w	r4, r6, #16
 8003852:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003854:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003858:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800385a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800385e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003862:	1d33      	adds	r3, r6, #4
 8003864:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003866:	6838      	ldr	r0, [r7, #0]
 8003868:	f005 fd58 	bl	800931c <USB_CoreInit>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d005      	beq.n	800387e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2202      	movs	r2, #2
 8003876:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e0d7      	b.n	8003a2e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2100      	movs	r1, #0
 8003884:	4618      	mov	r0, r3
 8003886:	f005 fdc8 	bl	800941a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800388a:	2300      	movs	r3, #0
 800388c:	73fb      	strb	r3, [r7, #15]
 800388e:	e04a      	b.n	8003926 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003890:	7bfa      	ldrb	r2, [r7, #15]
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	4613      	mov	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	1a9b      	subs	r3, r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	333d      	adds	r3, #61	; 0x3d
 80038a0:	2201      	movs	r2, #1
 80038a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038a4:	7bfa      	ldrb	r2, [r7, #15]
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	4613      	mov	r3, r2
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	1a9b      	subs	r3, r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	333c      	adds	r3, #60	; 0x3c
 80038b4:	7bfa      	ldrb	r2, [r7, #15]
 80038b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038b8:	7bfa      	ldrb	r2, [r7, #15]
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
 80038bc:	b298      	uxth	r0, r3
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	1a9b      	subs	r3, r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	3342      	adds	r3, #66	; 0x42
 80038cc:	4602      	mov	r2, r0
 80038ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038d0:	7bfa      	ldrb	r2, [r7, #15]
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	4613      	mov	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	1a9b      	subs	r3, r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	333f      	adds	r3, #63	; 0x3f
 80038e0:	2200      	movs	r2, #0
 80038e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038e4:	7bfa      	ldrb	r2, [r7, #15]
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	4613      	mov	r3, r2
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	1a9b      	subs	r3, r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	3344      	adds	r3, #68	; 0x44
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038f8:	7bfa      	ldrb	r2, [r7, #15]
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	4613      	mov	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	1a9b      	subs	r3, r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	3348      	adds	r3, #72	; 0x48
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800390c:	7bfa      	ldrb	r2, [r7, #15]
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	4613      	mov	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	1a9b      	subs	r3, r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	3350      	adds	r3, #80	; 0x50
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003920:	7bfb      	ldrb	r3, [r7, #15]
 8003922:	3301      	adds	r3, #1
 8003924:	73fb      	strb	r3, [r7, #15]
 8003926:	7bfa      	ldrb	r2, [r7, #15]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	429a      	cmp	r2, r3
 800392e:	d3af      	bcc.n	8003890 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003930:	2300      	movs	r3, #0
 8003932:	73fb      	strb	r3, [r7, #15]
 8003934:	e044      	b.n	80039c0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003936:	7bfa      	ldrb	r2, [r7, #15]
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	4613      	mov	r3, r2
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	1a9b      	subs	r3, r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	440b      	add	r3, r1
 8003944:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003948:	2200      	movs	r2, #0
 800394a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800394c:	7bfa      	ldrb	r2, [r7, #15]
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	4613      	mov	r3, r2
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	1a9b      	subs	r3, r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800395e:	7bfa      	ldrb	r2, [r7, #15]
 8003960:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003962:	7bfa      	ldrb	r2, [r7, #15]
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	1a9b      	subs	r3, r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	440b      	add	r3, r1
 8003970:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003974:	2200      	movs	r2, #0
 8003976:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003978:	7bfa      	ldrb	r2, [r7, #15]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	1a9b      	subs	r3, r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800398a:	2200      	movs	r2, #0
 800398c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800398e:	7bfa      	ldrb	r2, [r7, #15]
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	4613      	mov	r3, r2
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	1a9b      	subs	r3, r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	440b      	add	r3, r1
 800399c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039a4:	7bfa      	ldrb	r2, [r7, #15]
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	4613      	mov	r3, r2
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	1a9b      	subs	r3, r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	3301      	adds	r3, #1
 80039be:	73fb      	strb	r3, [r7, #15]
 80039c0:	7bfa      	ldrb	r2, [r7, #15]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d3b5      	bcc.n	8003936 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	603b      	str	r3, [r7, #0]
 80039d0:	687e      	ldr	r6, [r7, #4]
 80039d2:	466d      	mov	r5, sp
 80039d4:	f106 0410 	add.w	r4, r6, #16
 80039d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80039e8:	1d33      	adds	r3, r6, #4
 80039ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039ec:	6838      	ldr	r0, [r7, #0]
 80039ee:	f005 fd61 	bl	80094b4 <USB_DevInit>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d005      	beq.n	8003a04 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e014      	b.n	8003a2e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d102      	bne.n	8003a22 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f80b 	bl	8003a38 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f005 ff1b 	bl	8009862 <USB_DevDisconnect>

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003a38 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a66:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <HAL_PCDEx_ActivateLPM+0x44>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	10000003 	.word	0x10000003

08003a80 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003a88:	4b19      	ldr	r3, [pc, #100]	; (8003af0 <HAL_PWREx_ConfigSupply+0x70>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d00a      	beq.n	8003aaa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003a94:	4b16      	ldr	r3, [pc, #88]	; (8003af0 <HAL_PWREx_ConfigSupply+0x70>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d001      	beq.n	8003aa6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e01f      	b.n	8003ae6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	e01d      	b.n	8003ae6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003aaa:	4b11      	ldr	r3, [pc, #68]	; (8003af0 <HAL_PWREx_ConfigSupply+0x70>)
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f023 0207 	bic.w	r2, r3, #7
 8003ab2:	490f      	ldr	r1, [pc, #60]	; (8003af0 <HAL_PWREx_ConfigSupply+0x70>)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003aba:	f7fe fad3 	bl	8002064 <HAL_GetTick>
 8003abe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003ac0:	e009      	b.n	8003ad6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003ac2:	f7fe facf 	bl	8002064 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ad0:	d901      	bls.n	8003ad6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e007      	b.n	8003ae6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003ad6:	4b06      	ldr	r3, [pc, #24]	; (8003af0 <HAL_PWREx_ConfigSupply+0x70>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae2:	d1ee      	bne.n	8003ac2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	58024800 	.word	0x58024800

08003af4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003af8:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	4a04      	ldr	r2, [pc, #16]	; (8003b10 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b02:	60d3      	str	r3, [r2, #12]
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	58024800 	.word	0x58024800

08003b14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b08c      	sub	sp, #48	; 0x30
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d102      	bne.n	8003b28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	f000 bc1c 	b.w	8004360 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 8087 	beq.w	8003c44 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b36:	4b9e      	ldr	r3, [pc, #632]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b40:	4b9b      	ldr	r3, [pc, #620]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b44:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b48:	2b10      	cmp	r3, #16
 8003b4a:	d007      	beq.n	8003b5c <HAL_RCC_OscConfig+0x48>
 8003b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4e:	2b18      	cmp	r3, #24
 8003b50:	d110      	bne.n	8003b74 <HAL_RCC_OscConfig+0x60>
 8003b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b54:	f003 0303 	and.w	r3, r3, #3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d10b      	bne.n	8003b74 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b5c:	4b94      	ldr	r3, [pc, #592]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d06c      	beq.n	8003c42 <HAL_RCC_OscConfig+0x12e>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d168      	bne.n	8003c42 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e3f5      	b.n	8004360 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b7c:	d106      	bne.n	8003b8c <HAL_RCC_OscConfig+0x78>
 8003b7e:	4b8c      	ldr	r3, [pc, #560]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a8b      	ldr	r2, [pc, #556]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	e02e      	b.n	8003bea <HAL_RCC_OscConfig+0xd6>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10c      	bne.n	8003bae <HAL_RCC_OscConfig+0x9a>
 8003b94:	4b86      	ldr	r3, [pc, #536]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a85      	ldr	r2, [pc, #532]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	4b83      	ldr	r3, [pc, #524]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a82      	ldr	r2, [pc, #520]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003baa:	6013      	str	r3, [r2, #0]
 8003bac:	e01d      	b.n	8003bea <HAL_RCC_OscConfig+0xd6>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bb6:	d10c      	bne.n	8003bd2 <HAL_RCC_OscConfig+0xbe>
 8003bb8:	4b7d      	ldr	r3, [pc, #500]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a7c      	ldr	r2, [pc, #496]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003bbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bc2:	6013      	str	r3, [r2, #0]
 8003bc4:	4b7a      	ldr	r3, [pc, #488]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a79      	ldr	r2, [pc, #484]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bce:	6013      	str	r3, [r2, #0]
 8003bd0:	e00b      	b.n	8003bea <HAL_RCC_OscConfig+0xd6>
 8003bd2:	4b77      	ldr	r3, [pc, #476]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a76      	ldr	r2, [pc, #472]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	4b74      	ldr	r3, [pc, #464]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a73      	ldr	r2, [pc, #460]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003be4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003be8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d013      	beq.n	8003c1a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf2:	f7fe fa37 	bl	8002064 <HAL_GetTick>
 8003bf6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bfa:	f7fe fa33 	bl	8002064 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b64      	cmp	r3, #100	; 0x64
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e3a9      	b.n	8004360 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c0c:	4b68      	ldr	r3, [pc, #416]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0f0      	beq.n	8003bfa <HAL_RCC_OscConfig+0xe6>
 8003c18:	e014      	b.n	8003c44 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1a:	f7fe fa23 	bl	8002064 <HAL_GetTick>
 8003c1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c22:	f7fe fa1f 	bl	8002064 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b64      	cmp	r3, #100	; 0x64
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e395      	b.n	8004360 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c34:	4b5e      	ldr	r3, [pc, #376]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1f0      	bne.n	8003c22 <HAL_RCC_OscConfig+0x10e>
 8003c40:	e000      	b.n	8003c44 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c42:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 80ca 	beq.w	8003de6 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c52:	4b57      	ldr	r3, [pc, #348]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c5a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c5c:	4b54      	ldr	r3, [pc, #336]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c60:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d007      	beq.n	8003c78 <HAL_RCC_OscConfig+0x164>
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	2b18      	cmp	r3, #24
 8003c6c:	d156      	bne.n	8003d1c <HAL_RCC_OscConfig+0x208>
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	f003 0303 	and.w	r3, r3, #3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d151      	bne.n	8003d1c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c78:	4b4d      	ldr	r3, [pc, #308]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d005      	beq.n	8003c90 <HAL_RCC_OscConfig+0x17c>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e367      	b.n	8004360 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c90:	4b47      	ldr	r3, [pc, #284]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f023 0219 	bic.w	r2, r3, #25
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	4944      	ldr	r1, [pc, #272]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ca2:	f7fe f9df 	bl	8002064 <HAL_GetTick>
 8003ca6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003caa:	f7fe f9db 	bl	8002064 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e351      	b.n	8004360 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cbc:	4b3c      	ldr	r3, [pc, #240]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0f0      	beq.n	8003caa <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc8:	f7fe f9fc 	bl	80020c4 <HAL_GetREVID>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f241 0203 	movw	r2, #4099	; 0x1003
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d817      	bhi.n	8003d06 <HAL_RCC_OscConfig+0x1f2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	2b40      	cmp	r3, #64	; 0x40
 8003cdc:	d108      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x1dc>
 8003cde:	4b34      	ldr	r3, [pc, #208]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003ce6:	4a32      	ldr	r2, [pc, #200]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cec:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cee:	e07a      	b.n	8003de6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf0:	4b2f      	ldr	r3, [pc, #188]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	031b      	lsls	r3, r3, #12
 8003cfe:	492c      	ldr	r1, [pc, #176]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d04:	e06f      	b.n	8003de6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d06:	4b2a      	ldr	r3, [pc, #168]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	061b      	lsls	r3, r3, #24
 8003d14:	4926      	ldr	r1, [pc, #152]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d1a:	e064      	b.n	8003de6 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d047      	beq.n	8003db4 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d24:	4b22      	ldr	r3, [pc, #136]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f023 0219 	bic.w	r2, r3, #25
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	491f      	ldr	r1, [pc, #124]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d36:	f7fe f995 	bl	8002064 <HAL_GetTick>
 8003d3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d3e:	f7fe f991 	bl	8002064 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e307      	b.n	8004360 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d50:	4b17      	ldr	r3, [pc, #92]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d5c:	f7fe f9b2 	bl	80020c4 <HAL_GetREVID>
 8003d60:	4603      	mov	r3, r0
 8003d62:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d817      	bhi.n	8003d9a <HAL_RCC_OscConfig+0x286>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	2b40      	cmp	r3, #64	; 0x40
 8003d70:	d108      	bne.n	8003d84 <HAL_RCC_OscConfig+0x270>
 8003d72:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003d7a:	4a0d      	ldr	r2, [pc, #52]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d80:	6053      	str	r3, [r2, #4]
 8003d82:	e030      	b.n	8003de6 <HAL_RCC_OscConfig+0x2d2>
 8003d84:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	031b      	lsls	r3, r3, #12
 8003d92:	4907      	ldr	r1, [pc, #28]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	604b      	str	r3, [r1, #4]
 8003d98:	e025      	b.n	8003de6 <HAL_RCC_OscConfig+0x2d2>
 8003d9a:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	061b      	lsls	r3, r3, #24
 8003da8:	4901      	ldr	r1, [pc, #4]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	604b      	str	r3, [r1, #4]
 8003dae:	e01a      	b.n	8003de6 <HAL_RCC_OscConfig+0x2d2>
 8003db0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003db4:	4b9e      	ldr	r3, [pc, #632]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a9d      	ldr	r2, [pc, #628]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003dba:	f023 0301 	bic.w	r3, r3, #1
 8003dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc0:	f7fe f950 	bl	8002064 <HAL_GetTick>
 8003dc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dc8:	f7fe f94c 	bl	8002064 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e2c2      	b.n	8004360 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003dda:	4b95      	ldr	r3, [pc, #596]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0304 	and.w	r3, r3, #4
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f0      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 80a9 	beq.w	8003f46 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003df4:	4b8e      	ldr	r3, [pc, #568]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dfc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003dfe:	4b8c      	ldr	r3, [pc, #560]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e02:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d007      	beq.n	8003e1a <HAL_RCC_OscConfig+0x306>
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	2b18      	cmp	r3, #24
 8003e0e:	d13a      	bne.n	8003e86 <HAL_RCC_OscConfig+0x372>
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d135      	bne.n	8003e86 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e1a:	4b85      	ldr	r3, [pc, #532]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d005      	beq.n	8003e32 <HAL_RCC_OscConfig+0x31e>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	2b80      	cmp	r3, #128	; 0x80
 8003e2c:	d001      	beq.n	8003e32 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e296      	b.n	8004360 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e32:	f7fe f947 	bl	80020c4 <HAL_GetREVID>
 8003e36:	4603      	mov	r3, r0
 8003e38:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d817      	bhi.n	8003e70 <HAL_RCC_OscConfig+0x35c>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	2b20      	cmp	r3, #32
 8003e46:	d108      	bne.n	8003e5a <HAL_RCC_OscConfig+0x346>
 8003e48:	4b79      	ldr	r3, [pc, #484]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003e50:	4a77      	ldr	r2, [pc, #476]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003e52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e56:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e58:	e075      	b.n	8003f46 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e5a:	4b75      	ldr	r3, [pc, #468]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	069b      	lsls	r3, r3, #26
 8003e68:	4971      	ldr	r1, [pc, #452]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e6e:	e06a      	b.n	8003f46 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e70:	4b6f      	ldr	r3, [pc, #444]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	061b      	lsls	r3, r3, #24
 8003e7e:	496c      	ldr	r1, [pc, #432]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e84:	e05f      	b.n	8003f46 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d042      	beq.n	8003f14 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003e8e:	4b68      	ldr	r3, [pc, #416]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a67      	ldr	r2, [pc, #412]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9a:	f7fe f8e3 	bl	8002064 <HAL_GetTick>
 8003e9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003ea2:	f7fe f8df 	bl	8002064 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e255      	b.n	8004360 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003eb4:	4b5e      	ldr	r3, [pc, #376]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0f0      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ec0:	f7fe f900 	bl	80020c4 <HAL_GetREVID>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	f241 0203 	movw	r2, #4099	; 0x1003
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d817      	bhi.n	8003efe <HAL_RCC_OscConfig+0x3ea>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	2b20      	cmp	r3, #32
 8003ed4:	d108      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x3d4>
 8003ed6:	4b56      	ldr	r3, [pc, #344]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003ede:	4a54      	ldr	r2, [pc, #336]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003ee0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ee4:	6053      	str	r3, [r2, #4]
 8003ee6:	e02e      	b.n	8003f46 <HAL_RCC_OscConfig+0x432>
 8003ee8:	4b51      	ldr	r3, [pc, #324]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	069b      	lsls	r3, r3, #26
 8003ef6:	494e      	ldr	r1, [pc, #312]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	604b      	str	r3, [r1, #4]
 8003efc:	e023      	b.n	8003f46 <HAL_RCC_OscConfig+0x432>
 8003efe:	4b4c      	ldr	r3, [pc, #304]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	061b      	lsls	r3, r3, #24
 8003f0c:	4948      	ldr	r1, [pc, #288]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60cb      	str	r3, [r1, #12]
 8003f12:	e018      	b.n	8003f46 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003f14:	4b46      	ldr	r3, [pc, #280]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a45      	ldr	r2, [pc, #276]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003f1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f20:	f7fe f8a0 	bl	8002064 <HAL_GetTick>
 8003f24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003f28:	f7fe f89c 	bl	8002064 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e212      	b.n	8004360 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f3a:	4b3d      	ldr	r3, [pc, #244]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f0      	bne.n	8003f28 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d036      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d019      	beq.n	8003f8e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f5a:	4b35      	ldr	r3, [pc, #212]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5e:	4a34      	ldr	r2, [pc, #208]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003f60:	f043 0301 	orr.w	r3, r3, #1
 8003f64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f66:	f7fe f87d 	bl	8002064 <HAL_GetTick>
 8003f6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f6c:	e008      	b.n	8003f80 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f6e:	f7fe f879 	bl	8002064 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e1ef      	b.n	8004360 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f80:	4b2b      	ldr	r3, [pc, #172]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0f0      	beq.n	8003f6e <HAL_RCC_OscConfig+0x45a>
 8003f8c:	e018      	b.n	8003fc0 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f8e:	4b28      	ldr	r3, [pc, #160]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f92:	4a27      	ldr	r2, [pc, #156]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003f94:	f023 0301 	bic.w	r3, r3, #1
 8003f98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f9a:	f7fe f863 	bl	8002064 <HAL_GetTick>
 8003f9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fa2:	f7fe f85f 	bl	8002064 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e1d5      	b.n	8004360 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003fb4:	4b1e      	ldr	r3, [pc, #120]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1f0      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0320 	and.w	r3, r3, #32
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d039      	beq.n	8004040 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d019      	beq.n	8004008 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003fd4:	4b16      	ldr	r3, [pc, #88]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a15      	ldr	r2, [pc, #84]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003fda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fde:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003fe0:	f7fe f840 	bl	8002064 <HAL_GetTick>
 8003fe4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003fe8:	f7fe f83c 	bl	8002064 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e1b2      	b.n	8004360 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ffa:	4b0d      	ldr	r3, [pc, #52]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0f0      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x4d4>
 8004006:	e01b      	b.n	8004040 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004008:	4b09      	ldr	r3, [pc, #36]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a08      	ldr	r2, [pc, #32]	; (8004030 <HAL_RCC_OscConfig+0x51c>)
 800400e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004012:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004014:	f7fe f826 	bl	8002064 <HAL_GetTick>
 8004018:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800401a:	e00b      	b.n	8004034 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800401c:	f7fe f822 	bl	8002064 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d904      	bls.n	8004034 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e198      	b.n	8004360 <HAL_RCC_OscConfig+0x84c>
 800402e:	bf00      	nop
 8004030:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004034:	4ba3      	ldr	r3, [pc, #652]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1ed      	bne.n	800401c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 8081 	beq.w	8004150 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800404e:	4b9e      	ldr	r3, [pc, #632]	; (80042c8 <HAL_RCC_OscConfig+0x7b4>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a9d      	ldr	r2, [pc, #628]	; (80042c8 <HAL_RCC_OscConfig+0x7b4>)
 8004054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004058:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800405a:	f7fe f803 	bl	8002064 <HAL_GetTick>
 800405e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004060:	e008      	b.n	8004074 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004062:	f7fd ffff 	bl	8002064 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b64      	cmp	r3, #100	; 0x64
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e175      	b.n	8004360 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004074:	4b94      	ldr	r3, [pc, #592]	; (80042c8 <HAL_RCC_OscConfig+0x7b4>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0f0      	beq.n	8004062 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d106      	bne.n	8004096 <HAL_RCC_OscConfig+0x582>
 8004088:	4b8e      	ldr	r3, [pc, #568]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 800408a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408c:	4a8d      	ldr	r2, [pc, #564]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 800408e:	f043 0301 	orr.w	r3, r3, #1
 8004092:	6713      	str	r3, [r2, #112]	; 0x70
 8004094:	e02d      	b.n	80040f2 <HAL_RCC_OscConfig+0x5de>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10c      	bne.n	80040b8 <HAL_RCC_OscConfig+0x5a4>
 800409e:	4b89      	ldr	r3, [pc, #548]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 80040a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a2:	4a88      	ldr	r2, [pc, #544]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 80040a4:	f023 0301 	bic.w	r3, r3, #1
 80040a8:	6713      	str	r3, [r2, #112]	; 0x70
 80040aa:	4b86      	ldr	r3, [pc, #536]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ae:	4a85      	ldr	r2, [pc, #532]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 80040b0:	f023 0304 	bic.w	r3, r3, #4
 80040b4:	6713      	str	r3, [r2, #112]	; 0x70
 80040b6:	e01c      	b.n	80040f2 <HAL_RCC_OscConfig+0x5de>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b05      	cmp	r3, #5
 80040be:	d10c      	bne.n	80040da <HAL_RCC_OscConfig+0x5c6>
 80040c0:	4b80      	ldr	r3, [pc, #512]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 80040c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c4:	4a7f      	ldr	r2, [pc, #508]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 80040c6:	f043 0304 	orr.w	r3, r3, #4
 80040ca:	6713      	str	r3, [r2, #112]	; 0x70
 80040cc:	4b7d      	ldr	r3, [pc, #500]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 80040ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d0:	4a7c      	ldr	r2, [pc, #496]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 80040d2:	f043 0301 	orr.w	r3, r3, #1
 80040d6:	6713      	str	r3, [r2, #112]	; 0x70
 80040d8:	e00b      	b.n	80040f2 <HAL_RCC_OscConfig+0x5de>
 80040da:	4b7a      	ldr	r3, [pc, #488]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040de:	4a79      	ldr	r2, [pc, #484]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 80040e0:	f023 0301 	bic.w	r3, r3, #1
 80040e4:	6713      	str	r3, [r2, #112]	; 0x70
 80040e6:	4b77      	ldr	r3, [pc, #476]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ea:	4a76      	ldr	r2, [pc, #472]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 80040ec:	f023 0304 	bic.w	r3, r3, #4
 80040f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d015      	beq.n	8004126 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fa:	f7fd ffb3 	bl	8002064 <HAL_GetTick>
 80040fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004100:	e00a      	b.n	8004118 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004102:	f7fd ffaf 	bl	8002064 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004110:	4293      	cmp	r3, r2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e123      	b.n	8004360 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004118:	4b6a      	ldr	r3, [pc, #424]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 800411a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0ee      	beq.n	8004102 <HAL_RCC_OscConfig+0x5ee>
 8004124:	e014      	b.n	8004150 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004126:	f7fd ff9d 	bl	8002064 <HAL_GetTick>
 800412a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800412c:	e00a      	b.n	8004144 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800412e:	f7fd ff99 	bl	8002064 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	f241 3288 	movw	r2, #5000	; 0x1388
 800413c:	4293      	cmp	r3, r2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e10d      	b.n	8004360 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004144:	4b5f      	ldr	r3, [pc, #380]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 8004146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1ee      	bne.n	800412e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 8102 	beq.w	800435e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800415a:	4b5a      	ldr	r3, [pc, #360]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004162:	2b18      	cmp	r3, #24
 8004164:	f000 80bd 	beq.w	80042e2 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	2b02      	cmp	r3, #2
 800416e:	f040 8095 	bne.w	800429c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004172:	4b54      	ldr	r3, [pc, #336]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a53      	ldr	r2, [pc, #332]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 8004178:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800417c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417e:	f7fd ff71 	bl	8002064 <HAL_GetTick>
 8004182:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004186:	f7fd ff6d 	bl	8002064 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e0e3      	b.n	8004360 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004198:	4b4a      	ldr	r3, [pc, #296]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1f0      	bne.n	8004186 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041a4:	4b47      	ldr	r3, [pc, #284]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 80041a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041a8:	4b48      	ldr	r3, [pc, #288]	; (80042cc <HAL_RCC_OscConfig+0x7b8>)
 80041aa:	4013      	ands	r3, r2
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80041b4:	0112      	lsls	r2, r2, #4
 80041b6:	430a      	orrs	r2, r1
 80041b8:	4942      	ldr	r1, [pc, #264]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	628b      	str	r3, [r1, #40]	; 0x28
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c2:	3b01      	subs	r3, #1
 80041c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041cc:	3b01      	subs	r3, #1
 80041ce:	025b      	lsls	r3, r3, #9
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d8:	3b01      	subs	r3, #1
 80041da:	041b      	lsls	r3, r3, #16
 80041dc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80041e0:	431a      	orrs	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e6:	3b01      	subs	r3, #1
 80041e8:	061b      	lsls	r3, r3, #24
 80041ea:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80041ee:	4935      	ldr	r1, [pc, #212]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80041f4:	4b33      	ldr	r3, [pc, #204]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 80041f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f8:	4a32      	ldr	r2, [pc, #200]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 80041fa:	f023 0301 	bic.w	r3, r3, #1
 80041fe:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004200:	4b30      	ldr	r3, [pc, #192]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 8004202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004204:	4b32      	ldr	r3, [pc, #200]	; (80042d0 <HAL_RCC_OscConfig+0x7bc>)
 8004206:	4013      	ands	r3, r2
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800420c:	00d2      	lsls	r2, r2, #3
 800420e:	492d      	ldr	r1, [pc, #180]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 8004210:	4313      	orrs	r3, r2
 8004212:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004214:	4b2b      	ldr	r3, [pc, #172]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 8004216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004218:	f023 020c 	bic.w	r2, r3, #12
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004220:	4928      	ldr	r1, [pc, #160]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 8004222:	4313      	orrs	r3, r2
 8004224:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004226:	4b27      	ldr	r3, [pc, #156]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 8004228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422a:	f023 0202 	bic.w	r2, r3, #2
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004232:	4924      	ldr	r1, [pc, #144]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 8004234:	4313      	orrs	r3, r2
 8004236:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004238:	4b22      	ldr	r3, [pc, #136]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 800423a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423c:	4a21      	ldr	r2, [pc, #132]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 800423e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004242:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004244:	4b1f      	ldr	r3, [pc, #124]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 8004246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004248:	4a1e      	ldr	r2, [pc, #120]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 800424a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800424e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004250:	4b1c      	ldr	r3, [pc, #112]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	4a1b      	ldr	r2, [pc, #108]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 8004256:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800425a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800425c:	4b19      	ldr	r3, [pc, #100]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	4a18      	ldr	r2, [pc, #96]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004268:	4b16      	ldr	r3, [pc, #88]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a15      	ldr	r2, [pc, #84]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 800426e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004274:	f7fd fef6 	bl	8002064 <HAL_GetTick>
 8004278:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800427c:	f7fd fef2 	bl	8002064 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e068      	b.n	8004360 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800428e:	4b0d      	ldr	r3, [pc, #52]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0f0      	beq.n	800427c <HAL_RCC_OscConfig+0x768>
 800429a:	e060      	b.n	800435e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800429c:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a08      	ldr	r2, [pc, #32]	; (80042c4 <HAL_RCC_OscConfig+0x7b0>)
 80042a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a8:	f7fd fedc 	bl	8002064 <HAL_GetTick>
 80042ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042ae:	e011      	b.n	80042d4 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042b0:	f7fd fed8 	bl	8002064 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d90a      	bls.n	80042d4 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e04e      	b.n	8004360 <HAL_RCC_OscConfig+0x84c>
 80042c2:	bf00      	nop
 80042c4:	58024400 	.word	0x58024400
 80042c8:	58024800 	.word	0x58024800
 80042cc:	fffffc0c 	.word	0xfffffc0c
 80042d0:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042d4:	4b24      	ldr	r3, [pc, #144]	; (8004368 <HAL_RCC_OscConfig+0x854>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e7      	bne.n	80042b0 <HAL_RCC_OscConfig+0x79c>
 80042e0:	e03d      	b.n	800435e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80042e2:	4b21      	ldr	r3, [pc, #132]	; (8004368 <HAL_RCC_OscConfig+0x854>)
 80042e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80042e8:	4b1f      	ldr	r3, [pc, #124]	; (8004368 <HAL_RCC_OscConfig+0x854>)
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ec:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d031      	beq.n	800435a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	f003 0203 	and.w	r2, r3, #3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004300:	429a      	cmp	r2, r3
 8004302:	d12a      	bne.n	800435a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	091b      	lsrs	r3, r3, #4
 8004308:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004310:	429a      	cmp	r2, r3
 8004312:	d122      	bne.n	800435a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004320:	429a      	cmp	r2, r3
 8004322:	d11a      	bne.n	800435a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	0a5b      	lsrs	r3, r3, #9
 8004328:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004330:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004332:	429a      	cmp	r2, r3
 8004334:	d111      	bne.n	800435a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	0c1b      	lsrs	r3, r3, #16
 800433a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004342:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004344:	429a      	cmp	r2, r3
 8004346:	d108      	bne.n	800435a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	0e1b      	lsrs	r3, r3, #24
 800434c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004354:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004356:	429a      	cmp	r2, r3
 8004358:	d001      	beq.n	800435e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e000      	b.n	8004360 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3730      	adds	r7, #48	; 0x30
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	58024400 	.word	0x58024400

0800436c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e19c      	b.n	80046ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004380:	4b8a      	ldr	r3, [pc, #552]	; (80045ac <HAL_RCC_ClockConfig+0x240>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 030f 	and.w	r3, r3, #15
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d910      	bls.n	80043b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438e:	4b87      	ldr	r3, [pc, #540]	; (80045ac <HAL_RCC_ClockConfig+0x240>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f023 020f 	bic.w	r2, r3, #15
 8004396:	4985      	ldr	r1, [pc, #532]	; (80045ac <HAL_RCC_ClockConfig+0x240>)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	4313      	orrs	r3, r2
 800439c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800439e:	4b83      	ldr	r3, [pc, #524]	; (80045ac <HAL_RCC_ClockConfig+0x240>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d001      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e184      	b.n	80046ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d010      	beq.n	80043de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	4b7b      	ldr	r3, [pc, #492]	; (80045b0 <HAL_RCC_ClockConfig+0x244>)
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d908      	bls.n	80043de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80043cc:	4b78      	ldr	r3, [pc, #480]	; (80045b0 <HAL_RCC_ClockConfig+0x244>)
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	4975      	ldr	r1, [pc, #468]	; (80045b0 <HAL_RCC_ClockConfig+0x244>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d010      	beq.n	800440c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695a      	ldr	r2, [r3, #20]
 80043ee:	4b70      	ldr	r3, [pc, #448]	; (80045b0 <HAL_RCC_ClockConfig+0x244>)
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d908      	bls.n	800440c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043fa:	4b6d      	ldr	r3, [pc, #436]	; (80045b0 <HAL_RCC_ClockConfig+0x244>)
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	496a      	ldr	r1, [pc, #424]	; (80045b0 <HAL_RCC_ClockConfig+0x244>)
 8004408:	4313      	orrs	r3, r2
 800440a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0310 	and.w	r3, r3, #16
 8004414:	2b00      	cmp	r3, #0
 8004416:	d010      	beq.n	800443a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699a      	ldr	r2, [r3, #24]
 800441c:	4b64      	ldr	r3, [pc, #400]	; (80045b0 <HAL_RCC_ClockConfig+0x244>)
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004424:	429a      	cmp	r2, r3
 8004426:	d908      	bls.n	800443a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004428:	4b61      	ldr	r3, [pc, #388]	; (80045b0 <HAL_RCC_ClockConfig+0x244>)
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	495e      	ldr	r1, [pc, #376]	; (80045b0 <HAL_RCC_ClockConfig+0x244>)
 8004436:	4313      	orrs	r3, r2
 8004438:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0320 	and.w	r3, r3, #32
 8004442:	2b00      	cmp	r3, #0
 8004444:	d010      	beq.n	8004468 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	69da      	ldr	r2, [r3, #28]
 800444a:	4b59      	ldr	r3, [pc, #356]	; (80045b0 <HAL_RCC_ClockConfig+0x244>)
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004452:	429a      	cmp	r2, r3
 8004454:	d908      	bls.n	8004468 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004456:	4b56      	ldr	r3, [pc, #344]	; (80045b0 <HAL_RCC_ClockConfig+0x244>)
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	4953      	ldr	r1, [pc, #332]	; (80045b0 <HAL_RCC_ClockConfig+0x244>)
 8004464:	4313      	orrs	r3, r2
 8004466:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d010      	beq.n	8004496 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68da      	ldr	r2, [r3, #12]
 8004478:	4b4d      	ldr	r3, [pc, #308]	; (80045b0 <HAL_RCC_ClockConfig+0x244>)
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	f003 030f 	and.w	r3, r3, #15
 8004480:	429a      	cmp	r2, r3
 8004482:	d908      	bls.n	8004496 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004484:	4b4a      	ldr	r3, [pc, #296]	; (80045b0 <HAL_RCC_ClockConfig+0x244>)
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	f023 020f 	bic.w	r2, r3, #15
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	4947      	ldr	r1, [pc, #284]	; (80045b0 <HAL_RCC_ClockConfig+0x244>)
 8004492:	4313      	orrs	r3, r2
 8004494:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d055      	beq.n	800454e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80044a2:	4b43      	ldr	r3, [pc, #268]	; (80045b0 <HAL_RCC_ClockConfig+0x244>)
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	4940      	ldr	r1, [pc, #256]	; (80045b0 <HAL_RCC_ClockConfig+0x244>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d107      	bne.n	80044cc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044bc:	4b3c      	ldr	r3, [pc, #240]	; (80045b0 <HAL_RCC_ClockConfig+0x244>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d121      	bne.n	800450c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e0f6      	b.n	80046ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2b03      	cmp	r3, #3
 80044d2:	d107      	bne.n	80044e4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044d4:	4b36      	ldr	r3, [pc, #216]	; (80045b0 <HAL_RCC_ClockConfig+0x244>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d115      	bne.n	800450c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e0ea      	b.n	80046ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d107      	bne.n	80044fc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044ec:	4b30      	ldr	r3, [pc, #192]	; (80045b0 <HAL_RCC_ClockConfig+0x244>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d109      	bne.n	800450c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0de      	b.n	80046ba <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044fc:	4b2c      	ldr	r3, [pc, #176]	; (80045b0 <HAL_RCC_ClockConfig+0x244>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b00      	cmp	r3, #0
 8004506:	d101      	bne.n	800450c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e0d6      	b.n	80046ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800450c:	4b28      	ldr	r3, [pc, #160]	; (80045b0 <HAL_RCC_ClockConfig+0x244>)
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	f023 0207 	bic.w	r2, r3, #7
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	4925      	ldr	r1, [pc, #148]	; (80045b0 <HAL_RCC_ClockConfig+0x244>)
 800451a:	4313      	orrs	r3, r2
 800451c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451e:	f7fd fda1 	bl	8002064 <HAL_GetTick>
 8004522:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004524:	e00a      	b.n	800453c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004526:	f7fd fd9d 	bl	8002064 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	f241 3288 	movw	r2, #5000	; 0x1388
 8004534:	4293      	cmp	r3, r2
 8004536:	d901      	bls.n	800453c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e0be      	b.n	80046ba <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453c:	4b1c      	ldr	r3, [pc, #112]	; (80045b0 <HAL_RCC_ClockConfig+0x244>)
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	429a      	cmp	r2, r3
 800454c:	d1eb      	bne.n	8004526 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d010      	beq.n	800457c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68da      	ldr	r2, [r3, #12]
 800455e:	4b14      	ldr	r3, [pc, #80]	; (80045b0 <HAL_RCC_ClockConfig+0x244>)
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	429a      	cmp	r2, r3
 8004568:	d208      	bcs.n	800457c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800456a:	4b11      	ldr	r3, [pc, #68]	; (80045b0 <HAL_RCC_ClockConfig+0x244>)
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f023 020f 	bic.w	r2, r3, #15
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	490e      	ldr	r1, [pc, #56]	; (80045b0 <HAL_RCC_ClockConfig+0x244>)
 8004578:	4313      	orrs	r3, r2
 800457a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800457c:	4b0b      	ldr	r3, [pc, #44]	; (80045ac <HAL_RCC_ClockConfig+0x240>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 030f 	and.w	r3, r3, #15
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d214      	bcs.n	80045b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458a:	4b08      	ldr	r3, [pc, #32]	; (80045ac <HAL_RCC_ClockConfig+0x240>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f023 020f 	bic.w	r2, r3, #15
 8004592:	4906      	ldr	r1, [pc, #24]	; (80045ac <HAL_RCC_ClockConfig+0x240>)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	4313      	orrs	r3, r2
 8004598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800459a:	4b04      	ldr	r3, [pc, #16]	; (80045ac <HAL_RCC_ClockConfig+0x240>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d005      	beq.n	80045b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e086      	b.n	80046ba <HAL_RCC_ClockConfig+0x34e>
 80045ac:	52002000 	.word	0x52002000
 80045b0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d010      	beq.n	80045e2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691a      	ldr	r2, [r3, #16]
 80045c4:	4b3f      	ldr	r3, [pc, #252]	; (80046c4 <HAL_RCC_ClockConfig+0x358>)
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d208      	bcs.n	80045e2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80045d0:	4b3c      	ldr	r3, [pc, #240]	; (80046c4 <HAL_RCC_ClockConfig+0x358>)
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	4939      	ldr	r1, [pc, #228]	; (80046c4 <HAL_RCC_ClockConfig+0x358>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0308 	and.w	r3, r3, #8
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d010      	beq.n	8004610 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	695a      	ldr	r2, [r3, #20]
 80045f2:	4b34      	ldr	r3, [pc, #208]	; (80046c4 <HAL_RCC_ClockConfig+0x358>)
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d208      	bcs.n	8004610 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80045fe:	4b31      	ldr	r3, [pc, #196]	; (80046c4 <HAL_RCC_ClockConfig+0x358>)
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	492e      	ldr	r1, [pc, #184]	; (80046c4 <HAL_RCC_ClockConfig+0x358>)
 800460c:	4313      	orrs	r3, r2
 800460e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0310 	and.w	r3, r3, #16
 8004618:	2b00      	cmp	r3, #0
 800461a:	d010      	beq.n	800463e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699a      	ldr	r2, [r3, #24]
 8004620:	4b28      	ldr	r3, [pc, #160]	; (80046c4 <HAL_RCC_ClockConfig+0x358>)
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004628:	429a      	cmp	r2, r3
 800462a:	d208      	bcs.n	800463e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800462c:	4b25      	ldr	r3, [pc, #148]	; (80046c4 <HAL_RCC_ClockConfig+0x358>)
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	4922      	ldr	r1, [pc, #136]	; (80046c4 <HAL_RCC_ClockConfig+0x358>)
 800463a:	4313      	orrs	r3, r2
 800463c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0320 	and.w	r3, r3, #32
 8004646:	2b00      	cmp	r3, #0
 8004648:	d010      	beq.n	800466c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69da      	ldr	r2, [r3, #28]
 800464e:	4b1d      	ldr	r3, [pc, #116]	; (80046c4 <HAL_RCC_ClockConfig+0x358>)
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004656:	429a      	cmp	r2, r3
 8004658:	d208      	bcs.n	800466c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800465a:	4b1a      	ldr	r3, [pc, #104]	; (80046c4 <HAL_RCC_ClockConfig+0x358>)
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	4917      	ldr	r1, [pc, #92]	; (80046c4 <HAL_RCC_ClockConfig+0x358>)
 8004668:	4313      	orrs	r3, r2
 800466a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800466c:	f000 f834 	bl	80046d8 <HAL_RCC_GetSysClockFreq>
 8004670:	4602      	mov	r2, r0
 8004672:	4b14      	ldr	r3, [pc, #80]	; (80046c4 <HAL_RCC_ClockConfig+0x358>)
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	0a1b      	lsrs	r3, r3, #8
 8004678:	f003 030f 	and.w	r3, r3, #15
 800467c:	4912      	ldr	r1, [pc, #72]	; (80046c8 <HAL_RCC_ClockConfig+0x35c>)
 800467e:	5ccb      	ldrb	r3, [r1, r3]
 8004680:	f003 031f 	and.w	r3, r3, #31
 8004684:	fa22 f303 	lsr.w	r3, r2, r3
 8004688:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800468a:	4b0e      	ldr	r3, [pc, #56]	; (80046c4 <HAL_RCC_ClockConfig+0x358>)
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	4a0d      	ldr	r2, [pc, #52]	; (80046c8 <HAL_RCC_ClockConfig+0x35c>)
 8004694:	5cd3      	ldrb	r3, [r2, r3]
 8004696:	f003 031f 	and.w	r3, r3, #31
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	fa22 f303 	lsr.w	r3, r2, r3
 80046a0:	4a0a      	ldr	r2, [pc, #40]	; (80046cc <HAL_RCC_ClockConfig+0x360>)
 80046a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046a4:	4a0a      	ldr	r2, [pc, #40]	; (80046d0 <HAL_RCC_ClockConfig+0x364>)
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80046aa:	4b0a      	ldr	r3, [pc, #40]	; (80046d4 <HAL_RCC_ClockConfig+0x368>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fd fc8e 	bl	8001fd0 <HAL_InitTick>
 80046b4:	4603      	mov	r3, r0
 80046b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	58024400 	.word	0x58024400
 80046c8:	0800a254 	.word	0x0800a254
 80046cc:	24000004 	.word	0x24000004
 80046d0:	24000000 	.word	0x24000000
 80046d4:	24000008 	.word	0x24000008

080046d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	b089      	sub	sp, #36	; 0x24
 80046dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046de:	4bb3      	ldr	r3, [pc, #716]	; (80049ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046e6:	2b18      	cmp	r3, #24
 80046e8:	f200 8155 	bhi.w	8004996 <HAL_RCC_GetSysClockFreq+0x2be>
 80046ec:	a201      	add	r2, pc, #4	; (adr r2, 80046f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80046ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f2:	bf00      	nop
 80046f4:	08004759 	.word	0x08004759
 80046f8:	08004997 	.word	0x08004997
 80046fc:	08004997 	.word	0x08004997
 8004700:	08004997 	.word	0x08004997
 8004704:	08004997 	.word	0x08004997
 8004708:	08004997 	.word	0x08004997
 800470c:	08004997 	.word	0x08004997
 8004710:	08004997 	.word	0x08004997
 8004714:	0800477f 	.word	0x0800477f
 8004718:	08004997 	.word	0x08004997
 800471c:	08004997 	.word	0x08004997
 8004720:	08004997 	.word	0x08004997
 8004724:	08004997 	.word	0x08004997
 8004728:	08004997 	.word	0x08004997
 800472c:	08004997 	.word	0x08004997
 8004730:	08004997 	.word	0x08004997
 8004734:	08004785 	.word	0x08004785
 8004738:	08004997 	.word	0x08004997
 800473c:	08004997 	.word	0x08004997
 8004740:	08004997 	.word	0x08004997
 8004744:	08004997 	.word	0x08004997
 8004748:	08004997 	.word	0x08004997
 800474c:	08004997 	.word	0x08004997
 8004750:	08004997 	.word	0x08004997
 8004754:	0800478b 	.word	0x0800478b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004758:	4b94      	ldr	r3, [pc, #592]	; (80049ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0320 	and.w	r3, r3, #32
 8004760:	2b00      	cmp	r3, #0
 8004762:	d009      	beq.n	8004778 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004764:	4b91      	ldr	r3, [pc, #580]	; (80049ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	08db      	lsrs	r3, r3, #3
 800476a:	f003 0303 	and.w	r3, r3, #3
 800476e:	4a90      	ldr	r2, [pc, #576]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004770:	fa22 f303 	lsr.w	r3, r2, r3
 8004774:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004776:	e111      	b.n	800499c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004778:	4b8d      	ldr	r3, [pc, #564]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800477a:	61bb      	str	r3, [r7, #24]
    break;
 800477c:	e10e      	b.n	800499c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800477e:	4b8d      	ldr	r3, [pc, #564]	; (80049b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004780:	61bb      	str	r3, [r7, #24]
    break;
 8004782:	e10b      	b.n	800499c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004784:	4b8c      	ldr	r3, [pc, #560]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004786:	61bb      	str	r3, [r7, #24]
    break;
 8004788:	e108      	b.n	800499c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800478a:	4b88      	ldr	r3, [pc, #544]	; (80049ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004794:	4b85      	ldr	r3, [pc, #532]	; (80049ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004798:	091b      	lsrs	r3, r3, #4
 800479a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800479e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80047a0:	4b82      	ldr	r3, [pc, #520]	; (80049ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80047aa:	4b80      	ldr	r3, [pc, #512]	; (80049ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ae:	08db      	lsrs	r3, r3, #3
 80047b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	fb02 f303 	mul.w	r3, r2, r3
 80047ba:	ee07 3a90 	vmov	s15, r3
 80047be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 80e1 	beq.w	8004990 <HAL_RCC_GetSysClockFreq+0x2b8>
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	f000 8083 	beq.w	80048dc <HAL_RCC_GetSysClockFreq+0x204>
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	f200 80a1 	bhi.w	8004920 <HAL_RCC_GetSysClockFreq+0x248>
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <HAL_RCC_GetSysClockFreq+0x114>
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d056      	beq.n	8004898 <HAL_RCC_GetSysClockFreq+0x1c0>
 80047ea:	e099      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047ec:	4b6f      	ldr	r3, [pc, #444]	; (80049ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0320 	and.w	r3, r3, #32
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d02d      	beq.n	8004854 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80047f8:	4b6c      	ldr	r3, [pc, #432]	; (80049ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	08db      	lsrs	r3, r3, #3
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	4a6b      	ldr	r2, [pc, #428]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004804:	fa22 f303 	lsr.w	r3, r2, r3
 8004808:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	ee07 3a90 	vmov	s15, r3
 8004810:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	ee07 3a90 	vmov	s15, r3
 800481a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800481e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004822:	4b62      	ldr	r3, [pc, #392]	; (80049ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800482a:	ee07 3a90 	vmov	s15, r3
 800482e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004832:	ed97 6a02 	vldr	s12, [r7, #8]
 8004836:	eddf 5a61 	vldr	s11, [pc, #388]	; 80049bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800483a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800483e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800484a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800484e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004852:	e087      	b.n	8004964 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	ee07 3a90 	vmov	s15, r3
 800485a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800485e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80049c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004866:	4b51      	ldr	r3, [pc, #324]	; (80049ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800486e:	ee07 3a90 	vmov	s15, r3
 8004872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004876:	ed97 6a02 	vldr	s12, [r7, #8]
 800487a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80049bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800487e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800488a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800488e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004892:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004896:	e065      	b.n	8004964 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	ee07 3a90 	vmov	s15, r3
 800489e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80049c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80048a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048aa:	4b40      	ldr	r3, [pc, #256]	; (80049ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b2:	ee07 3a90 	vmov	s15, r3
 80048b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80048be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80049bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80048c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048da:	e043      	b.n	8004964 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	ee07 3a90 	vmov	s15, r3
 80048e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80049c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80048ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ee:	4b2f      	ldr	r3, [pc, #188]	; (80049ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f6:	ee07 3a90 	vmov	s15, r3
 80048fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004902:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80049bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800490a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800490e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800491e:	e021      	b.n	8004964 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	ee07 3a90 	vmov	s15, r3
 8004926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80049c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800492e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004932:	4b1e      	ldr	r3, [pc, #120]	; (80049ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493a:	ee07 3a90 	vmov	s15, r3
 800493e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004942:	ed97 6a02 	vldr	s12, [r7, #8]
 8004946:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80049bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800494a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800494e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800495a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800495e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004962:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004964:	4b11      	ldr	r3, [pc, #68]	; (80049ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004968:	0a5b      	lsrs	r3, r3, #9
 800496a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800496e:	3301      	adds	r3, #1
 8004970:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	ee07 3a90 	vmov	s15, r3
 8004978:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800497c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004988:	ee17 3a90 	vmov	r3, s15
 800498c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800498e:	e005      	b.n	800499c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	61bb      	str	r3, [r7, #24]
    break;
 8004994:	e002      	b.n	800499c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004996:	4b07      	ldr	r3, [pc, #28]	; (80049b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004998:	61bb      	str	r3, [r7, #24]
    break;
 800499a:	bf00      	nop
  }

  return sysclockfreq;
 800499c:	69bb      	ldr	r3, [r7, #24]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3724      	adds	r7, #36	; 0x24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	58024400 	.word	0x58024400
 80049b0:	03d09000 	.word	0x03d09000
 80049b4:	003d0900 	.word	0x003d0900
 80049b8:	007a1200 	.word	0x007a1200
 80049bc:	46000000 	.word	0x46000000
 80049c0:	4c742400 	.word	0x4c742400
 80049c4:	4a742400 	.word	0x4a742400
 80049c8:	4af42400 	.word	0x4af42400

080049cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80049d2:	f7ff fe81 	bl	80046d8 <HAL_RCC_GetSysClockFreq>
 80049d6:	4602      	mov	r2, r0
 80049d8:	4b10      	ldr	r3, [pc, #64]	; (8004a1c <HAL_RCC_GetHCLKFreq+0x50>)
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	0a1b      	lsrs	r3, r3, #8
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	490f      	ldr	r1, [pc, #60]	; (8004a20 <HAL_RCC_GetHCLKFreq+0x54>)
 80049e4:	5ccb      	ldrb	r3, [r1, r3]
 80049e6:	f003 031f 	and.w	r3, r3, #31
 80049ea:	fa22 f303 	lsr.w	r3, r2, r3
 80049ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049f0:	4b0a      	ldr	r3, [pc, #40]	; (8004a1c <HAL_RCC_GetHCLKFreq+0x50>)
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	f003 030f 	and.w	r3, r3, #15
 80049f8:	4a09      	ldr	r2, [pc, #36]	; (8004a20 <HAL_RCC_GetHCLKFreq+0x54>)
 80049fa:	5cd3      	ldrb	r3, [r2, r3]
 80049fc:	f003 031f 	and.w	r3, r3, #31
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	fa22 f303 	lsr.w	r3, r2, r3
 8004a06:	4a07      	ldr	r2, [pc, #28]	; (8004a24 <HAL_RCC_GetHCLKFreq+0x58>)
 8004a08:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a0a:	4a07      	ldr	r2, [pc, #28]	; (8004a28 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004a10:	4b04      	ldr	r3, [pc, #16]	; (8004a24 <HAL_RCC_GetHCLKFreq+0x58>)
 8004a12:	681b      	ldr	r3, [r3, #0]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	58024400 	.word	0x58024400
 8004a20:	0800a254 	.word	0x0800a254
 8004a24:	24000004 	.word	0x24000004
 8004a28:	24000000 	.word	0x24000000

08004a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004a30:	f7ff ffcc 	bl	80049cc <HAL_RCC_GetHCLKFreq>
 8004a34:	4602      	mov	r2, r0
 8004a36:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	091b      	lsrs	r3, r3, #4
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	4904      	ldr	r1, [pc, #16]	; (8004a54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a42:	5ccb      	ldrb	r3, [r1, r3]
 8004a44:	f003 031f 	and.w	r3, r3, #31
 8004a48:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	58024400 	.word	0x58024400
 8004a54:	0800a254 	.word	0x0800a254

08004a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004a5c:	f7ff ffb6 	bl	80049cc <HAL_RCC_GetHCLKFreq>
 8004a60:	4602      	mov	r2, r0
 8004a62:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	0a1b      	lsrs	r3, r3, #8
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	4904      	ldr	r1, [pc, #16]	; (8004a80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a6e:	5ccb      	ldrb	r3, [r1, r3]
 8004a70:	f003 031f 	and.w	r3, r3, #31
 8004a74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	58024400 	.word	0x58024400
 8004a80:	0800a254 	.word	0x0800a254

08004a84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a90:	2300      	movs	r3, #0
 8004a92:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d03f      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aa4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004aa8:	d02a      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004aaa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004aae:	d824      	bhi.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ab0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ab4:	d018      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ab6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004aba:	d81e      	bhi.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004ac0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ac4:	d007      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ac6:	e018      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ac8:	4bab      	ldr	r3, [pc, #684]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	4aaa      	ldr	r2, [pc, #680]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ad2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004ad4:	e015      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	3304      	adds	r3, #4
 8004ada:	2102      	movs	r1, #2
 8004adc:	4618      	mov	r0, r3
 8004ade:	f001 fff3 	bl	8006ac8 <RCCEx_PLL2_Config>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004ae6:	e00c      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3324      	adds	r3, #36	; 0x24
 8004aec:	2102      	movs	r1, #2
 8004aee:	4618      	mov	r0, r3
 8004af0:	f002 f89c 	bl	8006c2c <RCCEx_PLL3_Config>
 8004af4:	4603      	mov	r3, r0
 8004af6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004af8:	e003      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	75fb      	strb	r3, [r7, #23]
      break;
 8004afe:	e000      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004b00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b02:	7dfb      	ldrb	r3, [r7, #23]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d109      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004b08:	4b9b      	ldr	r3, [pc, #620]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b14:	4998      	ldr	r1, [pc, #608]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	650b      	str	r3, [r1, #80]	; 0x50
 8004b1a:	e001      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1c:	7dfb      	ldrb	r3, [r7, #23]
 8004b1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d03d      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d826      	bhi.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004b34:	a201      	add	r2, pc, #4	; (adr r2, 8004b3c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3a:	bf00      	nop
 8004b3c:	08004b51 	.word	0x08004b51
 8004b40:	08004b5f 	.word	0x08004b5f
 8004b44:	08004b71 	.word	0x08004b71
 8004b48:	08004b89 	.word	0x08004b89
 8004b4c:	08004b89 	.word	0x08004b89
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b50:	4b89      	ldr	r3, [pc, #548]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	4a88      	ldr	r2, [pc, #544]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b5c:	e015      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3304      	adds	r3, #4
 8004b62:	2100      	movs	r1, #0
 8004b64:	4618      	mov	r0, r3
 8004b66:	f001 ffaf 	bl	8006ac8 <RCCEx_PLL2_Config>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b6e:	e00c      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3324      	adds	r3, #36	; 0x24
 8004b74:	2100      	movs	r1, #0
 8004b76:	4618      	mov	r0, r3
 8004b78:	f002 f858 	bl	8006c2c <RCCEx_PLL3_Config>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b80:	e003      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	75fb      	strb	r3, [r7, #23]
      break;
 8004b86:	e000      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004b88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b8a:	7dfb      	ldrb	r3, [r7, #23]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d109      	bne.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b90:	4b79      	ldr	r3, [pc, #484]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b94:	f023 0207 	bic.w	r2, r3, #7
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9c:	4976      	ldr	r1, [pc, #472]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	650b      	str	r3, [r1, #80]	; 0x50
 8004ba2:	e001      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba4:	7dfb      	ldrb	r3, [r7, #23]
 8004ba6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d042      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bbc:	d02b      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc2:	d825      	bhi.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004bc4:	2bc0      	cmp	r3, #192	; 0xc0
 8004bc6:	d028      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004bc8:	2bc0      	cmp	r3, #192	; 0xc0
 8004bca:	d821      	bhi.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004bcc:	2b80      	cmp	r3, #128	; 0x80
 8004bce:	d016      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004bd0:	2b80      	cmp	r3, #128	; 0x80
 8004bd2:	d81d      	bhi.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004bd8:	2b40      	cmp	r3, #64	; 0x40
 8004bda:	d007      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004bdc:	e018      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bde:	4b66      	ldr	r3, [pc, #408]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be2:	4a65      	ldr	r2, [pc, #404]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004be8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004bea:	e017      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3304      	adds	r3, #4
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f001 ff68 	bl	8006ac8 <RCCEx_PLL2_Config>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004bfc:	e00e      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	3324      	adds	r3, #36	; 0x24
 8004c02:	2100      	movs	r1, #0
 8004c04:	4618      	mov	r0, r3
 8004c06:	f002 f811 	bl	8006c2c <RCCEx_PLL3_Config>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004c0e:	e005      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	75fb      	strb	r3, [r7, #23]
      break;
 8004c14:	e002      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004c16:	bf00      	nop
 8004c18:	e000      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004c1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c1c:	7dfb      	ldrb	r3, [r7, #23]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d109      	bne.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004c22:	4b55      	ldr	r3, [pc, #340]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c26:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c2e:	4952      	ldr	r1, [pc, #328]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	650b      	str	r3, [r1, #80]	; 0x50
 8004c34:	e001      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c36:	7dfb      	ldrb	r3, [r7, #23]
 8004c38:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d049      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c50:	d030      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004c52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c56:	d82a      	bhi.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004c58:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c5c:	d02c      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004c5e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c62:	d824      	bhi.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004c64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c68:	d018      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004c6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c6e:	d81e      	bhi.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004c74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c78:	d007      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004c7a:	e018      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c7c:	4b3e      	ldr	r3, [pc, #248]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c80:	4a3d      	ldr	r2, [pc, #244]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c88:	e017      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	2100      	movs	r1, #0
 8004c90:	4618      	mov	r0, r3
 8004c92:	f001 ff19 	bl	8006ac8 <RCCEx_PLL2_Config>
 8004c96:	4603      	mov	r3, r0
 8004c98:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004c9a:	e00e      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	3324      	adds	r3, #36	; 0x24
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f001 ffc2 	bl	8006c2c <RCCEx_PLL3_Config>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cac:	e005      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	75fb      	strb	r3, [r7, #23]
      break;
 8004cb2:	e002      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004cb4:	bf00      	nop
 8004cb6:	e000      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004cb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cba:	7dfb      	ldrb	r3, [r7, #23]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10a      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004cc0:	4b2d      	ldr	r3, [pc, #180]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004cce:	492a      	ldr	r1, [pc, #168]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	658b      	str	r3, [r1, #88]	; 0x58
 8004cd4:	e001      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd6:	7dfb      	ldrb	r3, [r7, #23]
 8004cd8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d04c      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004cec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cf0:	d030      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004cf2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cf6:	d82a      	bhi.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004cf8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004cfc:	d02c      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004cfe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d02:	d824      	bhi.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004d04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d08:	d018      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004d0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d0e:	d81e      	bhi.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d003      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d18:	d007      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004d1a:	e018      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d1c:	4b16      	ldr	r3, [pc, #88]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d20:	4a15      	ldr	r2, [pc, #84]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d28:	e017      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	3304      	adds	r3, #4
 8004d2e:	2100      	movs	r1, #0
 8004d30:	4618      	mov	r0, r3
 8004d32:	f001 fec9 	bl	8006ac8 <RCCEx_PLL2_Config>
 8004d36:	4603      	mov	r3, r0
 8004d38:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004d3a:	e00e      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	3324      	adds	r3, #36	; 0x24
 8004d40:	2100      	movs	r1, #0
 8004d42:	4618      	mov	r0, r3
 8004d44:	f001 ff72 	bl	8006c2c <RCCEx_PLL3_Config>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d4c:	e005      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	75fb      	strb	r3, [r7, #23]
      break;
 8004d52:	e002      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004d54:	bf00      	nop
 8004d56:	e000      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004d58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d5a:	7dfb      	ldrb	r3, [r7, #23]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10d      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004d60:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d64:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d6e:	4902      	ldr	r1, [pc, #8]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	658b      	str	r3, [r1, #88]	; 0x58
 8004d74:	e004      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004d76:	bf00      	nop
 8004d78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7c:	7dfb      	ldrb	r3, [r7, #23]
 8004d7e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d032      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d90:	2b30      	cmp	r3, #48	; 0x30
 8004d92:	d01c      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004d94:	2b30      	cmp	r3, #48	; 0x30
 8004d96:	d817      	bhi.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004d98:	2b20      	cmp	r3, #32
 8004d9a:	d00c      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	d813      	bhi.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d016      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004da4:	2b10      	cmp	r3, #16
 8004da6:	d10f      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004da8:	4baf      	ldr	r3, [pc, #700]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dac:	4aae      	ldr	r2, [pc, #696]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004db2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004db4:	e00e      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	3304      	adds	r3, #4
 8004dba:	2102      	movs	r1, #2
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f001 fe83 	bl	8006ac8 <RCCEx_PLL2_Config>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004dc6:	e005      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	75fb      	strb	r3, [r7, #23]
      break;
 8004dcc:	e002      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004dce:	bf00      	nop
 8004dd0:	e000      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004dd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dd4:	7dfb      	ldrb	r3, [r7, #23]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d109      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004dda:	4ba3      	ldr	r3, [pc, #652]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dde:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de6:	49a0      	ldr	r1, [pc, #640]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004dec:	e001      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dee:	7dfb      	ldrb	r3, [r7, #23]
 8004df0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d047      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e06:	d030      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004e08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e0c:	d82a      	bhi.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004e0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e12:	d02c      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004e14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e18:	d824      	bhi.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e1e:	d018      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e24:	d81e      	bhi.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e2e:	d007      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004e30:	e018      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e32:	4b8d      	ldr	r3, [pc, #564]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e36:	4a8c      	ldr	r2, [pc, #560]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004e3e:	e017      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3304      	adds	r3, #4
 8004e44:	2100      	movs	r1, #0
 8004e46:	4618      	mov	r0, r3
 8004e48:	f001 fe3e 	bl	8006ac8 <RCCEx_PLL2_Config>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004e50:	e00e      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3324      	adds	r3, #36	; 0x24
 8004e56:	2100      	movs	r1, #0
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f001 fee7 	bl	8006c2c <RCCEx_PLL3_Config>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004e62:	e005      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	75fb      	strb	r3, [r7, #23]
      break;
 8004e68:	e002      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004e6a:	bf00      	nop
 8004e6c:	e000      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004e6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e70:	7dfb      	ldrb	r3, [r7, #23]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d109      	bne.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004e76:	4b7c      	ldr	r3, [pc, #496]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e7a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e82:	4979      	ldr	r1, [pc, #484]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	650b      	str	r3, [r1, #80]	; 0x50
 8004e88:	e001      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e8a:	7dfb      	ldrb	r3, [r7, #23]
 8004e8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d049      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ea2:	d02e      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ea8:	d828      	bhi.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004eaa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004eae:	d02a      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004eb0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004eb4:	d822      	bhi.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004eb6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004eba:	d026      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004ebc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ec0:	d81c      	bhi.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004ec2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ec6:	d010      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004ec8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ecc:	d816      	bhi.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d01d      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed6:	d111      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3304      	adds	r3, #4
 8004edc:	2101      	movs	r1, #1
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f001 fdf2 	bl	8006ac8 <RCCEx_PLL2_Config>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004ee8:	e012      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3324      	adds	r3, #36	; 0x24
 8004eee:	2101      	movs	r1, #1
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f001 fe9b 	bl	8006c2c <RCCEx_PLL3_Config>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004efa:	e009      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	75fb      	strb	r3, [r7, #23]
      break;
 8004f00:	e006      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004f02:	bf00      	nop
 8004f04:	e004      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004f06:	bf00      	nop
 8004f08:	e002      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004f0a:	bf00      	nop
 8004f0c:	e000      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004f0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f10:	7dfb      	ldrb	r3, [r7, #23]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d109      	bne.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004f16:	4b54      	ldr	r3, [pc, #336]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f1a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f22:	4951      	ldr	r1, [pc, #324]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	650b      	str	r3, [r1, #80]	; 0x50
 8004f28:	e001      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f2a:	7dfb      	ldrb	r3, [r7, #23]
 8004f2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d04b      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f44:	d02e      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004f46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f4a:	d828      	bhi.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f50:	d02a      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f56:	d822      	bhi.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004f58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f5c:	d026      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004f5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f62:	d81c      	bhi.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004f64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f68:	d010      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004f6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f6e:	d816      	bhi.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d01d      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004f74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f78:	d111      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	2101      	movs	r1, #1
 8004f80:	4618      	mov	r0, r3
 8004f82:	f001 fda1 	bl	8006ac8 <RCCEx_PLL2_Config>
 8004f86:	4603      	mov	r3, r0
 8004f88:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004f8a:	e012      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	3324      	adds	r3, #36	; 0x24
 8004f90:	2101      	movs	r1, #1
 8004f92:	4618      	mov	r0, r3
 8004f94:	f001 fe4a 	bl	8006c2c <RCCEx_PLL3_Config>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004f9c:	e009      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8004fa2:	e006      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004fa4:	bf00      	nop
 8004fa6:	e004      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004fa8:	bf00      	nop
 8004faa:	e002      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004fac:	bf00      	nop
 8004fae:	e000      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004fb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fb2:	7dfb      	ldrb	r3, [r7, #23]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10a      	bne.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004fb8:	4b2b      	ldr	r3, [pc, #172]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004fc6:	4928      	ldr	r1, [pc, #160]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	658b      	str	r3, [r1, #88]	; 0x58
 8004fcc:	e001      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fce:	7dfb      	ldrb	r3, [r7, #23]
 8004fd0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d02f      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fe2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fe6:	d00e      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004fe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fec:	d814      	bhi.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d015      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004ff2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ff6:	d10f      	bne.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ff8:	4b1b      	ldr	r3, [pc, #108]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	4a1a      	ldr	r2, [pc, #104]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005002:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005004:	e00c      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	3304      	adds	r3, #4
 800500a:	2101      	movs	r1, #1
 800500c:	4618      	mov	r0, r3
 800500e:	f001 fd5b 	bl	8006ac8 <RCCEx_PLL2_Config>
 8005012:	4603      	mov	r3, r0
 8005014:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005016:	e003      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	75fb      	strb	r3, [r7, #23]
      break;
 800501c:	e000      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800501e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005020:	7dfb      	ldrb	r3, [r7, #23]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d109      	bne.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005026:	4b10      	ldr	r3, [pc, #64]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800502a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005032:	490d      	ldr	r1, [pc, #52]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005034:	4313      	orrs	r3, r2
 8005036:	650b      	str	r3, [r1, #80]	; 0x50
 8005038:	e001      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800503a:	7dfb      	ldrb	r3, [r7, #23]
 800503c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d033      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504e:	2b03      	cmp	r3, #3
 8005050:	d81c      	bhi.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005052:	a201      	add	r2, pc, #4	; (adr r2, 8005058 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005058:	08005093 	.word	0x08005093
 800505c:	0800506d 	.word	0x0800506d
 8005060:	0800507b 	.word	0x0800507b
 8005064:	08005093 	.word	0x08005093
 8005068:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800506c:	4bb8      	ldr	r3, [pc, #736]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800506e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005070:	4ab7      	ldr	r2, [pc, #732]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005076:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005078:	e00c      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3304      	adds	r3, #4
 800507e:	2102      	movs	r1, #2
 8005080:	4618      	mov	r0, r3
 8005082:	f001 fd21 	bl	8006ac8 <RCCEx_PLL2_Config>
 8005086:	4603      	mov	r3, r0
 8005088:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800508a:	e003      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	75fb      	strb	r3, [r7, #23]
      break;
 8005090:	e000      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005092:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005094:	7dfb      	ldrb	r3, [r7, #23]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d109      	bne.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800509a:	4bad      	ldr	r3, [pc, #692]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800509c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800509e:	f023 0203 	bic.w	r2, r3, #3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a6:	49aa      	ldr	r1, [pc, #680]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80050ac:	e001      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ae:	7dfb      	ldrb	r3, [r7, #23]
 80050b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 8086 	beq.w	80051cc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050c0:	4ba4      	ldr	r3, [pc, #656]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4aa3      	ldr	r2, [pc, #652]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80050c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050cc:	f7fc ffca 	bl	8002064 <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050d2:	e009      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050d4:	f7fc ffc6 	bl	8002064 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b64      	cmp	r3, #100	; 0x64
 80050e0:	d902      	bls.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	75fb      	strb	r3, [r7, #23]
        break;
 80050e6:	e005      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050e8:	4b9a      	ldr	r3, [pc, #616]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0ef      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80050f4:	7dfb      	ldrb	r3, [r7, #23]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d166      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80050fa:	4b95      	ldr	r3, [pc, #596]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005104:	4053      	eors	r3, r2
 8005106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800510a:	2b00      	cmp	r3, #0
 800510c:	d013      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800510e:	4b90      	ldr	r3, [pc, #576]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005116:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005118:	4b8d      	ldr	r3, [pc, #564]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800511a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511c:	4a8c      	ldr	r2, [pc, #560]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800511e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005122:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005124:	4b8a      	ldr	r3, [pc, #552]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005128:	4a89      	ldr	r2, [pc, #548]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800512a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800512e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005130:	4a87      	ldr	r2, [pc, #540]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800513c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005140:	d115      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005142:	f7fc ff8f 	bl	8002064 <HAL_GetTick>
 8005146:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005148:	e00b      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800514a:	f7fc ff8b 	bl	8002064 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	f241 3288 	movw	r2, #5000	; 0x1388
 8005158:	4293      	cmp	r3, r2
 800515a:	d902      	bls.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	75fb      	strb	r3, [r7, #23]
            break;
 8005160:	e005      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005162:	4b7b      	ldr	r3, [pc, #492]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d0ed      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800516e:	7dfb      	ldrb	r3, [r7, #23]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d126      	bne.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800517a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800517e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005182:	d10d      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005184:	4b72      	ldr	r3, [pc, #456]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005192:	0919      	lsrs	r1, r3, #4
 8005194:	4b70      	ldr	r3, [pc, #448]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8005196:	400b      	ands	r3, r1
 8005198:	496d      	ldr	r1, [pc, #436]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800519a:	4313      	orrs	r3, r2
 800519c:	610b      	str	r3, [r1, #16]
 800519e:	e005      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x728>
 80051a0:	4b6b      	ldr	r3, [pc, #428]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	4a6a      	ldr	r2, [pc, #424]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80051aa:	6113      	str	r3, [r2, #16]
 80051ac:	4b68      	ldr	r3, [pc, #416]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80051b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ba:	4965      	ldr	r1, [pc, #404]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	670b      	str	r3, [r1, #112]	; 0x70
 80051c0:	e004      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051c2:	7dfb      	ldrb	r3, [r7, #23]
 80051c4:	75bb      	strb	r3, [r7, #22]
 80051c6:	e001      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c8:	7dfb      	ldrb	r3, [r7, #23]
 80051ca:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d07e      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051dc:	2b28      	cmp	r3, #40	; 0x28
 80051de:	d867      	bhi.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80051e0:	a201      	add	r2, pc, #4	; (adr r2, 80051e8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80051e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e6:	bf00      	nop
 80051e8:	080052b7 	.word	0x080052b7
 80051ec:	080052b1 	.word	0x080052b1
 80051f0:	080052b1 	.word	0x080052b1
 80051f4:	080052b1 	.word	0x080052b1
 80051f8:	080052b1 	.word	0x080052b1
 80051fc:	080052b1 	.word	0x080052b1
 8005200:	080052b1 	.word	0x080052b1
 8005204:	080052b1 	.word	0x080052b1
 8005208:	0800528d 	.word	0x0800528d
 800520c:	080052b1 	.word	0x080052b1
 8005210:	080052b1 	.word	0x080052b1
 8005214:	080052b1 	.word	0x080052b1
 8005218:	080052b1 	.word	0x080052b1
 800521c:	080052b1 	.word	0x080052b1
 8005220:	080052b1 	.word	0x080052b1
 8005224:	080052b1 	.word	0x080052b1
 8005228:	0800529f 	.word	0x0800529f
 800522c:	080052b1 	.word	0x080052b1
 8005230:	080052b1 	.word	0x080052b1
 8005234:	080052b1 	.word	0x080052b1
 8005238:	080052b1 	.word	0x080052b1
 800523c:	080052b1 	.word	0x080052b1
 8005240:	080052b1 	.word	0x080052b1
 8005244:	080052b1 	.word	0x080052b1
 8005248:	080052b7 	.word	0x080052b7
 800524c:	080052b1 	.word	0x080052b1
 8005250:	080052b1 	.word	0x080052b1
 8005254:	080052b1 	.word	0x080052b1
 8005258:	080052b1 	.word	0x080052b1
 800525c:	080052b1 	.word	0x080052b1
 8005260:	080052b1 	.word	0x080052b1
 8005264:	080052b1 	.word	0x080052b1
 8005268:	080052b7 	.word	0x080052b7
 800526c:	080052b1 	.word	0x080052b1
 8005270:	080052b1 	.word	0x080052b1
 8005274:	080052b1 	.word	0x080052b1
 8005278:	080052b1 	.word	0x080052b1
 800527c:	080052b1 	.word	0x080052b1
 8005280:	080052b1 	.word	0x080052b1
 8005284:	080052b1 	.word	0x080052b1
 8005288:	080052b7 	.word	0x080052b7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3304      	adds	r3, #4
 8005290:	2101      	movs	r1, #1
 8005292:	4618      	mov	r0, r3
 8005294:	f001 fc18 	bl	8006ac8 <RCCEx_PLL2_Config>
 8005298:	4603      	mov	r3, r0
 800529a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800529c:	e00c      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	3324      	adds	r3, #36	; 0x24
 80052a2:	2101      	movs	r1, #1
 80052a4:	4618      	mov	r0, r3
 80052a6:	f001 fcc1 	bl	8006c2c <RCCEx_PLL3_Config>
 80052aa:	4603      	mov	r3, r0
 80052ac:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80052ae:	e003      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	75fb      	strb	r3, [r7, #23]
      break;
 80052b4:	e000      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80052b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052b8:	7dfb      	ldrb	r3, [r7, #23]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d109      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80052be:	4b24      	ldr	r3, [pc, #144]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052ca:	4921      	ldr	r1, [pc, #132]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	654b      	str	r3, [r1, #84]	; 0x54
 80052d0:	e001      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d2:	7dfb      	ldrb	r3, [r7, #23]
 80052d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d03e      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052e6:	2b05      	cmp	r3, #5
 80052e8:	d820      	bhi.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80052ea:	a201      	add	r2, pc, #4	; (adr r2, 80052f0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80052ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f0:	08005333 	.word	0x08005333
 80052f4:	08005309 	.word	0x08005309
 80052f8:	0800531b 	.word	0x0800531b
 80052fc:	08005333 	.word	0x08005333
 8005300:	08005333 	.word	0x08005333
 8005304:	08005333 	.word	0x08005333
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3304      	adds	r3, #4
 800530c:	2101      	movs	r1, #1
 800530e:	4618      	mov	r0, r3
 8005310:	f001 fbda 	bl	8006ac8 <RCCEx_PLL2_Config>
 8005314:	4603      	mov	r3, r0
 8005316:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005318:	e00c      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	3324      	adds	r3, #36	; 0x24
 800531e:	2101      	movs	r1, #1
 8005320:	4618      	mov	r0, r3
 8005322:	f001 fc83 	bl	8006c2c <RCCEx_PLL3_Config>
 8005326:	4603      	mov	r3, r0
 8005328:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800532a:	e003      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	75fb      	strb	r3, [r7, #23]
      break;
 8005330:	e000      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8005332:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005334:	7dfb      	ldrb	r3, [r7, #23]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d110      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800533a:	4b05      	ldr	r3, [pc, #20]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800533c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800533e:	f023 0207 	bic.w	r2, r3, #7
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005346:	4902      	ldr	r1, [pc, #8]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005348:	4313      	orrs	r3, r2
 800534a:	654b      	str	r3, [r1, #84]	; 0x54
 800534c:	e008      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800534e:	bf00      	nop
 8005350:	58024400 	.word	0x58024400
 8005354:	58024800 	.word	0x58024800
 8005358:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800535c:	7dfb      	ldrb	r3, [r7, #23]
 800535e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d039      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005372:	2b05      	cmp	r3, #5
 8005374:	d820      	bhi.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8005376:	a201      	add	r2, pc, #4	; (adr r2, 800537c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8005378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537c:	080053bf 	.word	0x080053bf
 8005380:	08005395 	.word	0x08005395
 8005384:	080053a7 	.word	0x080053a7
 8005388:	080053bf 	.word	0x080053bf
 800538c:	080053bf 	.word	0x080053bf
 8005390:	080053bf 	.word	0x080053bf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3304      	adds	r3, #4
 8005398:	2101      	movs	r1, #1
 800539a:	4618      	mov	r0, r3
 800539c:	f001 fb94 	bl	8006ac8 <RCCEx_PLL2_Config>
 80053a0:	4603      	mov	r3, r0
 80053a2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80053a4:	e00c      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	3324      	adds	r3, #36	; 0x24
 80053aa:	2101      	movs	r1, #1
 80053ac:	4618      	mov	r0, r3
 80053ae:	f001 fc3d 	bl	8006c2c <RCCEx_PLL3_Config>
 80053b2:	4603      	mov	r3, r0
 80053b4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80053b6:	e003      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	75fb      	strb	r3, [r7, #23]
      break;
 80053bc:	e000      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80053be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053c0:	7dfb      	ldrb	r3, [r7, #23]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10a      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053c6:	4bb7      	ldr	r3, [pc, #732]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80053c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ca:	f023 0207 	bic.w	r2, r3, #7
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d4:	49b3      	ldr	r1, [pc, #716]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	658b      	str	r3, [r1, #88]	; 0x58
 80053da:	e001      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053dc:	7dfb      	ldrb	r3, [r7, #23]
 80053de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0320 	and.w	r3, r3, #32
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d04b      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053f6:	d02e      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80053f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053fc:	d828      	bhi.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80053fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005402:	d02a      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005408:	d822      	bhi.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800540a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800540e:	d026      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005410:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005414:	d81c      	bhi.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005416:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800541a:	d010      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800541c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005420:	d816      	bhi.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005422:	2b00      	cmp	r3, #0
 8005424:	d01d      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005426:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800542a:	d111      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3304      	adds	r3, #4
 8005430:	2100      	movs	r1, #0
 8005432:	4618      	mov	r0, r3
 8005434:	f001 fb48 	bl	8006ac8 <RCCEx_PLL2_Config>
 8005438:	4603      	mov	r3, r0
 800543a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800543c:	e012      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	3324      	adds	r3, #36	; 0x24
 8005442:	2102      	movs	r1, #2
 8005444:	4618      	mov	r0, r3
 8005446:	f001 fbf1 	bl	8006c2c <RCCEx_PLL3_Config>
 800544a:	4603      	mov	r3, r0
 800544c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800544e:	e009      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	75fb      	strb	r3, [r7, #23]
      break;
 8005454:	e006      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005456:	bf00      	nop
 8005458:	e004      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800545a:	bf00      	nop
 800545c:	e002      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800545e:	bf00      	nop
 8005460:	e000      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005462:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005464:	7dfb      	ldrb	r3, [r7, #23]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10a      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800546a:	4b8e      	ldr	r3, [pc, #568]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800546c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005478:	498a      	ldr	r1, [pc, #552]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800547a:	4313      	orrs	r3, r2
 800547c:	654b      	str	r3, [r1, #84]	; 0x54
 800547e:	e001      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005480:	7dfb      	ldrb	r3, [r7, #23]
 8005482:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548c:	2b00      	cmp	r3, #0
 800548e:	d04b      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005496:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800549a:	d02e      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800549c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80054a0:	d828      	bhi.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80054a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054a6:	d02a      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80054a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ac:	d822      	bhi.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80054ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054b2:	d026      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80054b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054b8:	d81c      	bhi.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80054ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054be:	d010      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80054c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054c4:	d816      	bhi.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d01d      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80054ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ce:	d111      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	3304      	adds	r3, #4
 80054d4:	2100      	movs	r1, #0
 80054d6:	4618      	mov	r0, r3
 80054d8:	f001 faf6 	bl	8006ac8 <RCCEx_PLL2_Config>
 80054dc:	4603      	mov	r3, r0
 80054de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80054e0:	e012      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	3324      	adds	r3, #36	; 0x24
 80054e6:	2102      	movs	r1, #2
 80054e8:	4618      	mov	r0, r3
 80054ea:	f001 fb9f 	bl	8006c2c <RCCEx_PLL3_Config>
 80054ee:	4603      	mov	r3, r0
 80054f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80054f2:	e009      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	75fb      	strb	r3, [r7, #23]
      break;
 80054f8:	e006      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80054fa:	bf00      	nop
 80054fc:	e004      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80054fe:	bf00      	nop
 8005500:	e002      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005502:	bf00      	nop
 8005504:	e000      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005506:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005508:	7dfb      	ldrb	r3, [r7, #23]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10a      	bne.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800550e:	4b65      	ldr	r3, [pc, #404]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005512:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800551c:	4961      	ldr	r1, [pc, #388]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800551e:	4313      	orrs	r3, r2
 8005520:	658b      	str	r3, [r1, #88]	; 0x58
 8005522:	e001      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005524:	7dfb      	ldrb	r3, [r7, #23]
 8005526:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005530:	2b00      	cmp	r3, #0
 8005532:	d04b      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800553a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800553e:	d02e      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8005540:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005544:	d828      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800554a:	d02a      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800554c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005550:	d822      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005552:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005556:	d026      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005558:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800555c:	d81c      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800555e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005562:	d010      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005564:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005568:	d816      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800556a:	2b00      	cmp	r3, #0
 800556c:	d01d      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800556e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005572:	d111      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3304      	adds	r3, #4
 8005578:	2100      	movs	r1, #0
 800557a:	4618      	mov	r0, r3
 800557c:	f001 faa4 	bl	8006ac8 <RCCEx_PLL2_Config>
 8005580:	4603      	mov	r3, r0
 8005582:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005584:	e012      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	3324      	adds	r3, #36	; 0x24
 800558a:	2102      	movs	r1, #2
 800558c:	4618      	mov	r0, r3
 800558e:	f001 fb4d 	bl	8006c2c <RCCEx_PLL3_Config>
 8005592:	4603      	mov	r3, r0
 8005594:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005596:	e009      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	75fb      	strb	r3, [r7, #23]
      break;
 800559c:	e006      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800559e:	bf00      	nop
 80055a0:	e004      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80055a2:	bf00      	nop
 80055a4:	e002      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80055a6:	bf00      	nop
 80055a8:	e000      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80055aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055ac:	7dfb      	ldrb	r3, [r7, #23]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10a      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80055b2:	4b3c      	ldr	r3, [pc, #240]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80055b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055c0:	4938      	ldr	r1, [pc, #224]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	658b      	str	r3, [r1, #88]	; 0x58
 80055c6:	e001      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c8:	7dfb      	ldrb	r3, [r7, #23]
 80055ca:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0308 	and.w	r3, r3, #8
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d01a      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e2:	d10a      	bne.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	3324      	adds	r3, #36	; 0x24
 80055e8:	2102      	movs	r1, #2
 80055ea:	4618      	mov	r0, r3
 80055ec:	f001 fb1e 	bl	8006c2c <RCCEx_PLL3_Config>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80055fa:	4b2a      	ldr	r3, [pc, #168]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80055fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005608:	4926      	ldr	r1, [pc, #152]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800560a:	4313      	orrs	r3, r2
 800560c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0310 	and.w	r3, r3, #16
 8005616:	2b00      	cmp	r3, #0
 8005618:	d01a      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005624:	d10a      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	3324      	adds	r3, #36	; 0x24
 800562a:	2102      	movs	r1, #2
 800562c:	4618      	mov	r0, r3
 800562e:	f001 fafd 	bl	8006c2c <RCCEx_PLL3_Config>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d001      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800563c:	4b19      	ldr	r3, [pc, #100]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800563e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005640:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800564a:	4916      	ldr	r1, [pc, #88]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800564c:	4313      	orrs	r3, r2
 800564e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d036      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005662:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005666:	d01f      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005668:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800566c:	d817      	bhi.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8005672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005676:	d009      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005678:	e011      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	3304      	adds	r3, #4
 800567e:	2100      	movs	r1, #0
 8005680:	4618      	mov	r0, r3
 8005682:	f001 fa21 	bl	8006ac8 <RCCEx_PLL2_Config>
 8005686:	4603      	mov	r3, r0
 8005688:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800568a:	e00e      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3324      	adds	r3, #36	; 0x24
 8005690:	2102      	movs	r1, #2
 8005692:	4618      	mov	r0, r3
 8005694:	f001 faca 	bl	8006c2c <RCCEx_PLL3_Config>
 8005698:	4603      	mov	r3, r0
 800569a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800569c:	e005      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	75fb      	strb	r3, [r7, #23]
      break;
 80056a2:	e002      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80056a4:	58024400 	.word	0x58024400
      break;
 80056a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056aa:	7dfb      	ldrb	r3, [r7, #23]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10a      	bne.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056b0:	4b93      	ldr	r3, [pc, #588]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80056be:	4990      	ldr	r1, [pc, #576]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	658b      	str	r3, [r1, #88]	; 0x58
 80056c4:	e001      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c6:	7dfb      	ldrb	r3, [r7, #23]
 80056c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d033      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80056e0:	d01c      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80056e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80056e6:	d816      	bhi.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80056e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056ec:	d003      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80056ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056f2:	d007      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80056f4:	e00f      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056f6:	4b82      	ldr	r3, [pc, #520]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fa:	4a81      	ldr	r2, [pc, #516]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005700:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005702:	e00c      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	3324      	adds	r3, #36	; 0x24
 8005708:	2101      	movs	r1, #1
 800570a:	4618      	mov	r0, r3
 800570c:	f001 fa8e 	bl	8006c2c <RCCEx_PLL3_Config>
 8005710:	4603      	mov	r3, r0
 8005712:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005714:	e003      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	75fb      	strb	r3, [r7, #23]
      break;
 800571a:	e000      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800571c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800571e:	7dfb      	ldrb	r3, [r7, #23]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10a      	bne.n	800573a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005724:	4b76      	ldr	r3, [pc, #472]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005728:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005732:	4973      	ldr	r1, [pc, #460]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005734:	4313      	orrs	r3, r2
 8005736:	654b      	str	r3, [r1, #84]	; 0x54
 8005738:	e001      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800573a:	7dfb      	ldrb	r3, [r7, #23]
 800573c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d029      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8005752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005756:	d007      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005758:	e00f      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800575a:	4b69      	ldr	r3, [pc, #420]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800575c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575e:	4a68      	ldr	r2, [pc, #416]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005764:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005766:	e00b      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3304      	adds	r3, #4
 800576c:	2102      	movs	r1, #2
 800576e:	4618      	mov	r0, r3
 8005770:	f001 f9aa 	bl	8006ac8 <RCCEx_PLL2_Config>
 8005774:	4603      	mov	r3, r0
 8005776:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005778:	e002      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	75fb      	strb	r3, [r7, #23]
      break;
 800577e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005780:	7dfb      	ldrb	r3, [r7, #23]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d109      	bne.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005786:	4b5e      	ldr	r3, [pc, #376]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005792:	495b      	ldr	r1, [pc, #364]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005794:	4313      	orrs	r3, r2
 8005796:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005798:	e001      	b.n	800579e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800579a:	7dfb      	ldrb	r3, [r7, #23]
 800579c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00a      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	3324      	adds	r3, #36	; 0x24
 80057ae:	2102      	movs	r1, #2
 80057b0:	4618      	mov	r0, r3
 80057b2:	f001 fa3b 	bl	8006c2c <RCCEx_PLL3_Config>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d001      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d030      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057d4:	d017      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80057d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057da:	d811      	bhi.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80057dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057e0:	d013      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80057e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057e6:	d80b      	bhi.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d010      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80057ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057f0:	d106      	bne.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057f2:	4b43      	ldr	r3, [pc, #268]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80057f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f6:	4a42      	ldr	r2, [pc, #264]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80057f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80057fe:	e007      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	75fb      	strb	r3, [r7, #23]
      break;
 8005804:	e004      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005806:	bf00      	nop
 8005808:	e002      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800580a:	bf00      	nop
 800580c:	e000      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800580e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005810:	7dfb      	ldrb	r3, [r7, #23]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d109      	bne.n	800582a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005816:	4b3a      	ldr	r3, [pc, #232]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005822:	4937      	ldr	r1, [pc, #220]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005824:	4313      	orrs	r3, r2
 8005826:	654b      	str	r3, [r1, #84]	; 0x54
 8005828:	e001      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800582a:	7dfb      	ldrb	r3, [r7, #23]
 800582c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d008      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800583a:	4b31      	ldr	r3, [pc, #196]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800583c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800583e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005846:	492e      	ldr	r1, [pc, #184]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005848:	4313      	orrs	r3, r2
 800584a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d009      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005858:	4b29      	ldr	r3, [pc, #164]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005866:	4926      	ldr	r1, [pc, #152]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005868:	4313      	orrs	r3, r2
 800586a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d008      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005878:	4b21      	ldr	r3, [pc, #132]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800587a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800587c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005884:	491e      	ldr	r1, [pc, #120]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005886:	4313      	orrs	r3, r2
 8005888:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00d      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005896:	4b1a      	ldr	r3, [pc, #104]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	4a19      	ldr	r2, [pc, #100]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800589c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058a0:	6113      	str	r3, [r2, #16]
 80058a2:	4b17      	ldr	r3, [pc, #92]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80058a4:	691a      	ldr	r2, [r3, #16]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80058ac:	4914      	ldr	r1, [pc, #80]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	da08      	bge.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80058ba:	4b11      	ldr	r3, [pc, #68]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80058bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c6:	490e      	ldr	r1, [pc, #56]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d009      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80058d8:	4b09      	ldr	r3, [pc, #36]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80058da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e6:	4906      	ldr	r1, [pc, #24]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80058ec:	7dbb      	ldrb	r3, [r7, #22]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	e000      	b.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3718      	adds	r7, #24
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	58024400 	.word	0x58024400

08005904 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b090      	sub	sp, #64	; 0x40
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005912:	f040 8095 	bne.w	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005916:	4bae      	ldr	r3, [pc, #696]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800591a:	f003 0307 	and.w	r3, r3, #7
 800591e:	633b      	str	r3, [r7, #48]	; 0x30
 8005920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005922:	2b04      	cmp	r3, #4
 8005924:	f200 8088 	bhi.w	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005928:	a201      	add	r2, pc, #4	; (adr r2, 8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800592a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592e:	bf00      	nop
 8005930:	08005945 	.word	0x08005945
 8005934:	0800596d 	.word	0x0800596d
 8005938:	08005995 	.word	0x08005995
 800593c:	08005a31 	.word	0x08005a31
 8005940:	080059bd 	.word	0x080059bd

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005944:	4ba2      	ldr	r3, [pc, #648]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800594c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005950:	d108      	bne.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005956:	4618      	mov	r0, r3
 8005958:	f000 ff64 	bl	8006824 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005960:	f000 bc95 	b.w	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005964:	2300      	movs	r3, #0
 8005966:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005968:	f000 bc91 	b.w	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800596c:	4b98      	ldr	r3, [pc, #608]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005974:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005978:	d108      	bne.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800597a:	f107 0318 	add.w	r3, r7, #24
 800597e:	4618      	mov	r0, r3
 8005980:	f000 fca8 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005988:	f000 bc81 	b.w	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800598c:	2300      	movs	r3, #0
 800598e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005990:	f000 bc7d 	b.w	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005994:	4b8e      	ldr	r3, [pc, #568]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800599c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059a0:	d108      	bne.n	80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059a2:	f107 030c 	add.w	r3, r7, #12
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 fde8 	bl	800657c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80059b0:	f000 bc6d 	b.w	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80059b4:	2300      	movs	r3, #0
 80059b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059b8:	f000 bc69 	b.w	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80059bc:	4b84      	ldr	r3, [pc, #528]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80059be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059c4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80059c6:	4b82      	ldr	r3, [pc, #520]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0304 	and.w	r3, r3, #4
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	d10c      	bne.n	80059ec <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80059d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d109      	bne.n	80059ec <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80059d8:	4b7d      	ldr	r3, [pc, #500]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	08db      	lsrs	r3, r3, #3
 80059de:	f003 0303 	and.w	r3, r3, #3
 80059e2:	4a7c      	ldr	r2, [pc, #496]	; (8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80059e4:	fa22 f303 	lsr.w	r3, r2, r3
 80059e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059ea:	e01f      	b.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80059ec:	4b78      	ldr	r3, [pc, #480]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059f8:	d106      	bne.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80059fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a00:	d102      	bne.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005a02:	4b75      	ldr	r3, [pc, #468]	; (8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005a04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a06:	e011      	b.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a08:	4b71      	ldr	r3, [pc, #452]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a14:	d106      	bne.n	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8005a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a1c:	d102      	bne.n	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005a1e:	4b6f      	ldr	r3, [pc, #444]	; (8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005a20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a22:	e003      	b.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005a24:	2300      	movs	r3, #0
 8005a26:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005a28:	f000 bc31 	b.w	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005a2c:	f000 bc2f 	b.w	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005a30:	4b6b      	ldr	r3, [pc, #428]	; (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005a32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a34:	f000 bc2b 	b.w	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a3c:	f000 bc27 	b.w	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a46:	f040 8095 	bne.w	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005a4a:	4b61      	ldr	r3, [pc, #388]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a4e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005a52:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a5a:	d04d      	beq.n	8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a62:	f200 8084 	bhi.w	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	2bc0      	cmp	r3, #192	; 0xc0
 8005a6a:	d07d      	beq.n	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6e:	2bc0      	cmp	r3, #192	; 0xc0
 8005a70:	d87d      	bhi.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a74:	2b80      	cmp	r3, #128	; 0x80
 8005a76:	d02d      	beq.n	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8005a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7a:	2b80      	cmp	r3, #128	; 0x80
 8005a7c:	d877      	bhi.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d003      	beq.n	8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8005a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a86:	2b40      	cmp	r3, #64	; 0x40
 8005a88:	d012      	beq.n	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8005a8a:	e070      	b.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a8c:	4b50      	ldr	r3, [pc, #320]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a98:	d107      	bne.n	8005aaa <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 fec0 	bl	8006824 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005aa8:	e3f1      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005aae:	e3ee      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ab0:	4b47      	ldr	r3, [pc, #284]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ab8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005abc:	d107      	bne.n	8005ace <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005abe:	f107 0318 	add.w	r3, r7, #24
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 fc06 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005acc:	e3df      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ad2:	e3dc      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ad4:	4b3e      	ldr	r3, [pc, #248]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005adc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ae0:	d107      	bne.n	8005af2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ae2:	f107 030c 	add.w	r3, r7, #12
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 fd48 	bl	800657c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005af0:	e3cd      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005af2:	2300      	movs	r3, #0
 8005af4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005af6:	e3ca      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005af8:	4b35      	ldr	r3, [pc, #212]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005afc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b00:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b02:	4b33      	ldr	r3, [pc, #204]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0304 	and.w	r3, r3, #4
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d10c      	bne.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8005b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d109      	bne.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b14:	4b2e      	ldr	r3, [pc, #184]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	08db      	lsrs	r3, r3, #3
 8005b1a:	f003 0303 	and.w	r3, r3, #3
 8005b1e:	4a2d      	ldr	r2, [pc, #180]	; (8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005b20:	fa22 f303 	lsr.w	r3, r2, r3
 8005b24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b26:	e01e      	b.n	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b28:	4b29      	ldr	r3, [pc, #164]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b34:	d106      	bne.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8005b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b3c:	d102      	bne.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005b3e:	4b26      	ldr	r3, [pc, #152]	; (8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005b40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b42:	e010      	b.n	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005b44:	4b22      	ldr	r3, [pc, #136]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b50:	d106      	bne.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8005b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b58:	d102      	bne.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005b5a:	4b20      	ldr	r3, [pc, #128]	; (8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b5e:	e002      	b.n	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005b64:	e393      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005b66:	e392      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005b68:	4b1d      	ldr	r3, [pc, #116]	; (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b6c:	e38f      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b72:	e38c      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b7a:	f040 80a7 	bne.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8005b7e:	4b14      	ldr	r3, [pc, #80]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b82:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005b86:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b8e:	d05f      	beq.n	8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8005b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b96:	f200 8096 	bhi.w	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005ba0:	f000 808e 	beq.w	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005baa:	f200 808c 	bhi.w	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bb4:	d03a      	beq.n	8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bbc:	f200 8083 	bhi.w	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00e      	beq.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bcc:	d01c      	beq.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005bce:	e07a      	b.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005bd0:	58024400 	.word	0x58024400
 8005bd4:	03d09000 	.word	0x03d09000
 8005bd8:	003d0900 	.word	0x003d0900
 8005bdc:	007a1200 	.word	0x007a1200
 8005be0:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005be4:	4baa      	ldr	r3, [pc, #680]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bf0:	d107      	bne.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 fe14 	bl	8006824 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c00:	e345      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005c02:	2300      	movs	r3, #0
 8005c04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c06:	e342      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c08:	4ba1      	ldr	r3, [pc, #644]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c14:	d107      	bne.n	8005c26 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c16:	f107 0318 	add.w	r3, r7, #24
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f000 fb5a 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c24:	e333      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005c26:	2300      	movs	r3, #0
 8005c28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c2a:	e330      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c2c:	4b98      	ldr	r3, [pc, #608]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c38:	d107      	bne.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c3a:	f107 030c 	add.w	r3, r7, #12
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 fc9c 	bl	800657c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c48:	e321      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c4e:	e31e      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005c50:	4b8f      	ldr	r3, [pc, #572]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c58:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c5a:	4b8d      	ldr	r3, [pc, #564]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0304 	and.w	r3, r3, #4
 8005c62:	2b04      	cmp	r3, #4
 8005c64:	d10c      	bne.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8005c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d109      	bne.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c6c:	4b88      	ldr	r3, [pc, #544]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	08db      	lsrs	r3, r3, #3
 8005c72:	f003 0303 	and.w	r3, r3, #3
 8005c76:	4a87      	ldr	r2, [pc, #540]	; (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005c78:	fa22 f303 	lsr.w	r3, r2, r3
 8005c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c7e:	e01e      	b.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c80:	4b83      	ldr	r3, [pc, #524]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c8c:	d106      	bne.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8005c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c94:	d102      	bne.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005c96:	4b80      	ldr	r3, [pc, #512]	; (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005c98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c9a:	e010      	b.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c9c:	4b7c      	ldr	r3, [pc, #496]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ca4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ca8:	d106      	bne.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8005caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cb0:	d102      	bne.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005cb2:	4b7a      	ldr	r3, [pc, #488]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cb6:	e002      	b.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005cbc:	e2e7      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005cbe:	e2e6      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005cc0:	4b77      	ldr	r3, [pc, #476]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cc4:	e2e3      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cca:	e2e0      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cd2:	f040 809c 	bne.w	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005cd6:	4b6e      	ldr	r3, [pc, #440]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cda:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005cde:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ce6:	d054      	beq.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cee:	f200 808b 	bhi.w	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005cf8:	f000 8083 	beq.w	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d02:	f200 8081 	bhi.w	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d0c:	d02f      	beq.n	8005d6e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d14:	d878      	bhi.n	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d004      	beq.n	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d22:	d012      	beq.n	8005d4a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8005d24:	e070      	b.n	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d26:	4b5a      	ldr	r3, [pc, #360]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d32:	d107      	bne.n	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 fd73 	bl	8006824 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d40:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005d42:	e2a4      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005d44:	2300      	movs	r3, #0
 8005d46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d48:	e2a1      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d4a:	4b51      	ldr	r3, [pc, #324]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d56:	d107      	bne.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d58:	f107 0318 	add.w	r3, r7, #24
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f000 fab9 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8005d66:	e292      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d6c:	e28f      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d6e:	4b48      	ldr	r3, [pc, #288]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d7a:	d107      	bne.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d7c:	f107 030c 	add.w	r3, r7, #12
 8005d80:	4618      	mov	r0, r3
 8005d82:	f000 fbfb 	bl	800657c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005d8a:	e280      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d90:	e27d      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005d92:	4b3f      	ldr	r3, [pc, #252]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d9a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d9c:	4b3c      	ldr	r3, [pc, #240]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	2b04      	cmp	r3, #4
 8005da6:	d10c      	bne.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8005da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d109      	bne.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005dae:	4b38      	ldr	r3, [pc, #224]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	08db      	lsrs	r3, r3, #3
 8005db4:	f003 0303 	and.w	r3, r3, #3
 8005db8:	4a36      	ldr	r2, [pc, #216]	; (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005dba:	fa22 f303 	lsr.w	r3, r2, r3
 8005dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dc0:	e01e      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005dc2:	4b33      	ldr	r3, [pc, #204]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dce:	d106      	bne.n	8005dde <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8005dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dd6:	d102      	bne.n	8005dde <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005dd8:	4b2f      	ldr	r3, [pc, #188]	; (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ddc:	e010      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005dde:	4b2c      	ldr	r3, [pc, #176]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dea:	d106      	bne.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005df2:	d102      	bne.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005df4:	4b29      	ldr	r3, [pc, #164]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005df8:	e002      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005dfe:	e246      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005e00:	e245      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005e02:	4b27      	ldr	r3, [pc, #156]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005e04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e06:	e242      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e0c:	e23f      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e14:	f040 80a8 	bne.w	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005e18:	4b1d      	ldr	r3, [pc, #116]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e1c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005e20:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e28:	d060      	beq.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8005e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e30:	f200 8097 	bhi.w	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e3a:	f000 808f 	beq.w	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8005e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e44:	f200 808d 	bhi.w	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e4e:	d03b      	beq.n	8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8005e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e56:	f200 8084 	bhi.w	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d004      	beq.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8005e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e66:	d01d      	beq.n	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8005e68:	e07b      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e6a:	4b09      	ldr	r3, [pc, #36]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e76:	d107      	bne.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 fcd1 	bl	8006824 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005e86:	e202      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e8c:	e1ff      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005e8e:	bf00      	nop
 8005e90:	58024400 	.word	0x58024400
 8005e94:	03d09000 	.word	0x03d09000
 8005e98:	003d0900 	.word	0x003d0900
 8005e9c:	007a1200 	.word	0x007a1200
 8005ea0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ea4:	4ba3      	ldr	r3, [pc, #652]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005eac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005eb0:	d107      	bne.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005eb2:	f107 0318 	add.w	r3, r7, #24
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 fa0c 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005ec0:	e1e5      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ec6:	e1e2      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ec8:	4b9a      	ldr	r3, [pc, #616]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ed4:	d107      	bne.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ed6:	f107 030c 	add.w	r3, r7, #12
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 fb4e 	bl	800657c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005ee4:	e1d3      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005eea:	e1d0      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005eec:	4b91      	ldr	r3, [pc, #580]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ef0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ef4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ef6:	4b8f      	ldr	r3, [pc, #572]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0304 	and.w	r3, r3, #4
 8005efe:	2b04      	cmp	r3, #4
 8005f00:	d10c      	bne.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8005f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d109      	bne.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f08:	4b8a      	ldr	r3, [pc, #552]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	08db      	lsrs	r3, r3, #3
 8005f0e:	f003 0303 	and.w	r3, r3, #3
 8005f12:	4a89      	ldr	r2, [pc, #548]	; (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005f14:	fa22 f303 	lsr.w	r3, r2, r3
 8005f18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f1a:	e01e      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f1c:	4b85      	ldr	r3, [pc, #532]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f28:	d106      	bne.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8005f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f30:	d102      	bne.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005f32:	4b82      	ldr	r3, [pc, #520]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005f34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f36:	e010      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f38:	4b7e      	ldr	r3, [pc, #504]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f44:	d106      	bne.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f4c:	d102      	bne.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005f4e:	4b7c      	ldr	r3, [pc, #496]	; (8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005f50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f52:	e002      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005f54:	2300      	movs	r3, #0
 8005f56:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005f58:	e199      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005f5a:	e198      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005f5c:	4b79      	ldr	r3, [pc, #484]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f60:	e195      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005f62:	2300      	movs	r3, #0
 8005f64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f66:	e192      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005f6e:	d173      	bne.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005f70:	4b70      	ldr	r3, [pc, #448]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f78:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f80:	d02f      	beq.n	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8005f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f88:	d863      	bhi.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d004      	beq.n	8005f9a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8005f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f96:	d012      	beq.n	8005fbe <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8005f98:	e05b      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f9a:	4b66      	ldr	r3, [pc, #408]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fa6:	d107      	bne.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fa8:	f107 0318 	add.w	r3, r7, #24
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 f991 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005fb6:	e16a      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fbc:	e167      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005fbe:	4b5d      	ldr	r3, [pc, #372]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fca:	d107      	bne.n	8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fcc:	f107 030c 	add.w	r3, r7, #12
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f000 fad3 	bl	800657c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005fda:	e158      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fe0:	e155      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005fe2:	4b54      	ldr	r3, [pc, #336]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fe6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005fea:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005fec:	4b51      	ldr	r3, [pc, #324]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0304 	and.w	r3, r3, #4
 8005ff4:	2b04      	cmp	r3, #4
 8005ff6:	d10c      	bne.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8005ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d109      	bne.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ffe:	4b4d      	ldr	r3, [pc, #308]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	08db      	lsrs	r3, r3, #3
 8006004:	f003 0303 	and.w	r3, r3, #3
 8006008:	4a4b      	ldr	r2, [pc, #300]	; (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800600a:	fa22 f303 	lsr.w	r3, r2, r3
 800600e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006010:	e01e      	b.n	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006012:	4b48      	ldr	r3, [pc, #288]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800601e:	d106      	bne.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8006020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006022:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006026:	d102      	bne.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006028:	4b44      	ldr	r3, [pc, #272]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800602a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800602c:	e010      	b.n	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800602e:	4b41      	ldr	r3, [pc, #260]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006036:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800603a:	d106      	bne.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800603c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006042:	d102      	bne.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006044:	4b3e      	ldr	r3, [pc, #248]	; (8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006048:	e002      	b.n	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800604a:	2300      	movs	r3, #0
 800604c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800604e:	e11e      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006050:	e11d      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006052:	2300      	movs	r3, #0
 8006054:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006056:	e11a      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800605e:	d133      	bne.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006060:	4b34      	ldr	r3, [pc, #208]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006068:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800606a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606c:	2b00      	cmp	r3, #0
 800606e:	d004      	beq.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8006070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006076:	d012      	beq.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8006078:	e023      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800607a:	4b2e      	ldr	r3, [pc, #184]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006082:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006086:	d107      	bne.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800608c:	4618      	mov	r0, r3
 800608e:	f000 fbc9 	bl	8006824 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006094:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006096:	e0fa      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006098:	2300      	movs	r3, #0
 800609a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800609c:	e0f7      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800609e:	4b25      	ldr	r3, [pc, #148]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060aa:	d107      	bne.n	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060ac:	f107 0318 	add.w	r3, r7, #24
 80060b0:	4618      	mov	r0, r3
 80060b2:	f000 f90f 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80060b6:	6a3b      	ldr	r3, [r7, #32]
 80060b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80060ba:	e0e8      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80060bc:	2300      	movs	r3, #0
 80060be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060c0:	e0e5      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80060c2:	2300      	movs	r3, #0
 80060c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060c6:	e0e2      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060ce:	f040 808f 	bne.w	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80060d2:	4b18      	ldr	r3, [pc, #96]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80060d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80060da:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80060dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060e2:	d075      	beq.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 80060e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060ea:	d87e      	bhi.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80060ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060f2:	d060      	beq.n	80061b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80060f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060fa:	d876      	bhi.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80060fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006102:	d045      	beq.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8006104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006106:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800610a:	d86e      	bhi.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800610c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006112:	d02b      	beq.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8006114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006116:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800611a:	d866      	bhi.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800611c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611e:	2b00      	cmp	r3, #0
 8006120:	d004      	beq.n	800612c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8006122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006124:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006128:	d00e      	beq.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800612a:	e05e      	b.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800612c:	f000 f8bc 	bl	80062a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006130:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006132:	e0ac      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006134:	58024400 	.word	0x58024400
 8006138:	03d09000 	.word	0x03d09000
 800613c:	003d0900 	.word	0x003d0900
 8006140:	007a1200 	.word	0x007a1200
 8006144:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006148:	4b53      	ldr	r3, [pc, #332]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006150:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006154:	d107      	bne.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006156:	f107 0318 	add.w	r3, r7, #24
 800615a:	4618      	mov	r0, r3
 800615c:	f000 f8ba 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006164:	e093      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006166:	2300      	movs	r3, #0
 8006168:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800616a:	e090      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800616c:	4b4a      	ldr	r3, [pc, #296]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006174:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006178:	d107      	bne.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800617a:	f107 030c 	add.w	r3, r7, #12
 800617e:	4618      	mov	r0, r3
 8006180:	f000 f9fc 	bl	800657c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006188:	e081      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800618a:	2300      	movs	r3, #0
 800618c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800618e:	e07e      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006190:	4b41      	ldr	r3, [pc, #260]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0304 	and.w	r3, r3, #4
 8006198:	2b04      	cmp	r3, #4
 800619a:	d109      	bne.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800619c:	4b3e      	ldr	r3, [pc, #248]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	08db      	lsrs	r3, r3, #3
 80061a2:	f003 0303 	and.w	r3, r3, #3
 80061a6:	4a3d      	ldr	r2, [pc, #244]	; (800629c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80061a8:	fa22 f303 	lsr.w	r3, r2, r3
 80061ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80061ae:	e06e      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80061b0:	2300      	movs	r3, #0
 80061b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061b4:	e06b      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80061b6:	4b38      	ldr	r3, [pc, #224]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061c2:	d102      	bne.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 80061c4:	4b36      	ldr	r3, [pc, #216]	; (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80061c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80061c8:	e061      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80061ca:	2300      	movs	r3, #0
 80061cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061ce:	e05e      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80061d0:	4b31      	ldr	r3, [pc, #196]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061dc:	d102      	bne.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 80061de:	4b31      	ldr	r3, [pc, #196]	; (80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80061e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80061e2:	e054      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80061e4:	2300      	movs	r3, #0
 80061e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061e8:	e051      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80061ea:	2300      	movs	r3, #0
 80061ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061ee:	e04e      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061f6:	d148      	bne.n	800628a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80061f8:	4b27      	ldr	r3, [pc, #156]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80061fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006200:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006204:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006208:	d02a      	beq.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800620a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006210:	d838      	bhi.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006214:	2b00      	cmp	r3, #0
 8006216:	d004      	beq.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800621e:	d00d      	beq.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8006220:	e030      	b.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006222:	4b1d      	ldr	r3, [pc, #116]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800622a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800622e:	d102      	bne.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8006230:	4b1c      	ldr	r3, [pc, #112]	; (80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006232:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006234:	e02b      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006236:	2300      	movs	r3, #0
 8006238:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800623a:	e028      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800623c:	4b16      	ldr	r3, [pc, #88]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006244:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006248:	d107      	bne.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800624a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800624e:	4618      	mov	r0, r3
 8006250:	f000 fae8 	bl	8006824 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006256:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006258:	e019      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800625a:	2300      	movs	r3, #0
 800625c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800625e:	e016      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006260:	4b0d      	ldr	r3, [pc, #52]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006268:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800626c:	d107      	bne.n	800627e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800626e:	f107 0318 	add.w	r3, r7, #24
 8006272:	4618      	mov	r0, r3
 8006274:	f000 f82e 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800627c:	e007      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800627e:	2300      	movs	r3, #0
 8006280:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006282:	e004      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006284:	2300      	movs	r3, #0
 8006286:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006288:	e001      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800628a:	2300      	movs	r3, #0
 800628c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800628e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006290:	4618      	mov	r0, r3
 8006292:	3740      	adds	r7, #64	; 0x40
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	58024400 	.word	0x58024400
 800629c:	03d09000 	.word	0x03d09000
 80062a0:	003d0900 	.word	0x003d0900
 80062a4:	007a1200 	.word	0x007a1200

080062a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80062ac:	f7fe fb8e 	bl	80049cc <HAL_RCC_GetHCLKFreq>
 80062b0:	4602      	mov	r2, r0
 80062b2:	4b06      	ldr	r3, [pc, #24]	; (80062cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	091b      	lsrs	r3, r3, #4
 80062b8:	f003 0307 	and.w	r3, r3, #7
 80062bc:	4904      	ldr	r1, [pc, #16]	; (80062d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80062be:	5ccb      	ldrb	r3, [r1, r3]
 80062c0:	f003 031f 	and.w	r3, r3, #31
 80062c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	58024400 	.word	0x58024400
 80062d0:	0800a254 	.word	0x0800a254

080062d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b089      	sub	sp, #36	; 0x24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062dc:	4ba1      	ldr	r3, [pc, #644]	; (8006564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e0:	f003 0303 	and.w	r3, r3, #3
 80062e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80062e6:	4b9f      	ldr	r3, [pc, #636]	; (8006564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ea:	0b1b      	lsrs	r3, r3, #12
 80062ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80062f2:	4b9c      	ldr	r3, [pc, #624]	; (8006564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f6:	091b      	lsrs	r3, r3, #4
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80062fe:	4b99      	ldr	r3, [pc, #612]	; (8006564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006302:	08db      	lsrs	r3, r3, #3
 8006304:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	fb02 f303 	mul.w	r3, r2, r3
 800630e:	ee07 3a90 	vmov	s15, r3
 8006312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006316:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	2b00      	cmp	r3, #0
 800631e:	f000 8111 	beq.w	8006544 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	2b02      	cmp	r3, #2
 8006326:	f000 8083 	beq.w	8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	2b02      	cmp	r3, #2
 800632e:	f200 80a1 	bhi.w	8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d003      	beq.n	8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d056      	beq.n	80063ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800633e:	e099      	b.n	8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006340:	4b88      	ldr	r3, [pc, #544]	; (8006564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0320 	and.w	r3, r3, #32
 8006348:	2b00      	cmp	r3, #0
 800634a:	d02d      	beq.n	80063a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800634c:	4b85      	ldr	r3, [pc, #532]	; (8006564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	08db      	lsrs	r3, r3, #3
 8006352:	f003 0303 	and.w	r3, r3, #3
 8006356:	4a84      	ldr	r2, [pc, #528]	; (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006358:	fa22 f303 	lsr.w	r3, r2, r3
 800635c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	ee07 3a90 	vmov	s15, r3
 8006364:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	ee07 3a90 	vmov	s15, r3
 800636e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006376:	4b7b      	ldr	r3, [pc, #492]	; (8006564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800637e:	ee07 3a90 	vmov	s15, r3
 8006382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006386:	ed97 6a03 	vldr	s12, [r7, #12]
 800638a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800656c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800638e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800639a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800639e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80063a6:	e087      	b.n	80064b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	ee07 3a90 	vmov	s15, r3
 80063ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80063b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ba:	4b6a      	ldr	r3, [pc, #424]	; (8006564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063c2:	ee07 3a90 	vmov	s15, r3
 80063c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80063ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800656c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063ea:	e065      	b.n	80064b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	ee07 3a90 	vmov	s15, r3
 80063f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80063fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063fe:	4b59      	ldr	r3, [pc, #356]	; (8006564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006406:	ee07 3a90 	vmov	s15, r3
 800640a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800640e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006412:	eddf 5a56 	vldr	s11, [pc, #344]	; 800656c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800641a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800641e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800642a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800642e:	e043      	b.n	80064b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	ee07 3a90 	vmov	s15, r3
 8006436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800643a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800643e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006442:	4b48      	ldr	r3, [pc, #288]	; (8006564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800644a:	ee07 3a90 	vmov	s15, r3
 800644e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006452:	ed97 6a03 	vldr	s12, [r7, #12]
 8006456:	eddf 5a45 	vldr	s11, [pc, #276]	; 800656c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800645a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800645e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800646a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800646e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006472:	e021      	b.n	80064b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	ee07 3a90 	vmov	s15, r3
 800647a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800647e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006486:	4b37      	ldr	r3, [pc, #220]	; (8006564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800648e:	ee07 3a90 	vmov	s15, r3
 8006492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006496:	ed97 6a03 	vldr	s12, [r7, #12]
 800649a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800656c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800649e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80064b8:	4b2a      	ldr	r3, [pc, #168]	; (8006564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064bc:	0a5b      	lsrs	r3, r3, #9
 80064be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064c2:	ee07 3a90 	vmov	s15, r3
 80064c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80064d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064de:	ee17 2a90 	vmov	r2, s15
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80064e6:	4b1f      	ldr	r3, [pc, #124]	; (8006564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ea:	0c1b      	lsrs	r3, r3, #16
 80064ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064f0:	ee07 3a90 	vmov	s15, r3
 80064f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006500:	edd7 6a07 	vldr	s13, [r7, #28]
 8006504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800650c:	ee17 2a90 	vmov	r2, s15
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006514:	4b13      	ldr	r3, [pc, #76]	; (8006564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006518:	0e1b      	lsrs	r3, r3, #24
 800651a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800651e:	ee07 3a90 	vmov	s15, r3
 8006522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006526:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800652a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800652e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800653a:	ee17 2a90 	vmov	r2, s15
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006542:	e008      	b.n	8006556 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	609a      	str	r2, [r3, #8]
}
 8006556:	bf00      	nop
 8006558:	3724      	adds	r7, #36	; 0x24
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	58024400 	.word	0x58024400
 8006568:	03d09000 	.word	0x03d09000
 800656c:	46000000 	.word	0x46000000
 8006570:	4c742400 	.word	0x4c742400
 8006574:	4a742400 	.word	0x4a742400
 8006578:	4af42400 	.word	0x4af42400

0800657c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800657c:	b480      	push	{r7}
 800657e:	b089      	sub	sp, #36	; 0x24
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006584:	4ba1      	ldr	r3, [pc, #644]	; (800680c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006588:	f003 0303 	and.w	r3, r3, #3
 800658c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800658e:	4b9f      	ldr	r3, [pc, #636]	; (800680c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006592:	0d1b      	lsrs	r3, r3, #20
 8006594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006598:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800659a:	4b9c      	ldr	r3, [pc, #624]	; (800680c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800659c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659e:	0a1b      	lsrs	r3, r3, #8
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80065a6:	4b99      	ldr	r3, [pc, #612]	; (800680c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065aa:	08db      	lsrs	r3, r3, #3
 80065ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	fb02 f303 	mul.w	r3, r2, r3
 80065b6:	ee07 3a90 	vmov	s15, r3
 80065ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 8111 	beq.w	80067ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	f000 8083 	beq.w	80066d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	f200 80a1 	bhi.w	800671c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d003      	beq.n	80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d056      	beq.n	8006694 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80065e6:	e099      	b.n	800671c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065e8:	4b88      	ldr	r3, [pc, #544]	; (800680c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0320 	and.w	r3, r3, #32
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d02d      	beq.n	8006650 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80065f4:	4b85      	ldr	r3, [pc, #532]	; (800680c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	08db      	lsrs	r3, r3, #3
 80065fa:	f003 0303 	and.w	r3, r3, #3
 80065fe:	4a84      	ldr	r2, [pc, #528]	; (8006810 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006600:	fa22 f303 	lsr.w	r3, r2, r3
 8006604:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	ee07 3a90 	vmov	s15, r3
 800660c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	ee07 3a90 	vmov	s15, r3
 8006616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800661a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800661e:	4b7b      	ldr	r3, [pc, #492]	; (800680c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006626:	ee07 3a90 	vmov	s15, r3
 800662a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800662e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006632:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006814 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800663a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800663e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800664a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800664e:	e087      	b.n	8006760 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	ee07 3a90 	vmov	s15, r3
 8006656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800665a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006818 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800665e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006662:	4b6a      	ldr	r3, [pc, #424]	; (800680c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800666a:	ee07 3a90 	vmov	s15, r3
 800666e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006672:	ed97 6a03 	vldr	s12, [r7, #12]
 8006676:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006814 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800667a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800667e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800668a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800668e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006692:	e065      	b.n	8006760 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	ee07 3a90 	vmov	s15, r3
 800669a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800669e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800681c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80066a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066a6:	4b59      	ldr	r3, [pc, #356]	; (800680c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ae:	ee07 3a90 	vmov	s15, r3
 80066b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80066ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006814 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066d6:	e043      	b.n	8006760 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	ee07 3a90 	vmov	s15, r3
 80066de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006820 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80066e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ea:	4b48      	ldr	r3, [pc, #288]	; (800680c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066f2:	ee07 3a90 	vmov	s15, r3
 80066f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80066fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006814 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800670a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800670e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006716:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800671a:	e021      	b.n	8006760 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	ee07 3a90 	vmov	s15, r3
 8006722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006726:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800681c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800672a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800672e:	4b37      	ldr	r3, [pc, #220]	; (800680c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006736:	ee07 3a90 	vmov	s15, r3
 800673a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800673e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006742:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006814 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800674a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800674e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800675a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800675e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006760:	4b2a      	ldr	r3, [pc, #168]	; (800680c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006764:	0a5b      	lsrs	r3, r3, #9
 8006766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800676a:	ee07 3a90 	vmov	s15, r3
 800676e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006772:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006776:	ee37 7a87 	vadd.f32	s14, s15, s14
 800677a:	edd7 6a07 	vldr	s13, [r7, #28]
 800677e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006786:	ee17 2a90 	vmov	r2, s15
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800678e:	4b1f      	ldr	r3, [pc, #124]	; (800680c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006792:	0c1b      	lsrs	r3, r3, #16
 8006794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006798:	ee07 3a90 	vmov	s15, r3
 800679c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80067ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067b4:	ee17 2a90 	vmov	r2, s15
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80067bc:	4b13      	ldr	r3, [pc, #76]	; (800680c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c0:	0e1b      	lsrs	r3, r3, #24
 80067c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067c6:	ee07 3a90 	vmov	s15, r3
 80067ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80067da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067e2:	ee17 2a90 	vmov	r2, s15
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80067ea:	e008      	b.n	80067fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	609a      	str	r2, [r3, #8]
}
 80067fe:	bf00      	nop
 8006800:	3724      	adds	r7, #36	; 0x24
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	58024400 	.word	0x58024400
 8006810:	03d09000 	.word	0x03d09000
 8006814:	46000000 	.word	0x46000000
 8006818:	4c742400 	.word	0x4c742400
 800681c:	4a742400 	.word	0x4a742400
 8006820:	4af42400 	.word	0x4af42400

08006824 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006824:	b480      	push	{r7}
 8006826:	b089      	sub	sp, #36	; 0x24
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800682c:	4ba0      	ldr	r3, [pc, #640]	; (8006ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800682e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006830:	f003 0303 	and.w	r3, r3, #3
 8006834:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006836:	4b9e      	ldr	r3, [pc, #632]	; (8006ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683a:	091b      	lsrs	r3, r3, #4
 800683c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006840:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006842:	4b9b      	ldr	r3, [pc, #620]	; (8006ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800684c:	4b98      	ldr	r3, [pc, #608]	; (8006ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800684e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006850:	08db      	lsrs	r3, r3, #3
 8006852:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	fb02 f303 	mul.w	r3, r2, r3
 800685c:	ee07 3a90 	vmov	s15, r3
 8006860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006864:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	2b00      	cmp	r3, #0
 800686c:	f000 8111 	beq.w	8006a92 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	2b02      	cmp	r3, #2
 8006874:	f000 8083 	beq.w	800697e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	2b02      	cmp	r3, #2
 800687c:	f200 80a1 	bhi.w	80069c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d056      	beq.n	800693a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800688c:	e099      	b.n	80069c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800688e:	4b88      	ldr	r3, [pc, #544]	; (8006ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0320 	and.w	r3, r3, #32
 8006896:	2b00      	cmp	r3, #0
 8006898:	d02d      	beq.n	80068f6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800689a:	4b85      	ldr	r3, [pc, #532]	; (8006ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	08db      	lsrs	r3, r3, #3
 80068a0:	f003 0303 	and.w	r3, r3, #3
 80068a4:	4a83      	ldr	r2, [pc, #524]	; (8006ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80068a6:	fa22 f303 	lsr.w	r3, r2, r3
 80068aa:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	ee07 3a90 	vmov	s15, r3
 80068b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	ee07 3a90 	vmov	s15, r3
 80068bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068c4:	4b7a      	ldr	r3, [pc, #488]	; (8006ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068cc:	ee07 3a90 	vmov	s15, r3
 80068d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80068d8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80068dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068f0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80068f4:	e087      	b.n	8006a06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	ee07 3a90 	vmov	s15, r3
 80068fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006900:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006abc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006904:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006908:	4b69      	ldr	r3, [pc, #420]	; (8006ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800690a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006910:	ee07 3a90 	vmov	s15, r3
 8006914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006918:	ed97 6a03 	vldr	s12, [r7, #12]
 800691c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006920:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006924:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006928:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800692c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006934:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006938:	e065      	b.n	8006a06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	ee07 3a90 	vmov	s15, r3
 8006940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006944:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006948:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800694c:	4b58      	ldr	r3, [pc, #352]	; (8006ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800694e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006954:	ee07 3a90 	vmov	s15, r3
 8006958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800695c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006960:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006964:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006968:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800696c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006970:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006978:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800697c:	e043      	b.n	8006a06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	ee07 3a90 	vmov	s15, r3
 8006984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006988:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800698c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006990:	4b47      	ldr	r3, [pc, #284]	; (8006ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006998:	ee07 3a90 	vmov	s15, r3
 800699c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80069a4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80069a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069c0:	e021      	b.n	8006a06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	ee07 3a90 	vmov	s15, r3
 80069c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069cc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006abc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80069d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069d4:	4b36      	ldr	r3, [pc, #216]	; (8006ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80069d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069dc:	ee07 3a90 	vmov	s15, r3
 80069e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80069e8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80069ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a00:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a04:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006a06:	4b2a      	ldr	r3, [pc, #168]	; (8006ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0a:	0a5b      	lsrs	r3, r3, #9
 8006a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a10:	ee07 3a90 	vmov	s15, r3
 8006a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a20:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a2c:	ee17 2a90 	vmov	r2, s15
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006a34:	4b1e      	ldr	r3, [pc, #120]	; (8006ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a38:	0c1b      	lsrs	r3, r3, #16
 8006a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a3e:	ee07 3a90 	vmov	s15, r3
 8006a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a5a:	ee17 2a90 	vmov	r2, s15
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006a62:	4b13      	ldr	r3, [pc, #76]	; (8006ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a66:	0e1b      	lsrs	r3, r3, #24
 8006a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a6c:	ee07 3a90 	vmov	s15, r3
 8006a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a88:	ee17 2a90 	vmov	r2, s15
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006a90:	e008      	b.n	8006aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	609a      	str	r2, [r3, #8]
}
 8006aa4:	bf00      	nop
 8006aa6:	3724      	adds	r7, #36	; 0x24
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	58024400 	.word	0x58024400
 8006ab4:	03d09000 	.word	0x03d09000
 8006ab8:	46000000 	.word	0x46000000
 8006abc:	4c742400 	.word	0x4c742400
 8006ac0:	4a742400 	.word	0x4a742400
 8006ac4:	4af42400 	.word	0x4af42400

08006ac8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ad6:	4b53      	ldr	r3, [pc, #332]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ada:	f003 0303 	and.w	r3, r3, #3
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d101      	bne.n	8006ae6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e099      	b.n	8006c1a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006ae6:	4b4f      	ldr	r3, [pc, #316]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a4e      	ldr	r2, [pc, #312]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006aec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006af2:	f7fb fab7 	bl	8002064 <HAL_GetTick>
 8006af6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006af8:	e008      	b.n	8006b0c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006afa:	f7fb fab3 	bl	8002064 <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d901      	bls.n	8006b0c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e086      	b.n	8006c1a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006b0c:	4b45      	ldr	r3, [pc, #276]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1f0      	bne.n	8006afa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006b18:	4b42      	ldr	r3, [pc, #264]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	031b      	lsls	r3, r3, #12
 8006b26:	493f      	ldr	r1, [pc, #252]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	628b      	str	r3, [r1, #40]	; 0x28
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	3b01      	subs	r3, #1
 8006b32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	025b      	lsls	r3, r3, #9
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	431a      	orrs	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	3b01      	subs	r3, #1
 8006b48:	041b      	lsls	r3, r3, #16
 8006b4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	3b01      	subs	r3, #1
 8006b56:	061b      	lsls	r3, r3, #24
 8006b58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006b5c:	4931      	ldr	r1, [pc, #196]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006b62:	4b30      	ldr	r3, [pc, #192]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	492d      	ldr	r1, [pc, #180]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006b70:	4313      	orrs	r3, r2
 8006b72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006b74:	4b2b      	ldr	r3, [pc, #172]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b78:	f023 0220 	bic.w	r2, r3, #32
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	4928      	ldr	r1, [pc, #160]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006b86:	4b27      	ldr	r3, [pc, #156]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8a:	4a26      	ldr	r2, [pc, #152]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006b8c:	f023 0310 	bic.w	r3, r3, #16
 8006b90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006b92:	4b24      	ldr	r3, [pc, #144]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006b94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b96:	4b24      	ldr	r3, [pc, #144]	; (8006c28 <RCCEx_PLL2_Config+0x160>)
 8006b98:	4013      	ands	r3, r2
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	69d2      	ldr	r2, [r2, #28]
 8006b9e:	00d2      	lsls	r2, r2, #3
 8006ba0:	4920      	ldr	r1, [pc, #128]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006ba6:	4b1f      	ldr	r3, [pc, #124]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006baa:	4a1e      	ldr	r2, [pc, #120]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006bac:	f043 0310 	orr.w	r3, r3, #16
 8006bb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d106      	bne.n	8006bc6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006bb8:	4b1a      	ldr	r3, [pc, #104]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbc:	4a19      	ldr	r2, [pc, #100]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006bbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006bc4:	e00f      	b.n	8006be6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d106      	bne.n	8006bda <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006bcc:	4b15      	ldr	r3, [pc, #84]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd0:	4a14      	ldr	r2, [pc, #80]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006bd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006bd8:	e005      	b.n	8006be6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006bda:	4b12      	ldr	r3, [pc, #72]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bde:	4a11      	ldr	r2, [pc, #68]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006be0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006be4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006be6:	4b0f      	ldr	r3, [pc, #60]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a0e      	ldr	r2, [pc, #56]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006bec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006bf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bf2:	f7fb fa37 	bl	8002064 <HAL_GetTick>
 8006bf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006bf8:	e008      	b.n	8006c0c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006bfa:	f7fb fa33 	bl	8002064 <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d901      	bls.n	8006c0c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e006      	b.n	8006c1a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006c0c:	4b05      	ldr	r3, [pc, #20]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d0f0      	beq.n	8006bfa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	58024400 	.word	0x58024400
 8006c28:	ffff0007 	.word	0xffff0007

08006c2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c36:	2300      	movs	r3, #0
 8006c38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c3a:	4b53      	ldr	r3, [pc, #332]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3e:	f003 0303 	and.w	r3, r3, #3
 8006c42:	2b03      	cmp	r3, #3
 8006c44:	d101      	bne.n	8006c4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e099      	b.n	8006d7e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006c4a:	4b4f      	ldr	r3, [pc, #316]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a4e      	ldr	r2, [pc, #312]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c56:	f7fb fa05 	bl	8002064 <HAL_GetTick>
 8006c5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006c5c:	e008      	b.n	8006c70 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006c5e:	f7fb fa01 	bl	8002064 <HAL_GetTick>
 8006c62:	4602      	mov	r2, r0
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d901      	bls.n	8006c70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e086      	b.n	8006d7e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006c70:	4b45      	ldr	r3, [pc, #276]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1f0      	bne.n	8006c5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006c7c:	4b42      	ldr	r3, [pc, #264]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c80:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	051b      	lsls	r3, r3, #20
 8006c8a:	493f      	ldr	r1, [pc, #252]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	628b      	str	r3, [r1, #40]	; 0x28
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	3b01      	subs	r3, #1
 8006c96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	025b      	lsls	r3, r3, #9
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	431a      	orrs	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	3b01      	subs	r3, #1
 8006cac:	041b      	lsls	r3, r3, #16
 8006cae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006cb2:	431a      	orrs	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	061b      	lsls	r3, r3, #24
 8006cbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006cc0:	4931      	ldr	r1, [pc, #196]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006cc6:	4b30      	ldr	r3, [pc, #192]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	492d      	ldr	r1, [pc, #180]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006cd8:	4b2b      	ldr	r3, [pc, #172]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cdc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	4928      	ldr	r1, [pc, #160]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006cea:	4b27      	ldr	r3, [pc, #156]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cee:	4a26      	ldr	r2, [pc, #152]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cf4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006cf6:	4b24      	ldr	r3, [pc, #144]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cfa:	4b24      	ldr	r3, [pc, #144]	; (8006d8c <RCCEx_PLL3_Config+0x160>)
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	69d2      	ldr	r2, [r2, #28]
 8006d02:	00d2      	lsls	r2, r2, #3
 8006d04:	4920      	ldr	r1, [pc, #128]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006d06:	4313      	orrs	r3, r2
 8006d08:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006d0a:	4b1f      	ldr	r3, [pc, #124]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0e:	4a1e      	ldr	r2, [pc, #120]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d106      	bne.n	8006d2a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006d1c:	4b1a      	ldr	r3, [pc, #104]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d20:	4a19      	ldr	r2, [pc, #100]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006d22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006d26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d28:	e00f      	b.n	8006d4a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d106      	bne.n	8006d3e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006d30:	4b15      	ldr	r3, [pc, #84]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d34:	4a14      	ldr	r2, [pc, #80]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006d36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d3c:	e005      	b.n	8006d4a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006d3e:	4b12      	ldr	r3, [pc, #72]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d42:	4a11      	ldr	r2, [pc, #68]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006d44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006d4a:	4b0f      	ldr	r3, [pc, #60]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a0e      	ldr	r2, [pc, #56]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d56:	f7fb f985 	bl	8002064 <HAL_GetTick>
 8006d5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006d5c:	e008      	b.n	8006d70 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006d5e:	f7fb f981 	bl	8002064 <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d901      	bls.n	8006d70 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e006      	b.n	8006d7e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006d70:	4b05      	ldr	r3, [pc, #20]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d0f0      	beq.n	8006d5e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	58024400 	.word	0x58024400
 8006d8c:	ffff0007 	.word	0xffff0007

08006d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e049      	b.n	8006e36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d106      	bne.n	8006dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7fa fe06 	bl	80019c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	3304      	adds	r3, #4
 8006dcc:	4619      	mov	r1, r3
 8006dce:	4610      	mov	r0, r2
 8006dd0:	f000 fce4 	bl	800779c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b082      	sub	sp, #8
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e049      	b.n	8006ee4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d106      	bne.n	8006e6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f841 	bl	8006eec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2202      	movs	r2, #2
 8006e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	3304      	adds	r3, #4
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	4610      	mov	r0, r2
 8006e7e:	f000 fc8d 	bl	800779c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d109      	bne.n	8006f24 <HAL_TIM_PWM_Start+0x24>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	bf14      	ite	ne
 8006f1c:	2301      	movne	r3, #1
 8006f1e:	2300      	moveq	r3, #0
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	e03c      	b.n	8006f9e <HAL_TIM_PWM_Start+0x9e>
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	d109      	bne.n	8006f3e <HAL_TIM_PWM_Start+0x3e>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	bf14      	ite	ne
 8006f36:	2301      	movne	r3, #1
 8006f38:	2300      	moveq	r3, #0
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	e02f      	b.n	8006f9e <HAL_TIM_PWM_Start+0x9e>
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b08      	cmp	r3, #8
 8006f42:	d109      	bne.n	8006f58 <HAL_TIM_PWM_Start+0x58>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	bf14      	ite	ne
 8006f50:	2301      	movne	r3, #1
 8006f52:	2300      	moveq	r3, #0
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	e022      	b.n	8006f9e <HAL_TIM_PWM_Start+0x9e>
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	2b0c      	cmp	r3, #12
 8006f5c:	d109      	bne.n	8006f72 <HAL_TIM_PWM_Start+0x72>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	bf14      	ite	ne
 8006f6a:	2301      	movne	r3, #1
 8006f6c:	2300      	moveq	r3, #0
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	e015      	b.n	8006f9e <HAL_TIM_PWM_Start+0x9e>
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b10      	cmp	r3, #16
 8006f76:	d109      	bne.n	8006f8c <HAL_TIM_PWM_Start+0x8c>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	bf14      	ite	ne
 8006f84:	2301      	movne	r3, #1
 8006f86:	2300      	moveq	r3, #0
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	e008      	b.n	8006f9e <HAL_TIM_PWM_Start+0x9e>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	bf14      	ite	ne
 8006f98:	2301      	movne	r3, #1
 8006f9a:	2300      	moveq	r3, #0
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e0a1      	b.n	80070ea <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d104      	bne.n	8006fb6 <HAL_TIM_PWM_Start+0xb6>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2202      	movs	r2, #2
 8006fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fb4:	e023      	b.n	8006ffe <HAL_TIM_PWM_Start+0xfe>
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	2b04      	cmp	r3, #4
 8006fba:	d104      	bne.n	8006fc6 <HAL_TIM_PWM_Start+0xc6>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fc4:	e01b      	b.n	8006ffe <HAL_TIM_PWM_Start+0xfe>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2b08      	cmp	r3, #8
 8006fca:	d104      	bne.n	8006fd6 <HAL_TIM_PWM_Start+0xd6>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2202      	movs	r2, #2
 8006fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fd4:	e013      	b.n	8006ffe <HAL_TIM_PWM_Start+0xfe>
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b0c      	cmp	r3, #12
 8006fda:	d104      	bne.n	8006fe6 <HAL_TIM_PWM_Start+0xe6>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2202      	movs	r2, #2
 8006fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fe4:	e00b      	b.n	8006ffe <HAL_TIM_PWM_Start+0xfe>
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2b10      	cmp	r3, #16
 8006fea:	d104      	bne.n	8006ff6 <HAL_TIM_PWM_Start+0xf6>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ff4:	e003      	b.n	8006ffe <HAL_TIM_PWM_Start+0xfe>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2202      	movs	r2, #2
 8006ffa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2201      	movs	r2, #1
 8007004:	6839      	ldr	r1, [r7, #0]
 8007006:	4618      	mov	r0, r3
 8007008:	f000 ffd6 	bl	8007fb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a38      	ldr	r2, [pc, #224]	; (80070f4 <HAL_TIM_PWM_Start+0x1f4>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d013      	beq.n	800703e <HAL_TIM_PWM_Start+0x13e>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a37      	ldr	r2, [pc, #220]	; (80070f8 <HAL_TIM_PWM_Start+0x1f8>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d00e      	beq.n	800703e <HAL_TIM_PWM_Start+0x13e>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a35      	ldr	r2, [pc, #212]	; (80070fc <HAL_TIM_PWM_Start+0x1fc>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d009      	beq.n	800703e <HAL_TIM_PWM_Start+0x13e>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a34      	ldr	r2, [pc, #208]	; (8007100 <HAL_TIM_PWM_Start+0x200>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d004      	beq.n	800703e <HAL_TIM_PWM_Start+0x13e>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a32      	ldr	r2, [pc, #200]	; (8007104 <HAL_TIM_PWM_Start+0x204>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d101      	bne.n	8007042 <HAL_TIM_PWM_Start+0x142>
 800703e:	2301      	movs	r3, #1
 8007040:	e000      	b.n	8007044 <HAL_TIM_PWM_Start+0x144>
 8007042:	2300      	movs	r3, #0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d007      	beq.n	8007058 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007056:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a25      	ldr	r2, [pc, #148]	; (80070f4 <HAL_TIM_PWM_Start+0x1f4>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d022      	beq.n	80070a8 <HAL_TIM_PWM_Start+0x1a8>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800706a:	d01d      	beq.n	80070a8 <HAL_TIM_PWM_Start+0x1a8>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a25      	ldr	r2, [pc, #148]	; (8007108 <HAL_TIM_PWM_Start+0x208>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d018      	beq.n	80070a8 <HAL_TIM_PWM_Start+0x1a8>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a24      	ldr	r2, [pc, #144]	; (800710c <HAL_TIM_PWM_Start+0x20c>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d013      	beq.n	80070a8 <HAL_TIM_PWM_Start+0x1a8>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a22      	ldr	r2, [pc, #136]	; (8007110 <HAL_TIM_PWM_Start+0x210>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d00e      	beq.n	80070a8 <HAL_TIM_PWM_Start+0x1a8>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a1a      	ldr	r2, [pc, #104]	; (80070f8 <HAL_TIM_PWM_Start+0x1f8>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d009      	beq.n	80070a8 <HAL_TIM_PWM_Start+0x1a8>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a1e      	ldr	r2, [pc, #120]	; (8007114 <HAL_TIM_PWM_Start+0x214>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d004      	beq.n	80070a8 <HAL_TIM_PWM_Start+0x1a8>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a16      	ldr	r2, [pc, #88]	; (80070fc <HAL_TIM_PWM_Start+0x1fc>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d115      	bne.n	80070d4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	689a      	ldr	r2, [r3, #8]
 80070ae:	4b1a      	ldr	r3, [pc, #104]	; (8007118 <HAL_TIM_PWM_Start+0x218>)
 80070b0:	4013      	ands	r3, r2
 80070b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2b06      	cmp	r3, #6
 80070b8:	d015      	beq.n	80070e6 <HAL_TIM_PWM_Start+0x1e6>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070c0:	d011      	beq.n	80070e6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f042 0201 	orr.w	r2, r2, #1
 80070d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070d2:	e008      	b.n	80070e6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f042 0201 	orr.w	r2, r2, #1
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	e000      	b.n	80070e8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	40010000 	.word	0x40010000
 80070f8:	40010400 	.word	0x40010400
 80070fc:	40014000 	.word	0x40014000
 8007100:	40014400 	.word	0x40014400
 8007104:	40014800 	.word	0x40014800
 8007108:	40000400 	.word	0x40000400
 800710c:	40000800 	.word	0x40000800
 8007110:	40000c00 	.word	0x40000c00
 8007114:	40001800 	.word	0x40001800
 8007118:	00010007 	.word	0x00010007

0800711c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d101      	bne.n	8007130 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e08f      	b.n	8007250 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b00      	cmp	r3, #0
 800713a:	d106      	bne.n	800714a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f7fa fc8f 	bl	8001a68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2202      	movs	r2, #2
 800714e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	6899      	ldr	r1, [r3, #8]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	4b3e      	ldr	r3, [pc, #248]	; (8007258 <HAL_TIM_Encoder_Init+0x13c>)
 800715e:	400b      	ands	r3, r1
 8007160:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	3304      	adds	r3, #4
 800716a:	4619      	mov	r1, r3
 800716c:	4610      	mov	r0, r2
 800716e:	f000 fb15 	bl	800779c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	4313      	orrs	r3, r2
 8007192:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	4b31      	ldr	r3, [pc, #196]	; (800725c <HAL_TIM_Encoder_Init+0x140>)
 8007198:	4013      	ands	r3, r2
 800719a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	689a      	ldr	r2, [r3, #8]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	699b      	ldr	r3, [r3, #24]
 80071a4:	021b      	lsls	r3, r3, #8
 80071a6:	4313      	orrs	r3, r2
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80071ae:	693a      	ldr	r2, [r7, #16]
 80071b0:	4b2b      	ldr	r3, [pc, #172]	; (8007260 <HAL_TIM_Encoder_Init+0x144>)
 80071b2:	4013      	ands	r3, r2
 80071b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	4b2a      	ldr	r3, [pc, #168]	; (8007264 <HAL_TIM_Encoder_Init+0x148>)
 80071ba:	4013      	ands	r3, r2
 80071bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	68da      	ldr	r2, [r3, #12]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	021b      	lsls	r3, r3, #8
 80071c8:	4313      	orrs	r3, r2
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	011a      	lsls	r2, r3, #4
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	031b      	lsls	r3, r3, #12
 80071dc:	4313      	orrs	r3, r2
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80071ea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80071f2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	011b      	lsls	r3, r3, #4
 80071fe:	4313      	orrs	r3, r2
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	4313      	orrs	r3, r2
 8007204:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3718      	adds	r7, #24
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	fffebff8 	.word	0xfffebff8
 800725c:	fffffcfc 	.word	0xfffffcfc
 8007260:	fffff3f3 	.word	0xfffff3f3
 8007264:	ffff0f0f 	.word	0xffff0f0f

08007268 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007278:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007280:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007288:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007290:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d110      	bne.n	80072ba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007298:	7bfb      	ldrb	r3, [r7, #15]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d102      	bne.n	80072a4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800729e:	7b7b      	ldrb	r3, [r7, #13]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d001      	beq.n	80072a8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e069      	b.n	800737c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2202      	movs	r2, #2
 80072ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072b8:	e031      	b.n	800731e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b04      	cmp	r3, #4
 80072be:	d110      	bne.n	80072e2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80072c0:	7bbb      	ldrb	r3, [r7, #14]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d102      	bne.n	80072cc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80072c6:	7b3b      	ldrb	r3, [r7, #12]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d001      	beq.n	80072d0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e055      	b.n	800737c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2202      	movs	r2, #2
 80072d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2202      	movs	r2, #2
 80072dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072e0:	e01d      	b.n	800731e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80072e2:	7bfb      	ldrb	r3, [r7, #15]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d108      	bne.n	80072fa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80072e8:	7bbb      	ldrb	r3, [r7, #14]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d105      	bne.n	80072fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80072ee:	7b7b      	ldrb	r3, [r7, #13]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d102      	bne.n	80072fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80072f4:	7b3b      	ldrb	r3, [r7, #12]
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d001      	beq.n	80072fe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e03e      	b.n	800737c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2202      	movs	r2, #2
 8007302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2202      	movs	r2, #2
 800730a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2202      	movs	r2, #2
 8007312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2202      	movs	r2, #2
 800731a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d003      	beq.n	800732c <HAL_TIM_Encoder_Start+0xc4>
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	2b04      	cmp	r3, #4
 8007328:	d008      	beq.n	800733c <HAL_TIM_Encoder_Start+0xd4>
 800732a:	e00f      	b.n	800734c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2201      	movs	r2, #1
 8007332:	2100      	movs	r1, #0
 8007334:	4618      	mov	r0, r3
 8007336:	f000 fe3f 	bl	8007fb8 <TIM_CCxChannelCmd>
      break;
 800733a:	e016      	b.n	800736a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2201      	movs	r2, #1
 8007342:	2104      	movs	r1, #4
 8007344:	4618      	mov	r0, r3
 8007346:	f000 fe37 	bl	8007fb8 <TIM_CCxChannelCmd>
      break;
 800734a:	e00e      	b.n	800736a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2201      	movs	r2, #1
 8007352:	2100      	movs	r1, #0
 8007354:	4618      	mov	r0, r3
 8007356:	f000 fe2f 	bl	8007fb8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2201      	movs	r2, #1
 8007360:	2104      	movs	r1, #4
 8007362:	4618      	mov	r0, r3
 8007364:	f000 fe28 	bl	8007fb8 <TIM_CCxChannelCmd>
      break;
 8007368:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f042 0201 	orr.w	r2, r2, #1
 8007378:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007390:	2300      	movs	r3, #0
 8007392:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800739a:	2b01      	cmp	r3, #1
 800739c:	d101      	bne.n	80073a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800739e:	2302      	movs	r3, #2
 80073a0:	e0ff      	b.n	80075a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b14      	cmp	r3, #20
 80073ae:	f200 80f0 	bhi.w	8007592 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80073b2:	a201      	add	r2, pc, #4	; (adr r2, 80073b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80073b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b8:	0800740d 	.word	0x0800740d
 80073bc:	08007593 	.word	0x08007593
 80073c0:	08007593 	.word	0x08007593
 80073c4:	08007593 	.word	0x08007593
 80073c8:	0800744d 	.word	0x0800744d
 80073cc:	08007593 	.word	0x08007593
 80073d0:	08007593 	.word	0x08007593
 80073d4:	08007593 	.word	0x08007593
 80073d8:	0800748f 	.word	0x0800748f
 80073dc:	08007593 	.word	0x08007593
 80073e0:	08007593 	.word	0x08007593
 80073e4:	08007593 	.word	0x08007593
 80073e8:	080074cf 	.word	0x080074cf
 80073ec:	08007593 	.word	0x08007593
 80073f0:	08007593 	.word	0x08007593
 80073f4:	08007593 	.word	0x08007593
 80073f8:	08007511 	.word	0x08007511
 80073fc:	08007593 	.word	0x08007593
 8007400:	08007593 	.word	0x08007593
 8007404:	08007593 	.word	0x08007593
 8007408:	08007551 	.word	0x08007551
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68b9      	ldr	r1, [r7, #8]
 8007412:	4618      	mov	r0, r3
 8007414:	f000 fa5c 	bl	80078d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	699a      	ldr	r2, [r3, #24]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f042 0208 	orr.w	r2, r2, #8
 8007426:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	699a      	ldr	r2, [r3, #24]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f022 0204 	bic.w	r2, r2, #4
 8007436:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6999      	ldr	r1, [r3, #24]
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	691a      	ldr	r2, [r3, #16]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	430a      	orrs	r2, r1
 8007448:	619a      	str	r2, [r3, #24]
      break;
 800744a:	e0a5      	b.n	8007598 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68b9      	ldr	r1, [r7, #8]
 8007452:	4618      	mov	r0, r3
 8007454:	f000 facc 	bl	80079f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	699a      	ldr	r2, [r3, #24]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	699a      	ldr	r2, [r3, #24]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6999      	ldr	r1, [r3, #24]
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	021a      	lsls	r2, r3, #8
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	430a      	orrs	r2, r1
 800748a:	619a      	str	r2, [r3, #24]
      break;
 800748c:	e084      	b.n	8007598 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68b9      	ldr	r1, [r7, #8]
 8007494:	4618      	mov	r0, r3
 8007496:	f000 fb35 	bl	8007b04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	69da      	ldr	r2, [r3, #28]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f042 0208 	orr.w	r2, r2, #8
 80074a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	69da      	ldr	r2, [r3, #28]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 0204 	bic.w	r2, r2, #4
 80074b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	69d9      	ldr	r1, [r3, #28]
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	691a      	ldr	r2, [r3, #16]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	430a      	orrs	r2, r1
 80074ca:	61da      	str	r2, [r3, #28]
      break;
 80074cc:	e064      	b.n	8007598 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68b9      	ldr	r1, [r7, #8]
 80074d4:	4618      	mov	r0, r3
 80074d6:	f000 fb9d 	bl	8007c14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	69da      	ldr	r2, [r3, #28]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	69da      	ldr	r2, [r3, #28]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	69d9      	ldr	r1, [r3, #28]
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	021a      	lsls	r2, r3, #8
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	430a      	orrs	r2, r1
 800750c:	61da      	str	r2, [r3, #28]
      break;
 800750e:	e043      	b.n	8007598 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68b9      	ldr	r1, [r7, #8]
 8007516:	4618      	mov	r0, r3
 8007518:	f000 fbe6 	bl	8007ce8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f042 0208 	orr.w	r2, r2, #8
 800752a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f022 0204 	bic.w	r2, r2, #4
 800753a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	691a      	ldr	r2, [r3, #16]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	430a      	orrs	r2, r1
 800754c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800754e:	e023      	b.n	8007598 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68b9      	ldr	r1, [r7, #8]
 8007556:	4618      	mov	r0, r3
 8007558:	f000 fc2a 	bl	8007db0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800756a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800757a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	021a      	lsls	r2, r3, #8
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	430a      	orrs	r2, r1
 800758e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007590:	e002      	b.n	8007598 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	75fb      	strb	r3, [r7, #23]
      break;
 8007596:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2200      	movs	r2, #0
 800759c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3718      	adds	r7, #24
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop

080075ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075b6:	2300      	movs	r3, #0
 80075b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d101      	bne.n	80075c8 <HAL_TIM_ConfigClockSource+0x1c>
 80075c4:	2302      	movs	r3, #2
 80075c6:	e0dc      	b.n	8007782 <HAL_TIM_ConfigClockSource+0x1d6>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2202      	movs	r2, #2
 80075d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	4b6a      	ldr	r3, [pc, #424]	; (800778c <HAL_TIM_ConfigClockSource+0x1e0>)
 80075e4:	4013      	ands	r3, r2
 80075e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a64      	ldr	r2, [pc, #400]	; (8007790 <HAL_TIM_ConfigClockSource+0x1e4>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	f000 80a9 	beq.w	8007756 <HAL_TIM_ConfigClockSource+0x1aa>
 8007604:	4a62      	ldr	r2, [pc, #392]	; (8007790 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007606:	4293      	cmp	r3, r2
 8007608:	f200 80ae 	bhi.w	8007768 <HAL_TIM_ConfigClockSource+0x1bc>
 800760c:	4a61      	ldr	r2, [pc, #388]	; (8007794 <HAL_TIM_ConfigClockSource+0x1e8>)
 800760e:	4293      	cmp	r3, r2
 8007610:	f000 80a1 	beq.w	8007756 <HAL_TIM_ConfigClockSource+0x1aa>
 8007614:	4a5f      	ldr	r2, [pc, #380]	; (8007794 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007616:	4293      	cmp	r3, r2
 8007618:	f200 80a6 	bhi.w	8007768 <HAL_TIM_ConfigClockSource+0x1bc>
 800761c:	4a5e      	ldr	r2, [pc, #376]	; (8007798 <HAL_TIM_ConfigClockSource+0x1ec>)
 800761e:	4293      	cmp	r3, r2
 8007620:	f000 8099 	beq.w	8007756 <HAL_TIM_ConfigClockSource+0x1aa>
 8007624:	4a5c      	ldr	r2, [pc, #368]	; (8007798 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007626:	4293      	cmp	r3, r2
 8007628:	f200 809e 	bhi.w	8007768 <HAL_TIM_ConfigClockSource+0x1bc>
 800762c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007630:	f000 8091 	beq.w	8007756 <HAL_TIM_ConfigClockSource+0x1aa>
 8007634:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007638:	f200 8096 	bhi.w	8007768 <HAL_TIM_ConfigClockSource+0x1bc>
 800763c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007640:	f000 8089 	beq.w	8007756 <HAL_TIM_ConfigClockSource+0x1aa>
 8007644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007648:	f200 808e 	bhi.w	8007768 <HAL_TIM_ConfigClockSource+0x1bc>
 800764c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007650:	d03e      	beq.n	80076d0 <HAL_TIM_ConfigClockSource+0x124>
 8007652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007656:	f200 8087 	bhi.w	8007768 <HAL_TIM_ConfigClockSource+0x1bc>
 800765a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800765e:	f000 8086 	beq.w	800776e <HAL_TIM_ConfigClockSource+0x1c2>
 8007662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007666:	d87f      	bhi.n	8007768 <HAL_TIM_ConfigClockSource+0x1bc>
 8007668:	2b70      	cmp	r3, #112	; 0x70
 800766a:	d01a      	beq.n	80076a2 <HAL_TIM_ConfigClockSource+0xf6>
 800766c:	2b70      	cmp	r3, #112	; 0x70
 800766e:	d87b      	bhi.n	8007768 <HAL_TIM_ConfigClockSource+0x1bc>
 8007670:	2b60      	cmp	r3, #96	; 0x60
 8007672:	d050      	beq.n	8007716 <HAL_TIM_ConfigClockSource+0x16a>
 8007674:	2b60      	cmp	r3, #96	; 0x60
 8007676:	d877      	bhi.n	8007768 <HAL_TIM_ConfigClockSource+0x1bc>
 8007678:	2b50      	cmp	r3, #80	; 0x50
 800767a:	d03c      	beq.n	80076f6 <HAL_TIM_ConfigClockSource+0x14a>
 800767c:	2b50      	cmp	r3, #80	; 0x50
 800767e:	d873      	bhi.n	8007768 <HAL_TIM_ConfigClockSource+0x1bc>
 8007680:	2b40      	cmp	r3, #64	; 0x40
 8007682:	d058      	beq.n	8007736 <HAL_TIM_ConfigClockSource+0x18a>
 8007684:	2b40      	cmp	r3, #64	; 0x40
 8007686:	d86f      	bhi.n	8007768 <HAL_TIM_ConfigClockSource+0x1bc>
 8007688:	2b30      	cmp	r3, #48	; 0x30
 800768a:	d064      	beq.n	8007756 <HAL_TIM_ConfigClockSource+0x1aa>
 800768c:	2b30      	cmp	r3, #48	; 0x30
 800768e:	d86b      	bhi.n	8007768 <HAL_TIM_ConfigClockSource+0x1bc>
 8007690:	2b20      	cmp	r3, #32
 8007692:	d060      	beq.n	8007756 <HAL_TIM_ConfigClockSource+0x1aa>
 8007694:	2b20      	cmp	r3, #32
 8007696:	d867      	bhi.n	8007768 <HAL_TIM_ConfigClockSource+0x1bc>
 8007698:	2b00      	cmp	r3, #0
 800769a:	d05c      	beq.n	8007756 <HAL_TIM_ConfigClockSource+0x1aa>
 800769c:	2b10      	cmp	r3, #16
 800769e:	d05a      	beq.n	8007756 <HAL_TIM_ConfigClockSource+0x1aa>
 80076a0:	e062      	b.n	8007768 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6818      	ldr	r0, [r3, #0]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	6899      	ldr	r1, [r3, #8]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	685a      	ldr	r2, [r3, #4]
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	f000 fc61 	bl	8007f78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	609a      	str	r2, [r3, #8]
      break;
 80076ce:	e04f      	b.n	8007770 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6818      	ldr	r0, [r3, #0]
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	6899      	ldr	r1, [r3, #8]
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	f000 fc4a 	bl	8007f78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	689a      	ldr	r2, [r3, #8]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076f2:	609a      	str	r2, [r3, #8]
      break;
 80076f4:	e03c      	b.n	8007770 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6818      	ldr	r0, [r3, #0]
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	6859      	ldr	r1, [r3, #4]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	461a      	mov	r2, r3
 8007704:	f000 fbba 	bl	8007e7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2150      	movs	r1, #80	; 0x50
 800770e:	4618      	mov	r0, r3
 8007710:	f000 fc14 	bl	8007f3c <TIM_ITRx_SetConfig>
      break;
 8007714:	e02c      	b.n	8007770 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6818      	ldr	r0, [r3, #0]
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	6859      	ldr	r1, [r3, #4]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	461a      	mov	r2, r3
 8007724:	f000 fbd9 	bl	8007eda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2160      	movs	r1, #96	; 0x60
 800772e:	4618      	mov	r0, r3
 8007730:	f000 fc04 	bl	8007f3c <TIM_ITRx_SetConfig>
      break;
 8007734:	e01c      	b.n	8007770 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6818      	ldr	r0, [r3, #0]
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	6859      	ldr	r1, [r3, #4]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	461a      	mov	r2, r3
 8007744:	f000 fb9a 	bl	8007e7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2140      	movs	r1, #64	; 0x40
 800774e:	4618      	mov	r0, r3
 8007750:	f000 fbf4 	bl	8007f3c <TIM_ITRx_SetConfig>
      break;
 8007754:	e00c      	b.n	8007770 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4619      	mov	r1, r3
 8007760:	4610      	mov	r0, r2
 8007762:	f000 fbeb 	bl	8007f3c <TIM_ITRx_SetConfig>
      break;
 8007766:	e003      	b.n	8007770 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	73fb      	strb	r3, [r7, #15]
      break;
 800776c:	e000      	b.n	8007770 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800776e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007780:	7bfb      	ldrb	r3, [r7, #15]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	ffceff88 	.word	0xffceff88
 8007790:	00100040 	.word	0x00100040
 8007794:	00100030 	.word	0x00100030
 8007798:	00100020 	.word	0x00100020

0800779c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a40      	ldr	r2, [pc, #256]	; (80078b0 <TIM_Base_SetConfig+0x114>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d013      	beq.n	80077dc <TIM_Base_SetConfig+0x40>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ba:	d00f      	beq.n	80077dc <TIM_Base_SetConfig+0x40>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a3d      	ldr	r2, [pc, #244]	; (80078b4 <TIM_Base_SetConfig+0x118>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d00b      	beq.n	80077dc <TIM_Base_SetConfig+0x40>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a3c      	ldr	r2, [pc, #240]	; (80078b8 <TIM_Base_SetConfig+0x11c>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d007      	beq.n	80077dc <TIM_Base_SetConfig+0x40>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a3b      	ldr	r2, [pc, #236]	; (80078bc <TIM_Base_SetConfig+0x120>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d003      	beq.n	80077dc <TIM_Base_SetConfig+0x40>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a3a      	ldr	r2, [pc, #232]	; (80078c0 <TIM_Base_SetConfig+0x124>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d108      	bne.n	80077ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a2f      	ldr	r2, [pc, #188]	; (80078b0 <TIM_Base_SetConfig+0x114>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d01f      	beq.n	8007836 <TIM_Base_SetConfig+0x9a>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077fc:	d01b      	beq.n	8007836 <TIM_Base_SetConfig+0x9a>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a2c      	ldr	r2, [pc, #176]	; (80078b4 <TIM_Base_SetConfig+0x118>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d017      	beq.n	8007836 <TIM_Base_SetConfig+0x9a>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a2b      	ldr	r2, [pc, #172]	; (80078b8 <TIM_Base_SetConfig+0x11c>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d013      	beq.n	8007836 <TIM_Base_SetConfig+0x9a>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a2a      	ldr	r2, [pc, #168]	; (80078bc <TIM_Base_SetConfig+0x120>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d00f      	beq.n	8007836 <TIM_Base_SetConfig+0x9a>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a29      	ldr	r2, [pc, #164]	; (80078c0 <TIM_Base_SetConfig+0x124>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d00b      	beq.n	8007836 <TIM_Base_SetConfig+0x9a>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a28      	ldr	r2, [pc, #160]	; (80078c4 <TIM_Base_SetConfig+0x128>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d007      	beq.n	8007836 <TIM_Base_SetConfig+0x9a>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a27      	ldr	r2, [pc, #156]	; (80078c8 <TIM_Base_SetConfig+0x12c>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d003      	beq.n	8007836 <TIM_Base_SetConfig+0x9a>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a26      	ldr	r2, [pc, #152]	; (80078cc <TIM_Base_SetConfig+0x130>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d108      	bne.n	8007848 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800783c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	4313      	orrs	r3, r2
 8007846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	4313      	orrs	r3, r2
 8007854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	689a      	ldr	r2, [r3, #8]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a10      	ldr	r2, [pc, #64]	; (80078b0 <TIM_Base_SetConfig+0x114>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d00f      	beq.n	8007894 <TIM_Base_SetConfig+0xf8>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a12      	ldr	r2, [pc, #72]	; (80078c0 <TIM_Base_SetConfig+0x124>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d00b      	beq.n	8007894 <TIM_Base_SetConfig+0xf8>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a11      	ldr	r2, [pc, #68]	; (80078c4 <TIM_Base_SetConfig+0x128>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d007      	beq.n	8007894 <TIM_Base_SetConfig+0xf8>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a10      	ldr	r2, [pc, #64]	; (80078c8 <TIM_Base_SetConfig+0x12c>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d003      	beq.n	8007894 <TIM_Base_SetConfig+0xf8>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a0f      	ldr	r2, [pc, #60]	; (80078cc <TIM_Base_SetConfig+0x130>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d103      	bne.n	800789c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	691a      	ldr	r2, [r3, #16]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	615a      	str	r2, [r3, #20]
}
 80078a2:	bf00      	nop
 80078a4:	3714      	adds	r7, #20
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	40010000 	.word	0x40010000
 80078b4:	40000400 	.word	0x40000400
 80078b8:	40000800 	.word	0x40000800
 80078bc:	40000c00 	.word	0x40000c00
 80078c0:	40010400 	.word	0x40010400
 80078c4:	40014000 	.word	0x40014000
 80078c8:	40014400 	.word	0x40014400
 80078cc:	40014800 	.word	0x40014800

080078d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b087      	sub	sp, #28
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	f023 0201 	bic.w	r2, r3, #1
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	4b37      	ldr	r3, [pc, #220]	; (80079d8 <TIM_OC1_SetConfig+0x108>)
 80078fc:	4013      	ands	r3, r2
 80078fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f023 0303 	bic.w	r3, r3, #3
 8007906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	4313      	orrs	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f023 0302 	bic.w	r3, r3, #2
 8007918:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	4313      	orrs	r3, r2
 8007922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a2d      	ldr	r2, [pc, #180]	; (80079dc <TIM_OC1_SetConfig+0x10c>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d00f      	beq.n	800794c <TIM_OC1_SetConfig+0x7c>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a2c      	ldr	r2, [pc, #176]	; (80079e0 <TIM_OC1_SetConfig+0x110>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d00b      	beq.n	800794c <TIM_OC1_SetConfig+0x7c>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a2b      	ldr	r2, [pc, #172]	; (80079e4 <TIM_OC1_SetConfig+0x114>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d007      	beq.n	800794c <TIM_OC1_SetConfig+0x7c>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a2a      	ldr	r2, [pc, #168]	; (80079e8 <TIM_OC1_SetConfig+0x118>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d003      	beq.n	800794c <TIM_OC1_SetConfig+0x7c>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a29      	ldr	r2, [pc, #164]	; (80079ec <TIM_OC1_SetConfig+0x11c>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d10c      	bne.n	8007966 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	f023 0308 	bic.w	r3, r3, #8
 8007952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	697a      	ldr	r2, [r7, #20]
 800795a:	4313      	orrs	r3, r2
 800795c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	f023 0304 	bic.w	r3, r3, #4
 8007964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a1c      	ldr	r2, [pc, #112]	; (80079dc <TIM_OC1_SetConfig+0x10c>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d00f      	beq.n	800798e <TIM_OC1_SetConfig+0xbe>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a1b      	ldr	r2, [pc, #108]	; (80079e0 <TIM_OC1_SetConfig+0x110>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d00b      	beq.n	800798e <TIM_OC1_SetConfig+0xbe>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a1a      	ldr	r2, [pc, #104]	; (80079e4 <TIM_OC1_SetConfig+0x114>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d007      	beq.n	800798e <TIM_OC1_SetConfig+0xbe>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a19      	ldr	r2, [pc, #100]	; (80079e8 <TIM_OC1_SetConfig+0x118>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d003      	beq.n	800798e <TIM_OC1_SetConfig+0xbe>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a18      	ldr	r2, [pc, #96]	; (80079ec <TIM_OC1_SetConfig+0x11c>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d111      	bne.n	80079b2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800799c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	693a      	ldr	r2, [r7, #16]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	699b      	ldr	r3, [r3, #24]
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	685a      	ldr	r2, [r3, #4]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	621a      	str	r2, [r3, #32]
}
 80079cc:	bf00      	nop
 80079ce:	371c      	adds	r7, #28
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	fffeff8f 	.word	0xfffeff8f
 80079dc:	40010000 	.word	0x40010000
 80079e0:	40010400 	.word	0x40010400
 80079e4:	40014000 	.word	0x40014000
 80079e8:	40014400 	.word	0x40014400
 80079ec:	40014800 	.word	0x40014800

080079f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b087      	sub	sp, #28
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a1b      	ldr	r3, [r3, #32]
 80079fe:	f023 0210 	bic.w	r2, r3, #16
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	4b34      	ldr	r3, [pc, #208]	; (8007aec <TIM_OC2_SetConfig+0xfc>)
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	021b      	lsls	r3, r3, #8
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f023 0320 	bic.w	r3, r3, #32
 8007a3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	011b      	lsls	r3, r3, #4
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a29      	ldr	r2, [pc, #164]	; (8007af0 <TIM_OC2_SetConfig+0x100>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d003      	beq.n	8007a58 <TIM_OC2_SetConfig+0x68>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a28      	ldr	r2, [pc, #160]	; (8007af4 <TIM_OC2_SetConfig+0x104>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d10d      	bne.n	8007a74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	011b      	lsls	r3, r3, #4
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a1e      	ldr	r2, [pc, #120]	; (8007af0 <TIM_OC2_SetConfig+0x100>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d00f      	beq.n	8007a9c <TIM_OC2_SetConfig+0xac>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a1d      	ldr	r2, [pc, #116]	; (8007af4 <TIM_OC2_SetConfig+0x104>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d00b      	beq.n	8007a9c <TIM_OC2_SetConfig+0xac>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a1c      	ldr	r2, [pc, #112]	; (8007af8 <TIM_OC2_SetConfig+0x108>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d007      	beq.n	8007a9c <TIM_OC2_SetConfig+0xac>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a1b      	ldr	r2, [pc, #108]	; (8007afc <TIM_OC2_SetConfig+0x10c>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d003      	beq.n	8007a9c <TIM_OC2_SetConfig+0xac>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a1a      	ldr	r2, [pc, #104]	; (8007b00 <TIM_OC2_SetConfig+0x110>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d113      	bne.n	8007ac4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007aa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	695b      	ldr	r3, [r3, #20]
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	693a      	ldr	r2, [r7, #16]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	693a      	ldr	r2, [r7, #16]
 8007ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	685a      	ldr	r2, [r3, #4]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	697a      	ldr	r2, [r7, #20]
 8007adc:	621a      	str	r2, [r3, #32]
}
 8007ade:	bf00      	nop
 8007ae0:	371c      	adds	r7, #28
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	feff8fff 	.word	0xfeff8fff
 8007af0:	40010000 	.word	0x40010000
 8007af4:	40010400 	.word	0x40010400
 8007af8:	40014000 	.word	0x40014000
 8007afc:	40014400 	.word	0x40014400
 8007b00:	40014800 	.word	0x40014800

08007b04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b087      	sub	sp, #28
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	69db      	ldr	r3, [r3, #28]
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	4b33      	ldr	r3, [pc, #204]	; (8007bfc <TIM_OC3_SetConfig+0xf8>)
 8007b30:	4013      	ands	r3, r2
 8007b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f023 0303 	bic.w	r3, r3, #3
 8007b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	021b      	lsls	r3, r3, #8
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a28      	ldr	r2, [pc, #160]	; (8007c00 <TIM_OC3_SetConfig+0xfc>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d003      	beq.n	8007b6a <TIM_OC3_SetConfig+0x66>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a27      	ldr	r2, [pc, #156]	; (8007c04 <TIM_OC3_SetConfig+0x100>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d10d      	bne.n	8007b86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	021b      	lsls	r3, r3, #8
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a1d      	ldr	r2, [pc, #116]	; (8007c00 <TIM_OC3_SetConfig+0xfc>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d00f      	beq.n	8007bae <TIM_OC3_SetConfig+0xaa>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a1c      	ldr	r2, [pc, #112]	; (8007c04 <TIM_OC3_SetConfig+0x100>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d00b      	beq.n	8007bae <TIM_OC3_SetConfig+0xaa>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a1b      	ldr	r2, [pc, #108]	; (8007c08 <TIM_OC3_SetConfig+0x104>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d007      	beq.n	8007bae <TIM_OC3_SetConfig+0xaa>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a1a      	ldr	r2, [pc, #104]	; (8007c0c <TIM_OC3_SetConfig+0x108>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d003      	beq.n	8007bae <TIM_OC3_SetConfig+0xaa>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a19      	ldr	r2, [pc, #100]	; (8007c10 <TIM_OC3_SetConfig+0x10c>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d113      	bne.n	8007bd6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	011b      	lsls	r3, r3, #4
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	011b      	lsls	r3, r3, #4
 8007bd0:	693a      	ldr	r2, [r7, #16]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	621a      	str	r2, [r3, #32]
}
 8007bf0:	bf00      	nop
 8007bf2:	371c      	adds	r7, #28
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	fffeff8f 	.word	0xfffeff8f
 8007c00:	40010000 	.word	0x40010000
 8007c04:	40010400 	.word	0x40010400
 8007c08:	40014000 	.word	0x40014000
 8007c0c:	40014400 	.word	0x40014400
 8007c10:	40014800 	.word	0x40014800

08007c14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b087      	sub	sp, #28
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a1b      	ldr	r3, [r3, #32]
 8007c22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	69db      	ldr	r3, [r3, #28]
 8007c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	4b24      	ldr	r3, [pc, #144]	; (8007cd0 <TIM_OC4_SetConfig+0xbc>)
 8007c40:	4013      	ands	r3, r2
 8007c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	021b      	lsls	r3, r3, #8
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	031b      	lsls	r3, r3, #12
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a19      	ldr	r2, [pc, #100]	; (8007cd4 <TIM_OC4_SetConfig+0xc0>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d00f      	beq.n	8007c94 <TIM_OC4_SetConfig+0x80>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a18      	ldr	r2, [pc, #96]	; (8007cd8 <TIM_OC4_SetConfig+0xc4>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d00b      	beq.n	8007c94 <TIM_OC4_SetConfig+0x80>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a17      	ldr	r2, [pc, #92]	; (8007cdc <TIM_OC4_SetConfig+0xc8>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d007      	beq.n	8007c94 <TIM_OC4_SetConfig+0x80>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a16      	ldr	r2, [pc, #88]	; (8007ce0 <TIM_OC4_SetConfig+0xcc>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d003      	beq.n	8007c94 <TIM_OC4_SetConfig+0x80>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a15      	ldr	r2, [pc, #84]	; (8007ce4 <TIM_OC4_SetConfig+0xd0>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d109      	bne.n	8007ca8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	695b      	ldr	r3, [r3, #20]
 8007ca0:	019b      	lsls	r3, r3, #6
 8007ca2:	697a      	ldr	r2, [r7, #20]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	685a      	ldr	r2, [r3, #4]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	621a      	str	r2, [r3, #32]
}
 8007cc2:	bf00      	nop
 8007cc4:	371c      	adds	r7, #28
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	feff8fff 	.word	0xfeff8fff
 8007cd4:	40010000 	.word	0x40010000
 8007cd8:	40010400 	.word	0x40010400
 8007cdc:	40014000 	.word	0x40014000
 8007ce0:	40014400 	.word	0x40014400
 8007ce4:	40014800 	.word	0x40014800

08007ce8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b087      	sub	sp, #28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
 8007cf6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	4b21      	ldr	r3, [pc, #132]	; (8007d98 <TIM_OC5_SetConfig+0xb0>)
 8007d14:	4013      	ands	r3, r2
 8007d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007d28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	041b      	lsls	r3, r3, #16
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a18      	ldr	r2, [pc, #96]	; (8007d9c <TIM_OC5_SetConfig+0xb4>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d00f      	beq.n	8007d5e <TIM_OC5_SetConfig+0x76>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a17      	ldr	r2, [pc, #92]	; (8007da0 <TIM_OC5_SetConfig+0xb8>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d00b      	beq.n	8007d5e <TIM_OC5_SetConfig+0x76>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a16      	ldr	r2, [pc, #88]	; (8007da4 <TIM_OC5_SetConfig+0xbc>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d007      	beq.n	8007d5e <TIM_OC5_SetConfig+0x76>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a15      	ldr	r2, [pc, #84]	; (8007da8 <TIM_OC5_SetConfig+0xc0>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d003      	beq.n	8007d5e <TIM_OC5_SetConfig+0x76>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a14      	ldr	r2, [pc, #80]	; (8007dac <TIM_OC5_SetConfig+0xc4>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d109      	bne.n	8007d72 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	695b      	ldr	r3, [r3, #20]
 8007d6a:	021b      	lsls	r3, r3, #8
 8007d6c:	697a      	ldr	r2, [r7, #20]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	685a      	ldr	r2, [r3, #4]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	621a      	str	r2, [r3, #32]
}
 8007d8c:	bf00      	nop
 8007d8e:	371c      	adds	r7, #28
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr
 8007d98:	fffeff8f 	.word	0xfffeff8f
 8007d9c:	40010000 	.word	0x40010000
 8007da0:	40010400 	.word	0x40010400
 8007da4:	40014000 	.word	0x40014000
 8007da8:	40014400 	.word	0x40014400
 8007dac:	40014800 	.word	0x40014800

08007db0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b087      	sub	sp, #28
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a1b      	ldr	r3, [r3, #32]
 8007dbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a1b      	ldr	r3, [r3, #32]
 8007dca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	4b22      	ldr	r3, [pc, #136]	; (8007e64 <TIM_OC6_SetConfig+0xb4>)
 8007ddc:	4013      	ands	r3, r2
 8007dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	021b      	lsls	r3, r3, #8
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007df2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	051b      	lsls	r3, r3, #20
 8007dfa:	693a      	ldr	r2, [r7, #16]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a19      	ldr	r2, [pc, #100]	; (8007e68 <TIM_OC6_SetConfig+0xb8>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d00f      	beq.n	8007e28 <TIM_OC6_SetConfig+0x78>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a18      	ldr	r2, [pc, #96]	; (8007e6c <TIM_OC6_SetConfig+0xbc>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d00b      	beq.n	8007e28 <TIM_OC6_SetConfig+0x78>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a17      	ldr	r2, [pc, #92]	; (8007e70 <TIM_OC6_SetConfig+0xc0>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d007      	beq.n	8007e28 <TIM_OC6_SetConfig+0x78>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a16      	ldr	r2, [pc, #88]	; (8007e74 <TIM_OC6_SetConfig+0xc4>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d003      	beq.n	8007e28 <TIM_OC6_SetConfig+0x78>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a15      	ldr	r2, [pc, #84]	; (8007e78 <TIM_OC6_SetConfig+0xc8>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d109      	bne.n	8007e3c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	695b      	ldr	r3, [r3, #20]
 8007e34:	029b      	lsls	r3, r3, #10
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	685a      	ldr	r2, [r3, #4]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	693a      	ldr	r2, [r7, #16]
 8007e54:	621a      	str	r2, [r3, #32]
}
 8007e56:	bf00      	nop
 8007e58:	371c      	adds	r7, #28
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	feff8fff 	.word	0xfeff8fff
 8007e68:	40010000 	.word	0x40010000
 8007e6c:	40010400 	.word	0x40010400
 8007e70:	40014000 	.word	0x40014000
 8007e74:	40014400 	.word	0x40014400
 8007e78:	40014800 	.word	0x40014800

08007e7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b087      	sub	sp, #28
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6a1b      	ldr	r3, [r3, #32]
 8007e8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	f023 0201 	bic.w	r2, r3, #1
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ea6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	011b      	lsls	r3, r3, #4
 8007eac:	693a      	ldr	r2, [r7, #16]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	f023 030a 	bic.w	r3, r3, #10
 8007eb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007eba:	697a      	ldr	r2, [r7, #20]
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	693a      	ldr	r2, [r7, #16]
 8007ec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	621a      	str	r2, [r3, #32]
}
 8007ece:	bf00      	nop
 8007ed0:	371c      	adds	r7, #28
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr

08007eda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007eda:	b480      	push	{r7}
 8007edc:	b087      	sub	sp, #28
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	60f8      	str	r0, [r7, #12]
 8007ee2:	60b9      	str	r1, [r7, #8]
 8007ee4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	f023 0210 	bic.w	r2, r3, #16
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6a1b      	ldr	r3, [r3, #32]
 8007efc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	031b      	lsls	r3, r3, #12
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	011b      	lsls	r3, r3, #4
 8007f1c:	693a      	ldr	r2, [r7, #16]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	697a      	ldr	r2, [r7, #20]
 8007f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	693a      	ldr	r2, [r7, #16]
 8007f2c:	621a      	str	r2, [r3, #32]
}
 8007f2e:	bf00      	nop
 8007f30:	371c      	adds	r7, #28
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
	...

08007f3c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	4b09      	ldr	r3, [pc, #36]	; (8007f74 <TIM_ITRx_SetConfig+0x38>)
 8007f50:	4013      	ands	r3, r2
 8007f52:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f54:	683a      	ldr	r2, [r7, #0]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	f043 0307 	orr.w	r3, r3, #7
 8007f5e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	609a      	str	r2, [r3, #8]
}
 8007f66:	bf00      	nop
 8007f68:	3714      	adds	r7, #20
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	ffcfff8f 	.word	0xffcfff8f

08007f78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
 8007f84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	021a      	lsls	r2, r3, #8
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	431a      	orrs	r2, r3
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	697a      	ldr	r2, [r7, #20]
 8007faa:	609a      	str	r2, [r3, #8]
}
 8007fac:	bf00      	nop
 8007fae:	371c      	adds	r7, #28
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b087      	sub	sp, #28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	f003 031f 	and.w	r3, r3, #31
 8007fca:	2201      	movs	r2, #1
 8007fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6a1a      	ldr	r2, [r3, #32]
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	43db      	mvns	r3, r3
 8007fda:	401a      	ands	r2, r3
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6a1a      	ldr	r2, [r3, #32]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	f003 031f 	and.w	r3, r3, #31
 8007fea:	6879      	ldr	r1, [r7, #4]
 8007fec:	fa01 f303 	lsl.w	r3, r1, r3
 8007ff0:	431a      	orrs	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	621a      	str	r2, [r3, #32]
}
 8007ff6:	bf00      	nop
 8007ff8:	371c      	adds	r7, #28
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
	...

08008004 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008014:	2b01      	cmp	r3, #1
 8008016:	d101      	bne.n	800801c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008018:	2302      	movs	r3, #2
 800801a:	e06d      	b.n	80080f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2202      	movs	r2, #2
 8008028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a30      	ldr	r2, [pc, #192]	; (8008104 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d004      	beq.n	8008050 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a2f      	ldr	r2, [pc, #188]	; (8008108 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d108      	bne.n	8008062 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008056:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	4313      	orrs	r3, r2
 8008060:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008068:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	4313      	orrs	r3, r2
 8008072:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a20      	ldr	r2, [pc, #128]	; (8008104 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d022      	beq.n	80080cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800808e:	d01d      	beq.n	80080cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a1d      	ldr	r2, [pc, #116]	; (800810c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d018      	beq.n	80080cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a1c      	ldr	r2, [pc, #112]	; (8008110 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d013      	beq.n	80080cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a1a      	ldr	r2, [pc, #104]	; (8008114 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d00e      	beq.n	80080cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a15      	ldr	r2, [pc, #84]	; (8008108 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d009      	beq.n	80080cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a16      	ldr	r2, [pc, #88]	; (8008118 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d004      	beq.n	80080cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a15      	ldr	r2, [pc, #84]	; (800811c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d10c      	bne.n	80080e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	4313      	orrs	r3, r2
 80080dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3714      	adds	r7, #20
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr
 8008104:	40010000 	.word	0x40010000
 8008108:	40010400 	.word	0x40010400
 800810c:	40000400 	.word	0x40000400
 8008110:	40000800 	.word	0x40000800
 8008114:	40000c00 	.word	0x40000c00
 8008118:	40001800 	.word	0x40001800
 800811c:	40014000 	.word	0x40014000

08008120 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d101      	bne.n	8008132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e042      	b.n	80081b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008138:	2b00      	cmp	r3, #0
 800813a:	d106      	bne.n	800814a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f7f9 fd15 	bl	8001b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2224      	movs	r2, #36	; 0x24
 800814e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f022 0201 	bic.w	r2, r2, #1
 8008160:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 f8c2 	bl	80082ec <UART_SetConfig>
 8008168:	4603      	mov	r3, r0
 800816a:	2b01      	cmp	r3, #1
 800816c:	d101      	bne.n	8008172 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	e022      	b.n	80081b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008176:	2b00      	cmp	r3, #0
 8008178:	d002      	beq.n	8008180 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fe16 	bl	8008dac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	685a      	ldr	r2, [r3, #4]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800818e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	689a      	ldr	r2, [r3, #8]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800819e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f042 0201 	orr.w	r2, r2, #1
 80081ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 fe9d 	bl	8008ef0 <UART_CheckIdleState>
 80081b6:	4603      	mov	r3, r0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3708      	adds	r7, #8
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b08a      	sub	sp, #40	; 0x28
 80081c4:	af02      	add	r7, sp, #8
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	603b      	str	r3, [r7, #0]
 80081cc:	4613      	mov	r3, r2
 80081ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081d6:	2b20      	cmp	r3, #32
 80081d8:	f040 8083 	bne.w	80082e2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d002      	beq.n	80081e8 <HAL_UART_Transmit+0x28>
 80081e2:	88fb      	ldrh	r3, [r7, #6]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d101      	bne.n	80081ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	e07b      	b.n	80082e4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d101      	bne.n	80081fa <HAL_UART_Transmit+0x3a>
 80081f6:	2302      	movs	r3, #2
 80081f8:	e074      	b.n	80082e4 <HAL_UART_Transmit+0x124>
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2221      	movs	r2, #33	; 0x21
 800820e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008212:	f7f9 ff27 	bl	8002064 <HAL_GetTick>
 8008216:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	88fa      	ldrh	r2, [r7, #6]
 800821c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	88fa      	ldrh	r2, [r7, #6]
 8008224:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008230:	d108      	bne.n	8008244 <HAL_UART_Transmit+0x84>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d104      	bne.n	8008244 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800823a:	2300      	movs	r3, #0
 800823c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	61bb      	str	r3, [r7, #24]
 8008242:	e003      	b.n	800824c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008248:	2300      	movs	r3, #0
 800824a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008254:	e02c      	b.n	80082b0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	2200      	movs	r2, #0
 800825e:	2180      	movs	r1, #128	; 0x80
 8008260:	68f8      	ldr	r0, [r7, #12]
 8008262:	f000 fe90 	bl	8008f86 <UART_WaitOnFlagUntilTimeout>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d001      	beq.n	8008270 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800826c:	2303      	movs	r3, #3
 800826e:	e039      	b.n	80082e4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d10b      	bne.n	800828e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	881b      	ldrh	r3, [r3, #0]
 800827a:	461a      	mov	r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008284:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	3302      	adds	r3, #2
 800828a:	61bb      	str	r3, [r7, #24]
 800828c:	e007      	b.n	800829e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	781a      	ldrb	r2, [r3, #0]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	3301      	adds	r3, #1
 800829c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	3b01      	subs	r3, #1
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1cc      	bne.n	8008256 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	9300      	str	r3, [sp, #0]
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	2200      	movs	r2, #0
 80082c4:	2140      	movs	r1, #64	; 0x40
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f000 fe5d 	bl	8008f86 <UART_WaitOnFlagUntilTimeout>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d001      	beq.n	80082d6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e006      	b.n	80082e4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2220      	movs	r2, #32
 80082da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80082de:	2300      	movs	r3, #0
 80082e0:	e000      	b.n	80082e4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80082e2:	2302      	movs	r3, #2
  }
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3720      	adds	r7, #32
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082ec:	b5b0      	push	{r4, r5, r7, lr}
 80082ee:	b08e      	sub	sp, #56	; 0x38
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	689a      	ldr	r2, [r3, #8]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	431a      	orrs	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	695b      	ldr	r3, [r3, #20]
 8008308:	431a      	orrs	r2, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	69db      	ldr	r3, [r3, #28]
 800830e:	4313      	orrs	r3, r2
 8008310:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	4bbf      	ldr	r3, [pc, #764]	; (8008618 <UART_SetConfig+0x32c>)
 800831a:	4013      	ands	r3, r2
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	6812      	ldr	r2, [r2, #0]
 8008320:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008322:	430b      	orrs	r3, r1
 8008324:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	68da      	ldr	r2, [r3, #12]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	430a      	orrs	r2, r1
 800833a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4ab5      	ldr	r2, [pc, #724]	; (800861c <UART_SetConfig+0x330>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d004      	beq.n	8008356 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a1b      	ldr	r3, [r3, #32]
 8008350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008352:	4313      	orrs	r3, r2
 8008354:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	689a      	ldr	r2, [r3, #8]
 800835c:	4bb0      	ldr	r3, [pc, #704]	; (8008620 <UART_SetConfig+0x334>)
 800835e:	4013      	ands	r3, r2
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	6812      	ldr	r2, [r2, #0]
 8008364:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008366:	430b      	orrs	r3, r1
 8008368:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008370:	f023 010f 	bic.w	r1, r3, #15
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	430a      	orrs	r2, r1
 800837e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4aa7      	ldr	r2, [pc, #668]	; (8008624 <UART_SetConfig+0x338>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d176      	bne.n	8008478 <UART_SetConfig+0x18c>
 800838a:	4ba7      	ldr	r3, [pc, #668]	; (8008628 <UART_SetConfig+0x33c>)
 800838c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800838e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008392:	2b28      	cmp	r3, #40	; 0x28
 8008394:	d86c      	bhi.n	8008470 <UART_SetConfig+0x184>
 8008396:	a201      	add	r2, pc, #4	; (adr r2, 800839c <UART_SetConfig+0xb0>)
 8008398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800839c:	08008441 	.word	0x08008441
 80083a0:	08008471 	.word	0x08008471
 80083a4:	08008471 	.word	0x08008471
 80083a8:	08008471 	.word	0x08008471
 80083ac:	08008471 	.word	0x08008471
 80083b0:	08008471 	.word	0x08008471
 80083b4:	08008471 	.word	0x08008471
 80083b8:	08008471 	.word	0x08008471
 80083bc:	08008449 	.word	0x08008449
 80083c0:	08008471 	.word	0x08008471
 80083c4:	08008471 	.word	0x08008471
 80083c8:	08008471 	.word	0x08008471
 80083cc:	08008471 	.word	0x08008471
 80083d0:	08008471 	.word	0x08008471
 80083d4:	08008471 	.word	0x08008471
 80083d8:	08008471 	.word	0x08008471
 80083dc:	08008451 	.word	0x08008451
 80083e0:	08008471 	.word	0x08008471
 80083e4:	08008471 	.word	0x08008471
 80083e8:	08008471 	.word	0x08008471
 80083ec:	08008471 	.word	0x08008471
 80083f0:	08008471 	.word	0x08008471
 80083f4:	08008471 	.word	0x08008471
 80083f8:	08008471 	.word	0x08008471
 80083fc:	08008459 	.word	0x08008459
 8008400:	08008471 	.word	0x08008471
 8008404:	08008471 	.word	0x08008471
 8008408:	08008471 	.word	0x08008471
 800840c:	08008471 	.word	0x08008471
 8008410:	08008471 	.word	0x08008471
 8008414:	08008471 	.word	0x08008471
 8008418:	08008471 	.word	0x08008471
 800841c:	08008461 	.word	0x08008461
 8008420:	08008471 	.word	0x08008471
 8008424:	08008471 	.word	0x08008471
 8008428:	08008471 	.word	0x08008471
 800842c:	08008471 	.word	0x08008471
 8008430:	08008471 	.word	0x08008471
 8008434:	08008471 	.word	0x08008471
 8008438:	08008471 	.word	0x08008471
 800843c:	08008469 	.word	0x08008469
 8008440:	2301      	movs	r3, #1
 8008442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008446:	e222      	b.n	800888e <UART_SetConfig+0x5a2>
 8008448:	2304      	movs	r3, #4
 800844a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800844e:	e21e      	b.n	800888e <UART_SetConfig+0x5a2>
 8008450:	2308      	movs	r3, #8
 8008452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008456:	e21a      	b.n	800888e <UART_SetConfig+0x5a2>
 8008458:	2310      	movs	r3, #16
 800845a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800845e:	e216      	b.n	800888e <UART_SetConfig+0x5a2>
 8008460:	2320      	movs	r3, #32
 8008462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008466:	e212      	b.n	800888e <UART_SetConfig+0x5a2>
 8008468:	2340      	movs	r3, #64	; 0x40
 800846a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800846e:	e20e      	b.n	800888e <UART_SetConfig+0x5a2>
 8008470:	2380      	movs	r3, #128	; 0x80
 8008472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008476:	e20a      	b.n	800888e <UART_SetConfig+0x5a2>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a6b      	ldr	r2, [pc, #428]	; (800862c <UART_SetConfig+0x340>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d130      	bne.n	80084e4 <UART_SetConfig+0x1f8>
 8008482:	4b69      	ldr	r3, [pc, #420]	; (8008628 <UART_SetConfig+0x33c>)
 8008484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008486:	f003 0307 	and.w	r3, r3, #7
 800848a:	2b05      	cmp	r3, #5
 800848c:	d826      	bhi.n	80084dc <UART_SetConfig+0x1f0>
 800848e:	a201      	add	r2, pc, #4	; (adr r2, 8008494 <UART_SetConfig+0x1a8>)
 8008490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008494:	080084ad 	.word	0x080084ad
 8008498:	080084b5 	.word	0x080084b5
 800849c:	080084bd 	.word	0x080084bd
 80084a0:	080084c5 	.word	0x080084c5
 80084a4:	080084cd 	.word	0x080084cd
 80084a8:	080084d5 	.word	0x080084d5
 80084ac:	2300      	movs	r3, #0
 80084ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084b2:	e1ec      	b.n	800888e <UART_SetConfig+0x5a2>
 80084b4:	2304      	movs	r3, #4
 80084b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084ba:	e1e8      	b.n	800888e <UART_SetConfig+0x5a2>
 80084bc:	2308      	movs	r3, #8
 80084be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084c2:	e1e4      	b.n	800888e <UART_SetConfig+0x5a2>
 80084c4:	2310      	movs	r3, #16
 80084c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084ca:	e1e0      	b.n	800888e <UART_SetConfig+0x5a2>
 80084cc:	2320      	movs	r3, #32
 80084ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084d2:	e1dc      	b.n	800888e <UART_SetConfig+0x5a2>
 80084d4:	2340      	movs	r3, #64	; 0x40
 80084d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084da:	e1d8      	b.n	800888e <UART_SetConfig+0x5a2>
 80084dc:	2380      	movs	r3, #128	; 0x80
 80084de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084e2:	e1d4      	b.n	800888e <UART_SetConfig+0x5a2>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a51      	ldr	r2, [pc, #324]	; (8008630 <UART_SetConfig+0x344>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d130      	bne.n	8008550 <UART_SetConfig+0x264>
 80084ee:	4b4e      	ldr	r3, [pc, #312]	; (8008628 <UART_SetConfig+0x33c>)
 80084f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f2:	f003 0307 	and.w	r3, r3, #7
 80084f6:	2b05      	cmp	r3, #5
 80084f8:	d826      	bhi.n	8008548 <UART_SetConfig+0x25c>
 80084fa:	a201      	add	r2, pc, #4	; (adr r2, 8008500 <UART_SetConfig+0x214>)
 80084fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008500:	08008519 	.word	0x08008519
 8008504:	08008521 	.word	0x08008521
 8008508:	08008529 	.word	0x08008529
 800850c:	08008531 	.word	0x08008531
 8008510:	08008539 	.word	0x08008539
 8008514:	08008541 	.word	0x08008541
 8008518:	2300      	movs	r3, #0
 800851a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800851e:	e1b6      	b.n	800888e <UART_SetConfig+0x5a2>
 8008520:	2304      	movs	r3, #4
 8008522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008526:	e1b2      	b.n	800888e <UART_SetConfig+0x5a2>
 8008528:	2308      	movs	r3, #8
 800852a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800852e:	e1ae      	b.n	800888e <UART_SetConfig+0x5a2>
 8008530:	2310      	movs	r3, #16
 8008532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008536:	e1aa      	b.n	800888e <UART_SetConfig+0x5a2>
 8008538:	2320      	movs	r3, #32
 800853a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800853e:	e1a6      	b.n	800888e <UART_SetConfig+0x5a2>
 8008540:	2340      	movs	r3, #64	; 0x40
 8008542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008546:	e1a2      	b.n	800888e <UART_SetConfig+0x5a2>
 8008548:	2380      	movs	r3, #128	; 0x80
 800854a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800854e:	e19e      	b.n	800888e <UART_SetConfig+0x5a2>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a37      	ldr	r2, [pc, #220]	; (8008634 <UART_SetConfig+0x348>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d130      	bne.n	80085bc <UART_SetConfig+0x2d0>
 800855a:	4b33      	ldr	r3, [pc, #204]	; (8008628 <UART_SetConfig+0x33c>)
 800855c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800855e:	f003 0307 	and.w	r3, r3, #7
 8008562:	2b05      	cmp	r3, #5
 8008564:	d826      	bhi.n	80085b4 <UART_SetConfig+0x2c8>
 8008566:	a201      	add	r2, pc, #4	; (adr r2, 800856c <UART_SetConfig+0x280>)
 8008568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856c:	08008585 	.word	0x08008585
 8008570:	0800858d 	.word	0x0800858d
 8008574:	08008595 	.word	0x08008595
 8008578:	0800859d 	.word	0x0800859d
 800857c:	080085a5 	.word	0x080085a5
 8008580:	080085ad 	.word	0x080085ad
 8008584:	2300      	movs	r3, #0
 8008586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800858a:	e180      	b.n	800888e <UART_SetConfig+0x5a2>
 800858c:	2304      	movs	r3, #4
 800858e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008592:	e17c      	b.n	800888e <UART_SetConfig+0x5a2>
 8008594:	2308      	movs	r3, #8
 8008596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800859a:	e178      	b.n	800888e <UART_SetConfig+0x5a2>
 800859c:	2310      	movs	r3, #16
 800859e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085a2:	e174      	b.n	800888e <UART_SetConfig+0x5a2>
 80085a4:	2320      	movs	r3, #32
 80085a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085aa:	e170      	b.n	800888e <UART_SetConfig+0x5a2>
 80085ac:	2340      	movs	r3, #64	; 0x40
 80085ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085b2:	e16c      	b.n	800888e <UART_SetConfig+0x5a2>
 80085b4:	2380      	movs	r3, #128	; 0x80
 80085b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085ba:	e168      	b.n	800888e <UART_SetConfig+0x5a2>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a1d      	ldr	r2, [pc, #116]	; (8008638 <UART_SetConfig+0x34c>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d142      	bne.n	800864c <UART_SetConfig+0x360>
 80085c6:	4b18      	ldr	r3, [pc, #96]	; (8008628 <UART_SetConfig+0x33c>)
 80085c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ca:	f003 0307 	and.w	r3, r3, #7
 80085ce:	2b05      	cmp	r3, #5
 80085d0:	d838      	bhi.n	8008644 <UART_SetConfig+0x358>
 80085d2:	a201      	add	r2, pc, #4	; (adr r2, 80085d8 <UART_SetConfig+0x2ec>)
 80085d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d8:	080085f1 	.word	0x080085f1
 80085dc:	080085f9 	.word	0x080085f9
 80085e0:	08008601 	.word	0x08008601
 80085e4:	08008609 	.word	0x08008609
 80085e8:	08008611 	.word	0x08008611
 80085ec:	0800863d 	.word	0x0800863d
 80085f0:	2300      	movs	r3, #0
 80085f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085f6:	e14a      	b.n	800888e <UART_SetConfig+0x5a2>
 80085f8:	2304      	movs	r3, #4
 80085fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085fe:	e146      	b.n	800888e <UART_SetConfig+0x5a2>
 8008600:	2308      	movs	r3, #8
 8008602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008606:	e142      	b.n	800888e <UART_SetConfig+0x5a2>
 8008608:	2310      	movs	r3, #16
 800860a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800860e:	e13e      	b.n	800888e <UART_SetConfig+0x5a2>
 8008610:	2320      	movs	r3, #32
 8008612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008616:	e13a      	b.n	800888e <UART_SetConfig+0x5a2>
 8008618:	cfff69f3 	.word	0xcfff69f3
 800861c:	58000c00 	.word	0x58000c00
 8008620:	11fff4ff 	.word	0x11fff4ff
 8008624:	40011000 	.word	0x40011000
 8008628:	58024400 	.word	0x58024400
 800862c:	40004400 	.word	0x40004400
 8008630:	40004800 	.word	0x40004800
 8008634:	40004c00 	.word	0x40004c00
 8008638:	40005000 	.word	0x40005000
 800863c:	2340      	movs	r3, #64	; 0x40
 800863e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008642:	e124      	b.n	800888e <UART_SetConfig+0x5a2>
 8008644:	2380      	movs	r3, #128	; 0x80
 8008646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800864a:	e120      	b.n	800888e <UART_SetConfig+0x5a2>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4acc      	ldr	r2, [pc, #816]	; (8008984 <UART_SetConfig+0x698>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d176      	bne.n	8008744 <UART_SetConfig+0x458>
 8008656:	4bcc      	ldr	r3, [pc, #816]	; (8008988 <UART_SetConfig+0x69c>)
 8008658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800865a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800865e:	2b28      	cmp	r3, #40	; 0x28
 8008660:	d86c      	bhi.n	800873c <UART_SetConfig+0x450>
 8008662:	a201      	add	r2, pc, #4	; (adr r2, 8008668 <UART_SetConfig+0x37c>)
 8008664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008668:	0800870d 	.word	0x0800870d
 800866c:	0800873d 	.word	0x0800873d
 8008670:	0800873d 	.word	0x0800873d
 8008674:	0800873d 	.word	0x0800873d
 8008678:	0800873d 	.word	0x0800873d
 800867c:	0800873d 	.word	0x0800873d
 8008680:	0800873d 	.word	0x0800873d
 8008684:	0800873d 	.word	0x0800873d
 8008688:	08008715 	.word	0x08008715
 800868c:	0800873d 	.word	0x0800873d
 8008690:	0800873d 	.word	0x0800873d
 8008694:	0800873d 	.word	0x0800873d
 8008698:	0800873d 	.word	0x0800873d
 800869c:	0800873d 	.word	0x0800873d
 80086a0:	0800873d 	.word	0x0800873d
 80086a4:	0800873d 	.word	0x0800873d
 80086a8:	0800871d 	.word	0x0800871d
 80086ac:	0800873d 	.word	0x0800873d
 80086b0:	0800873d 	.word	0x0800873d
 80086b4:	0800873d 	.word	0x0800873d
 80086b8:	0800873d 	.word	0x0800873d
 80086bc:	0800873d 	.word	0x0800873d
 80086c0:	0800873d 	.word	0x0800873d
 80086c4:	0800873d 	.word	0x0800873d
 80086c8:	08008725 	.word	0x08008725
 80086cc:	0800873d 	.word	0x0800873d
 80086d0:	0800873d 	.word	0x0800873d
 80086d4:	0800873d 	.word	0x0800873d
 80086d8:	0800873d 	.word	0x0800873d
 80086dc:	0800873d 	.word	0x0800873d
 80086e0:	0800873d 	.word	0x0800873d
 80086e4:	0800873d 	.word	0x0800873d
 80086e8:	0800872d 	.word	0x0800872d
 80086ec:	0800873d 	.word	0x0800873d
 80086f0:	0800873d 	.word	0x0800873d
 80086f4:	0800873d 	.word	0x0800873d
 80086f8:	0800873d 	.word	0x0800873d
 80086fc:	0800873d 	.word	0x0800873d
 8008700:	0800873d 	.word	0x0800873d
 8008704:	0800873d 	.word	0x0800873d
 8008708:	08008735 	.word	0x08008735
 800870c:	2301      	movs	r3, #1
 800870e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008712:	e0bc      	b.n	800888e <UART_SetConfig+0x5a2>
 8008714:	2304      	movs	r3, #4
 8008716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800871a:	e0b8      	b.n	800888e <UART_SetConfig+0x5a2>
 800871c:	2308      	movs	r3, #8
 800871e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008722:	e0b4      	b.n	800888e <UART_SetConfig+0x5a2>
 8008724:	2310      	movs	r3, #16
 8008726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800872a:	e0b0      	b.n	800888e <UART_SetConfig+0x5a2>
 800872c:	2320      	movs	r3, #32
 800872e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008732:	e0ac      	b.n	800888e <UART_SetConfig+0x5a2>
 8008734:	2340      	movs	r3, #64	; 0x40
 8008736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800873a:	e0a8      	b.n	800888e <UART_SetConfig+0x5a2>
 800873c:	2380      	movs	r3, #128	; 0x80
 800873e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008742:	e0a4      	b.n	800888e <UART_SetConfig+0x5a2>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a90      	ldr	r2, [pc, #576]	; (800898c <UART_SetConfig+0x6a0>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d130      	bne.n	80087b0 <UART_SetConfig+0x4c4>
 800874e:	4b8e      	ldr	r3, [pc, #568]	; (8008988 <UART_SetConfig+0x69c>)
 8008750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008752:	f003 0307 	and.w	r3, r3, #7
 8008756:	2b05      	cmp	r3, #5
 8008758:	d826      	bhi.n	80087a8 <UART_SetConfig+0x4bc>
 800875a:	a201      	add	r2, pc, #4	; (adr r2, 8008760 <UART_SetConfig+0x474>)
 800875c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008760:	08008779 	.word	0x08008779
 8008764:	08008781 	.word	0x08008781
 8008768:	08008789 	.word	0x08008789
 800876c:	08008791 	.word	0x08008791
 8008770:	08008799 	.word	0x08008799
 8008774:	080087a1 	.word	0x080087a1
 8008778:	2300      	movs	r3, #0
 800877a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800877e:	e086      	b.n	800888e <UART_SetConfig+0x5a2>
 8008780:	2304      	movs	r3, #4
 8008782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008786:	e082      	b.n	800888e <UART_SetConfig+0x5a2>
 8008788:	2308      	movs	r3, #8
 800878a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800878e:	e07e      	b.n	800888e <UART_SetConfig+0x5a2>
 8008790:	2310      	movs	r3, #16
 8008792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008796:	e07a      	b.n	800888e <UART_SetConfig+0x5a2>
 8008798:	2320      	movs	r3, #32
 800879a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800879e:	e076      	b.n	800888e <UART_SetConfig+0x5a2>
 80087a0:	2340      	movs	r3, #64	; 0x40
 80087a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087a6:	e072      	b.n	800888e <UART_SetConfig+0x5a2>
 80087a8:	2380      	movs	r3, #128	; 0x80
 80087aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087ae:	e06e      	b.n	800888e <UART_SetConfig+0x5a2>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a76      	ldr	r2, [pc, #472]	; (8008990 <UART_SetConfig+0x6a4>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d130      	bne.n	800881c <UART_SetConfig+0x530>
 80087ba:	4b73      	ldr	r3, [pc, #460]	; (8008988 <UART_SetConfig+0x69c>)
 80087bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087be:	f003 0307 	and.w	r3, r3, #7
 80087c2:	2b05      	cmp	r3, #5
 80087c4:	d826      	bhi.n	8008814 <UART_SetConfig+0x528>
 80087c6:	a201      	add	r2, pc, #4	; (adr r2, 80087cc <UART_SetConfig+0x4e0>)
 80087c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087cc:	080087e5 	.word	0x080087e5
 80087d0:	080087ed 	.word	0x080087ed
 80087d4:	080087f5 	.word	0x080087f5
 80087d8:	080087fd 	.word	0x080087fd
 80087dc:	08008805 	.word	0x08008805
 80087e0:	0800880d 	.word	0x0800880d
 80087e4:	2300      	movs	r3, #0
 80087e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087ea:	e050      	b.n	800888e <UART_SetConfig+0x5a2>
 80087ec:	2304      	movs	r3, #4
 80087ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087f2:	e04c      	b.n	800888e <UART_SetConfig+0x5a2>
 80087f4:	2308      	movs	r3, #8
 80087f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087fa:	e048      	b.n	800888e <UART_SetConfig+0x5a2>
 80087fc:	2310      	movs	r3, #16
 80087fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008802:	e044      	b.n	800888e <UART_SetConfig+0x5a2>
 8008804:	2320      	movs	r3, #32
 8008806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800880a:	e040      	b.n	800888e <UART_SetConfig+0x5a2>
 800880c:	2340      	movs	r3, #64	; 0x40
 800880e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008812:	e03c      	b.n	800888e <UART_SetConfig+0x5a2>
 8008814:	2380      	movs	r3, #128	; 0x80
 8008816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800881a:	e038      	b.n	800888e <UART_SetConfig+0x5a2>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a5c      	ldr	r2, [pc, #368]	; (8008994 <UART_SetConfig+0x6a8>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d130      	bne.n	8008888 <UART_SetConfig+0x59c>
 8008826:	4b58      	ldr	r3, [pc, #352]	; (8008988 <UART_SetConfig+0x69c>)
 8008828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800882a:	f003 0307 	and.w	r3, r3, #7
 800882e:	2b05      	cmp	r3, #5
 8008830:	d826      	bhi.n	8008880 <UART_SetConfig+0x594>
 8008832:	a201      	add	r2, pc, #4	; (adr r2, 8008838 <UART_SetConfig+0x54c>)
 8008834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008838:	08008851 	.word	0x08008851
 800883c:	08008859 	.word	0x08008859
 8008840:	08008861 	.word	0x08008861
 8008844:	08008869 	.word	0x08008869
 8008848:	08008871 	.word	0x08008871
 800884c:	08008879 	.word	0x08008879
 8008850:	2302      	movs	r3, #2
 8008852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008856:	e01a      	b.n	800888e <UART_SetConfig+0x5a2>
 8008858:	2304      	movs	r3, #4
 800885a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800885e:	e016      	b.n	800888e <UART_SetConfig+0x5a2>
 8008860:	2308      	movs	r3, #8
 8008862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008866:	e012      	b.n	800888e <UART_SetConfig+0x5a2>
 8008868:	2310      	movs	r3, #16
 800886a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800886e:	e00e      	b.n	800888e <UART_SetConfig+0x5a2>
 8008870:	2320      	movs	r3, #32
 8008872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008876:	e00a      	b.n	800888e <UART_SetConfig+0x5a2>
 8008878:	2340      	movs	r3, #64	; 0x40
 800887a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800887e:	e006      	b.n	800888e <UART_SetConfig+0x5a2>
 8008880:	2380      	movs	r3, #128	; 0x80
 8008882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008886:	e002      	b.n	800888e <UART_SetConfig+0x5a2>
 8008888:	2380      	movs	r3, #128	; 0x80
 800888a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a40      	ldr	r2, [pc, #256]	; (8008994 <UART_SetConfig+0x6a8>)
 8008894:	4293      	cmp	r3, r2
 8008896:	f040 80ef 	bne.w	8008a78 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800889a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800889e:	2b20      	cmp	r3, #32
 80088a0:	dc46      	bgt.n	8008930 <UART_SetConfig+0x644>
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	f2c0 8081 	blt.w	80089aa <UART_SetConfig+0x6be>
 80088a8:	3b02      	subs	r3, #2
 80088aa:	2b1e      	cmp	r3, #30
 80088ac:	d87d      	bhi.n	80089aa <UART_SetConfig+0x6be>
 80088ae:	a201      	add	r2, pc, #4	; (adr r2, 80088b4 <UART_SetConfig+0x5c8>)
 80088b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b4:	08008937 	.word	0x08008937
 80088b8:	080089ab 	.word	0x080089ab
 80088bc:	0800893f 	.word	0x0800893f
 80088c0:	080089ab 	.word	0x080089ab
 80088c4:	080089ab 	.word	0x080089ab
 80088c8:	080089ab 	.word	0x080089ab
 80088cc:	0800894f 	.word	0x0800894f
 80088d0:	080089ab 	.word	0x080089ab
 80088d4:	080089ab 	.word	0x080089ab
 80088d8:	080089ab 	.word	0x080089ab
 80088dc:	080089ab 	.word	0x080089ab
 80088e0:	080089ab 	.word	0x080089ab
 80088e4:	080089ab 	.word	0x080089ab
 80088e8:	080089ab 	.word	0x080089ab
 80088ec:	0800895f 	.word	0x0800895f
 80088f0:	080089ab 	.word	0x080089ab
 80088f4:	080089ab 	.word	0x080089ab
 80088f8:	080089ab 	.word	0x080089ab
 80088fc:	080089ab 	.word	0x080089ab
 8008900:	080089ab 	.word	0x080089ab
 8008904:	080089ab 	.word	0x080089ab
 8008908:	080089ab 	.word	0x080089ab
 800890c:	080089ab 	.word	0x080089ab
 8008910:	080089ab 	.word	0x080089ab
 8008914:	080089ab 	.word	0x080089ab
 8008918:	080089ab 	.word	0x080089ab
 800891c:	080089ab 	.word	0x080089ab
 8008920:	080089ab 	.word	0x080089ab
 8008924:	080089ab 	.word	0x080089ab
 8008928:	080089ab 	.word	0x080089ab
 800892c:	0800899d 	.word	0x0800899d
 8008930:	2b40      	cmp	r3, #64	; 0x40
 8008932:	d036      	beq.n	80089a2 <UART_SetConfig+0x6b6>
 8008934:	e039      	b.n	80089aa <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008936:	f7fd fcb7 	bl	80062a8 <HAL_RCCEx_GetD3PCLK1Freq>
 800893a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800893c:	e03b      	b.n	80089b6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800893e:	f107 0314 	add.w	r3, r7, #20
 8008942:	4618      	mov	r0, r3
 8008944:	f7fd fcc6 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800894c:	e033      	b.n	80089b6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800894e:	f107 0308 	add.w	r3, r7, #8
 8008952:	4618      	mov	r0, r3
 8008954:	f7fd fe12 	bl	800657c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800895c:	e02b      	b.n	80089b6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800895e:	4b0a      	ldr	r3, [pc, #40]	; (8008988 <UART_SetConfig+0x69c>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 0320 	and.w	r3, r3, #32
 8008966:	2b00      	cmp	r3, #0
 8008968:	d009      	beq.n	800897e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800896a:	4b07      	ldr	r3, [pc, #28]	; (8008988 <UART_SetConfig+0x69c>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	08db      	lsrs	r3, r3, #3
 8008970:	f003 0303 	and.w	r3, r3, #3
 8008974:	4a08      	ldr	r2, [pc, #32]	; (8008998 <UART_SetConfig+0x6ac>)
 8008976:	fa22 f303 	lsr.w	r3, r2, r3
 800897a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800897c:	e01b      	b.n	80089b6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800897e:	4b06      	ldr	r3, [pc, #24]	; (8008998 <UART_SetConfig+0x6ac>)
 8008980:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008982:	e018      	b.n	80089b6 <UART_SetConfig+0x6ca>
 8008984:	40011400 	.word	0x40011400
 8008988:	58024400 	.word	0x58024400
 800898c:	40007800 	.word	0x40007800
 8008990:	40007c00 	.word	0x40007c00
 8008994:	58000c00 	.word	0x58000c00
 8008998:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800899c:	4bc4      	ldr	r3, [pc, #784]	; (8008cb0 <UART_SetConfig+0x9c4>)
 800899e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80089a0:	e009      	b.n	80089b6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80089a8:	e005      	b.n	80089b6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80089aa:	2300      	movs	r3, #0
 80089ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80089b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80089b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f000 81da 	beq.w	8008d72 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c2:	4abc      	ldr	r2, [pc, #752]	; (8008cb4 <UART_SetConfig+0x9c8>)
 80089c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089c8:	461a      	mov	r2, r3
 80089ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80089d0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	685a      	ldr	r2, [r3, #4]
 80089d6:	4613      	mov	r3, r2
 80089d8:	005b      	lsls	r3, r3, #1
 80089da:	4413      	add	r3, r2
 80089dc:	6a3a      	ldr	r2, [r7, #32]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d305      	bcc.n	80089ee <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089e8:	6a3a      	ldr	r2, [r7, #32]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d903      	bls.n	80089f6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80089f4:	e1bd      	b.n	8008d72 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f8:	4618      	mov	r0, r3
 80089fa:	f04f 0100 	mov.w	r1, #0
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a02:	4aac      	ldr	r2, [pc, #688]	; (8008cb4 <UART_SetConfig+0x9c8>)
 8008a04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	f04f 0300 	mov.w	r3, #0
 8008a0e:	f7f7 fcbf 	bl	8000390 <__aeabi_uldivmod>
 8008a12:	4602      	mov	r2, r0
 8008a14:	460b      	mov	r3, r1
 8008a16:	4610      	mov	r0, r2
 8008a18:	4619      	mov	r1, r3
 8008a1a:	f04f 0200 	mov.w	r2, #0
 8008a1e:	f04f 0300 	mov.w	r3, #0
 8008a22:	020b      	lsls	r3, r1, #8
 8008a24:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a28:	0202      	lsls	r2, r0, #8
 8008a2a:	6879      	ldr	r1, [r7, #4]
 8008a2c:	6849      	ldr	r1, [r1, #4]
 8008a2e:	0849      	lsrs	r1, r1, #1
 8008a30:	4608      	mov	r0, r1
 8008a32:	f04f 0100 	mov.w	r1, #0
 8008a36:	1814      	adds	r4, r2, r0
 8008a38:	eb43 0501 	adc.w	r5, r3, r1
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	461a      	mov	r2, r3
 8008a42:	f04f 0300 	mov.w	r3, #0
 8008a46:	4620      	mov	r0, r4
 8008a48:	4629      	mov	r1, r5
 8008a4a:	f7f7 fca1 	bl	8000390 <__aeabi_uldivmod>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	460b      	mov	r3, r1
 8008a52:	4613      	mov	r3, r2
 8008a54:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a5c:	d308      	bcc.n	8008a70 <UART_SetConfig+0x784>
 8008a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a64:	d204      	bcs.n	8008a70 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a6c:	60da      	str	r2, [r3, #12]
 8008a6e:	e180      	b.n	8008d72 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008a76:	e17c      	b.n	8008d72 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	69db      	ldr	r3, [r3, #28]
 8008a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a80:	f040 80be 	bne.w	8008c00 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8008a84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008a88:	2b20      	cmp	r3, #32
 8008a8a:	dc49      	bgt.n	8008b20 <UART_SetConfig+0x834>
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	db7c      	blt.n	8008b8a <UART_SetConfig+0x89e>
 8008a90:	2b20      	cmp	r3, #32
 8008a92:	d87a      	bhi.n	8008b8a <UART_SetConfig+0x89e>
 8008a94:	a201      	add	r2, pc, #4	; (adr r2, 8008a9c <UART_SetConfig+0x7b0>)
 8008a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9a:	bf00      	nop
 8008a9c:	08008b27 	.word	0x08008b27
 8008aa0:	08008b2f 	.word	0x08008b2f
 8008aa4:	08008b8b 	.word	0x08008b8b
 8008aa8:	08008b8b 	.word	0x08008b8b
 8008aac:	08008b37 	.word	0x08008b37
 8008ab0:	08008b8b 	.word	0x08008b8b
 8008ab4:	08008b8b 	.word	0x08008b8b
 8008ab8:	08008b8b 	.word	0x08008b8b
 8008abc:	08008b47 	.word	0x08008b47
 8008ac0:	08008b8b 	.word	0x08008b8b
 8008ac4:	08008b8b 	.word	0x08008b8b
 8008ac8:	08008b8b 	.word	0x08008b8b
 8008acc:	08008b8b 	.word	0x08008b8b
 8008ad0:	08008b8b 	.word	0x08008b8b
 8008ad4:	08008b8b 	.word	0x08008b8b
 8008ad8:	08008b8b 	.word	0x08008b8b
 8008adc:	08008b57 	.word	0x08008b57
 8008ae0:	08008b8b 	.word	0x08008b8b
 8008ae4:	08008b8b 	.word	0x08008b8b
 8008ae8:	08008b8b 	.word	0x08008b8b
 8008aec:	08008b8b 	.word	0x08008b8b
 8008af0:	08008b8b 	.word	0x08008b8b
 8008af4:	08008b8b 	.word	0x08008b8b
 8008af8:	08008b8b 	.word	0x08008b8b
 8008afc:	08008b8b 	.word	0x08008b8b
 8008b00:	08008b8b 	.word	0x08008b8b
 8008b04:	08008b8b 	.word	0x08008b8b
 8008b08:	08008b8b 	.word	0x08008b8b
 8008b0c:	08008b8b 	.word	0x08008b8b
 8008b10:	08008b8b 	.word	0x08008b8b
 8008b14:	08008b8b 	.word	0x08008b8b
 8008b18:	08008b8b 	.word	0x08008b8b
 8008b1c:	08008b7d 	.word	0x08008b7d
 8008b20:	2b40      	cmp	r3, #64	; 0x40
 8008b22:	d02e      	beq.n	8008b82 <UART_SetConfig+0x896>
 8008b24:	e031      	b.n	8008b8a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b26:	f7fb ff81 	bl	8004a2c <HAL_RCC_GetPCLK1Freq>
 8008b2a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008b2c:	e033      	b.n	8008b96 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b2e:	f7fb ff93 	bl	8004a58 <HAL_RCC_GetPCLK2Freq>
 8008b32:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008b34:	e02f      	b.n	8008b96 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b36:	f107 0314 	add.w	r3, r7, #20
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fd fbca 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b44:	e027      	b.n	8008b96 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b46:	f107 0308 	add.w	r3, r7, #8
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fd fd16 	bl	800657c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b54:	e01f      	b.n	8008b96 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b56:	4b58      	ldr	r3, [pc, #352]	; (8008cb8 <UART_SetConfig+0x9cc>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f003 0320 	and.w	r3, r3, #32
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d009      	beq.n	8008b76 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b62:	4b55      	ldr	r3, [pc, #340]	; (8008cb8 <UART_SetConfig+0x9cc>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	08db      	lsrs	r3, r3, #3
 8008b68:	f003 0303 	and.w	r3, r3, #3
 8008b6c:	4a53      	ldr	r2, [pc, #332]	; (8008cbc <UART_SetConfig+0x9d0>)
 8008b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b72:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b74:	e00f      	b.n	8008b96 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8008b76:	4b51      	ldr	r3, [pc, #324]	; (8008cbc <UART_SetConfig+0x9d0>)
 8008b78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b7a:	e00c      	b.n	8008b96 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b7c:	4b4c      	ldr	r3, [pc, #304]	; (8008cb0 <UART_SetConfig+0x9c4>)
 8008b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b80:	e009      	b.n	8008b96 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b88:	e005      	b.n	8008b96 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008b94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f000 80ea 	beq.w	8008d72 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba2:	4a44      	ldr	r2, [pc, #272]	; (8008cb4 <UART_SetConfig+0x9c8>)
 8008ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ba8:	461a      	mov	r2, r3
 8008baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bac:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bb0:	005a      	lsls	r2, r3, #1
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	085b      	lsrs	r3, r3, #1
 8008bb8:	441a      	add	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bc2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc6:	2b0f      	cmp	r3, #15
 8008bc8:	d916      	bls.n	8008bf8 <UART_SetConfig+0x90c>
 8008bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bd0:	d212      	bcs.n	8008bf8 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	f023 030f 	bic.w	r3, r3, #15
 8008bda:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bde:	085b      	lsrs	r3, r3, #1
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	f003 0307 	and.w	r3, r3, #7
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008bea:	4313      	orrs	r3, r2
 8008bec:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008bf4:	60da      	str	r2, [r3, #12]
 8008bf6:	e0bc      	b.n	8008d72 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008bfe:	e0b8      	b.n	8008d72 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008c04:	2b20      	cmp	r3, #32
 8008c06:	dc4b      	bgt.n	8008ca0 <UART_SetConfig+0x9b4>
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f2c0 8087 	blt.w	8008d1c <UART_SetConfig+0xa30>
 8008c0e:	2b20      	cmp	r3, #32
 8008c10:	f200 8084 	bhi.w	8008d1c <UART_SetConfig+0xa30>
 8008c14:	a201      	add	r2, pc, #4	; (adr r2, 8008c1c <UART_SetConfig+0x930>)
 8008c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c1a:	bf00      	nop
 8008c1c:	08008ca7 	.word	0x08008ca7
 8008c20:	08008cc1 	.word	0x08008cc1
 8008c24:	08008d1d 	.word	0x08008d1d
 8008c28:	08008d1d 	.word	0x08008d1d
 8008c2c:	08008cc9 	.word	0x08008cc9
 8008c30:	08008d1d 	.word	0x08008d1d
 8008c34:	08008d1d 	.word	0x08008d1d
 8008c38:	08008d1d 	.word	0x08008d1d
 8008c3c:	08008cd9 	.word	0x08008cd9
 8008c40:	08008d1d 	.word	0x08008d1d
 8008c44:	08008d1d 	.word	0x08008d1d
 8008c48:	08008d1d 	.word	0x08008d1d
 8008c4c:	08008d1d 	.word	0x08008d1d
 8008c50:	08008d1d 	.word	0x08008d1d
 8008c54:	08008d1d 	.word	0x08008d1d
 8008c58:	08008d1d 	.word	0x08008d1d
 8008c5c:	08008ce9 	.word	0x08008ce9
 8008c60:	08008d1d 	.word	0x08008d1d
 8008c64:	08008d1d 	.word	0x08008d1d
 8008c68:	08008d1d 	.word	0x08008d1d
 8008c6c:	08008d1d 	.word	0x08008d1d
 8008c70:	08008d1d 	.word	0x08008d1d
 8008c74:	08008d1d 	.word	0x08008d1d
 8008c78:	08008d1d 	.word	0x08008d1d
 8008c7c:	08008d1d 	.word	0x08008d1d
 8008c80:	08008d1d 	.word	0x08008d1d
 8008c84:	08008d1d 	.word	0x08008d1d
 8008c88:	08008d1d 	.word	0x08008d1d
 8008c8c:	08008d1d 	.word	0x08008d1d
 8008c90:	08008d1d 	.word	0x08008d1d
 8008c94:	08008d1d 	.word	0x08008d1d
 8008c98:	08008d1d 	.word	0x08008d1d
 8008c9c:	08008d0f 	.word	0x08008d0f
 8008ca0:	2b40      	cmp	r3, #64	; 0x40
 8008ca2:	d037      	beq.n	8008d14 <UART_SetConfig+0xa28>
 8008ca4:	e03a      	b.n	8008d1c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ca6:	f7fb fec1 	bl	8004a2c <HAL_RCC_GetPCLK1Freq>
 8008caa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008cac:	e03c      	b.n	8008d28 <UART_SetConfig+0xa3c>
 8008cae:	bf00      	nop
 8008cb0:	003d0900 	.word	0x003d0900
 8008cb4:	0800a264 	.word	0x0800a264
 8008cb8:	58024400 	.word	0x58024400
 8008cbc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008cc0:	f7fb feca 	bl	8004a58 <HAL_RCC_GetPCLK2Freq>
 8008cc4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008cc6:	e02f      	b.n	8008d28 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cc8:	f107 0314 	add.w	r3, r7, #20
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7fd fb01 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008cd6:	e027      	b.n	8008d28 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cd8:	f107 0308 	add.w	r3, r7, #8
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7fd fc4d 	bl	800657c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ce6:	e01f      	b.n	8008d28 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ce8:	4b2c      	ldr	r3, [pc, #176]	; (8008d9c <UART_SetConfig+0xab0>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 0320 	and.w	r3, r3, #32
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d009      	beq.n	8008d08 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008cf4:	4b29      	ldr	r3, [pc, #164]	; (8008d9c <UART_SetConfig+0xab0>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	08db      	lsrs	r3, r3, #3
 8008cfa:	f003 0303 	and.w	r3, r3, #3
 8008cfe:	4a28      	ldr	r2, [pc, #160]	; (8008da0 <UART_SetConfig+0xab4>)
 8008d00:	fa22 f303 	lsr.w	r3, r2, r3
 8008d04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d06:	e00f      	b.n	8008d28 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8008d08:	4b25      	ldr	r3, [pc, #148]	; (8008da0 <UART_SetConfig+0xab4>)
 8008d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d0c:	e00c      	b.n	8008d28 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008d0e:	4b25      	ldr	r3, [pc, #148]	; (8008da4 <UART_SetConfig+0xab8>)
 8008d10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d12:	e009      	b.n	8008d28 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d1a:	e005      	b.n	8008d28 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008d26:	bf00      	nop
    }

    if (pclk != 0U)
 8008d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d021      	beq.n	8008d72 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d32:	4a1d      	ldr	r2, [pc, #116]	; (8008da8 <UART_SetConfig+0xabc>)
 8008d34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d38:	461a      	mov	r2, r3
 8008d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	085b      	lsrs	r3, r3, #1
 8008d46:	441a      	add	r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d50:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d54:	2b0f      	cmp	r3, #15
 8008d56:	d909      	bls.n	8008d6c <UART_SetConfig+0xa80>
 8008d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d5e:	d205      	bcs.n	8008d6c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	60da      	str	r2, [r3, #12]
 8008d6a:	e002      	b.n	8008d72 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008d8e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3738      	adds	r7, #56	; 0x38
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bdb0      	pop	{r4, r5, r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	58024400 	.word	0x58024400
 8008da0:	03d09000 	.word	0x03d09000
 8008da4:	003d0900 	.word	0x003d0900
 8008da8:	0800a264 	.word	0x0800a264

08008dac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db8:	f003 0301 	and.w	r3, r3, #1
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00a      	beq.n	8008dd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	430a      	orrs	r2, r1
 8008dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dda:	f003 0302 	and.w	r3, r3, #2
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00a      	beq.n	8008df8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	430a      	orrs	r2, r1
 8008df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dfc:	f003 0304 	and.w	r3, r3, #4
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00a      	beq.n	8008e1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	430a      	orrs	r2, r1
 8008e18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e1e:	f003 0308 	and.w	r3, r3, #8
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00a      	beq.n	8008e3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	430a      	orrs	r2, r1
 8008e3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e40:	f003 0310 	and.w	r3, r3, #16
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00a      	beq.n	8008e5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	430a      	orrs	r2, r1
 8008e5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e62:	f003 0320 	and.w	r3, r3, #32
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00a      	beq.n	8008e80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	430a      	orrs	r2, r1
 8008e7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d01a      	beq.n	8008ec2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	430a      	orrs	r2, r1
 8008ea0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008eaa:	d10a      	bne.n	8008ec2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	430a      	orrs	r2, r1
 8008ec0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00a      	beq.n	8008ee4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	430a      	orrs	r2, r1
 8008ee2:	605a      	str	r2, [r3, #4]
  }
}
 8008ee4:	bf00      	nop
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b086      	sub	sp, #24
 8008ef4:	af02      	add	r7, sp, #8
 8008ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f00:	f7f9 f8b0 	bl	8002064 <HAL_GetTick>
 8008f04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f003 0308 	and.w	r3, r3, #8
 8008f10:	2b08      	cmp	r3, #8
 8008f12:	d10e      	bne.n	8008f32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f18:	9300      	str	r3, [sp, #0]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f82f 	bl	8008f86 <UART_WaitOnFlagUntilTimeout>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d001      	beq.n	8008f32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	e025      	b.n	8008f7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 0304 	and.w	r3, r3, #4
 8008f3c:	2b04      	cmp	r3, #4
 8008f3e:	d10e      	bne.n	8008f5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f44:	9300      	str	r3, [sp, #0]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f819 	bl	8008f86 <UART_WaitOnFlagUntilTimeout>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d001      	beq.n	8008f5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	e00f      	b.n	8008f7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2220      	movs	r2, #32
 8008f62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2220      	movs	r2, #32
 8008f6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b09c      	sub	sp, #112	; 0x70
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	60f8      	str	r0, [r7, #12]
 8008f8e:	60b9      	str	r1, [r7, #8]
 8008f90:	603b      	str	r3, [r7, #0]
 8008f92:	4613      	mov	r3, r2
 8008f94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f96:	e0a9      	b.n	80090ec <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f9e:	f000 80a5 	beq.w	80090ec <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fa2:	f7f9 f85f 	bl	8002064 <HAL_GetTick>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	1ad3      	subs	r3, r2, r3
 8008fac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d302      	bcc.n	8008fb8 <UART_WaitOnFlagUntilTimeout+0x32>
 8008fb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d140      	bne.n	800903a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fc0:	e853 3f00 	ldrex	r3, [r3]
 8008fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008fcc:	667b      	str	r3, [r7, #100]	; 0x64
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008fd8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008fdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008fde:	e841 2300 	strex	r3, r2, [r1]
 8008fe2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1e6      	bne.n	8008fb8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	3308      	adds	r3, #8
 8008ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ff4:	e853 3f00 	ldrex	r3, [r3]
 8008ff8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffc:	f023 0301 	bic.w	r3, r3, #1
 8009000:	663b      	str	r3, [r7, #96]	; 0x60
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	3308      	adds	r3, #8
 8009008:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800900a:	64ba      	str	r2, [r7, #72]	; 0x48
 800900c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009010:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009012:	e841 2300 	strex	r3, r2, [r1]
 8009016:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800901a:	2b00      	cmp	r3, #0
 800901c:	d1e5      	bne.n	8008fea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2220      	movs	r2, #32
 8009022:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2220      	movs	r2, #32
 800902a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2200      	movs	r2, #0
 8009032:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009036:	2303      	movs	r3, #3
 8009038:	e069      	b.n	800910e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f003 0304 	and.w	r3, r3, #4
 8009044:	2b00      	cmp	r3, #0
 8009046:	d051      	beq.n	80090ec <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	69db      	ldr	r3, [r3, #28]
 800904e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009052:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009056:	d149      	bne.n	80090ec <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009060:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906a:	e853 3f00 	ldrex	r3, [r3]
 800906e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009072:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009076:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	461a      	mov	r2, r3
 800907e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009080:	637b      	str	r3, [r7, #52]	; 0x34
 8009082:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009084:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009086:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009088:	e841 2300 	strex	r3, r2, [r1]
 800908c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800908e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009090:	2b00      	cmp	r3, #0
 8009092:	d1e6      	bne.n	8009062 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	3308      	adds	r3, #8
 800909a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	e853 3f00 	ldrex	r3, [r3]
 80090a2:	613b      	str	r3, [r7, #16]
   return(result);
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	f023 0301 	bic.w	r3, r3, #1
 80090aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	3308      	adds	r3, #8
 80090b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80090b4:	623a      	str	r2, [r7, #32]
 80090b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b8:	69f9      	ldr	r1, [r7, #28]
 80090ba:	6a3a      	ldr	r2, [r7, #32]
 80090bc:	e841 2300 	strex	r3, r2, [r1]
 80090c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d1e5      	bne.n	8009094 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2220      	movs	r2, #32
 80090cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2220      	movs	r2, #32
 80090d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2220      	movs	r2, #32
 80090dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80090e8:	2303      	movs	r3, #3
 80090ea:	e010      	b.n	800910e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	69da      	ldr	r2, [r3, #28]
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	4013      	ands	r3, r2
 80090f6:	68ba      	ldr	r2, [r7, #8]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	bf0c      	ite	eq
 80090fc:	2301      	moveq	r3, #1
 80090fe:	2300      	movne	r3, #0
 8009100:	b2db      	uxtb	r3, r3
 8009102:	461a      	mov	r2, r3
 8009104:	79fb      	ldrb	r3, [r7, #7]
 8009106:	429a      	cmp	r2, r3
 8009108:	f43f af46 	beq.w	8008f98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3770      	adds	r7, #112	; 0x70
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009116:	b480      	push	{r7}
 8009118:	b085      	sub	sp, #20
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009124:	2b01      	cmp	r3, #1
 8009126:	d101      	bne.n	800912c <HAL_UARTEx_DisableFifoMode+0x16>
 8009128:	2302      	movs	r3, #2
 800912a:	e027      	b.n	800917c <HAL_UARTEx_DisableFifoMode+0x66>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2224      	movs	r2, #36	; 0x24
 8009138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f022 0201 	bic.w	r2, r2, #1
 8009152:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800915a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68fa      	ldr	r2, [r7, #12]
 8009168:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2220      	movs	r2, #32
 800916e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	3714      	adds	r7, #20
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009198:	2b01      	cmp	r3, #1
 800919a:	d101      	bne.n	80091a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800919c:	2302      	movs	r3, #2
 800919e:	e02d      	b.n	80091fc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2224      	movs	r2, #36	; 0x24
 80091ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f022 0201 	bic.w	r2, r2, #1
 80091c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	683a      	ldr	r2, [r7, #0]
 80091d8:	430a      	orrs	r2, r1
 80091da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 f84f 	bl	8009280 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2220      	movs	r2, #32
 80091ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3710      	adds	r7, #16
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009214:	2b01      	cmp	r3, #1
 8009216:	d101      	bne.n	800921c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009218:	2302      	movs	r3, #2
 800921a:	e02d      	b.n	8009278 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2201      	movs	r2, #1
 8009220:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2224      	movs	r2, #36	; 0x24
 8009228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f022 0201 	bic.w	r2, r2, #1
 8009242:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	683a      	ldr	r2, [r7, #0]
 8009254:	430a      	orrs	r2, r1
 8009256:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 f811 	bl	8009280 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2220      	movs	r2, #32
 800926a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3710      	adds	r7, #16
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009280:	b480      	push	{r7}
 8009282:	b085      	sub	sp, #20
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800928c:	2b00      	cmp	r3, #0
 800928e:	d108      	bne.n	80092a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80092a0:	e031      	b.n	8009306 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80092a2:	2310      	movs	r3, #16
 80092a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80092a6:	2310      	movs	r3, #16
 80092a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	0e5b      	lsrs	r3, r3, #25
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	f003 0307 	and.w	r3, r3, #7
 80092b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	0f5b      	lsrs	r3, r3, #29
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	f003 0307 	and.w	r3, r3, #7
 80092c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80092ca:	7bbb      	ldrb	r3, [r7, #14]
 80092cc:	7b3a      	ldrb	r2, [r7, #12]
 80092ce:	4911      	ldr	r1, [pc, #68]	; (8009314 <UARTEx_SetNbDataToProcess+0x94>)
 80092d0:	5c8a      	ldrb	r2, [r1, r2]
 80092d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80092d6:	7b3a      	ldrb	r2, [r7, #12]
 80092d8:	490f      	ldr	r1, [pc, #60]	; (8009318 <UARTEx_SetNbDataToProcess+0x98>)
 80092da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80092dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
 80092ea:	7b7a      	ldrb	r2, [r7, #13]
 80092ec:	4909      	ldr	r1, [pc, #36]	; (8009314 <UARTEx_SetNbDataToProcess+0x94>)
 80092ee:	5c8a      	ldrb	r2, [r1, r2]
 80092f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80092f4:	7b7a      	ldrb	r2, [r7, #13]
 80092f6:	4908      	ldr	r1, [pc, #32]	; (8009318 <UARTEx_SetNbDataToProcess+0x98>)
 80092f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80092fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80092fe:	b29a      	uxth	r2, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009306:	bf00      	nop
 8009308:	3714      	adds	r7, #20
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	0800a27c 	.word	0x0800a27c
 8009318:	0800a284 	.word	0x0800a284

0800931c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800931c:	b084      	sub	sp, #16
 800931e:	b580      	push	{r7, lr}
 8009320:	b084      	sub	sp, #16
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
 8009326:	f107 001c 	add.w	r0, r7, #28
 800932a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800932e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009330:	2b01      	cmp	r3, #1
 8009332:	d120      	bne.n	8009376 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009338:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	68da      	ldr	r2, [r3, #12]
 8009344:	4b2a      	ldr	r3, [pc, #168]	; (80093f0 <USB_CoreInit+0xd4>)
 8009346:	4013      	ands	r3, r2
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800935a:	2b01      	cmp	r3, #1
 800935c:	d105      	bne.n	800936a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 faa8 	bl	80098c0 <USB_CoreReset>
 8009370:	4603      	mov	r3, r0
 8009372:	73fb      	strb	r3, [r7, #15]
 8009374:	e01a      	b.n	80093ac <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 fa9c 	bl	80098c0 <USB_CoreReset>
 8009388:	4603      	mov	r3, r0
 800938a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800938c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800938e:	2b00      	cmp	r3, #0
 8009390:	d106      	bne.n	80093a0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009396:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	639a      	str	r2, [r3, #56]	; 0x38
 800939e:	e005      	b.n	80093ac <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80093ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d116      	bne.n	80093e0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093b6:	b29a      	uxth	r2, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80093c0:	4b0c      	ldr	r3, [pc, #48]	; (80093f4 <USB_CoreInit+0xd8>)
 80093c2:	4313      	orrs	r3, r2
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	f043 0206 	orr.w	r2, r3, #6
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	f043 0220 	orr.w	r2, r3, #32
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80093e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80093ec:	b004      	add	sp, #16
 80093ee:	4770      	bx	lr
 80093f0:	ffbdffbf 	.word	0xffbdffbf
 80093f4:	03ee0000 	.word	0x03ee0000

080093f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b083      	sub	sp, #12
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	f023 0201 	bic.w	r2, r3, #1
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	370c      	adds	r7, #12
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr

0800941a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b084      	sub	sp, #16
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
 8009422:	460b      	mov	r3, r1
 8009424:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009426:	2300      	movs	r3, #0
 8009428:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009436:	78fb      	ldrb	r3, [r7, #3]
 8009438:	2b01      	cmp	r3, #1
 800943a:	d115      	bne.n	8009468 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009448:	2001      	movs	r0, #1
 800944a:	f7f8 fe17 	bl	800207c <HAL_Delay>
      ms++;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	3301      	adds	r3, #1
 8009452:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fa25 	bl	80098a4 <USB_GetMode>
 800945a:	4603      	mov	r3, r0
 800945c:	2b01      	cmp	r3, #1
 800945e:	d01e      	beq.n	800949e <USB_SetCurrentMode+0x84>
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2b31      	cmp	r3, #49	; 0x31
 8009464:	d9f0      	bls.n	8009448 <USB_SetCurrentMode+0x2e>
 8009466:	e01a      	b.n	800949e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009468:	78fb      	ldrb	r3, [r7, #3]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d115      	bne.n	800949a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800947a:	2001      	movs	r0, #1
 800947c:	f7f8 fdfe 	bl	800207c <HAL_Delay>
      ms++;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	3301      	adds	r3, #1
 8009484:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 fa0c 	bl	80098a4 <USB_GetMode>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d005      	beq.n	800949e <USB_SetCurrentMode+0x84>
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2b31      	cmp	r3, #49	; 0x31
 8009496:	d9f0      	bls.n	800947a <USB_SetCurrentMode+0x60>
 8009498:	e001      	b.n	800949e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e005      	b.n	80094aa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2b32      	cmp	r3, #50	; 0x32
 80094a2:	d101      	bne.n	80094a8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	e000      	b.n	80094aa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
	...

080094b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094b4:	b084      	sub	sp, #16
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b086      	sub	sp, #24
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
 80094be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80094c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80094ce:	2300      	movs	r3, #0
 80094d0:	613b      	str	r3, [r7, #16]
 80094d2:	e009      	b.n	80094e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	3340      	adds	r3, #64	; 0x40
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	4413      	add	r3, r2
 80094de:	2200      	movs	r2, #0
 80094e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	3301      	adds	r3, #1
 80094e6:	613b      	str	r3, [r7, #16]
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	2b0e      	cmp	r3, #14
 80094ec:	d9f2      	bls.n	80094d4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80094ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d11c      	bne.n	800952e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009502:	f043 0302 	orr.w	r3, r3, #2
 8009506:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	601a      	str	r2, [r3, #0]
 800952c:	e005      	b.n	800953a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009532:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009540:	461a      	mov	r2, r3
 8009542:	2300      	movs	r3, #0
 8009544:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800954c:	4619      	mov	r1, r3
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009554:	461a      	mov	r2, r3
 8009556:	680b      	ldr	r3, [r1, #0]
 8009558:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800955a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955c:	2b01      	cmp	r3, #1
 800955e:	d10c      	bne.n	800957a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009562:	2b00      	cmp	r3, #0
 8009564:	d104      	bne.n	8009570 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009566:	2100      	movs	r1, #0
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 f961 	bl	8009830 <USB_SetDevSpeed>
 800956e:	e008      	b.n	8009582 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009570:	2101      	movs	r1, #1
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 f95c 	bl	8009830 <USB_SetDevSpeed>
 8009578:	e003      	b.n	8009582 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800957a:	2103      	movs	r1, #3
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 f957 	bl	8009830 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009582:	2110      	movs	r1, #16
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 f8f3 	bl	8009770 <USB_FlushTxFifo>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d001      	beq.n	8009594 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f91d 	bl	80097d4 <USB_FlushRxFifo>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d001      	beq.n	80095a4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80095a0:	2301      	movs	r3, #1
 80095a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095aa:	461a      	mov	r2, r3
 80095ac:	2300      	movs	r3, #0
 80095ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095b6:	461a      	mov	r2, r3
 80095b8:	2300      	movs	r3, #0
 80095ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095c2:	461a      	mov	r2, r3
 80095c4:	2300      	movs	r3, #0
 80095c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095c8:	2300      	movs	r3, #0
 80095ca:	613b      	str	r3, [r7, #16]
 80095cc:	e043      	b.n	8009656 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	015a      	lsls	r2, r3, #5
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	4413      	add	r3, r2
 80095d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095e4:	d118      	bne.n	8009618 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d10a      	bne.n	8009602 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	015a      	lsls	r2, r3, #5
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	4413      	add	r3, r2
 80095f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095f8:	461a      	mov	r2, r3
 80095fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80095fe:	6013      	str	r3, [r2, #0]
 8009600:	e013      	b.n	800962a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	015a      	lsls	r2, r3, #5
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	4413      	add	r3, r2
 800960a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800960e:	461a      	mov	r2, r3
 8009610:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009614:	6013      	str	r3, [r2, #0]
 8009616:	e008      	b.n	800962a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	015a      	lsls	r2, r3, #5
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	4413      	add	r3, r2
 8009620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009624:	461a      	mov	r2, r3
 8009626:	2300      	movs	r3, #0
 8009628:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	015a      	lsls	r2, r3, #5
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	4413      	add	r3, r2
 8009632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009636:	461a      	mov	r2, r3
 8009638:	2300      	movs	r3, #0
 800963a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	015a      	lsls	r2, r3, #5
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	4413      	add	r3, r2
 8009644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009648:	461a      	mov	r2, r3
 800964a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800964e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	3301      	adds	r3, #1
 8009654:	613b      	str	r3, [r7, #16]
 8009656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009658:	693a      	ldr	r2, [r7, #16]
 800965a:	429a      	cmp	r2, r3
 800965c:	d3b7      	bcc.n	80095ce <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800965e:	2300      	movs	r3, #0
 8009660:	613b      	str	r3, [r7, #16]
 8009662:	e043      	b.n	80096ec <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	015a      	lsls	r2, r3, #5
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	4413      	add	r3, r2
 800966c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009676:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800967a:	d118      	bne.n	80096ae <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d10a      	bne.n	8009698 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	015a      	lsls	r2, r3, #5
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	4413      	add	r3, r2
 800968a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800968e:	461a      	mov	r2, r3
 8009690:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009694:	6013      	str	r3, [r2, #0]
 8009696:	e013      	b.n	80096c0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	015a      	lsls	r2, r3, #5
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	4413      	add	r3, r2
 80096a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a4:	461a      	mov	r2, r3
 80096a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80096aa:	6013      	str	r3, [r2, #0]
 80096ac:	e008      	b.n	80096c0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	015a      	lsls	r2, r3, #5
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	4413      	add	r3, r2
 80096b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ba:	461a      	mov	r2, r3
 80096bc:	2300      	movs	r3, #0
 80096be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	015a      	lsls	r2, r3, #5
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	4413      	add	r3, r2
 80096c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096cc:	461a      	mov	r2, r3
 80096ce:	2300      	movs	r3, #0
 80096d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	015a      	lsls	r2, r3, #5
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	4413      	add	r3, r2
 80096da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096de:	461a      	mov	r2, r3
 80096e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80096e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	3301      	adds	r3, #1
 80096ea:	613b      	str	r3, [r7, #16]
 80096ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ee:	693a      	ldr	r2, [r7, #16]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d3b7      	bcc.n	8009664 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096fa:	691b      	ldr	r3, [r3, #16]
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009702:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009706:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009714:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009718:	2b00      	cmp	r3, #0
 800971a:	d105      	bne.n	8009728 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	699b      	ldr	r3, [r3, #24]
 8009720:	f043 0210 	orr.w	r2, r3, #16
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	699a      	ldr	r2, [r3, #24]
 800972c:	4b0e      	ldr	r3, [pc, #56]	; (8009768 <USB_DevInit+0x2b4>)
 800972e:	4313      	orrs	r3, r2
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009736:	2b00      	cmp	r3, #0
 8009738:	d005      	beq.n	8009746 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	699b      	ldr	r3, [r3, #24]
 800973e:	f043 0208 	orr.w	r2, r3, #8
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009748:	2b01      	cmp	r3, #1
 800974a:	d105      	bne.n	8009758 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	699a      	ldr	r2, [r3, #24]
 8009750:	4b06      	ldr	r3, [pc, #24]	; (800976c <USB_DevInit+0x2b8>)
 8009752:	4313      	orrs	r3, r2
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009758:	7dfb      	ldrb	r3, [r7, #23]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3718      	adds	r7, #24
 800975e:	46bd      	mov	sp, r7
 8009760:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009764:	b004      	add	sp, #16
 8009766:	4770      	bx	lr
 8009768:	803c3800 	.word	0x803c3800
 800976c:	40000004 	.word	0x40000004

08009770 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009770:	b480      	push	{r7}
 8009772:	b085      	sub	sp, #20
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800977a:	2300      	movs	r3, #0
 800977c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	3301      	adds	r3, #1
 8009782:	60fb      	str	r3, [r7, #12]
 8009784:	4a12      	ldr	r2, [pc, #72]	; (80097d0 <USB_FlushTxFifo+0x60>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d901      	bls.n	800978e <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800978a:	2303      	movs	r3, #3
 800978c:	e01a      	b.n	80097c4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	691b      	ldr	r3, [r3, #16]
 8009792:	2b00      	cmp	r3, #0
 8009794:	daf3      	bge.n	800977e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009796:	2300      	movs	r3, #0
 8009798:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	019b      	lsls	r3, r3, #6
 800979e:	f043 0220 	orr.w	r2, r3, #32
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	3301      	adds	r3, #1
 80097aa:	60fb      	str	r3, [r7, #12]
 80097ac:	4a08      	ldr	r2, [pc, #32]	; (80097d0 <USB_FlushTxFifo+0x60>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d901      	bls.n	80097b6 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80097b2:	2303      	movs	r3, #3
 80097b4:	e006      	b.n	80097c4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	f003 0320 	and.w	r3, r3, #32
 80097be:	2b20      	cmp	r3, #32
 80097c0:	d0f1      	beq.n	80097a6 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3714      	adds	r7, #20
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr
 80097d0:	00030d40 	.word	0x00030d40

080097d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b085      	sub	sp, #20
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80097dc:	2300      	movs	r3, #0
 80097de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	3301      	adds	r3, #1
 80097e4:	60fb      	str	r3, [r7, #12]
 80097e6:	4a11      	ldr	r2, [pc, #68]	; (800982c <USB_FlushRxFifo+0x58>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d901      	bls.n	80097f0 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80097ec:	2303      	movs	r3, #3
 80097ee:	e017      	b.n	8009820 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	691b      	ldr	r3, [r3, #16]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	daf3      	bge.n	80097e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80097f8:	2300      	movs	r3, #0
 80097fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2210      	movs	r2, #16
 8009800:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	3301      	adds	r3, #1
 8009806:	60fb      	str	r3, [r7, #12]
 8009808:	4a08      	ldr	r2, [pc, #32]	; (800982c <USB_FlushRxFifo+0x58>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d901      	bls.n	8009812 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800980e:	2303      	movs	r3, #3
 8009810:	e006      	b.n	8009820 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	691b      	ldr	r3, [r3, #16]
 8009816:	f003 0310 	and.w	r3, r3, #16
 800981a:	2b10      	cmp	r3, #16
 800981c:	d0f1      	beq.n	8009802 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800981e:	2300      	movs	r3, #0
}
 8009820:	4618      	mov	r0, r3
 8009822:	3714      	adds	r7, #20
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr
 800982c:	00030d40 	.word	0x00030d40

08009830 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009830:	b480      	push	{r7}
 8009832:	b085      	sub	sp, #20
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	460b      	mov	r3, r1
 800983a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	78fb      	ldrb	r3, [r7, #3]
 800984a:	68f9      	ldr	r1, [r7, #12]
 800984c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009850:	4313      	orrs	r3, r2
 8009852:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009854:	2300      	movs	r3, #0
}
 8009856:	4618      	mov	r0, r3
 8009858:	3714      	adds	r7, #20
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr

08009862 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009862:	b480      	push	{r7}
 8009864:	b085      	sub	sp, #20
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800987c:	f023 0303 	bic.w	r3, r3, #3
 8009880:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009890:	f043 0302 	orr.w	r3, r3, #2
 8009894:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	3714      	adds	r7, #20
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	695b      	ldr	r3, [r3, #20]
 80098b0:	f003 0301 	and.w	r3, r3, #1
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	370c      	adds	r7, #12
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b085      	sub	sp, #20
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80098c8:	2300      	movs	r3, #0
 80098ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	3301      	adds	r3, #1
 80098d0:	60fb      	str	r3, [r7, #12]
 80098d2:	4a13      	ldr	r2, [pc, #76]	; (8009920 <USB_CoreReset+0x60>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d901      	bls.n	80098dc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80098d8:	2303      	movs	r3, #3
 80098da:	e01a      	b.n	8009912 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	daf3      	bge.n	80098cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80098e4:	2300      	movs	r3, #0
 80098e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	f043 0201 	orr.w	r2, r3, #1
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	3301      	adds	r3, #1
 80098f8:	60fb      	str	r3, [r7, #12]
 80098fa:	4a09      	ldr	r2, [pc, #36]	; (8009920 <USB_CoreReset+0x60>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d901      	bls.n	8009904 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8009900:	2303      	movs	r3, #3
 8009902:	e006      	b.n	8009912 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	691b      	ldr	r3, [r3, #16]
 8009908:	f003 0301 	and.w	r3, r3, #1
 800990c:	2b01      	cmp	r3, #1
 800990e:	d0f1      	beq.n	80098f4 <USB_CoreReset+0x34>

  return HAL_OK;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3714      	adds	r7, #20
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop
 8009920:	00030d40 	.word	0x00030d40

08009924 <__errno>:
 8009924:	4b01      	ldr	r3, [pc, #4]	; (800992c <__errno+0x8>)
 8009926:	6818      	ldr	r0, [r3, #0]
 8009928:	4770      	bx	lr
 800992a:	bf00      	nop
 800992c:	24000010 	.word	0x24000010

08009930 <__libc_init_array>:
 8009930:	b570      	push	{r4, r5, r6, lr}
 8009932:	4d0d      	ldr	r5, [pc, #52]	; (8009968 <__libc_init_array+0x38>)
 8009934:	4c0d      	ldr	r4, [pc, #52]	; (800996c <__libc_init_array+0x3c>)
 8009936:	1b64      	subs	r4, r4, r5
 8009938:	10a4      	asrs	r4, r4, #2
 800993a:	2600      	movs	r6, #0
 800993c:	42a6      	cmp	r6, r4
 800993e:	d109      	bne.n	8009954 <__libc_init_array+0x24>
 8009940:	4d0b      	ldr	r5, [pc, #44]	; (8009970 <__libc_init_array+0x40>)
 8009942:	4c0c      	ldr	r4, [pc, #48]	; (8009974 <__libc_init_array+0x44>)
 8009944:	f000 fc4e 	bl	800a1e4 <_init>
 8009948:	1b64      	subs	r4, r4, r5
 800994a:	10a4      	asrs	r4, r4, #2
 800994c:	2600      	movs	r6, #0
 800994e:	42a6      	cmp	r6, r4
 8009950:	d105      	bne.n	800995e <__libc_init_array+0x2e>
 8009952:	bd70      	pop	{r4, r5, r6, pc}
 8009954:	f855 3b04 	ldr.w	r3, [r5], #4
 8009958:	4798      	blx	r3
 800995a:	3601      	adds	r6, #1
 800995c:	e7ee      	b.n	800993c <__libc_init_array+0xc>
 800995e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009962:	4798      	blx	r3
 8009964:	3601      	adds	r6, #1
 8009966:	e7f2      	b.n	800994e <__libc_init_array+0x1e>
 8009968:	0800a2c8 	.word	0x0800a2c8
 800996c:	0800a2c8 	.word	0x0800a2c8
 8009970:	0800a2c8 	.word	0x0800a2c8
 8009974:	0800a2cc 	.word	0x0800a2cc

08009978 <memcpy>:
 8009978:	440a      	add	r2, r1
 800997a:	4291      	cmp	r1, r2
 800997c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009980:	d100      	bne.n	8009984 <memcpy+0xc>
 8009982:	4770      	bx	lr
 8009984:	b510      	push	{r4, lr}
 8009986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800998a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800998e:	4291      	cmp	r1, r2
 8009990:	d1f9      	bne.n	8009986 <memcpy+0xe>
 8009992:	bd10      	pop	{r4, pc}

08009994 <memmove>:
 8009994:	4288      	cmp	r0, r1
 8009996:	b510      	push	{r4, lr}
 8009998:	eb01 0402 	add.w	r4, r1, r2
 800999c:	d902      	bls.n	80099a4 <memmove+0x10>
 800999e:	4284      	cmp	r4, r0
 80099a0:	4623      	mov	r3, r4
 80099a2:	d807      	bhi.n	80099b4 <memmove+0x20>
 80099a4:	1e43      	subs	r3, r0, #1
 80099a6:	42a1      	cmp	r1, r4
 80099a8:	d008      	beq.n	80099bc <memmove+0x28>
 80099aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099b2:	e7f8      	b.n	80099a6 <memmove+0x12>
 80099b4:	4402      	add	r2, r0
 80099b6:	4601      	mov	r1, r0
 80099b8:	428a      	cmp	r2, r1
 80099ba:	d100      	bne.n	80099be <memmove+0x2a>
 80099bc:	bd10      	pop	{r4, pc}
 80099be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099c6:	e7f7      	b.n	80099b8 <memmove+0x24>

080099c8 <memset>:
 80099c8:	4402      	add	r2, r0
 80099ca:	4603      	mov	r3, r0
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d100      	bne.n	80099d2 <memset+0xa>
 80099d0:	4770      	bx	lr
 80099d2:	f803 1b01 	strb.w	r1, [r3], #1
 80099d6:	e7f9      	b.n	80099cc <memset+0x4>

080099d8 <siprintf>:
 80099d8:	b40e      	push	{r1, r2, r3}
 80099da:	b500      	push	{lr}
 80099dc:	b09c      	sub	sp, #112	; 0x70
 80099de:	ab1d      	add	r3, sp, #116	; 0x74
 80099e0:	9002      	str	r0, [sp, #8]
 80099e2:	9006      	str	r0, [sp, #24]
 80099e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80099e8:	4809      	ldr	r0, [pc, #36]	; (8009a10 <siprintf+0x38>)
 80099ea:	9107      	str	r1, [sp, #28]
 80099ec:	9104      	str	r1, [sp, #16]
 80099ee:	4909      	ldr	r1, [pc, #36]	; (8009a14 <siprintf+0x3c>)
 80099f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80099f4:	9105      	str	r1, [sp, #20]
 80099f6:	6800      	ldr	r0, [r0, #0]
 80099f8:	9301      	str	r3, [sp, #4]
 80099fa:	a902      	add	r1, sp, #8
 80099fc:	f000 f868 	bl	8009ad0 <_svfiprintf_r>
 8009a00:	9b02      	ldr	r3, [sp, #8]
 8009a02:	2200      	movs	r2, #0
 8009a04:	701a      	strb	r2, [r3, #0]
 8009a06:	b01c      	add	sp, #112	; 0x70
 8009a08:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a0c:	b003      	add	sp, #12
 8009a0e:	4770      	bx	lr
 8009a10:	24000010 	.word	0x24000010
 8009a14:	ffff0208 	.word	0xffff0208

08009a18 <__ssputs_r>:
 8009a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a1c:	688e      	ldr	r6, [r1, #8]
 8009a1e:	429e      	cmp	r6, r3
 8009a20:	4682      	mov	sl, r0
 8009a22:	460c      	mov	r4, r1
 8009a24:	4690      	mov	r8, r2
 8009a26:	461f      	mov	r7, r3
 8009a28:	d838      	bhi.n	8009a9c <__ssputs_r+0x84>
 8009a2a:	898a      	ldrh	r2, [r1, #12]
 8009a2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a30:	d032      	beq.n	8009a98 <__ssputs_r+0x80>
 8009a32:	6825      	ldr	r5, [r4, #0]
 8009a34:	6909      	ldr	r1, [r1, #16]
 8009a36:	eba5 0901 	sub.w	r9, r5, r1
 8009a3a:	6965      	ldr	r5, [r4, #20]
 8009a3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a44:	3301      	adds	r3, #1
 8009a46:	444b      	add	r3, r9
 8009a48:	106d      	asrs	r5, r5, #1
 8009a4a:	429d      	cmp	r5, r3
 8009a4c:	bf38      	it	cc
 8009a4e:	461d      	movcc	r5, r3
 8009a50:	0553      	lsls	r3, r2, #21
 8009a52:	d531      	bpl.n	8009ab8 <__ssputs_r+0xa0>
 8009a54:	4629      	mov	r1, r5
 8009a56:	f000 fb1f 	bl	800a098 <_malloc_r>
 8009a5a:	4606      	mov	r6, r0
 8009a5c:	b950      	cbnz	r0, 8009a74 <__ssputs_r+0x5c>
 8009a5e:	230c      	movs	r3, #12
 8009a60:	f8ca 3000 	str.w	r3, [sl]
 8009a64:	89a3      	ldrh	r3, [r4, #12]
 8009a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a6a:	81a3      	strh	r3, [r4, #12]
 8009a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a74:	6921      	ldr	r1, [r4, #16]
 8009a76:	464a      	mov	r2, r9
 8009a78:	f7ff ff7e 	bl	8009978 <memcpy>
 8009a7c:	89a3      	ldrh	r3, [r4, #12]
 8009a7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a86:	81a3      	strh	r3, [r4, #12]
 8009a88:	6126      	str	r6, [r4, #16]
 8009a8a:	6165      	str	r5, [r4, #20]
 8009a8c:	444e      	add	r6, r9
 8009a8e:	eba5 0509 	sub.w	r5, r5, r9
 8009a92:	6026      	str	r6, [r4, #0]
 8009a94:	60a5      	str	r5, [r4, #8]
 8009a96:	463e      	mov	r6, r7
 8009a98:	42be      	cmp	r6, r7
 8009a9a:	d900      	bls.n	8009a9e <__ssputs_r+0x86>
 8009a9c:	463e      	mov	r6, r7
 8009a9e:	4632      	mov	r2, r6
 8009aa0:	6820      	ldr	r0, [r4, #0]
 8009aa2:	4641      	mov	r1, r8
 8009aa4:	f7ff ff76 	bl	8009994 <memmove>
 8009aa8:	68a3      	ldr	r3, [r4, #8]
 8009aaa:	6822      	ldr	r2, [r4, #0]
 8009aac:	1b9b      	subs	r3, r3, r6
 8009aae:	4432      	add	r2, r6
 8009ab0:	60a3      	str	r3, [r4, #8]
 8009ab2:	6022      	str	r2, [r4, #0]
 8009ab4:	2000      	movs	r0, #0
 8009ab6:	e7db      	b.n	8009a70 <__ssputs_r+0x58>
 8009ab8:	462a      	mov	r2, r5
 8009aba:	f000 fb47 	bl	800a14c <_realloc_r>
 8009abe:	4606      	mov	r6, r0
 8009ac0:	2800      	cmp	r0, #0
 8009ac2:	d1e1      	bne.n	8009a88 <__ssputs_r+0x70>
 8009ac4:	6921      	ldr	r1, [r4, #16]
 8009ac6:	4650      	mov	r0, sl
 8009ac8:	f000 fa96 	bl	8009ff8 <_free_r>
 8009acc:	e7c7      	b.n	8009a5e <__ssputs_r+0x46>
	...

08009ad0 <_svfiprintf_r>:
 8009ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad4:	4698      	mov	r8, r3
 8009ad6:	898b      	ldrh	r3, [r1, #12]
 8009ad8:	061b      	lsls	r3, r3, #24
 8009ada:	b09d      	sub	sp, #116	; 0x74
 8009adc:	4607      	mov	r7, r0
 8009ade:	460d      	mov	r5, r1
 8009ae0:	4614      	mov	r4, r2
 8009ae2:	d50e      	bpl.n	8009b02 <_svfiprintf_r+0x32>
 8009ae4:	690b      	ldr	r3, [r1, #16]
 8009ae6:	b963      	cbnz	r3, 8009b02 <_svfiprintf_r+0x32>
 8009ae8:	2140      	movs	r1, #64	; 0x40
 8009aea:	f000 fad5 	bl	800a098 <_malloc_r>
 8009aee:	6028      	str	r0, [r5, #0]
 8009af0:	6128      	str	r0, [r5, #16]
 8009af2:	b920      	cbnz	r0, 8009afe <_svfiprintf_r+0x2e>
 8009af4:	230c      	movs	r3, #12
 8009af6:	603b      	str	r3, [r7, #0]
 8009af8:	f04f 30ff 	mov.w	r0, #4294967295
 8009afc:	e0d1      	b.n	8009ca2 <_svfiprintf_r+0x1d2>
 8009afe:	2340      	movs	r3, #64	; 0x40
 8009b00:	616b      	str	r3, [r5, #20]
 8009b02:	2300      	movs	r3, #0
 8009b04:	9309      	str	r3, [sp, #36]	; 0x24
 8009b06:	2320      	movs	r3, #32
 8009b08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b10:	2330      	movs	r3, #48	; 0x30
 8009b12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009cbc <_svfiprintf_r+0x1ec>
 8009b16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b1a:	f04f 0901 	mov.w	r9, #1
 8009b1e:	4623      	mov	r3, r4
 8009b20:	469a      	mov	sl, r3
 8009b22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b26:	b10a      	cbz	r2, 8009b2c <_svfiprintf_r+0x5c>
 8009b28:	2a25      	cmp	r2, #37	; 0x25
 8009b2a:	d1f9      	bne.n	8009b20 <_svfiprintf_r+0x50>
 8009b2c:	ebba 0b04 	subs.w	fp, sl, r4
 8009b30:	d00b      	beq.n	8009b4a <_svfiprintf_r+0x7a>
 8009b32:	465b      	mov	r3, fp
 8009b34:	4622      	mov	r2, r4
 8009b36:	4629      	mov	r1, r5
 8009b38:	4638      	mov	r0, r7
 8009b3a:	f7ff ff6d 	bl	8009a18 <__ssputs_r>
 8009b3e:	3001      	adds	r0, #1
 8009b40:	f000 80aa 	beq.w	8009c98 <_svfiprintf_r+0x1c8>
 8009b44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b46:	445a      	add	r2, fp
 8009b48:	9209      	str	r2, [sp, #36]	; 0x24
 8009b4a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	f000 80a2 	beq.w	8009c98 <_svfiprintf_r+0x1c8>
 8009b54:	2300      	movs	r3, #0
 8009b56:	f04f 32ff 	mov.w	r2, #4294967295
 8009b5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b5e:	f10a 0a01 	add.w	sl, sl, #1
 8009b62:	9304      	str	r3, [sp, #16]
 8009b64:	9307      	str	r3, [sp, #28]
 8009b66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b6a:	931a      	str	r3, [sp, #104]	; 0x68
 8009b6c:	4654      	mov	r4, sl
 8009b6e:	2205      	movs	r2, #5
 8009b70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b74:	4851      	ldr	r0, [pc, #324]	; (8009cbc <_svfiprintf_r+0x1ec>)
 8009b76:	f7f6 fbbb 	bl	80002f0 <memchr>
 8009b7a:	9a04      	ldr	r2, [sp, #16]
 8009b7c:	b9d8      	cbnz	r0, 8009bb6 <_svfiprintf_r+0xe6>
 8009b7e:	06d0      	lsls	r0, r2, #27
 8009b80:	bf44      	itt	mi
 8009b82:	2320      	movmi	r3, #32
 8009b84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b88:	0711      	lsls	r1, r2, #28
 8009b8a:	bf44      	itt	mi
 8009b8c:	232b      	movmi	r3, #43	; 0x2b
 8009b8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b92:	f89a 3000 	ldrb.w	r3, [sl]
 8009b96:	2b2a      	cmp	r3, #42	; 0x2a
 8009b98:	d015      	beq.n	8009bc6 <_svfiprintf_r+0xf6>
 8009b9a:	9a07      	ldr	r2, [sp, #28]
 8009b9c:	4654      	mov	r4, sl
 8009b9e:	2000      	movs	r0, #0
 8009ba0:	f04f 0c0a 	mov.w	ip, #10
 8009ba4:	4621      	mov	r1, r4
 8009ba6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009baa:	3b30      	subs	r3, #48	; 0x30
 8009bac:	2b09      	cmp	r3, #9
 8009bae:	d94e      	bls.n	8009c4e <_svfiprintf_r+0x17e>
 8009bb0:	b1b0      	cbz	r0, 8009be0 <_svfiprintf_r+0x110>
 8009bb2:	9207      	str	r2, [sp, #28]
 8009bb4:	e014      	b.n	8009be0 <_svfiprintf_r+0x110>
 8009bb6:	eba0 0308 	sub.w	r3, r0, r8
 8009bba:	fa09 f303 	lsl.w	r3, r9, r3
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	9304      	str	r3, [sp, #16]
 8009bc2:	46a2      	mov	sl, r4
 8009bc4:	e7d2      	b.n	8009b6c <_svfiprintf_r+0x9c>
 8009bc6:	9b03      	ldr	r3, [sp, #12]
 8009bc8:	1d19      	adds	r1, r3, #4
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	9103      	str	r1, [sp, #12]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	bfbb      	ittet	lt
 8009bd2:	425b      	neglt	r3, r3
 8009bd4:	f042 0202 	orrlt.w	r2, r2, #2
 8009bd8:	9307      	strge	r3, [sp, #28]
 8009bda:	9307      	strlt	r3, [sp, #28]
 8009bdc:	bfb8      	it	lt
 8009bde:	9204      	strlt	r2, [sp, #16]
 8009be0:	7823      	ldrb	r3, [r4, #0]
 8009be2:	2b2e      	cmp	r3, #46	; 0x2e
 8009be4:	d10c      	bne.n	8009c00 <_svfiprintf_r+0x130>
 8009be6:	7863      	ldrb	r3, [r4, #1]
 8009be8:	2b2a      	cmp	r3, #42	; 0x2a
 8009bea:	d135      	bne.n	8009c58 <_svfiprintf_r+0x188>
 8009bec:	9b03      	ldr	r3, [sp, #12]
 8009bee:	1d1a      	adds	r2, r3, #4
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	9203      	str	r2, [sp, #12]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	bfb8      	it	lt
 8009bf8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009bfc:	3402      	adds	r4, #2
 8009bfe:	9305      	str	r3, [sp, #20]
 8009c00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ccc <_svfiprintf_r+0x1fc>
 8009c04:	7821      	ldrb	r1, [r4, #0]
 8009c06:	2203      	movs	r2, #3
 8009c08:	4650      	mov	r0, sl
 8009c0a:	f7f6 fb71 	bl	80002f0 <memchr>
 8009c0e:	b140      	cbz	r0, 8009c22 <_svfiprintf_r+0x152>
 8009c10:	2340      	movs	r3, #64	; 0x40
 8009c12:	eba0 000a 	sub.w	r0, r0, sl
 8009c16:	fa03 f000 	lsl.w	r0, r3, r0
 8009c1a:	9b04      	ldr	r3, [sp, #16]
 8009c1c:	4303      	orrs	r3, r0
 8009c1e:	3401      	adds	r4, #1
 8009c20:	9304      	str	r3, [sp, #16]
 8009c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c26:	4826      	ldr	r0, [pc, #152]	; (8009cc0 <_svfiprintf_r+0x1f0>)
 8009c28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c2c:	2206      	movs	r2, #6
 8009c2e:	f7f6 fb5f 	bl	80002f0 <memchr>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	d038      	beq.n	8009ca8 <_svfiprintf_r+0x1d8>
 8009c36:	4b23      	ldr	r3, [pc, #140]	; (8009cc4 <_svfiprintf_r+0x1f4>)
 8009c38:	bb1b      	cbnz	r3, 8009c82 <_svfiprintf_r+0x1b2>
 8009c3a:	9b03      	ldr	r3, [sp, #12]
 8009c3c:	3307      	adds	r3, #7
 8009c3e:	f023 0307 	bic.w	r3, r3, #7
 8009c42:	3308      	adds	r3, #8
 8009c44:	9303      	str	r3, [sp, #12]
 8009c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c48:	4433      	add	r3, r6
 8009c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c4c:	e767      	b.n	8009b1e <_svfiprintf_r+0x4e>
 8009c4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c52:	460c      	mov	r4, r1
 8009c54:	2001      	movs	r0, #1
 8009c56:	e7a5      	b.n	8009ba4 <_svfiprintf_r+0xd4>
 8009c58:	2300      	movs	r3, #0
 8009c5a:	3401      	adds	r4, #1
 8009c5c:	9305      	str	r3, [sp, #20]
 8009c5e:	4619      	mov	r1, r3
 8009c60:	f04f 0c0a 	mov.w	ip, #10
 8009c64:	4620      	mov	r0, r4
 8009c66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c6a:	3a30      	subs	r2, #48	; 0x30
 8009c6c:	2a09      	cmp	r2, #9
 8009c6e:	d903      	bls.n	8009c78 <_svfiprintf_r+0x1a8>
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d0c5      	beq.n	8009c00 <_svfiprintf_r+0x130>
 8009c74:	9105      	str	r1, [sp, #20]
 8009c76:	e7c3      	b.n	8009c00 <_svfiprintf_r+0x130>
 8009c78:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c7c:	4604      	mov	r4, r0
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e7f0      	b.n	8009c64 <_svfiprintf_r+0x194>
 8009c82:	ab03      	add	r3, sp, #12
 8009c84:	9300      	str	r3, [sp, #0]
 8009c86:	462a      	mov	r2, r5
 8009c88:	4b0f      	ldr	r3, [pc, #60]	; (8009cc8 <_svfiprintf_r+0x1f8>)
 8009c8a:	a904      	add	r1, sp, #16
 8009c8c:	4638      	mov	r0, r7
 8009c8e:	f3af 8000 	nop.w
 8009c92:	1c42      	adds	r2, r0, #1
 8009c94:	4606      	mov	r6, r0
 8009c96:	d1d6      	bne.n	8009c46 <_svfiprintf_r+0x176>
 8009c98:	89ab      	ldrh	r3, [r5, #12]
 8009c9a:	065b      	lsls	r3, r3, #25
 8009c9c:	f53f af2c 	bmi.w	8009af8 <_svfiprintf_r+0x28>
 8009ca0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ca2:	b01d      	add	sp, #116	; 0x74
 8009ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ca8:	ab03      	add	r3, sp, #12
 8009caa:	9300      	str	r3, [sp, #0]
 8009cac:	462a      	mov	r2, r5
 8009cae:	4b06      	ldr	r3, [pc, #24]	; (8009cc8 <_svfiprintf_r+0x1f8>)
 8009cb0:	a904      	add	r1, sp, #16
 8009cb2:	4638      	mov	r0, r7
 8009cb4:	f000 f87a 	bl	8009dac <_printf_i>
 8009cb8:	e7eb      	b.n	8009c92 <_svfiprintf_r+0x1c2>
 8009cba:	bf00      	nop
 8009cbc:	0800a28c 	.word	0x0800a28c
 8009cc0:	0800a296 	.word	0x0800a296
 8009cc4:	00000000 	.word	0x00000000
 8009cc8:	08009a19 	.word	0x08009a19
 8009ccc:	0800a292 	.word	0x0800a292

08009cd0 <_printf_common>:
 8009cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cd4:	4616      	mov	r6, r2
 8009cd6:	4699      	mov	r9, r3
 8009cd8:	688a      	ldr	r2, [r1, #8]
 8009cda:	690b      	ldr	r3, [r1, #16]
 8009cdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	bfb8      	it	lt
 8009ce4:	4613      	movlt	r3, r2
 8009ce6:	6033      	str	r3, [r6, #0]
 8009ce8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009cec:	4607      	mov	r7, r0
 8009cee:	460c      	mov	r4, r1
 8009cf0:	b10a      	cbz	r2, 8009cf6 <_printf_common+0x26>
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	6033      	str	r3, [r6, #0]
 8009cf6:	6823      	ldr	r3, [r4, #0]
 8009cf8:	0699      	lsls	r1, r3, #26
 8009cfa:	bf42      	ittt	mi
 8009cfc:	6833      	ldrmi	r3, [r6, #0]
 8009cfe:	3302      	addmi	r3, #2
 8009d00:	6033      	strmi	r3, [r6, #0]
 8009d02:	6825      	ldr	r5, [r4, #0]
 8009d04:	f015 0506 	ands.w	r5, r5, #6
 8009d08:	d106      	bne.n	8009d18 <_printf_common+0x48>
 8009d0a:	f104 0a19 	add.w	sl, r4, #25
 8009d0e:	68e3      	ldr	r3, [r4, #12]
 8009d10:	6832      	ldr	r2, [r6, #0]
 8009d12:	1a9b      	subs	r3, r3, r2
 8009d14:	42ab      	cmp	r3, r5
 8009d16:	dc26      	bgt.n	8009d66 <_printf_common+0x96>
 8009d18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d1c:	1e13      	subs	r3, r2, #0
 8009d1e:	6822      	ldr	r2, [r4, #0]
 8009d20:	bf18      	it	ne
 8009d22:	2301      	movne	r3, #1
 8009d24:	0692      	lsls	r2, r2, #26
 8009d26:	d42b      	bmi.n	8009d80 <_printf_common+0xb0>
 8009d28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d2c:	4649      	mov	r1, r9
 8009d2e:	4638      	mov	r0, r7
 8009d30:	47c0      	blx	r8
 8009d32:	3001      	adds	r0, #1
 8009d34:	d01e      	beq.n	8009d74 <_printf_common+0xa4>
 8009d36:	6823      	ldr	r3, [r4, #0]
 8009d38:	68e5      	ldr	r5, [r4, #12]
 8009d3a:	6832      	ldr	r2, [r6, #0]
 8009d3c:	f003 0306 	and.w	r3, r3, #6
 8009d40:	2b04      	cmp	r3, #4
 8009d42:	bf08      	it	eq
 8009d44:	1aad      	subeq	r5, r5, r2
 8009d46:	68a3      	ldr	r3, [r4, #8]
 8009d48:	6922      	ldr	r2, [r4, #16]
 8009d4a:	bf0c      	ite	eq
 8009d4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d50:	2500      	movne	r5, #0
 8009d52:	4293      	cmp	r3, r2
 8009d54:	bfc4      	itt	gt
 8009d56:	1a9b      	subgt	r3, r3, r2
 8009d58:	18ed      	addgt	r5, r5, r3
 8009d5a:	2600      	movs	r6, #0
 8009d5c:	341a      	adds	r4, #26
 8009d5e:	42b5      	cmp	r5, r6
 8009d60:	d11a      	bne.n	8009d98 <_printf_common+0xc8>
 8009d62:	2000      	movs	r0, #0
 8009d64:	e008      	b.n	8009d78 <_printf_common+0xa8>
 8009d66:	2301      	movs	r3, #1
 8009d68:	4652      	mov	r2, sl
 8009d6a:	4649      	mov	r1, r9
 8009d6c:	4638      	mov	r0, r7
 8009d6e:	47c0      	blx	r8
 8009d70:	3001      	adds	r0, #1
 8009d72:	d103      	bne.n	8009d7c <_printf_common+0xac>
 8009d74:	f04f 30ff 	mov.w	r0, #4294967295
 8009d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d7c:	3501      	adds	r5, #1
 8009d7e:	e7c6      	b.n	8009d0e <_printf_common+0x3e>
 8009d80:	18e1      	adds	r1, r4, r3
 8009d82:	1c5a      	adds	r2, r3, #1
 8009d84:	2030      	movs	r0, #48	; 0x30
 8009d86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d8a:	4422      	add	r2, r4
 8009d8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d94:	3302      	adds	r3, #2
 8009d96:	e7c7      	b.n	8009d28 <_printf_common+0x58>
 8009d98:	2301      	movs	r3, #1
 8009d9a:	4622      	mov	r2, r4
 8009d9c:	4649      	mov	r1, r9
 8009d9e:	4638      	mov	r0, r7
 8009da0:	47c0      	blx	r8
 8009da2:	3001      	adds	r0, #1
 8009da4:	d0e6      	beq.n	8009d74 <_printf_common+0xa4>
 8009da6:	3601      	adds	r6, #1
 8009da8:	e7d9      	b.n	8009d5e <_printf_common+0x8e>
	...

08009dac <_printf_i>:
 8009dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009db0:	460c      	mov	r4, r1
 8009db2:	4691      	mov	r9, r2
 8009db4:	7e27      	ldrb	r7, [r4, #24]
 8009db6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009db8:	2f78      	cmp	r7, #120	; 0x78
 8009dba:	4680      	mov	r8, r0
 8009dbc:	469a      	mov	sl, r3
 8009dbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009dc2:	d807      	bhi.n	8009dd4 <_printf_i+0x28>
 8009dc4:	2f62      	cmp	r7, #98	; 0x62
 8009dc6:	d80a      	bhi.n	8009dde <_printf_i+0x32>
 8009dc8:	2f00      	cmp	r7, #0
 8009dca:	f000 80d8 	beq.w	8009f7e <_printf_i+0x1d2>
 8009dce:	2f58      	cmp	r7, #88	; 0x58
 8009dd0:	f000 80a3 	beq.w	8009f1a <_printf_i+0x16e>
 8009dd4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009dd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ddc:	e03a      	b.n	8009e54 <_printf_i+0xa8>
 8009dde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009de2:	2b15      	cmp	r3, #21
 8009de4:	d8f6      	bhi.n	8009dd4 <_printf_i+0x28>
 8009de6:	a001      	add	r0, pc, #4	; (adr r0, 8009dec <_printf_i+0x40>)
 8009de8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009dec:	08009e45 	.word	0x08009e45
 8009df0:	08009e59 	.word	0x08009e59
 8009df4:	08009dd5 	.word	0x08009dd5
 8009df8:	08009dd5 	.word	0x08009dd5
 8009dfc:	08009dd5 	.word	0x08009dd5
 8009e00:	08009dd5 	.word	0x08009dd5
 8009e04:	08009e59 	.word	0x08009e59
 8009e08:	08009dd5 	.word	0x08009dd5
 8009e0c:	08009dd5 	.word	0x08009dd5
 8009e10:	08009dd5 	.word	0x08009dd5
 8009e14:	08009dd5 	.word	0x08009dd5
 8009e18:	08009f65 	.word	0x08009f65
 8009e1c:	08009e89 	.word	0x08009e89
 8009e20:	08009f47 	.word	0x08009f47
 8009e24:	08009dd5 	.word	0x08009dd5
 8009e28:	08009dd5 	.word	0x08009dd5
 8009e2c:	08009f87 	.word	0x08009f87
 8009e30:	08009dd5 	.word	0x08009dd5
 8009e34:	08009e89 	.word	0x08009e89
 8009e38:	08009dd5 	.word	0x08009dd5
 8009e3c:	08009dd5 	.word	0x08009dd5
 8009e40:	08009f4f 	.word	0x08009f4f
 8009e44:	680b      	ldr	r3, [r1, #0]
 8009e46:	1d1a      	adds	r2, r3, #4
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	600a      	str	r2, [r1, #0]
 8009e4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009e50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e54:	2301      	movs	r3, #1
 8009e56:	e0a3      	b.n	8009fa0 <_printf_i+0x1f4>
 8009e58:	6825      	ldr	r5, [r4, #0]
 8009e5a:	6808      	ldr	r0, [r1, #0]
 8009e5c:	062e      	lsls	r6, r5, #24
 8009e5e:	f100 0304 	add.w	r3, r0, #4
 8009e62:	d50a      	bpl.n	8009e7a <_printf_i+0xce>
 8009e64:	6805      	ldr	r5, [r0, #0]
 8009e66:	600b      	str	r3, [r1, #0]
 8009e68:	2d00      	cmp	r5, #0
 8009e6a:	da03      	bge.n	8009e74 <_printf_i+0xc8>
 8009e6c:	232d      	movs	r3, #45	; 0x2d
 8009e6e:	426d      	negs	r5, r5
 8009e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e74:	485e      	ldr	r0, [pc, #376]	; (8009ff0 <_printf_i+0x244>)
 8009e76:	230a      	movs	r3, #10
 8009e78:	e019      	b.n	8009eae <_printf_i+0x102>
 8009e7a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009e7e:	6805      	ldr	r5, [r0, #0]
 8009e80:	600b      	str	r3, [r1, #0]
 8009e82:	bf18      	it	ne
 8009e84:	b22d      	sxthne	r5, r5
 8009e86:	e7ef      	b.n	8009e68 <_printf_i+0xbc>
 8009e88:	680b      	ldr	r3, [r1, #0]
 8009e8a:	6825      	ldr	r5, [r4, #0]
 8009e8c:	1d18      	adds	r0, r3, #4
 8009e8e:	6008      	str	r0, [r1, #0]
 8009e90:	0628      	lsls	r0, r5, #24
 8009e92:	d501      	bpl.n	8009e98 <_printf_i+0xec>
 8009e94:	681d      	ldr	r5, [r3, #0]
 8009e96:	e002      	b.n	8009e9e <_printf_i+0xf2>
 8009e98:	0669      	lsls	r1, r5, #25
 8009e9a:	d5fb      	bpl.n	8009e94 <_printf_i+0xe8>
 8009e9c:	881d      	ldrh	r5, [r3, #0]
 8009e9e:	4854      	ldr	r0, [pc, #336]	; (8009ff0 <_printf_i+0x244>)
 8009ea0:	2f6f      	cmp	r7, #111	; 0x6f
 8009ea2:	bf0c      	ite	eq
 8009ea4:	2308      	moveq	r3, #8
 8009ea6:	230a      	movne	r3, #10
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009eae:	6866      	ldr	r6, [r4, #4]
 8009eb0:	60a6      	str	r6, [r4, #8]
 8009eb2:	2e00      	cmp	r6, #0
 8009eb4:	bfa2      	ittt	ge
 8009eb6:	6821      	ldrge	r1, [r4, #0]
 8009eb8:	f021 0104 	bicge.w	r1, r1, #4
 8009ebc:	6021      	strge	r1, [r4, #0]
 8009ebe:	b90d      	cbnz	r5, 8009ec4 <_printf_i+0x118>
 8009ec0:	2e00      	cmp	r6, #0
 8009ec2:	d04d      	beq.n	8009f60 <_printf_i+0x1b4>
 8009ec4:	4616      	mov	r6, r2
 8009ec6:	fbb5 f1f3 	udiv	r1, r5, r3
 8009eca:	fb03 5711 	mls	r7, r3, r1, r5
 8009ece:	5dc7      	ldrb	r7, [r0, r7]
 8009ed0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ed4:	462f      	mov	r7, r5
 8009ed6:	42bb      	cmp	r3, r7
 8009ed8:	460d      	mov	r5, r1
 8009eda:	d9f4      	bls.n	8009ec6 <_printf_i+0x11a>
 8009edc:	2b08      	cmp	r3, #8
 8009ede:	d10b      	bne.n	8009ef8 <_printf_i+0x14c>
 8009ee0:	6823      	ldr	r3, [r4, #0]
 8009ee2:	07df      	lsls	r7, r3, #31
 8009ee4:	d508      	bpl.n	8009ef8 <_printf_i+0x14c>
 8009ee6:	6923      	ldr	r3, [r4, #16]
 8009ee8:	6861      	ldr	r1, [r4, #4]
 8009eea:	4299      	cmp	r1, r3
 8009eec:	bfde      	ittt	le
 8009eee:	2330      	movle	r3, #48	; 0x30
 8009ef0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009ef4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009ef8:	1b92      	subs	r2, r2, r6
 8009efa:	6122      	str	r2, [r4, #16]
 8009efc:	f8cd a000 	str.w	sl, [sp]
 8009f00:	464b      	mov	r3, r9
 8009f02:	aa03      	add	r2, sp, #12
 8009f04:	4621      	mov	r1, r4
 8009f06:	4640      	mov	r0, r8
 8009f08:	f7ff fee2 	bl	8009cd0 <_printf_common>
 8009f0c:	3001      	adds	r0, #1
 8009f0e:	d14c      	bne.n	8009faa <_printf_i+0x1fe>
 8009f10:	f04f 30ff 	mov.w	r0, #4294967295
 8009f14:	b004      	add	sp, #16
 8009f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f1a:	4835      	ldr	r0, [pc, #212]	; (8009ff0 <_printf_i+0x244>)
 8009f1c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009f20:	6823      	ldr	r3, [r4, #0]
 8009f22:	680e      	ldr	r6, [r1, #0]
 8009f24:	061f      	lsls	r7, r3, #24
 8009f26:	f856 5b04 	ldr.w	r5, [r6], #4
 8009f2a:	600e      	str	r6, [r1, #0]
 8009f2c:	d514      	bpl.n	8009f58 <_printf_i+0x1ac>
 8009f2e:	07d9      	lsls	r1, r3, #31
 8009f30:	bf44      	itt	mi
 8009f32:	f043 0320 	orrmi.w	r3, r3, #32
 8009f36:	6023      	strmi	r3, [r4, #0]
 8009f38:	b91d      	cbnz	r5, 8009f42 <_printf_i+0x196>
 8009f3a:	6823      	ldr	r3, [r4, #0]
 8009f3c:	f023 0320 	bic.w	r3, r3, #32
 8009f40:	6023      	str	r3, [r4, #0]
 8009f42:	2310      	movs	r3, #16
 8009f44:	e7b0      	b.n	8009ea8 <_printf_i+0xfc>
 8009f46:	6823      	ldr	r3, [r4, #0]
 8009f48:	f043 0320 	orr.w	r3, r3, #32
 8009f4c:	6023      	str	r3, [r4, #0]
 8009f4e:	2378      	movs	r3, #120	; 0x78
 8009f50:	4828      	ldr	r0, [pc, #160]	; (8009ff4 <_printf_i+0x248>)
 8009f52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f56:	e7e3      	b.n	8009f20 <_printf_i+0x174>
 8009f58:	065e      	lsls	r6, r3, #25
 8009f5a:	bf48      	it	mi
 8009f5c:	b2ad      	uxthmi	r5, r5
 8009f5e:	e7e6      	b.n	8009f2e <_printf_i+0x182>
 8009f60:	4616      	mov	r6, r2
 8009f62:	e7bb      	b.n	8009edc <_printf_i+0x130>
 8009f64:	680b      	ldr	r3, [r1, #0]
 8009f66:	6826      	ldr	r6, [r4, #0]
 8009f68:	6960      	ldr	r0, [r4, #20]
 8009f6a:	1d1d      	adds	r5, r3, #4
 8009f6c:	600d      	str	r5, [r1, #0]
 8009f6e:	0635      	lsls	r5, r6, #24
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	d501      	bpl.n	8009f78 <_printf_i+0x1cc>
 8009f74:	6018      	str	r0, [r3, #0]
 8009f76:	e002      	b.n	8009f7e <_printf_i+0x1d2>
 8009f78:	0671      	lsls	r1, r6, #25
 8009f7a:	d5fb      	bpl.n	8009f74 <_printf_i+0x1c8>
 8009f7c:	8018      	strh	r0, [r3, #0]
 8009f7e:	2300      	movs	r3, #0
 8009f80:	6123      	str	r3, [r4, #16]
 8009f82:	4616      	mov	r6, r2
 8009f84:	e7ba      	b.n	8009efc <_printf_i+0x150>
 8009f86:	680b      	ldr	r3, [r1, #0]
 8009f88:	1d1a      	adds	r2, r3, #4
 8009f8a:	600a      	str	r2, [r1, #0]
 8009f8c:	681e      	ldr	r6, [r3, #0]
 8009f8e:	6862      	ldr	r2, [r4, #4]
 8009f90:	2100      	movs	r1, #0
 8009f92:	4630      	mov	r0, r6
 8009f94:	f7f6 f9ac 	bl	80002f0 <memchr>
 8009f98:	b108      	cbz	r0, 8009f9e <_printf_i+0x1f2>
 8009f9a:	1b80      	subs	r0, r0, r6
 8009f9c:	6060      	str	r0, [r4, #4]
 8009f9e:	6863      	ldr	r3, [r4, #4]
 8009fa0:	6123      	str	r3, [r4, #16]
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fa8:	e7a8      	b.n	8009efc <_printf_i+0x150>
 8009faa:	6923      	ldr	r3, [r4, #16]
 8009fac:	4632      	mov	r2, r6
 8009fae:	4649      	mov	r1, r9
 8009fb0:	4640      	mov	r0, r8
 8009fb2:	47d0      	blx	sl
 8009fb4:	3001      	adds	r0, #1
 8009fb6:	d0ab      	beq.n	8009f10 <_printf_i+0x164>
 8009fb8:	6823      	ldr	r3, [r4, #0]
 8009fba:	079b      	lsls	r3, r3, #30
 8009fbc:	d413      	bmi.n	8009fe6 <_printf_i+0x23a>
 8009fbe:	68e0      	ldr	r0, [r4, #12]
 8009fc0:	9b03      	ldr	r3, [sp, #12]
 8009fc2:	4298      	cmp	r0, r3
 8009fc4:	bfb8      	it	lt
 8009fc6:	4618      	movlt	r0, r3
 8009fc8:	e7a4      	b.n	8009f14 <_printf_i+0x168>
 8009fca:	2301      	movs	r3, #1
 8009fcc:	4632      	mov	r2, r6
 8009fce:	4649      	mov	r1, r9
 8009fd0:	4640      	mov	r0, r8
 8009fd2:	47d0      	blx	sl
 8009fd4:	3001      	adds	r0, #1
 8009fd6:	d09b      	beq.n	8009f10 <_printf_i+0x164>
 8009fd8:	3501      	adds	r5, #1
 8009fda:	68e3      	ldr	r3, [r4, #12]
 8009fdc:	9903      	ldr	r1, [sp, #12]
 8009fde:	1a5b      	subs	r3, r3, r1
 8009fe0:	42ab      	cmp	r3, r5
 8009fe2:	dcf2      	bgt.n	8009fca <_printf_i+0x21e>
 8009fe4:	e7eb      	b.n	8009fbe <_printf_i+0x212>
 8009fe6:	2500      	movs	r5, #0
 8009fe8:	f104 0619 	add.w	r6, r4, #25
 8009fec:	e7f5      	b.n	8009fda <_printf_i+0x22e>
 8009fee:	bf00      	nop
 8009ff0:	0800a29d 	.word	0x0800a29d
 8009ff4:	0800a2ae 	.word	0x0800a2ae

08009ff8 <_free_r>:
 8009ff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ffa:	2900      	cmp	r1, #0
 8009ffc:	d048      	beq.n	800a090 <_free_r+0x98>
 8009ffe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a002:	9001      	str	r0, [sp, #4]
 800a004:	2b00      	cmp	r3, #0
 800a006:	f1a1 0404 	sub.w	r4, r1, #4
 800a00a:	bfb8      	it	lt
 800a00c:	18e4      	addlt	r4, r4, r3
 800a00e:	f000 f8d3 	bl	800a1b8 <__malloc_lock>
 800a012:	4a20      	ldr	r2, [pc, #128]	; (800a094 <_free_r+0x9c>)
 800a014:	9801      	ldr	r0, [sp, #4]
 800a016:	6813      	ldr	r3, [r2, #0]
 800a018:	4615      	mov	r5, r2
 800a01a:	b933      	cbnz	r3, 800a02a <_free_r+0x32>
 800a01c:	6063      	str	r3, [r4, #4]
 800a01e:	6014      	str	r4, [r2, #0]
 800a020:	b003      	add	sp, #12
 800a022:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a026:	f000 b8cd 	b.w	800a1c4 <__malloc_unlock>
 800a02a:	42a3      	cmp	r3, r4
 800a02c:	d90b      	bls.n	800a046 <_free_r+0x4e>
 800a02e:	6821      	ldr	r1, [r4, #0]
 800a030:	1862      	adds	r2, r4, r1
 800a032:	4293      	cmp	r3, r2
 800a034:	bf04      	itt	eq
 800a036:	681a      	ldreq	r2, [r3, #0]
 800a038:	685b      	ldreq	r3, [r3, #4]
 800a03a:	6063      	str	r3, [r4, #4]
 800a03c:	bf04      	itt	eq
 800a03e:	1852      	addeq	r2, r2, r1
 800a040:	6022      	streq	r2, [r4, #0]
 800a042:	602c      	str	r4, [r5, #0]
 800a044:	e7ec      	b.n	800a020 <_free_r+0x28>
 800a046:	461a      	mov	r2, r3
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	b10b      	cbz	r3, 800a050 <_free_r+0x58>
 800a04c:	42a3      	cmp	r3, r4
 800a04e:	d9fa      	bls.n	800a046 <_free_r+0x4e>
 800a050:	6811      	ldr	r1, [r2, #0]
 800a052:	1855      	adds	r5, r2, r1
 800a054:	42a5      	cmp	r5, r4
 800a056:	d10b      	bne.n	800a070 <_free_r+0x78>
 800a058:	6824      	ldr	r4, [r4, #0]
 800a05a:	4421      	add	r1, r4
 800a05c:	1854      	adds	r4, r2, r1
 800a05e:	42a3      	cmp	r3, r4
 800a060:	6011      	str	r1, [r2, #0]
 800a062:	d1dd      	bne.n	800a020 <_free_r+0x28>
 800a064:	681c      	ldr	r4, [r3, #0]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	6053      	str	r3, [r2, #4]
 800a06a:	4421      	add	r1, r4
 800a06c:	6011      	str	r1, [r2, #0]
 800a06e:	e7d7      	b.n	800a020 <_free_r+0x28>
 800a070:	d902      	bls.n	800a078 <_free_r+0x80>
 800a072:	230c      	movs	r3, #12
 800a074:	6003      	str	r3, [r0, #0]
 800a076:	e7d3      	b.n	800a020 <_free_r+0x28>
 800a078:	6825      	ldr	r5, [r4, #0]
 800a07a:	1961      	adds	r1, r4, r5
 800a07c:	428b      	cmp	r3, r1
 800a07e:	bf04      	itt	eq
 800a080:	6819      	ldreq	r1, [r3, #0]
 800a082:	685b      	ldreq	r3, [r3, #4]
 800a084:	6063      	str	r3, [r4, #4]
 800a086:	bf04      	itt	eq
 800a088:	1949      	addeq	r1, r1, r5
 800a08a:	6021      	streq	r1, [r4, #0]
 800a08c:	6054      	str	r4, [r2, #4]
 800a08e:	e7c7      	b.n	800a020 <_free_r+0x28>
 800a090:	b003      	add	sp, #12
 800a092:	bd30      	pop	{r4, r5, pc}
 800a094:	24000094 	.word	0x24000094

0800a098 <_malloc_r>:
 800a098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a09a:	1ccd      	adds	r5, r1, #3
 800a09c:	f025 0503 	bic.w	r5, r5, #3
 800a0a0:	3508      	adds	r5, #8
 800a0a2:	2d0c      	cmp	r5, #12
 800a0a4:	bf38      	it	cc
 800a0a6:	250c      	movcc	r5, #12
 800a0a8:	2d00      	cmp	r5, #0
 800a0aa:	4606      	mov	r6, r0
 800a0ac:	db01      	blt.n	800a0b2 <_malloc_r+0x1a>
 800a0ae:	42a9      	cmp	r1, r5
 800a0b0:	d903      	bls.n	800a0ba <_malloc_r+0x22>
 800a0b2:	230c      	movs	r3, #12
 800a0b4:	6033      	str	r3, [r6, #0]
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0ba:	f000 f87d 	bl	800a1b8 <__malloc_lock>
 800a0be:	4921      	ldr	r1, [pc, #132]	; (800a144 <_malloc_r+0xac>)
 800a0c0:	680a      	ldr	r2, [r1, #0]
 800a0c2:	4614      	mov	r4, r2
 800a0c4:	b99c      	cbnz	r4, 800a0ee <_malloc_r+0x56>
 800a0c6:	4f20      	ldr	r7, [pc, #128]	; (800a148 <_malloc_r+0xb0>)
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	b923      	cbnz	r3, 800a0d6 <_malloc_r+0x3e>
 800a0cc:	4621      	mov	r1, r4
 800a0ce:	4630      	mov	r0, r6
 800a0d0:	f000 f862 	bl	800a198 <_sbrk_r>
 800a0d4:	6038      	str	r0, [r7, #0]
 800a0d6:	4629      	mov	r1, r5
 800a0d8:	4630      	mov	r0, r6
 800a0da:	f000 f85d 	bl	800a198 <_sbrk_r>
 800a0de:	1c43      	adds	r3, r0, #1
 800a0e0:	d123      	bne.n	800a12a <_malloc_r+0x92>
 800a0e2:	230c      	movs	r3, #12
 800a0e4:	6033      	str	r3, [r6, #0]
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	f000 f86c 	bl	800a1c4 <__malloc_unlock>
 800a0ec:	e7e3      	b.n	800a0b6 <_malloc_r+0x1e>
 800a0ee:	6823      	ldr	r3, [r4, #0]
 800a0f0:	1b5b      	subs	r3, r3, r5
 800a0f2:	d417      	bmi.n	800a124 <_malloc_r+0x8c>
 800a0f4:	2b0b      	cmp	r3, #11
 800a0f6:	d903      	bls.n	800a100 <_malloc_r+0x68>
 800a0f8:	6023      	str	r3, [r4, #0]
 800a0fa:	441c      	add	r4, r3
 800a0fc:	6025      	str	r5, [r4, #0]
 800a0fe:	e004      	b.n	800a10a <_malloc_r+0x72>
 800a100:	6863      	ldr	r3, [r4, #4]
 800a102:	42a2      	cmp	r2, r4
 800a104:	bf0c      	ite	eq
 800a106:	600b      	streq	r3, [r1, #0]
 800a108:	6053      	strne	r3, [r2, #4]
 800a10a:	4630      	mov	r0, r6
 800a10c:	f000 f85a 	bl	800a1c4 <__malloc_unlock>
 800a110:	f104 000b 	add.w	r0, r4, #11
 800a114:	1d23      	adds	r3, r4, #4
 800a116:	f020 0007 	bic.w	r0, r0, #7
 800a11a:	1ac2      	subs	r2, r0, r3
 800a11c:	d0cc      	beq.n	800a0b8 <_malloc_r+0x20>
 800a11e:	1a1b      	subs	r3, r3, r0
 800a120:	50a3      	str	r3, [r4, r2]
 800a122:	e7c9      	b.n	800a0b8 <_malloc_r+0x20>
 800a124:	4622      	mov	r2, r4
 800a126:	6864      	ldr	r4, [r4, #4]
 800a128:	e7cc      	b.n	800a0c4 <_malloc_r+0x2c>
 800a12a:	1cc4      	adds	r4, r0, #3
 800a12c:	f024 0403 	bic.w	r4, r4, #3
 800a130:	42a0      	cmp	r0, r4
 800a132:	d0e3      	beq.n	800a0fc <_malloc_r+0x64>
 800a134:	1a21      	subs	r1, r4, r0
 800a136:	4630      	mov	r0, r6
 800a138:	f000 f82e 	bl	800a198 <_sbrk_r>
 800a13c:	3001      	adds	r0, #1
 800a13e:	d1dd      	bne.n	800a0fc <_malloc_r+0x64>
 800a140:	e7cf      	b.n	800a0e2 <_malloc_r+0x4a>
 800a142:	bf00      	nop
 800a144:	24000094 	.word	0x24000094
 800a148:	24000098 	.word	0x24000098

0800a14c <_realloc_r>:
 800a14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a14e:	4607      	mov	r7, r0
 800a150:	4614      	mov	r4, r2
 800a152:	460e      	mov	r6, r1
 800a154:	b921      	cbnz	r1, 800a160 <_realloc_r+0x14>
 800a156:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a15a:	4611      	mov	r1, r2
 800a15c:	f7ff bf9c 	b.w	800a098 <_malloc_r>
 800a160:	b922      	cbnz	r2, 800a16c <_realloc_r+0x20>
 800a162:	f7ff ff49 	bl	8009ff8 <_free_r>
 800a166:	4625      	mov	r5, r4
 800a168:	4628      	mov	r0, r5
 800a16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a16c:	f000 f830 	bl	800a1d0 <_malloc_usable_size_r>
 800a170:	42a0      	cmp	r0, r4
 800a172:	d20f      	bcs.n	800a194 <_realloc_r+0x48>
 800a174:	4621      	mov	r1, r4
 800a176:	4638      	mov	r0, r7
 800a178:	f7ff ff8e 	bl	800a098 <_malloc_r>
 800a17c:	4605      	mov	r5, r0
 800a17e:	2800      	cmp	r0, #0
 800a180:	d0f2      	beq.n	800a168 <_realloc_r+0x1c>
 800a182:	4631      	mov	r1, r6
 800a184:	4622      	mov	r2, r4
 800a186:	f7ff fbf7 	bl	8009978 <memcpy>
 800a18a:	4631      	mov	r1, r6
 800a18c:	4638      	mov	r0, r7
 800a18e:	f7ff ff33 	bl	8009ff8 <_free_r>
 800a192:	e7e9      	b.n	800a168 <_realloc_r+0x1c>
 800a194:	4635      	mov	r5, r6
 800a196:	e7e7      	b.n	800a168 <_realloc_r+0x1c>

0800a198 <_sbrk_r>:
 800a198:	b538      	push	{r3, r4, r5, lr}
 800a19a:	4d06      	ldr	r5, [pc, #24]	; (800a1b4 <_sbrk_r+0x1c>)
 800a19c:	2300      	movs	r3, #0
 800a19e:	4604      	mov	r4, r0
 800a1a0:	4608      	mov	r0, r1
 800a1a2:	602b      	str	r3, [r5, #0]
 800a1a4:	f7f7 fdf0 	bl	8001d88 <_sbrk>
 800a1a8:	1c43      	adds	r3, r0, #1
 800a1aa:	d102      	bne.n	800a1b2 <_sbrk_r+0x1a>
 800a1ac:	682b      	ldr	r3, [r5, #0]
 800a1ae:	b103      	cbz	r3, 800a1b2 <_sbrk_r+0x1a>
 800a1b0:	6023      	str	r3, [r4, #0]
 800a1b2:	bd38      	pop	{r3, r4, r5, pc}
 800a1b4:	2400074c 	.word	0x2400074c

0800a1b8 <__malloc_lock>:
 800a1b8:	4801      	ldr	r0, [pc, #4]	; (800a1c0 <__malloc_lock+0x8>)
 800a1ba:	f000 b811 	b.w	800a1e0 <__retarget_lock_acquire_recursive>
 800a1be:	bf00      	nop
 800a1c0:	24000754 	.word	0x24000754

0800a1c4 <__malloc_unlock>:
 800a1c4:	4801      	ldr	r0, [pc, #4]	; (800a1cc <__malloc_unlock+0x8>)
 800a1c6:	f000 b80c 	b.w	800a1e2 <__retarget_lock_release_recursive>
 800a1ca:	bf00      	nop
 800a1cc:	24000754 	.word	0x24000754

0800a1d0 <_malloc_usable_size_r>:
 800a1d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1d4:	1f18      	subs	r0, r3, #4
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	bfbc      	itt	lt
 800a1da:	580b      	ldrlt	r3, [r1, r0]
 800a1dc:	18c0      	addlt	r0, r0, r3
 800a1de:	4770      	bx	lr

0800a1e0 <__retarget_lock_acquire_recursive>:
 800a1e0:	4770      	bx	lr

0800a1e2 <__retarget_lock_release_recursive>:
 800a1e2:	4770      	bx	lr

0800a1e4 <_init>:
 800a1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1e6:	bf00      	nop
 800a1e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ea:	bc08      	pop	{r3}
 800a1ec:	469e      	mov	lr, r3
 800a1ee:	4770      	bx	lr

0800a1f0 <_fini>:
 800a1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1f2:	bf00      	nop
 800a1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1f6:	bc08      	pop	{r3}
 800a1f8:	469e      	mov	lr, r3
 800a1fa:	4770      	bx	lr
