
Askhsh_12_v1_8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aad8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000828  0800ad78  0800ad78  0001ad78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b5a0  0800b5a0  0001b5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b5a8  0800b5a8  0001b5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b5ac  0800b5ac  0001b5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  0800b5b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000af0  2400007c  0800b62c  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000b6c  0800b62c  00020b6c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002fec8  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004806  00000000  00000000  0004ff72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a08  00000000  00000000  00054778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001898  00000000  00000000  00056180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ed9b  00000000  00000000  00057a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002170a  00000000  00000000  000967b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017b97f  00000000  00000000  000b7ebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0023383c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000746c  00000000  00000000  00233890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ad60 	.word	0x0800ad60

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	0800ad60 	.word	0x0800ad60

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <delayUS_DWT>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void delayUS_DWT(volatile uint32_t microseconds)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000690:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <delayUS_DWT+0x40>)
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000696:	f004 ff57 	bl	8005548 <HAL_RCC_GetHCLKFreq>
 800069a:	4603      	mov	r3, r0
 800069c:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <delayUS_DWT+0x44>)
 800069e:	fba2 2303 	umull	r2, r3, r2, r3
 80006a2:	0c9b      	lsrs	r3, r3, #18
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	fb02 f303 	mul.w	r3, r2, r3
 80006aa:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80006ac:	bf00      	nop
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <delayUS_DWT+0x40>)
 80006b0:	685a      	ldr	r2, [r3, #4]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	1ad2      	subs	r2, r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d3f8      	bcc.n	80006ae <delayUS_DWT+0x26>
}
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	e0001000 	.word	0xe0001000
 80006cc:	431bde83 	.word	0x431bde83

080006d0 <writeSDA>:
#define HEX2BCD(v)	((v) % 10 + (v) / 10 * 16)
#define BCD2HEX(v)	((v) % 16 + (v) / 16 * 10)


// SDA Write(output) Mode
static void writeSDA(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SDA;
 80006d6:	2301      	movs	r3, #1
 80006d8:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80006de:	2302      	movs	r3, #2
 80006e0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4619      	mov	r1, r3
 80006e6:	4803      	ldr	r0, [pc, #12]	; (80006f4 <writeSDA+0x24>)
 80006e8:	f002 ffd0 	bl	800368c <HAL_GPIO_Init>
	
}
 80006ec:	bf00      	nop
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	58021400 	.word	0x58021400

080006f8 <readSDA>:


// SDA Read(input) Mode
static void readSDA(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SDA;
 80006fe:	2301      	movs	r3, #1
 8000700:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_INPUT;
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8000706:	2302      	movs	r3, #2
 8000708:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800070a:	2302      	movs	r3, #2
 800070c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);	
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	4619      	mov	r1, r3
 8000712:	4803      	ldr	r0, [pc, #12]	; (8000720 <readSDA+0x28>)
 8000714:	f002 ffba 	bl	800368c <HAL_GPIO_Init>
}
 8000718:	bf00      	nop
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	58021400 	.word	0x58021400

08000724 <DS1302_SendCmd>:


/* Отправка адреса или команды */
static void DS1302_SendCmd(uint8_t cmd) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i ++) 
 800072e:	2300      	movs	r3, #0
 8000730:	73fb      	strb	r3, [r7, #15]
 8000732:	e01e      	b.n	8000772 <DS1302_SendCmd+0x4e>
	{	
		//		DS1302_SDA = (bit)(addr & 1);
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA, (cmd & 1) ?  GPIO_PIN_SET :  GPIO_PIN_RESET);
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	461a      	mov	r2, r3
 800073e:	2101      	movs	r1, #1
 8000740:	4810      	ldr	r0, [pc, #64]	; (8000784 <DS1302_SendCmd+0x60>)
 8000742:	f003 f96b 	bl	8003a1c <HAL_GPIO_WritePin>
		//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	2102      	movs	r1, #2
 800074a:	480e      	ldr	r0, [pc, #56]	; (8000784 <DS1302_SendCmd+0x60>)
 800074c:	f003 f966 	bl	8003a1c <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff ff99 	bl	8000688 <delayUS_DWT>
		//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2102      	movs	r1, #2
 800075a:	480a      	ldr	r0, [pc, #40]	; (8000784 <DS1302_SendCmd+0x60>)
 800075c:	f003 f95e 	bl	8003a1c <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 8000760:	2001      	movs	r0, #1
 8000762:	f7ff ff91 	bl	8000688 <delayUS_DWT>
		cmd >>= 1;
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	085b      	lsrs	r3, r3, #1
 800076a:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i ++) 
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	3301      	adds	r3, #1
 8000770:	73fb      	strb	r3, [r7, #15]
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	2b07      	cmp	r3, #7
 8000776:	d9dd      	bls.n	8000734 <DS1302_SendCmd+0x10>
	}
}
 8000778:	bf00      	nop
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	58021400 	.word	0x58021400

08000788 <DS1302_WriteByte>:


/* Прочитать байт по адресу 'addr' */
static void DS1302_WriteByte(uint8_t addr, uint8_t d)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	460a      	mov	r2, r1
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	4613      	mov	r3, r2
 8000796:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	//	DS1302_RST = 1;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_SET);	
 8000798:	2201      	movs	r2, #1
 800079a:	2104      	movs	r1, #4
 800079c:	481c      	ldr	r0, [pc, #112]	; (8000810 <DS1302_WriteByte+0x88>)
 800079e:	f003 f93d 	bl	8003a1c <HAL_GPIO_WritePin>
	
	//addr = addr & 0xFE;
	DS1302_SendCmd(addr);	// Отправка адреса
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ffbd 	bl	8000724 <DS1302_SendCmd>
	
	for (i = 0; i < 8; i ++) 
 80007aa:	2300      	movs	r3, #0
 80007ac:	73fb      	strb	r3, [r7, #15]
 80007ae:	e01e      	b.n	80007ee <DS1302_WriteByte+0x66>
	{
		//		DS1302_SDA = (bit)(d & 1);
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA, (d & 1) ?  GPIO_PIN_SET :  GPIO_PIN_RESET);
 80007b0:	79bb      	ldrb	r3, [r7, #6]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	461a      	mov	r2, r3
 80007ba:	2101      	movs	r1, #1
 80007bc:	4814      	ldr	r0, [pc, #80]	; (8000810 <DS1302_WriteByte+0x88>)
 80007be:	f003 f92d 	bl	8003a1c <HAL_GPIO_WritePin>
		//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	2102      	movs	r1, #2
 80007c6:	4812      	ldr	r0, [pc, #72]	; (8000810 <DS1302_WriteByte+0x88>)
 80007c8:	f003 f928 	bl	8003a1c <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 80007cc:	2001      	movs	r0, #1
 80007ce:	f7ff ff5b 	bl	8000688 <delayUS_DWT>
		//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2102      	movs	r1, #2
 80007d6:	480e      	ldr	r0, [pc, #56]	; (8000810 <DS1302_WriteByte+0x88>)
 80007d8:	f003 f920 	bl	8003a1c <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 80007dc:	2001      	movs	r0, #1
 80007de:	f7ff ff53 	bl	8000688 <delayUS_DWT>
		d >>= 1;
 80007e2:	79bb      	ldrb	r3, [r7, #6]
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	71bb      	strb	r3, [r7, #6]
	for (i = 0; i < 8; i ++) 
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	3301      	adds	r3, #1
 80007ec:	73fb      	strb	r3, [r7, #15]
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2b07      	cmp	r3, #7
 80007f2:	d9dd      	bls.n	80007b0 <DS1302_WriteByte+0x28>
	}
	
	//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2104      	movs	r1, #4
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <DS1302_WriteByte+0x88>)
 80007fa:	f003 f90f 	bl	8003a1c <HAL_GPIO_WritePin>
	//	DS1302_SDA = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA,  GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2101      	movs	r1, #1
 8000802:	4803      	ldr	r0, [pc, #12]	; (8000810 <DS1302_WriteByte+0x88>)
 8000804:	f003 f90a 	bl	8003a1c <HAL_GPIO_WritePin>
}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	58021400 	.word	0x58021400

08000814 <DS1302_ReadByte>:
}


/* Reads a byte from addr */
static uint8_t DS1302_ReadByte(uint8_t addr)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t temp = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	73bb      	strb	r3, [r7, #14]

	//	DS1302_RST = 1;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_SET);	
 8000822:	2201      	movs	r2, #1
 8000824:	2104      	movs	r1, #4
 8000826:	4822      	ldr	r0, [pc, #136]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000828:	f003 f8f8 	bl	8003a1c <HAL_GPIO_WritePin>
	addr = addr | 0x01; 	// Generate Read Address
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	71fb      	strb	r3, [r7, #7]

	DS1302_SendCmd(addr);	// Sends address
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff74 	bl	8000724 <DS1302_SendCmd>
	
	readSDA();
 800083c:	f7ff ff5c 	bl	80006f8 <readSDA>
	for (i = 0; i < 8; i ++) 
 8000840:	2300      	movs	r3, #0
 8000842:	73fb      	strb	r3, [r7, #15]
 8000844:	e020      	b.n	8000888 <DS1302_ReadByte+0x74>
	{
		temp >>= 1;
 8000846:	7bbb      	ldrb	r3, [r7, #14]
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	73bb      	strb	r3, [r7, #14]
		//		if(DS1302_SDA)
		if(HAL_GPIO_ReadPin(DS1302_GPIO, DS1302_SDA))
 800084c:	2101      	movs	r1, #1
 800084e:	4818      	ldr	r0, [pc, #96]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000850:	f003 f8cc 	bl	80039ec <HAL_GPIO_ReadPin>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d003      	beq.n	8000862 <DS1302_ReadByte+0x4e>
			temp |= 0x80;
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000860:	73bb      	strb	r3, [r7, #14]
		//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	2102      	movs	r1, #2
 8000866:	4812      	ldr	r0, [pc, #72]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000868:	f003 f8d8 	bl	8003a1c <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff ff0b 	bl	8000688 <delayUS_DWT>
		//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2102      	movs	r1, #2
 8000876:	480e      	ldr	r0, [pc, #56]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000878:	f003 f8d0 	bl	8003a1c <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 800087c:	2001      	movs	r0, #1
 800087e:	f7ff ff03 	bl	8000688 <delayUS_DWT>
	for (i = 0; i < 8; i ++) 
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	3301      	adds	r3, #1
 8000886:	73fb      	strb	r3, [r7, #15]
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	2b07      	cmp	r3, #7
 800088c:	d9db      	bls.n	8000846 <DS1302_ReadByte+0x32>
	}
	writeSDA();
 800088e:	f7ff ff1f 	bl	80006d0 <writeSDA>

	//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2104      	movs	r1, #4
 8000896:	4806      	ldr	r0, [pc, #24]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000898:	f003 f8c0 	bl	8003a1c <HAL_GPIO_WritePin>
	//	DS1302_SDA = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA,  GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2101      	movs	r1, #1
 80008a0:	4803      	ldr	r0, [pc, #12]	; (80008b0 <DS1302_ReadByte+0x9c>)
 80008a2:	f003 f8bb 	bl	8003a1c <HAL_GPIO_WritePin>
	return temp;
 80008a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	58021400 	.word	0x58021400

080008b4 <DS1302_WriteTime>:
}


/* Writes time byte by byte from 'buf' */
void DS1302_WriteTime(uint8_t *buf) 
{	
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	DS1302_WriteByte(DS1302_CONTROL, 0x00);			// Отключить защиту от записи
 80008bc:	2100      	movs	r1, #0
 80008be:	208e      	movs	r0, #142	; 0x8e
 80008c0:	f7ff ff62 	bl	8000788 <DS1302_WriteByte>
	delayUS_DWT(1);
 80008c4:	2001      	movs	r0, #1
 80008c6:	f7ff fedf 	bl	8000688 <delayUS_DWT>
	DS1302_WriteByte(DS1302_SEC, 0x80);
 80008ca:	2180      	movs	r1, #128	; 0x80
 80008cc:	2080      	movs	r0, #128	; 0x80
 80008ce:	f7ff ff5b 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_YEAR, HEX2BCD(buf[1]));
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3301      	adds	r3, #1
 80008d6:	781a      	ldrb	r2, [r3, #0]
 80008d8:	4b69      	ldr	r3, [pc, #420]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80008da:	fba3 1302 	umull	r1, r3, r3, r2
 80008de:	08d9      	lsrs	r1, r3, #3
 80008e0:	460b      	mov	r3, r1
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	440b      	add	r3, r1
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3301      	adds	r3, #1
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	4963      	ldr	r1, [pc, #396]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80008f4:	fba1 1303 	umull	r1, r3, r1, r3
 80008f8:	08db      	lsrs	r3, r3, #3
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	011b      	lsls	r3, r3, #4
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	4413      	add	r3, r2
 8000902:	b2db      	uxtb	r3, r3
 8000904:	4619      	mov	r1, r3
 8000906:	208c      	movs	r0, #140	; 0x8c
 8000908:	f7ff ff3e 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_MONTH, HEX2BCD(buf[2]));
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3302      	adds	r3, #2
 8000910:	781a      	ldrb	r2, [r3, #0]
 8000912:	4b5b      	ldr	r3, [pc, #364]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000914:	fba3 1302 	umull	r1, r3, r3, r2
 8000918:	08d9      	lsrs	r1, r3, #3
 800091a:	460b      	mov	r3, r1
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	440b      	add	r3, r1
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	b2da      	uxtb	r2, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3302      	adds	r3, #2
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4954      	ldr	r1, [pc, #336]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 800092e:	fba1 1303 	umull	r1, r3, r1, r3
 8000932:	08db      	lsrs	r3, r3, #3
 8000934:	b2db      	uxtb	r3, r3
 8000936:	011b      	lsls	r3, r3, #4
 8000938:	b2db      	uxtb	r3, r3
 800093a:	4413      	add	r3, r2
 800093c:	b2db      	uxtb	r3, r3
 800093e:	4619      	mov	r1, r3
 8000940:	2088      	movs	r0, #136	; 0x88
 8000942:	f7ff ff21 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_DATE, HEX2BCD(buf[3]));
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3303      	adds	r3, #3
 800094a:	781a      	ldrb	r2, [r3, #0]
 800094c:	4b4c      	ldr	r3, [pc, #304]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 800094e:	fba3 1302 	umull	r1, r3, r3, r2
 8000952:	08d9      	lsrs	r1, r3, #3
 8000954:	460b      	mov	r3, r1
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	440b      	add	r3, r1
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	b2da      	uxtb	r2, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3303      	adds	r3, #3
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	4946      	ldr	r1, [pc, #280]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000968:	fba1 1303 	umull	r1, r3, r1, r3
 800096c:	08db      	lsrs	r3, r3, #3
 800096e:	b2db      	uxtb	r3, r3
 8000970:	011b      	lsls	r3, r3, #4
 8000972:	b2db      	uxtb	r3, r3
 8000974:	4413      	add	r3, r2
 8000976:	b2db      	uxtb	r3, r3
 8000978:	4619      	mov	r1, r3
 800097a:	2086      	movs	r0, #134	; 0x86
 800097c:	f7ff ff04 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_HOUR, HEX2BCD(buf[4]));
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3304      	adds	r3, #4
 8000984:	781a      	ldrb	r2, [r3, #0]
 8000986:	4b3e      	ldr	r3, [pc, #248]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000988:	fba3 1302 	umull	r1, r3, r3, r2
 800098c:	08d9      	lsrs	r1, r3, #3
 800098e:	460b      	mov	r3, r1
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	440b      	add	r3, r1
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	b2da      	uxtb	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	3304      	adds	r3, #4
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	4937      	ldr	r1, [pc, #220]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80009a2:	fba1 1303 	umull	r1, r3, r1, r3
 80009a6:	08db      	lsrs	r3, r3, #3
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	011b      	lsls	r3, r3, #4
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	4413      	add	r3, r2
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	4619      	mov	r1, r3
 80009b4:	2084      	movs	r0, #132	; 0x84
 80009b6:	f7ff fee7 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_MIN, HEX2BCD(buf[5]));
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	3305      	adds	r3, #5
 80009be:	781a      	ldrb	r2, [r3, #0]
 80009c0:	4b2f      	ldr	r3, [pc, #188]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80009c2:	fba3 1302 	umull	r1, r3, r3, r2
 80009c6:	08d9      	lsrs	r1, r3, #3
 80009c8:	460b      	mov	r3, r1
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	440b      	add	r3, r1
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3305      	adds	r3, #5
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	4929      	ldr	r1, [pc, #164]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80009dc:	fba1 1303 	umull	r1, r3, r1, r3
 80009e0:	08db      	lsrs	r3, r3, #3
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	011b      	lsls	r3, r3, #4
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	4413      	add	r3, r2
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4619      	mov	r1, r3
 80009ee:	2082      	movs	r0, #130	; 0x82
 80009f0:	f7ff feca 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_SEC, HEX2BCD(buf[6]));
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3306      	adds	r3, #6
 80009f8:	781a      	ldrb	r2, [r3, #0]
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80009fc:	fba3 1302 	umull	r1, r3, r3, r2
 8000a00:	08d9      	lsrs	r1, r3, #3
 8000a02:	460b      	mov	r3, r1
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	440b      	add	r3, r1
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3306      	adds	r3, #6
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	491a      	ldr	r1, [pc, #104]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000a16:	fba1 1303 	umull	r1, r3, r1, r3
 8000a1a:	08db      	lsrs	r3, r3, #3
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	011b      	lsls	r3, r3, #4
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	4413      	add	r3, r2
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	4619      	mov	r1, r3
 8000a28:	2080      	movs	r0, #128	; 0x80
 8000a2a:	f7ff fead 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_DAY, HEX2BCD(buf[7]));
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	3307      	adds	r3, #7
 8000a32:	781a      	ldrb	r2, [r3, #0]
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000a36:	fba3 1302 	umull	r1, r3, r3, r2
 8000a3a:	08d9      	lsrs	r1, r3, #3
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	440b      	add	r3, r1
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3307      	adds	r3, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	490c      	ldr	r1, [pc, #48]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000a50:	fba1 1303 	umull	r1, r3, r1, r3
 8000a54:	08db      	lsrs	r3, r3, #3
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	011b      	lsls	r3, r3, #4
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	4413      	add	r3, r2
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	4619      	mov	r1, r3
 8000a62:	208a      	movs	r0, #138	; 0x8a
 8000a64:	f7ff fe90 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_CONTROL, 0x80);			// Включить защиту от записи
 8000a68:	2180      	movs	r1, #128	; 0x80
 8000a6a:	208e      	movs	r0, #142	; 0x8e
 8000a6c:	f7ff fe8c 	bl	8000788 <DS1302_WriteByte>
	delayUS_DWT(1);
 8000a70:	2001      	movs	r0, #1
 8000a72:	f7ff fe09 	bl	8000688 <delayUS_DWT>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	cccccccd 	.word	0xcccccccd

08000a84 <DS1302_ReadTime>:


/* Reads time byte by byte to 'buf' */
void DS1302_ReadTime(uint8_t *buf)  
{ 
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
   	uint8_t tmp;
	
	tmp = DS1302_ReadByte(DS1302_YEAR); 	
 8000a8c:	208c      	movs	r0, #140	; 0x8c
 8000a8e:	f7ff fec1 	bl	8000814 <DS1302_ReadByte>
 8000a92:	4603      	mov	r3, r0
 8000a94:	73fb      	strb	r3, [r7, #15]
	buf[1] = BCD2HEX(tmp);		 
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
 8000a98:	f003 030f 	and.w	r3, r3, #15
 8000a9c:	b2d9      	uxtb	r1, r3
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
 8000aa0:	091b      	lsrs	r3, r3, #4
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	0092      	lsls	r2, r2, #2
 8000aa8:	4413      	add	r3, r2
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	440a      	add	r2, r1
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_MONTH); 	
 8000ab8:	2088      	movs	r0, #136	; 0x88
 8000aba:	f7ff feab 	bl	8000814 <DS1302_ReadByte>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	73fb      	strb	r3, [r7, #15]
	buf[2] = BCD2HEX(tmp);	 
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	f003 030f 	and.w	r3, r3, #15
 8000ac8:	b2d9      	uxtb	r1, r3
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	091b      	lsrs	r3, r3, #4
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	0092      	lsls	r2, r2, #2
 8000ad4:	4413      	add	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	3302      	adds	r3, #2
 8000ade:	440a      	add	r2, r1
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_DATE); 	
 8000ae4:	2086      	movs	r0, #134	; 0x86
 8000ae6:	f7ff fe95 	bl	8000814 <DS1302_ReadByte>
 8000aea:	4603      	mov	r3, r0
 8000aec:	73fb      	strb	r3, [r7, #15]
	buf[3] = BCD2HEX(tmp);
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	f003 030f 	and.w	r3, r3, #15
 8000af4:	b2d9      	uxtb	r1, r3
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
 8000af8:	091b      	lsrs	r3, r3, #4
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	461a      	mov	r2, r3
 8000afe:	0092      	lsls	r2, r2, #2
 8000b00:	4413      	add	r3, r2
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3303      	adds	r3, #3
 8000b0a:	440a      	add	r2, r1
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_HOUR);		
 8000b10:	2084      	movs	r0, #132	; 0x84
 8000b12:	f7ff fe7f 	bl	8000814 <DS1302_ReadByte>
 8000b16:	4603      	mov	r3, r0
 8000b18:	73fb      	strb	r3, [r7, #15]
	buf[4] = BCD2HEX(tmp);
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
 8000b1c:	f003 030f 	and.w	r3, r3, #15
 8000b20:	b2d9      	uxtb	r1, r3
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	091b      	lsrs	r3, r3, #4
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	461a      	mov	r2, r3
 8000b2a:	0092      	lsls	r2, r2, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3304      	adds	r3, #4
 8000b36:	440a      	add	r2, r1
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_MIN);		
 8000b3c:	2082      	movs	r0, #130	; 0x82
 8000b3e:	f7ff fe69 	bl	8000814 <DS1302_ReadByte>
 8000b42:	4603      	mov	r3, r0
 8000b44:	73fb      	strb	r3, [r7, #15]
	buf[5] = BCD2HEX(tmp); 
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
 8000b48:	f003 030f 	and.w	r3, r3, #15
 8000b4c:	b2d9      	uxtb	r1, r3
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	091b      	lsrs	r3, r3, #4
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	461a      	mov	r2, r3
 8000b56:	0092      	lsls	r2, r2, #2
 8000b58:	4413      	add	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	3305      	adds	r3, #5
 8000b62:	440a      	add	r2, r1
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte((DS1302_SEC)) & 0x7F;
 8000b68:	2080      	movs	r0, #128	; 0x80
 8000b6a:	f7ff fe53 	bl	8000814 <DS1302_ReadByte>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b74:	73fb      	strb	r3, [r7, #15]
	buf[6] = BCD2HEX(tmp);
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	f003 030f 	and.w	r3, r3, #15
 8000b7c:	b2d9      	uxtb	r1, r3
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	091b      	lsrs	r3, r3, #4
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	461a      	mov	r2, r3
 8000b86:	0092      	lsls	r2, r2, #2
 8000b88:	4413      	add	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3306      	adds	r3, #6
 8000b92:	440a      	add	r2, r1
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_DAY);		
 8000b98:	208a      	movs	r0, #138	; 0x8a
 8000b9a:	f7ff fe3b 	bl	8000814 <DS1302_ReadByte>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	73fb      	strb	r3, [r7, #15]
	buf[7] = BCD2HEX(tmp);
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	f003 030f 	and.w	r3, r3, #15
 8000ba8:	b2d9      	uxtb	r1, r3
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	091b      	lsrs	r3, r3, #4
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	0092      	lsls	r2, r2, #2
 8000bb4:	4413      	add	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3307      	adds	r3, #7
 8000bbe:	440a      	add	r2, r1
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	701a      	strb	r2, [r3, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <DS1302_Init>:


/* Инициализация */
void DS1302_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
	DWT_Delay_Init(); //Инициализация таймера для отсчета милисекунд
 8000bd2:	f000 f849 	bl	8000c68 <DWT_Delay_Init>

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SCLK | DS1302_SDA | DS1302_RST;
 8000bd6:	2307      	movs	r3, #7
 8000bd8:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bde:	2302      	movs	r3, #2
 8000be0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	480d      	ldr	r0, [pc, #52]	; (8000c1c <DS1302_Init+0x50>)
 8000be8:	f002 fd50 	bl	800368c <HAL_GPIO_Init>
	
	DS1302_WriteByte(DS1302_CHARGER, 0x00);			// Отключить Trickle Charger
 8000bec:	2100      	movs	r1, #0
 8000bee:	2090      	movs	r0, #144	; 0x90
 8000bf0:	f7ff fdca 	bl	8000788 <DS1302_WriteByte>
		
	//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2104      	movs	r1, #4
 8000bf8:	4808      	ldr	r0, [pc, #32]	; (8000c1c <DS1302_Init+0x50>)
 8000bfa:	f002 ff0f 	bl	8003a1c <HAL_GPIO_WritePin>
	//	DS1302_SCK = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2102      	movs	r1, #2
 8000c02:	4806      	ldr	r0, [pc, #24]	; (8000c1c <DS1302_Init+0x50>)
 8000c04:	f002 ff0a 	bl	8003a1c <HAL_GPIO_WritePin>

	delayUS_DWT(10); // Меньше 10 мкс делать не стоит.
 8000c08:	200a      	movs	r0, #10
 8000c0a:	f7ff fd3d 	bl	8000688 <delayUS_DWT>
	DS1302_ClockStart();
 8000c0e:	f000 f807 	bl	8000c20 <DS1302_ClockStart>
}
 8000c12:	bf00      	nop
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	58021400 	.word	0x58021400

08000c20 <DS1302_ClockStart>:

//Запуск часов.
//Изначально DS1302 в режиме HALT (остановлена, режим энергосбережения).
//Чтоб начался отсчет времени необходимо однократно выполнить эту функцию.
void DS1302_ClockStart(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
	uint8_t buf = 0x00;
 8000c26:	2300      	movs	r3, #0
 8000c28:	71fb      	strb	r3, [r7, #7]

	DS1302_WriteByte(DS1302_CONTROL, 0x00);			// Отключить защиту от записи
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	208e      	movs	r0, #142	; 0x8e
 8000c2e:	f7ff fdab 	bl	8000788 <DS1302_WriteByte>
	delayUS_DWT(1);
 8000c32:	2001      	movs	r0, #1
 8000c34:	f7ff fd28 	bl	8000688 <delayUS_DWT>

	buf = DS1302_ReadByte(DS1302_SEC) & 0x7F;		// Записываем в 8 бит 0. При этом сохраняем установленное значение секунд.
 8000c38:	2080      	movs	r0, #128	; 0x80
 8000c3a:	f7ff fdeb 	bl	8000814 <DS1302_ReadByte>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c44:	71fb      	strb	r3, [r7, #7]
	DS1302_WriteByte(DS1302_SEC, buf);
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	2080      	movs	r0, #128	; 0x80
 8000c4c:	f7ff fd9c 	bl	8000788 <DS1302_WriteByte>

	DS1302_WriteByte(DS1302_CONTROL, 0x80);			// Включить защиту от записи
 8000c50:	2180      	movs	r1, #128	; 0x80
 8000c52:	208e      	movs	r0, #142	; 0x8e
 8000c54:	f7ff fd98 	bl	8000788 <DS1302_WriteByte>
	delayUS_DWT(1);
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f7ff fd15 	bl	8000688 <delayUS_DWT>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <DWT_Delay_Init+0x58>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <DWT_Delay_Init+0x58>)
 8000c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c76:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <DWT_Delay_Init+0x58>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	4a10      	ldr	r2, [pc, #64]	; (8000cc0 <DWT_Delay_Init+0x58>)
 8000c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c82:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c8a:	f023 0301 	bic.w	r3, r3, #1
 8000c8e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000ca2:	bf00      	nop
     __ASM volatile ("NOP");
 8000ca4:	bf00      	nop
     __ASM volatile ("NOP");
 8000ca6:	bf00      	nop

     /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e000      	b.n	8000cb6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000cb4:	2301      	movs	r3, #1
  }
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000edf0 	.word	0xe000edf0
 8000cc4:	e0001000 	.word	0xe0001000

08000cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cca:	b0a9      	sub	sp, #164	; 0xa4
 8000ccc:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	uint16_t LED_DutyCycle = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd4:	f001 fb98 	bl	8002408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd8:	f000 f8ca 	bl	8000e70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cdc:	f000 fbfa 	bl	80014d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000ce0:	f000 fb7a 	bl	80013d8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ce4:	f000 fbc4 	bl	8001470 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000ce8:	f000 f9f0 	bl	80010cc <MX_I2C1_Init>
  MX_ADC3_Init();
 8000cec:	f000 f94a 	bl	8000f84 <MX_ADC3_Init>
  MX_TIM1_Init();
 8000cf0:	f000 fa2c 	bl	800114c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000cf4:	f000 fa7e 	bl	80011f4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000cf8:	f000 faca 	bl	8001290 <MX_TIM4_Init>
  MX_TIM14_Init();
 8000cfc:	f000 fb1e 	bl	800133c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000d00:	f000 fdac 	bl	800185c <ssd1306_Init>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000d04:	213c      	movs	r1, #60	; 0x3c
 8000d06:	4850      	ldr	r0, [pc, #320]	; (8000e48 <main+0x180>)
 8000d08:	f007 f86c 	bl	8007de4 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	484f      	ldr	r0, [pc, #316]	; (8000e4c <main+0x184>)
 8000d10:	f006 feb4 	bl	8007a7c <HAL_TIM_PWM_Start>
  DS1302_Init();
 8000d14:	f7ff ff5a 	bl	8000bcc <DS1302_Init>
  HAL_Delay(1000);
 8000d18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d1c:	f001 fc06 	bl	800252c <HAL_Delay>
  char tempBuffer[100];
  char time[8];
  char time_to_set[8]={0,5,06,23,01,54,00,1};//Contr,Year,Mounth,Date,Hour,Min,Sec,Day
 8000d20:	4a4b      	ldr	r2, [pc, #300]	; (8000e50 <main+0x188>)
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d2a:	e883 0003 	stmia.w	r3, {r0, r1}
  DS1302_WriteTime(time_to_set);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fdbe 	bl	80008b4 <DS1302_WriteTime>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  DS1302_ReadTime(time);
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fea1 	bl	8000a84 <DS1302_ReadTime>
	  sprintf(tempBuffer,"\n\r %2d/%2d/%2d%2d:%2d:%2d \n\r",time[1],time[2],time[3],time[4],time[5],time[6]);
 8000d42:	7f7b      	ldrb	r3, [r7, #29]
 8000d44:	461d      	mov	r5, r3
 8000d46:	7fbb      	ldrb	r3, [r7, #30]
 8000d48:	461e      	mov	r6, r3
 8000d4a:	7ffb      	ldrb	r3, [r7, #31]
 8000d4c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d50:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8000d54:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
 8000d58:	4604      	mov	r4, r0
 8000d5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000d5e:	9403      	str	r4, [sp, #12]
 8000d60:	9102      	str	r1, [sp, #8]
 8000d62:	9201      	str	r2, [sp, #4]
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	4633      	mov	r3, r6
 8000d68:	462a      	mov	r2, r5
 8000d6a:	493a      	ldr	r1, [pc, #232]	; (8000e54 <main+0x18c>)
 8000d6c:	f009 fbf2 	bl	800a554 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)tempBuffer, strlen(tempBuffer), HAL_MAX_DELAY);
 8000d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fab3 	bl	80002e0 <strlen>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295
 8000d86:	4834      	ldr	r0, [pc, #208]	; (8000e58 <main+0x190>)
 8000d88:	f007 ffd8 	bl	8008d3c <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000d8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d90:	f001 fbcc 	bl	800252c <HAL_Delay>

      LED_DutyCycle = TIM4->CNT; //65536/tic*64
 8000d94:	4b31      	ldr	r3, [pc, #196]	; (8000e5c <main+0x194>)
 8000d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d98:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

//      TIM14->CCR1 = LED_DutyCycle;

      sprintf(uartBuf, "Encoder count: %d\r\n", (int)TIM4->CNT);
 8000d9c:	4b2f      	ldr	r3, [pc, #188]	; (8000e5c <main+0x194>)
 8000d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da0:	461a      	mov	r2, r3
 8000da2:	492f      	ldr	r1, [pc, #188]	; (8000e60 <main+0x198>)
 8000da4:	482f      	ldr	r0, [pc, #188]	; (8000e64 <main+0x19c>)
 8000da6:	f009 fbd5 	bl	800a554 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 8000daa:	482e      	ldr	r0, [pc, #184]	; (8000e64 <main+0x19c>)
 8000dac:	f7ff fa98 	bl	80002e0 <strlen>
 8000db0:	4603      	mov	r3, r0
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	f04f 33ff 	mov.w	r3, #4294967295
 8000db8:	492a      	ldr	r1, [pc, #168]	; (8000e64 <main+0x19c>)
 8000dba:	4827      	ldr	r0, [pc, #156]	; (8000e58 <main+0x190>)
 8000dbc:	f007 ffbe 	bl	8008d3c <HAL_UART_Transmit>

      HAL_Delay(10);
 8000dc0:	200a      	movs	r0, #10
 8000dc2:	f001 fbb3 	bl	800252c <HAL_Delay>

      uint16_t encoderReading = TIM4->CNT;  // Original reading
 8000dc6:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <main+0x194>)
 8000dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dca:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

      // Scale the reading to a range of 1 second to 300 seconds
      uint16_t scaledTime = MIN_TIME + ((encoderReading * (MAX_TIME - MIN_TIME)) / MAX_ENCODER_VALUE);
 8000dce:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8000dd2:	f240 122b 	movw	r2, #299	; 0x12b
 8000dd6:	fb02 f303 	mul.w	r3, r2, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	da01      	bge.n	8000de2 <main+0x11a>
 8000dde:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8000de2:	129b      	asrs	r3, r3, #10
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	3301      	adds	r3, #1
 8000de8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

      // Now scaledTime should be in the range of 1 second to 300 seconds
      char buffer[20];
      if((TIM4->CNT)>99)
 8000dec:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <main+0x194>)
 8000dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df0:	2b63      	cmp	r3, #99	; 0x63
 8000df2:	d902      	bls.n	8000dfa <main+0x132>
      {
    	  ssd1306_Fill(Black);
 8000df4:	2000      	movs	r0, #0
 8000df6:	f000 fd9b 	bl	8001930 <ssd1306_Fill>
      }
      if((TIM4->CNT)>9)
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <main+0x194>)
 8000dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfe:	2b09      	cmp	r3, #9
 8000e00:	d902      	bls.n	8000e08 <main+0x140>
            {
          	  ssd1306_Fill(Black);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f000 fd94 	bl	8001930 <ssd1306_Fill>
            }
      sprintf(buffer, "Time for ADC: %ds\n", scaledTime);
 8000e08:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	4916      	ldr	r1, [pc, #88]	; (8000e68 <main+0x1a0>)
 8000e10:	4618      	mov	r0, r3
 8000e12:	f009 fb9f 	bl	800a554 <siprintf>
      ssd1306_SetCursor(0,0); // Adjust these values according to where you want the text to start
 8000e16:	2100      	movs	r1, #0
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f000 fed7 	bl	8001bcc <ssd1306_SetCursor>
      ssd1306_WriteString(buffer, Font_7x10, White); // Replace with your font and color choice
 8000e1e:	4a13      	ldr	r2, [pc, #76]	; (8000e6c <main+0x1a4>)
 8000e20:	4638      	mov	r0, r7
 8000e22:	2301      	movs	r3, #1
 8000e24:	ca06      	ldmia	r2, {r1, r2}
 8000e26:	f000 feab 	bl	8001b80 <ssd1306_WriteString>
      ssd1306_UpdateScreen();
 8000e2a:	f000 fda5 	bl	8001978 <ssd1306_UpdateScreen>

      HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000e2e:	463b      	mov	r3, r7
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fa55 	bl	80002e0 <strlen>
 8000e36:	4603      	mov	r3, r0
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	4639      	mov	r1, r7
 8000e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <main+0x190>)
 8000e42:	f007 ff7b 	bl	8008d3c <HAL_UART_Transmit>
  {
 8000e46:	e777      	b.n	8000d38 <main+0x70>
 8000e48:	240004ac 	.word	0x240004ac
 8000e4c:	24000b0c 	.word	0x24000b0c
 8000e50:	0800adc0 	.word	0x0800adc0
 8000e54:	0800ad78 	.word	0x0800ad78
 8000e58:	240004f8 	.word	0x240004f8
 8000e5c:	40000800 	.word	0x40000800
 8000e60:	0800ad98 	.word	0x0800ad98
 8000e64:	24000a8c 	.word	0x24000a8c
 8000e68:	0800adac 	.word	0x0800adac
 8000e6c:	24000000 	.word	0x24000000

08000e70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b09c      	sub	sp, #112	; 0x70
 8000e74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7a:	224c      	movs	r2, #76	; 0x4c
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f009 fb60 	bl	800a544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	2220      	movs	r2, #32
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f009 fb5a 	bl	800a544 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e90:	2002      	movs	r0, #2
 8000e92:	f003 fbb3 	bl	80045fc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e96:	2300      	movs	r3, #0
 8000e98:	603b      	str	r3, [r7, #0]
 8000e9a:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <SystemClock_Config+0x108>)
 8000e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9e:	4a36      	ldr	r2, [pc, #216]	; (8000f78 <SystemClock_Config+0x108>)
 8000ea0:	f023 0301 	bic.w	r3, r3, #1
 8000ea4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ea6:	4b34      	ldr	r3, [pc, #208]	; (8000f78 <SystemClock_Config+0x108>)
 8000ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	4b32      	ldr	r3, [pc, #200]	; (8000f7c <SystemClock_Config+0x10c>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	4a31      	ldr	r2, [pc, #196]	; (8000f7c <SystemClock_Config+0x10c>)
 8000eb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000eba:	6193      	str	r3, [r2, #24]
 8000ebc:	4b2f      	ldr	r3, [pc, #188]	; (8000f7c <SystemClock_Config+0x10c>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ec4:	603b      	str	r3, [r7, #0]
 8000ec6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ec8:	bf00      	nop
 8000eca:	4b2c      	ldr	r3, [pc, #176]	; (8000f7c <SystemClock_Config+0x10c>)
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ed6:	d1f8      	bne.n	8000eca <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_CSI);
 8000ed8:	4b29      	ldr	r3, [pc, #164]	; (8000f80 <SystemClock_Config+0x110>)
 8000eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000edc:	f023 0303 	bic.w	r3, r3, #3
 8000ee0:	4a27      	ldr	r2, [pc, #156]	; (8000f80 <SystemClock_Config+0x110>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSI;
 8000ee8:	2312      	movs	r3, #18
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000eec:	2301      	movs	r3, #1
 8000eee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef0:	2340      	movs	r3, #64	; 0x40
 8000ef2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000ef8:	2320      	movs	r3, #32
 8000efa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efc:	2302      	movs	r3, #2
 8000efe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8000f00:	2301      	movs	r3, #1
 8000f02:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f04:	2301      	movs	r3, #1
 8000f06:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 37;
 8000f08:	2325      	movs	r3, #37	; 0x25
 8000f0a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000f10:	2303      	movs	r3, #3
 8000f12:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f14:	2302      	movs	r3, #2
 8000f16:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000f18:	2308      	movs	r3, #8
 8000f1a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000f20:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f24:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f003 fbb0 	bl	8004690 <HAL_RCC_OscConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f36:	f000 fc53 	bl	80017e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3a:	233f      	movs	r3, #63	; 0x3f
 8000f3c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f003 ffc2 	bl	8004ee8 <HAL_RCC_ClockConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8000f6a:	f000 fc39 	bl	80017e0 <Error_Handler>
  }
}
 8000f6e:	bf00      	nop
 8000f70:	3770      	adds	r7, #112	; 0x70
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	58000400 	.word	0x58000400
 8000f7c:	58024800 	.word	0x58024800
 8000f80:	58024400 	.word	0x58024400

08000f84 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
 8000f98:	615a      	str	r2, [r3, #20]
 8000f9a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000f9c:	4b45      	ldr	r3, [pc, #276]	; (80010b4 <MX_ADC3_Init+0x130>)
 8000f9e:	4a46      	ldr	r2, [pc, #280]	; (80010b8 <MX_ADC3_Init+0x134>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000fa2:	4b44      	ldr	r3, [pc, #272]	; (80010b4 <MX_ADC3_Init+0x130>)
 8000fa4:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000fa8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000faa:	4b42      	ldr	r3, [pc, #264]	; (80010b4 <MX_ADC3_Init+0x130>)
 8000fac:	2208      	movs	r2, #8
 8000fae:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fb0:	4b40      	ldr	r3, [pc, #256]	; (80010b4 <MX_ADC3_Init+0x130>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fb6:	4b3f      	ldr	r3, [pc, #252]	; (80010b4 <MX_ADC3_Init+0x130>)
 8000fb8:	2204      	movs	r2, #4
 8000fba:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000fbc:	4b3d      	ldr	r3, [pc, #244]	; (80010b4 <MX_ADC3_Init+0x130>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000fc2:	4b3c      	ldr	r3, [pc, #240]	; (80010b4 <MX_ADC3_Init+0x130>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 5;
 8000fc8:	4b3a      	ldr	r3, [pc, #232]	; (80010b4 <MX_ADC3_Init+0x130>)
 8000fca:	2205      	movs	r2, #5
 8000fcc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000fce:	4b39      	ldr	r3, [pc, #228]	; (80010b4 <MX_ADC3_Init+0x130>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fd4:	4b37      	ldr	r3, [pc, #220]	; (80010b4 <MX_ADC3_Init+0x130>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fda:	4b36      	ldr	r3, [pc, #216]	; (80010b4 <MX_ADC3_Init+0x130>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000fe0:	4b34      	ldr	r3, [pc, #208]	; (80010b4 <MX_ADC3_Init+0x130>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fe6:	4b33      	ldr	r3, [pc, #204]	; (80010b4 <MX_ADC3_Init+0x130>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000fec:	4b31      	ldr	r3, [pc, #196]	; (80010b4 <MX_ADC3_Init+0x130>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000ff2:	4b30      	ldr	r3, [pc, #192]	; (80010b4 <MX_ADC3_Init+0x130>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ffa:	482e      	ldr	r0, [pc, #184]	; (80010b4 <MX_ADC3_Init+0x130>)
 8000ffc:	f001 fc68 	bl	80028d0 <HAL_ADC_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8001006:	f000 fbeb 	bl	80017e0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800100a:	2301      	movs	r3, #1
 800100c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800100e:	2306      	movs	r3, #6
 8001010:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001016:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800101a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800101c:	2304      	movs	r3, #4
 800101e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	4619      	mov	r1, r3
 8001028:	4822      	ldr	r0, [pc, #136]	; (80010b4 <MX_ADC3_Init+0x130>)
 800102a:	f001 fdf1 	bl	8002c10 <HAL_ADC_ConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8001034:	f000 fbd4 	bl	80017e0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001038:	4b20      	ldr	r3, [pc, #128]	; (80010bc <MX_ADC3_Init+0x138>)
 800103a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800103c:	230c      	movs	r3, #12
 800103e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	4619      	mov	r1, r3
 8001044:	481b      	ldr	r0, [pc, #108]	; (80010b4 <MX_ADC3_Init+0x130>)
 8001046:	f001 fde3 	bl	8002c10 <HAL_ADC_ConfigChannel>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8001050:	f000 fbc6 	bl	80017e0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001054:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <MX_ADC3_Init+0x13c>)
 8001056:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001058:	2312      	movs	r3, #18
 800105a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	4619      	mov	r1, r3
 8001060:	4814      	ldr	r0, [pc, #80]	; (80010b4 <MX_ADC3_Init+0x130>)
 8001062:	f001 fdd5 	bl	8002c10 <HAL_ADC_ConfigChannel>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_ADC3_Init+0xec>
  {
    Error_Handler();
 800106c:	f000 fbb8 	bl	80017e0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_ADC3_Init+0x140>)
 8001072:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001074:	2318      	movs	r3, #24
 8001076:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	4619      	mov	r1, r3
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <MX_ADC3_Init+0x130>)
 800107e:	f001 fdc7 	bl	8002c10 <HAL_ADC_ConfigChannel>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_ADC3_Init+0x108>
  {
    Error_Handler();
 8001088:	f000 fbaa 	bl	80017e0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800108c:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_ADC3_Init+0x144>)
 800108e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001090:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001094:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	; (80010b4 <MX_ADC3_Init+0x130>)
 800109c:	f001 fdb8 	bl	8002c10 <HAL_ADC_ConfigChannel>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_ADC3_Init+0x126>
  {
    Error_Handler();
 80010a6:	f000 fb9b 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	3720      	adds	r7, #32
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	24000a28 	.word	0x24000a28
 80010b8:	58026000 	.word	0x58026000
 80010bc:	04300002 	.word	0x04300002
 80010c0:	10c00010 	.word	0x10c00010
 80010c4:	14f00020 	.word	0x14f00020
 80010c8:	19200040 	.word	0x19200040

080010cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <MX_I2C1_Init+0x74>)
 80010d2:	4a1c      	ldr	r2, [pc, #112]	; (8001144 <MX_I2C1_Init+0x78>)
 80010d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B0DCFB;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_I2C1_Init+0x74>)
 80010d8:	4a1b      	ldr	r2, [pc, #108]	; (8001148 <MX_I2C1_Init+0x7c>)
 80010da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <MX_I2C1_Init+0x74>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <MX_I2C1_Init+0x74>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e8:	4b15      	ldr	r3, [pc, #84]	; (8001140 <MX_I2C1_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010ee:	4b14      	ldr	r3, [pc, #80]	; (8001140 <MX_I2C1_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <MX_I2C1_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <MX_I2C1_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <MX_I2C1_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001106:	480e      	ldr	r0, [pc, #56]	; (8001140 <MX_I2C1_Init+0x74>)
 8001108:	f002 fca2 	bl	8003a50 <HAL_I2C_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001112:	f000 fb65 	bl	80017e0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001116:	2100      	movs	r1, #0
 8001118:	4809      	ldr	r0, [pc, #36]	; (8001140 <MX_I2C1_Init+0x74>)
 800111a:	f003 f88f 	bl	800423c <HAL_I2CEx_ConfigAnalogFilter>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001124:	f000 fb5c 	bl	80017e0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001128:	2100      	movs	r1, #0
 800112a:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_I2C1_Init+0x74>)
 800112c:	f003 f8d1 	bl	80042d2 <HAL_I2CEx_ConfigDigitalFilter>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001136:	f000 fb53 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	24000588 	.word	0x24000588
 8001144:	40005400 	.word	0x40005400
 8001148:	10b0dcfb 	.word	0x10b0dcfb

0800114c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001152:	f107 0310 	add.w	r3, r7, #16
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800116a:	4b20      	ldr	r3, [pc, #128]	; (80011ec <MX_TIM1_Init+0xa0>)
 800116c:	4a20      	ldr	r2, [pc, #128]	; (80011f0 <MX_TIM1_Init+0xa4>)
 800116e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001170:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <MX_TIM1_Init+0xa0>)
 8001172:	2200      	movs	r2, #0
 8001174:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <MX_TIM1_Init+0xa0>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800117c:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <MX_TIM1_Init+0xa0>)
 800117e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001182:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001184:	4b19      	ldr	r3, [pc, #100]	; (80011ec <MX_TIM1_Init+0xa0>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <MX_TIM1_Init+0xa0>)
 800118c:	2200      	movs	r2, #0
 800118e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <MX_TIM1_Init+0xa0>)
 8001192:	2200      	movs	r2, #0
 8001194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001196:	4815      	ldr	r0, [pc, #84]	; (80011ec <MX_TIM1_Init+0xa0>)
 8001198:	f006 fbb8 	bl	800790c <HAL_TIM_Base_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80011a2:	f000 fb1d 	bl	80017e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	4619      	mov	r1, r3
 80011b2:	480e      	ldr	r0, [pc, #56]	; (80011ec <MX_TIM1_Init+0xa0>)
 80011b4:	f006 ffb8 	bl	8008128 <HAL_TIM_ConfigClockSource>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80011be:	f000 fb0f 	bl	80017e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	4619      	mov	r1, r3
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <MX_TIM1_Init+0xa0>)
 80011d4:	f007 fcd4 	bl	8008b80 <HAL_TIMEx_MasterConfigSynchronization>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011de:	f000 faff 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	3720      	adds	r7, #32
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	24000ac0 	.word	0x24000ac0
 80011f0:	40010000 	.word	0x40010000

080011f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fa:	f107 0310 	add.w	r3, r7, #16
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001212:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <MX_TIM3_Init+0x94>)
 8001214:	4a1d      	ldr	r2, [pc, #116]	; (800128c <MX_TIM3_Init+0x98>)
 8001216:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001218:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <MX_TIM3_Init+0x94>)
 800121a:	2200      	movs	r2, #0
 800121c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121e:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <MX_TIM3_Init+0x94>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001224:	4b18      	ldr	r3, [pc, #96]	; (8001288 <MX_TIM3_Init+0x94>)
 8001226:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800122a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122c:	4b16      	ldr	r3, [pc, #88]	; (8001288 <MX_TIM3_Init+0x94>)
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <MX_TIM3_Init+0x94>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001238:	4813      	ldr	r0, [pc, #76]	; (8001288 <MX_TIM3_Init+0x94>)
 800123a:	f006 fb67 	bl	800790c <HAL_TIM_Base_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001244:	f000 facc 	bl	80017e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	4619      	mov	r1, r3
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <MX_TIM3_Init+0x94>)
 8001256:	f006 ff67 	bl	8008128 <HAL_TIM_ConfigClockSource>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001260:	f000 fabe 	bl	80017e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <MX_TIM3_Init+0x94>)
 8001272:	f007 fc85 	bl	8008b80 <HAL_TIMEx_MasterConfigSynchronization>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800127c:	f000 fab0 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	3720      	adds	r7, #32
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	240009dc 	.word	0x240009dc
 800128c:	40000400 	.word	0x40000400

08001290 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08c      	sub	sp, #48	; 0x30
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	2224      	movs	r2, #36	; 0x24
 800129c:	2100      	movs	r1, #0
 800129e:	4618      	mov	r0, r3
 80012a0:	f009 f950 	bl	800a544 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a4:	463b      	mov	r3, r7
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012ae:	4b21      	ldr	r3, [pc, #132]	; (8001334 <MX_TIM4_Init+0xa4>)
 80012b0:	4a21      	ldr	r2, [pc, #132]	; (8001338 <MX_TIM4_Init+0xa8>)
 80012b2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012b4:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <MX_TIM4_Init+0xa4>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ba:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <MX_TIM4_Init+0xa4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1024;
 80012c0:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <MX_TIM4_Init+0xa4>)
 80012c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012c6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c8:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <MX_TIM4_Init+0xa4>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012ce:	4b19      	ldr	r3, [pc, #100]	; (8001334 <MX_TIM4_Init+0xa4>)
 80012d0:	2280      	movs	r2, #128	; 0x80
 80012d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012d4:	2303      	movs	r3, #3
 80012d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012d8:	2300      	movs	r3, #0
 80012da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012dc:	2301      	movs	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012ec:	2301      	movs	r3, #1
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	4619      	mov	r1, r3
 80012fe:	480d      	ldr	r0, [pc, #52]	; (8001334 <MX_TIM4_Init+0xa4>)
 8001300:	f006 fcca 	bl	8007c98 <HAL_TIM_Encoder_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800130a:	f000 fa69 	bl	80017e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001316:	463b      	mov	r3, r7
 8001318:	4619      	mov	r1, r3
 800131a:	4806      	ldr	r0, [pc, #24]	; (8001334 <MX_TIM4_Init+0xa4>)
 800131c:	f007 fc30 	bl	8008b80 <HAL_TIMEx_MasterConfigSynchronization>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001326:	f000 fa5b 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	3730      	adds	r7, #48	; 0x30
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	240004ac 	.word	0x240004ac
 8001338:	40000800 	.word	0x40000800

0800133c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
 8001350:	615a      	str	r2, [r3, #20]
 8001352:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001354:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <MX_TIM14_Init+0x94>)
 8001356:	4a1f      	ldr	r2, [pc, #124]	; (80013d4 <MX_TIM14_Init+0x98>)
 8001358:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800135a:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <MX_TIM14_Init+0x94>)
 800135c:	2200      	movs	r2, #0
 800135e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <MX_TIM14_Init+0x94>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <MX_TIM14_Init+0x94>)
 8001368:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800136c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_TIM14_Init+0x94>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <MX_TIM14_Init+0x94>)
 8001376:	2200      	movs	r2, #0
 8001378:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800137a:	4815      	ldr	r0, [pc, #84]	; (80013d0 <MX_TIM14_Init+0x94>)
 800137c:	f006 fac6 	bl	800790c <HAL_TIM_Base_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001386:	f000 fa2b 	bl	80017e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800138a:	4811      	ldr	r0, [pc, #68]	; (80013d0 <MX_TIM14_Init+0x94>)
 800138c:	f006 fb15 	bl	80079ba <HAL_TIM_PWM_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001396:	f000 fa23 	bl	80017e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800139a:	2360      	movs	r3, #96	; 0x60
 800139c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	2200      	movs	r2, #0
 80013ae:	4619      	mov	r1, r3
 80013b0:	4807      	ldr	r0, [pc, #28]	; (80013d0 <MX_TIM14_Init+0x94>)
 80013b2:	f006 fda5 	bl	8007f00 <HAL_TIM_PWM_ConfigChannel>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80013bc:	f000 fa10 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80013c0:	4803      	ldr	r0, [pc, #12]	; (80013d0 <MX_TIM14_Init+0x94>)
 80013c2:	f000 fdf3 	bl	8001fac <HAL_TIM_MspPostInit>

}
 80013c6:	bf00      	nop
 80013c8:	3720      	adds	r7, #32
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	24000b0c 	.word	0x24000b0c
 80013d4:	40002000 	.word	0x40002000

080013d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013dc:	4b22      	ldr	r3, [pc, #136]	; (8001468 <MX_USART3_UART_Init+0x90>)
 80013de:	4a23      	ldr	r2, [pc, #140]	; (800146c <MX_USART3_UART_Init+0x94>)
 80013e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <MX_USART3_UART_Init+0x90>)
 80013e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013ea:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <MX_USART3_UART_Init+0x90>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <MX_USART3_UART_Init+0x90>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013f6:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <MX_USART3_UART_Init+0x90>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013fc:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <MX_USART3_UART_Init+0x90>)
 80013fe:	220c      	movs	r2, #12
 8001400:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <MX_USART3_UART_Init+0x90>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <MX_USART3_UART_Init+0x90>)
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <MX_USART3_UART_Init+0x90>)
 8001410:	2200      	movs	r2, #0
 8001412:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <MX_USART3_UART_Init+0x90>)
 8001416:	2200      	movs	r2, #0
 8001418:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <MX_USART3_UART_Init+0x90>)
 800141c:	2200      	movs	r2, #0
 800141e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001420:	4811      	ldr	r0, [pc, #68]	; (8001468 <MX_USART3_UART_Init+0x90>)
 8001422:	f007 fc3b 	bl	8008c9c <HAL_UART_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800142c:	f000 f9d8 	bl	80017e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001430:	2100      	movs	r1, #0
 8001432:	480d      	ldr	r0, [pc, #52]	; (8001468 <MX_USART3_UART_Init+0x90>)
 8001434:	f008 fc66 	bl	8009d04 <HAL_UARTEx_SetTxFifoThreshold>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800143e:	f000 f9cf 	bl	80017e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001442:	2100      	movs	r1, #0
 8001444:	4808      	ldr	r0, [pc, #32]	; (8001468 <MX_USART3_UART_Init+0x90>)
 8001446:	f008 fc9b 	bl	8009d80 <HAL_UARTEx_SetRxFifoThreshold>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001450:	f000 f9c6 	bl	80017e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <MX_USART3_UART_Init+0x90>)
 8001456:	f008 fc1c 	bl	8009c92 <HAL_UARTEx_DisableFifoMode>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001460:	f000 f9be 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	240004f8 	.word	0x240004f8
 800146c:	40004800 	.word	0x40004800

08001470 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001474:	4b15      	ldr	r3, [pc, #84]	; (80014cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001476:	4a16      	ldr	r2, [pc, #88]	; (80014d0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001478:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800147c:	2209      	movs	r2, #9
 800147e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001482:	2202      	movs	r2, #2
 8001484:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800148e:	2202      	movs	r2, #2
 8001490:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001494:	2201      	movs	r2, #1
 8001496:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800149a:	2200      	movs	r2, #0
 800149c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014b8:	f002 ff57 	bl	800436a <HAL_PCD_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80014c2:	f000 f98d 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	240005d4 	.word	0x240005d4
 80014d0:	40080000 	.word	0x40080000

080014d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08e      	sub	sp, #56	; 0x38
 80014d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ea:	4bb5      	ldr	r3, [pc, #724]	; (80017c0 <MX_GPIO_Init+0x2ec>)
 80014ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f0:	4ab3      	ldr	r2, [pc, #716]	; (80017c0 <MX_GPIO_Init+0x2ec>)
 80014f2:	f043 0310 	orr.w	r3, r3, #16
 80014f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014fa:	4bb1      	ldr	r3, [pc, #708]	; (80017c0 <MX_GPIO_Init+0x2ec>)
 80014fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001500:	f003 0310 	and.w	r3, r3, #16
 8001504:	623b      	str	r3, [r7, #32]
 8001506:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001508:	4bad      	ldr	r3, [pc, #692]	; (80017c0 <MX_GPIO_Init+0x2ec>)
 800150a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150e:	4aac      	ldr	r2, [pc, #688]	; (80017c0 <MX_GPIO_Init+0x2ec>)
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001518:	4ba9      	ldr	r3, [pc, #676]	; (80017c0 <MX_GPIO_Init+0x2ec>)
 800151a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	61fb      	str	r3, [r7, #28]
 8001524:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001526:	4ba6      	ldr	r3, [pc, #664]	; (80017c0 <MX_GPIO_Init+0x2ec>)
 8001528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152c:	4aa4      	ldr	r2, [pc, #656]	; (80017c0 <MX_GPIO_Init+0x2ec>)
 800152e:	f043 0320 	orr.w	r3, r3, #32
 8001532:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001536:	4ba2      	ldr	r3, [pc, #648]	; (80017c0 <MX_GPIO_Init+0x2ec>)
 8001538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153c:	f003 0320 	and.w	r3, r3, #32
 8001540:	61bb      	str	r3, [r7, #24]
 8001542:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001544:	4b9e      	ldr	r3, [pc, #632]	; (80017c0 <MX_GPIO_Init+0x2ec>)
 8001546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154a:	4a9d      	ldr	r2, [pc, #628]	; (80017c0 <MX_GPIO_Init+0x2ec>)
 800154c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001550:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001554:	4b9a      	ldr	r3, [pc, #616]	; (80017c0 <MX_GPIO_Init+0x2ec>)
 8001556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	4b97      	ldr	r3, [pc, #604]	; (80017c0 <MX_GPIO_Init+0x2ec>)
 8001564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001568:	4a95      	ldr	r2, [pc, #596]	; (80017c0 <MX_GPIO_Init+0x2ec>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001572:	4b93      	ldr	r3, [pc, #588]	; (80017c0 <MX_GPIO_Init+0x2ec>)
 8001574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001580:	4b8f      	ldr	r3, [pc, #572]	; (80017c0 <MX_GPIO_Init+0x2ec>)
 8001582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001586:	4a8e      	ldr	r2, [pc, #568]	; (80017c0 <MX_GPIO_Init+0x2ec>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001590:	4b8b      	ldr	r3, [pc, #556]	; (80017c0 <MX_GPIO_Init+0x2ec>)
 8001592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800159e:	4b88      	ldr	r3, [pc, #544]	; (80017c0 <MX_GPIO_Init+0x2ec>)
 80015a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a4:	4a86      	ldr	r2, [pc, #536]	; (80017c0 <MX_GPIO_Init+0x2ec>)
 80015a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ae:	4b84      	ldr	r3, [pc, #528]	; (80017c0 <MX_GPIO_Init+0x2ec>)
 80015b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015bc:	4b80      	ldr	r3, [pc, #512]	; (80017c0 <MX_GPIO_Init+0x2ec>)
 80015be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c2:	4a7f      	ldr	r2, [pc, #508]	; (80017c0 <MX_GPIO_Init+0x2ec>)
 80015c4:	f043 0308 	orr.w	r3, r3, #8
 80015c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015cc:	4b7c      	ldr	r3, [pc, #496]	; (80017c0 <MX_GPIO_Init+0x2ec>)
 80015ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, RTC_CLK_Pin|RTC_RST_Pin, GPIO_PIN_RESET);
 80015da:	2200      	movs	r2, #0
 80015dc:	2106      	movs	r1, #6
 80015de:	4879      	ldr	r0, [pc, #484]	; (80017c4 <MX_GPIO_Init+0x2f0>)
 80015e0:	f002 fa1c 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80015e4:	2200      	movs	r2, #0
 80015e6:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80015ea:	4877      	ldr	r0, [pc, #476]	; (80017c8 <MX_GPIO_Init+0x2f4>)
 80015ec:	f002 fa16 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2140      	movs	r1, #64	; 0x40
 80015f4:	4875      	ldr	r0, [pc, #468]	; (80017cc <MX_GPIO_Init+0x2f8>)
 80015f6:	f002 fa11 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80015fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001600:	2303      	movs	r3, #3
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160c:	4619      	mov	r1, r3
 800160e:	4870      	ldr	r0, [pc, #448]	; (80017d0 <MX_GPIO_Init+0x2fc>)
 8001610:	f002 f83c 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001614:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800161a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001628:	4619      	mov	r1, r3
 800162a:	486a      	ldr	r0, [pc, #424]	; (80017d4 <MX_GPIO_Init+0x300>)
 800162c:	f002 f82e 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pin : RTC_IO_Pin */
  GPIO_InitStruct.Pin = RTC_IO_Pin;
 8001630:	2301      	movs	r3, #1
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001634:	2300      	movs	r3, #0
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RTC_IO_GPIO_Port, &GPIO_InitStruct);
 800163c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001640:	4619      	mov	r1, r3
 8001642:	4860      	ldr	r0, [pc, #384]	; (80017c4 <MX_GPIO_Init+0x2f0>)
 8001644:	f002 f822 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pins : RTC_CLK_Pin RTC_RST_Pin */
  GPIO_InitStruct.Pin = RTC_CLK_Pin|RTC_RST_Pin;
 8001648:	2306      	movs	r3, #6
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165c:	4619      	mov	r1, r3
 800165e:	4859      	ldr	r0, [pc, #356]	; (80017c4 <MX_GPIO_Init+0x2f0>)
 8001660:	f002 f814 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF4 PF6 PF7 PF8
                           PF11 PF12 PF13 PF14
                           PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001664:	f64f 13d0 	movw	r3, #63952	; 0xf9d0
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800166a:	2303      	movs	r3, #3
 800166c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001676:	4619      	mov	r1, r3
 8001678:	4852      	ldr	r0, [pc, #328]	; (80017c4 <MX_GPIO_Init+0x2f0>)
 800167a:	f002 f807 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800167e:	f641 73f1 	movw	r3, #8177	; 0x1ff1
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001684:	2303      	movs	r3, #3
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800168c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001690:	4619      	mov	r1, r3
 8001692:	4850      	ldr	r0, [pc, #320]	; (80017d4 <MX_GPIO_Init+0x300>)
 8001694:	f001 fffa 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDC_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 8001698:	2302      	movs	r3, #2
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016a8:	230b      	movs	r3, #11
 80016aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 80016ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b0:	4619      	mov	r1, r3
 80016b2:	4848      	ldr	r0, [pc, #288]	; (80017d4 <MX_GPIO_Init+0x300>)
 80016b4:	f001 ffea 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80016b8:	f248 03ff 	movw	r3, #33023	; 0x80ff
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016be:	2303      	movs	r3, #3
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ca:	4619      	mov	r1, r3
 80016cc:	4842      	ldr	r0, [pc, #264]	; (80017d8 <MX_GPIO_Init+0x304>)
 80016ce:	f001 ffdd 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB15 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80016d2:	f649 4377 	movw	r3, #40055	; 0x9c77
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016d8:	2303      	movs	r3, #3
 80016da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e4:	4619      	mov	r1, r3
 80016e6:	4838      	ldr	r0, [pc, #224]	; (80017c8 <MX_GPIO_Init+0x2f4>)
 80016e8:	f001 ffd0 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG8 PG9
                           PG10 PG12 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80016ec:	f24d 733f 	movw	r3, #55103	; 0xd73f
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f2:	2303      	movs	r3, #3
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fe:	4619      	mov	r1, r3
 8001700:	4832      	ldr	r0, [pc, #200]	; (80017cc <MX_GPIO_Init+0x2f8>)
 8001702:	f001 ffc3 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001706:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2300      	movs	r3, #0
 8001716:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001718:	230b      	movs	r3, #11
 800171a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800171c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001720:	4619      	mov	r1, r3
 8001722:	4829      	ldr	r0, [pc, #164]	; (80017c8 <MX_GPIO_Init+0x2f4>)
 8001724:	f001 ffb2 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001728:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172e:	2301      	movs	r3, #1
 8001730:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173e:	4619      	mov	r1, r3
 8001740:	4821      	ldr	r0, [pc, #132]	; (80017c8 <MX_GPIO_Init+0x2f4>)
 8001742:	f001 ffa3 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15
 8001746:	f64c 43ff 	movw	r3, #52479	; 0xccff
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800174c:	2303      	movs	r3, #3
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001758:	4619      	mov	r1, r3
 800175a:	4820      	ldr	r0, [pc, #128]	; (80017dc <MX_GPIO_Init+0x308>)
 800175c:	f001 ff96 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001760:	2340      	movs	r3, #64	; 0x40
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001764:	2301      	movs	r3, #1
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2300      	movs	r3, #0
 800176e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001774:	4619      	mov	r1, r3
 8001776:	4815      	ldr	r0, [pc, #84]	; (80017cc <MX_GPIO_Init+0x2f8>)
 8001778:	f001 ff88 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001780:	2300      	movs	r3, #0
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178c:	4619      	mov	r1, r3
 800178e:	480f      	ldr	r0, [pc, #60]	; (80017cc <MX_GPIO_Init+0x2f8>)
 8001790:	f001 ff7c 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001794:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2300      	movs	r3, #0
 80017a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017a6:	230b      	movs	r3, #11
 80017a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ae:	4619      	mov	r1, r3
 80017b0:	4806      	ldr	r0, [pc, #24]	; (80017cc <MX_GPIO_Init+0x2f8>)
 80017b2:	f001 ff6b 	bl	800368c <HAL_GPIO_Init>

}
 80017b6:	bf00      	nop
 80017b8:	3738      	adds	r7, #56	; 0x38
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	58024400 	.word	0x58024400
 80017c4:	58021400 	.word	0x58021400
 80017c8:	58020400 	.word	0x58020400
 80017cc:	58021800 	.word	0x58021800
 80017d0:	58021000 	.word	0x58021000
 80017d4:	58020800 	.word	0x58020800
 80017d8:	58020000 	.word	0x58020000
 80017dc:	58020c00 	.word	0x58020c00

080017e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e4:	b672      	cpsid	i
}
 80017e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <Error_Handler+0x8>

080017ea <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af04      	add	r7, sp, #16
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001802:	f04f 33ff 	mov.w	r3, #4294967295
 8001806:	9302      	str	r3, [sp, #8]
 8001808:	2301      	movs	r3, #1
 800180a:	9301      	str	r3, [sp, #4]
 800180c:	1dfb      	adds	r3, r7, #7
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	2301      	movs	r3, #1
 8001812:	2200      	movs	r2, #0
 8001814:	2178      	movs	r1, #120	; 0x78
 8001816:	4803      	ldr	r0, [pc, #12]	; (8001824 <ssd1306_WriteCommand+0x2c>)
 8001818:	f002 f9aa 	bl	8003b70 <HAL_I2C_Mem_Write>
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	24000588 	.word	0x24000588

08001828 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af04      	add	r7, sp, #16
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	b29b      	uxth	r3, r3
 8001836:	f04f 32ff 	mov.w	r2, #4294967295
 800183a:	9202      	str	r2, [sp, #8]
 800183c:	9301      	str	r3, [sp, #4]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	2301      	movs	r3, #1
 8001844:	2240      	movs	r2, #64	; 0x40
 8001846:	2178      	movs	r1, #120	; 0x78
 8001848:	4803      	ldr	r0, [pc, #12]	; (8001858 <ssd1306_WriteData+0x30>)
 800184a:	f002 f991 	bl	8003b70 <HAL_I2C_Mem_Write>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	24000588 	.word	0x24000588

0800185c <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001860:	f7ff ffc3 	bl	80017ea <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001864:	2064      	movs	r0, #100	; 0x64
 8001866:	f000 fe61 	bl	800252c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800186a:	2000      	movs	r0, #0
 800186c:	f000 f9da 	bl	8001c24 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001870:	2020      	movs	r0, #32
 8001872:	f7ff ffc1 	bl	80017f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001876:	2000      	movs	r0, #0
 8001878:	f7ff ffbe 	bl	80017f8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800187c:	20b0      	movs	r0, #176	; 0xb0
 800187e:	f7ff ffbb 	bl	80017f8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001882:	20c8      	movs	r0, #200	; 0xc8
 8001884:	f7ff ffb8 	bl	80017f8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001888:	2000      	movs	r0, #0
 800188a:	f7ff ffb5 	bl	80017f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800188e:	2010      	movs	r0, #16
 8001890:	f7ff ffb2 	bl	80017f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001894:	2040      	movs	r0, #64	; 0x40
 8001896:	f7ff ffaf 	bl	80017f8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800189a:	20ff      	movs	r0, #255	; 0xff
 800189c:	f000 f9ae 	bl	8001bfc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80018a0:	20a1      	movs	r0, #161	; 0xa1
 80018a2:	f7ff ffa9 	bl	80017f8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80018a6:	20a6      	movs	r0, #166	; 0xa6
 80018a8:	f7ff ffa6 	bl	80017f8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80018ac:	20a8      	movs	r0, #168	; 0xa8
 80018ae:	f7ff ffa3 	bl	80017f8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80018b2:	203f      	movs	r0, #63	; 0x3f
 80018b4:	f7ff ffa0 	bl	80017f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80018b8:	20a4      	movs	r0, #164	; 0xa4
 80018ba:	f7ff ff9d 	bl	80017f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80018be:	20d3      	movs	r0, #211	; 0xd3
 80018c0:	f7ff ff9a 	bl	80017f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80018c4:	2000      	movs	r0, #0
 80018c6:	f7ff ff97 	bl	80017f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80018ca:	20d5      	movs	r0, #213	; 0xd5
 80018cc:	f7ff ff94 	bl	80017f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80018d0:	20f0      	movs	r0, #240	; 0xf0
 80018d2:	f7ff ff91 	bl	80017f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80018d6:	20d9      	movs	r0, #217	; 0xd9
 80018d8:	f7ff ff8e 	bl	80017f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80018dc:	2022      	movs	r0, #34	; 0x22
 80018de:	f7ff ff8b 	bl	80017f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80018e2:	20da      	movs	r0, #218	; 0xda
 80018e4:	f7ff ff88 	bl	80017f8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80018e8:	2012      	movs	r0, #18
 80018ea:	f7ff ff85 	bl	80017f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80018ee:	20db      	movs	r0, #219	; 0xdb
 80018f0:	f7ff ff82 	bl	80017f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80018f4:	2020      	movs	r0, #32
 80018f6:	f7ff ff7f 	bl	80017f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80018fa:	208d      	movs	r0, #141	; 0x8d
 80018fc:	f7ff ff7c 	bl	80017f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001900:	2014      	movs	r0, #20
 8001902:	f7ff ff79 	bl	80017f8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001906:	2001      	movs	r0, #1
 8001908:	f000 f98c 	bl	8001c24 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800190c:	2000      	movs	r0, #0
 800190e:	f000 f80f 	bl	8001930 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001912:	f000 f831 	bl	8001978 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001916:	4b05      	ldr	r3, [pc, #20]	; (800192c <ssd1306_Init+0xd0>)
 8001918:	2200      	movs	r2, #0
 800191a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <ssd1306_Init+0xd0>)
 800191e:	2200      	movs	r2, #0
 8001920:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001922:	4b02      	ldr	r3, [pc, #8]	; (800192c <ssd1306_Init+0xd0>)
 8001924:	2201      	movs	r2, #1
 8001926:	711a      	strb	r2, [r3, #4]
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	24000498 	.word	0x24000498

08001930 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	e00d      	b.n	800195c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <ssd1306_Fill+0x1a>
 8001946:	2100      	movs	r1, #0
 8001948:	e000      	b.n	800194c <ssd1306_Fill+0x1c>
 800194a:	21ff      	movs	r1, #255	; 0xff
 800194c:	4a09      	ldr	r2, [pc, #36]	; (8001974 <ssd1306_Fill+0x44>)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4413      	add	r3, r2
 8001952:	460a      	mov	r2, r1
 8001954:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	3301      	adds	r3, #1
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001962:	d3ed      	bcc.n	8001940 <ssd1306_Fill+0x10>
    }
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	24000098 	.word	0x24000098

08001978 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800197e:	2300      	movs	r3, #0
 8001980:	71fb      	strb	r3, [r7, #7]
 8001982:	e016      	b.n	80019b2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	3b50      	subs	r3, #80	; 0x50
 8001988:	b2db      	uxtb	r3, r3
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ff34 	bl	80017f8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001990:	2000      	movs	r0, #0
 8001992:	f7ff ff31 	bl	80017f8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001996:	2010      	movs	r0, #16
 8001998:	f7ff ff2e 	bl	80017f8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	01db      	lsls	r3, r3, #7
 80019a0:	4a08      	ldr	r2, [pc, #32]	; (80019c4 <ssd1306_UpdateScreen+0x4c>)
 80019a2:	4413      	add	r3, r2
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff ff3e 	bl	8001828 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	3301      	adds	r3, #1
 80019b0:	71fb      	strb	r3, [r7, #7]
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	2b07      	cmp	r3, #7
 80019b6:	d9e5      	bls.n	8001984 <ssd1306_UpdateScreen+0xc>
    }
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	24000098 	.word	0x24000098

080019c8 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
 80019d2:	460b      	mov	r3, r1
 80019d4:	71bb      	strb	r3, [r7, #6]
 80019d6:	4613      	mov	r3, r2
 80019d8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	db3d      	blt.n	8001a5e <ssd1306_DrawPixel+0x96>
 80019e2:	79bb      	ldrb	r3, [r7, #6]
 80019e4:	2b3f      	cmp	r3, #63	; 0x3f
 80019e6:	d83a      	bhi.n	8001a5e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80019e8:	797b      	ldrb	r3, [r7, #5]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d11a      	bne.n	8001a24 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80019ee:	79fa      	ldrb	r2, [r7, #7]
 80019f0:	79bb      	ldrb	r3, [r7, #6]
 80019f2:	08db      	lsrs	r3, r3, #3
 80019f4:	b2d8      	uxtb	r0, r3
 80019f6:	4603      	mov	r3, r0
 80019f8:	01db      	lsls	r3, r3, #7
 80019fa:	4413      	add	r3, r2
 80019fc:	4a1b      	ldr	r2, [pc, #108]	; (8001a6c <ssd1306_DrawPixel+0xa4>)
 80019fe:	5cd3      	ldrb	r3, [r2, r3]
 8001a00:	b25a      	sxtb	r2, r3
 8001a02:	79bb      	ldrb	r3, [r7, #6]
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	2101      	movs	r1, #1
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	b25b      	sxtb	r3, r3
 8001a10:	4313      	orrs	r3, r2
 8001a12:	b259      	sxtb	r1, r3
 8001a14:	79fa      	ldrb	r2, [r7, #7]
 8001a16:	4603      	mov	r3, r0
 8001a18:	01db      	lsls	r3, r3, #7
 8001a1a:	4413      	add	r3, r2
 8001a1c:	b2c9      	uxtb	r1, r1
 8001a1e:	4a13      	ldr	r2, [pc, #76]	; (8001a6c <ssd1306_DrawPixel+0xa4>)
 8001a20:	54d1      	strb	r1, [r2, r3]
 8001a22:	e01d      	b.n	8001a60 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a24:	79fa      	ldrb	r2, [r7, #7]
 8001a26:	79bb      	ldrb	r3, [r7, #6]
 8001a28:	08db      	lsrs	r3, r3, #3
 8001a2a:	b2d8      	uxtb	r0, r3
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	01db      	lsls	r3, r3, #7
 8001a30:	4413      	add	r3, r2
 8001a32:	4a0e      	ldr	r2, [pc, #56]	; (8001a6c <ssd1306_DrawPixel+0xa4>)
 8001a34:	5cd3      	ldrb	r3, [r2, r3]
 8001a36:	b25a      	sxtb	r2, r3
 8001a38:	79bb      	ldrb	r3, [r7, #6]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	2101      	movs	r1, #1
 8001a40:	fa01 f303 	lsl.w	r3, r1, r3
 8001a44:	b25b      	sxtb	r3, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	b25b      	sxtb	r3, r3
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	b259      	sxtb	r1, r3
 8001a4e:	79fa      	ldrb	r2, [r7, #7]
 8001a50:	4603      	mov	r3, r0
 8001a52:	01db      	lsls	r3, r3, #7
 8001a54:	4413      	add	r3, r2
 8001a56:	b2c9      	uxtb	r1, r1
 8001a58:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <ssd1306_DrawPixel+0xa4>)
 8001a5a:	54d1      	strb	r1, [r2, r3]
 8001a5c:	e000      	b.n	8001a60 <ssd1306_DrawPixel+0x98>
        return;
 8001a5e:	bf00      	nop
    }
}
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	24000098 	.word	0x24000098

08001a70 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001a70:	b590      	push	{r4, r7, lr}
 8001a72:	b089      	sub	sp, #36	; 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4604      	mov	r4, r0
 8001a78:	1d38      	adds	r0, r7, #4
 8001a7a:	e880 0006 	stmia.w	r0, {r1, r2}
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4623      	mov	r3, r4
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	4613      	mov	r3, r2
 8001a86:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	2b1f      	cmp	r3, #31
 8001a8c:	d902      	bls.n	8001a94 <ssd1306_WriteChar+0x24>
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
 8001a90:	2b7e      	cmp	r3, #126	; 0x7e
 8001a92:	d901      	bls.n	8001a98 <ssd1306_WriteChar+0x28>
        return 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	e06d      	b.n	8001b74 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001a98:	4b38      	ldr	r3, [pc, #224]	; (8001b7c <ssd1306_WriteChar+0x10c>)
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	793b      	ldrb	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	2b80      	cmp	r3, #128	; 0x80
 8001aa4:	dc06      	bgt.n	8001ab4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001aa6:	4b35      	ldr	r3, [pc, #212]	; (8001b7c <ssd1306_WriteChar+0x10c>)
 8001aa8:	885b      	ldrh	r3, [r3, #2]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	797b      	ldrb	r3, [r7, #5]
 8001aae:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001ab0:	2b40      	cmp	r3, #64	; 0x40
 8001ab2:	dd01      	ble.n	8001ab8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	e05d      	b.n	8001b74 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
 8001abc:	e04c      	b.n	8001b58 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	3b20      	subs	r3, #32
 8001ac4:	7979      	ldrb	r1, [r7, #5]
 8001ac6:	fb01 f303 	mul.w	r3, r1, r3
 8001aca:	4619      	mov	r1, r3
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	440b      	add	r3, r1
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4413      	add	r3, r2
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61bb      	str	r3, [r7, #24]
 8001adc:	e034      	b.n	8001b48 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d012      	beq.n	8001b14 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001aee:	4b23      	ldr	r3, [pc, #140]	; (8001b7c <ssd1306_WriteChar+0x10c>)
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	4413      	add	r3, r2
 8001afa:	b2d8      	uxtb	r0, r3
 8001afc:	4b1f      	ldr	r3, [pc, #124]	; (8001b7c <ssd1306_WriteChar+0x10c>)
 8001afe:	885b      	ldrh	r3, [r3, #2]
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	4413      	add	r3, r2
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	7bba      	ldrb	r2, [r7, #14]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f7ff ff5b 	bl	80019c8 <ssd1306_DrawPixel>
 8001b12:	e016      	b.n	8001b42 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001b14:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <ssd1306_WriteChar+0x10c>)
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	b2d8      	uxtb	r0, r3
 8001b22:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <ssd1306_WriteChar+0x10c>)
 8001b24:	885b      	ldrh	r3, [r3, #2]
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	b2d9      	uxtb	r1, r3
 8001b30:	7bbb      	ldrb	r3, [r7, #14]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	bf0c      	ite	eq
 8001b36:	2301      	moveq	r3, #1
 8001b38:	2300      	movne	r3, #0
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	f7ff ff43 	bl	80019c8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	3301      	adds	r3, #1
 8001b46:	61bb      	str	r3, [r7, #24]
 8001b48:	793b      	ldrb	r3, [r7, #4]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d3c5      	bcc.n	8001ade <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3301      	adds	r3, #1
 8001b56:	61fb      	str	r3, [r7, #28]
 8001b58:	797b      	ldrb	r3, [r7, #5]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d3ad      	bcc.n	8001abe <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <ssd1306_WriteChar+0x10c>)
 8001b64:	881a      	ldrh	r2, [r3, #0]
 8001b66:	793b      	ldrb	r3, [r7, #4]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <ssd1306_WriteChar+0x10c>)
 8001b70:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3724      	adds	r7, #36	; 0x24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd90      	pop	{r4, r7, pc}
 8001b7c:	24000498 	.word	0x24000498

08001b80 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	1d38      	adds	r0, r7, #4
 8001b8a:	e880 0006 	stmia.w	r0, {r1, r2}
 8001b8e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001b90:	e012      	b.n	8001bb8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	7818      	ldrb	r0, [r3, #0]
 8001b96:	78fb      	ldrb	r3, [r7, #3]
 8001b98:	1d3a      	adds	r2, r7, #4
 8001b9a:	ca06      	ldmia	r2, {r1, r2}
 8001b9c:	f7ff ff68 	bl	8001a70 <ssd1306_WriteChar>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d002      	beq.n	8001bb2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	e008      	b.n	8001bc4 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1e8      	bne.n	8001b92 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	781b      	ldrb	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	460a      	mov	r2, r1
 8001bd6:	71fb      	strb	r3, [r7, #7]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <ssd1306_SetCursor+0x2c>)
 8001be2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001be4:	79bb      	ldrb	r3, [r7, #6]
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <ssd1306_SetCursor+0x2c>)
 8001bea:	805a      	strh	r2, [r3, #2]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	24000498 	.word	0x24000498

08001bfc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001c06:	2381      	movs	r3, #129	; 0x81
 8001c08:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fdf3 	bl	80017f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fdef 	bl	80017f8 <ssd1306_WriteCommand>
}
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001c34:	23af      	movs	r3, #175	; 0xaf
 8001c36:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <ssd1306_SetDisplayOn+0x38>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	715a      	strb	r2, [r3, #5]
 8001c3e:	e004      	b.n	8001c4a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001c40:	23ae      	movs	r3, #174	; 0xae
 8001c42:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <ssd1306_SetDisplayOn+0x38>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fdd3 	bl	80017f8 <ssd1306_WriteCommand>
}
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	24000498 	.word	0x24000498

08001c60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <HAL_MspInit+0x30>)
 8001c68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c6c:	4a08      	ldr	r2, [pc, #32]	; (8001c90 <HAL_MspInit+0x30>)
 8001c6e:	f043 0302 	orr.w	r3, r3, #2
 8001c72:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_MspInit+0x30>)
 8001c78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	58024400 	.word	0x58024400

08001c94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b0ba      	sub	sp, #232	; 0xe8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cac:	f107 0318 	add.w	r3, r7, #24
 8001cb0:	22bc      	movs	r2, #188	; 0xbc
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f008 fc45 	bl	800a544 <memset>
  if(hadc->Instance==ADC3)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a38      	ldr	r2, [pc, #224]	; (8001da0 <HAL_ADC_MspInit+0x10c>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d169      	bne.n	8001d98 <HAL_ADC_MspInit+0x104>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001cc4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001cc8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 37;
 8001cce:	2325      	movs	r3, #37	; 0x25
 8001cd0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 1;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001ce2:	2320      	movs	r3, #32
 8001ce4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8001ce6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001cea:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cf2:	f107 0318 	add.w	r3, r7, #24
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f003 fc82 	bl	8005600 <HAL_RCCEx_PeriphCLKConfig>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8001d02:	f7ff fd6d 	bl	80017e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001d06:	4b27      	ldr	r3, [pc, #156]	; (8001da4 <HAL_ADC_MspInit+0x110>)
 8001d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d0c:	4a25      	ldr	r2, [pc, #148]	; (8001da4 <HAL_ADC_MspInit+0x110>)
 8001d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d16:	4b23      	ldr	r3, [pc, #140]	; (8001da4 <HAL_ADC_MspInit+0x110>)
 8001d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d24:	4b1f      	ldr	r3, [pc, #124]	; (8001da4 <HAL_ADC_MspInit+0x110>)
 8001d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d2a:	4a1e      	ldr	r2, [pc, #120]	; (8001da4 <HAL_ADC_MspInit+0x110>)
 8001d2c:	f043 0320 	orr.w	r3, r3, #32
 8001d30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <HAL_ADC_MspInit+0x110>)
 8001d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d3a:	f003 0320 	and.w	r3, r3, #32
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d42:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <HAL_ADC_MspInit+0x110>)
 8001d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d48:	4a16      	ldr	r2, [pc, #88]	; (8001da4 <HAL_ADC_MspInit+0x110>)
 8001d4a:	f043 0304 	orr.w	r3, r3, #4
 8001d4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d52:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <HAL_ADC_MspInit+0x110>)
 8001d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
    PF5     ------> ADC3_INP4
    PF10     ------> ADC3_INP6
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_10;
 8001d60:	f44f 6385 	mov.w	r3, #1064	; 0x428
 8001d64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d74:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d78:	4619      	mov	r1, r3
 8001d7a:	480b      	ldr	r0, [pc, #44]	; (8001da8 <HAL_ADC_MspInit+0x114>)
 8001d7c:	f001 fc86 	bl	800368c <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001d80:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001d84:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001d88:	f000 fc00 	bl	800258c <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001d8c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001d90:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001d94:	f000 fbfa 	bl	800258c <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001d98:	bf00      	nop
 8001d9a:	37e8      	adds	r7, #232	; 0xe8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	58026000 	.word	0x58026000
 8001da4:	58024400 	.word	0x58024400
 8001da8:	58021400 	.word	0x58021400

08001dac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b0b8      	sub	sp, #224	; 0xe0
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dc4:	f107 0310 	add.w	r3, r7, #16
 8001dc8:	22bc      	movs	r2, #188	; 0xbc
 8001dca:	2100      	movs	r1, #0
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f008 fbb9 	bl	800a544 <memset>
  if(hi2c->Instance==I2C1)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a25      	ldr	r2, [pc, #148]	; (8001e6c <HAL_I2C_MspInit+0xc0>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d143      	bne.n	8001e64 <HAL_I2C_MspInit+0xb8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ddc:	2308      	movs	r3, #8
 8001dde:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_HSI;
 8001de0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001de4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001de8:	f107 0310 	add.w	r3, r7, #16
 8001dec:	4618      	mov	r0, r3
 8001dee:	f003 fc07 	bl	8005600 <HAL_RCCEx_PeriphCLKConfig>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001df8:	f7ff fcf2 	bl	80017e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfc:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <HAL_I2C_MspInit+0xc4>)
 8001dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e02:	4a1b      	ldr	r2, [pc, #108]	; (8001e70 <HAL_I2C_MspInit+0xc4>)
 8001e04:	f043 0302 	orr.w	r3, r3, #2
 8001e08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e0c:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <HAL_I2C_MspInit+0xc4>)
 8001e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e22:	2312      	movs	r3, #18
 8001e24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e34:	2304      	movs	r3, #4
 8001e36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e3e:	4619      	mov	r1, r3
 8001e40:	480c      	ldr	r0, [pc, #48]	; (8001e74 <HAL_I2C_MspInit+0xc8>)
 8001e42:	f001 fc23 	bl	800368c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e46:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <HAL_I2C_MspInit+0xc4>)
 8001e48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e4c:	4a08      	ldr	r2, [pc, #32]	; (8001e70 <HAL_I2C_MspInit+0xc4>)
 8001e4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_I2C_MspInit+0xc4>)
 8001e58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e64:	bf00      	nop
 8001e66:	37e0      	adds	r7, #224	; 0xe0
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40005400 	.word	0x40005400
 8001e70:	58024400 	.word	0x58024400
 8001e74:	58020400 	.word	0x58020400

08001e78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a20      	ldr	r2, [pc, #128]	; (8001f08 <HAL_TIM_Base_MspInit+0x90>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d10f      	bne.n	8001eaa <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e8a:	4b20      	ldr	r3, [pc, #128]	; (8001f0c <HAL_TIM_Base_MspInit+0x94>)
 8001e8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e90:	4a1e      	ldr	r2, [pc, #120]	; (8001f0c <HAL_TIM_Base_MspInit+0x94>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e9a:	4b1c      	ldr	r3, [pc, #112]	; (8001f0c <HAL_TIM_Base_MspInit+0x94>)
 8001e9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001ea8:	e028      	b.n	8001efc <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM3)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a18      	ldr	r2, [pc, #96]	; (8001f10 <HAL_TIM_Base_MspInit+0x98>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d10f      	bne.n	8001ed4 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eb4:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <HAL_TIM_Base_MspInit+0x94>)
 8001eb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001eba:	4a14      	ldr	r2, [pc, #80]	; (8001f0c <HAL_TIM_Base_MspInit+0x94>)
 8001ebc:	f043 0302 	orr.w	r3, r3, #2
 8001ec0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <HAL_TIM_Base_MspInit+0x94>)
 8001ec6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	693b      	ldr	r3, [r7, #16]
}
 8001ed2:	e013      	b.n	8001efc <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM14)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0e      	ldr	r2, [pc, #56]	; (8001f14 <HAL_TIM_Base_MspInit+0x9c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d10e      	bne.n	8001efc <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001ede:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_TIM_Base_MspInit+0x94>)
 8001ee0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ee4:	4a09      	ldr	r2, [pc, #36]	; (8001f0c <HAL_TIM_Base_MspInit+0x94>)
 8001ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001eee:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <HAL_TIM_Base_MspInit+0x94>)
 8001ef0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]
}
 8001efc:	bf00      	nop
 8001efe:	371c      	adds	r7, #28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	40010000 	.word	0x40010000
 8001f0c:	58024400 	.word	0x58024400
 8001f10:	40000400 	.word	0x40000400
 8001f14:	40002000 	.word	0x40002000

08001f18 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	; 0x28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a1a      	ldr	r2, [pc, #104]	; (8001fa0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d12e      	bne.n	8001f98 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001f3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f40:	4a18      	ldr	r2, [pc, #96]	; (8001fa4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001f42:	f043 0304 	orr.w	r3, r3, #4
 8001f46:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f4a:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001f4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f58:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f5e:	4a11      	ldr	r2, [pc, #68]	; (8001fa4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001f60:	f043 0308 	orr.w	r3, r3, #8
 8001f64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f68:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001f76:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f84:	2300      	movs	r3, #0
 8001f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	4619      	mov	r1, r3
 8001f92:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x90>)
 8001f94:	f001 fb7a 	bl	800368c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f98:	bf00      	nop
 8001f9a:	3728      	adds	r7, #40	; 0x28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40000800 	.word	0x40000800
 8001fa4:	58024400 	.word	0x58024400
 8001fa8:	58020c00 	.word	0x58020c00

08001fac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b088      	sub	sp, #32
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 030c 	add.w	r3, r7, #12
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM14)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a13      	ldr	r2, [pc, #76]	; (8002018 <HAL_TIM_MspPostInit+0x6c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d11f      	bne.n	800200e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fce:	4b13      	ldr	r3, [pc, #76]	; (800201c <HAL_TIM_MspPostInit+0x70>)
 8001fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fd4:	4a11      	ldr	r2, [pc, #68]	; (800201c <HAL_TIM_MspPostInit+0x70>)
 8001fd6:	f043 0320 	orr.w	r3, r3, #32
 8001fda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fde:	4b0f      	ldr	r3, [pc, #60]	; (800201c <HAL_TIM_MspPostInit+0x70>)
 8001fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PF9     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ff0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001ffe:	2309      	movs	r3, #9
 8002000:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002002:	f107 030c 	add.w	r3, r7, #12
 8002006:	4619      	mov	r1, r3
 8002008:	4805      	ldr	r0, [pc, #20]	; (8002020 <HAL_TIM_MspPostInit+0x74>)
 800200a:	f001 fb3f 	bl	800368c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800200e:	bf00      	nop
 8002010:	3720      	adds	r7, #32
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40002000 	.word	0x40002000
 800201c:	58024400 	.word	0x58024400
 8002020:	58021400 	.word	0x58021400

08002024 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b0b8      	sub	sp, #224	; 0xe0
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800203c:	f107 0310 	add.w	r3, r7, #16
 8002040:	22bc      	movs	r2, #188	; 0xbc
 8002042:	2100      	movs	r1, #0
 8002044:	4618      	mov	r0, r3
 8002046:	f008 fa7d 	bl	800a544 <memset>
  if(huart->Instance==USART3)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a25      	ldr	r2, [pc, #148]	; (80020e4 <HAL_UART_MspInit+0xc0>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d142      	bne.n	80020da <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002054:	2302      	movs	r3, #2
 8002056:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002058:	2300      	movs	r3, #0
 800205a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800205e:	f107 0310 	add.w	r3, r7, #16
 8002062:	4618      	mov	r0, r3
 8002064:	f003 facc 	bl	8005600 <HAL_RCCEx_PeriphCLKConfig>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800206e:	f7ff fbb7 	bl	80017e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002072:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <HAL_UART_MspInit+0xc4>)
 8002074:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002078:	4a1b      	ldr	r2, [pc, #108]	; (80020e8 <HAL_UART_MspInit+0xc4>)
 800207a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800207e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002082:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <HAL_UART_MspInit+0xc4>)
 8002084:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002090:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <HAL_UART_MspInit+0xc4>)
 8002092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002096:	4a14      	ldr	r2, [pc, #80]	; (80020e8 <HAL_UART_MspInit+0xc4>)
 8002098:	f043 0308 	orr.w	r3, r3, #8
 800209c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <HAL_UART_MspInit+0xc4>)
 80020a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80020ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	2302      	movs	r3, #2
 80020b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c2:	2300      	movs	r3, #0
 80020c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020c8:	2307      	movs	r3, #7
 80020ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ce:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020d2:	4619      	mov	r1, r3
 80020d4:	4805      	ldr	r0, [pc, #20]	; (80020ec <HAL_UART_MspInit+0xc8>)
 80020d6:	f001 fad9 	bl	800368c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020da:	bf00      	nop
 80020dc:	37e0      	adds	r7, #224	; 0xe0
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40004800 	.word	0x40004800
 80020e8:	58024400 	.word	0x58024400
 80020ec:	58020c00 	.word	0x58020c00

080020f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b0b8      	sub	sp, #224	; 0xe0
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002108:	f107 0310 	add.w	r3, r7, #16
 800210c:	22bc      	movs	r2, #188	; 0xbc
 800210e:	2100      	movs	r1, #0
 8002110:	4618      	mov	r0, r3
 8002112:	f008 fa17 	bl	800a544 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a2f      	ldr	r2, [pc, #188]	; (80021d8 <HAL_PCD_MspInit+0xe8>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d156      	bne.n	80021ce <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002120:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002124:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002126:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800212a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800212e:	f107 0310 	add.w	r3, r7, #16
 8002132:	4618      	mov	r0, r3
 8002134:	f003 fa64 	bl	8005600 <HAL_RCCEx_PeriphCLKConfig>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800213e:	f7ff fb4f 	bl	80017e0 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002142:	f002 fa95 	bl	8004670 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002146:	4b25      	ldr	r3, [pc, #148]	; (80021dc <HAL_PCD_MspInit+0xec>)
 8002148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800214c:	4a23      	ldr	r2, [pc, #140]	; (80021dc <HAL_PCD_MspInit+0xec>)
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002156:	4b21      	ldr	r3, [pc, #132]	; (80021dc <HAL_PCD_MspInit+0xec>)
 8002158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002164:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002168:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002178:	2300      	movs	r3, #0
 800217a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800217e:	230a      	movs	r3, #10
 8002180:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002184:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002188:	4619      	mov	r1, r3
 800218a:	4815      	ldr	r0, [pc, #84]	; (80021e0 <HAL_PCD_MspInit+0xf0>)
 800218c:	f001 fa7e 	bl	800368c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002194:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002198:	2300      	movs	r3, #0
 800219a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80021a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021a8:	4619      	mov	r1, r3
 80021aa:	480d      	ldr	r0, [pc, #52]	; (80021e0 <HAL_PCD_MspInit+0xf0>)
 80021ac:	f001 fa6e 	bl	800368c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80021b0:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <HAL_PCD_MspInit+0xec>)
 80021b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021b6:	4a09      	ldr	r2, [pc, #36]	; (80021dc <HAL_PCD_MspInit+0xec>)
 80021b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021bc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_PCD_MspInit+0xec>)
 80021c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80021ce:	bf00      	nop
 80021d0:	37e0      	adds	r7, #224	; 0xe0
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40080000 	.word	0x40080000
 80021dc:	58024400 	.word	0x58024400
 80021e0:	58020000 	.word	0x58020000

080021e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021e8:	e7fe      	b.n	80021e8 <NMI_Handler+0x4>

080021ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ee:	e7fe      	b.n	80021ee <HardFault_Handler+0x4>

080021f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021f4:	e7fe      	b.n	80021f4 <MemManage_Handler+0x4>

080021f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021fa:	e7fe      	b.n	80021fa <BusFault_Handler+0x4>

080021fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002200:	e7fe      	b.n	8002200 <UsageFault_Handler+0x4>

08002202 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002230:	f000 f95c 	bl	80024ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002234:	bf00      	nop
 8002236:	bd80      	pop	{r7, pc}

08002238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002240:	4a14      	ldr	r2, [pc, #80]	; (8002294 <_sbrk+0x5c>)
 8002242:	4b15      	ldr	r3, [pc, #84]	; (8002298 <_sbrk+0x60>)
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800224c:	4b13      	ldr	r3, [pc, #76]	; (800229c <_sbrk+0x64>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d102      	bne.n	800225a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002254:	4b11      	ldr	r3, [pc, #68]	; (800229c <_sbrk+0x64>)
 8002256:	4a12      	ldr	r2, [pc, #72]	; (80022a0 <_sbrk+0x68>)
 8002258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800225a:	4b10      	ldr	r3, [pc, #64]	; (800229c <_sbrk+0x64>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	429a      	cmp	r2, r3
 8002266:	d207      	bcs.n	8002278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002268:	f008 f91a 	bl	800a4a0 <__errno>
 800226c:	4603      	mov	r3, r0
 800226e:	220c      	movs	r2, #12
 8002270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002272:	f04f 33ff 	mov.w	r3, #4294967295
 8002276:	e009      	b.n	800228c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002278:	4b08      	ldr	r3, [pc, #32]	; (800229c <_sbrk+0x64>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <_sbrk+0x64>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	4a05      	ldr	r2, [pc, #20]	; (800229c <_sbrk+0x64>)
 8002288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800228a:	68fb      	ldr	r3, [r7, #12]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	24080000 	.word	0x24080000
 8002298:	00000400 	.word	0x00000400
 800229c:	240004a0 	.word	0x240004a0
 80022a0:	24000b70 	.word	0x24000b70

080022a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80022a8:	4b37      	ldr	r3, [pc, #220]	; (8002388 <SystemInit+0xe4>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ae:	4a36      	ldr	r2, [pc, #216]	; (8002388 <SystemInit+0xe4>)
 80022b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80022b8:	4b34      	ldr	r3, [pc, #208]	; (800238c <SystemInit+0xe8>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 030f 	and.w	r3, r3, #15
 80022c0:	2b06      	cmp	r3, #6
 80022c2:	d807      	bhi.n	80022d4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80022c4:	4b31      	ldr	r3, [pc, #196]	; (800238c <SystemInit+0xe8>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f023 030f 	bic.w	r3, r3, #15
 80022cc:	4a2f      	ldr	r2, [pc, #188]	; (800238c <SystemInit+0xe8>)
 80022ce:	f043 0307 	orr.w	r3, r3, #7
 80022d2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80022d4:	4b2e      	ldr	r3, [pc, #184]	; (8002390 <SystemInit+0xec>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a2d      	ldr	r2, [pc, #180]	; (8002390 <SystemInit+0xec>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80022e0:	4b2b      	ldr	r3, [pc, #172]	; (8002390 <SystemInit+0xec>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80022e6:	4b2a      	ldr	r3, [pc, #168]	; (8002390 <SystemInit+0xec>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	4929      	ldr	r1, [pc, #164]	; (8002390 <SystemInit+0xec>)
 80022ec:	4b29      	ldr	r3, [pc, #164]	; (8002394 <SystemInit+0xf0>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80022f2:	4b26      	ldr	r3, [pc, #152]	; (800238c <SystemInit+0xe8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d007      	beq.n	800230e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80022fe:	4b23      	ldr	r3, [pc, #140]	; (800238c <SystemInit+0xe8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f023 030f 	bic.w	r3, r3, #15
 8002306:	4a21      	ldr	r2, [pc, #132]	; (800238c <SystemInit+0xe8>)
 8002308:	f043 0307 	orr.w	r3, r3, #7
 800230c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800230e:	4b20      	ldr	r3, [pc, #128]	; (8002390 <SystemInit+0xec>)
 8002310:	2200      	movs	r2, #0
 8002312:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002314:	4b1e      	ldr	r3, [pc, #120]	; (8002390 <SystemInit+0xec>)
 8002316:	2200      	movs	r2, #0
 8002318:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800231a:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <SystemInit+0xec>)
 800231c:	2200      	movs	r2, #0
 800231e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002320:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <SystemInit+0xec>)
 8002322:	4a1d      	ldr	r2, [pc, #116]	; (8002398 <SystemInit+0xf4>)
 8002324:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002326:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <SystemInit+0xec>)
 8002328:	4a1c      	ldr	r2, [pc, #112]	; (800239c <SystemInit+0xf8>)
 800232a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800232c:	4b18      	ldr	r3, [pc, #96]	; (8002390 <SystemInit+0xec>)
 800232e:	4a1c      	ldr	r2, [pc, #112]	; (80023a0 <SystemInit+0xfc>)
 8002330:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002332:	4b17      	ldr	r3, [pc, #92]	; (8002390 <SystemInit+0xec>)
 8002334:	2200      	movs	r2, #0
 8002336:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002338:	4b15      	ldr	r3, [pc, #84]	; (8002390 <SystemInit+0xec>)
 800233a:	4a19      	ldr	r2, [pc, #100]	; (80023a0 <SystemInit+0xfc>)
 800233c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800233e:	4b14      	ldr	r3, [pc, #80]	; (8002390 <SystemInit+0xec>)
 8002340:	2200      	movs	r2, #0
 8002342:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002344:	4b12      	ldr	r3, [pc, #72]	; (8002390 <SystemInit+0xec>)
 8002346:	4a16      	ldr	r2, [pc, #88]	; (80023a0 <SystemInit+0xfc>)
 8002348:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800234a:	4b11      	ldr	r3, [pc, #68]	; (8002390 <SystemInit+0xec>)
 800234c:	2200      	movs	r2, #0
 800234e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002350:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <SystemInit+0xec>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0e      	ldr	r2, [pc, #56]	; (8002390 <SystemInit+0xec>)
 8002356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800235a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <SystemInit+0xec>)
 800235e:	2200      	movs	r2, #0
 8002360:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <SystemInit+0x100>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <SystemInit+0x104>)
 8002368:	4013      	ands	r3, r2
 800236a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800236e:	d202      	bcs.n	8002376 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002370:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <SystemInit+0x108>)
 8002372:	2201      	movs	r2, #1
 8002374:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002376:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <SystemInit+0x10c>)
 8002378:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800237c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800237e:	bf00      	nop
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	e000ed00 	.word	0xe000ed00
 800238c:	52002000 	.word	0x52002000
 8002390:	58024400 	.word	0x58024400
 8002394:	eaf6ed7f 	.word	0xeaf6ed7f
 8002398:	02020200 	.word	0x02020200
 800239c:	01ff0000 	.word	0x01ff0000
 80023a0:	01010280 	.word	0x01010280
 80023a4:	5c001000 	.word	0x5c001000
 80023a8:	ffff0000 	.word	0xffff0000
 80023ac:	51008108 	.word	0x51008108
 80023b0:	52004000 	.word	0x52004000

080023b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80023b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80023b8:	f7ff ff74 	bl	80022a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023bc:	480c      	ldr	r0, [pc, #48]	; (80023f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023be:	490d      	ldr	r1, [pc, #52]	; (80023f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023c0:	4a0d      	ldr	r2, [pc, #52]	; (80023f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023c4:	e002      	b.n	80023cc <LoopCopyDataInit>

080023c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ca:	3304      	adds	r3, #4

080023cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d0:	d3f9      	bcc.n	80023c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023d2:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023d4:	4c0a      	ldr	r4, [pc, #40]	; (8002400 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d8:	e001      	b.n	80023de <LoopFillZerobss>

080023da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023dc:	3204      	adds	r2, #4

080023de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e0:	d3fb      	bcc.n	80023da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023e2:	f008 f863 	bl	800a4ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023e6:	f7fe fc6f 	bl	8000cc8 <main>
  bx  lr
 80023ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023ec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80023f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80023f4:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 80023f8:	0800b5b0 	.word	0x0800b5b0
  ldr r2, =_sbss
 80023fc:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8002400:	24000b6c 	.word	0x24000b6c

08002404 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002404:	e7fe      	b.n	8002404 <ADC3_IRQHandler>
	...

08002408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800240e:	2003      	movs	r0, #3
 8002410:	f001 f90a 	bl	8003628 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002414:	f002 ff1e 	bl	8005254 <HAL_RCC_GetSysClockFreq>
 8002418:	4602      	mov	r2, r0
 800241a:	4b15      	ldr	r3, [pc, #84]	; (8002470 <HAL_Init+0x68>)
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	0a1b      	lsrs	r3, r3, #8
 8002420:	f003 030f 	and.w	r3, r3, #15
 8002424:	4913      	ldr	r1, [pc, #76]	; (8002474 <HAL_Init+0x6c>)
 8002426:	5ccb      	ldrb	r3, [r1, r3]
 8002428:	f003 031f 	and.w	r3, r3, #31
 800242c:	fa22 f303 	lsr.w	r3, r2, r3
 8002430:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002432:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <HAL_Init+0x68>)
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	4a0e      	ldr	r2, [pc, #56]	; (8002474 <HAL_Init+0x6c>)
 800243c:	5cd3      	ldrb	r3, [r2, r3]
 800243e:	f003 031f 	and.w	r3, r3, #31
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	fa22 f303 	lsr.w	r3, r2, r3
 8002448:	4a0b      	ldr	r2, [pc, #44]	; (8002478 <HAL_Init+0x70>)
 800244a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800244c:	4a0b      	ldr	r2, [pc, #44]	; (800247c <HAL_Init+0x74>)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002452:	2000      	movs	r0, #0
 8002454:	f000 f814 	bl	8002480 <HAL_InitTick>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e002      	b.n	8002468 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002462:	f7ff fbfd 	bl	8001c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	58024400 	.word	0x58024400
 8002474:	0800b534 	.word	0x0800b534
 8002478:	2400000c 	.word	0x2400000c
 800247c:	24000008 	.word	0x24000008

08002480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002488:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <HAL_InitTick+0x60>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e021      	b.n	80024d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002494:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <HAL_InitTick+0x64>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <HAL_InitTick+0x60>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	4619      	mov	r1, r3
 800249e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024aa:	4618      	mov	r0, r3
 80024ac:	f001 f8e1 	bl	8003672 <HAL_SYSTICK_Config>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e00e      	b.n	80024d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b0f      	cmp	r3, #15
 80024be:	d80a      	bhi.n	80024d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c0:	2200      	movs	r2, #0
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	f04f 30ff 	mov.w	r0, #4294967295
 80024c8:	f001 f8b9 	bl	800363e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024cc:	4a06      	ldr	r2, [pc, #24]	; (80024e8 <HAL_InitTick+0x68>)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	e000      	b.n	80024d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	24000014 	.word	0x24000014
 80024e4:	24000008 	.word	0x24000008
 80024e8:	24000010 	.word	0x24000010

080024ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_IncTick+0x20>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_IncTick+0x24>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	4a04      	ldr	r2, [pc, #16]	; (8002510 <HAL_IncTick+0x24>)
 80024fe:	6013      	str	r3, [r2, #0]
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	24000014 	.word	0x24000014
 8002510:	24000b58 	.word	0x24000b58

08002514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return uwTick;
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <HAL_GetTick+0x14>)
 800251a:	681b      	ldr	r3, [r3, #0]
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	24000b58 	.word	0x24000b58

0800252c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002534:	f7ff ffee 	bl	8002514 <HAL_GetTick>
 8002538:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d005      	beq.n	8002552 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002546:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <HAL_Delay+0x44>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4413      	add	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002552:	bf00      	nop
 8002554:	f7ff ffde 	bl	8002514 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	429a      	cmp	r2, r3
 8002562:	d8f7      	bhi.n	8002554 <HAL_Delay+0x28>
  {
  }
}
 8002564:	bf00      	nop
 8002566:	bf00      	nop
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	24000014 	.word	0x24000014

08002574 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002578:	4b03      	ldr	r3, [pc, #12]	; (8002588 <HAL_GetREVID+0x14>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	0c1b      	lsrs	r3, r3, #16
}
 800257e:	4618      	mov	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	5c001000 	.word	0x5c001000

0800258c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002596:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	43db      	mvns	r3, r3
 800259e:	401a      	ands	r2, r3
 80025a0:	4904      	ldr	r1, [pc, #16]	; (80025b4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	604b      	str	r3, [r1, #4]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	58000400 	.word	0x58000400

080025b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	431a      	orrs	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	609a      	str	r2, [r3, #8]
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	609a      	str	r2, [r3, #8]
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002614:	4618      	mov	r0, r3
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002620:	b480      	push	{r7}
 8002622:	b087      	sub	sp, #28
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
 800262c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	3360      	adds	r3, #96	; 0x60
 8002632:	461a      	mov	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	430b      	orrs	r3, r1
 800264e:	431a      	orrs	r2, r3
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002654:	bf00      	nop
 8002656:	371c      	adds	r7, #28
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f003 031f 	and.w	r3, r3, #31
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	fa01 f303 	lsl.w	r3, r1, r3
 8002680:	431a      	orrs	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	611a      	str	r2, [r3, #16]
}
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002692:	b480      	push	{r7}
 8002694:	b087      	sub	sp, #28
 8002696:	af00      	add	r7, sp, #0
 8002698:	60f8      	str	r0, [r7, #12]
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	3360      	adds	r3, #96	; 0x60
 80026a2:	461a      	mov	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	431a      	orrs	r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	601a      	str	r2, [r3, #0]
  }
}
 80026bc:	bf00      	nop
 80026be:	371c      	adds	r7, #28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	3330      	adds	r3, #48	; 0x30
 80026d8:	461a      	mov	r2, r3
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	0a1b      	lsrs	r3, r3, #8
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	f003 030c 	and.w	r3, r3, #12
 80026e4:	4413      	add	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	f003 031f 	and.w	r3, r3, #31
 80026f2:	211f      	movs	r1, #31
 80026f4:	fa01 f303 	lsl.w	r3, r1, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	401a      	ands	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	0e9b      	lsrs	r3, r3, #26
 8002700:	f003 011f 	and.w	r1, r3, #31
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	f003 031f 	and.w	r3, r3, #31
 800270a:	fa01 f303 	lsl.w	r3, r1, r3
 800270e:	431a      	orrs	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002714:	bf00      	nop
 8002716:	371c      	adds	r7, #28
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	3314      	adds	r3, #20
 8002730:	461a      	mov	r2, r3
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	0e5b      	lsrs	r3, r3, #25
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	4413      	add	r3, r2
 800273e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	0d1b      	lsrs	r3, r3, #20
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	2107      	movs	r1, #7
 800274e:	fa01 f303 	lsl.w	r3, r1, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	401a      	ands	r2, r3
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	0d1b      	lsrs	r3, r3, #20
 800275a:	f003 031f 	and.w	r3, r3, #31
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	fa01 f303 	lsl.w	r3, r1, r3
 8002764:	431a      	orrs	r2, r3
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800276a:	bf00      	nop
 800276c:	371c      	adds	r7, #28
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
	...

08002778 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002790:	43db      	mvns	r3, r3
 8002792:	401a      	ands	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f003 0318 	and.w	r3, r3, #24
 800279a:	4908      	ldr	r1, [pc, #32]	; (80027bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800279c:	40d9      	lsrs	r1, r3
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	400b      	ands	r3, r1
 80027a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027a6:	431a      	orrs	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80027ae:	bf00      	nop
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	000fffff 	.word	0x000fffff

080027c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80027ce:	4013      	ands	r3, r2
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6093      	str	r3, [r2, #8]
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	5fffffc0 	.word	0x5fffffc0

080027e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027f8:	d101      	bne.n	80027fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	4b05      	ldr	r3, [pc, #20]	; (8002830 <LL_ADC_EnableInternalRegulator+0x24>)
 800281a:	4013      	ands	r3, r2
 800281c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	6fffffc0 	.word	0x6fffffc0

08002834 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002844:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002848:	d101      	bne.n	800284e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <LL_ADC_IsEnabled+0x18>
 8002870:	2301      	movs	r3, #1
 8002872:	e000      	b.n	8002876 <LL_ADC_IsEnabled+0x1a>
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b04      	cmp	r3, #4
 8002894:	d101      	bne.n	800289a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d101      	bne.n	80028c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028bc:	2301      	movs	r3, #1
 80028be:	e000      	b.n	80028c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
	...

080028d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028d0:	b590      	push	{r4, r7, lr}
 80028d2:	b089      	sub	sp, #36	; 0x24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80028dc:	2300      	movs	r3, #0
 80028de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e18e      	b.n	8002c08 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d109      	bne.n	800290c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff f9cb 	bl	8001c94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff ff67 	bl	80027e4 <LL_ADC_IsDeepPowerDownEnabled>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d004      	beq.n	8002926 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ff4d 	bl	80027c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff ff82 	bl	8002834 <LL_ADC_IsInternalRegulatorEnabled>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d114      	bne.n	8002960 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff ff66 	bl	800280c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002940:	4b9a      	ldr	r3, [pc, #616]	; (8002bac <HAL_ADC_Init+0x2dc>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	099b      	lsrs	r3, r3, #6
 8002946:	4a9a      	ldr	r2, [pc, #616]	; (8002bb0 <HAL_ADC_Init+0x2e0>)
 8002948:	fba2 2303 	umull	r2, r3, r2, r3
 800294c:	099b      	lsrs	r3, r3, #6
 800294e:	3301      	adds	r3, #1
 8002950:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002952:	e002      	b.n	800295a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	3b01      	subs	r3, #1
 8002958:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1f9      	bne.n	8002954 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ff65 	bl	8002834 <LL_ADC_IsInternalRegulatorEnabled>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10d      	bne.n	800298c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002974:	f043 0210 	orr.w	r2, r3, #16
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002980:	f043 0201 	orr.w	r2, r3, #1
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff ff76 	bl	8002882 <LL_ADC_REG_IsConversionOngoing>
 8002996:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299c:	f003 0310 	and.w	r3, r3, #16
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f040 8128 	bne.w	8002bf6 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f040 8124 	bne.w	8002bf6 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80029b6:	f043 0202 	orr.w	r2, r3, #2
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff ff4a 	bl	800285c <LL_ADC_IsEnabled>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d136      	bne.n	8002a3c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a78      	ldr	r2, [pc, #480]	; (8002bb4 <HAL_ADC_Init+0x2e4>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d004      	beq.n	80029e2 <HAL_ADC_Init+0x112>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a76      	ldr	r2, [pc, #472]	; (8002bb8 <HAL_ADC_Init+0x2e8>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d10e      	bne.n	8002a00 <HAL_ADC_Init+0x130>
 80029e2:	4874      	ldr	r0, [pc, #464]	; (8002bb4 <HAL_ADC_Init+0x2e4>)
 80029e4:	f7ff ff3a 	bl	800285c <LL_ADC_IsEnabled>
 80029e8:	4604      	mov	r4, r0
 80029ea:	4873      	ldr	r0, [pc, #460]	; (8002bb8 <HAL_ADC_Init+0x2e8>)
 80029ec:	f7ff ff36 	bl	800285c <LL_ADC_IsEnabled>
 80029f0:	4603      	mov	r3, r0
 80029f2:	4323      	orrs	r3, r4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	bf0c      	ite	eq
 80029f8:	2301      	moveq	r3, #1
 80029fa:	2300      	movne	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	e008      	b.n	8002a12 <HAL_ADC_Init+0x142>
 8002a00:	486e      	ldr	r0, [pc, #440]	; (8002bbc <HAL_ADC_Init+0x2ec>)
 8002a02:	f7ff ff2b 	bl	800285c <LL_ADC_IsEnabled>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	bf0c      	ite	eq
 8002a0c:	2301      	moveq	r3, #1
 8002a0e:	2300      	movne	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d012      	beq.n	8002a3c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a66      	ldr	r2, [pc, #408]	; (8002bb4 <HAL_ADC_Init+0x2e4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d004      	beq.n	8002a2a <HAL_ADC_Init+0x15a>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a64      	ldr	r2, [pc, #400]	; (8002bb8 <HAL_ADC_Init+0x2e8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d101      	bne.n	8002a2e <HAL_ADC_Init+0x15e>
 8002a2a:	4a65      	ldr	r2, [pc, #404]	; (8002bc0 <HAL_ADC_Init+0x2f0>)
 8002a2c:	e000      	b.n	8002a30 <HAL_ADC_Init+0x160>
 8002a2e:	4a65      	ldr	r2, [pc, #404]	; (8002bc4 <HAL_ADC_Init+0x2f4>)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	4619      	mov	r1, r3
 8002a36:	4610      	mov	r0, r2
 8002a38:	f7ff fdbe 	bl	80025b8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002a3c:	f7ff fd9a 	bl	8002574 <HAL_GetREVID>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d914      	bls.n	8002a74 <HAL_ADC_Init+0x1a4>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	2b10      	cmp	r3, #16
 8002a50:	d110      	bne.n	8002a74 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	7d5b      	ldrb	r3, [r3, #21]
 8002a56:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a5c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002a62:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	7f1b      	ldrb	r3, [r3, #28]
 8002a68:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002a6a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a6c:	f043 030c 	orr.w	r3, r3, #12
 8002a70:	61bb      	str	r3, [r7, #24]
 8002a72:	e00d      	b.n	8002a90 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	7d5b      	ldrb	r3, [r3, #21]
 8002a78:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a7e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002a84:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	7f1b      	ldrb	r3, [r3, #28]
 8002a8a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	7f1b      	ldrb	r3, [r3, #28]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d106      	bne.n	8002aa6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	045b      	lsls	r3, r3, #17
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d009      	beq.n	8002ac2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	4b3f      	ldr	r3, [pc, #252]	; (8002bc8 <HAL_ADC_Init+0x2f8>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	69b9      	ldr	r1, [r7, #24]
 8002ad2:	430b      	orrs	r3, r1
 8002ad4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff fed1 	bl	8002882 <LL_ADC_REG_IsConversionOngoing>
 8002ae0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fede 	bl	80028a8 <LL_ADC_INJ_IsConversionOngoing>
 8002aec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d14a      	bne.n	8002b8a <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d147      	bne.n	8002b8a <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	7d1b      	ldrb	r3, [r3, #20]
 8002afe:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	4b2f      	ldr	r3, [pc, #188]	; (8002bcc <HAL_ADC_Init+0x2fc>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6812      	ldr	r2, [r2, #0]
 8002b16:	69b9      	ldr	r1, [r7, #24]
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d11b      	bne.n	8002b5e <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691a      	ldr	r2, [r3, #16]
 8002b32:	4b27      	ldr	r3, [pc, #156]	; (8002bd0 <HAL_ADC_Init+0x300>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b3a:	3a01      	subs	r2, #1
 8002b3c:	0411      	lsls	r1, r2, #16
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b42:	4311      	orrs	r1, r2
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b48:	4311      	orrs	r1, r2
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0201 	orr.w	r2, r2, #1
 8002b5a:	611a      	str	r2, [r3, #16]
 8002b5c:	e007      	b.n	8002b6e <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0201 	bic.w	r2, r2, #1
 8002b6c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 fb93 	bl	80032b0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d120      	bne.n	8002bd4 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	f023 010f 	bic.w	r1, r3, #15
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	1e5a      	subs	r2, r3, #1
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	631a      	str	r2, [r3, #48]	; 0x30
 8002baa:	e01b      	b.n	8002be4 <HAL_ADC_Init+0x314>
 8002bac:	24000008 	.word	0x24000008
 8002bb0:	053e2d63 	.word	0x053e2d63
 8002bb4:	40022000 	.word	0x40022000
 8002bb8:	40022100 	.word	0x40022100
 8002bbc:	58026000 	.word	0x58026000
 8002bc0:	40022300 	.word	0x40022300
 8002bc4:	58026300 	.word	0x58026300
 8002bc8:	fff0c003 	.word	0xfff0c003
 8002bcc:	ffffbffc 	.word	0xffffbffc
 8002bd0:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 020f 	bic.w	r2, r2, #15
 8002be2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be8:	f023 0303 	bic.w	r3, r3, #3
 8002bec:	f043 0201 	orr.w	r2, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	655a      	str	r2, [r3, #84]	; 0x54
 8002bf4:	e007      	b.n	8002c06 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfa:	f043 0210 	orr.w	r2, r3, #16
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c06:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3724      	adds	r7, #36	; 0x24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd90      	pop	{r4, r7, pc}

08002c10 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c10:	b590      	push	{r4, r7, lr}
 8002c12:	b0a1      	sub	sp, #132	; 0x84
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002c20:	2300      	movs	r3, #0
 8002c22:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	4a9d      	ldr	r2, [pc, #628]	; (8002ea0 <HAL_ADC_ConfigChannel+0x290>)
 8002c2a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d101      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x2a>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e321      	b.n	800327e <HAL_ADC_ConfigChannel+0x66e>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff fe1b 	bl	8002882 <LL_ADC_REG_IsConversionOngoing>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f040 8306 	bne.w	8003260 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d108      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x62>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	0e9b      	lsrs	r3, r3, #26
 8002c66:	f003 031f 	and.w	r3, r3, #31
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	e016      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x90>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c7a:	fa93 f3a3 	rbit	r3, r3
 8002c7e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c82:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002c8a:	2320      	movs	r3, #32
 8002c8c:	e003      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002c8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c90:	fab3 f383 	clz	r3, r3
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6812      	ldr	r2, [r2, #0]
 8002ca4:	69d1      	ldr	r1, [r2, #28]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6812      	ldr	r2, [r2, #0]
 8002caa:	430b      	orrs	r3, r1
 8002cac:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6859      	ldr	r1, [r3, #4]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f7ff fd04 	bl	80026c8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fddc 	bl	8002882 <LL_ADC_REG_IsConversionOngoing>
 8002cca:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff fde9 	bl	80028a8 <LL_ADC_INJ_IsConversionOngoing>
 8002cd6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f040 80b3 	bne.w	8002e46 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ce0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f040 80af 	bne.w	8002e46 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	6819      	ldr	r1, [r3, #0]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	f7ff fd13 	bl	8002720 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002cfa:	4b6a      	ldr	r3, [pc, #424]	; (8002ea4 <HAL_ADC_ConfigChannel+0x294>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002d02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d06:	d10b      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x110>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	695a      	ldr	r2, [r3, #20]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	089b      	lsrs	r3, r3, #2
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	e01d      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x14c>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10b      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x136>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	695a      	ldr	r2, [r3, #20]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	089b      	lsrs	r3, r3, #2
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	e00a      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x14c>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	695a      	ldr	r2, [r3, #20]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	089b      	lsrs	r3, r3, #2
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d027      	beq.n	8002db6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	6919      	ldr	r1, [r3, #16]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d74:	f7ff fc54 	bl	8002620 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6818      	ldr	r0, [r3, #0]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	6919      	ldr	r1, [r3, #16]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	7e5b      	ldrb	r3, [r3, #25]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d102      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x17e>
 8002d88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002d8c:	e000      	b.n	8002d90 <HAL_ADC_ConfigChannel+0x180>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	461a      	mov	r2, r3
 8002d92:	f7ff fc7e 	bl	8002692 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	6919      	ldr	r1, [r3, #16]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	7e1b      	ldrb	r3, [r3, #24]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d102      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x19c>
 8002da6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002daa:	e000      	b.n	8002dae <HAL_ADC_ConfigChannel+0x19e>
 8002dac:	2300      	movs	r3, #0
 8002dae:	461a      	mov	r2, r3
 8002db0:	f7ff fc56 	bl	8002660 <LL_ADC_SetDataRightShift>
 8002db4:	e047      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	069b      	lsls	r3, r3, #26
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d107      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002dd8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002de0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	069b      	lsls	r3, r3, #26
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d107      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002dfc:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	069b      	lsls	r3, r3, #26
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d107      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e20:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	069b      	lsls	r3, r3, #26
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d107      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e44:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff fd06 	bl	800285c <LL_ADC_IsEnabled>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f040 820d 	bne.w	8003272 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6818      	ldr	r0, [r3, #0]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	6819      	ldr	r1, [r3, #0]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	461a      	mov	r2, r3
 8002e66:	f7ff fc87 	bl	8002778 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ea0 <HAL_ADC_ConfigChannel+0x290>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	f040 8133 	bne.w	80030dc <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d110      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x298>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	0e9b      	lsrs	r3, r3, #26
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	f003 031f 	and.w	r3, r3, #31
 8002e92:	2b09      	cmp	r3, #9
 8002e94:	bf94      	ite	ls
 8002e96:	2301      	movls	r3, #1
 8002e98:	2300      	movhi	r3, #0
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	e01e      	b.n	8002edc <HAL_ADC_ConfigChannel+0x2cc>
 8002e9e:	bf00      	nop
 8002ea0:	47ff0000 	.word	0x47ff0000
 8002ea4:	5c001000 	.word	0x5c001000
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eb0:	fa93 f3a3 	rbit	r3, r3
 8002eb4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002eba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002ec0:	2320      	movs	r3, #32
 8002ec2:	e003      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002ec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ec6:	fab3 f383 	clz	r3, r3
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	3301      	adds	r3, #1
 8002ece:	f003 031f 	and.w	r3, r3, #31
 8002ed2:	2b09      	cmp	r3, #9
 8002ed4:	bf94      	ite	ls
 8002ed6:	2301      	movls	r3, #1
 8002ed8:	2300      	movhi	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d079      	beq.n	8002fd4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d107      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x2ec>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	0e9b      	lsrs	r3, r3, #26
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	069b      	lsls	r3, r3, #26
 8002ef6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002efa:	e015      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x318>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f04:	fa93 f3a3 	rbit	r3, r3
 8002f08:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f0c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002f14:	2320      	movs	r3, #32
 8002f16:	e003      	b.n	8002f20 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f1a:	fab3 f383 	clz	r3, r3
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	3301      	adds	r3, #1
 8002f22:	069b      	lsls	r3, r3, #26
 8002f24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d109      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x338>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	0e9b      	lsrs	r3, r3, #26
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	f003 031f 	and.w	r3, r3, #31
 8002f40:	2101      	movs	r1, #1
 8002f42:	fa01 f303 	lsl.w	r3, r1, r3
 8002f46:	e017      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x368>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f50:	fa93 f3a3 	rbit	r3, r3
 8002f54:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f58:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002f60:	2320      	movs	r3, #32
 8002f62:	e003      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f66:	fab3 f383 	clz	r3, r3
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	f003 031f 	and.w	r3, r3, #31
 8002f72:	2101      	movs	r1, #1
 8002f74:	fa01 f303 	lsl.w	r3, r1, r3
 8002f78:	ea42 0103 	orr.w	r1, r2, r3
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10a      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x38e>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	0e9b      	lsrs	r3, r3, #26
 8002f8e:	3301      	adds	r3, #1
 8002f90:	f003 021f 	and.w	r2, r3, #31
 8002f94:	4613      	mov	r3, r2
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	4413      	add	r3, r2
 8002f9a:	051b      	lsls	r3, r3, #20
 8002f9c:	e018      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x3c0>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa6:	fa93 f3a3 	rbit	r3, r3
 8002faa:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002fb6:	2320      	movs	r3, #32
 8002fb8:	e003      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fbc:	fab3 f383 	clz	r3, r3
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	f003 021f 	and.w	r2, r3, #31
 8002fc8:	4613      	mov	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4413      	add	r3, r2
 8002fce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	e07e      	b.n	80030d2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d107      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x3e0>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	0e9b      	lsrs	r3, r3, #26
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	069b      	lsls	r3, r3, #26
 8002fea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fee:	e015      	b.n	800301c <HAL_ADC_ConfigChannel+0x40c>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff8:	fa93 f3a3 	rbit	r3, r3
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003008:	2320      	movs	r3, #32
 800300a:	e003      	b.n	8003014 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800300c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300e:	fab3 f383 	clz	r3, r3
 8003012:	b2db      	uxtb	r3, r3
 8003014:	3301      	adds	r3, #1
 8003016:	069b      	lsls	r3, r3, #26
 8003018:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003024:	2b00      	cmp	r3, #0
 8003026:	d109      	bne.n	800303c <HAL_ADC_ConfigChannel+0x42c>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	0e9b      	lsrs	r3, r3, #26
 800302e:	3301      	adds	r3, #1
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	2101      	movs	r1, #1
 8003036:	fa01 f303 	lsl.w	r3, r1, r3
 800303a:	e017      	b.n	800306c <HAL_ADC_ConfigChannel+0x45c>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	fa93 f3a3 	rbit	r3, r3
 8003048:	61bb      	str	r3, [r7, #24]
  return result;
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003054:	2320      	movs	r3, #32
 8003056:	e003      	b.n	8003060 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	fab3 f383 	clz	r3, r3
 800305e:	b2db      	uxtb	r3, r3
 8003060:	3301      	adds	r3, #1
 8003062:	f003 031f 	and.w	r3, r3, #31
 8003066:	2101      	movs	r1, #1
 8003068:	fa01 f303 	lsl.w	r3, r1, r3
 800306c:	ea42 0103 	orr.w	r1, r2, r3
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10d      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x488>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	0e9b      	lsrs	r3, r3, #26
 8003082:	3301      	adds	r3, #1
 8003084:	f003 021f 	and.w	r2, r3, #31
 8003088:	4613      	mov	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4413      	add	r3, r2
 800308e:	3b1e      	subs	r3, #30
 8003090:	051b      	lsls	r3, r3, #20
 8003092:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003096:	e01b      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x4c0>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	fa93 f3a3 	rbit	r3, r3
 80030a4:	60fb      	str	r3, [r7, #12]
  return result;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80030b0:	2320      	movs	r3, #32
 80030b2:	e003      	b.n	80030bc <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	fab3 f383 	clz	r3, r3
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	3301      	adds	r3, #1
 80030be:	f003 021f 	and.w	r2, r3, #31
 80030c2:	4613      	mov	r3, r2
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	4413      	add	r3, r2
 80030c8:	3b1e      	subs	r3, #30
 80030ca:	051b      	lsls	r3, r3, #20
 80030cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030d0:	430b      	orrs	r3, r1
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	6892      	ldr	r2, [r2, #8]
 80030d6:	4619      	mov	r1, r3
 80030d8:	f7ff fb22 	bl	8002720 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f280 80c6 	bge.w	8003272 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a67      	ldr	r2, [pc, #412]	; (8003288 <HAL_ADC_ConfigChannel+0x678>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d004      	beq.n	80030fa <HAL_ADC_ConfigChannel+0x4ea>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a65      	ldr	r2, [pc, #404]	; (800328c <HAL_ADC_ConfigChannel+0x67c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d101      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x4ee>
 80030fa:	4b65      	ldr	r3, [pc, #404]	; (8003290 <HAL_ADC_ConfigChannel+0x680>)
 80030fc:	e000      	b.n	8003100 <HAL_ADC_ConfigChannel+0x4f0>
 80030fe:	4b65      	ldr	r3, [pc, #404]	; (8003294 <HAL_ADC_ConfigChannel+0x684>)
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fa7f 	bl	8002604 <LL_ADC_GetCommonPathInternalCh>
 8003106:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a5e      	ldr	r2, [pc, #376]	; (8003288 <HAL_ADC_ConfigChannel+0x678>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d004      	beq.n	800311c <HAL_ADC_ConfigChannel+0x50c>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a5d      	ldr	r2, [pc, #372]	; (800328c <HAL_ADC_ConfigChannel+0x67c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d10e      	bne.n	800313a <HAL_ADC_ConfigChannel+0x52a>
 800311c:	485a      	ldr	r0, [pc, #360]	; (8003288 <HAL_ADC_ConfigChannel+0x678>)
 800311e:	f7ff fb9d 	bl	800285c <LL_ADC_IsEnabled>
 8003122:	4604      	mov	r4, r0
 8003124:	4859      	ldr	r0, [pc, #356]	; (800328c <HAL_ADC_ConfigChannel+0x67c>)
 8003126:	f7ff fb99 	bl	800285c <LL_ADC_IsEnabled>
 800312a:	4603      	mov	r3, r0
 800312c:	4323      	orrs	r3, r4
 800312e:	2b00      	cmp	r3, #0
 8003130:	bf0c      	ite	eq
 8003132:	2301      	moveq	r3, #1
 8003134:	2300      	movne	r3, #0
 8003136:	b2db      	uxtb	r3, r3
 8003138:	e008      	b.n	800314c <HAL_ADC_ConfigChannel+0x53c>
 800313a:	4857      	ldr	r0, [pc, #348]	; (8003298 <HAL_ADC_ConfigChannel+0x688>)
 800313c:	f7ff fb8e 	bl	800285c <LL_ADC_IsEnabled>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	bf0c      	ite	eq
 8003146:	2301      	moveq	r3, #1
 8003148:	2300      	movne	r3, #0
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d07d      	beq.n	800324c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a51      	ldr	r2, [pc, #324]	; (800329c <HAL_ADC_ConfigChannel+0x68c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d130      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x5ac>
 800315a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800315c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d12b      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a4b      	ldr	r2, [pc, #300]	; (8003298 <HAL_ADC_ConfigChannel+0x688>)
 800316a:	4293      	cmp	r3, r2
 800316c:	f040 8081 	bne.w	8003272 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a44      	ldr	r2, [pc, #272]	; (8003288 <HAL_ADC_ConfigChannel+0x678>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d004      	beq.n	8003184 <HAL_ADC_ConfigChannel+0x574>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a43      	ldr	r2, [pc, #268]	; (800328c <HAL_ADC_ConfigChannel+0x67c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d101      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x578>
 8003184:	4a42      	ldr	r2, [pc, #264]	; (8003290 <HAL_ADC_ConfigChannel+0x680>)
 8003186:	e000      	b.n	800318a <HAL_ADC_ConfigChannel+0x57a>
 8003188:	4a42      	ldr	r2, [pc, #264]	; (8003294 <HAL_ADC_ConfigChannel+0x684>)
 800318a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800318c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003190:	4619      	mov	r1, r3
 8003192:	4610      	mov	r0, r2
 8003194:	f7ff fa23 	bl	80025de <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003198:	4b41      	ldr	r3, [pc, #260]	; (80032a0 <HAL_ADC_ConfigChannel+0x690>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	099b      	lsrs	r3, r3, #6
 800319e:	4a41      	ldr	r2, [pc, #260]	; (80032a4 <HAL_ADC_ConfigChannel+0x694>)
 80031a0:	fba2 2303 	umull	r2, r3, r2, r3
 80031a4:	099b      	lsrs	r3, r3, #6
 80031a6:	3301      	adds	r3, #1
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80031ac:	e002      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	3b01      	subs	r3, #1
 80031b2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f9      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031ba:	e05a      	b.n	8003272 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a39      	ldr	r2, [pc, #228]	; (80032a8 <HAL_ADC_ConfigChannel+0x698>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d11e      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x5f4>
 80031c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d119      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a30      	ldr	r2, [pc, #192]	; (8003298 <HAL_ADC_ConfigChannel+0x688>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d14b      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a2a      	ldr	r2, [pc, #168]	; (8003288 <HAL_ADC_ConfigChannel+0x678>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d004      	beq.n	80031ee <HAL_ADC_ConfigChannel+0x5de>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a28      	ldr	r2, [pc, #160]	; (800328c <HAL_ADC_ConfigChannel+0x67c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d101      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x5e2>
 80031ee:	4a28      	ldr	r2, [pc, #160]	; (8003290 <HAL_ADC_ConfigChannel+0x680>)
 80031f0:	e000      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x5e4>
 80031f2:	4a28      	ldr	r2, [pc, #160]	; (8003294 <HAL_ADC_ConfigChannel+0x684>)
 80031f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031fa:	4619      	mov	r1, r3
 80031fc:	4610      	mov	r0, r2
 80031fe:	f7ff f9ee 	bl	80025de <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003202:	e036      	b.n	8003272 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a28      	ldr	r2, [pc, #160]	; (80032ac <HAL_ADC_ConfigChannel+0x69c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d131      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x662>
 800320e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003210:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d12c      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a1e      	ldr	r2, [pc, #120]	; (8003298 <HAL_ADC_ConfigChannel+0x688>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d127      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a18      	ldr	r2, [pc, #96]	; (8003288 <HAL_ADC_ConfigChannel+0x678>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d004      	beq.n	8003236 <HAL_ADC_ConfigChannel+0x626>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a16      	ldr	r2, [pc, #88]	; (800328c <HAL_ADC_ConfigChannel+0x67c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d101      	bne.n	800323a <HAL_ADC_ConfigChannel+0x62a>
 8003236:	4a16      	ldr	r2, [pc, #88]	; (8003290 <HAL_ADC_ConfigChannel+0x680>)
 8003238:	e000      	b.n	800323c <HAL_ADC_ConfigChannel+0x62c>
 800323a:	4a16      	ldr	r2, [pc, #88]	; (8003294 <HAL_ADC_ConfigChannel+0x684>)
 800323c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800323e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003242:	4619      	mov	r1, r3
 8003244:	4610      	mov	r0, r2
 8003246:	f7ff f9ca 	bl	80025de <LL_ADC_SetCommonPathInternalCh>
 800324a:	e012      	b.n	8003272 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003250:	f043 0220 	orr.w	r2, r3, #32
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800325e:	e008      	b.n	8003272 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003264:	f043 0220 	orr.w	r2, r3, #32
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800327a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800327e:	4618      	mov	r0, r3
 8003280:	3784      	adds	r7, #132	; 0x84
 8003282:	46bd      	mov	sp, r7
 8003284:	bd90      	pop	{r4, r7, pc}
 8003286:	bf00      	nop
 8003288:	40022000 	.word	0x40022000
 800328c:	40022100 	.word	0x40022100
 8003290:	40022300 	.word	0x40022300
 8003294:	58026300 	.word	0x58026300
 8003298:	58026000 	.word	0x58026000
 800329c:	cb840000 	.word	0xcb840000
 80032a0:	24000008 	.word	0x24000008
 80032a4:	053e2d63 	.word	0x053e2d63
 80032a8:	c7520000 	.word	0xc7520000
 80032ac:	cfb80000 	.word	0xcfb80000

080032b0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a79      	ldr	r2, [pc, #484]	; (80034a4 <ADC_ConfigureBoostMode+0x1f4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d004      	beq.n	80032cc <ADC_ConfigureBoostMode+0x1c>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a78      	ldr	r2, [pc, #480]	; (80034a8 <ADC_ConfigureBoostMode+0x1f8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d109      	bne.n	80032e0 <ADC_ConfigureBoostMode+0x30>
 80032cc:	4b77      	ldr	r3, [pc, #476]	; (80034ac <ADC_ConfigureBoostMode+0x1fc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	bf14      	ite	ne
 80032d8:	2301      	movne	r3, #1
 80032da:	2300      	moveq	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	e008      	b.n	80032f2 <ADC_ConfigureBoostMode+0x42>
 80032e0:	4b73      	ldr	r3, [pc, #460]	; (80034b0 <ADC_ConfigureBoostMode+0x200>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	bf14      	ite	ne
 80032ec:	2301      	movne	r3, #1
 80032ee:	2300      	moveq	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d01c      	beq.n	8003330 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80032f6:	f002 f927 	bl	8005548 <HAL_RCC_GetHCLKFreq>
 80032fa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003304:	d010      	beq.n	8003328 <ADC_ConfigureBoostMode+0x78>
 8003306:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800330a:	d871      	bhi.n	80033f0 <ADC_ConfigureBoostMode+0x140>
 800330c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003310:	d002      	beq.n	8003318 <ADC_ConfigureBoostMode+0x68>
 8003312:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003316:	d16b      	bne.n	80033f0 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	0c1b      	lsrs	r3, r3, #16
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	fbb2 f3f3 	udiv	r3, r2, r3
 8003324:	60fb      	str	r3, [r7, #12]
        break;
 8003326:	e066      	b.n	80033f6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	089b      	lsrs	r3, r3, #2
 800332c:	60fb      	str	r3, [r7, #12]
        break;
 800332e:	e062      	b.n	80033f6 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003330:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003334:	f003 f8a4 	bl	8006480 <HAL_RCCEx_GetPeriphCLKFreq>
 8003338:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003342:	d051      	beq.n	80033e8 <ADC_ConfigureBoostMode+0x138>
 8003344:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003348:	d854      	bhi.n	80033f4 <ADC_ConfigureBoostMode+0x144>
 800334a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800334e:	d047      	beq.n	80033e0 <ADC_ConfigureBoostMode+0x130>
 8003350:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003354:	d84e      	bhi.n	80033f4 <ADC_ConfigureBoostMode+0x144>
 8003356:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800335a:	d03d      	beq.n	80033d8 <ADC_ConfigureBoostMode+0x128>
 800335c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003360:	d848      	bhi.n	80033f4 <ADC_ConfigureBoostMode+0x144>
 8003362:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003366:	d033      	beq.n	80033d0 <ADC_ConfigureBoostMode+0x120>
 8003368:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800336c:	d842      	bhi.n	80033f4 <ADC_ConfigureBoostMode+0x144>
 800336e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003372:	d029      	beq.n	80033c8 <ADC_ConfigureBoostMode+0x118>
 8003374:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003378:	d83c      	bhi.n	80033f4 <ADC_ConfigureBoostMode+0x144>
 800337a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800337e:	d01a      	beq.n	80033b6 <ADC_ConfigureBoostMode+0x106>
 8003380:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003384:	d836      	bhi.n	80033f4 <ADC_ConfigureBoostMode+0x144>
 8003386:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800338a:	d014      	beq.n	80033b6 <ADC_ConfigureBoostMode+0x106>
 800338c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003390:	d830      	bhi.n	80033f4 <ADC_ConfigureBoostMode+0x144>
 8003392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003396:	d00e      	beq.n	80033b6 <ADC_ConfigureBoostMode+0x106>
 8003398:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800339c:	d82a      	bhi.n	80033f4 <ADC_ConfigureBoostMode+0x144>
 800339e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033a2:	d008      	beq.n	80033b6 <ADC_ConfigureBoostMode+0x106>
 80033a4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033a8:	d824      	bhi.n	80033f4 <ADC_ConfigureBoostMode+0x144>
 80033aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033ae:	d002      	beq.n	80033b6 <ADC_ConfigureBoostMode+0x106>
 80033b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033b4:	d11e      	bne.n	80033f4 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	0c9b      	lsrs	r3, r3, #18
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c4:	60fb      	str	r3, [r7, #12]
        break;
 80033c6:	e016      	b.n	80033f6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	091b      	lsrs	r3, r3, #4
 80033cc:	60fb      	str	r3, [r7, #12]
        break;
 80033ce:	e012      	b.n	80033f6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	095b      	lsrs	r3, r3, #5
 80033d4:	60fb      	str	r3, [r7, #12]
        break;
 80033d6:	e00e      	b.n	80033f6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	099b      	lsrs	r3, r3, #6
 80033dc:	60fb      	str	r3, [r7, #12]
        break;
 80033de:	e00a      	b.n	80033f6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	09db      	lsrs	r3, r3, #7
 80033e4:	60fb      	str	r3, [r7, #12]
        break;
 80033e6:	e006      	b.n	80033f6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	0a1b      	lsrs	r3, r3, #8
 80033ec:	60fb      	str	r3, [r7, #12]
        break;
 80033ee:	e002      	b.n	80033f6 <ADC_ConfigureBoostMode+0x146>
        break;
 80033f0:	bf00      	nop
 80033f2:	e000      	b.n	80033f6 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80033f4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80033f6:	f7ff f8bd 	bl	8002574 <HAL_GetREVID>
 80033fa:	4603      	mov	r3, r0
 80033fc:	f241 0203 	movw	r2, #4099	; 0x1003
 8003400:	4293      	cmp	r3, r2
 8003402:	d815      	bhi.n	8003430 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4a2b      	ldr	r2, [pc, #172]	; (80034b4 <ADC_ConfigureBoostMode+0x204>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d908      	bls.n	800341e <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800341a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800341c:	e03e      	b.n	800349c <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800342c:	609a      	str	r2, [r3, #8]
}
 800342e:	e035      	b.n	800349c <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	085b      	lsrs	r3, r3, #1
 8003434:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4a1f      	ldr	r2, [pc, #124]	; (80034b8 <ADC_ConfigureBoostMode+0x208>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d808      	bhi.n	8003450 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800344c:	609a      	str	r2, [r3, #8]
}
 800344e:	e025      	b.n	800349c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4a1a      	ldr	r2, [pc, #104]	; (80034bc <ADC_ConfigureBoostMode+0x20c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d80a      	bhi.n	800346e <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800346a:	609a      	str	r2, [r3, #8]
}
 800346c:	e016      	b.n	800349c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	4a13      	ldr	r2, [pc, #76]	; (80034c0 <ADC_ConfigureBoostMode+0x210>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d80a      	bhi.n	800348c <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003488:	609a      	str	r2, [r3, #8]
}
 800348a:	e007      	b.n	800349c <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800349a:	609a      	str	r2, [r3, #8]
}
 800349c:	bf00      	nop
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40022000 	.word	0x40022000
 80034a8:	40022100 	.word	0x40022100
 80034ac:	40022300 	.word	0x40022300
 80034b0:	58026300 	.word	0x58026300
 80034b4:	01312d00 	.word	0x01312d00
 80034b8:	005f5e10 	.word	0x005f5e10
 80034bc:	00bebc20 	.word	0x00bebc20
 80034c0:	017d7840 	.word	0x017d7840

080034c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <__NVIC_SetPriorityGrouping+0x40>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034e0:	4013      	ands	r3, r2
 80034e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80034ec:	4b06      	ldr	r3, [pc, #24]	; (8003508 <__NVIC_SetPriorityGrouping+0x44>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034f2:	4a04      	ldr	r2, [pc, #16]	; (8003504 <__NVIC_SetPriorityGrouping+0x40>)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	60d3      	str	r3, [r2, #12]
}
 80034f8:	bf00      	nop
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	e000ed00 	.word	0xe000ed00
 8003508:	05fa0000 	.word	0x05fa0000

0800350c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003510:	4b04      	ldr	r3, [pc, #16]	; (8003524 <__NVIC_GetPriorityGrouping+0x18>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	0a1b      	lsrs	r3, r3, #8
 8003516:	f003 0307 	and.w	r3, r3, #7
}
 800351a:	4618      	mov	r0, r3
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	6039      	str	r1, [r7, #0]
 8003532:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003534:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003538:	2b00      	cmp	r3, #0
 800353a:	db0a      	blt.n	8003552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	b2da      	uxtb	r2, r3
 8003540:	490c      	ldr	r1, [pc, #48]	; (8003574 <__NVIC_SetPriority+0x4c>)
 8003542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003546:	0112      	lsls	r2, r2, #4
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	440b      	add	r3, r1
 800354c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003550:	e00a      	b.n	8003568 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	b2da      	uxtb	r2, r3
 8003556:	4908      	ldr	r1, [pc, #32]	; (8003578 <__NVIC_SetPriority+0x50>)
 8003558:	88fb      	ldrh	r3, [r7, #6]
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	3b04      	subs	r3, #4
 8003560:	0112      	lsls	r2, r2, #4
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	440b      	add	r3, r1
 8003566:	761a      	strb	r2, [r3, #24]
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	e000e100 	.word	0xe000e100
 8003578:	e000ed00 	.word	0xe000ed00

0800357c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800357c:	b480      	push	{r7}
 800357e:	b089      	sub	sp, #36	; 0x24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f1c3 0307 	rsb	r3, r3, #7
 8003596:	2b04      	cmp	r3, #4
 8003598:	bf28      	it	cs
 800359a:	2304      	movcs	r3, #4
 800359c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	3304      	adds	r3, #4
 80035a2:	2b06      	cmp	r3, #6
 80035a4:	d902      	bls.n	80035ac <NVIC_EncodePriority+0x30>
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	3b03      	subs	r3, #3
 80035aa:	e000      	b.n	80035ae <NVIC_EncodePriority+0x32>
 80035ac:	2300      	movs	r3, #0
 80035ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b0:	f04f 32ff 	mov.w	r2, #4294967295
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	43da      	mvns	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	401a      	ands	r2, r3
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c4:	f04f 31ff 	mov.w	r1, #4294967295
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	fa01 f303 	lsl.w	r3, r1, r3
 80035ce:	43d9      	mvns	r1, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d4:	4313      	orrs	r3, r2
         );
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3724      	adds	r7, #36	; 0x24
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
	...

080035e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035f4:	d301      	bcc.n	80035fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035f6:	2301      	movs	r3, #1
 80035f8:	e00f      	b.n	800361a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035fa:	4a0a      	ldr	r2, [pc, #40]	; (8003624 <SysTick_Config+0x40>)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3b01      	subs	r3, #1
 8003600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003602:	210f      	movs	r1, #15
 8003604:	f04f 30ff 	mov.w	r0, #4294967295
 8003608:	f7ff ff8e 	bl	8003528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800360c:	4b05      	ldr	r3, [pc, #20]	; (8003624 <SysTick_Config+0x40>)
 800360e:	2200      	movs	r2, #0
 8003610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003612:	4b04      	ldr	r3, [pc, #16]	; (8003624 <SysTick_Config+0x40>)
 8003614:	2207      	movs	r2, #7
 8003616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	e000e010 	.word	0xe000e010

08003628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7ff ff47 	bl	80034c4 <__NVIC_SetPriorityGrouping>
}
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b086      	sub	sp, #24
 8003642:	af00      	add	r7, sp, #0
 8003644:	4603      	mov	r3, r0
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	607a      	str	r2, [r7, #4]
 800364a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800364c:	f7ff ff5e 	bl	800350c <__NVIC_GetPriorityGrouping>
 8003650:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68b9      	ldr	r1, [r7, #8]
 8003656:	6978      	ldr	r0, [r7, #20]
 8003658:	f7ff ff90 	bl	800357c <NVIC_EncodePriority>
 800365c:	4602      	mov	r2, r0
 800365e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003662:	4611      	mov	r1, r2
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff ff5f 	bl	8003528 <__NVIC_SetPriority>
}
 800366a:	bf00      	nop
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7ff ffb2 	bl	80035e4 <SysTick_Config>
 8003680:	4603      	mov	r3, r0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800368c:	b480      	push	{r7}
 800368e:	b089      	sub	sp, #36	; 0x24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003696:	2300      	movs	r3, #0
 8003698:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800369a:	4b89      	ldr	r3, [pc, #548]	; (80038c0 <HAL_GPIO_Init+0x234>)
 800369c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800369e:	e194      	b.n	80039ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	2101      	movs	r1, #1
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	fa01 f303 	lsl.w	r3, r1, r3
 80036ac:	4013      	ands	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 8186 	beq.w	80039c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 0303 	and.w	r3, r3, #3
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d005      	beq.n	80036d0 <HAL_GPIO_Init+0x44>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d130      	bne.n	8003732 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	2203      	movs	r2, #3
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4013      	ands	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003706:	2201      	movs	r2, #1
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	43db      	mvns	r3, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4013      	ands	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	f003 0201 	and.w	r2, r3, #1
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4313      	orrs	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	2b03      	cmp	r3, #3
 800373c:	d017      	beq.n	800376e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	2203      	movs	r2, #3
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	43db      	mvns	r3, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4013      	ands	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4313      	orrs	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d123      	bne.n	80037c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	08da      	lsrs	r2, r3, #3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3208      	adds	r2, #8
 8003782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003786:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	220f      	movs	r2, #15
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43db      	mvns	r3, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4013      	ands	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	691a      	ldr	r2, [r3, #16]
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	08da      	lsrs	r2, r3, #3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3208      	adds	r2, #8
 80037bc:	69b9      	ldr	r1, [r7, #24]
 80037be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	2203      	movs	r2, #3
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	43db      	mvns	r3, r3
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4013      	ands	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f003 0203 	and.w	r2, r3, #3
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 80e0 	beq.w	80039c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003804:	4b2f      	ldr	r3, [pc, #188]	; (80038c4 <HAL_GPIO_Init+0x238>)
 8003806:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800380a:	4a2e      	ldr	r2, [pc, #184]	; (80038c4 <HAL_GPIO_Init+0x238>)
 800380c:	f043 0302 	orr.w	r3, r3, #2
 8003810:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003814:	4b2b      	ldr	r3, [pc, #172]	; (80038c4 <HAL_GPIO_Init+0x238>)
 8003816:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003822:	4a29      	ldr	r2, [pc, #164]	; (80038c8 <HAL_GPIO_Init+0x23c>)
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	089b      	lsrs	r3, r3, #2
 8003828:	3302      	adds	r3, #2
 800382a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	220f      	movs	r2, #15
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43db      	mvns	r3, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4013      	ands	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a20      	ldr	r2, [pc, #128]	; (80038cc <HAL_GPIO_Init+0x240>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d052      	beq.n	80038f4 <HAL_GPIO_Init+0x268>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a1f      	ldr	r2, [pc, #124]	; (80038d0 <HAL_GPIO_Init+0x244>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d031      	beq.n	80038ba <HAL_GPIO_Init+0x22e>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a1e      	ldr	r2, [pc, #120]	; (80038d4 <HAL_GPIO_Init+0x248>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d02b      	beq.n	80038b6 <HAL_GPIO_Init+0x22a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a1d      	ldr	r2, [pc, #116]	; (80038d8 <HAL_GPIO_Init+0x24c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d025      	beq.n	80038b2 <HAL_GPIO_Init+0x226>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a1c      	ldr	r2, [pc, #112]	; (80038dc <HAL_GPIO_Init+0x250>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d01f      	beq.n	80038ae <HAL_GPIO_Init+0x222>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a1b      	ldr	r2, [pc, #108]	; (80038e0 <HAL_GPIO_Init+0x254>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d019      	beq.n	80038aa <HAL_GPIO_Init+0x21e>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a1a      	ldr	r2, [pc, #104]	; (80038e4 <HAL_GPIO_Init+0x258>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d013      	beq.n	80038a6 <HAL_GPIO_Init+0x21a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a19      	ldr	r2, [pc, #100]	; (80038e8 <HAL_GPIO_Init+0x25c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00d      	beq.n	80038a2 <HAL_GPIO_Init+0x216>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a18      	ldr	r2, [pc, #96]	; (80038ec <HAL_GPIO_Init+0x260>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d007      	beq.n	800389e <HAL_GPIO_Init+0x212>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a17      	ldr	r2, [pc, #92]	; (80038f0 <HAL_GPIO_Init+0x264>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d101      	bne.n	800389a <HAL_GPIO_Init+0x20e>
 8003896:	2309      	movs	r3, #9
 8003898:	e02d      	b.n	80038f6 <HAL_GPIO_Init+0x26a>
 800389a:	230a      	movs	r3, #10
 800389c:	e02b      	b.n	80038f6 <HAL_GPIO_Init+0x26a>
 800389e:	2308      	movs	r3, #8
 80038a0:	e029      	b.n	80038f6 <HAL_GPIO_Init+0x26a>
 80038a2:	2307      	movs	r3, #7
 80038a4:	e027      	b.n	80038f6 <HAL_GPIO_Init+0x26a>
 80038a6:	2306      	movs	r3, #6
 80038a8:	e025      	b.n	80038f6 <HAL_GPIO_Init+0x26a>
 80038aa:	2305      	movs	r3, #5
 80038ac:	e023      	b.n	80038f6 <HAL_GPIO_Init+0x26a>
 80038ae:	2304      	movs	r3, #4
 80038b0:	e021      	b.n	80038f6 <HAL_GPIO_Init+0x26a>
 80038b2:	2303      	movs	r3, #3
 80038b4:	e01f      	b.n	80038f6 <HAL_GPIO_Init+0x26a>
 80038b6:	2302      	movs	r3, #2
 80038b8:	e01d      	b.n	80038f6 <HAL_GPIO_Init+0x26a>
 80038ba:	2301      	movs	r3, #1
 80038bc:	e01b      	b.n	80038f6 <HAL_GPIO_Init+0x26a>
 80038be:	bf00      	nop
 80038c0:	58000080 	.word	0x58000080
 80038c4:	58024400 	.word	0x58024400
 80038c8:	58000400 	.word	0x58000400
 80038cc:	58020000 	.word	0x58020000
 80038d0:	58020400 	.word	0x58020400
 80038d4:	58020800 	.word	0x58020800
 80038d8:	58020c00 	.word	0x58020c00
 80038dc:	58021000 	.word	0x58021000
 80038e0:	58021400 	.word	0x58021400
 80038e4:	58021800 	.word	0x58021800
 80038e8:	58021c00 	.word	0x58021c00
 80038ec:	58022000 	.word	0x58022000
 80038f0:	58022400 	.word	0x58022400
 80038f4:	2300      	movs	r3, #0
 80038f6:	69fa      	ldr	r2, [r7, #28]
 80038f8:	f002 0203 	and.w	r2, r2, #3
 80038fc:	0092      	lsls	r2, r2, #2
 80038fe:	4093      	lsls	r3, r2
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4313      	orrs	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003906:	4938      	ldr	r1, [pc, #224]	; (80039e8 <HAL_GPIO_Init+0x35c>)
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	089b      	lsrs	r3, r3, #2
 800390c:	3302      	adds	r3, #2
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	43db      	mvns	r3, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4013      	ands	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800393a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	43db      	mvns	r3, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4013      	ands	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003968:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	43db      	mvns	r3, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4013      	ands	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	43db      	mvns	r3, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4013      	ands	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	3301      	adds	r3, #1
 80039c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f47f ae63 	bne.w	80036a0 <HAL_GPIO_Init+0x14>
  }
}
 80039da:	bf00      	nop
 80039dc:	bf00      	nop
 80039de:	3724      	adds	r7, #36	; 0x24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	58000400 	.word	0x58000400

080039ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	887b      	ldrh	r3, [r7, #2]
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a04:	2301      	movs	r3, #1
 8003a06:	73fb      	strb	r3, [r7, #15]
 8003a08:	e001      	b.n	8003a0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	807b      	strh	r3, [r7, #2]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a2c:	787b      	ldrb	r3, [r7, #1]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a32:	887a      	ldrh	r2, [r7, #2]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003a38:	e003      	b.n	8003a42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003a3a:	887b      	ldrh	r3, [r7, #2]
 8003a3c:	041a      	lsls	r2, r3, #16
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	619a      	str	r2, [r3, #24]
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
	...

08003a50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e07f      	b.n	8003b62 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d106      	bne.n	8003a7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7fe f998 	bl	8001dac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2224      	movs	r2, #36	; 0x24
 8003a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0201 	bic.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003aa0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ab0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d107      	bne.n	8003aca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ac6:	609a      	str	r2, [r3, #8]
 8003ac8:	e006      	b.n	8003ad8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003ad6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d104      	bne.n	8003aea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ae8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6859      	ldr	r1, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	4b1d      	ldr	r3, [pc, #116]	; (8003b6c <HAL_I2C_Init+0x11c>)
 8003af6:	430b      	orrs	r3, r1
 8003af8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691a      	ldr	r2, [r3, #16]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69d9      	ldr	r1, [r3, #28]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a1a      	ldr	r2, [r3, #32]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	02008000 	.word	0x02008000

08003b70 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	4608      	mov	r0, r1
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	4603      	mov	r3, r0
 8003b80:	817b      	strh	r3, [r7, #10]
 8003b82:	460b      	mov	r3, r1
 8003b84:	813b      	strh	r3, [r7, #8]
 8003b86:	4613      	mov	r3, r2
 8003b88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b20      	cmp	r3, #32
 8003b94:	f040 80f9 	bne.w	8003d8a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <HAL_I2C_Mem_Write+0x34>
 8003b9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d105      	bne.n	8003bb0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003baa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0ed      	b.n	8003d8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <HAL_I2C_Mem_Write+0x4e>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e0e6      	b.n	8003d8c <HAL_I2C_Mem_Write+0x21c>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bc6:	f7fe fca5 	bl	8002514 <HAL_GetTick>
 8003bca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	2319      	movs	r3, #25
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 f955 	bl	8003e88 <I2C_WaitOnFlagUntilTimeout>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0d1      	b.n	8003d8c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2221      	movs	r2, #33	; 0x21
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2240      	movs	r2, #64	; 0x40
 8003bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a3a      	ldr	r2, [r7, #32]
 8003c02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c10:	88f8      	ldrh	r0, [r7, #6]
 8003c12:	893a      	ldrh	r2, [r7, #8]
 8003c14:	8979      	ldrh	r1, [r7, #10]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	9301      	str	r3, [sp, #4]
 8003c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	4603      	mov	r3, r0
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 f8b9 	bl	8003d98 <I2C_RequestMemoryWrite>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d005      	beq.n	8003c38 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e0a9      	b.n	8003d8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	2bff      	cmp	r3, #255	; 0xff
 8003c40:	d90e      	bls.n	8003c60 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	22ff      	movs	r2, #255	; 0xff
 8003c46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	8979      	ldrh	r1, [r7, #10]
 8003c50:	2300      	movs	r3, #0
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 fabd 	bl	80041d8 <I2C_TransferConfig>
 8003c5e:	e00f      	b.n	8003c80 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	8979      	ldrh	r1, [r7, #10]
 8003c72:	2300      	movs	r3, #0
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 faac 	bl	80041d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f000 f93f 	bl	8003f08 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e07b      	b.n	8003d8c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	781a      	ldrb	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d034      	beq.n	8003d38 <HAL_I2C_Mem_Write+0x1c8>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d130      	bne.n	8003d38 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2180      	movs	r1, #128	; 0x80
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 f8d1 	bl	8003e88 <I2C_WaitOnFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e04d      	b.n	8003d8c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2bff      	cmp	r3, #255	; 0xff
 8003cf8:	d90e      	bls.n	8003d18 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	22ff      	movs	r2, #255	; 0xff
 8003cfe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	8979      	ldrh	r1, [r7, #10]
 8003d08:	2300      	movs	r3, #0
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 fa61 	bl	80041d8 <I2C_TransferConfig>
 8003d16:	e00f      	b.n	8003d38 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	8979      	ldrh	r1, [r7, #10]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 fa50 	bl	80041d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d19e      	bne.n	8003c80 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 f91e 	bl	8003f88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e01a      	b.n	8003d8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6859      	ldr	r1, [r3, #4]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	4b0a      	ldr	r3, [pc, #40]	; (8003d94 <HAL_I2C_Mem_Write+0x224>)
 8003d6a:	400b      	ands	r3, r1
 8003d6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d86:	2300      	movs	r3, #0
 8003d88:	e000      	b.n	8003d8c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003d8a:	2302      	movs	r3, #2
  }
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	fe00e800 	.word	0xfe00e800

08003d98 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af02      	add	r7, sp, #8
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	4608      	mov	r0, r1
 8003da2:	4611      	mov	r1, r2
 8003da4:	461a      	mov	r2, r3
 8003da6:	4603      	mov	r3, r0
 8003da8:	817b      	strh	r3, [r7, #10]
 8003daa:	460b      	mov	r3, r1
 8003dac:	813b      	strh	r3, [r7, #8]
 8003dae:	4613      	mov	r3, r2
 8003db0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003db2:	88fb      	ldrh	r3, [r7, #6]
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	8979      	ldrh	r1, [r7, #10]
 8003db8:	4b20      	ldr	r3, [pc, #128]	; (8003e3c <I2C_RequestMemoryWrite+0xa4>)
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 fa09 	bl	80041d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	69b9      	ldr	r1, [r7, #24]
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 f89c 	bl	8003f08 <I2C_WaitOnTXISFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e02c      	b.n	8003e34 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dda:	88fb      	ldrh	r3, [r7, #6]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d105      	bne.n	8003dec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003de0:	893b      	ldrh	r3, [r7, #8]
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	629a      	str	r2, [r3, #40]	; 0x28
 8003dea:	e015      	b.n	8003e18 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003dec:	893b      	ldrh	r3, [r7, #8]
 8003dee:	0a1b      	lsrs	r3, r3, #8
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	69b9      	ldr	r1, [r7, #24]
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 f882 	bl	8003f08 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e012      	b.n	8003e34 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e0e:	893b      	ldrh	r3, [r7, #8]
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	2180      	movs	r1, #128	; 0x80
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 f830 	bl	8003e88 <I2C_WaitOnFlagUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e000      	b.n	8003e34 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	80002000 	.word	0x80002000

08003e40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d103      	bne.n	8003e5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d007      	beq.n	8003e7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699a      	ldr	r2, [r3, #24]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	619a      	str	r2, [r3, #24]
  }
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	603b      	str	r3, [r7, #0]
 8003e94:	4613      	mov	r3, r2
 8003e96:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e98:	e022      	b.n	8003ee0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea0:	d01e      	beq.n	8003ee0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea2:	f7fe fb37 	bl	8002514 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d302      	bcc.n	8003eb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d113      	bne.n	8003ee0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebc:	f043 0220 	orr.w	r2, r3, #32
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e00f      	b.n	8003f00 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	699a      	ldr	r2, [r3, #24]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	bf0c      	ite	eq
 8003ef0:	2301      	moveq	r3, #1
 8003ef2:	2300      	movne	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	79fb      	ldrb	r3, [r7, #7]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d0cd      	beq.n	8003e9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f14:	e02c      	b.n	8003f70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	68b9      	ldr	r1, [r7, #8]
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f870 	bl	8004000 <I2C_IsErrorOccurred>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e02a      	b.n	8003f80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f30:	d01e      	beq.n	8003f70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f32:	f7fe faef 	bl	8002514 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d302      	bcc.n	8003f48 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d113      	bne.n	8003f70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4c:	f043 0220 	orr.w	r2, r3, #32
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e007      	b.n	8003f80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d1cb      	bne.n	8003f16 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f94:	e028      	b.n	8003fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	68b9      	ldr	r1, [r7, #8]
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f830 	bl	8004000 <I2C_IsErrorOccurred>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e026      	b.n	8003ff8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003faa:	f7fe fab3 	bl	8002514 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d302      	bcc.n	8003fc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d113      	bne.n	8003fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc4:	f043 0220 	orr.w	r2, r3, #32
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e007      	b.n	8003ff8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	f003 0320 	and.w	r3, r3, #32
 8003ff2:	2b20      	cmp	r3, #32
 8003ff4:	d1cf      	bne.n	8003f96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b08a      	sub	sp, #40	; 0x28
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800401a:	2300      	movs	r3, #0
 800401c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	f003 0310 	and.w	r3, r3, #16
 8004028:	2b00      	cmp	r3, #0
 800402a:	d075      	beq.n	8004118 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2210      	movs	r2, #16
 8004032:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004034:	e056      	b.n	80040e4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403c:	d052      	beq.n	80040e4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800403e:	f7fe fa69 	bl	8002514 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	429a      	cmp	r2, r3
 800404c:	d302      	bcc.n	8004054 <I2C_IsErrorOccurred+0x54>
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d147      	bne.n	80040e4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800405e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004066:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004072:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004076:	d12e      	bne.n	80040d6 <I2C_IsErrorOccurred+0xd6>
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800407e:	d02a      	beq.n	80040d6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004080:	7cfb      	ldrb	r3, [r7, #19]
 8004082:	2b20      	cmp	r3, #32
 8004084:	d027      	beq.n	80040d6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004094:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004096:	f7fe fa3d 	bl	8002514 <HAL_GetTick>
 800409a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800409c:	e01b      	b.n	80040d6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800409e:	f7fe fa39 	bl	8002514 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b19      	cmp	r3, #25
 80040aa:	d914      	bls.n	80040d6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b0:	f043 0220 	orr.w	r2, r3, #32
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	f003 0320 	and.w	r3, r3, #32
 80040e0:	2b20      	cmp	r3, #32
 80040e2:	d1dc      	bne.n	800409e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	f003 0320 	and.w	r3, r3, #32
 80040ee:	2b20      	cmp	r3, #32
 80040f0:	d003      	beq.n	80040fa <I2C_IsErrorOccurred+0xfa>
 80040f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d09d      	beq.n	8004036 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80040fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d103      	bne.n	800410a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2220      	movs	r2, #32
 8004108:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	f043 0304 	orr.w	r3, r3, #4
 8004110:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00b      	beq.n	8004142 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	f043 0301 	orr.w	r3, r3, #1
 8004130:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f44f 7280 	mov.w	r2, #256	; 0x100
 800413a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00b      	beq.n	8004164 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	f043 0308 	orr.w	r3, r3, #8
 8004152:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800415c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00b      	beq.n	8004186 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	f043 0302 	orr.w	r3, r3, #2
 8004174:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800417e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004186:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800418a:	2b00      	cmp	r3, #0
 800418c:	d01c      	beq.n	80041c8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f7ff fe56 	bl	8003e40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6859      	ldr	r1, [r3, #4]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	4b0d      	ldr	r3, [pc, #52]	; (80041d4 <I2C_IsErrorOccurred+0x1d4>)
 80041a0:	400b      	ands	r3, r1
 80041a2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	431a      	orrs	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80041c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3728      	adds	r7, #40	; 0x28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	fe00e800 	.word	0xfe00e800

080041d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	607b      	str	r3, [r7, #4]
 80041e2:	460b      	mov	r3, r1
 80041e4:	817b      	strh	r3, [r7, #10]
 80041e6:	4613      	mov	r3, r2
 80041e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041ea:	897b      	ldrh	r3, [r7, #10]
 80041ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041f0:	7a7b      	ldrb	r3, [r7, #9]
 80041f2:	041b      	lsls	r3, r3, #16
 80041f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041f8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	4313      	orrs	r3, r2
 8004202:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004206:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	6a3b      	ldr	r3, [r7, #32]
 8004210:	0d5b      	lsrs	r3, r3, #21
 8004212:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004216:	4b08      	ldr	r3, [pc, #32]	; (8004238 <I2C_TransferConfig+0x60>)
 8004218:	430b      	orrs	r3, r1
 800421a:	43db      	mvns	r3, r3
 800421c:	ea02 0103 	and.w	r1, r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	430a      	orrs	r2, r1
 8004228:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800422a:	bf00      	nop
 800422c:	371c      	adds	r7, #28
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	03ff63ff 	.word	0x03ff63ff

0800423c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b20      	cmp	r3, #32
 8004250:	d138      	bne.n	80042c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004258:	2b01      	cmp	r3, #1
 800425a:	d101      	bne.n	8004260 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800425c:	2302      	movs	r3, #2
 800425e:	e032      	b.n	80042c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2224      	movs	r2, #36	; 0x24
 800426c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0201 	bic.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800428e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6819      	ldr	r1, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	e000      	b.n	80042c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042c4:	2302      	movs	r3, #2
  }
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b085      	sub	sp, #20
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b20      	cmp	r3, #32
 80042e6:	d139      	bne.n	800435c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d101      	bne.n	80042f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80042f2:	2302      	movs	r3, #2
 80042f4:	e033      	b.n	800435e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2224      	movs	r2, #36	; 0x24
 8004302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0201 	bic.w	r2, r2, #1
 8004314:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004324:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	021b      	lsls	r3, r3, #8
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	4313      	orrs	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2220      	movs	r2, #32
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	e000      	b.n	800435e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800435c:	2302      	movs	r3, #2
  }
}
 800435e:	4618      	mov	r0, r3
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800436a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800436c:	b08f      	sub	sp, #60	; 0x3c
 800436e:	af0a      	add	r7, sp, #40	; 0x28
 8004370:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e116      	b.n	80045aa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d106      	bne.n	800439c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fd feaa 	bl	80020f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2203      	movs	r2, #3
 80043a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d102      	bne.n	80043b6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f005 fdda 	bl	8009f74 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	603b      	str	r3, [r7, #0]
 80043c6:	687e      	ldr	r6, [r7, #4]
 80043c8:	466d      	mov	r5, sp
 80043ca:	f106 0410 	add.w	r4, r6, #16
 80043ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043da:	e885 0003 	stmia.w	r5, {r0, r1}
 80043de:	1d33      	adds	r3, r6, #4
 80043e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043e2:	6838      	ldr	r0, [r7, #0]
 80043e4:	f005 fd58 	bl	8009e98 <USB_CoreInit>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2202      	movs	r2, #2
 80043f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e0d7      	b.n	80045aa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2100      	movs	r1, #0
 8004400:	4618      	mov	r0, r3
 8004402:	f005 fdc8 	bl	8009f96 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004406:	2300      	movs	r3, #0
 8004408:	73fb      	strb	r3, [r7, #15]
 800440a:	e04a      	b.n	80044a2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800440c:	7bfa      	ldrb	r2, [r7, #15]
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	4613      	mov	r3, r2
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	1a9b      	subs	r3, r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	333d      	adds	r3, #61	; 0x3d
 800441c:	2201      	movs	r2, #1
 800441e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004420:	7bfa      	ldrb	r2, [r7, #15]
 8004422:	6879      	ldr	r1, [r7, #4]
 8004424:	4613      	mov	r3, r2
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	1a9b      	subs	r3, r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	333c      	adds	r3, #60	; 0x3c
 8004430:	7bfa      	ldrb	r2, [r7, #15]
 8004432:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004434:	7bfa      	ldrb	r2, [r7, #15]
 8004436:	7bfb      	ldrb	r3, [r7, #15]
 8004438:	b298      	uxth	r0, r3
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	4613      	mov	r3, r2
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	1a9b      	subs	r3, r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	3342      	adds	r3, #66	; 0x42
 8004448:	4602      	mov	r2, r0
 800444a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800444c:	7bfa      	ldrb	r2, [r7, #15]
 800444e:	6879      	ldr	r1, [r7, #4]
 8004450:	4613      	mov	r3, r2
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	1a9b      	subs	r3, r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	440b      	add	r3, r1
 800445a:	333f      	adds	r3, #63	; 0x3f
 800445c:	2200      	movs	r2, #0
 800445e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004460:	7bfa      	ldrb	r2, [r7, #15]
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	4613      	mov	r3, r2
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	1a9b      	subs	r3, r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	3344      	adds	r3, #68	; 0x44
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004474:	7bfa      	ldrb	r2, [r7, #15]
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	4613      	mov	r3, r2
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	3348      	adds	r3, #72	; 0x48
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004488:	7bfa      	ldrb	r2, [r7, #15]
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	4613      	mov	r3, r2
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	1a9b      	subs	r3, r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	3350      	adds	r3, #80	; 0x50
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800449c:	7bfb      	ldrb	r3, [r7, #15]
 800449e:	3301      	adds	r3, #1
 80044a0:	73fb      	strb	r3, [r7, #15]
 80044a2:	7bfa      	ldrb	r2, [r7, #15]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d3af      	bcc.n	800440c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044ac:	2300      	movs	r3, #0
 80044ae:	73fb      	strb	r3, [r7, #15]
 80044b0:	e044      	b.n	800453c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80044b2:	7bfa      	ldrb	r2, [r7, #15]
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	4613      	mov	r3, r2
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	1a9b      	subs	r3, r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	440b      	add	r3, r1
 80044c0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80044c4:	2200      	movs	r2, #0
 80044c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80044c8:	7bfa      	ldrb	r2, [r7, #15]
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	4613      	mov	r3, r2
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	1a9b      	subs	r3, r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	440b      	add	r3, r1
 80044d6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80044da:	7bfa      	ldrb	r2, [r7, #15]
 80044dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80044de:	7bfa      	ldrb	r2, [r7, #15]
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	4613      	mov	r3, r2
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	1a9b      	subs	r3, r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	440b      	add	r3, r1
 80044ec:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80044f0:	2200      	movs	r2, #0
 80044f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80044f4:	7bfa      	ldrb	r2, [r7, #15]
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	4613      	mov	r3, r2
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	1a9b      	subs	r3, r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	440b      	add	r3, r1
 8004502:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004506:	2200      	movs	r2, #0
 8004508:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800450a:	7bfa      	ldrb	r2, [r7, #15]
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	4613      	mov	r3, r2
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	1a9b      	subs	r3, r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	440b      	add	r3, r1
 8004518:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004520:	7bfa      	ldrb	r2, [r7, #15]
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	4613      	mov	r3, r2
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	1a9b      	subs	r3, r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	440b      	add	r3, r1
 800452e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004532:	2200      	movs	r2, #0
 8004534:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004536:	7bfb      	ldrb	r3, [r7, #15]
 8004538:	3301      	adds	r3, #1
 800453a:	73fb      	strb	r3, [r7, #15]
 800453c:	7bfa      	ldrb	r2, [r7, #15]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	429a      	cmp	r2, r3
 8004544:	d3b5      	bcc.n	80044b2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	687e      	ldr	r6, [r7, #4]
 800454e:	466d      	mov	r5, sp
 8004550:	f106 0410 	add.w	r4, r6, #16
 8004554:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004556:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004558:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800455a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800455c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004560:	e885 0003 	stmia.w	r5, {r0, r1}
 8004564:	1d33      	adds	r3, r6, #4
 8004566:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004568:	6838      	ldr	r0, [r7, #0]
 800456a:	f005 fd61 	bl	800a030 <USB_DevInit>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d005      	beq.n	8004580 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e014      	b.n	80045aa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	2b01      	cmp	r3, #1
 8004596:	d102      	bne.n	800459e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f80b 	bl	80045b4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f005 ff1b 	bl	800a3de <USB_DevDisconnect>

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080045b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045e2:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <HAL_PCDEx_ActivateLPM+0x44>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3714      	adds	r7, #20
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	10000003 	.word	0x10000003

080045fc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004604:	4b19      	ldr	r3, [pc, #100]	; (800466c <HAL_PWREx_ConfigSupply+0x70>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b04      	cmp	r3, #4
 800460e:	d00a      	beq.n	8004626 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004610:	4b16      	ldr	r3, [pc, #88]	; (800466c <HAL_PWREx_ConfigSupply+0x70>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	429a      	cmp	r2, r3
 800461c:	d001      	beq.n	8004622 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e01f      	b.n	8004662 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004622:	2300      	movs	r3, #0
 8004624:	e01d      	b.n	8004662 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004626:	4b11      	ldr	r3, [pc, #68]	; (800466c <HAL_PWREx_ConfigSupply+0x70>)
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f023 0207 	bic.w	r2, r3, #7
 800462e:	490f      	ldr	r1, [pc, #60]	; (800466c <HAL_PWREx_ConfigSupply+0x70>)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4313      	orrs	r3, r2
 8004634:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004636:	f7fd ff6d 	bl	8002514 <HAL_GetTick>
 800463a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800463c:	e009      	b.n	8004652 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800463e:	f7fd ff69 	bl	8002514 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800464c:	d901      	bls.n	8004652 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e007      	b.n	8004662 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004652:	4b06      	ldr	r3, [pc, #24]	; (800466c <HAL_PWREx_ConfigSupply+0x70>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800465a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800465e:	d1ee      	bne.n	800463e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	58024800 	.word	0x58024800

08004670 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004674:	4b05      	ldr	r3, [pc, #20]	; (800468c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	4a04      	ldr	r2, [pc, #16]	; (800468c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800467a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800467e:	60d3      	str	r3, [r2, #12]
}
 8004680:	bf00      	nop
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	58024800 	.word	0x58024800

08004690 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08c      	sub	sp, #48	; 0x30
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d102      	bne.n	80046a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	f000 bc1c 	b.w	8004edc <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 8087 	beq.w	80047c0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046b2:	4b9e      	ldr	r3, [pc, #632]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046bc:	4b9b      	ldr	r3, [pc, #620]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 80046be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80046c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c4:	2b10      	cmp	r3, #16
 80046c6:	d007      	beq.n	80046d8 <HAL_RCC_OscConfig+0x48>
 80046c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ca:	2b18      	cmp	r3, #24
 80046cc:	d110      	bne.n	80046f0 <HAL_RCC_OscConfig+0x60>
 80046ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d0:	f003 0303 	and.w	r3, r3, #3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d10b      	bne.n	80046f0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d8:	4b94      	ldr	r3, [pc, #592]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d06c      	beq.n	80047be <HAL_RCC_OscConfig+0x12e>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d168      	bne.n	80047be <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e3f5      	b.n	8004edc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f8:	d106      	bne.n	8004708 <HAL_RCC_OscConfig+0x78>
 80046fa:	4b8c      	ldr	r3, [pc, #560]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a8b      	ldr	r2, [pc, #556]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 8004700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	e02e      	b.n	8004766 <HAL_RCC_OscConfig+0xd6>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10c      	bne.n	800472a <HAL_RCC_OscConfig+0x9a>
 8004710:	4b86      	ldr	r3, [pc, #536]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a85      	ldr	r2, [pc, #532]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 8004716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	4b83      	ldr	r3, [pc, #524]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a82      	ldr	r2, [pc, #520]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 8004722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	e01d      	b.n	8004766 <HAL_RCC_OscConfig+0xd6>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004732:	d10c      	bne.n	800474e <HAL_RCC_OscConfig+0xbe>
 8004734:	4b7d      	ldr	r3, [pc, #500]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a7c      	ldr	r2, [pc, #496]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 800473a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	4b7a      	ldr	r3, [pc, #488]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a79      	ldr	r2, [pc, #484]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 8004746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	e00b      	b.n	8004766 <HAL_RCC_OscConfig+0xd6>
 800474e:	4b77      	ldr	r3, [pc, #476]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a76      	ldr	r2, [pc, #472]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 8004754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	4b74      	ldr	r3, [pc, #464]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a73      	ldr	r2, [pc, #460]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 8004760:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004764:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d013      	beq.n	8004796 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476e:	f7fd fed1 	bl	8002514 <HAL_GetTick>
 8004772:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004776:	f7fd fecd 	bl	8002514 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b64      	cmp	r3, #100	; 0x64
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e3a9      	b.n	8004edc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004788:	4b68      	ldr	r3, [pc, #416]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0f0      	beq.n	8004776 <HAL_RCC_OscConfig+0xe6>
 8004794:	e014      	b.n	80047c0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004796:	f7fd febd 	bl	8002514 <HAL_GetTick>
 800479a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800479c:	e008      	b.n	80047b0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800479e:	f7fd feb9 	bl	8002514 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b64      	cmp	r3, #100	; 0x64
 80047aa:	d901      	bls.n	80047b0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e395      	b.n	8004edc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80047b0:	4b5e      	ldr	r3, [pc, #376]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1f0      	bne.n	800479e <HAL_RCC_OscConfig+0x10e>
 80047bc:	e000      	b.n	80047c0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047be:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 80ca 	beq.w	8004962 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ce:	4b57      	ldr	r3, [pc, #348]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047d6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047d8:	4b54      	ldr	r3, [pc, #336]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 80047da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047dc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d007      	beq.n	80047f4 <HAL_RCC_OscConfig+0x164>
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	2b18      	cmp	r3, #24
 80047e8:	d156      	bne.n	8004898 <HAL_RCC_OscConfig+0x208>
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	f003 0303 	and.w	r3, r3, #3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d151      	bne.n	8004898 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047f4:	4b4d      	ldr	r3, [pc, #308]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <HAL_RCC_OscConfig+0x17c>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e367      	b.n	8004edc <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800480c:	4b47      	ldr	r3, [pc, #284]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f023 0219 	bic.w	r2, r3, #25
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	4944      	ldr	r1, [pc, #272]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 800481a:	4313      	orrs	r3, r2
 800481c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800481e:	f7fd fe79 	bl	8002514 <HAL_GetTick>
 8004822:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004824:	e008      	b.n	8004838 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004826:	f7fd fe75 	bl	8002514 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e351      	b.n	8004edc <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004838:	4b3c      	ldr	r3, [pc, #240]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0f0      	beq.n	8004826 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004844:	f7fd fe96 	bl	8002574 <HAL_GetREVID>
 8004848:	4603      	mov	r3, r0
 800484a:	f241 0203 	movw	r2, #4099	; 0x1003
 800484e:	4293      	cmp	r3, r2
 8004850:	d817      	bhi.n	8004882 <HAL_RCC_OscConfig+0x1f2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	2b40      	cmp	r3, #64	; 0x40
 8004858:	d108      	bne.n	800486c <HAL_RCC_OscConfig+0x1dc>
 800485a:	4b34      	ldr	r3, [pc, #208]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004862:	4a32      	ldr	r2, [pc, #200]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 8004864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004868:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800486a:	e07a      	b.n	8004962 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800486c:	4b2f      	ldr	r3, [pc, #188]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	031b      	lsls	r3, r3, #12
 800487a:	492c      	ldr	r1, [pc, #176]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 800487c:	4313      	orrs	r3, r2
 800487e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004880:	e06f      	b.n	8004962 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004882:	4b2a      	ldr	r3, [pc, #168]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	061b      	lsls	r3, r3, #24
 8004890:	4926      	ldr	r1, [pc, #152]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 8004892:	4313      	orrs	r3, r2
 8004894:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004896:	e064      	b.n	8004962 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d047      	beq.n	8004930 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80048a0:	4b22      	ldr	r3, [pc, #136]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f023 0219 	bic.w	r2, r3, #25
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	491f      	ldr	r1, [pc, #124]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b2:	f7fd fe2f 	bl	8002514 <HAL_GetTick>
 80048b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048ba:	f7fd fe2b 	bl	8002514 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e307      	b.n	8004edc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048cc:	4b17      	ldr	r3, [pc, #92]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0f0      	beq.n	80048ba <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d8:	f7fd fe4c 	bl	8002574 <HAL_GetREVID>
 80048dc:	4603      	mov	r3, r0
 80048de:	f241 0203 	movw	r2, #4099	; 0x1003
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d817      	bhi.n	8004916 <HAL_RCC_OscConfig+0x286>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	2b40      	cmp	r3, #64	; 0x40
 80048ec:	d108      	bne.n	8004900 <HAL_RCC_OscConfig+0x270>
 80048ee:	4b0f      	ldr	r3, [pc, #60]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80048f6:	4a0d      	ldr	r2, [pc, #52]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 80048f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048fc:	6053      	str	r3, [r2, #4]
 80048fe:	e030      	b.n	8004962 <HAL_RCC_OscConfig+0x2d2>
 8004900:	4b0a      	ldr	r3, [pc, #40]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	031b      	lsls	r3, r3, #12
 800490e:	4907      	ldr	r1, [pc, #28]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 8004910:	4313      	orrs	r3, r2
 8004912:	604b      	str	r3, [r1, #4]
 8004914:	e025      	b.n	8004962 <HAL_RCC_OscConfig+0x2d2>
 8004916:	4b05      	ldr	r3, [pc, #20]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	061b      	lsls	r3, r3, #24
 8004924:	4901      	ldr	r1, [pc, #4]	; (800492c <HAL_RCC_OscConfig+0x29c>)
 8004926:	4313      	orrs	r3, r2
 8004928:	604b      	str	r3, [r1, #4]
 800492a:	e01a      	b.n	8004962 <HAL_RCC_OscConfig+0x2d2>
 800492c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004930:	4b9e      	ldr	r3, [pc, #632]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a9d      	ldr	r2, [pc, #628]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 8004936:	f023 0301 	bic.w	r3, r3, #1
 800493a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493c:	f7fd fdea 	bl	8002514 <HAL_GetTick>
 8004940:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004944:	f7fd fde6 	bl	8002514 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e2c2      	b.n	8004edc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004956:	4b95      	ldr	r3, [pc, #596]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0304 	and.w	r3, r3, #4
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f0      	bne.n	8004944 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0310 	and.w	r3, r3, #16
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 80a9 	beq.w	8004ac2 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004970:	4b8e      	ldr	r3, [pc, #568]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004978:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800497a:	4b8c      	ldr	r3, [pc, #560]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 800497c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	2b08      	cmp	r3, #8
 8004984:	d007      	beq.n	8004996 <HAL_RCC_OscConfig+0x306>
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b18      	cmp	r3, #24
 800498a:	d13a      	bne.n	8004a02 <HAL_RCC_OscConfig+0x372>
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	2b01      	cmp	r3, #1
 8004994:	d135      	bne.n	8004a02 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004996:	4b85      	ldr	r3, [pc, #532]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d005      	beq.n	80049ae <HAL_RCC_OscConfig+0x31e>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	2b80      	cmp	r3, #128	; 0x80
 80049a8:	d001      	beq.n	80049ae <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e296      	b.n	8004edc <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049ae:	f7fd fde1 	bl	8002574 <HAL_GetREVID>
 80049b2:	4603      	mov	r3, r0
 80049b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d817      	bhi.n	80049ec <HAL_RCC_OscConfig+0x35c>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	2b20      	cmp	r3, #32
 80049c2:	d108      	bne.n	80049d6 <HAL_RCC_OscConfig+0x346>
 80049c4:	4b79      	ldr	r3, [pc, #484]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80049cc:	4a77      	ldr	r2, [pc, #476]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 80049ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049d2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049d4:	e075      	b.n	8004ac2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049d6:	4b75      	ldr	r3, [pc, #468]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	069b      	lsls	r3, r3, #26
 80049e4:	4971      	ldr	r1, [pc, #452]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049ea:	e06a      	b.n	8004ac2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049ec:	4b6f      	ldr	r3, [pc, #444]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	061b      	lsls	r3, r3, #24
 80049fa:	496c      	ldr	r1, [pc, #432]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a00:	e05f      	b.n	8004ac2 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d042      	beq.n	8004a90 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004a0a:	4b68      	ldr	r3, [pc, #416]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a67      	ldr	r2, [pc, #412]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 8004a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a16:	f7fd fd7d 	bl	8002514 <HAL_GetTick>
 8004a1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004a1e:	f7fd fd79 	bl	8002514 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e255      	b.n	8004edc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a30:	4b5e      	ldr	r3, [pc, #376]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0f0      	beq.n	8004a1e <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a3c:	f7fd fd9a 	bl	8002574 <HAL_GetREVID>
 8004a40:	4603      	mov	r3, r0
 8004a42:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d817      	bhi.n	8004a7a <HAL_RCC_OscConfig+0x3ea>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	2b20      	cmp	r3, #32
 8004a50:	d108      	bne.n	8004a64 <HAL_RCC_OscConfig+0x3d4>
 8004a52:	4b56      	ldr	r3, [pc, #344]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004a5a:	4a54      	ldr	r2, [pc, #336]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 8004a5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a60:	6053      	str	r3, [r2, #4]
 8004a62:	e02e      	b.n	8004ac2 <HAL_RCC_OscConfig+0x432>
 8004a64:	4b51      	ldr	r3, [pc, #324]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	069b      	lsls	r3, r3, #26
 8004a72:	494e      	ldr	r1, [pc, #312]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	604b      	str	r3, [r1, #4]
 8004a78:	e023      	b.n	8004ac2 <HAL_RCC_OscConfig+0x432>
 8004a7a:	4b4c      	ldr	r3, [pc, #304]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	061b      	lsls	r3, r3, #24
 8004a88:	4948      	ldr	r1, [pc, #288]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	60cb      	str	r3, [r1, #12]
 8004a8e:	e018      	b.n	8004ac2 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004a90:	4b46      	ldr	r3, [pc, #280]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a45      	ldr	r2, [pc, #276]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 8004a96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9c:	f7fd fd3a 	bl	8002514 <HAL_GetTick>
 8004aa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004aa4:	f7fd fd36 	bl	8002514 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e212      	b.n	8004edc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ab6:	4b3d      	ldr	r3, [pc, #244]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1f0      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d036      	beq.n	8004b3c <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d019      	beq.n	8004b0a <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ad6:	4b35      	ldr	r3, [pc, #212]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 8004ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ada:	4a34      	ldr	r2, [pc, #208]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 8004adc:	f043 0301 	orr.w	r3, r3, #1
 8004ae0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae2:	f7fd fd17 	bl	8002514 <HAL_GetTick>
 8004ae6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ae8:	e008      	b.n	8004afc <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aea:	f7fd fd13 	bl	8002514 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d901      	bls.n	8004afc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e1ef      	b.n	8004edc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004afc:	4b2b      	ldr	r3, [pc, #172]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 8004afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d0f0      	beq.n	8004aea <HAL_RCC_OscConfig+0x45a>
 8004b08:	e018      	b.n	8004b3c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b0a:	4b28      	ldr	r3, [pc, #160]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 8004b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b0e:	4a27      	ldr	r2, [pc, #156]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 8004b10:	f023 0301 	bic.w	r3, r3, #1
 8004b14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b16:	f7fd fcfd 	bl	8002514 <HAL_GetTick>
 8004b1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b1e:	f7fd fcf9 	bl	8002514 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e1d5      	b.n	8004edc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b30:	4b1e      	ldr	r3, [pc, #120]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 8004b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f0      	bne.n	8004b1e <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0320 	and.w	r3, r3, #32
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d039      	beq.n	8004bbc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d019      	beq.n	8004b84 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b50:	4b16      	ldr	r3, [pc, #88]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a15      	ldr	r2, [pc, #84]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 8004b56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b5a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b5c:	f7fd fcda 	bl	8002514 <HAL_GetTick>
 8004b60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b62:	e008      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004b64:	f7fd fcd6 	bl	8002514 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e1b2      	b.n	8004edc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b76:	4b0d      	ldr	r3, [pc, #52]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d0f0      	beq.n	8004b64 <HAL_RCC_OscConfig+0x4d4>
 8004b82:	e01b      	b.n	8004bbc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b84:	4b09      	ldr	r3, [pc, #36]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a08      	ldr	r2, [pc, #32]	; (8004bac <HAL_RCC_OscConfig+0x51c>)
 8004b8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b8e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b90:	f7fd fcc0 	bl	8002514 <HAL_GetTick>
 8004b94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b96:	e00b      	b.n	8004bb0 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004b98:	f7fd fcbc 	bl	8002514 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d904      	bls.n	8004bb0 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e198      	b.n	8004edc <HAL_RCC_OscConfig+0x84c>
 8004baa:	bf00      	nop
 8004bac:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004bb0:	4ba3      	ldr	r3, [pc, #652]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1ed      	bne.n	8004b98 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 8081 	beq.w	8004ccc <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004bca:	4b9e      	ldr	r3, [pc, #632]	; (8004e44 <HAL_RCC_OscConfig+0x7b4>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a9d      	ldr	r2, [pc, #628]	; (8004e44 <HAL_RCC_OscConfig+0x7b4>)
 8004bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bd6:	f7fd fc9d 	bl	8002514 <HAL_GetTick>
 8004bda:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004bde:	f7fd fc99 	bl	8002514 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b64      	cmp	r3, #100	; 0x64
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e175      	b.n	8004edc <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bf0:	4b94      	ldr	r3, [pc, #592]	; (8004e44 <HAL_RCC_OscConfig+0x7b4>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0f0      	beq.n	8004bde <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d106      	bne.n	8004c12 <HAL_RCC_OscConfig+0x582>
 8004c04:	4b8e      	ldr	r3, [pc, #568]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c08:	4a8d      	ldr	r2, [pc, #564]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004c0a:	f043 0301 	orr.w	r3, r3, #1
 8004c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c10:	e02d      	b.n	8004c6e <HAL_RCC_OscConfig+0x5de>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10c      	bne.n	8004c34 <HAL_RCC_OscConfig+0x5a4>
 8004c1a:	4b89      	ldr	r3, [pc, #548]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1e:	4a88      	ldr	r2, [pc, #544]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004c20:	f023 0301 	bic.w	r3, r3, #1
 8004c24:	6713      	str	r3, [r2, #112]	; 0x70
 8004c26:	4b86      	ldr	r3, [pc, #536]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2a:	4a85      	ldr	r2, [pc, #532]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004c2c:	f023 0304 	bic.w	r3, r3, #4
 8004c30:	6713      	str	r3, [r2, #112]	; 0x70
 8004c32:	e01c      	b.n	8004c6e <HAL_RCC_OscConfig+0x5de>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	2b05      	cmp	r3, #5
 8004c3a:	d10c      	bne.n	8004c56 <HAL_RCC_OscConfig+0x5c6>
 8004c3c:	4b80      	ldr	r3, [pc, #512]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c40:	4a7f      	ldr	r2, [pc, #508]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004c42:	f043 0304 	orr.w	r3, r3, #4
 8004c46:	6713      	str	r3, [r2, #112]	; 0x70
 8004c48:	4b7d      	ldr	r3, [pc, #500]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4c:	4a7c      	ldr	r2, [pc, #496]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004c4e:	f043 0301 	orr.w	r3, r3, #1
 8004c52:	6713      	str	r3, [r2, #112]	; 0x70
 8004c54:	e00b      	b.n	8004c6e <HAL_RCC_OscConfig+0x5de>
 8004c56:	4b7a      	ldr	r3, [pc, #488]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5a:	4a79      	ldr	r2, [pc, #484]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004c5c:	f023 0301 	bic.w	r3, r3, #1
 8004c60:	6713      	str	r3, [r2, #112]	; 0x70
 8004c62:	4b77      	ldr	r3, [pc, #476]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c66:	4a76      	ldr	r2, [pc, #472]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004c68:	f023 0304 	bic.w	r3, r3, #4
 8004c6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d015      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c76:	f7fd fc4d 	bl	8002514 <HAL_GetTick>
 8004c7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c7c:	e00a      	b.n	8004c94 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c7e:	f7fd fc49 	bl	8002514 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d901      	bls.n	8004c94 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e123      	b.n	8004edc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c94:	4b6a      	ldr	r3, [pc, #424]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d0ee      	beq.n	8004c7e <HAL_RCC_OscConfig+0x5ee>
 8004ca0:	e014      	b.n	8004ccc <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca2:	f7fd fc37 	bl	8002514 <HAL_GetTick>
 8004ca6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ca8:	e00a      	b.n	8004cc0 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004caa:	f7fd fc33 	bl	8002514 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e10d      	b.n	8004edc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004cc0:	4b5f      	ldr	r3, [pc, #380]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1ee      	bne.n	8004caa <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 8102 	beq.w	8004eda <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004cd6:	4b5a      	ldr	r3, [pc, #360]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cde:	2b18      	cmp	r3, #24
 8004ce0:	f000 80bd 	beq.w	8004e5e <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	f040 8095 	bne.w	8004e18 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cee:	4b54      	ldr	r3, [pc, #336]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a53      	ldr	r2, [pc, #332]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004cf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfa:	f7fd fc0b 	bl	8002514 <HAL_GetTick>
 8004cfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d00:	e008      	b.n	8004d14 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d02:	f7fd fc07 	bl	8002514 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e0e3      	b.n	8004edc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d14:	4b4a      	ldr	r3, [pc, #296]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1f0      	bne.n	8004d02 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d20:	4b47      	ldr	r3, [pc, #284]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004d22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d24:	4b48      	ldr	r3, [pc, #288]	; (8004e48 <HAL_RCC_OscConfig+0x7b8>)
 8004d26:	4013      	ands	r3, r2
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d30:	0112      	lsls	r2, r2, #4
 8004d32:	430a      	orrs	r2, r1
 8004d34:	4942      	ldr	r1, [pc, #264]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	628b      	str	r3, [r1, #40]	; 0x28
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	025b      	lsls	r3, r3, #9
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d54:	3b01      	subs	r3, #1
 8004d56:	041b      	lsls	r3, r3, #16
 8004d58:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d62:	3b01      	subs	r3, #1
 8004d64:	061b      	lsls	r3, r3, #24
 8004d66:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d6a:	4935      	ldr	r1, [pc, #212]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004d70:	4b33      	ldr	r3, [pc, #204]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	4a32      	ldr	r2, [pc, #200]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004d76:	f023 0301 	bic.w	r3, r3, #1
 8004d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d7c:	4b30      	ldr	r3, [pc, #192]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d80:	4b32      	ldr	r3, [pc, #200]	; (8004e4c <HAL_RCC_OscConfig+0x7bc>)
 8004d82:	4013      	ands	r3, r2
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004d88:	00d2      	lsls	r2, r2, #3
 8004d8a:	492d      	ldr	r1, [pc, #180]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004d90:	4b2b      	ldr	r3, [pc, #172]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d94:	f023 020c 	bic.w	r2, r3, #12
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	4928      	ldr	r1, [pc, #160]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004da2:	4b27      	ldr	r3, [pc, #156]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da6:	f023 0202 	bic.w	r2, r3, #2
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dae:	4924      	ldr	r1, [pc, #144]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004db4:	4b22      	ldr	r3, [pc, #136]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db8:	4a21      	ldr	r2, [pc, #132]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dc0:	4b1f      	ldr	r3, [pc, #124]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc4:	4a1e      	ldr	r2, [pc, #120]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004dcc:	4b1c      	ldr	r3, [pc, #112]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd0:	4a1b      	ldr	r2, [pc, #108]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004dd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004dd8:	4b19      	ldr	r3, [pc, #100]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ddc:	4a18      	ldr	r2, [pc, #96]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004dde:	f043 0301 	orr.w	r3, r3, #1
 8004de2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004de4:	4b16      	ldr	r3, [pc, #88]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a15      	ldr	r2, [pc, #84]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df0:	f7fd fb90 	bl	8002514 <HAL_GetTick>
 8004df4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004df8:	f7fd fb8c 	bl	8002514 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e068      	b.n	8004edc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e0a:	4b0d      	ldr	r3, [pc, #52]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0f0      	beq.n	8004df8 <HAL_RCC_OscConfig+0x768>
 8004e16:	e060      	b.n	8004eda <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e18:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a08      	ldr	r2, [pc, #32]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e24:	f7fd fb76 	bl	8002514 <HAL_GetTick>
 8004e28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e2a:	e011      	b.n	8004e50 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e2c:	f7fd fb72 	bl	8002514 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d90a      	bls.n	8004e50 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e04e      	b.n	8004edc <HAL_RCC_OscConfig+0x84c>
 8004e3e:	bf00      	nop
 8004e40:	58024400 	.word	0x58024400
 8004e44:	58024800 	.word	0x58024800
 8004e48:	fffffc0c 	.word	0xfffffc0c
 8004e4c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e50:	4b24      	ldr	r3, [pc, #144]	; (8004ee4 <HAL_RCC_OscConfig+0x854>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1e7      	bne.n	8004e2c <HAL_RCC_OscConfig+0x79c>
 8004e5c:	e03d      	b.n	8004eda <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004e5e:	4b21      	ldr	r3, [pc, #132]	; (8004ee4 <HAL_RCC_OscConfig+0x854>)
 8004e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e62:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004e64:	4b1f      	ldr	r3, [pc, #124]	; (8004ee4 <HAL_RCC_OscConfig+0x854>)
 8004e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e68:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d031      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	f003 0203 	and.w	r2, r3, #3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d12a      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	091b      	lsrs	r3, r3, #4
 8004e84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d122      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d11a      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	0a5b      	lsrs	r3, r3, #9
 8004ea4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eac:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d111      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	0c1b      	lsrs	r3, r3, #16
 8004eb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d108      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	0e1b      	lsrs	r3, r3, #24
 8004ec8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d001      	beq.n	8004eda <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3730      	adds	r7, #48	; 0x30
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	58024400 	.word	0x58024400

08004ee8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e19c      	b.n	8005236 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004efc:	4b8a      	ldr	r3, [pc, #552]	; (8005128 <HAL_RCC_ClockConfig+0x240>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 030f 	and.w	r3, r3, #15
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d910      	bls.n	8004f2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f0a:	4b87      	ldr	r3, [pc, #540]	; (8005128 <HAL_RCC_ClockConfig+0x240>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f023 020f 	bic.w	r2, r3, #15
 8004f12:	4985      	ldr	r1, [pc, #532]	; (8005128 <HAL_RCC_ClockConfig+0x240>)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f1a:	4b83      	ldr	r3, [pc, #524]	; (8005128 <HAL_RCC_ClockConfig+0x240>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d001      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e184      	b.n	8005236 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d010      	beq.n	8004f5a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691a      	ldr	r2, [r3, #16]
 8004f3c:	4b7b      	ldr	r3, [pc, #492]	; (800512c <HAL_RCC_ClockConfig+0x244>)
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d908      	bls.n	8004f5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f48:	4b78      	ldr	r3, [pc, #480]	; (800512c <HAL_RCC_ClockConfig+0x244>)
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	4975      	ldr	r1, [pc, #468]	; (800512c <HAL_RCC_ClockConfig+0x244>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0308 	and.w	r3, r3, #8
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d010      	beq.n	8004f88 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	695a      	ldr	r2, [r3, #20]
 8004f6a:	4b70      	ldr	r3, [pc, #448]	; (800512c <HAL_RCC_ClockConfig+0x244>)
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d908      	bls.n	8004f88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f76:	4b6d      	ldr	r3, [pc, #436]	; (800512c <HAL_RCC_ClockConfig+0x244>)
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	496a      	ldr	r1, [pc, #424]	; (800512c <HAL_RCC_ClockConfig+0x244>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0310 	and.w	r3, r3, #16
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d010      	beq.n	8004fb6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	699a      	ldr	r2, [r3, #24]
 8004f98:	4b64      	ldr	r3, [pc, #400]	; (800512c <HAL_RCC_ClockConfig+0x244>)
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d908      	bls.n	8004fb6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004fa4:	4b61      	ldr	r3, [pc, #388]	; (800512c <HAL_RCC_ClockConfig+0x244>)
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	495e      	ldr	r1, [pc, #376]	; (800512c <HAL_RCC_ClockConfig+0x244>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0320 	and.w	r3, r3, #32
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d010      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	69da      	ldr	r2, [r3, #28]
 8004fc6:	4b59      	ldr	r3, [pc, #356]	; (800512c <HAL_RCC_ClockConfig+0x244>)
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d908      	bls.n	8004fe4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004fd2:	4b56      	ldr	r3, [pc, #344]	; (800512c <HAL_RCC_ClockConfig+0x244>)
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	4953      	ldr	r1, [pc, #332]	; (800512c <HAL_RCC_ClockConfig+0x244>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d010      	beq.n	8005012 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	4b4d      	ldr	r3, [pc, #308]	; (800512c <HAL_RCC_ClockConfig+0x244>)
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	f003 030f 	and.w	r3, r3, #15
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d908      	bls.n	8005012 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005000:	4b4a      	ldr	r3, [pc, #296]	; (800512c <HAL_RCC_ClockConfig+0x244>)
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	f023 020f 	bic.w	r2, r3, #15
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	4947      	ldr	r1, [pc, #284]	; (800512c <HAL_RCC_ClockConfig+0x244>)
 800500e:	4313      	orrs	r3, r2
 8005010:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d055      	beq.n	80050ca <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800501e:	4b43      	ldr	r3, [pc, #268]	; (800512c <HAL_RCC_ClockConfig+0x244>)
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	4940      	ldr	r1, [pc, #256]	; (800512c <HAL_RCC_ClockConfig+0x244>)
 800502c:	4313      	orrs	r3, r2
 800502e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	2b02      	cmp	r3, #2
 8005036:	d107      	bne.n	8005048 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005038:	4b3c      	ldr	r3, [pc, #240]	; (800512c <HAL_RCC_ClockConfig+0x244>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d121      	bne.n	8005088 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e0f6      	b.n	8005236 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	2b03      	cmp	r3, #3
 800504e:	d107      	bne.n	8005060 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005050:	4b36      	ldr	r3, [pc, #216]	; (800512c <HAL_RCC_ClockConfig+0x244>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d115      	bne.n	8005088 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e0ea      	b.n	8005236 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d107      	bne.n	8005078 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005068:	4b30      	ldr	r3, [pc, #192]	; (800512c <HAL_RCC_ClockConfig+0x244>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005070:	2b00      	cmp	r3, #0
 8005072:	d109      	bne.n	8005088 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e0de      	b.n	8005236 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005078:	4b2c      	ldr	r3, [pc, #176]	; (800512c <HAL_RCC_ClockConfig+0x244>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e0d6      	b.n	8005236 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005088:	4b28      	ldr	r3, [pc, #160]	; (800512c <HAL_RCC_ClockConfig+0x244>)
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	f023 0207 	bic.w	r2, r3, #7
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	4925      	ldr	r1, [pc, #148]	; (800512c <HAL_RCC_ClockConfig+0x244>)
 8005096:	4313      	orrs	r3, r2
 8005098:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800509a:	f7fd fa3b 	bl	8002514 <HAL_GetTick>
 800509e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050a0:	e00a      	b.n	80050b8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050a2:	f7fd fa37 	bl	8002514 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e0be      	b.n	8005236 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050b8:	4b1c      	ldr	r3, [pc, #112]	; (800512c <HAL_RCC_ClockConfig+0x244>)
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d1eb      	bne.n	80050a2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d010      	beq.n	80050f8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	4b14      	ldr	r3, [pc, #80]	; (800512c <HAL_RCC_ClockConfig+0x244>)
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d208      	bcs.n	80050f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050e6:	4b11      	ldr	r3, [pc, #68]	; (800512c <HAL_RCC_ClockConfig+0x244>)
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	f023 020f 	bic.w	r2, r3, #15
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	490e      	ldr	r1, [pc, #56]	; (800512c <HAL_RCC_ClockConfig+0x244>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050f8:	4b0b      	ldr	r3, [pc, #44]	; (8005128 <HAL_RCC_ClockConfig+0x240>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 030f 	and.w	r3, r3, #15
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	429a      	cmp	r2, r3
 8005104:	d214      	bcs.n	8005130 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005106:	4b08      	ldr	r3, [pc, #32]	; (8005128 <HAL_RCC_ClockConfig+0x240>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f023 020f 	bic.w	r2, r3, #15
 800510e:	4906      	ldr	r1, [pc, #24]	; (8005128 <HAL_RCC_ClockConfig+0x240>)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	4313      	orrs	r3, r2
 8005114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005116:	4b04      	ldr	r3, [pc, #16]	; (8005128 <HAL_RCC_ClockConfig+0x240>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 030f 	and.w	r3, r3, #15
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	429a      	cmp	r2, r3
 8005122:	d005      	beq.n	8005130 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e086      	b.n	8005236 <HAL_RCC_ClockConfig+0x34e>
 8005128:	52002000 	.word	0x52002000
 800512c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0304 	and.w	r3, r3, #4
 8005138:	2b00      	cmp	r3, #0
 800513a:	d010      	beq.n	800515e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691a      	ldr	r2, [r3, #16]
 8005140:	4b3f      	ldr	r3, [pc, #252]	; (8005240 <HAL_RCC_ClockConfig+0x358>)
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005148:	429a      	cmp	r2, r3
 800514a:	d208      	bcs.n	800515e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800514c:	4b3c      	ldr	r3, [pc, #240]	; (8005240 <HAL_RCC_ClockConfig+0x358>)
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	4939      	ldr	r1, [pc, #228]	; (8005240 <HAL_RCC_ClockConfig+0x358>)
 800515a:	4313      	orrs	r3, r2
 800515c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b00      	cmp	r3, #0
 8005168:	d010      	beq.n	800518c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	695a      	ldr	r2, [r3, #20]
 800516e:	4b34      	ldr	r3, [pc, #208]	; (8005240 <HAL_RCC_ClockConfig+0x358>)
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005176:	429a      	cmp	r2, r3
 8005178:	d208      	bcs.n	800518c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800517a:	4b31      	ldr	r3, [pc, #196]	; (8005240 <HAL_RCC_ClockConfig+0x358>)
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	492e      	ldr	r1, [pc, #184]	; (8005240 <HAL_RCC_ClockConfig+0x358>)
 8005188:	4313      	orrs	r3, r2
 800518a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0310 	and.w	r3, r3, #16
 8005194:	2b00      	cmp	r3, #0
 8005196:	d010      	beq.n	80051ba <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	699a      	ldr	r2, [r3, #24]
 800519c:	4b28      	ldr	r3, [pc, #160]	; (8005240 <HAL_RCC_ClockConfig+0x358>)
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d208      	bcs.n	80051ba <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80051a8:	4b25      	ldr	r3, [pc, #148]	; (8005240 <HAL_RCC_ClockConfig+0x358>)
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	4922      	ldr	r1, [pc, #136]	; (8005240 <HAL_RCC_ClockConfig+0x358>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0320 	and.w	r3, r3, #32
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d010      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69da      	ldr	r2, [r3, #28]
 80051ca:	4b1d      	ldr	r3, [pc, #116]	; (8005240 <HAL_RCC_ClockConfig+0x358>)
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d208      	bcs.n	80051e8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80051d6:	4b1a      	ldr	r3, [pc, #104]	; (8005240 <HAL_RCC_ClockConfig+0x358>)
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	4917      	ldr	r1, [pc, #92]	; (8005240 <HAL_RCC_ClockConfig+0x358>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80051e8:	f000 f834 	bl	8005254 <HAL_RCC_GetSysClockFreq>
 80051ec:	4602      	mov	r2, r0
 80051ee:	4b14      	ldr	r3, [pc, #80]	; (8005240 <HAL_RCC_ClockConfig+0x358>)
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	0a1b      	lsrs	r3, r3, #8
 80051f4:	f003 030f 	and.w	r3, r3, #15
 80051f8:	4912      	ldr	r1, [pc, #72]	; (8005244 <HAL_RCC_ClockConfig+0x35c>)
 80051fa:	5ccb      	ldrb	r3, [r1, r3]
 80051fc:	f003 031f 	and.w	r3, r3, #31
 8005200:	fa22 f303 	lsr.w	r3, r2, r3
 8005204:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005206:	4b0e      	ldr	r3, [pc, #56]	; (8005240 <HAL_RCC_ClockConfig+0x358>)
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	f003 030f 	and.w	r3, r3, #15
 800520e:	4a0d      	ldr	r2, [pc, #52]	; (8005244 <HAL_RCC_ClockConfig+0x35c>)
 8005210:	5cd3      	ldrb	r3, [r2, r3]
 8005212:	f003 031f 	and.w	r3, r3, #31
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	fa22 f303 	lsr.w	r3, r2, r3
 800521c:	4a0a      	ldr	r2, [pc, #40]	; (8005248 <HAL_RCC_ClockConfig+0x360>)
 800521e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005220:	4a0a      	ldr	r2, [pc, #40]	; (800524c <HAL_RCC_ClockConfig+0x364>)
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005226:	4b0a      	ldr	r3, [pc, #40]	; (8005250 <HAL_RCC_ClockConfig+0x368>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4618      	mov	r0, r3
 800522c:	f7fd f928 	bl	8002480 <HAL_InitTick>
 8005230:	4603      	mov	r3, r0
 8005232:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005234:	7bfb      	ldrb	r3, [r7, #15]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	58024400 	.word	0x58024400
 8005244:	0800b534 	.word	0x0800b534
 8005248:	2400000c 	.word	0x2400000c
 800524c:	24000008 	.word	0x24000008
 8005250:	24000010 	.word	0x24000010

08005254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005254:	b480      	push	{r7}
 8005256:	b089      	sub	sp, #36	; 0x24
 8005258:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800525a:	4bb3      	ldr	r3, [pc, #716]	; (8005528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005262:	2b18      	cmp	r3, #24
 8005264:	f200 8155 	bhi.w	8005512 <HAL_RCC_GetSysClockFreq+0x2be>
 8005268:	a201      	add	r2, pc, #4	; (adr r2, 8005270 <HAL_RCC_GetSysClockFreq+0x1c>)
 800526a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526e:	bf00      	nop
 8005270:	080052d5 	.word	0x080052d5
 8005274:	08005513 	.word	0x08005513
 8005278:	08005513 	.word	0x08005513
 800527c:	08005513 	.word	0x08005513
 8005280:	08005513 	.word	0x08005513
 8005284:	08005513 	.word	0x08005513
 8005288:	08005513 	.word	0x08005513
 800528c:	08005513 	.word	0x08005513
 8005290:	080052fb 	.word	0x080052fb
 8005294:	08005513 	.word	0x08005513
 8005298:	08005513 	.word	0x08005513
 800529c:	08005513 	.word	0x08005513
 80052a0:	08005513 	.word	0x08005513
 80052a4:	08005513 	.word	0x08005513
 80052a8:	08005513 	.word	0x08005513
 80052ac:	08005513 	.word	0x08005513
 80052b0:	08005301 	.word	0x08005301
 80052b4:	08005513 	.word	0x08005513
 80052b8:	08005513 	.word	0x08005513
 80052bc:	08005513 	.word	0x08005513
 80052c0:	08005513 	.word	0x08005513
 80052c4:	08005513 	.word	0x08005513
 80052c8:	08005513 	.word	0x08005513
 80052cc:	08005513 	.word	0x08005513
 80052d0:	08005307 	.word	0x08005307
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052d4:	4b94      	ldr	r3, [pc, #592]	; (8005528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0320 	and.w	r3, r3, #32
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d009      	beq.n	80052f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80052e0:	4b91      	ldr	r3, [pc, #580]	; (8005528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	08db      	lsrs	r3, r3, #3
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	4a90      	ldr	r2, [pc, #576]	; (800552c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052ec:	fa22 f303 	lsr.w	r3, r2, r3
 80052f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80052f2:	e111      	b.n	8005518 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80052f4:	4b8d      	ldr	r3, [pc, #564]	; (800552c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052f6:	61bb      	str	r3, [r7, #24]
    break;
 80052f8:	e10e      	b.n	8005518 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80052fa:	4b8d      	ldr	r3, [pc, #564]	; (8005530 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052fc:	61bb      	str	r3, [r7, #24]
    break;
 80052fe:	e10b      	b.n	8005518 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005300:	4b8c      	ldr	r3, [pc, #560]	; (8005534 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005302:	61bb      	str	r3, [r7, #24]
    break;
 8005304:	e108      	b.n	8005518 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005306:	4b88      	ldr	r3, [pc, #544]	; (8005528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530a:	f003 0303 	and.w	r3, r3, #3
 800530e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005310:	4b85      	ldr	r3, [pc, #532]	; (8005528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005314:	091b      	lsrs	r3, r3, #4
 8005316:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800531a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800531c:	4b82      	ldr	r3, [pc, #520]	; (8005528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005326:	4b80      	ldr	r3, [pc, #512]	; (8005528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532a:	08db      	lsrs	r3, r3, #3
 800532c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	fb02 f303 	mul.w	r3, r2, r3
 8005336:	ee07 3a90 	vmov	s15, r3
 800533a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800533e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 80e1 	beq.w	800550c <HAL_RCC_GetSysClockFreq+0x2b8>
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2b02      	cmp	r3, #2
 800534e:	f000 8083 	beq.w	8005458 <HAL_RCC_GetSysClockFreq+0x204>
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	2b02      	cmp	r3, #2
 8005356:	f200 80a1 	bhi.w	800549c <HAL_RCC_GetSysClockFreq+0x248>
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <HAL_RCC_GetSysClockFreq+0x114>
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d056      	beq.n	8005414 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005366:	e099      	b.n	800549c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005368:	4b6f      	ldr	r3, [pc, #444]	; (8005528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b00      	cmp	r3, #0
 8005372:	d02d      	beq.n	80053d0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005374:	4b6c      	ldr	r3, [pc, #432]	; (8005528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	08db      	lsrs	r3, r3, #3
 800537a:	f003 0303 	and.w	r3, r3, #3
 800537e:	4a6b      	ldr	r2, [pc, #428]	; (800552c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005380:	fa22 f303 	lsr.w	r3, r2, r3
 8005384:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	ee07 3a90 	vmov	s15, r3
 800538c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	ee07 3a90 	vmov	s15, r3
 8005396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800539a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800539e:	4b62      	ldr	r3, [pc, #392]	; (8005528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053a6:	ee07 3a90 	vmov	s15, r3
 80053aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80053b2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005538 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80053ce:	e087      	b.n	80054e0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	ee07 3a90 	vmov	s15, r3
 80053d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053da:	eddf 6a58 	vldr	s13, [pc, #352]	; 800553c <HAL_RCC_GetSysClockFreq+0x2e8>
 80053de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053e2:	4b51      	ldr	r3, [pc, #324]	; (8005528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ea:	ee07 3a90 	vmov	s15, r3
 80053ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80053f6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005538 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800540a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800540e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005412:	e065      	b.n	80054e0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	ee07 3a90 	vmov	s15, r3
 800541a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800541e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005540 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005426:	4b40      	ldr	r3, [pc, #256]	; (8005528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800542e:	ee07 3a90 	vmov	s15, r3
 8005432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005436:	ed97 6a02 	vldr	s12, [r7, #8]
 800543a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005538 <HAL_RCC_GetSysClockFreq+0x2e4>
 800543e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800544a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800544e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005452:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005456:	e043      	b.n	80054e0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	ee07 3a90 	vmov	s15, r3
 800545e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005462:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005544 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800546a:	4b2f      	ldr	r3, [pc, #188]	; (8005528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800546c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005472:	ee07 3a90 	vmov	s15, r3
 8005476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800547a:	ed97 6a02 	vldr	s12, [r7, #8]
 800547e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005538 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800548a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800548e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005496:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800549a:	e021      	b.n	80054e0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	ee07 3a90 	vmov	s15, r3
 80054a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005540 <HAL_RCC_GetSysClockFreq+0x2ec>
 80054aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ae:	4b1e      	ldr	r3, [pc, #120]	; (8005528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b6:	ee07 3a90 	vmov	s15, r3
 80054ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054be:	ed97 6a02 	vldr	s12, [r7, #8]
 80054c2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005538 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054de:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80054e0:	4b11      	ldr	r3, [pc, #68]	; (8005528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e4:	0a5b      	lsrs	r3, r3, #9
 80054e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ea:	3301      	adds	r3, #1
 80054ec:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	ee07 3a90 	vmov	s15, r3
 80054f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80054fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005504:	ee17 3a90 	vmov	r3, s15
 8005508:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800550a:	e005      	b.n	8005518 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	61bb      	str	r3, [r7, #24]
    break;
 8005510:	e002      	b.n	8005518 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005512:	4b07      	ldr	r3, [pc, #28]	; (8005530 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005514:	61bb      	str	r3, [r7, #24]
    break;
 8005516:	bf00      	nop
  }

  return sysclockfreq;
 8005518:	69bb      	ldr	r3, [r7, #24]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3724      	adds	r7, #36	; 0x24
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	58024400 	.word	0x58024400
 800552c:	03d09000 	.word	0x03d09000
 8005530:	003d0900 	.word	0x003d0900
 8005534:	007a1200 	.word	0x007a1200
 8005538:	46000000 	.word	0x46000000
 800553c:	4c742400 	.word	0x4c742400
 8005540:	4a742400 	.word	0x4a742400
 8005544:	4af42400 	.word	0x4af42400

08005548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800554e:	f7ff fe81 	bl	8005254 <HAL_RCC_GetSysClockFreq>
 8005552:	4602      	mov	r2, r0
 8005554:	4b10      	ldr	r3, [pc, #64]	; (8005598 <HAL_RCC_GetHCLKFreq+0x50>)
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	0a1b      	lsrs	r3, r3, #8
 800555a:	f003 030f 	and.w	r3, r3, #15
 800555e:	490f      	ldr	r1, [pc, #60]	; (800559c <HAL_RCC_GetHCLKFreq+0x54>)
 8005560:	5ccb      	ldrb	r3, [r1, r3]
 8005562:	f003 031f 	and.w	r3, r3, #31
 8005566:	fa22 f303 	lsr.w	r3, r2, r3
 800556a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800556c:	4b0a      	ldr	r3, [pc, #40]	; (8005598 <HAL_RCC_GetHCLKFreq+0x50>)
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	f003 030f 	and.w	r3, r3, #15
 8005574:	4a09      	ldr	r2, [pc, #36]	; (800559c <HAL_RCC_GetHCLKFreq+0x54>)
 8005576:	5cd3      	ldrb	r3, [r2, r3]
 8005578:	f003 031f 	and.w	r3, r3, #31
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	fa22 f303 	lsr.w	r3, r2, r3
 8005582:	4a07      	ldr	r2, [pc, #28]	; (80055a0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005584:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005586:	4a07      	ldr	r2, [pc, #28]	; (80055a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800558c:	4b04      	ldr	r3, [pc, #16]	; (80055a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800558e:	681b      	ldr	r3, [r3, #0]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	58024400 	.word	0x58024400
 800559c:	0800b534 	.word	0x0800b534
 80055a0:	2400000c 	.word	0x2400000c
 80055a4:	24000008 	.word	0x24000008

080055a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80055ac:	f7ff ffcc 	bl	8005548 <HAL_RCC_GetHCLKFreq>
 80055b0:	4602      	mov	r2, r0
 80055b2:	4b06      	ldr	r3, [pc, #24]	; (80055cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	091b      	lsrs	r3, r3, #4
 80055b8:	f003 0307 	and.w	r3, r3, #7
 80055bc:	4904      	ldr	r1, [pc, #16]	; (80055d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055be:	5ccb      	ldrb	r3, [r1, r3]
 80055c0:	f003 031f 	and.w	r3, r3, #31
 80055c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	58024400 	.word	0x58024400
 80055d0:	0800b534 	.word	0x0800b534

080055d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80055d8:	f7ff ffb6 	bl	8005548 <HAL_RCC_GetHCLKFreq>
 80055dc:	4602      	mov	r2, r0
 80055de:	4b06      	ldr	r3, [pc, #24]	; (80055f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	0a1b      	lsrs	r3, r3, #8
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	4904      	ldr	r1, [pc, #16]	; (80055fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80055ea:	5ccb      	ldrb	r3, [r1, r3]
 80055ec:	f003 031f 	and.w	r3, r3, #31
 80055f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	58024400 	.word	0x58024400
 80055fc:	0800b534 	.word	0x0800b534

08005600 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005608:	2300      	movs	r3, #0
 800560a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800560c:	2300      	movs	r3, #0
 800560e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d03f      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005620:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005624:	d02a      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005626:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800562a:	d824      	bhi.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800562c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005630:	d018      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005632:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005636:	d81e      	bhi.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005638:	2b00      	cmp	r3, #0
 800563a:	d003      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800563c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005640:	d007      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005642:	e018      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005644:	4bab      	ldr	r3, [pc, #684]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005648:	4aaa      	ldr	r2, [pc, #680]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800564a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800564e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005650:	e015      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	3304      	adds	r3, #4
 8005656:	2102      	movs	r1, #2
 8005658:	4618      	mov	r0, r3
 800565a:	f001 fff3 	bl	8007644 <RCCEx_PLL2_Config>
 800565e:	4603      	mov	r3, r0
 8005660:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005662:	e00c      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	3324      	adds	r3, #36	; 0x24
 8005668:	2102      	movs	r1, #2
 800566a:	4618      	mov	r0, r3
 800566c:	f002 f89c 	bl	80077a8 <RCCEx_PLL3_Config>
 8005670:	4603      	mov	r3, r0
 8005672:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005674:	e003      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	75fb      	strb	r3, [r7, #23]
      break;
 800567a:	e000      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800567c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800567e:	7dfb      	ldrb	r3, [r7, #23]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d109      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005684:	4b9b      	ldr	r3, [pc, #620]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005688:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005690:	4998      	ldr	r1, [pc, #608]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005692:	4313      	orrs	r3, r2
 8005694:	650b      	str	r3, [r1, #80]	; 0x50
 8005696:	e001      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005698:	7dfb      	ldrb	r3, [r7, #23]
 800569a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d03d      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ac:	2b04      	cmp	r3, #4
 80056ae:	d826      	bhi.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80056b0:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80056b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b6:	bf00      	nop
 80056b8:	080056cd 	.word	0x080056cd
 80056bc:	080056db 	.word	0x080056db
 80056c0:	080056ed 	.word	0x080056ed
 80056c4:	08005705 	.word	0x08005705
 80056c8:	08005705 	.word	0x08005705
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056cc:	4b89      	ldr	r3, [pc, #548]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d0:	4a88      	ldr	r2, [pc, #544]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80056d8:	e015      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	3304      	adds	r3, #4
 80056de:	2100      	movs	r1, #0
 80056e0:	4618      	mov	r0, r3
 80056e2:	f001 ffaf 	bl	8007644 <RCCEx_PLL2_Config>
 80056e6:	4603      	mov	r3, r0
 80056e8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80056ea:	e00c      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3324      	adds	r3, #36	; 0x24
 80056f0:	2100      	movs	r1, #0
 80056f2:	4618      	mov	r0, r3
 80056f4:	f002 f858 	bl	80077a8 <RCCEx_PLL3_Config>
 80056f8:	4603      	mov	r3, r0
 80056fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80056fc:	e003      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	75fb      	strb	r3, [r7, #23]
      break;
 8005702:	e000      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005704:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005706:	7dfb      	ldrb	r3, [r7, #23]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d109      	bne.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800570c:	4b79      	ldr	r3, [pc, #484]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800570e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005710:	f023 0207 	bic.w	r2, r3, #7
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005718:	4976      	ldr	r1, [pc, #472]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800571a:	4313      	orrs	r3, r2
 800571c:	650b      	str	r3, [r1, #80]	; 0x50
 800571e:	e001      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005720:	7dfb      	ldrb	r3, [r7, #23]
 8005722:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800572c:	2b00      	cmp	r3, #0
 800572e:	d042      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005738:	d02b      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800573a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800573e:	d825      	bhi.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005740:	2bc0      	cmp	r3, #192	; 0xc0
 8005742:	d028      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005744:	2bc0      	cmp	r3, #192	; 0xc0
 8005746:	d821      	bhi.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005748:	2b80      	cmp	r3, #128	; 0x80
 800574a:	d016      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800574c:	2b80      	cmp	r3, #128	; 0x80
 800574e:	d81d      	bhi.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005754:	2b40      	cmp	r3, #64	; 0x40
 8005756:	d007      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005758:	e018      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800575a:	4b66      	ldr	r3, [pc, #408]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800575c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575e:	4a65      	ldr	r2, [pc, #404]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005764:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005766:	e017      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3304      	adds	r3, #4
 800576c:	2100      	movs	r1, #0
 800576e:	4618      	mov	r0, r3
 8005770:	f001 ff68 	bl	8007644 <RCCEx_PLL2_Config>
 8005774:	4603      	mov	r3, r0
 8005776:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005778:	e00e      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	3324      	adds	r3, #36	; 0x24
 800577e:	2100      	movs	r1, #0
 8005780:	4618      	mov	r0, r3
 8005782:	f002 f811 	bl	80077a8 <RCCEx_PLL3_Config>
 8005786:	4603      	mov	r3, r0
 8005788:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800578a:	e005      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	75fb      	strb	r3, [r7, #23]
      break;
 8005790:	e002      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005792:	bf00      	nop
 8005794:	e000      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005796:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005798:	7dfb      	ldrb	r3, [r7, #23]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d109      	bne.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800579e:	4b55      	ldr	r3, [pc, #340]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057aa:	4952      	ldr	r1, [pc, #328]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	650b      	str	r3, [r1, #80]	; 0x50
 80057b0:	e001      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b2:	7dfb      	ldrb	r3, [r7, #23]
 80057b4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d049      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80057c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057cc:	d030      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80057ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057d2:	d82a      	bhi.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80057d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80057d8:	d02c      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80057da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80057de:	d824      	bhi.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80057e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057e4:	d018      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80057e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057ea:	d81e      	bhi.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d003      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80057f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057f4:	d007      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80057f6:	e018      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057f8:	4b3e      	ldr	r3, [pc, #248]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fc:	4a3d      	ldr	r2, [pc, #244]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005802:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005804:	e017      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	3304      	adds	r3, #4
 800580a:	2100      	movs	r1, #0
 800580c:	4618      	mov	r0, r3
 800580e:	f001 ff19 	bl	8007644 <RCCEx_PLL2_Config>
 8005812:	4603      	mov	r3, r0
 8005814:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005816:	e00e      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	3324      	adds	r3, #36	; 0x24
 800581c:	2100      	movs	r1, #0
 800581e:	4618      	mov	r0, r3
 8005820:	f001 ffc2 	bl	80077a8 <RCCEx_PLL3_Config>
 8005824:	4603      	mov	r3, r0
 8005826:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005828:	e005      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	75fb      	strb	r3, [r7, #23]
      break;
 800582e:	e002      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005830:	bf00      	nop
 8005832:	e000      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005834:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005836:	7dfb      	ldrb	r3, [r7, #23]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10a      	bne.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800583c:	4b2d      	ldr	r3, [pc, #180]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800583e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005840:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800584a:	492a      	ldr	r1, [pc, #168]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800584c:	4313      	orrs	r3, r2
 800584e:	658b      	str	r3, [r1, #88]	; 0x58
 8005850:	e001      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005852:	7dfb      	ldrb	r3, [r7, #23]
 8005854:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800585e:	2b00      	cmp	r3, #0
 8005860:	d04c      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005868:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800586c:	d030      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800586e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005872:	d82a      	bhi.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005874:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005878:	d02c      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800587a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800587e:	d824      	bhi.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005880:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005884:	d018      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005886:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800588a:	d81e      	bhi.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005894:	d007      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005896:	e018      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005898:	4b16      	ldr	r3, [pc, #88]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	4a15      	ldr	r2, [pc, #84]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800589e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80058a4:	e017      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3304      	adds	r3, #4
 80058aa:	2100      	movs	r1, #0
 80058ac:	4618      	mov	r0, r3
 80058ae:	f001 fec9 	bl	8007644 <RCCEx_PLL2_Config>
 80058b2:	4603      	mov	r3, r0
 80058b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80058b6:	e00e      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3324      	adds	r3, #36	; 0x24
 80058bc:	2100      	movs	r1, #0
 80058be:	4618      	mov	r0, r3
 80058c0:	f001 ff72 	bl	80077a8 <RCCEx_PLL3_Config>
 80058c4:	4603      	mov	r3, r0
 80058c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80058c8:	e005      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	75fb      	strb	r3, [r7, #23]
      break;
 80058ce:	e002      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80058d0:	bf00      	nop
 80058d2:	e000      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80058d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058d6:	7dfb      	ldrb	r3, [r7, #23]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10d      	bne.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80058dc:	4b05      	ldr	r3, [pc, #20]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80058ea:	4902      	ldr	r1, [pc, #8]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	658b      	str	r3, [r1, #88]	; 0x58
 80058f0:	e004      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80058f2:	bf00      	nop
 80058f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f8:	7dfb      	ldrb	r3, [r7, #23]
 80058fa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d032      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800590c:	2b30      	cmp	r3, #48	; 0x30
 800590e:	d01c      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005910:	2b30      	cmp	r3, #48	; 0x30
 8005912:	d817      	bhi.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005914:	2b20      	cmp	r3, #32
 8005916:	d00c      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005918:	2b20      	cmp	r3, #32
 800591a:	d813      	bhi.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800591c:	2b00      	cmp	r3, #0
 800591e:	d016      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005920:	2b10      	cmp	r3, #16
 8005922:	d10f      	bne.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005924:	4baf      	ldr	r3, [pc, #700]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005928:	4aae      	ldr	r2, [pc, #696]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800592a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800592e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005930:	e00e      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	3304      	adds	r3, #4
 8005936:	2102      	movs	r1, #2
 8005938:	4618      	mov	r0, r3
 800593a:	f001 fe83 	bl	8007644 <RCCEx_PLL2_Config>
 800593e:	4603      	mov	r3, r0
 8005940:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005942:	e005      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	75fb      	strb	r3, [r7, #23]
      break;
 8005948:	e002      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800594a:	bf00      	nop
 800594c:	e000      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800594e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005950:	7dfb      	ldrb	r3, [r7, #23]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d109      	bne.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005956:	4ba3      	ldr	r3, [pc, #652]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800595a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005962:	49a0      	ldr	r1, [pc, #640]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005964:	4313      	orrs	r3, r2
 8005966:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005968:	e001      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800596a:	7dfb      	ldrb	r3, [r7, #23]
 800596c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d047      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800597e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005982:	d030      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005984:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005988:	d82a      	bhi.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800598a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800598e:	d02c      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005990:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005994:	d824      	bhi.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800599a:	d018      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800599c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059a0:	d81e      	bhi.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80059a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059aa:	d007      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80059ac:	e018      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059ae:	4b8d      	ldr	r3, [pc, #564]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80059b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b2:	4a8c      	ldr	r2, [pc, #560]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80059b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80059ba:	e017      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3304      	adds	r3, #4
 80059c0:	2100      	movs	r1, #0
 80059c2:	4618      	mov	r0, r3
 80059c4:	f001 fe3e 	bl	8007644 <RCCEx_PLL2_Config>
 80059c8:	4603      	mov	r3, r0
 80059ca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80059cc:	e00e      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	3324      	adds	r3, #36	; 0x24
 80059d2:	2100      	movs	r1, #0
 80059d4:	4618      	mov	r0, r3
 80059d6:	f001 fee7 	bl	80077a8 <RCCEx_PLL3_Config>
 80059da:	4603      	mov	r3, r0
 80059dc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80059de:	e005      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	75fb      	strb	r3, [r7, #23]
      break;
 80059e4:	e002      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80059e6:	bf00      	nop
 80059e8:	e000      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80059ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059ec:	7dfb      	ldrb	r3, [r7, #23]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d109      	bne.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80059f2:	4b7c      	ldr	r3, [pc, #496]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80059f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059fe:	4979      	ldr	r1, [pc, #484]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	650b      	str	r3, [r1, #80]	; 0x50
 8005a04:	e001      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a06:	7dfb      	ldrb	r3, [r7, #23]
 8005a08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d049      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a1e:	d02e      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a24:	d828      	bhi.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005a26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a2a:	d02a      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005a2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a30:	d822      	bhi.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005a32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a36:	d026      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005a38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a3c:	d81c      	bhi.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005a3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a42:	d010      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005a44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a48:	d816      	bhi.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d01d      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a52:	d111      	bne.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	3304      	adds	r3, #4
 8005a58:	2101      	movs	r1, #1
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f001 fdf2 	bl	8007644 <RCCEx_PLL2_Config>
 8005a60:	4603      	mov	r3, r0
 8005a62:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005a64:	e012      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	3324      	adds	r3, #36	; 0x24
 8005a6a:	2101      	movs	r1, #1
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f001 fe9b 	bl	80077a8 <RCCEx_PLL3_Config>
 8005a72:	4603      	mov	r3, r0
 8005a74:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005a76:	e009      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a7c:	e006      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005a7e:	bf00      	nop
 8005a80:	e004      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005a82:	bf00      	nop
 8005a84:	e002      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005a86:	bf00      	nop
 8005a88:	e000      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005a8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a8c:	7dfb      	ldrb	r3, [r7, #23]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d109      	bne.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005a92:	4b54      	ldr	r3, [pc, #336]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a96:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a9e:	4951      	ldr	r1, [pc, #324]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	650b      	str	r3, [r1, #80]	; 0x50
 8005aa4:	e001      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa6:	7dfb      	ldrb	r3, [r7, #23]
 8005aa8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d04b      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ac0:	d02e      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ac6:	d828      	bhi.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005acc:	d02a      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad2:	d822      	bhi.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005ad4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ad8:	d026      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005ada:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ade:	d81c      	bhi.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005ae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ae4:	d010      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005ae6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aea:	d816      	bhi.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d01d      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005af0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005af4:	d111      	bne.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	3304      	adds	r3, #4
 8005afa:	2101      	movs	r1, #1
 8005afc:	4618      	mov	r0, r3
 8005afe:	f001 fda1 	bl	8007644 <RCCEx_PLL2_Config>
 8005b02:	4603      	mov	r3, r0
 8005b04:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005b06:	e012      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	3324      	adds	r3, #36	; 0x24
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f001 fe4a 	bl	80077a8 <RCCEx_PLL3_Config>
 8005b14:	4603      	mov	r3, r0
 8005b16:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005b18:	e009      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b1e:	e006      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005b20:	bf00      	nop
 8005b22:	e004      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005b24:	bf00      	nop
 8005b26:	e002      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005b28:	bf00      	nop
 8005b2a:	e000      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005b2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b2e:	7dfb      	ldrb	r3, [r7, #23]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10a      	bne.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005b34:	4b2b      	ldr	r3, [pc, #172]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b38:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b42:	4928      	ldr	r1, [pc, #160]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	658b      	str	r3, [r1, #88]	; 0x58
 8005b48:	e001      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b4a:	7dfb      	ldrb	r3, [r7, #23]
 8005b4c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d02f      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b62:	d00e      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005b64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b68:	d814      	bhi.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d015      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005b6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b72:	d10f      	bne.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b74:	4b1b      	ldr	r3, [pc, #108]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b78:	4a1a      	ldr	r2, [pc, #104]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005b80:	e00c      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	3304      	adds	r3, #4
 8005b86:	2101      	movs	r1, #1
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f001 fd5b 	bl	8007644 <RCCEx_PLL2_Config>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005b92:	e003      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	75fb      	strb	r3, [r7, #23]
      break;
 8005b98:	e000      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005b9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b9c:	7dfb      	ldrb	r3, [r7, #23]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d109      	bne.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ba2:	4b10      	ldr	r3, [pc, #64]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bae:	490d      	ldr	r1, [pc, #52]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	650b      	str	r3, [r1, #80]	; 0x50
 8005bb4:	e001      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb6:	7dfb      	ldrb	r3, [r7, #23]
 8005bb8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d033      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d81c      	bhi.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005bce:	a201      	add	r2, pc, #4	; (adr r2, 8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd4:	08005c0f 	.word	0x08005c0f
 8005bd8:	08005be9 	.word	0x08005be9
 8005bdc:	08005bf7 	.word	0x08005bf7
 8005be0:	08005c0f 	.word	0x08005c0f
 8005be4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005be8:	4bb8      	ldr	r3, [pc, #736]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bec:	4ab7      	ldr	r2, [pc, #732]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005bf4:	e00c      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	2102      	movs	r1, #2
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f001 fd21 	bl	8007644 <RCCEx_PLL2_Config>
 8005c02:	4603      	mov	r3, r0
 8005c04:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005c06:	e003      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c0c:	e000      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005c0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c10:	7dfb      	ldrb	r3, [r7, #23]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d109      	bne.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005c16:	4bad      	ldr	r3, [pc, #692]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c1a:	f023 0203 	bic.w	r2, r3, #3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c22:	49aa      	ldr	r1, [pc, #680]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005c28:	e001      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c2a:	7dfb      	ldrb	r3, [r7, #23]
 8005c2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f000 8086 	beq.w	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c3c:	4ba4      	ldr	r3, [pc, #656]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4aa3      	ldr	r2, [pc, #652]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c48:	f7fc fc64 	bl	8002514 <HAL_GetTick>
 8005c4c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c4e:	e009      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c50:	f7fc fc60 	bl	8002514 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	2b64      	cmp	r3, #100	; 0x64
 8005c5c:	d902      	bls.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	75fb      	strb	r3, [r7, #23]
        break;
 8005c62:	e005      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c64:	4b9a      	ldr	r3, [pc, #616]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d0ef      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005c70:	7dfb      	ldrb	r3, [r7, #23]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d166      	bne.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005c76:	4b95      	ldr	r3, [pc, #596]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005c78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c80:	4053      	eors	r3, r2
 8005c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d013      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c8a:	4b90      	ldr	r3, [pc, #576]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c92:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c94:	4b8d      	ldr	r3, [pc, #564]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c98:	4a8c      	ldr	r2, [pc, #560]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c9e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ca0:	4b8a      	ldr	r3, [pc, #552]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca4:	4a89      	ldr	r2, [pc, #548]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005caa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005cac:	4a87      	ldr	r2, [pc, #540]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cbc:	d115      	bne.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cbe:	f7fc fc29 	bl	8002514 <HAL_GetTick>
 8005cc2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cc4:	e00b      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cc6:	f7fc fc25 	bl	8002514 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d902      	bls.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	75fb      	strb	r3, [r7, #23]
            break;
 8005cdc:	e005      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cde:	4b7b      	ldr	r3, [pc, #492]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0ed      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005cea:	7dfb      	ldrb	r3, [r7, #23]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d126      	bne.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cfe:	d10d      	bne.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005d00:	4b72      	ldr	r3, [pc, #456]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d0e:	0919      	lsrs	r1, r3, #4
 8005d10:	4b70      	ldr	r3, [pc, #448]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8005d12:	400b      	ands	r3, r1
 8005d14:	496d      	ldr	r1, [pc, #436]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	610b      	str	r3, [r1, #16]
 8005d1a:	e005      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005d1c:	4b6b      	ldr	r3, [pc, #428]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	4a6a      	ldr	r2, [pc, #424]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005d22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005d26:	6113      	str	r3, [r2, #16]
 8005d28:	4b68      	ldr	r3, [pc, #416]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005d2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d36:	4965      	ldr	r1, [pc, #404]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	670b      	str	r3, [r1, #112]	; 0x70
 8005d3c:	e004      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d3e:	7dfb      	ldrb	r3, [r7, #23]
 8005d40:	75bb      	strb	r3, [r7, #22]
 8005d42:	e001      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d44:	7dfb      	ldrb	r3, [r7, #23]
 8005d46:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0301 	and.w	r3, r3, #1
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d07e      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d58:	2b28      	cmp	r3, #40	; 0x28
 8005d5a:	d867      	bhi.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005d5c:	a201      	add	r2, pc, #4	; (adr r2, 8005d64 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d62:	bf00      	nop
 8005d64:	08005e33 	.word	0x08005e33
 8005d68:	08005e2d 	.word	0x08005e2d
 8005d6c:	08005e2d 	.word	0x08005e2d
 8005d70:	08005e2d 	.word	0x08005e2d
 8005d74:	08005e2d 	.word	0x08005e2d
 8005d78:	08005e2d 	.word	0x08005e2d
 8005d7c:	08005e2d 	.word	0x08005e2d
 8005d80:	08005e2d 	.word	0x08005e2d
 8005d84:	08005e09 	.word	0x08005e09
 8005d88:	08005e2d 	.word	0x08005e2d
 8005d8c:	08005e2d 	.word	0x08005e2d
 8005d90:	08005e2d 	.word	0x08005e2d
 8005d94:	08005e2d 	.word	0x08005e2d
 8005d98:	08005e2d 	.word	0x08005e2d
 8005d9c:	08005e2d 	.word	0x08005e2d
 8005da0:	08005e2d 	.word	0x08005e2d
 8005da4:	08005e1b 	.word	0x08005e1b
 8005da8:	08005e2d 	.word	0x08005e2d
 8005dac:	08005e2d 	.word	0x08005e2d
 8005db0:	08005e2d 	.word	0x08005e2d
 8005db4:	08005e2d 	.word	0x08005e2d
 8005db8:	08005e2d 	.word	0x08005e2d
 8005dbc:	08005e2d 	.word	0x08005e2d
 8005dc0:	08005e2d 	.word	0x08005e2d
 8005dc4:	08005e33 	.word	0x08005e33
 8005dc8:	08005e2d 	.word	0x08005e2d
 8005dcc:	08005e2d 	.word	0x08005e2d
 8005dd0:	08005e2d 	.word	0x08005e2d
 8005dd4:	08005e2d 	.word	0x08005e2d
 8005dd8:	08005e2d 	.word	0x08005e2d
 8005ddc:	08005e2d 	.word	0x08005e2d
 8005de0:	08005e2d 	.word	0x08005e2d
 8005de4:	08005e33 	.word	0x08005e33
 8005de8:	08005e2d 	.word	0x08005e2d
 8005dec:	08005e2d 	.word	0x08005e2d
 8005df0:	08005e2d 	.word	0x08005e2d
 8005df4:	08005e2d 	.word	0x08005e2d
 8005df8:	08005e2d 	.word	0x08005e2d
 8005dfc:	08005e2d 	.word	0x08005e2d
 8005e00:	08005e2d 	.word	0x08005e2d
 8005e04:	08005e33 	.word	0x08005e33
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3304      	adds	r3, #4
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f001 fc18 	bl	8007644 <RCCEx_PLL2_Config>
 8005e14:	4603      	mov	r3, r0
 8005e16:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005e18:	e00c      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	3324      	adds	r3, #36	; 0x24
 8005e1e:	2101      	movs	r1, #1
 8005e20:	4618      	mov	r0, r3
 8005e22:	f001 fcc1 	bl	80077a8 <RCCEx_PLL3_Config>
 8005e26:	4603      	mov	r3, r0
 8005e28:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005e2a:	e003      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e30:	e000      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8005e32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e34:	7dfb      	ldrb	r3, [r7, #23]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d109      	bne.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005e3a:	4b24      	ldr	r3, [pc, #144]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e46:	4921      	ldr	r1, [pc, #132]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	654b      	str	r3, [r1, #84]	; 0x54
 8005e4c:	e001      	b.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e4e:	7dfb      	ldrb	r3, [r7, #23]
 8005e50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d03e      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e62:	2b05      	cmp	r3, #5
 8005e64:	d820      	bhi.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8005e66:	a201      	add	r2, pc, #4	; (adr r2, 8005e6c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8005e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6c:	08005eaf 	.word	0x08005eaf
 8005e70:	08005e85 	.word	0x08005e85
 8005e74:	08005e97 	.word	0x08005e97
 8005e78:	08005eaf 	.word	0x08005eaf
 8005e7c:	08005eaf 	.word	0x08005eaf
 8005e80:	08005eaf 	.word	0x08005eaf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	3304      	adds	r3, #4
 8005e88:	2101      	movs	r1, #1
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f001 fbda 	bl	8007644 <RCCEx_PLL2_Config>
 8005e90:	4603      	mov	r3, r0
 8005e92:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005e94:	e00c      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	3324      	adds	r3, #36	; 0x24
 8005e9a:	2101      	movs	r1, #1
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f001 fc83 	bl	80077a8 <RCCEx_PLL3_Config>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005ea6:	e003      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8005eac:	e000      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8005eae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005eb0:	7dfb      	ldrb	r3, [r7, #23]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d110      	bne.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005eb6:	4b05      	ldr	r3, [pc, #20]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eba:	f023 0207 	bic.w	r2, r3, #7
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ec2:	4902      	ldr	r1, [pc, #8]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	654b      	str	r3, [r1, #84]	; 0x54
 8005ec8:	e008      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8005eca:	bf00      	nop
 8005ecc:	58024400 	.word	0x58024400
 8005ed0:	58024800 	.word	0x58024800
 8005ed4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed8:	7dfb      	ldrb	r3, [r7, #23]
 8005eda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0304 	and.w	r3, r3, #4
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d039      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eee:	2b05      	cmp	r3, #5
 8005ef0:	d820      	bhi.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8005ef2:	a201      	add	r2, pc, #4	; (adr r2, 8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8005ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef8:	08005f3b 	.word	0x08005f3b
 8005efc:	08005f11 	.word	0x08005f11
 8005f00:	08005f23 	.word	0x08005f23
 8005f04:	08005f3b 	.word	0x08005f3b
 8005f08:	08005f3b 	.word	0x08005f3b
 8005f0c:	08005f3b 	.word	0x08005f3b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	3304      	adds	r3, #4
 8005f14:	2101      	movs	r1, #1
 8005f16:	4618      	mov	r0, r3
 8005f18:	f001 fb94 	bl	8007644 <RCCEx_PLL2_Config>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005f20:	e00c      	b.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	3324      	adds	r3, #36	; 0x24
 8005f26:	2101      	movs	r1, #1
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f001 fc3d 	bl	80077a8 <RCCEx_PLL3_Config>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005f32:	e003      	b.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	75fb      	strb	r3, [r7, #23]
      break;
 8005f38:	e000      	b.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8005f3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f3c:	7dfb      	ldrb	r3, [r7, #23]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10a      	bne.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f42:	4bb7      	ldr	r3, [pc, #732]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f46:	f023 0207 	bic.w	r2, r3, #7
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f50:	49b3      	ldr	r1, [pc, #716]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	658b      	str	r3, [r1, #88]	; 0x58
 8005f56:	e001      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f58:	7dfb      	ldrb	r3, [r7, #23]
 8005f5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0320 	and.w	r3, r3, #32
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d04b      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f72:	d02e      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8005f74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f78:	d828      	bhi.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f7e:	d02a      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f84:	d822      	bhi.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005f86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f8a:	d026      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005f8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f90:	d81c      	bhi.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005f92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f96:	d010      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8005f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f9c:	d816      	bhi.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d01d      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005fa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fa6:	d111      	bne.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	3304      	adds	r3, #4
 8005fac:	2100      	movs	r1, #0
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f001 fb48 	bl	8007644 <RCCEx_PLL2_Config>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005fb8:	e012      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	3324      	adds	r3, #36	; 0x24
 8005fbe:	2102      	movs	r1, #2
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f001 fbf1 	bl	80077a8 <RCCEx_PLL3_Config>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005fca:	e009      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	75fb      	strb	r3, [r7, #23]
      break;
 8005fd0:	e006      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005fd2:	bf00      	nop
 8005fd4:	e004      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005fd6:	bf00      	nop
 8005fd8:	e002      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005fda:	bf00      	nop
 8005fdc:	e000      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005fde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fe0:	7dfb      	ldrb	r3, [r7, #23]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10a      	bne.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005fe6:	4b8e      	ldr	r3, [pc, #568]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ff4:	498a      	ldr	r1, [pc, #552]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	654b      	str	r3, [r1, #84]	; 0x54
 8005ffa:	e001      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ffc:	7dfb      	ldrb	r3, [r7, #23]
 8005ffe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006008:	2b00      	cmp	r3, #0
 800600a:	d04b      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006012:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006016:	d02e      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006018:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800601c:	d828      	bhi.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800601e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006022:	d02a      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006028:	d822      	bhi.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800602a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800602e:	d026      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006030:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006034:	d81c      	bhi.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006036:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800603a:	d010      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800603c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006040:	d816      	bhi.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006042:	2b00      	cmp	r3, #0
 8006044:	d01d      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800604a:	d111      	bne.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	3304      	adds	r3, #4
 8006050:	2100      	movs	r1, #0
 8006052:	4618      	mov	r0, r3
 8006054:	f001 faf6 	bl	8007644 <RCCEx_PLL2_Config>
 8006058:	4603      	mov	r3, r0
 800605a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800605c:	e012      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	3324      	adds	r3, #36	; 0x24
 8006062:	2102      	movs	r1, #2
 8006064:	4618      	mov	r0, r3
 8006066:	f001 fb9f 	bl	80077a8 <RCCEx_PLL3_Config>
 800606a:	4603      	mov	r3, r0
 800606c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800606e:	e009      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	75fb      	strb	r3, [r7, #23]
      break;
 8006074:	e006      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006076:	bf00      	nop
 8006078:	e004      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800607a:	bf00      	nop
 800607c:	e002      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800607e:	bf00      	nop
 8006080:	e000      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006082:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006084:	7dfb      	ldrb	r3, [r7, #23]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10a      	bne.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800608a:	4b65      	ldr	r3, [pc, #404]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800608c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006098:	4961      	ldr	r1, [pc, #388]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800609a:	4313      	orrs	r3, r2
 800609c:	658b      	str	r3, [r1, #88]	; 0x58
 800609e:	e001      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a0:	7dfb      	ldrb	r3, [r7, #23]
 80060a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d04b      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060b6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80060ba:	d02e      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80060bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80060c0:	d828      	bhi.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80060c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060c6:	d02a      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80060c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060cc:	d822      	bhi.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80060ce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80060d2:	d026      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80060d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80060d8:	d81c      	bhi.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80060da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060de:	d010      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80060e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060e4:	d816      	bhi.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d01d      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80060ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ee:	d111      	bne.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	3304      	adds	r3, #4
 80060f4:	2100      	movs	r1, #0
 80060f6:	4618      	mov	r0, r3
 80060f8:	f001 faa4 	bl	8007644 <RCCEx_PLL2_Config>
 80060fc:	4603      	mov	r3, r0
 80060fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006100:	e012      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	3324      	adds	r3, #36	; 0x24
 8006106:	2102      	movs	r1, #2
 8006108:	4618      	mov	r0, r3
 800610a:	f001 fb4d 	bl	80077a8 <RCCEx_PLL3_Config>
 800610e:	4603      	mov	r3, r0
 8006110:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006112:	e009      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	75fb      	strb	r3, [r7, #23]
      break;
 8006118:	e006      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800611a:	bf00      	nop
 800611c:	e004      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800611e:	bf00      	nop
 8006120:	e002      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006122:	bf00      	nop
 8006124:	e000      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006126:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006128:	7dfb      	ldrb	r3, [r7, #23]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10a      	bne.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800612e:	4b3c      	ldr	r3, [pc, #240]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006132:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800613c:	4938      	ldr	r1, [pc, #224]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800613e:	4313      	orrs	r3, r2
 8006140:	658b      	str	r3, [r1, #88]	; 0x58
 8006142:	e001      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006144:	7dfb      	ldrb	r3, [r7, #23]
 8006146:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0308 	and.w	r3, r3, #8
 8006150:	2b00      	cmp	r3, #0
 8006152:	d01a      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800615a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800615e:	d10a      	bne.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	3324      	adds	r3, #36	; 0x24
 8006164:	2102      	movs	r1, #2
 8006166:	4618      	mov	r0, r3
 8006168:	f001 fb1e 	bl	80077a8 <RCCEx_PLL3_Config>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006176:	4b2a      	ldr	r3, [pc, #168]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800617a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006184:	4926      	ldr	r1, [pc, #152]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006186:	4313      	orrs	r3, r2
 8006188:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0310 	and.w	r3, r3, #16
 8006192:	2b00      	cmp	r3, #0
 8006194:	d01a      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800619c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061a0:	d10a      	bne.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	3324      	adds	r3, #36	; 0x24
 80061a6:	2102      	movs	r1, #2
 80061a8:	4618      	mov	r0, r3
 80061aa:	f001 fafd 	bl	80077a8 <RCCEx_PLL3_Config>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d001      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061b8:	4b19      	ldr	r3, [pc, #100]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80061ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061c6:	4916      	ldr	r1, [pc, #88]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d036      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80061de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061e2:	d01f      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80061e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061e8:	d817      	bhi.n	800621a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d003      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80061ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f2:	d009      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80061f4:	e011      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	3304      	adds	r3, #4
 80061fa:	2100      	movs	r1, #0
 80061fc:	4618      	mov	r0, r3
 80061fe:	f001 fa21 	bl	8007644 <RCCEx_PLL2_Config>
 8006202:	4603      	mov	r3, r0
 8006204:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006206:	e00e      	b.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	3324      	adds	r3, #36	; 0x24
 800620c:	2102      	movs	r1, #2
 800620e:	4618      	mov	r0, r3
 8006210:	f001 faca 	bl	80077a8 <RCCEx_PLL3_Config>
 8006214:	4603      	mov	r3, r0
 8006216:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006218:	e005      	b.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	75fb      	strb	r3, [r7, #23]
      break;
 800621e:	e002      	b.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006220:	58024400 	.word	0x58024400
      break;
 8006224:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006226:	7dfb      	ldrb	r3, [r7, #23]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10a      	bne.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800622c:	4b93      	ldr	r3, [pc, #588]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800622e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006230:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800623a:	4990      	ldr	r1, [pc, #576]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800623c:	4313      	orrs	r3, r2
 800623e:	658b      	str	r3, [r1, #88]	; 0x58
 8006240:	e001      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006242:	7dfb      	ldrb	r3, [r7, #23]
 8006244:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d033      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006258:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800625c:	d01c      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800625e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006262:	d816      	bhi.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006264:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006268:	d003      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800626a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800626e:	d007      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006270:	e00f      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006272:	4b82      	ldr	r3, [pc, #520]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006276:	4a81      	ldr	r2, [pc, #516]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800627c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800627e:	e00c      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3324      	adds	r3, #36	; 0x24
 8006284:	2101      	movs	r1, #1
 8006286:	4618      	mov	r0, r3
 8006288:	f001 fa8e 	bl	80077a8 <RCCEx_PLL3_Config>
 800628c:	4603      	mov	r3, r0
 800628e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006290:	e003      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	75fb      	strb	r3, [r7, #23]
      break;
 8006296:	e000      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006298:	bf00      	nop
    }

    if(ret == HAL_OK)
 800629a:	7dfb      	ldrb	r3, [r7, #23]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10a      	bne.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062a0:	4b76      	ldr	r3, [pc, #472]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80062a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062ae:	4973      	ldr	r1, [pc, #460]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	654b      	str	r3, [r1, #84]	; 0x54
 80062b4:	e001      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b6:	7dfb      	ldrb	r3, [r7, #23]
 80062b8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d029      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80062ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062d2:	d007      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80062d4:	e00f      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062d6:	4b69      	ldr	r3, [pc, #420]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80062d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062da:	4a68      	ldr	r2, [pc, #416]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80062dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80062e2:	e00b      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	3304      	adds	r3, #4
 80062e8:	2102      	movs	r1, #2
 80062ea:	4618      	mov	r0, r3
 80062ec:	f001 f9aa 	bl	8007644 <RCCEx_PLL2_Config>
 80062f0:	4603      	mov	r3, r0
 80062f2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80062f4:	e002      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	75fb      	strb	r3, [r7, #23]
      break;
 80062fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062fc:	7dfb      	ldrb	r3, [r7, #23]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d109      	bne.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006302:	4b5e      	ldr	r3, [pc, #376]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006306:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800630e:	495b      	ldr	r1, [pc, #364]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006310:	4313      	orrs	r3, r2
 8006312:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006314:	e001      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006316:	7dfb      	ldrb	r3, [r7, #23]
 8006318:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00a      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	3324      	adds	r3, #36	; 0x24
 800632a:	2102      	movs	r1, #2
 800632c:	4618      	mov	r0, r3
 800632e:	f001 fa3b 	bl	80077a8 <RCCEx_PLL3_Config>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d030      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800634c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006350:	d017      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006352:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006356:	d811      	bhi.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800635c:	d013      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800635e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006362:	d80b      	bhi.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006364:	2b00      	cmp	r3, #0
 8006366:	d010      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800636c:	d106      	bne.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800636e:	4b43      	ldr	r3, [pc, #268]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006372:	4a42      	ldr	r2, [pc, #264]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006378:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800637a:	e007      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	75fb      	strb	r3, [r7, #23]
      break;
 8006380:	e004      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006382:	bf00      	nop
 8006384:	e002      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006386:	bf00      	nop
 8006388:	e000      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800638a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800638c:	7dfb      	ldrb	r3, [r7, #23]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d109      	bne.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006392:	4b3a      	ldr	r3, [pc, #232]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006396:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800639e:	4937      	ldr	r1, [pc, #220]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	654b      	str	r3, [r1, #84]	; 0x54
 80063a4:	e001      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a6:	7dfb      	ldrb	r3, [r7, #23]
 80063a8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d008      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80063b6:	4b31      	ldr	r3, [pc, #196]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c2:	492e      	ldr	r1, [pc, #184]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d009      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80063d4:	4b29      	ldr	r3, [pc, #164]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80063e2:	4926      	ldr	r1, [pc, #152]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d008      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80063f4:	4b21      	ldr	r3, [pc, #132]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006400:	491e      	ldr	r1, [pc, #120]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006402:	4313      	orrs	r3, r2
 8006404:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00d      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006412:	4b1a      	ldr	r3, [pc, #104]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	4a19      	ldr	r2, [pc, #100]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006418:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800641c:	6113      	str	r3, [r2, #16]
 800641e:	4b17      	ldr	r3, [pc, #92]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006420:	691a      	ldr	r2, [r3, #16]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006428:	4914      	ldr	r1, [pc, #80]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800642a:	4313      	orrs	r3, r2
 800642c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	da08      	bge.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006436:	4b11      	ldr	r3, [pc, #68]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800643a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006442:	490e      	ldr	r1, [pc, #56]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006444:	4313      	orrs	r3, r2
 8006446:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d009      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006454:	4b09      	ldr	r3, [pc, #36]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006458:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006462:	4906      	ldr	r1, [pc, #24]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006464:	4313      	orrs	r3, r2
 8006466:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006468:	7dbb      	ldrb	r3, [r7, #22]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	e000      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
}
 8006474:	4618      	mov	r0, r3
 8006476:	3718      	adds	r7, #24
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	58024400 	.word	0x58024400

08006480 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b090      	sub	sp, #64	; 0x40
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800648e:	f040 8095 	bne.w	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006492:	4bae      	ldr	r3, [pc, #696]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006496:	f003 0307 	and.w	r3, r3, #7
 800649a:	633b      	str	r3, [r7, #48]	; 0x30
 800649c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649e:	2b04      	cmp	r3, #4
 80064a0:	f200 8088 	bhi.w	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80064a4:	a201      	add	r2, pc, #4	; (adr r2, 80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80064a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064aa:	bf00      	nop
 80064ac:	080064c1 	.word	0x080064c1
 80064b0:	080064e9 	.word	0x080064e9
 80064b4:	08006511 	.word	0x08006511
 80064b8:	080065ad 	.word	0x080065ad
 80064bc:	08006539 	.word	0x08006539

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064c0:	4ba2      	ldr	r3, [pc, #648]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064cc:	d108      	bne.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 ff64 	bl	80073a0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80064d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80064dc:	f000 bc95 	b.w	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80064e0:	2300      	movs	r3, #0
 80064e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064e4:	f000 bc91 	b.w	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064e8:	4b98      	ldr	r3, [pc, #608]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064f4:	d108      	bne.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064f6:	f107 0318 	add.w	r3, r7, #24
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 fca8 	bl	8006e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006504:	f000 bc81 	b.w	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006508:	2300      	movs	r3, #0
 800650a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800650c:	f000 bc7d 	b.w	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006510:	4b8e      	ldr	r3, [pc, #568]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006518:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800651c:	d108      	bne.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800651e:	f107 030c 	add.w	r3, r7, #12
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fde8 	bl	80070f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800652c:	f000 bc6d 	b.w	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006530:	2300      	movs	r3, #0
 8006532:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006534:	f000 bc69 	b.w	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006538:	4b84      	ldr	r3, [pc, #528]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800653a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800653c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006540:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006542:	4b82      	ldr	r3, [pc, #520]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0304 	and.w	r3, r3, #4
 800654a:	2b04      	cmp	r3, #4
 800654c:	d10c      	bne.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800654e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006550:	2b00      	cmp	r3, #0
 8006552:	d109      	bne.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006554:	4b7d      	ldr	r3, [pc, #500]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	08db      	lsrs	r3, r3, #3
 800655a:	f003 0303 	and.w	r3, r3, #3
 800655e:	4a7c      	ldr	r2, [pc, #496]	; (8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8006560:	fa22 f303 	lsr.w	r3, r2, r3
 8006564:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006566:	e01f      	b.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006568:	4b78      	ldr	r3, [pc, #480]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006574:	d106      	bne.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8006576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006578:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800657c:	d102      	bne.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800657e:	4b75      	ldr	r3, [pc, #468]	; (8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006580:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006582:	e011      	b.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006584:	4b71      	ldr	r3, [pc, #452]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800658c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006590:	d106      	bne.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8006592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006594:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006598:	d102      	bne.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800659a:	4b6f      	ldr	r3, [pc, #444]	; (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800659c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800659e:	e003      	b.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80065a0:	2300      	movs	r3, #0
 80065a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80065a4:	f000 bc31 	b.w	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80065a8:	f000 bc2f 	b.w	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80065ac:	4b6b      	ldr	r3, [pc, #428]	; (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80065ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065b0:	f000 bc2b 	b.w	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80065b4:	2300      	movs	r3, #0
 80065b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065b8:	f000 bc27 	b.w	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065c2:	f040 8095 	bne.w	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80065c6:	4b61      	ldr	r3, [pc, #388]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80065c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ca:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80065ce:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80065d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065d6:	d04d      	beq.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80065d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065de:	f200 8084 	bhi.w	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80065e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e4:	2bc0      	cmp	r3, #192	; 0xc0
 80065e6:	d07d      	beq.n	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80065e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ea:	2bc0      	cmp	r3, #192	; 0xc0
 80065ec:	d87d      	bhi.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80065ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f0:	2b80      	cmp	r3, #128	; 0x80
 80065f2:	d02d      	beq.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80065f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f6:	2b80      	cmp	r3, #128	; 0x80
 80065f8:	d877      	bhi.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80065fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d003      	beq.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8006600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006602:	2b40      	cmp	r3, #64	; 0x40
 8006604:	d012      	beq.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8006606:	e070      	b.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006608:	4b50      	ldr	r3, [pc, #320]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006610:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006614:	d107      	bne.n	8006626 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800661a:	4618      	mov	r0, r3
 800661c:	f000 fec0 	bl	80073a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006622:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006624:	e3f1      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006626:	2300      	movs	r3, #0
 8006628:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800662a:	e3ee      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800662c:	4b47      	ldr	r3, [pc, #284]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006638:	d107      	bne.n	800664a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800663a:	f107 0318 	add.w	r3, r7, #24
 800663e:	4618      	mov	r0, r3
 8006640:	f000 fc06 	bl	8006e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006648:	e3df      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800664a:	2300      	movs	r3, #0
 800664c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800664e:	e3dc      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006650:	4b3e      	ldr	r3, [pc, #248]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800665c:	d107      	bne.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800665e:	f107 030c 	add.w	r3, r7, #12
 8006662:	4618      	mov	r0, r3
 8006664:	f000 fd48 	bl	80070f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800666c:	e3cd      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800666e:	2300      	movs	r3, #0
 8006670:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006672:	e3ca      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006674:	4b35      	ldr	r3, [pc, #212]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006678:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800667c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800667e:	4b33      	ldr	r3, [pc, #204]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0304 	and.w	r3, r3, #4
 8006686:	2b04      	cmp	r3, #4
 8006688:	d10c      	bne.n	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800668a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800668c:	2b00      	cmp	r3, #0
 800668e:	d109      	bne.n	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006690:	4b2e      	ldr	r3, [pc, #184]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	08db      	lsrs	r3, r3, #3
 8006696:	f003 0303 	and.w	r3, r3, #3
 800669a:	4a2d      	ldr	r2, [pc, #180]	; (8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800669c:	fa22 f303 	lsr.w	r3, r2, r3
 80066a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066a2:	e01e      	b.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066a4:	4b29      	ldr	r3, [pc, #164]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b0:	d106      	bne.n	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80066b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066b8:	d102      	bne.n	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80066ba:	4b26      	ldr	r3, [pc, #152]	; (8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80066bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066be:	e010      	b.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066c0:	4b22      	ldr	r3, [pc, #136]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066cc:	d106      	bne.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80066ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066d4:	d102      	bne.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80066d6:	4b20      	ldr	r3, [pc, #128]	; (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80066d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066da:	e002      	b.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80066dc:	2300      	movs	r3, #0
 80066de:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80066e0:	e393      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80066e2:	e392      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80066e4:	4b1d      	ldr	r3, [pc, #116]	; (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80066e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066e8:	e38f      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80066ea:	2300      	movs	r3, #0
 80066ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066ee:	e38c      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066f6:	f040 80a7 	bne.w	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80066fa:	4b14      	ldr	r3, [pc, #80]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80066fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066fe:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006702:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006706:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800670a:	d05f      	beq.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800670c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006712:	f200 8096 	bhi.w	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006718:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800671c:	f000 808e 	beq.w	800683c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8006720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006722:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006726:	f200 808c 	bhi.w	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006730:	d03a      	beq.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8006732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006734:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006738:	f200 8083 	bhi.w	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800673c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00e      	beq.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8006742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006744:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006748:	d01c      	beq.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800674a:	e07a      	b.n	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800674c:	58024400 	.word	0x58024400
 8006750:	03d09000 	.word	0x03d09000
 8006754:	003d0900 	.word	0x003d0900
 8006758:	007a1200 	.word	0x007a1200
 800675c:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006760:	4baa      	ldr	r3, [pc, #680]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006768:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800676c:	d107      	bne.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800676e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006772:	4618      	mov	r0, r3
 8006774:	f000 fe14 	bl	80073a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800677c:	e345      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800677e:	2300      	movs	r3, #0
 8006780:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006782:	e342      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006784:	4ba1      	ldr	r3, [pc, #644]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800678c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006790:	d107      	bne.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006792:	f107 0318 	add.w	r3, r7, #24
 8006796:	4618      	mov	r0, r3
 8006798:	f000 fb5a 	bl	8006e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80067a0:	e333      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80067a2:	2300      	movs	r3, #0
 80067a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067a6:	e330      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067a8:	4b98      	ldr	r3, [pc, #608]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067b4:	d107      	bne.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067b6:	f107 030c 	add.w	r3, r7, #12
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 fc9c 	bl	80070f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80067c4:	e321      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80067c6:	2300      	movs	r3, #0
 80067c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067ca:	e31e      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80067cc:	4b8f      	ldr	r3, [pc, #572]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80067ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067d4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067d6:	4b8d      	ldr	r3, [pc, #564]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0304 	and.w	r3, r3, #4
 80067de:	2b04      	cmp	r3, #4
 80067e0:	d10c      	bne.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80067e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d109      	bne.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80067e8:	4b88      	ldr	r3, [pc, #544]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	08db      	lsrs	r3, r3, #3
 80067ee:	f003 0303 	and.w	r3, r3, #3
 80067f2:	4a87      	ldr	r2, [pc, #540]	; (8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80067f4:	fa22 f303 	lsr.w	r3, r2, r3
 80067f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067fa:	e01e      	b.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067fc:	4b83      	ldr	r3, [pc, #524]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006808:	d106      	bne.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800680a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006810:	d102      	bne.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006812:	4b80      	ldr	r3, [pc, #512]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006816:	e010      	b.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006818:	4b7c      	ldr	r3, [pc, #496]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006820:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006824:	d106      	bne.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8006826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800682c:	d102      	bne.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800682e:	4b7a      	ldr	r3, [pc, #488]	; (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006830:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006832:	e002      	b.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006834:	2300      	movs	r3, #0
 8006836:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006838:	e2e7      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800683a:	e2e6      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800683c:	4b77      	ldr	r3, [pc, #476]	; (8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800683e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006840:	e2e3      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006842:	2300      	movs	r3, #0
 8006844:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006846:	e2e0      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800684e:	f040 809c 	bne.w	800698a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006852:	4b6e      	ldr	r3, [pc, #440]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006856:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800685a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800685c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006862:	d054      	beq.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8006864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006866:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800686a:	f200 808b 	bhi.w	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800686e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006870:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006874:	f000 8083 	beq.w	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8006878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800687e:	f200 8081 	bhi.w	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006884:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006888:	d02f      	beq.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800688a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006890:	d878      	bhi.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006894:	2b00      	cmp	r3, #0
 8006896:	d004      	beq.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800689e:	d012      	beq.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80068a0:	e070      	b.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068a2:	4b5a      	ldr	r3, [pc, #360]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068ae:	d107      	bne.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 fd73 	bl	80073a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068be:	e2a4      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80068c0:	2300      	movs	r3, #0
 80068c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068c4:	e2a1      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068c6:	4b51      	ldr	r3, [pc, #324]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068d2:	d107      	bne.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068d4:	f107 0318 	add.w	r3, r7, #24
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 fab9 	bl	8006e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80068e2:	e292      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80068e4:	2300      	movs	r3, #0
 80068e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068e8:	e28f      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068ea:	4b48      	ldr	r3, [pc, #288]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068f6:	d107      	bne.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068f8:	f107 030c 	add.w	r3, r7, #12
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 fbfb 	bl	80070f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006906:	e280      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006908:	2300      	movs	r3, #0
 800690a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800690c:	e27d      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800690e:	4b3f      	ldr	r3, [pc, #252]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006912:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006916:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006918:	4b3c      	ldr	r3, [pc, #240]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0304 	and.w	r3, r3, #4
 8006920:	2b04      	cmp	r3, #4
 8006922:	d10c      	bne.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8006924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006926:	2b00      	cmp	r3, #0
 8006928:	d109      	bne.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800692a:	4b38      	ldr	r3, [pc, #224]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	08db      	lsrs	r3, r3, #3
 8006930:	f003 0303 	and.w	r3, r3, #3
 8006934:	4a36      	ldr	r2, [pc, #216]	; (8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006936:	fa22 f303 	lsr.w	r3, r2, r3
 800693a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800693c:	e01e      	b.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800693e:	4b33      	ldr	r3, [pc, #204]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800694a:	d106      	bne.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800694c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800694e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006952:	d102      	bne.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006954:	4b2f      	ldr	r3, [pc, #188]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006958:	e010      	b.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800695a:	4b2c      	ldr	r3, [pc, #176]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006962:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006966:	d106      	bne.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800696e:	d102      	bne.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006970:	4b29      	ldr	r3, [pc, #164]	; (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006974:	e002      	b.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006976:	2300      	movs	r3, #0
 8006978:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800697a:	e246      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800697c:	e245      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800697e:	4b27      	ldr	r3, [pc, #156]	; (8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006980:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006982:	e242      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006984:	2300      	movs	r3, #0
 8006986:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006988:	e23f      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006990:	f040 80a8 	bne.w	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006994:	4b1d      	ldr	r3, [pc, #116]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006998:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800699c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800699e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069a4:	d060      	beq.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80069a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069ac:	f200 8097 	bhi.w	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80069b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069b6:	f000 808f 	beq.w	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80069ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069c0:	f200 808d 	bhi.w	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80069c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069ca:	d03b      	beq.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 80069cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069d2:	f200 8084 	bhi.w	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80069d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d004      	beq.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80069dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069e2:	d01d      	beq.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 80069e4:	e07b      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069e6:	4b09      	ldr	r3, [pc, #36]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069f2:	d107      	bne.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069f8:	4618      	mov	r0, r3
 80069fa:	f000 fcd1 	bl	80073a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a02:	e202      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006a04:	2300      	movs	r3, #0
 8006a06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a08:	e1ff      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006a0a:	bf00      	nop
 8006a0c:	58024400 	.word	0x58024400
 8006a10:	03d09000 	.word	0x03d09000
 8006a14:	003d0900 	.word	0x003d0900
 8006a18:	007a1200 	.word	0x007a1200
 8006a1c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a20:	4ba3      	ldr	r3, [pc, #652]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a2c:	d107      	bne.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a2e:	f107 0318 	add.w	r3, r7, #24
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 fa0c 	bl	8006e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a3c:	e1e5      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a42:	e1e2      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a44:	4b9a      	ldr	r3, [pc, #616]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a50:	d107      	bne.n	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a52:	f107 030c 	add.w	r3, r7, #12
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 fb4e 	bl	80070f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a60:	e1d3      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006a62:	2300      	movs	r3, #0
 8006a64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a66:	e1d0      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006a68:	4b91      	ldr	r3, [pc, #580]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a70:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a72:	4b8f      	ldr	r3, [pc, #572]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0304 	and.w	r3, r3, #4
 8006a7a:	2b04      	cmp	r3, #4
 8006a7c:	d10c      	bne.n	8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8006a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d109      	bne.n	8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a84:	4b8a      	ldr	r3, [pc, #552]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	08db      	lsrs	r3, r3, #3
 8006a8a:	f003 0303 	and.w	r3, r3, #3
 8006a8e:	4a89      	ldr	r2, [pc, #548]	; (8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006a90:	fa22 f303 	lsr.w	r3, r2, r3
 8006a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a96:	e01e      	b.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a98:	4b85      	ldr	r3, [pc, #532]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aa4:	d106      	bne.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8006aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006aac:	d102      	bne.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006aae:	4b82      	ldr	r3, [pc, #520]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ab2:	e010      	b.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ab4:	4b7e      	ldr	r3, [pc, #504]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006abc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ac0:	d106      	bne.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ac8:	d102      	bne.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006aca:	4b7c      	ldr	r3, [pc, #496]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006acc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ace:	e002      	b.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006ad4:	e199      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006ad6:	e198      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ad8:	4b79      	ldr	r3, [pc, #484]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006ada:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006adc:	e195      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ae2:	e192      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006aea:	d173      	bne.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006aec:	4b70      	ldr	r3, [pc, #448]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006af0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006af4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006afc:	d02f      	beq.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8006afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b04:	d863      	bhi.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8006b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d004      	beq.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8006b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b12:	d012      	beq.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8006b14:	e05b      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b16:	4b66      	ldr	r3, [pc, #408]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b22:	d107      	bne.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b24:	f107 0318 	add.w	r3, r7, #24
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 f991 	bl	8006e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b32:	e16a      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006b34:	2300      	movs	r3, #0
 8006b36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b38:	e167      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b3a:	4b5d      	ldr	r3, [pc, #372]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b46:	d107      	bne.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b48:	f107 030c 	add.w	r3, r7, #12
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 fad3 	bl	80070f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b56:	e158      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b5c:	e155      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006b5e:	4b54      	ldr	r3, [pc, #336]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b66:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b68:	4b51      	ldr	r3, [pc, #324]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0304 	and.w	r3, r3, #4
 8006b70:	2b04      	cmp	r3, #4
 8006b72:	d10c      	bne.n	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8006b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d109      	bne.n	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b7a:	4b4d      	ldr	r3, [pc, #308]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	08db      	lsrs	r3, r3, #3
 8006b80:	f003 0303 	and.w	r3, r3, #3
 8006b84:	4a4b      	ldr	r2, [pc, #300]	; (8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b86:	fa22 f303 	lsr.w	r3, r2, r3
 8006b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b8c:	e01e      	b.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b8e:	4b48      	ldr	r3, [pc, #288]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b9a:	d106      	bne.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8006b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ba2:	d102      	bne.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006ba4:	4b44      	ldr	r3, [pc, #272]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ba8:	e010      	b.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006baa:	4b41      	ldr	r3, [pc, #260]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bb6:	d106      	bne.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bbe:	d102      	bne.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006bc0:	4b3e      	ldr	r3, [pc, #248]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bc4:	e002      	b.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006bca:	e11e      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006bcc:	e11d      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bd2:	e11a      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bda:	d133      	bne.n	8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006bdc:	4b34      	ldr	r3, [pc, #208]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006be4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d004      	beq.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8006bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bf2:	d012      	beq.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8006bf4:	e023      	b.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006bf6:	4b2e      	ldr	r3, [pc, #184]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c02:	d107      	bne.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f000 fbc9 	bl	80073a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c10:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006c12:	e0fa      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006c14:	2300      	movs	r3, #0
 8006c16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c18:	e0f7      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c1a:	4b25      	ldr	r3, [pc, #148]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c26:	d107      	bne.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c28:	f107 0318 	add.w	r3, r7, #24
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f000 f90f 	bl	8006e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006c32:	6a3b      	ldr	r3, [r7, #32]
 8006c34:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006c36:	e0e8      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c3c:	e0e5      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c42:	e0e2      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c4a:	f040 808f 	bne.w	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006c4e:	4b18      	ldr	r3, [pc, #96]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c52:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006c56:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c5e:	d075      	beq.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8006c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c66:	d87e      	bhi.n	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c6e:	d060      	beq.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c76:	d876      	bhi.n	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c7e:	d045      	beq.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8006c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c86:	d86e      	bhi.n	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c8e:	d02b      	beq.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8006c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c96:	d866      	bhi.n	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d004      	beq.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ca4:	d00e      	beq.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8006ca6:	e05e      	b.n	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006ca8:	f000 f8bc 	bl	8006e24 <HAL_RCCEx_GetD3PCLK1Freq>
 8006cac:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006cae:	e0ac      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006cb0:	58024400 	.word	0x58024400
 8006cb4:	03d09000 	.word	0x03d09000
 8006cb8:	003d0900 	.word	0x003d0900
 8006cbc:	007a1200 	.word	0x007a1200
 8006cc0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cc4:	4b53      	ldr	r3, [pc, #332]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ccc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cd0:	d107      	bne.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cd2:	f107 0318 	add.w	r3, r7, #24
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 f8ba 	bl	8006e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006ce0:	e093      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ce6:	e090      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ce8:	4b4a      	ldr	r3, [pc, #296]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cf4:	d107      	bne.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cf6:	f107 030c 	add.w	r3, r7, #12
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 f9fc 	bl	80070f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006d04:	e081      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006d06:	2300      	movs	r3, #0
 8006d08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d0a:	e07e      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d0c:	4b41      	ldr	r3, [pc, #260]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0304 	and.w	r3, r3, #4
 8006d14:	2b04      	cmp	r3, #4
 8006d16:	d109      	bne.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d18:	4b3e      	ldr	r3, [pc, #248]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	08db      	lsrs	r3, r3, #3
 8006d1e:	f003 0303 	and.w	r3, r3, #3
 8006d22:	4a3d      	ldr	r2, [pc, #244]	; (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006d24:	fa22 f303 	lsr.w	r3, r2, r3
 8006d28:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006d2a:	e06e      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d30:	e06b      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006d32:	4b38      	ldr	r3, [pc, #224]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d3e:	d102      	bne.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8006d40:	4b36      	ldr	r3, [pc, #216]	; (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006d42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006d44:	e061      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006d46:	2300      	movs	r3, #0
 8006d48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d4a:	e05e      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006d4c:	4b31      	ldr	r3, [pc, #196]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d58:	d102      	bne.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8006d5a:	4b31      	ldr	r3, [pc, #196]	; (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006d5e:	e054      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006d60:	2300      	movs	r3, #0
 8006d62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d64:	e051      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006d66:	2300      	movs	r3, #0
 8006d68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d6a:	e04e      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d72:	d148      	bne.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006d74:	4b27      	ldr	r3, [pc, #156]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d7c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d84:	d02a      	beq.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8006d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d8c:	d838      	bhi.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d004      	beq.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d9a:	d00d      	beq.n	8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8006d9c:	e030      	b.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006d9e:	4b1d      	ldr	r3, [pc, #116]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006da6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006daa:	d102      	bne.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8006dac:	4b1c      	ldr	r3, [pc, #112]	; (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006dae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006db0:	e02b      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006db2:	2300      	movs	r3, #0
 8006db4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006db6:	e028      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006db8:	4b16      	ldr	r3, [pc, #88]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dc4:	d107      	bne.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 fae8 	bl	80073a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006dd4:	e019      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dda:	e016      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ddc:	4b0d      	ldr	r3, [pc, #52]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006de4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006de8:	d107      	bne.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dea:	f107 0318 	add.w	r3, r7, #24
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 f82e 	bl	8006e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006df8:	e007      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dfe:	e004      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006e00:	2300      	movs	r3, #0
 8006e02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e04:	e001      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8006e06:	2300      	movs	r3, #0
 8006e08:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3740      	adds	r7, #64	; 0x40
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	58024400 	.word	0x58024400
 8006e18:	03d09000 	.word	0x03d09000
 8006e1c:	003d0900 	.word	0x003d0900
 8006e20:	007a1200 	.word	0x007a1200

08006e24 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006e28:	f7fe fb8e 	bl	8005548 <HAL_RCC_GetHCLKFreq>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	4b06      	ldr	r3, [pc, #24]	; (8006e48 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	091b      	lsrs	r3, r3, #4
 8006e34:	f003 0307 	and.w	r3, r3, #7
 8006e38:	4904      	ldr	r1, [pc, #16]	; (8006e4c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006e3a:	5ccb      	ldrb	r3, [r1, r3]
 8006e3c:	f003 031f 	and.w	r3, r3, #31
 8006e40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	58024400 	.word	0x58024400
 8006e4c:	0800b534 	.word	0x0800b534

08006e50 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b089      	sub	sp, #36	; 0x24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e58:	4ba1      	ldr	r3, [pc, #644]	; (80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5c:	f003 0303 	and.w	r3, r3, #3
 8006e60:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006e62:	4b9f      	ldr	r3, [pc, #636]	; (80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e66:	0b1b      	lsrs	r3, r3, #12
 8006e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e6c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006e6e:	4b9c      	ldr	r3, [pc, #624]	; (80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e72:	091b      	lsrs	r3, r3, #4
 8006e74:	f003 0301 	and.w	r3, r3, #1
 8006e78:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006e7a:	4b99      	ldr	r3, [pc, #612]	; (80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e7e:	08db      	lsrs	r3, r3, #3
 8006e80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	fb02 f303 	mul.w	r3, r2, r3
 8006e8a:	ee07 3a90 	vmov	s15, r3
 8006e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 8111 	beq.w	80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	f000 8083 	beq.w	8006fac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	f200 80a1 	bhi.w	8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d003      	beq.n	8006ebc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d056      	beq.n	8006f68 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006eba:	e099      	b.n	8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ebc:	4b88      	ldr	r3, [pc, #544]	; (80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0320 	and.w	r3, r3, #32
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d02d      	beq.n	8006f24 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ec8:	4b85      	ldr	r3, [pc, #532]	; (80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	08db      	lsrs	r3, r3, #3
 8006ece:	f003 0303 	and.w	r3, r3, #3
 8006ed2:	4a84      	ldr	r2, [pc, #528]	; (80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ed8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	ee07 3a90 	vmov	s15, r3
 8006ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	ee07 3a90 	vmov	s15, r3
 8006eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ef2:	4b7b      	ldr	r3, [pc, #492]	; (80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006efa:	ee07 3a90 	vmov	s15, r3
 8006efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f02:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f06:	eddf 5a78 	vldr	s11, [pc, #480]	; 80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f1e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006f22:	e087      	b.n	8007034 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	ee07 3a90 	vmov	s15, r3
 8006f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f2e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f36:	4b6a      	ldr	r3, [pc, #424]	; (80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f3e:	ee07 3a90 	vmov	s15, r3
 8006f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f4a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f66:	e065      	b.n	8007034 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	ee07 3a90 	vmov	s15, r3
 8006f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f72:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f7a:	4b59      	ldr	r3, [pc, #356]	; (80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f82:	ee07 3a90 	vmov	s15, r3
 8006f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f8e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fa6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006faa:	e043      	b.n	8007034 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	ee07 3a90 	vmov	s15, r3
 8006fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fb6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80070f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fbe:	4b48      	ldr	r3, [pc, #288]	; (80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fc6:	ee07 3a90 	vmov	s15, r3
 8006fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fd2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fee:	e021      	b.n	8007034 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	ee07 3a90 	vmov	s15, r3
 8006ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ffa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007002:	4b37      	ldr	r3, [pc, #220]	; (80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800700a:	ee07 3a90 	vmov	s15, r3
 800700e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007012:	ed97 6a03 	vldr	s12, [r7, #12]
 8007016:	eddf 5a34 	vldr	s11, [pc, #208]	; 80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800701a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800701e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800702a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800702e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007032:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007034:	4b2a      	ldr	r3, [pc, #168]	; (80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007038:	0a5b      	lsrs	r3, r3, #9
 800703a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800703e:	ee07 3a90 	vmov	s15, r3
 8007042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007046:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800704a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800704e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800705a:	ee17 2a90 	vmov	r2, s15
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007062:	4b1f      	ldr	r3, [pc, #124]	; (80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007066:	0c1b      	lsrs	r3, r3, #16
 8007068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800706c:	ee07 3a90 	vmov	s15, r3
 8007070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007074:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007078:	ee37 7a87 	vadd.f32	s14, s15, s14
 800707c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007088:	ee17 2a90 	vmov	r2, s15
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007090:	4b13      	ldr	r3, [pc, #76]	; (80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007094:	0e1b      	lsrs	r3, r3, #24
 8007096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800709a:	ee07 3a90 	vmov	s15, r3
 800709e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80070ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070b6:	ee17 2a90 	vmov	r2, s15
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80070be:	e008      	b.n	80070d2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	609a      	str	r2, [r3, #8]
}
 80070d2:	bf00      	nop
 80070d4:	3724      	adds	r7, #36	; 0x24
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	58024400 	.word	0x58024400
 80070e4:	03d09000 	.word	0x03d09000
 80070e8:	46000000 	.word	0x46000000
 80070ec:	4c742400 	.word	0x4c742400
 80070f0:	4a742400 	.word	0x4a742400
 80070f4:	4af42400 	.word	0x4af42400

080070f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b089      	sub	sp, #36	; 0x24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007100:	4ba1      	ldr	r3, [pc, #644]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007104:	f003 0303 	and.w	r3, r3, #3
 8007108:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800710a:	4b9f      	ldr	r3, [pc, #636]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800710c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710e:	0d1b      	lsrs	r3, r3, #20
 8007110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007114:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007116:	4b9c      	ldr	r3, [pc, #624]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711a:	0a1b      	lsrs	r3, r3, #8
 800711c:	f003 0301 	and.w	r3, r3, #1
 8007120:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007122:	4b99      	ldr	r3, [pc, #612]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007126:	08db      	lsrs	r3, r3, #3
 8007128:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	fb02 f303 	mul.w	r3, r2, r3
 8007132:	ee07 3a90 	vmov	s15, r3
 8007136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 8111 	beq.w	8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	2b02      	cmp	r3, #2
 800714a:	f000 8083 	beq.w	8007254 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	2b02      	cmp	r3, #2
 8007152:	f200 80a1 	bhi.w	8007298 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d003      	beq.n	8007164 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d056      	beq.n	8007210 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007162:	e099      	b.n	8007298 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007164:	4b88      	ldr	r3, [pc, #544]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0320 	and.w	r3, r3, #32
 800716c:	2b00      	cmp	r3, #0
 800716e:	d02d      	beq.n	80071cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007170:	4b85      	ldr	r3, [pc, #532]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	08db      	lsrs	r3, r3, #3
 8007176:	f003 0303 	and.w	r3, r3, #3
 800717a:	4a84      	ldr	r2, [pc, #528]	; (800738c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800717c:	fa22 f303 	lsr.w	r3, r2, r3
 8007180:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	ee07 3a90 	vmov	s15, r3
 8007188:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	ee07 3a90 	vmov	s15, r3
 8007192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800719a:	4b7b      	ldr	r3, [pc, #492]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a2:	ee07 3a90 	vmov	s15, r3
 80071a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80071ca:	e087      	b.n	80072dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	ee07 3a90 	vmov	s15, r3
 80071d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80071da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071de:	4b6a      	ldr	r3, [pc, #424]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e6:	ee07 3a90 	vmov	s15, r3
 80071ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80071f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800720a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800720e:	e065      	b.n	80072dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800721e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007222:	4b59      	ldr	r3, [pc, #356]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800722a:	ee07 3a90 	vmov	s15, r3
 800722e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007232:	ed97 6a03 	vldr	s12, [r7, #12]
 8007236:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800723a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800723e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800724a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800724e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007252:	e043      	b.n	80072dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800725e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800739c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007266:	4b48      	ldr	r3, [pc, #288]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800726e:	ee07 3a90 	vmov	s15, r3
 8007272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007276:	ed97 6a03 	vldr	s12, [r7, #12]
 800727a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800727e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800728a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800728e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007292:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007296:	e021      	b.n	80072dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80072a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072aa:	4b37      	ldr	r3, [pc, #220]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072b2:	ee07 3a90 	vmov	s15, r3
 80072b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80072be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80072dc:	4b2a      	ldr	r3, [pc, #168]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e0:	0a5b      	lsrs	r3, r3, #9
 80072e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80072fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007302:	ee17 2a90 	vmov	r2, s15
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800730a:	4b1f      	ldr	r3, [pc, #124]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800730c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730e:	0c1b      	lsrs	r3, r3, #16
 8007310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007314:	ee07 3a90 	vmov	s15, r3
 8007318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007320:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007324:	edd7 6a07 	vldr	s13, [r7, #28]
 8007328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800732c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007330:	ee17 2a90 	vmov	r2, s15
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007338:	4b13      	ldr	r3, [pc, #76]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800733a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733c:	0e1b      	lsrs	r3, r3, #24
 800733e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007342:	ee07 3a90 	vmov	s15, r3
 8007346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800734a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800734e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007352:	edd7 6a07 	vldr	s13, [r7, #28]
 8007356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800735a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800735e:	ee17 2a90 	vmov	r2, s15
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007366:	e008      	b.n	800737a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	609a      	str	r2, [r3, #8]
}
 800737a:	bf00      	nop
 800737c:	3724      	adds	r7, #36	; 0x24
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	58024400 	.word	0x58024400
 800738c:	03d09000 	.word	0x03d09000
 8007390:	46000000 	.word	0x46000000
 8007394:	4c742400 	.word	0x4c742400
 8007398:	4a742400 	.word	0x4a742400
 800739c:	4af42400 	.word	0x4af42400

080073a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b089      	sub	sp, #36	; 0x24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073a8:	4ba0      	ldr	r3, [pc, #640]	; (800762c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ac:	f003 0303 	and.w	r3, r3, #3
 80073b0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80073b2:	4b9e      	ldr	r3, [pc, #632]	; (800762c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b6:	091b      	lsrs	r3, r3, #4
 80073b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073bc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80073be:	4b9b      	ldr	r3, [pc, #620]	; (800762c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c2:	f003 0301 	and.w	r3, r3, #1
 80073c6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80073c8:	4b98      	ldr	r3, [pc, #608]	; (800762c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073cc:	08db      	lsrs	r3, r3, #3
 80073ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	fb02 f303 	mul.w	r3, r2, r3
 80073d8:	ee07 3a90 	vmov	s15, r3
 80073dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 8111 	beq.w	800760e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	f000 8083 	beq.w	80074fa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	f200 80a1 	bhi.w	800753e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d056      	beq.n	80074b6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007408:	e099      	b.n	800753e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800740a:	4b88      	ldr	r3, [pc, #544]	; (800762c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0320 	and.w	r3, r3, #32
 8007412:	2b00      	cmp	r3, #0
 8007414:	d02d      	beq.n	8007472 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007416:	4b85      	ldr	r3, [pc, #532]	; (800762c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	08db      	lsrs	r3, r3, #3
 800741c:	f003 0303 	and.w	r3, r3, #3
 8007420:	4a83      	ldr	r2, [pc, #524]	; (8007630 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007422:	fa22 f303 	lsr.w	r3, r2, r3
 8007426:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	ee07 3a90 	vmov	s15, r3
 800742e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	ee07 3a90 	vmov	s15, r3
 8007438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800743c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007440:	4b7a      	ldr	r3, [pc, #488]	; (800762c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007448:	ee07 3a90 	vmov	s15, r3
 800744c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007450:	ed97 6a03 	vldr	s12, [r7, #12]
 8007454:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007634 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007458:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800745c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007460:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007464:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800746c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007470:	e087      	b.n	8007582 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	ee07 3a90 	vmov	s15, r3
 8007478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800747c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007638 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007480:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007484:	4b69      	ldr	r3, [pc, #420]	; (800762c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800748c:	ee07 3a90 	vmov	s15, r3
 8007490:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007494:	ed97 6a03 	vldr	s12, [r7, #12]
 8007498:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007634 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800749c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074b4:	e065      	b.n	8007582 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	ee07 3a90 	vmov	s15, r3
 80074bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800763c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80074c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074c8:	4b58      	ldr	r3, [pc, #352]	; (800762c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d0:	ee07 3a90 	vmov	s15, r3
 80074d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80074dc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007634 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80074e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074f8:	e043      	b.n	8007582 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	ee07 3a90 	vmov	s15, r3
 8007500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007504:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007640 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007508:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800750c:	4b47      	ldr	r3, [pc, #284]	; (800762c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800750e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007514:	ee07 3a90 	vmov	s15, r3
 8007518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800751c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007520:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007634 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007524:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007528:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800752c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007530:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007538:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800753c:	e021      	b.n	8007582 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	ee07 3a90 	vmov	s15, r3
 8007544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007548:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007638 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800754c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007550:	4b36      	ldr	r3, [pc, #216]	; (800762c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007558:	ee07 3a90 	vmov	s15, r3
 800755c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007560:	ed97 6a03 	vldr	s12, [r7, #12]
 8007564:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007634 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007568:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800756c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007570:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007574:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800757c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007580:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007582:	4b2a      	ldr	r3, [pc, #168]	; (800762c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007586:	0a5b      	lsrs	r3, r3, #9
 8007588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800758c:	ee07 3a90 	vmov	s15, r3
 8007590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007594:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007598:	ee37 7a87 	vadd.f32	s14, s15, s14
 800759c:	edd7 6a07 	vldr	s13, [r7, #28]
 80075a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075a8:	ee17 2a90 	vmov	r2, s15
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80075b0:	4b1e      	ldr	r3, [pc, #120]	; (800762c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b4:	0c1b      	lsrs	r3, r3, #16
 80075b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ba:	ee07 3a90 	vmov	s15, r3
 80075be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80075ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075d6:	ee17 2a90 	vmov	r2, s15
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80075de:	4b13      	ldr	r3, [pc, #76]	; (800762c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e2:	0e1b      	lsrs	r3, r3, #24
 80075e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075e8:	ee07 3a90 	vmov	s15, r3
 80075ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80075fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007600:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007604:	ee17 2a90 	vmov	r2, s15
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800760c:	e008      	b.n	8007620 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	609a      	str	r2, [r3, #8]
}
 8007620:	bf00      	nop
 8007622:	3724      	adds	r7, #36	; 0x24
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	58024400 	.word	0x58024400
 8007630:	03d09000 	.word	0x03d09000
 8007634:	46000000 	.word	0x46000000
 8007638:	4c742400 	.word	0x4c742400
 800763c:	4a742400 	.word	0x4a742400
 8007640:	4af42400 	.word	0x4af42400

08007644 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800764e:	2300      	movs	r3, #0
 8007650:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007652:	4b53      	ldr	r3, [pc, #332]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 8007654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007656:	f003 0303 	and.w	r3, r3, #3
 800765a:	2b03      	cmp	r3, #3
 800765c:	d101      	bne.n	8007662 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e099      	b.n	8007796 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007662:	4b4f      	ldr	r3, [pc, #316]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a4e      	ldr	r2, [pc, #312]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 8007668:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800766c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800766e:	f7fa ff51 	bl	8002514 <HAL_GetTick>
 8007672:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007674:	e008      	b.n	8007688 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007676:	f7fa ff4d 	bl	8002514 <HAL_GetTick>
 800767a:	4602      	mov	r2, r0
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	2b02      	cmp	r3, #2
 8007682:	d901      	bls.n	8007688 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	e086      	b.n	8007796 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007688:	4b45      	ldr	r3, [pc, #276]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1f0      	bne.n	8007676 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007694:	4b42      	ldr	r3, [pc, #264]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 8007696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007698:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	031b      	lsls	r3, r3, #12
 80076a2:	493f      	ldr	r1, [pc, #252]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 80076a4:	4313      	orrs	r3, r2
 80076a6:	628b      	str	r3, [r1, #40]	; 0x28
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	3b01      	subs	r3, #1
 80076ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	3b01      	subs	r3, #1
 80076b8:	025b      	lsls	r3, r3, #9
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	431a      	orrs	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	3b01      	subs	r3, #1
 80076c4:	041b      	lsls	r3, r3, #16
 80076c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80076ca:	431a      	orrs	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	3b01      	subs	r3, #1
 80076d2:	061b      	lsls	r3, r3, #24
 80076d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80076d8:	4931      	ldr	r1, [pc, #196]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80076de:	4b30      	ldr	r3, [pc, #192]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 80076e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	492d      	ldr	r1, [pc, #180]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 80076ec:	4313      	orrs	r3, r2
 80076ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80076f0:	4b2b      	ldr	r3, [pc, #172]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 80076f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f4:	f023 0220 	bic.w	r2, r3, #32
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	699b      	ldr	r3, [r3, #24]
 80076fc:	4928      	ldr	r1, [pc, #160]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007702:	4b27      	ldr	r3, [pc, #156]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 8007704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007706:	4a26      	ldr	r2, [pc, #152]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 8007708:	f023 0310 	bic.w	r3, r3, #16
 800770c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800770e:	4b24      	ldr	r3, [pc, #144]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 8007710:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007712:	4b24      	ldr	r3, [pc, #144]	; (80077a4 <RCCEx_PLL2_Config+0x160>)
 8007714:	4013      	ands	r3, r2
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	69d2      	ldr	r2, [r2, #28]
 800771a:	00d2      	lsls	r2, r2, #3
 800771c:	4920      	ldr	r1, [pc, #128]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 800771e:	4313      	orrs	r3, r2
 8007720:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007722:	4b1f      	ldr	r3, [pc, #124]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 8007724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007726:	4a1e      	ldr	r2, [pc, #120]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 8007728:	f043 0310 	orr.w	r3, r3, #16
 800772c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d106      	bne.n	8007742 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007734:	4b1a      	ldr	r3, [pc, #104]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 8007736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007738:	4a19      	ldr	r2, [pc, #100]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 800773a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800773e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007740:	e00f      	b.n	8007762 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d106      	bne.n	8007756 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007748:	4b15      	ldr	r3, [pc, #84]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 800774a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774c:	4a14      	ldr	r2, [pc, #80]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 800774e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007752:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007754:	e005      	b.n	8007762 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007756:	4b12      	ldr	r3, [pc, #72]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 8007758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775a:	4a11      	ldr	r2, [pc, #68]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 800775c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007760:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007762:	4b0f      	ldr	r3, [pc, #60]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a0e      	ldr	r2, [pc, #56]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 8007768:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800776c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800776e:	f7fa fed1 	bl	8002514 <HAL_GetTick>
 8007772:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007774:	e008      	b.n	8007788 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007776:	f7fa fecd 	bl	8002514 <HAL_GetTick>
 800777a:	4602      	mov	r2, r0
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	2b02      	cmp	r3, #2
 8007782:	d901      	bls.n	8007788 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007784:	2303      	movs	r3, #3
 8007786:	e006      	b.n	8007796 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007788:	4b05      	ldr	r3, [pc, #20]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d0f0      	beq.n	8007776 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007794:	7bfb      	ldrb	r3, [r7, #15]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	58024400 	.word	0x58024400
 80077a4:	ffff0007 	.word	0xffff0007

080077a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077b6:	4b53      	ldr	r3, [pc, #332]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 80077b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ba:	f003 0303 	and.w	r3, r3, #3
 80077be:	2b03      	cmp	r3, #3
 80077c0:	d101      	bne.n	80077c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e099      	b.n	80078fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80077c6:	4b4f      	ldr	r3, [pc, #316]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a4e      	ldr	r2, [pc, #312]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 80077cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077d2:	f7fa fe9f 	bl	8002514 <HAL_GetTick>
 80077d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077d8:	e008      	b.n	80077ec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80077da:	f7fa fe9b 	bl	8002514 <HAL_GetTick>
 80077de:	4602      	mov	r2, r0
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d901      	bls.n	80077ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e086      	b.n	80078fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077ec:	4b45      	ldr	r3, [pc, #276]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1f0      	bne.n	80077da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80077f8:	4b42      	ldr	r3, [pc, #264]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 80077fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	051b      	lsls	r3, r3, #20
 8007806:	493f      	ldr	r1, [pc, #252]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 8007808:	4313      	orrs	r3, r2
 800780a:	628b      	str	r3, [r1, #40]	; 0x28
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	3b01      	subs	r3, #1
 8007812:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	3b01      	subs	r3, #1
 800781c:	025b      	lsls	r3, r3, #9
 800781e:	b29b      	uxth	r3, r3
 8007820:	431a      	orrs	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	3b01      	subs	r3, #1
 8007828:	041b      	lsls	r3, r3, #16
 800782a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800782e:	431a      	orrs	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	3b01      	subs	r3, #1
 8007836:	061b      	lsls	r3, r3, #24
 8007838:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800783c:	4931      	ldr	r1, [pc, #196]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 800783e:	4313      	orrs	r3, r2
 8007840:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007842:	4b30      	ldr	r3, [pc, #192]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 8007844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007846:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	492d      	ldr	r1, [pc, #180]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 8007850:	4313      	orrs	r3, r2
 8007852:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007854:	4b2b      	ldr	r3, [pc, #172]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 8007856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007858:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	4928      	ldr	r1, [pc, #160]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 8007862:	4313      	orrs	r3, r2
 8007864:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007866:	4b27      	ldr	r3, [pc, #156]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 8007868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786a:	4a26      	ldr	r2, [pc, #152]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 800786c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007870:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007872:	4b24      	ldr	r3, [pc, #144]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 8007874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007876:	4b24      	ldr	r3, [pc, #144]	; (8007908 <RCCEx_PLL3_Config+0x160>)
 8007878:	4013      	ands	r3, r2
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	69d2      	ldr	r2, [r2, #28]
 800787e:	00d2      	lsls	r2, r2, #3
 8007880:	4920      	ldr	r1, [pc, #128]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 8007882:	4313      	orrs	r3, r2
 8007884:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007886:	4b1f      	ldr	r3, [pc, #124]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 8007888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788a:	4a1e      	ldr	r2, [pc, #120]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 800788c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007890:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d106      	bne.n	80078a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007898:	4b1a      	ldr	r3, [pc, #104]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 800789a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789c:	4a19      	ldr	r2, [pc, #100]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 800789e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80078a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078a4:	e00f      	b.n	80078c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d106      	bne.n	80078ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80078ac:	4b15      	ldr	r3, [pc, #84]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 80078ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b0:	4a14      	ldr	r2, [pc, #80]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 80078b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80078b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078b8:	e005      	b.n	80078c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80078ba:	4b12      	ldr	r3, [pc, #72]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 80078bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078be:	4a11      	ldr	r2, [pc, #68]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 80078c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80078c6:	4b0f      	ldr	r3, [pc, #60]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a0e      	ldr	r2, [pc, #56]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 80078cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078d2:	f7fa fe1f 	bl	8002514 <HAL_GetTick>
 80078d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078d8:	e008      	b.n	80078ec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80078da:	f7fa fe1b 	bl	8002514 <HAL_GetTick>
 80078de:	4602      	mov	r2, r0
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d901      	bls.n	80078ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e006      	b.n	80078fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078ec:	4b05      	ldr	r3, [pc, #20]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d0f0      	beq.n	80078da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80078f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	58024400 	.word	0x58024400
 8007908:	ffff0007 	.word	0xffff0007

0800790c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e049      	b.n	80079b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d106      	bne.n	8007938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7fa faa0 	bl	8001e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2202      	movs	r2, #2
 800793c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	3304      	adds	r3, #4
 8007948:	4619      	mov	r1, r3
 800794a:	4610      	mov	r0, r2
 800794c:	f000 fce4 	bl	8008318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3708      	adds	r7, #8
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b082      	sub	sp, #8
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d101      	bne.n	80079cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	e049      	b.n	8007a60 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d106      	bne.n	80079e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 f841 	bl	8007a68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2202      	movs	r2, #2
 80079ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	3304      	adds	r3, #4
 80079f6:	4619      	mov	r1, r3
 80079f8:	4610      	mov	r0, r2
 80079fa:	f000 fc8d 	bl	8008318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d109      	bne.n	8007aa0 <HAL_TIM_PWM_Start+0x24>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	bf14      	ite	ne
 8007a98:	2301      	movne	r3, #1
 8007a9a:	2300      	moveq	r3, #0
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	e03c      	b.n	8007b1a <HAL_TIM_PWM_Start+0x9e>
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	2b04      	cmp	r3, #4
 8007aa4:	d109      	bne.n	8007aba <HAL_TIM_PWM_Start+0x3e>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	bf14      	ite	ne
 8007ab2:	2301      	movne	r3, #1
 8007ab4:	2300      	moveq	r3, #0
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	e02f      	b.n	8007b1a <HAL_TIM_PWM_Start+0x9e>
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	2b08      	cmp	r3, #8
 8007abe:	d109      	bne.n	8007ad4 <HAL_TIM_PWM_Start+0x58>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	bf14      	ite	ne
 8007acc:	2301      	movne	r3, #1
 8007ace:	2300      	moveq	r3, #0
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	e022      	b.n	8007b1a <HAL_TIM_PWM_Start+0x9e>
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	2b0c      	cmp	r3, #12
 8007ad8:	d109      	bne.n	8007aee <HAL_TIM_PWM_Start+0x72>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	bf14      	ite	ne
 8007ae6:	2301      	movne	r3, #1
 8007ae8:	2300      	moveq	r3, #0
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	e015      	b.n	8007b1a <HAL_TIM_PWM_Start+0x9e>
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	2b10      	cmp	r3, #16
 8007af2:	d109      	bne.n	8007b08 <HAL_TIM_PWM_Start+0x8c>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	bf14      	ite	ne
 8007b00:	2301      	movne	r3, #1
 8007b02:	2300      	moveq	r3, #0
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	e008      	b.n	8007b1a <HAL_TIM_PWM_Start+0x9e>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	bf14      	ite	ne
 8007b14:	2301      	movne	r3, #1
 8007b16:	2300      	moveq	r3, #0
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d001      	beq.n	8007b22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e0a1      	b.n	8007c66 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d104      	bne.n	8007b32 <HAL_TIM_PWM_Start+0xb6>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b30:	e023      	b.n	8007b7a <HAL_TIM_PWM_Start+0xfe>
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	2b04      	cmp	r3, #4
 8007b36:	d104      	bne.n	8007b42 <HAL_TIM_PWM_Start+0xc6>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b40:	e01b      	b.n	8007b7a <HAL_TIM_PWM_Start+0xfe>
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	2b08      	cmp	r3, #8
 8007b46:	d104      	bne.n	8007b52 <HAL_TIM_PWM_Start+0xd6>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b50:	e013      	b.n	8007b7a <HAL_TIM_PWM_Start+0xfe>
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	2b0c      	cmp	r3, #12
 8007b56:	d104      	bne.n	8007b62 <HAL_TIM_PWM_Start+0xe6>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b60:	e00b      	b.n	8007b7a <HAL_TIM_PWM_Start+0xfe>
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2b10      	cmp	r3, #16
 8007b66:	d104      	bne.n	8007b72 <HAL_TIM_PWM_Start+0xf6>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b70:	e003      	b.n	8007b7a <HAL_TIM_PWM_Start+0xfe>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2202      	movs	r2, #2
 8007b76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	6839      	ldr	r1, [r7, #0]
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 ffd6 	bl	8008b34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a38      	ldr	r2, [pc, #224]	; (8007c70 <HAL_TIM_PWM_Start+0x1f4>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d013      	beq.n	8007bba <HAL_TIM_PWM_Start+0x13e>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a37      	ldr	r2, [pc, #220]	; (8007c74 <HAL_TIM_PWM_Start+0x1f8>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d00e      	beq.n	8007bba <HAL_TIM_PWM_Start+0x13e>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a35      	ldr	r2, [pc, #212]	; (8007c78 <HAL_TIM_PWM_Start+0x1fc>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d009      	beq.n	8007bba <HAL_TIM_PWM_Start+0x13e>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a34      	ldr	r2, [pc, #208]	; (8007c7c <HAL_TIM_PWM_Start+0x200>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d004      	beq.n	8007bba <HAL_TIM_PWM_Start+0x13e>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a32      	ldr	r2, [pc, #200]	; (8007c80 <HAL_TIM_PWM_Start+0x204>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d101      	bne.n	8007bbe <HAL_TIM_PWM_Start+0x142>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e000      	b.n	8007bc0 <HAL_TIM_PWM_Start+0x144>
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d007      	beq.n	8007bd4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007bd2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a25      	ldr	r2, [pc, #148]	; (8007c70 <HAL_TIM_PWM_Start+0x1f4>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d022      	beq.n	8007c24 <HAL_TIM_PWM_Start+0x1a8>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007be6:	d01d      	beq.n	8007c24 <HAL_TIM_PWM_Start+0x1a8>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a25      	ldr	r2, [pc, #148]	; (8007c84 <HAL_TIM_PWM_Start+0x208>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d018      	beq.n	8007c24 <HAL_TIM_PWM_Start+0x1a8>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a24      	ldr	r2, [pc, #144]	; (8007c88 <HAL_TIM_PWM_Start+0x20c>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d013      	beq.n	8007c24 <HAL_TIM_PWM_Start+0x1a8>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a22      	ldr	r2, [pc, #136]	; (8007c8c <HAL_TIM_PWM_Start+0x210>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d00e      	beq.n	8007c24 <HAL_TIM_PWM_Start+0x1a8>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a1a      	ldr	r2, [pc, #104]	; (8007c74 <HAL_TIM_PWM_Start+0x1f8>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d009      	beq.n	8007c24 <HAL_TIM_PWM_Start+0x1a8>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a1e      	ldr	r2, [pc, #120]	; (8007c90 <HAL_TIM_PWM_Start+0x214>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d004      	beq.n	8007c24 <HAL_TIM_PWM_Start+0x1a8>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a16      	ldr	r2, [pc, #88]	; (8007c78 <HAL_TIM_PWM_Start+0x1fc>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d115      	bne.n	8007c50 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	689a      	ldr	r2, [r3, #8]
 8007c2a:	4b1a      	ldr	r3, [pc, #104]	; (8007c94 <HAL_TIM_PWM_Start+0x218>)
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2b06      	cmp	r3, #6
 8007c34:	d015      	beq.n	8007c62 <HAL_TIM_PWM_Start+0x1e6>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c3c:	d011      	beq.n	8007c62 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f042 0201 	orr.w	r2, r2, #1
 8007c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c4e:	e008      	b.n	8007c62 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f042 0201 	orr.w	r2, r2, #1
 8007c5e:	601a      	str	r2, [r3, #0]
 8007c60:	e000      	b.n	8007c64 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	40010000 	.word	0x40010000
 8007c74:	40010400 	.word	0x40010400
 8007c78:	40014000 	.word	0x40014000
 8007c7c:	40014400 	.word	0x40014400
 8007c80:	40014800 	.word	0x40014800
 8007c84:	40000400 	.word	0x40000400
 8007c88:	40000800 	.word	0x40000800
 8007c8c:	40000c00 	.word	0x40000c00
 8007c90:	40001800 	.word	0x40001800
 8007c94:	00010007 	.word	0x00010007

08007c98 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d101      	bne.n	8007cac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e08f      	b.n	8007dcc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d106      	bne.n	8007cc6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7fa f929 	bl	8001f18 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2202      	movs	r2, #2
 8007cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	6899      	ldr	r1, [r3, #8]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	4b3e      	ldr	r3, [pc, #248]	; (8007dd4 <HAL_TIM_Encoder_Init+0x13c>)
 8007cda:	400b      	ands	r3, r1
 8007cdc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	3304      	adds	r3, #4
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	4610      	mov	r0, r2
 8007cea:	f000 fb15 	bl	8008318 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	6a1b      	ldr	r3, [r3, #32]
 8007d04:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007d10:	693a      	ldr	r2, [r7, #16]
 8007d12:	4b31      	ldr	r3, [pc, #196]	; (8007dd8 <HAL_TIM_Encoder_Init+0x140>)
 8007d14:	4013      	ands	r3, r2
 8007d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	689a      	ldr	r2, [r3, #8]
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	699b      	ldr	r3, [r3, #24]
 8007d20:	021b      	lsls	r3, r3, #8
 8007d22:	4313      	orrs	r3, r2
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	4b2b      	ldr	r3, [pc, #172]	; (8007ddc <HAL_TIM_Encoder_Init+0x144>)
 8007d2e:	4013      	ands	r3, r2
 8007d30:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007d32:	693a      	ldr	r2, [r7, #16]
 8007d34:	4b2a      	ldr	r3, [pc, #168]	; (8007de0 <HAL_TIM_Encoder_Init+0x148>)
 8007d36:	4013      	ands	r3, r2
 8007d38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	68da      	ldr	r2, [r3, #12]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	69db      	ldr	r3, [r3, #28]
 8007d42:	021b      	lsls	r3, r3, #8
 8007d44:	4313      	orrs	r3, r2
 8007d46:	693a      	ldr	r2, [r7, #16]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	011a      	lsls	r2, r3, #4
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	031b      	lsls	r3, r3, #12
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007d66:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007d6e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	685a      	ldr	r2, [r3, #4]
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	695b      	ldr	r3, [r3, #20]
 8007d78:	011b      	lsls	r3, r3, #4
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3718      	adds	r7, #24
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	fffebff8 	.word	0xfffebff8
 8007dd8:	fffffcfc 	.word	0xfffffcfc
 8007ddc:	fffff3f3 	.word	0xfffff3f3
 8007de0:	ffff0f0f 	.word	0xffff0f0f

08007de4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007df4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007dfc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e04:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e0c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d110      	bne.n	8007e36 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e14:	7bfb      	ldrb	r3, [r7, #15]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d102      	bne.n	8007e20 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e1a:	7b7b      	ldrb	r3, [r7, #13]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d001      	beq.n	8007e24 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e069      	b.n	8007ef8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2202      	movs	r2, #2
 8007e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2202      	movs	r2, #2
 8007e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e34:	e031      	b.n	8007e9a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	2b04      	cmp	r3, #4
 8007e3a:	d110      	bne.n	8007e5e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e3c:	7bbb      	ldrb	r3, [r7, #14]
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d102      	bne.n	8007e48 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e42:	7b3b      	ldrb	r3, [r7, #12]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d001      	beq.n	8007e4c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e055      	b.n	8007ef8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2202      	movs	r2, #2
 8007e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e5c:	e01d      	b.n	8007e9a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e5e:	7bfb      	ldrb	r3, [r7, #15]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d108      	bne.n	8007e76 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e64:	7bbb      	ldrb	r3, [r7, #14]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d105      	bne.n	8007e76 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e6a:	7b7b      	ldrb	r3, [r7, #13]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d102      	bne.n	8007e76 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e70:	7b3b      	ldrb	r3, [r7, #12]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d001      	beq.n	8007e7a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e03e      	b.n	8007ef8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2202      	movs	r2, #2
 8007e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2202      	movs	r2, #2
 8007e86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2202      	movs	r2, #2
 8007e8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2202      	movs	r2, #2
 8007e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d003      	beq.n	8007ea8 <HAL_TIM_Encoder_Start+0xc4>
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	2b04      	cmp	r3, #4
 8007ea4:	d008      	beq.n	8007eb8 <HAL_TIM_Encoder_Start+0xd4>
 8007ea6:	e00f      	b.n	8007ec8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2201      	movs	r2, #1
 8007eae:	2100      	movs	r1, #0
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f000 fe3f 	bl	8008b34 <TIM_CCxChannelCmd>
      break;
 8007eb6:	e016      	b.n	8007ee6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	2104      	movs	r1, #4
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f000 fe37 	bl	8008b34 <TIM_CCxChannelCmd>
      break;
 8007ec6:	e00e      	b.n	8007ee6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	2100      	movs	r1, #0
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f000 fe2f 	bl	8008b34 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2201      	movs	r2, #1
 8007edc:	2104      	movs	r1, #4
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f000 fe28 	bl	8008b34 <TIM_CCxChannelCmd>
      break;
 8007ee4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f042 0201 	orr.w	r2, r2, #1
 8007ef4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3710      	adds	r7, #16
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d101      	bne.n	8007f1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	e0ff      	b.n	800811e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2201      	movs	r2, #1
 8007f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2b14      	cmp	r3, #20
 8007f2a:	f200 80f0 	bhi.w	800810e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007f2e:	a201      	add	r2, pc, #4	; (adr r2, 8007f34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f34:	08007f89 	.word	0x08007f89
 8007f38:	0800810f 	.word	0x0800810f
 8007f3c:	0800810f 	.word	0x0800810f
 8007f40:	0800810f 	.word	0x0800810f
 8007f44:	08007fc9 	.word	0x08007fc9
 8007f48:	0800810f 	.word	0x0800810f
 8007f4c:	0800810f 	.word	0x0800810f
 8007f50:	0800810f 	.word	0x0800810f
 8007f54:	0800800b 	.word	0x0800800b
 8007f58:	0800810f 	.word	0x0800810f
 8007f5c:	0800810f 	.word	0x0800810f
 8007f60:	0800810f 	.word	0x0800810f
 8007f64:	0800804b 	.word	0x0800804b
 8007f68:	0800810f 	.word	0x0800810f
 8007f6c:	0800810f 	.word	0x0800810f
 8007f70:	0800810f 	.word	0x0800810f
 8007f74:	0800808d 	.word	0x0800808d
 8007f78:	0800810f 	.word	0x0800810f
 8007f7c:	0800810f 	.word	0x0800810f
 8007f80:	0800810f 	.word	0x0800810f
 8007f84:	080080cd 	.word	0x080080cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68b9      	ldr	r1, [r7, #8]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f000 fa5c 	bl	800844c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	699a      	ldr	r2, [r3, #24]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f042 0208 	orr.w	r2, r2, #8
 8007fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	699a      	ldr	r2, [r3, #24]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f022 0204 	bic.w	r2, r2, #4
 8007fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6999      	ldr	r1, [r3, #24]
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	691a      	ldr	r2, [r3, #16]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	619a      	str	r2, [r3, #24]
      break;
 8007fc6:	e0a5      	b.n	8008114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68b9      	ldr	r1, [r7, #8]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f000 facc 	bl	800856c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	699a      	ldr	r2, [r3, #24]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	699a      	ldr	r2, [r3, #24]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6999      	ldr	r1, [r3, #24]
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	021a      	lsls	r2, r3, #8
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	430a      	orrs	r2, r1
 8008006:	619a      	str	r2, [r3, #24]
      break;
 8008008:	e084      	b.n	8008114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68b9      	ldr	r1, [r7, #8]
 8008010:	4618      	mov	r0, r3
 8008012:	f000 fb35 	bl	8008680 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	69da      	ldr	r2, [r3, #28]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f042 0208 	orr.w	r2, r2, #8
 8008024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	69da      	ldr	r2, [r3, #28]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f022 0204 	bic.w	r2, r2, #4
 8008034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	69d9      	ldr	r1, [r3, #28]
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	691a      	ldr	r2, [r3, #16]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	430a      	orrs	r2, r1
 8008046:	61da      	str	r2, [r3, #28]
      break;
 8008048:	e064      	b.n	8008114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68b9      	ldr	r1, [r7, #8]
 8008050:	4618      	mov	r0, r3
 8008052:	f000 fb9d 	bl	8008790 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	69da      	ldr	r2, [r3, #28]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	69da      	ldr	r2, [r3, #28]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	69d9      	ldr	r1, [r3, #28]
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	021a      	lsls	r2, r3, #8
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	430a      	orrs	r2, r1
 8008088:	61da      	str	r2, [r3, #28]
      break;
 800808a:	e043      	b.n	8008114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68b9      	ldr	r1, [r7, #8]
 8008092:	4618      	mov	r0, r3
 8008094:	f000 fbe6 	bl	8008864 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f042 0208 	orr.w	r2, r2, #8
 80080a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f022 0204 	bic.w	r2, r2, #4
 80080b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	691a      	ldr	r2, [r3, #16]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	430a      	orrs	r2, r1
 80080c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80080ca:	e023      	b.n	8008114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	68b9      	ldr	r1, [r7, #8]
 80080d2:	4618      	mov	r0, r3
 80080d4:	f000 fc2a 	bl	800892c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	021a      	lsls	r2, r3, #8
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	430a      	orrs	r2, r1
 800810a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800810c:	e002      	b.n	8008114 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	75fb      	strb	r3, [r7, #23]
      break;
 8008112:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2200      	movs	r2, #0
 8008118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800811c:	7dfb      	ldrb	r3, [r7, #23]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3718      	adds	r7, #24
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop

08008128 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800813c:	2b01      	cmp	r3, #1
 800813e:	d101      	bne.n	8008144 <HAL_TIM_ConfigClockSource+0x1c>
 8008140:	2302      	movs	r3, #2
 8008142:	e0dc      	b.n	80082fe <HAL_TIM_ConfigClockSource+0x1d6>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2202      	movs	r2, #2
 8008150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	4b6a      	ldr	r3, [pc, #424]	; (8008308 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008160:	4013      	ands	r3, r2
 8008162:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800816a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a64      	ldr	r2, [pc, #400]	; (800830c <HAL_TIM_ConfigClockSource+0x1e4>)
 800817a:	4293      	cmp	r3, r2
 800817c:	f000 80a9 	beq.w	80082d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008180:	4a62      	ldr	r2, [pc, #392]	; (800830c <HAL_TIM_ConfigClockSource+0x1e4>)
 8008182:	4293      	cmp	r3, r2
 8008184:	f200 80ae 	bhi.w	80082e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008188:	4a61      	ldr	r2, [pc, #388]	; (8008310 <HAL_TIM_ConfigClockSource+0x1e8>)
 800818a:	4293      	cmp	r3, r2
 800818c:	f000 80a1 	beq.w	80082d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008190:	4a5f      	ldr	r2, [pc, #380]	; (8008310 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008192:	4293      	cmp	r3, r2
 8008194:	f200 80a6 	bhi.w	80082e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008198:	4a5e      	ldr	r2, [pc, #376]	; (8008314 <HAL_TIM_ConfigClockSource+0x1ec>)
 800819a:	4293      	cmp	r3, r2
 800819c:	f000 8099 	beq.w	80082d2 <HAL_TIM_ConfigClockSource+0x1aa>
 80081a0:	4a5c      	ldr	r2, [pc, #368]	; (8008314 <HAL_TIM_ConfigClockSource+0x1ec>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	f200 809e 	bhi.w	80082e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80081a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80081ac:	f000 8091 	beq.w	80082d2 <HAL_TIM_ConfigClockSource+0x1aa>
 80081b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80081b4:	f200 8096 	bhi.w	80082e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80081b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081bc:	f000 8089 	beq.w	80082d2 <HAL_TIM_ConfigClockSource+0x1aa>
 80081c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081c4:	f200 808e 	bhi.w	80082e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80081c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081cc:	d03e      	beq.n	800824c <HAL_TIM_ConfigClockSource+0x124>
 80081ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081d2:	f200 8087 	bhi.w	80082e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80081d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081da:	f000 8086 	beq.w	80082ea <HAL_TIM_ConfigClockSource+0x1c2>
 80081de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081e2:	d87f      	bhi.n	80082e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80081e4:	2b70      	cmp	r3, #112	; 0x70
 80081e6:	d01a      	beq.n	800821e <HAL_TIM_ConfigClockSource+0xf6>
 80081e8:	2b70      	cmp	r3, #112	; 0x70
 80081ea:	d87b      	bhi.n	80082e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80081ec:	2b60      	cmp	r3, #96	; 0x60
 80081ee:	d050      	beq.n	8008292 <HAL_TIM_ConfigClockSource+0x16a>
 80081f0:	2b60      	cmp	r3, #96	; 0x60
 80081f2:	d877      	bhi.n	80082e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80081f4:	2b50      	cmp	r3, #80	; 0x50
 80081f6:	d03c      	beq.n	8008272 <HAL_TIM_ConfigClockSource+0x14a>
 80081f8:	2b50      	cmp	r3, #80	; 0x50
 80081fa:	d873      	bhi.n	80082e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80081fc:	2b40      	cmp	r3, #64	; 0x40
 80081fe:	d058      	beq.n	80082b2 <HAL_TIM_ConfigClockSource+0x18a>
 8008200:	2b40      	cmp	r3, #64	; 0x40
 8008202:	d86f      	bhi.n	80082e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008204:	2b30      	cmp	r3, #48	; 0x30
 8008206:	d064      	beq.n	80082d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008208:	2b30      	cmp	r3, #48	; 0x30
 800820a:	d86b      	bhi.n	80082e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800820c:	2b20      	cmp	r3, #32
 800820e:	d060      	beq.n	80082d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008210:	2b20      	cmp	r3, #32
 8008212:	d867      	bhi.n	80082e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008214:	2b00      	cmp	r3, #0
 8008216:	d05c      	beq.n	80082d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008218:	2b10      	cmp	r3, #16
 800821a:	d05a      	beq.n	80082d2 <HAL_TIM_ConfigClockSource+0x1aa>
 800821c:	e062      	b.n	80082e4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6818      	ldr	r0, [r3, #0]
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	6899      	ldr	r1, [r3, #8]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	685a      	ldr	r2, [r3, #4]
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	f000 fc61 	bl	8008af4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008240:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	609a      	str	r2, [r3, #8]
      break;
 800824a:	e04f      	b.n	80082ec <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6818      	ldr	r0, [r3, #0]
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	6899      	ldr	r1, [r3, #8]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	685a      	ldr	r2, [r3, #4]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	f000 fc4a 	bl	8008af4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	689a      	ldr	r2, [r3, #8]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800826e:	609a      	str	r2, [r3, #8]
      break;
 8008270:	e03c      	b.n	80082ec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6818      	ldr	r0, [r3, #0]
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	6859      	ldr	r1, [r3, #4]
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	461a      	mov	r2, r3
 8008280:	f000 fbba 	bl	80089f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2150      	movs	r1, #80	; 0x50
 800828a:	4618      	mov	r0, r3
 800828c:	f000 fc14 	bl	8008ab8 <TIM_ITRx_SetConfig>
      break;
 8008290:	e02c      	b.n	80082ec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6818      	ldr	r0, [r3, #0]
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	6859      	ldr	r1, [r3, #4]
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	461a      	mov	r2, r3
 80082a0:	f000 fbd9 	bl	8008a56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2160      	movs	r1, #96	; 0x60
 80082aa:	4618      	mov	r0, r3
 80082ac:	f000 fc04 	bl	8008ab8 <TIM_ITRx_SetConfig>
      break;
 80082b0:	e01c      	b.n	80082ec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6818      	ldr	r0, [r3, #0]
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	6859      	ldr	r1, [r3, #4]
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	461a      	mov	r2, r3
 80082c0:	f000 fb9a 	bl	80089f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2140      	movs	r1, #64	; 0x40
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 fbf4 	bl	8008ab8 <TIM_ITRx_SetConfig>
      break;
 80082d0:	e00c      	b.n	80082ec <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4619      	mov	r1, r3
 80082dc:	4610      	mov	r0, r2
 80082de:	f000 fbeb 	bl	8008ab8 <TIM_ITRx_SetConfig>
      break;
 80082e2:	e003      	b.n	80082ec <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	73fb      	strb	r3, [r7, #15]
      break;
 80082e8:	e000      	b.n	80082ec <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80082ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	ffceff88 	.word	0xffceff88
 800830c:	00100040 	.word	0x00100040
 8008310:	00100030 	.word	0x00100030
 8008314:	00100020 	.word	0x00100020

08008318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a40      	ldr	r2, [pc, #256]	; (800842c <TIM_Base_SetConfig+0x114>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d013      	beq.n	8008358 <TIM_Base_SetConfig+0x40>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008336:	d00f      	beq.n	8008358 <TIM_Base_SetConfig+0x40>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a3d      	ldr	r2, [pc, #244]	; (8008430 <TIM_Base_SetConfig+0x118>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d00b      	beq.n	8008358 <TIM_Base_SetConfig+0x40>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a3c      	ldr	r2, [pc, #240]	; (8008434 <TIM_Base_SetConfig+0x11c>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d007      	beq.n	8008358 <TIM_Base_SetConfig+0x40>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a3b      	ldr	r2, [pc, #236]	; (8008438 <TIM_Base_SetConfig+0x120>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d003      	beq.n	8008358 <TIM_Base_SetConfig+0x40>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a3a      	ldr	r2, [pc, #232]	; (800843c <TIM_Base_SetConfig+0x124>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d108      	bne.n	800836a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800835e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	4313      	orrs	r3, r2
 8008368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a2f      	ldr	r2, [pc, #188]	; (800842c <TIM_Base_SetConfig+0x114>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d01f      	beq.n	80083b2 <TIM_Base_SetConfig+0x9a>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008378:	d01b      	beq.n	80083b2 <TIM_Base_SetConfig+0x9a>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a2c      	ldr	r2, [pc, #176]	; (8008430 <TIM_Base_SetConfig+0x118>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d017      	beq.n	80083b2 <TIM_Base_SetConfig+0x9a>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a2b      	ldr	r2, [pc, #172]	; (8008434 <TIM_Base_SetConfig+0x11c>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d013      	beq.n	80083b2 <TIM_Base_SetConfig+0x9a>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a2a      	ldr	r2, [pc, #168]	; (8008438 <TIM_Base_SetConfig+0x120>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d00f      	beq.n	80083b2 <TIM_Base_SetConfig+0x9a>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4a29      	ldr	r2, [pc, #164]	; (800843c <TIM_Base_SetConfig+0x124>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d00b      	beq.n	80083b2 <TIM_Base_SetConfig+0x9a>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a28      	ldr	r2, [pc, #160]	; (8008440 <TIM_Base_SetConfig+0x128>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d007      	beq.n	80083b2 <TIM_Base_SetConfig+0x9a>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a27      	ldr	r2, [pc, #156]	; (8008444 <TIM_Base_SetConfig+0x12c>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d003      	beq.n	80083b2 <TIM_Base_SetConfig+0x9a>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a26      	ldr	r2, [pc, #152]	; (8008448 <TIM_Base_SetConfig+0x130>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d108      	bne.n	80083c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	689a      	ldr	r2, [r3, #8]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a10      	ldr	r2, [pc, #64]	; (800842c <TIM_Base_SetConfig+0x114>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d00f      	beq.n	8008410 <TIM_Base_SetConfig+0xf8>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a12      	ldr	r2, [pc, #72]	; (800843c <TIM_Base_SetConfig+0x124>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d00b      	beq.n	8008410 <TIM_Base_SetConfig+0xf8>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a11      	ldr	r2, [pc, #68]	; (8008440 <TIM_Base_SetConfig+0x128>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d007      	beq.n	8008410 <TIM_Base_SetConfig+0xf8>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a10      	ldr	r2, [pc, #64]	; (8008444 <TIM_Base_SetConfig+0x12c>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d003      	beq.n	8008410 <TIM_Base_SetConfig+0xf8>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a0f      	ldr	r2, [pc, #60]	; (8008448 <TIM_Base_SetConfig+0x130>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d103      	bne.n	8008418 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	691a      	ldr	r2, [r3, #16]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	615a      	str	r2, [r3, #20]
}
 800841e:	bf00      	nop
 8008420:	3714      	adds	r7, #20
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	40010000 	.word	0x40010000
 8008430:	40000400 	.word	0x40000400
 8008434:	40000800 	.word	0x40000800
 8008438:	40000c00 	.word	0x40000c00
 800843c:	40010400 	.word	0x40010400
 8008440:	40014000 	.word	0x40014000
 8008444:	40014400 	.word	0x40014400
 8008448:	40014800 	.word	0x40014800

0800844c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800844c:	b480      	push	{r7}
 800844e:	b087      	sub	sp, #28
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a1b      	ldr	r3, [r3, #32]
 800845a:	f023 0201 	bic.w	r2, r3, #1
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a1b      	ldr	r3, [r3, #32]
 8008466:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	4b37      	ldr	r3, [pc, #220]	; (8008554 <TIM_OC1_SetConfig+0x108>)
 8008478:	4013      	ands	r3, r2
 800847a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f023 0303 	bic.w	r3, r3, #3
 8008482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	4313      	orrs	r3, r2
 800848c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f023 0302 	bic.w	r3, r3, #2
 8008494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	697a      	ldr	r2, [r7, #20]
 800849c:	4313      	orrs	r3, r2
 800849e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a2d      	ldr	r2, [pc, #180]	; (8008558 <TIM_OC1_SetConfig+0x10c>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d00f      	beq.n	80084c8 <TIM_OC1_SetConfig+0x7c>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a2c      	ldr	r2, [pc, #176]	; (800855c <TIM_OC1_SetConfig+0x110>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d00b      	beq.n	80084c8 <TIM_OC1_SetConfig+0x7c>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a2b      	ldr	r2, [pc, #172]	; (8008560 <TIM_OC1_SetConfig+0x114>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d007      	beq.n	80084c8 <TIM_OC1_SetConfig+0x7c>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a2a      	ldr	r2, [pc, #168]	; (8008564 <TIM_OC1_SetConfig+0x118>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d003      	beq.n	80084c8 <TIM_OC1_SetConfig+0x7c>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4a29      	ldr	r2, [pc, #164]	; (8008568 <TIM_OC1_SetConfig+0x11c>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d10c      	bne.n	80084e2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	f023 0308 	bic.w	r3, r3, #8
 80084ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	697a      	ldr	r2, [r7, #20]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	f023 0304 	bic.w	r3, r3, #4
 80084e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a1c      	ldr	r2, [pc, #112]	; (8008558 <TIM_OC1_SetConfig+0x10c>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d00f      	beq.n	800850a <TIM_OC1_SetConfig+0xbe>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a1b      	ldr	r2, [pc, #108]	; (800855c <TIM_OC1_SetConfig+0x110>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d00b      	beq.n	800850a <TIM_OC1_SetConfig+0xbe>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a1a      	ldr	r2, [pc, #104]	; (8008560 <TIM_OC1_SetConfig+0x114>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d007      	beq.n	800850a <TIM_OC1_SetConfig+0xbe>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a19      	ldr	r2, [pc, #100]	; (8008564 <TIM_OC1_SetConfig+0x118>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d003      	beq.n	800850a <TIM_OC1_SetConfig+0xbe>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a18      	ldr	r2, [pc, #96]	; (8008568 <TIM_OC1_SetConfig+0x11c>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d111      	bne.n	800852e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	695b      	ldr	r3, [r3, #20]
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	4313      	orrs	r3, r2
 8008522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	4313      	orrs	r3, r2
 800852c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	685a      	ldr	r2, [r3, #4]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	697a      	ldr	r2, [r7, #20]
 8008546:	621a      	str	r2, [r3, #32]
}
 8008548:	bf00      	nop
 800854a:	371c      	adds	r7, #28
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr
 8008554:	fffeff8f 	.word	0xfffeff8f
 8008558:	40010000 	.word	0x40010000
 800855c:	40010400 	.word	0x40010400
 8008560:	40014000 	.word	0x40014000
 8008564:	40014400 	.word	0x40014400
 8008568:	40014800 	.word	0x40014800

0800856c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800856c:	b480      	push	{r7}
 800856e:	b087      	sub	sp, #28
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	f023 0210 	bic.w	r2, r3, #16
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a1b      	ldr	r3, [r3, #32]
 8008586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	4b34      	ldr	r3, [pc, #208]	; (8008668 <TIM_OC2_SetConfig+0xfc>)
 8008598:	4013      	ands	r3, r2
 800859a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	021b      	lsls	r3, r3, #8
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	f023 0320 	bic.w	r3, r3, #32
 80085b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	011b      	lsls	r3, r3, #4
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a29      	ldr	r2, [pc, #164]	; (800866c <TIM_OC2_SetConfig+0x100>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d003      	beq.n	80085d4 <TIM_OC2_SetConfig+0x68>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a28      	ldr	r2, [pc, #160]	; (8008670 <TIM_OC2_SetConfig+0x104>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d10d      	bne.n	80085f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	011b      	lsls	r3, r3, #4
 80085e2:	697a      	ldr	r2, [r7, #20]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a1e      	ldr	r2, [pc, #120]	; (800866c <TIM_OC2_SetConfig+0x100>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d00f      	beq.n	8008618 <TIM_OC2_SetConfig+0xac>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a1d      	ldr	r2, [pc, #116]	; (8008670 <TIM_OC2_SetConfig+0x104>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d00b      	beq.n	8008618 <TIM_OC2_SetConfig+0xac>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a1c      	ldr	r2, [pc, #112]	; (8008674 <TIM_OC2_SetConfig+0x108>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d007      	beq.n	8008618 <TIM_OC2_SetConfig+0xac>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a1b      	ldr	r2, [pc, #108]	; (8008678 <TIM_OC2_SetConfig+0x10c>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d003      	beq.n	8008618 <TIM_OC2_SetConfig+0xac>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a1a      	ldr	r2, [pc, #104]	; (800867c <TIM_OC2_SetConfig+0x110>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d113      	bne.n	8008640 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800861e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008626:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	695b      	ldr	r3, [r3, #20]
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	693a      	ldr	r2, [r7, #16]
 8008630:	4313      	orrs	r3, r2
 8008632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	4313      	orrs	r3, r2
 800863e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	685a      	ldr	r2, [r3, #4]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	621a      	str	r2, [r3, #32]
}
 800865a:	bf00      	nop
 800865c:	371c      	adds	r7, #28
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	feff8fff 	.word	0xfeff8fff
 800866c:	40010000 	.word	0x40010000
 8008670:	40010400 	.word	0x40010400
 8008674:	40014000 	.word	0x40014000
 8008678:	40014400 	.word	0x40014400
 800867c:	40014800 	.word	0x40014800

08008680 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008680:	b480      	push	{r7}
 8008682:	b087      	sub	sp, #28
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a1b      	ldr	r3, [r3, #32]
 800869a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	69db      	ldr	r3, [r3, #28]
 80086a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	4b33      	ldr	r3, [pc, #204]	; (8008778 <TIM_OC3_SetConfig+0xf8>)
 80086ac:	4013      	ands	r3, r2
 80086ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f023 0303 	bic.w	r3, r3, #3
 80086b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	4313      	orrs	r3, r2
 80086c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	021b      	lsls	r3, r3, #8
 80086d0:	697a      	ldr	r2, [r7, #20]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a28      	ldr	r2, [pc, #160]	; (800877c <TIM_OC3_SetConfig+0xfc>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d003      	beq.n	80086e6 <TIM_OC3_SetConfig+0x66>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4a27      	ldr	r2, [pc, #156]	; (8008780 <TIM_OC3_SetConfig+0x100>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d10d      	bne.n	8008702 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	021b      	lsls	r3, r3, #8
 80086f4:	697a      	ldr	r2, [r7, #20]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a1d      	ldr	r2, [pc, #116]	; (800877c <TIM_OC3_SetConfig+0xfc>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d00f      	beq.n	800872a <TIM_OC3_SetConfig+0xaa>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a1c      	ldr	r2, [pc, #112]	; (8008780 <TIM_OC3_SetConfig+0x100>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d00b      	beq.n	800872a <TIM_OC3_SetConfig+0xaa>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a1b      	ldr	r2, [pc, #108]	; (8008784 <TIM_OC3_SetConfig+0x104>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d007      	beq.n	800872a <TIM_OC3_SetConfig+0xaa>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a1a      	ldr	r2, [pc, #104]	; (8008788 <TIM_OC3_SetConfig+0x108>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d003      	beq.n	800872a <TIM_OC3_SetConfig+0xaa>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a19      	ldr	r2, [pc, #100]	; (800878c <TIM_OC3_SetConfig+0x10c>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d113      	bne.n	8008752 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	011b      	lsls	r3, r3, #4
 8008740:	693a      	ldr	r2, [r7, #16]
 8008742:	4313      	orrs	r3, r2
 8008744:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	011b      	lsls	r3, r3, #4
 800874c:	693a      	ldr	r2, [r7, #16]
 800874e:	4313      	orrs	r3, r2
 8008750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	693a      	ldr	r2, [r7, #16]
 8008756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	685a      	ldr	r2, [r3, #4]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	621a      	str	r2, [r3, #32]
}
 800876c:	bf00      	nop
 800876e:	371c      	adds	r7, #28
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr
 8008778:	fffeff8f 	.word	0xfffeff8f
 800877c:	40010000 	.word	0x40010000
 8008780:	40010400 	.word	0x40010400
 8008784:	40014000 	.word	0x40014000
 8008788:	40014400 	.word	0x40014400
 800878c:	40014800 	.word	0x40014800

08008790 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008790:	b480      	push	{r7}
 8008792:	b087      	sub	sp, #28
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a1b      	ldr	r3, [r3, #32]
 800879e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6a1b      	ldr	r3, [r3, #32]
 80087aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	69db      	ldr	r3, [r3, #28]
 80087b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	4b24      	ldr	r3, [pc, #144]	; (800884c <TIM_OC4_SetConfig+0xbc>)
 80087bc:	4013      	ands	r3, r2
 80087be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	021b      	lsls	r3, r3, #8
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	031b      	lsls	r3, r3, #12
 80087e2:	693a      	ldr	r2, [r7, #16]
 80087e4:	4313      	orrs	r3, r2
 80087e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a19      	ldr	r2, [pc, #100]	; (8008850 <TIM_OC4_SetConfig+0xc0>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d00f      	beq.n	8008810 <TIM_OC4_SetConfig+0x80>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a18      	ldr	r2, [pc, #96]	; (8008854 <TIM_OC4_SetConfig+0xc4>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d00b      	beq.n	8008810 <TIM_OC4_SetConfig+0x80>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a17      	ldr	r2, [pc, #92]	; (8008858 <TIM_OC4_SetConfig+0xc8>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d007      	beq.n	8008810 <TIM_OC4_SetConfig+0x80>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a16      	ldr	r2, [pc, #88]	; (800885c <TIM_OC4_SetConfig+0xcc>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d003      	beq.n	8008810 <TIM_OC4_SetConfig+0x80>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a15      	ldr	r2, [pc, #84]	; (8008860 <TIM_OC4_SetConfig+0xd0>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d109      	bne.n	8008824 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008816:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	695b      	ldr	r3, [r3, #20]
 800881c:	019b      	lsls	r3, r3, #6
 800881e:	697a      	ldr	r2, [r7, #20]
 8008820:	4313      	orrs	r3, r2
 8008822:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	685a      	ldr	r2, [r3, #4]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	693a      	ldr	r2, [r7, #16]
 800883c:	621a      	str	r2, [r3, #32]
}
 800883e:	bf00      	nop
 8008840:	371c      	adds	r7, #28
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	feff8fff 	.word	0xfeff8fff
 8008850:	40010000 	.word	0x40010000
 8008854:	40010400 	.word	0x40010400
 8008858:	40014000 	.word	0x40014000
 800885c:	40014400 	.word	0x40014400
 8008860:	40014800 	.word	0x40014800

08008864 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008864:	b480      	push	{r7}
 8008866:	b087      	sub	sp, #28
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800888a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	4b21      	ldr	r3, [pc, #132]	; (8008914 <TIM_OC5_SetConfig+0xb0>)
 8008890:	4013      	ands	r3, r2
 8008892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	4313      	orrs	r3, r2
 800889c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80088a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	041b      	lsls	r3, r3, #16
 80088ac:	693a      	ldr	r2, [r7, #16]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4a18      	ldr	r2, [pc, #96]	; (8008918 <TIM_OC5_SetConfig+0xb4>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d00f      	beq.n	80088da <TIM_OC5_SetConfig+0x76>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4a17      	ldr	r2, [pc, #92]	; (800891c <TIM_OC5_SetConfig+0xb8>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d00b      	beq.n	80088da <TIM_OC5_SetConfig+0x76>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4a16      	ldr	r2, [pc, #88]	; (8008920 <TIM_OC5_SetConfig+0xbc>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d007      	beq.n	80088da <TIM_OC5_SetConfig+0x76>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4a15      	ldr	r2, [pc, #84]	; (8008924 <TIM_OC5_SetConfig+0xc0>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d003      	beq.n	80088da <TIM_OC5_SetConfig+0x76>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4a14      	ldr	r2, [pc, #80]	; (8008928 <TIM_OC5_SetConfig+0xc4>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d109      	bne.n	80088ee <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	021b      	lsls	r3, r3, #8
 80088e8:	697a      	ldr	r2, [r7, #20]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	697a      	ldr	r2, [r7, #20]
 80088f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	685a      	ldr	r2, [r3, #4]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	621a      	str	r2, [r3, #32]
}
 8008908:	bf00      	nop
 800890a:	371c      	adds	r7, #28
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr
 8008914:	fffeff8f 	.word	0xfffeff8f
 8008918:	40010000 	.word	0x40010000
 800891c:	40010400 	.word	0x40010400
 8008920:	40014000 	.word	0x40014000
 8008924:	40014400 	.word	0x40014400
 8008928:	40014800 	.word	0x40014800

0800892c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800892c:	b480      	push	{r7}
 800892e:	b087      	sub	sp, #28
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a1b      	ldr	r3, [r3, #32]
 800893a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a1b      	ldr	r3, [r3, #32]
 8008946:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	4b22      	ldr	r3, [pc, #136]	; (80089e0 <TIM_OC6_SetConfig+0xb4>)
 8008958:	4013      	ands	r3, r2
 800895a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	021b      	lsls	r3, r3, #8
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	4313      	orrs	r3, r2
 8008966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800896e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	051b      	lsls	r3, r3, #20
 8008976:	693a      	ldr	r2, [r7, #16]
 8008978:	4313      	orrs	r3, r2
 800897a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a19      	ldr	r2, [pc, #100]	; (80089e4 <TIM_OC6_SetConfig+0xb8>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d00f      	beq.n	80089a4 <TIM_OC6_SetConfig+0x78>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a18      	ldr	r2, [pc, #96]	; (80089e8 <TIM_OC6_SetConfig+0xbc>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d00b      	beq.n	80089a4 <TIM_OC6_SetConfig+0x78>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a17      	ldr	r2, [pc, #92]	; (80089ec <TIM_OC6_SetConfig+0xc0>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d007      	beq.n	80089a4 <TIM_OC6_SetConfig+0x78>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a16      	ldr	r2, [pc, #88]	; (80089f0 <TIM_OC6_SetConfig+0xc4>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d003      	beq.n	80089a4 <TIM_OC6_SetConfig+0x78>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a15      	ldr	r2, [pc, #84]	; (80089f4 <TIM_OC6_SetConfig+0xc8>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d109      	bne.n	80089b8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80089aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	695b      	ldr	r3, [r3, #20]
 80089b0:	029b      	lsls	r3, r3, #10
 80089b2:	697a      	ldr	r2, [r7, #20]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	685a      	ldr	r2, [r3, #4]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	693a      	ldr	r2, [r7, #16]
 80089d0:	621a      	str	r2, [r3, #32]
}
 80089d2:	bf00      	nop
 80089d4:	371c      	adds	r7, #28
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	feff8fff 	.word	0xfeff8fff
 80089e4:	40010000 	.word	0x40010000
 80089e8:	40010400 	.word	0x40010400
 80089ec:	40014000 	.word	0x40014000
 80089f0:	40014400 	.word	0x40014400
 80089f4:	40014800 	.word	0x40014800

080089f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b087      	sub	sp, #28
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6a1b      	ldr	r3, [r3, #32]
 8008a08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6a1b      	ldr	r3, [r3, #32]
 8008a0e:	f023 0201 	bic.w	r2, r3, #1
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	011b      	lsls	r3, r3, #4
 8008a28:	693a      	ldr	r2, [r7, #16]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	f023 030a 	bic.w	r3, r3, #10
 8008a34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a36:	697a      	ldr	r2, [r7, #20]
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	693a      	ldr	r2, [r7, #16]
 8008a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	621a      	str	r2, [r3, #32]
}
 8008a4a:	bf00      	nop
 8008a4c:	371c      	adds	r7, #28
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr

08008a56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a56:	b480      	push	{r7}
 8008a58:	b087      	sub	sp, #28
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	60f8      	str	r0, [r7, #12]
 8008a5e:	60b9      	str	r1, [r7, #8]
 8008a60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6a1b      	ldr	r3, [r3, #32]
 8008a66:	f023 0210 	bic.w	r2, r3, #16
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	699b      	ldr	r3, [r3, #24]
 8008a72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6a1b      	ldr	r3, [r3, #32]
 8008a78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	031b      	lsls	r3, r3, #12
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	011b      	lsls	r3, r3, #4
 8008a98:	693a      	ldr	r2, [r7, #16]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	693a      	ldr	r2, [r7, #16]
 8008aa8:	621a      	str	r2, [r3, #32]
}
 8008aaa:	bf00      	nop
 8008aac:	371c      	adds	r7, #28
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
	...

08008ab8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ac8:	68fa      	ldr	r2, [r7, #12]
 8008aca:	4b09      	ldr	r3, [pc, #36]	; (8008af0 <TIM_ITRx_SetConfig+0x38>)
 8008acc:	4013      	ands	r3, r2
 8008ace:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ad0:	683a      	ldr	r2, [r7, #0]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	f043 0307 	orr.w	r3, r3, #7
 8008ada:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	609a      	str	r2, [r3, #8]
}
 8008ae2:	bf00      	nop
 8008ae4:	3714      	adds	r7, #20
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	ffcfff8f 	.word	0xffcfff8f

08008af4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b087      	sub	sp, #28
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	607a      	str	r2, [r7, #4]
 8008b00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	021a      	lsls	r2, r3, #8
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	431a      	orrs	r2, r3
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	697a      	ldr	r2, [r7, #20]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	697a      	ldr	r2, [r7, #20]
 8008b26:	609a      	str	r2, [r3, #8]
}
 8008b28:	bf00      	nop
 8008b2a:	371c      	adds	r7, #28
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b087      	sub	sp, #28
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	f003 031f 	and.w	r3, r3, #31
 8008b46:	2201      	movs	r2, #1
 8008b48:	fa02 f303 	lsl.w	r3, r2, r3
 8008b4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6a1a      	ldr	r2, [r3, #32]
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	43db      	mvns	r3, r3
 8008b56:	401a      	ands	r2, r3
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6a1a      	ldr	r2, [r3, #32]
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	f003 031f 	and.w	r3, r3, #31
 8008b66:	6879      	ldr	r1, [r7, #4]
 8008b68:	fa01 f303 	lsl.w	r3, r1, r3
 8008b6c:	431a      	orrs	r2, r3
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	621a      	str	r2, [r3, #32]
}
 8008b72:	bf00      	nop
 8008b74:	371c      	adds	r7, #28
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr
	...

08008b80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d101      	bne.n	8008b98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b94:	2302      	movs	r3, #2
 8008b96:	e06d      	b.n	8008c74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2202      	movs	r2, #2
 8008ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a30      	ldr	r2, [pc, #192]	; (8008c80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d004      	beq.n	8008bcc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a2f      	ldr	r2, [pc, #188]	; (8008c84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d108      	bne.n	8008bde <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008bd2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008be4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68fa      	ldr	r2, [r7, #12]
 8008bf6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a20      	ldr	r2, [pc, #128]	; (8008c80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d022      	beq.n	8008c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c0a:	d01d      	beq.n	8008c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a1d      	ldr	r2, [pc, #116]	; (8008c88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d018      	beq.n	8008c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a1c      	ldr	r2, [pc, #112]	; (8008c8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d013      	beq.n	8008c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a1a      	ldr	r2, [pc, #104]	; (8008c90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d00e      	beq.n	8008c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a15      	ldr	r2, [pc, #84]	; (8008c84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d009      	beq.n	8008c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a16      	ldr	r2, [pc, #88]	; (8008c94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d004      	beq.n	8008c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a15      	ldr	r2, [pc, #84]	; (8008c98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d10c      	bne.n	8008c62 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68ba      	ldr	r2, [r7, #8]
 8008c60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2201      	movs	r2, #1
 8008c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr
 8008c80:	40010000 	.word	0x40010000
 8008c84:	40010400 	.word	0x40010400
 8008c88:	40000400 	.word	0x40000400
 8008c8c:	40000800 	.word	0x40000800
 8008c90:	40000c00 	.word	0x40000c00
 8008c94:	40001800 	.word	0x40001800
 8008c98:	40014000 	.word	0x40014000

08008c9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d101      	bne.n	8008cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	e042      	b.n	8008d34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d106      	bne.n	8008cc6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f7f9 f9af 	bl	8002024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2224      	movs	r2, #36	; 0x24
 8008cca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f022 0201 	bic.w	r2, r2, #1
 8008cdc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 f8c2 	bl	8008e68 <UART_SetConfig>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d101      	bne.n	8008cee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	e022      	b.n	8008d34 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d002      	beq.n	8008cfc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fe16 	bl	8009928 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	685a      	ldr	r2, [r3, #4]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	689a      	ldr	r2, [r3, #8]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f042 0201 	orr.w	r2, r2, #1
 8008d2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 fe9d 	bl	8009a6c <UART_CheckIdleState>
 8008d32:	4603      	mov	r3, r0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b08a      	sub	sp, #40	; 0x28
 8008d40:	af02      	add	r7, sp, #8
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	603b      	str	r3, [r7, #0]
 8008d48:	4613      	mov	r3, r2
 8008d4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d52:	2b20      	cmp	r3, #32
 8008d54:	f040 8083 	bne.w	8008e5e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d002      	beq.n	8008d64 <HAL_UART_Transmit+0x28>
 8008d5e:	88fb      	ldrh	r3, [r7, #6]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d101      	bne.n	8008d68 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	e07b      	b.n	8008e60 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d101      	bne.n	8008d76 <HAL_UART_Transmit+0x3a>
 8008d72:	2302      	movs	r3, #2
 8008d74:	e074      	b.n	8008e60 <HAL_UART_Transmit+0x124>
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2201      	movs	r2, #1
 8008d7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2221      	movs	r2, #33	; 0x21
 8008d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d8e:	f7f9 fbc1 	bl	8002514 <HAL_GetTick>
 8008d92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	88fa      	ldrh	r2, [r7, #6]
 8008d98:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	88fa      	ldrh	r2, [r7, #6]
 8008da0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dac:	d108      	bne.n	8008dc0 <HAL_UART_Transmit+0x84>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d104      	bne.n	8008dc0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008db6:	2300      	movs	r3, #0
 8008db8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	61bb      	str	r3, [r7, #24]
 8008dbe:	e003      	b.n	8008dc8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008dd0:	e02c      	b.n	8008e2c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	2180      	movs	r1, #128	; 0x80
 8008ddc:	68f8      	ldr	r0, [r7, #12]
 8008dde:	f000 fe90 	bl	8009b02 <UART_WaitOnFlagUntilTimeout>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d001      	beq.n	8008dec <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008de8:	2303      	movs	r3, #3
 8008dea:	e039      	b.n	8008e60 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d10b      	bne.n	8008e0a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	881b      	ldrh	r3, [r3, #0]
 8008df6:	461a      	mov	r2, r3
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	3302      	adds	r3, #2
 8008e06:	61bb      	str	r3, [r7, #24]
 8008e08:	e007      	b.n	8008e1a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	781a      	ldrb	r2, [r3, #0]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	3301      	adds	r3, #1
 8008e18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	3b01      	subs	r3, #1
 8008e24:	b29a      	uxth	r2, r3
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d1cc      	bne.n	8008dd2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	2140      	movs	r1, #64	; 0x40
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	f000 fe5d 	bl	8009b02 <UART_WaitOnFlagUntilTimeout>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d001      	beq.n	8008e52 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008e4e:	2303      	movs	r3, #3
 8008e50:	e006      	b.n	8008e60 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2220      	movs	r2, #32
 8008e56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	e000      	b.n	8008e60 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008e5e:	2302      	movs	r3, #2
  }
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3720      	adds	r7, #32
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e68:	b5b0      	push	{r4, r5, r7, lr}
 8008e6a:	b08e      	sub	sp, #56	; 0x38
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e70:	2300      	movs	r3, #0
 8008e72:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	689a      	ldr	r2, [r3, #8]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	431a      	orrs	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	431a      	orrs	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	69db      	ldr	r3, [r3, #28]
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	4bbf      	ldr	r3, [pc, #764]	; (8009194 <UART_SetConfig+0x32c>)
 8008e96:	4013      	ands	r3, r2
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	6812      	ldr	r2, [r2, #0]
 8008e9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008e9e:	430b      	orrs	r3, r1
 8008ea0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	68da      	ldr	r2, [r3, #12]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	430a      	orrs	r2, r1
 8008eb6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4ab5      	ldr	r2, [pc, #724]	; (8009198 <UART_SetConfig+0x330>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d004      	beq.n	8008ed2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a1b      	ldr	r3, [r3, #32]
 8008ecc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	689a      	ldr	r2, [r3, #8]
 8008ed8:	4bb0      	ldr	r3, [pc, #704]	; (800919c <UART_SetConfig+0x334>)
 8008eda:	4013      	ands	r3, r2
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	6812      	ldr	r2, [r2, #0]
 8008ee0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008ee2:	430b      	orrs	r3, r1
 8008ee4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eec:	f023 010f 	bic.w	r1, r3, #15
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	430a      	orrs	r2, r1
 8008efa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4aa7      	ldr	r2, [pc, #668]	; (80091a0 <UART_SetConfig+0x338>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d176      	bne.n	8008ff4 <UART_SetConfig+0x18c>
 8008f06:	4ba7      	ldr	r3, [pc, #668]	; (80091a4 <UART_SetConfig+0x33c>)
 8008f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f0e:	2b28      	cmp	r3, #40	; 0x28
 8008f10:	d86c      	bhi.n	8008fec <UART_SetConfig+0x184>
 8008f12:	a201      	add	r2, pc, #4	; (adr r2, 8008f18 <UART_SetConfig+0xb0>)
 8008f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f18:	08008fbd 	.word	0x08008fbd
 8008f1c:	08008fed 	.word	0x08008fed
 8008f20:	08008fed 	.word	0x08008fed
 8008f24:	08008fed 	.word	0x08008fed
 8008f28:	08008fed 	.word	0x08008fed
 8008f2c:	08008fed 	.word	0x08008fed
 8008f30:	08008fed 	.word	0x08008fed
 8008f34:	08008fed 	.word	0x08008fed
 8008f38:	08008fc5 	.word	0x08008fc5
 8008f3c:	08008fed 	.word	0x08008fed
 8008f40:	08008fed 	.word	0x08008fed
 8008f44:	08008fed 	.word	0x08008fed
 8008f48:	08008fed 	.word	0x08008fed
 8008f4c:	08008fed 	.word	0x08008fed
 8008f50:	08008fed 	.word	0x08008fed
 8008f54:	08008fed 	.word	0x08008fed
 8008f58:	08008fcd 	.word	0x08008fcd
 8008f5c:	08008fed 	.word	0x08008fed
 8008f60:	08008fed 	.word	0x08008fed
 8008f64:	08008fed 	.word	0x08008fed
 8008f68:	08008fed 	.word	0x08008fed
 8008f6c:	08008fed 	.word	0x08008fed
 8008f70:	08008fed 	.word	0x08008fed
 8008f74:	08008fed 	.word	0x08008fed
 8008f78:	08008fd5 	.word	0x08008fd5
 8008f7c:	08008fed 	.word	0x08008fed
 8008f80:	08008fed 	.word	0x08008fed
 8008f84:	08008fed 	.word	0x08008fed
 8008f88:	08008fed 	.word	0x08008fed
 8008f8c:	08008fed 	.word	0x08008fed
 8008f90:	08008fed 	.word	0x08008fed
 8008f94:	08008fed 	.word	0x08008fed
 8008f98:	08008fdd 	.word	0x08008fdd
 8008f9c:	08008fed 	.word	0x08008fed
 8008fa0:	08008fed 	.word	0x08008fed
 8008fa4:	08008fed 	.word	0x08008fed
 8008fa8:	08008fed 	.word	0x08008fed
 8008fac:	08008fed 	.word	0x08008fed
 8008fb0:	08008fed 	.word	0x08008fed
 8008fb4:	08008fed 	.word	0x08008fed
 8008fb8:	08008fe5 	.word	0x08008fe5
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fc2:	e222      	b.n	800940a <UART_SetConfig+0x5a2>
 8008fc4:	2304      	movs	r3, #4
 8008fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fca:	e21e      	b.n	800940a <UART_SetConfig+0x5a2>
 8008fcc:	2308      	movs	r3, #8
 8008fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fd2:	e21a      	b.n	800940a <UART_SetConfig+0x5a2>
 8008fd4:	2310      	movs	r3, #16
 8008fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fda:	e216      	b.n	800940a <UART_SetConfig+0x5a2>
 8008fdc:	2320      	movs	r3, #32
 8008fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fe2:	e212      	b.n	800940a <UART_SetConfig+0x5a2>
 8008fe4:	2340      	movs	r3, #64	; 0x40
 8008fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fea:	e20e      	b.n	800940a <UART_SetConfig+0x5a2>
 8008fec:	2380      	movs	r3, #128	; 0x80
 8008fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ff2:	e20a      	b.n	800940a <UART_SetConfig+0x5a2>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a6b      	ldr	r2, [pc, #428]	; (80091a8 <UART_SetConfig+0x340>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d130      	bne.n	8009060 <UART_SetConfig+0x1f8>
 8008ffe:	4b69      	ldr	r3, [pc, #420]	; (80091a4 <UART_SetConfig+0x33c>)
 8009000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009002:	f003 0307 	and.w	r3, r3, #7
 8009006:	2b05      	cmp	r3, #5
 8009008:	d826      	bhi.n	8009058 <UART_SetConfig+0x1f0>
 800900a:	a201      	add	r2, pc, #4	; (adr r2, 8009010 <UART_SetConfig+0x1a8>)
 800900c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009010:	08009029 	.word	0x08009029
 8009014:	08009031 	.word	0x08009031
 8009018:	08009039 	.word	0x08009039
 800901c:	08009041 	.word	0x08009041
 8009020:	08009049 	.word	0x08009049
 8009024:	08009051 	.word	0x08009051
 8009028:	2300      	movs	r3, #0
 800902a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800902e:	e1ec      	b.n	800940a <UART_SetConfig+0x5a2>
 8009030:	2304      	movs	r3, #4
 8009032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009036:	e1e8      	b.n	800940a <UART_SetConfig+0x5a2>
 8009038:	2308      	movs	r3, #8
 800903a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800903e:	e1e4      	b.n	800940a <UART_SetConfig+0x5a2>
 8009040:	2310      	movs	r3, #16
 8009042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009046:	e1e0      	b.n	800940a <UART_SetConfig+0x5a2>
 8009048:	2320      	movs	r3, #32
 800904a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800904e:	e1dc      	b.n	800940a <UART_SetConfig+0x5a2>
 8009050:	2340      	movs	r3, #64	; 0x40
 8009052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009056:	e1d8      	b.n	800940a <UART_SetConfig+0x5a2>
 8009058:	2380      	movs	r3, #128	; 0x80
 800905a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800905e:	e1d4      	b.n	800940a <UART_SetConfig+0x5a2>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a51      	ldr	r2, [pc, #324]	; (80091ac <UART_SetConfig+0x344>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d130      	bne.n	80090cc <UART_SetConfig+0x264>
 800906a:	4b4e      	ldr	r3, [pc, #312]	; (80091a4 <UART_SetConfig+0x33c>)
 800906c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800906e:	f003 0307 	and.w	r3, r3, #7
 8009072:	2b05      	cmp	r3, #5
 8009074:	d826      	bhi.n	80090c4 <UART_SetConfig+0x25c>
 8009076:	a201      	add	r2, pc, #4	; (adr r2, 800907c <UART_SetConfig+0x214>)
 8009078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907c:	08009095 	.word	0x08009095
 8009080:	0800909d 	.word	0x0800909d
 8009084:	080090a5 	.word	0x080090a5
 8009088:	080090ad 	.word	0x080090ad
 800908c:	080090b5 	.word	0x080090b5
 8009090:	080090bd 	.word	0x080090bd
 8009094:	2300      	movs	r3, #0
 8009096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800909a:	e1b6      	b.n	800940a <UART_SetConfig+0x5a2>
 800909c:	2304      	movs	r3, #4
 800909e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090a2:	e1b2      	b.n	800940a <UART_SetConfig+0x5a2>
 80090a4:	2308      	movs	r3, #8
 80090a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090aa:	e1ae      	b.n	800940a <UART_SetConfig+0x5a2>
 80090ac:	2310      	movs	r3, #16
 80090ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090b2:	e1aa      	b.n	800940a <UART_SetConfig+0x5a2>
 80090b4:	2320      	movs	r3, #32
 80090b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090ba:	e1a6      	b.n	800940a <UART_SetConfig+0x5a2>
 80090bc:	2340      	movs	r3, #64	; 0x40
 80090be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090c2:	e1a2      	b.n	800940a <UART_SetConfig+0x5a2>
 80090c4:	2380      	movs	r3, #128	; 0x80
 80090c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090ca:	e19e      	b.n	800940a <UART_SetConfig+0x5a2>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a37      	ldr	r2, [pc, #220]	; (80091b0 <UART_SetConfig+0x348>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d130      	bne.n	8009138 <UART_SetConfig+0x2d0>
 80090d6:	4b33      	ldr	r3, [pc, #204]	; (80091a4 <UART_SetConfig+0x33c>)
 80090d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090da:	f003 0307 	and.w	r3, r3, #7
 80090de:	2b05      	cmp	r3, #5
 80090e0:	d826      	bhi.n	8009130 <UART_SetConfig+0x2c8>
 80090e2:	a201      	add	r2, pc, #4	; (adr r2, 80090e8 <UART_SetConfig+0x280>)
 80090e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e8:	08009101 	.word	0x08009101
 80090ec:	08009109 	.word	0x08009109
 80090f0:	08009111 	.word	0x08009111
 80090f4:	08009119 	.word	0x08009119
 80090f8:	08009121 	.word	0x08009121
 80090fc:	08009129 	.word	0x08009129
 8009100:	2300      	movs	r3, #0
 8009102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009106:	e180      	b.n	800940a <UART_SetConfig+0x5a2>
 8009108:	2304      	movs	r3, #4
 800910a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800910e:	e17c      	b.n	800940a <UART_SetConfig+0x5a2>
 8009110:	2308      	movs	r3, #8
 8009112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009116:	e178      	b.n	800940a <UART_SetConfig+0x5a2>
 8009118:	2310      	movs	r3, #16
 800911a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800911e:	e174      	b.n	800940a <UART_SetConfig+0x5a2>
 8009120:	2320      	movs	r3, #32
 8009122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009126:	e170      	b.n	800940a <UART_SetConfig+0x5a2>
 8009128:	2340      	movs	r3, #64	; 0x40
 800912a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800912e:	e16c      	b.n	800940a <UART_SetConfig+0x5a2>
 8009130:	2380      	movs	r3, #128	; 0x80
 8009132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009136:	e168      	b.n	800940a <UART_SetConfig+0x5a2>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a1d      	ldr	r2, [pc, #116]	; (80091b4 <UART_SetConfig+0x34c>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d142      	bne.n	80091c8 <UART_SetConfig+0x360>
 8009142:	4b18      	ldr	r3, [pc, #96]	; (80091a4 <UART_SetConfig+0x33c>)
 8009144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009146:	f003 0307 	and.w	r3, r3, #7
 800914a:	2b05      	cmp	r3, #5
 800914c:	d838      	bhi.n	80091c0 <UART_SetConfig+0x358>
 800914e:	a201      	add	r2, pc, #4	; (adr r2, 8009154 <UART_SetConfig+0x2ec>)
 8009150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009154:	0800916d 	.word	0x0800916d
 8009158:	08009175 	.word	0x08009175
 800915c:	0800917d 	.word	0x0800917d
 8009160:	08009185 	.word	0x08009185
 8009164:	0800918d 	.word	0x0800918d
 8009168:	080091b9 	.word	0x080091b9
 800916c:	2300      	movs	r3, #0
 800916e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009172:	e14a      	b.n	800940a <UART_SetConfig+0x5a2>
 8009174:	2304      	movs	r3, #4
 8009176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800917a:	e146      	b.n	800940a <UART_SetConfig+0x5a2>
 800917c:	2308      	movs	r3, #8
 800917e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009182:	e142      	b.n	800940a <UART_SetConfig+0x5a2>
 8009184:	2310      	movs	r3, #16
 8009186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800918a:	e13e      	b.n	800940a <UART_SetConfig+0x5a2>
 800918c:	2320      	movs	r3, #32
 800918e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009192:	e13a      	b.n	800940a <UART_SetConfig+0x5a2>
 8009194:	cfff69f3 	.word	0xcfff69f3
 8009198:	58000c00 	.word	0x58000c00
 800919c:	11fff4ff 	.word	0x11fff4ff
 80091a0:	40011000 	.word	0x40011000
 80091a4:	58024400 	.word	0x58024400
 80091a8:	40004400 	.word	0x40004400
 80091ac:	40004800 	.word	0x40004800
 80091b0:	40004c00 	.word	0x40004c00
 80091b4:	40005000 	.word	0x40005000
 80091b8:	2340      	movs	r3, #64	; 0x40
 80091ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091be:	e124      	b.n	800940a <UART_SetConfig+0x5a2>
 80091c0:	2380      	movs	r3, #128	; 0x80
 80091c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091c6:	e120      	b.n	800940a <UART_SetConfig+0x5a2>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4acc      	ldr	r2, [pc, #816]	; (8009500 <UART_SetConfig+0x698>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d176      	bne.n	80092c0 <UART_SetConfig+0x458>
 80091d2:	4bcc      	ldr	r3, [pc, #816]	; (8009504 <UART_SetConfig+0x69c>)
 80091d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091da:	2b28      	cmp	r3, #40	; 0x28
 80091dc:	d86c      	bhi.n	80092b8 <UART_SetConfig+0x450>
 80091de:	a201      	add	r2, pc, #4	; (adr r2, 80091e4 <UART_SetConfig+0x37c>)
 80091e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e4:	08009289 	.word	0x08009289
 80091e8:	080092b9 	.word	0x080092b9
 80091ec:	080092b9 	.word	0x080092b9
 80091f0:	080092b9 	.word	0x080092b9
 80091f4:	080092b9 	.word	0x080092b9
 80091f8:	080092b9 	.word	0x080092b9
 80091fc:	080092b9 	.word	0x080092b9
 8009200:	080092b9 	.word	0x080092b9
 8009204:	08009291 	.word	0x08009291
 8009208:	080092b9 	.word	0x080092b9
 800920c:	080092b9 	.word	0x080092b9
 8009210:	080092b9 	.word	0x080092b9
 8009214:	080092b9 	.word	0x080092b9
 8009218:	080092b9 	.word	0x080092b9
 800921c:	080092b9 	.word	0x080092b9
 8009220:	080092b9 	.word	0x080092b9
 8009224:	08009299 	.word	0x08009299
 8009228:	080092b9 	.word	0x080092b9
 800922c:	080092b9 	.word	0x080092b9
 8009230:	080092b9 	.word	0x080092b9
 8009234:	080092b9 	.word	0x080092b9
 8009238:	080092b9 	.word	0x080092b9
 800923c:	080092b9 	.word	0x080092b9
 8009240:	080092b9 	.word	0x080092b9
 8009244:	080092a1 	.word	0x080092a1
 8009248:	080092b9 	.word	0x080092b9
 800924c:	080092b9 	.word	0x080092b9
 8009250:	080092b9 	.word	0x080092b9
 8009254:	080092b9 	.word	0x080092b9
 8009258:	080092b9 	.word	0x080092b9
 800925c:	080092b9 	.word	0x080092b9
 8009260:	080092b9 	.word	0x080092b9
 8009264:	080092a9 	.word	0x080092a9
 8009268:	080092b9 	.word	0x080092b9
 800926c:	080092b9 	.word	0x080092b9
 8009270:	080092b9 	.word	0x080092b9
 8009274:	080092b9 	.word	0x080092b9
 8009278:	080092b9 	.word	0x080092b9
 800927c:	080092b9 	.word	0x080092b9
 8009280:	080092b9 	.word	0x080092b9
 8009284:	080092b1 	.word	0x080092b1
 8009288:	2301      	movs	r3, #1
 800928a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800928e:	e0bc      	b.n	800940a <UART_SetConfig+0x5a2>
 8009290:	2304      	movs	r3, #4
 8009292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009296:	e0b8      	b.n	800940a <UART_SetConfig+0x5a2>
 8009298:	2308      	movs	r3, #8
 800929a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800929e:	e0b4      	b.n	800940a <UART_SetConfig+0x5a2>
 80092a0:	2310      	movs	r3, #16
 80092a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092a6:	e0b0      	b.n	800940a <UART_SetConfig+0x5a2>
 80092a8:	2320      	movs	r3, #32
 80092aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092ae:	e0ac      	b.n	800940a <UART_SetConfig+0x5a2>
 80092b0:	2340      	movs	r3, #64	; 0x40
 80092b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092b6:	e0a8      	b.n	800940a <UART_SetConfig+0x5a2>
 80092b8:	2380      	movs	r3, #128	; 0x80
 80092ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092be:	e0a4      	b.n	800940a <UART_SetConfig+0x5a2>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a90      	ldr	r2, [pc, #576]	; (8009508 <UART_SetConfig+0x6a0>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d130      	bne.n	800932c <UART_SetConfig+0x4c4>
 80092ca:	4b8e      	ldr	r3, [pc, #568]	; (8009504 <UART_SetConfig+0x69c>)
 80092cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ce:	f003 0307 	and.w	r3, r3, #7
 80092d2:	2b05      	cmp	r3, #5
 80092d4:	d826      	bhi.n	8009324 <UART_SetConfig+0x4bc>
 80092d6:	a201      	add	r2, pc, #4	; (adr r2, 80092dc <UART_SetConfig+0x474>)
 80092d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092dc:	080092f5 	.word	0x080092f5
 80092e0:	080092fd 	.word	0x080092fd
 80092e4:	08009305 	.word	0x08009305
 80092e8:	0800930d 	.word	0x0800930d
 80092ec:	08009315 	.word	0x08009315
 80092f0:	0800931d 	.word	0x0800931d
 80092f4:	2300      	movs	r3, #0
 80092f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092fa:	e086      	b.n	800940a <UART_SetConfig+0x5a2>
 80092fc:	2304      	movs	r3, #4
 80092fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009302:	e082      	b.n	800940a <UART_SetConfig+0x5a2>
 8009304:	2308      	movs	r3, #8
 8009306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800930a:	e07e      	b.n	800940a <UART_SetConfig+0x5a2>
 800930c:	2310      	movs	r3, #16
 800930e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009312:	e07a      	b.n	800940a <UART_SetConfig+0x5a2>
 8009314:	2320      	movs	r3, #32
 8009316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800931a:	e076      	b.n	800940a <UART_SetConfig+0x5a2>
 800931c:	2340      	movs	r3, #64	; 0x40
 800931e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009322:	e072      	b.n	800940a <UART_SetConfig+0x5a2>
 8009324:	2380      	movs	r3, #128	; 0x80
 8009326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800932a:	e06e      	b.n	800940a <UART_SetConfig+0x5a2>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a76      	ldr	r2, [pc, #472]	; (800950c <UART_SetConfig+0x6a4>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d130      	bne.n	8009398 <UART_SetConfig+0x530>
 8009336:	4b73      	ldr	r3, [pc, #460]	; (8009504 <UART_SetConfig+0x69c>)
 8009338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800933a:	f003 0307 	and.w	r3, r3, #7
 800933e:	2b05      	cmp	r3, #5
 8009340:	d826      	bhi.n	8009390 <UART_SetConfig+0x528>
 8009342:	a201      	add	r2, pc, #4	; (adr r2, 8009348 <UART_SetConfig+0x4e0>)
 8009344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009348:	08009361 	.word	0x08009361
 800934c:	08009369 	.word	0x08009369
 8009350:	08009371 	.word	0x08009371
 8009354:	08009379 	.word	0x08009379
 8009358:	08009381 	.word	0x08009381
 800935c:	08009389 	.word	0x08009389
 8009360:	2300      	movs	r3, #0
 8009362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009366:	e050      	b.n	800940a <UART_SetConfig+0x5a2>
 8009368:	2304      	movs	r3, #4
 800936a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800936e:	e04c      	b.n	800940a <UART_SetConfig+0x5a2>
 8009370:	2308      	movs	r3, #8
 8009372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009376:	e048      	b.n	800940a <UART_SetConfig+0x5a2>
 8009378:	2310      	movs	r3, #16
 800937a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800937e:	e044      	b.n	800940a <UART_SetConfig+0x5a2>
 8009380:	2320      	movs	r3, #32
 8009382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009386:	e040      	b.n	800940a <UART_SetConfig+0x5a2>
 8009388:	2340      	movs	r3, #64	; 0x40
 800938a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800938e:	e03c      	b.n	800940a <UART_SetConfig+0x5a2>
 8009390:	2380      	movs	r3, #128	; 0x80
 8009392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009396:	e038      	b.n	800940a <UART_SetConfig+0x5a2>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a5c      	ldr	r2, [pc, #368]	; (8009510 <UART_SetConfig+0x6a8>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d130      	bne.n	8009404 <UART_SetConfig+0x59c>
 80093a2:	4b58      	ldr	r3, [pc, #352]	; (8009504 <UART_SetConfig+0x69c>)
 80093a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093a6:	f003 0307 	and.w	r3, r3, #7
 80093aa:	2b05      	cmp	r3, #5
 80093ac:	d826      	bhi.n	80093fc <UART_SetConfig+0x594>
 80093ae:	a201      	add	r2, pc, #4	; (adr r2, 80093b4 <UART_SetConfig+0x54c>)
 80093b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b4:	080093cd 	.word	0x080093cd
 80093b8:	080093d5 	.word	0x080093d5
 80093bc:	080093dd 	.word	0x080093dd
 80093c0:	080093e5 	.word	0x080093e5
 80093c4:	080093ed 	.word	0x080093ed
 80093c8:	080093f5 	.word	0x080093f5
 80093cc:	2302      	movs	r3, #2
 80093ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093d2:	e01a      	b.n	800940a <UART_SetConfig+0x5a2>
 80093d4:	2304      	movs	r3, #4
 80093d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093da:	e016      	b.n	800940a <UART_SetConfig+0x5a2>
 80093dc:	2308      	movs	r3, #8
 80093de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093e2:	e012      	b.n	800940a <UART_SetConfig+0x5a2>
 80093e4:	2310      	movs	r3, #16
 80093e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ea:	e00e      	b.n	800940a <UART_SetConfig+0x5a2>
 80093ec:	2320      	movs	r3, #32
 80093ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093f2:	e00a      	b.n	800940a <UART_SetConfig+0x5a2>
 80093f4:	2340      	movs	r3, #64	; 0x40
 80093f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093fa:	e006      	b.n	800940a <UART_SetConfig+0x5a2>
 80093fc:	2380      	movs	r3, #128	; 0x80
 80093fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009402:	e002      	b.n	800940a <UART_SetConfig+0x5a2>
 8009404:	2380      	movs	r3, #128	; 0x80
 8009406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a40      	ldr	r2, [pc, #256]	; (8009510 <UART_SetConfig+0x6a8>)
 8009410:	4293      	cmp	r3, r2
 8009412:	f040 80ef 	bne.w	80095f4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009416:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800941a:	2b20      	cmp	r3, #32
 800941c:	dc46      	bgt.n	80094ac <UART_SetConfig+0x644>
 800941e:	2b02      	cmp	r3, #2
 8009420:	f2c0 8081 	blt.w	8009526 <UART_SetConfig+0x6be>
 8009424:	3b02      	subs	r3, #2
 8009426:	2b1e      	cmp	r3, #30
 8009428:	d87d      	bhi.n	8009526 <UART_SetConfig+0x6be>
 800942a:	a201      	add	r2, pc, #4	; (adr r2, 8009430 <UART_SetConfig+0x5c8>)
 800942c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009430:	080094b3 	.word	0x080094b3
 8009434:	08009527 	.word	0x08009527
 8009438:	080094bb 	.word	0x080094bb
 800943c:	08009527 	.word	0x08009527
 8009440:	08009527 	.word	0x08009527
 8009444:	08009527 	.word	0x08009527
 8009448:	080094cb 	.word	0x080094cb
 800944c:	08009527 	.word	0x08009527
 8009450:	08009527 	.word	0x08009527
 8009454:	08009527 	.word	0x08009527
 8009458:	08009527 	.word	0x08009527
 800945c:	08009527 	.word	0x08009527
 8009460:	08009527 	.word	0x08009527
 8009464:	08009527 	.word	0x08009527
 8009468:	080094db 	.word	0x080094db
 800946c:	08009527 	.word	0x08009527
 8009470:	08009527 	.word	0x08009527
 8009474:	08009527 	.word	0x08009527
 8009478:	08009527 	.word	0x08009527
 800947c:	08009527 	.word	0x08009527
 8009480:	08009527 	.word	0x08009527
 8009484:	08009527 	.word	0x08009527
 8009488:	08009527 	.word	0x08009527
 800948c:	08009527 	.word	0x08009527
 8009490:	08009527 	.word	0x08009527
 8009494:	08009527 	.word	0x08009527
 8009498:	08009527 	.word	0x08009527
 800949c:	08009527 	.word	0x08009527
 80094a0:	08009527 	.word	0x08009527
 80094a4:	08009527 	.word	0x08009527
 80094a8:	08009519 	.word	0x08009519
 80094ac:	2b40      	cmp	r3, #64	; 0x40
 80094ae:	d036      	beq.n	800951e <UART_SetConfig+0x6b6>
 80094b0:	e039      	b.n	8009526 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80094b2:	f7fd fcb7 	bl	8006e24 <HAL_RCCEx_GetD3PCLK1Freq>
 80094b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80094b8:	e03b      	b.n	8009532 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094ba:	f107 0314 	add.w	r3, r7, #20
 80094be:	4618      	mov	r0, r3
 80094c0:	f7fd fcc6 	bl	8006e50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80094c4:	69bb      	ldr	r3, [r7, #24]
 80094c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094c8:	e033      	b.n	8009532 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094ca:	f107 0308 	add.w	r3, r7, #8
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7fd fe12 	bl	80070f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094d8:	e02b      	b.n	8009532 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094da:	4b0a      	ldr	r3, [pc, #40]	; (8009504 <UART_SetConfig+0x69c>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f003 0320 	and.w	r3, r3, #32
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d009      	beq.n	80094fa <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80094e6:	4b07      	ldr	r3, [pc, #28]	; (8009504 <UART_SetConfig+0x69c>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	08db      	lsrs	r3, r3, #3
 80094ec:	f003 0303 	and.w	r3, r3, #3
 80094f0:	4a08      	ldr	r2, [pc, #32]	; (8009514 <UART_SetConfig+0x6ac>)
 80094f2:	fa22 f303 	lsr.w	r3, r2, r3
 80094f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80094f8:	e01b      	b.n	8009532 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80094fa:	4b06      	ldr	r3, [pc, #24]	; (8009514 <UART_SetConfig+0x6ac>)
 80094fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094fe:	e018      	b.n	8009532 <UART_SetConfig+0x6ca>
 8009500:	40011400 	.word	0x40011400
 8009504:	58024400 	.word	0x58024400
 8009508:	40007800 	.word	0x40007800
 800950c:	40007c00 	.word	0x40007c00
 8009510:	58000c00 	.word	0x58000c00
 8009514:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009518:	4bc4      	ldr	r3, [pc, #784]	; (800982c <UART_SetConfig+0x9c4>)
 800951a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800951c:	e009      	b.n	8009532 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800951e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009522:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009524:	e005      	b.n	8009532 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009526:	2300      	movs	r3, #0
 8009528:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009530:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009534:	2b00      	cmp	r3, #0
 8009536:	f000 81da 	beq.w	80098ee <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953e:	4abc      	ldr	r2, [pc, #752]	; (8009830 <UART_SetConfig+0x9c8>)
 8009540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009544:	461a      	mov	r2, r3
 8009546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009548:	fbb3 f3f2 	udiv	r3, r3, r2
 800954c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	685a      	ldr	r2, [r3, #4]
 8009552:	4613      	mov	r3, r2
 8009554:	005b      	lsls	r3, r3, #1
 8009556:	4413      	add	r3, r2
 8009558:	6a3a      	ldr	r2, [r7, #32]
 800955a:	429a      	cmp	r2, r3
 800955c:	d305      	bcc.n	800956a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009564:	6a3a      	ldr	r2, [r7, #32]
 8009566:	429a      	cmp	r2, r3
 8009568:	d903      	bls.n	8009572 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009570:	e1bd      	b.n	80098ee <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009574:	4618      	mov	r0, r3
 8009576:	f04f 0100 	mov.w	r1, #0
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957e:	4aac      	ldr	r2, [pc, #688]	; (8009830 <UART_SetConfig+0x9c8>)
 8009580:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009584:	b29a      	uxth	r2, r3
 8009586:	f04f 0300 	mov.w	r3, #0
 800958a:	f7f6 ff01 	bl	8000390 <__aeabi_uldivmod>
 800958e:	4602      	mov	r2, r0
 8009590:	460b      	mov	r3, r1
 8009592:	4610      	mov	r0, r2
 8009594:	4619      	mov	r1, r3
 8009596:	f04f 0200 	mov.w	r2, #0
 800959a:	f04f 0300 	mov.w	r3, #0
 800959e:	020b      	lsls	r3, r1, #8
 80095a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80095a4:	0202      	lsls	r2, r0, #8
 80095a6:	6879      	ldr	r1, [r7, #4]
 80095a8:	6849      	ldr	r1, [r1, #4]
 80095aa:	0849      	lsrs	r1, r1, #1
 80095ac:	4608      	mov	r0, r1
 80095ae:	f04f 0100 	mov.w	r1, #0
 80095b2:	1814      	adds	r4, r2, r0
 80095b4:	eb43 0501 	adc.w	r5, r3, r1
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	461a      	mov	r2, r3
 80095be:	f04f 0300 	mov.w	r3, #0
 80095c2:	4620      	mov	r0, r4
 80095c4:	4629      	mov	r1, r5
 80095c6:	f7f6 fee3 	bl	8000390 <__aeabi_uldivmod>
 80095ca:	4602      	mov	r2, r0
 80095cc:	460b      	mov	r3, r1
 80095ce:	4613      	mov	r3, r2
 80095d0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80095d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095d8:	d308      	bcc.n	80095ec <UART_SetConfig+0x784>
 80095da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095e0:	d204      	bcs.n	80095ec <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095e8:	60da      	str	r2, [r3, #12]
 80095ea:	e180      	b.n	80098ee <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80095f2:	e17c      	b.n	80098ee <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	69db      	ldr	r3, [r3, #28]
 80095f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095fc:	f040 80be 	bne.w	800977c <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8009600:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009604:	2b20      	cmp	r3, #32
 8009606:	dc49      	bgt.n	800969c <UART_SetConfig+0x834>
 8009608:	2b00      	cmp	r3, #0
 800960a:	db7c      	blt.n	8009706 <UART_SetConfig+0x89e>
 800960c:	2b20      	cmp	r3, #32
 800960e:	d87a      	bhi.n	8009706 <UART_SetConfig+0x89e>
 8009610:	a201      	add	r2, pc, #4	; (adr r2, 8009618 <UART_SetConfig+0x7b0>)
 8009612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009616:	bf00      	nop
 8009618:	080096a3 	.word	0x080096a3
 800961c:	080096ab 	.word	0x080096ab
 8009620:	08009707 	.word	0x08009707
 8009624:	08009707 	.word	0x08009707
 8009628:	080096b3 	.word	0x080096b3
 800962c:	08009707 	.word	0x08009707
 8009630:	08009707 	.word	0x08009707
 8009634:	08009707 	.word	0x08009707
 8009638:	080096c3 	.word	0x080096c3
 800963c:	08009707 	.word	0x08009707
 8009640:	08009707 	.word	0x08009707
 8009644:	08009707 	.word	0x08009707
 8009648:	08009707 	.word	0x08009707
 800964c:	08009707 	.word	0x08009707
 8009650:	08009707 	.word	0x08009707
 8009654:	08009707 	.word	0x08009707
 8009658:	080096d3 	.word	0x080096d3
 800965c:	08009707 	.word	0x08009707
 8009660:	08009707 	.word	0x08009707
 8009664:	08009707 	.word	0x08009707
 8009668:	08009707 	.word	0x08009707
 800966c:	08009707 	.word	0x08009707
 8009670:	08009707 	.word	0x08009707
 8009674:	08009707 	.word	0x08009707
 8009678:	08009707 	.word	0x08009707
 800967c:	08009707 	.word	0x08009707
 8009680:	08009707 	.word	0x08009707
 8009684:	08009707 	.word	0x08009707
 8009688:	08009707 	.word	0x08009707
 800968c:	08009707 	.word	0x08009707
 8009690:	08009707 	.word	0x08009707
 8009694:	08009707 	.word	0x08009707
 8009698:	080096f9 	.word	0x080096f9
 800969c:	2b40      	cmp	r3, #64	; 0x40
 800969e:	d02e      	beq.n	80096fe <UART_SetConfig+0x896>
 80096a0:	e031      	b.n	8009706 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096a2:	f7fb ff81 	bl	80055a8 <HAL_RCC_GetPCLK1Freq>
 80096a6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80096a8:	e033      	b.n	8009712 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096aa:	f7fb ff93 	bl	80055d4 <HAL_RCC_GetPCLK2Freq>
 80096ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80096b0:	e02f      	b.n	8009712 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096b2:	f107 0314 	add.w	r3, r7, #20
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7fd fbca 	bl	8006e50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80096c0:	e027      	b.n	8009712 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096c2:	f107 0308 	add.w	r3, r7, #8
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7fd fd16 	bl	80070f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80096d0:	e01f      	b.n	8009712 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096d2:	4b58      	ldr	r3, [pc, #352]	; (8009834 <UART_SetConfig+0x9cc>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f003 0320 	and.w	r3, r3, #32
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d009      	beq.n	80096f2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80096de:	4b55      	ldr	r3, [pc, #340]	; (8009834 <UART_SetConfig+0x9cc>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	08db      	lsrs	r3, r3, #3
 80096e4:	f003 0303 	and.w	r3, r3, #3
 80096e8:	4a53      	ldr	r2, [pc, #332]	; (8009838 <UART_SetConfig+0x9d0>)
 80096ea:	fa22 f303 	lsr.w	r3, r2, r3
 80096ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80096f0:	e00f      	b.n	8009712 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80096f2:	4b51      	ldr	r3, [pc, #324]	; (8009838 <UART_SetConfig+0x9d0>)
 80096f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80096f6:	e00c      	b.n	8009712 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80096f8:	4b4c      	ldr	r3, [pc, #304]	; (800982c <UART_SetConfig+0x9c4>)
 80096fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80096fc:	e009      	b.n	8009712 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009702:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009704:	e005      	b.n	8009712 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8009706:	2300      	movs	r3, #0
 8009708:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009710:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009714:	2b00      	cmp	r3, #0
 8009716:	f000 80ea 	beq.w	80098ee <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971e:	4a44      	ldr	r2, [pc, #272]	; (8009830 <UART_SetConfig+0x9c8>)
 8009720:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009724:	461a      	mov	r2, r3
 8009726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009728:	fbb3 f3f2 	udiv	r3, r3, r2
 800972c:	005a      	lsls	r2, r3, #1
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	085b      	lsrs	r3, r3, #1
 8009734:	441a      	add	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	fbb2 f3f3 	udiv	r3, r2, r3
 800973e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009742:	2b0f      	cmp	r3, #15
 8009744:	d916      	bls.n	8009774 <UART_SetConfig+0x90c>
 8009746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800974c:	d212      	bcs.n	8009774 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800974e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009750:	b29b      	uxth	r3, r3
 8009752:	f023 030f 	bic.w	r3, r3, #15
 8009756:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975a:	085b      	lsrs	r3, r3, #1
 800975c:	b29b      	uxth	r3, r3
 800975e:	f003 0307 	and.w	r3, r3, #7
 8009762:	b29a      	uxth	r2, r3
 8009764:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009766:	4313      	orrs	r3, r2
 8009768:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009770:	60da      	str	r2, [r3, #12]
 8009772:	e0bc      	b.n	80098ee <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800977a:	e0b8      	b.n	80098ee <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800977c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009780:	2b20      	cmp	r3, #32
 8009782:	dc4b      	bgt.n	800981c <UART_SetConfig+0x9b4>
 8009784:	2b00      	cmp	r3, #0
 8009786:	f2c0 8087 	blt.w	8009898 <UART_SetConfig+0xa30>
 800978a:	2b20      	cmp	r3, #32
 800978c:	f200 8084 	bhi.w	8009898 <UART_SetConfig+0xa30>
 8009790:	a201      	add	r2, pc, #4	; (adr r2, 8009798 <UART_SetConfig+0x930>)
 8009792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009796:	bf00      	nop
 8009798:	08009823 	.word	0x08009823
 800979c:	0800983d 	.word	0x0800983d
 80097a0:	08009899 	.word	0x08009899
 80097a4:	08009899 	.word	0x08009899
 80097a8:	08009845 	.word	0x08009845
 80097ac:	08009899 	.word	0x08009899
 80097b0:	08009899 	.word	0x08009899
 80097b4:	08009899 	.word	0x08009899
 80097b8:	08009855 	.word	0x08009855
 80097bc:	08009899 	.word	0x08009899
 80097c0:	08009899 	.word	0x08009899
 80097c4:	08009899 	.word	0x08009899
 80097c8:	08009899 	.word	0x08009899
 80097cc:	08009899 	.word	0x08009899
 80097d0:	08009899 	.word	0x08009899
 80097d4:	08009899 	.word	0x08009899
 80097d8:	08009865 	.word	0x08009865
 80097dc:	08009899 	.word	0x08009899
 80097e0:	08009899 	.word	0x08009899
 80097e4:	08009899 	.word	0x08009899
 80097e8:	08009899 	.word	0x08009899
 80097ec:	08009899 	.word	0x08009899
 80097f0:	08009899 	.word	0x08009899
 80097f4:	08009899 	.word	0x08009899
 80097f8:	08009899 	.word	0x08009899
 80097fc:	08009899 	.word	0x08009899
 8009800:	08009899 	.word	0x08009899
 8009804:	08009899 	.word	0x08009899
 8009808:	08009899 	.word	0x08009899
 800980c:	08009899 	.word	0x08009899
 8009810:	08009899 	.word	0x08009899
 8009814:	08009899 	.word	0x08009899
 8009818:	0800988b 	.word	0x0800988b
 800981c:	2b40      	cmp	r3, #64	; 0x40
 800981e:	d037      	beq.n	8009890 <UART_SetConfig+0xa28>
 8009820:	e03a      	b.n	8009898 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009822:	f7fb fec1 	bl	80055a8 <HAL_RCC_GetPCLK1Freq>
 8009826:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009828:	e03c      	b.n	80098a4 <UART_SetConfig+0xa3c>
 800982a:	bf00      	nop
 800982c:	003d0900 	.word	0x003d0900
 8009830:	0800b544 	.word	0x0800b544
 8009834:	58024400 	.word	0x58024400
 8009838:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800983c:	f7fb feca 	bl	80055d4 <HAL_RCC_GetPCLK2Freq>
 8009840:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009842:	e02f      	b.n	80098a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009844:	f107 0314 	add.w	r3, r7, #20
 8009848:	4618      	mov	r0, r3
 800984a:	f7fd fb01 	bl	8006e50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009852:	e027      	b.n	80098a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009854:	f107 0308 	add.w	r3, r7, #8
 8009858:	4618      	mov	r0, r3
 800985a:	f7fd fc4d 	bl	80070f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009862:	e01f      	b.n	80098a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009864:	4b2c      	ldr	r3, [pc, #176]	; (8009918 <UART_SetConfig+0xab0>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f003 0320 	and.w	r3, r3, #32
 800986c:	2b00      	cmp	r3, #0
 800986e:	d009      	beq.n	8009884 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009870:	4b29      	ldr	r3, [pc, #164]	; (8009918 <UART_SetConfig+0xab0>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	08db      	lsrs	r3, r3, #3
 8009876:	f003 0303 	and.w	r3, r3, #3
 800987a:	4a28      	ldr	r2, [pc, #160]	; (800991c <UART_SetConfig+0xab4>)
 800987c:	fa22 f303 	lsr.w	r3, r2, r3
 8009880:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009882:	e00f      	b.n	80098a4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009884:	4b25      	ldr	r3, [pc, #148]	; (800991c <UART_SetConfig+0xab4>)
 8009886:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009888:	e00c      	b.n	80098a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800988a:	4b25      	ldr	r3, [pc, #148]	; (8009920 <UART_SetConfig+0xab8>)
 800988c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800988e:	e009      	b.n	80098a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009890:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009894:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009896:	e005      	b.n	80098a4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009898:	2300      	movs	r3, #0
 800989a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80098a2:	bf00      	nop
    }

    if (pclk != 0U)
 80098a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d021      	beq.n	80098ee <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ae:	4a1d      	ldr	r2, [pc, #116]	; (8009924 <UART_SetConfig+0xabc>)
 80098b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098b4:	461a      	mov	r2, r3
 80098b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	085b      	lsrs	r3, r3, #1
 80098c2:	441a      	add	r2, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80098cc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d0:	2b0f      	cmp	r3, #15
 80098d2:	d909      	bls.n	80098e8 <UART_SetConfig+0xa80>
 80098d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098da:	d205      	bcs.n	80098e8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80098dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098de:	b29a      	uxth	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	60da      	str	r2, [r3, #12]
 80098e6:	e002      	b.n	80098ee <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2201      	movs	r2, #1
 80098f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2201      	movs	r2, #1
 80098fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2200      	movs	r2, #0
 8009902:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800990a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800990e:	4618      	mov	r0, r3
 8009910:	3738      	adds	r7, #56	; 0x38
 8009912:	46bd      	mov	sp, r7
 8009914:	bdb0      	pop	{r4, r5, r7, pc}
 8009916:	bf00      	nop
 8009918:	58024400 	.word	0x58024400
 800991c:	03d09000 	.word	0x03d09000
 8009920:	003d0900 	.word	0x003d0900
 8009924:	0800b544 	.word	0x0800b544

08009928 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009934:	f003 0301 	and.w	r3, r3, #1
 8009938:	2b00      	cmp	r3, #0
 800993a:	d00a      	beq.n	8009952 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	430a      	orrs	r2, r1
 8009950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009956:	f003 0302 	and.w	r3, r3, #2
 800995a:	2b00      	cmp	r3, #0
 800995c:	d00a      	beq.n	8009974 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	430a      	orrs	r2, r1
 8009972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009978:	f003 0304 	and.w	r3, r3, #4
 800997c:	2b00      	cmp	r3, #0
 800997e:	d00a      	beq.n	8009996 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	430a      	orrs	r2, r1
 8009994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800999a:	f003 0308 	and.w	r3, r3, #8
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d00a      	beq.n	80099b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	430a      	orrs	r2, r1
 80099b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099bc:	f003 0310 	and.w	r3, r3, #16
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d00a      	beq.n	80099da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	430a      	orrs	r2, r1
 80099d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099de:	f003 0320 	and.w	r3, r3, #32
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d00a      	beq.n	80099fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	430a      	orrs	r2, r1
 80099fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d01a      	beq.n	8009a3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	430a      	orrs	r2, r1
 8009a1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a26:	d10a      	bne.n	8009a3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	430a      	orrs	r2, r1
 8009a3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d00a      	beq.n	8009a60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	430a      	orrs	r2, r1
 8009a5e:	605a      	str	r2, [r3, #4]
  }
}
 8009a60:	bf00      	nop
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b086      	sub	sp, #24
 8009a70:	af02      	add	r7, sp, #8
 8009a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009a7c:	f7f8 fd4a 	bl	8002514 <HAL_GetTick>
 8009a80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f003 0308 	and.w	r3, r3, #8
 8009a8c:	2b08      	cmp	r3, #8
 8009a8e:	d10e      	bne.n	8009aae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a94:	9300      	str	r3, [sp, #0]
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 f82f 	bl	8009b02 <UART_WaitOnFlagUntilTimeout>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d001      	beq.n	8009aae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009aaa:	2303      	movs	r3, #3
 8009aac:	e025      	b.n	8009afa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f003 0304 	and.w	r3, r3, #4
 8009ab8:	2b04      	cmp	r3, #4
 8009aba:	d10e      	bne.n	8009ada <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009abc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ac0:	9300      	str	r3, [sp, #0]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f819 	bl	8009b02 <UART_WaitOnFlagUntilTimeout>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d001      	beq.n	8009ada <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ad6:	2303      	movs	r3, #3
 8009ad8:	e00f      	b.n	8009afa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2220      	movs	r2, #32
 8009ade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2220      	movs	r2, #32
 8009ae6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b09c      	sub	sp, #112	; 0x70
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	60f8      	str	r0, [r7, #12]
 8009b0a:	60b9      	str	r1, [r7, #8]
 8009b0c:	603b      	str	r3, [r7, #0]
 8009b0e:	4613      	mov	r3, r2
 8009b10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b12:	e0a9      	b.n	8009c68 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b1a:	f000 80a5 	beq.w	8009c68 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b1e:	f7f8 fcf9 	bl	8002514 <HAL_GetTick>
 8009b22:	4602      	mov	r2, r0
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	1ad3      	subs	r3, r2, r3
 8009b28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d302      	bcc.n	8009b34 <UART_WaitOnFlagUntilTimeout+0x32>
 8009b2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d140      	bne.n	8009bb6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b3c:	e853 3f00 	ldrex	r3, [r3]
 8009b40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009b48:	667b      	str	r3, [r7, #100]	; 0x64
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b54:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009b5a:	e841 2300 	strex	r3, r2, [r1]
 8009b5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d1e6      	bne.n	8009b34 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	3308      	adds	r3, #8
 8009b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b70:	e853 3f00 	ldrex	r3, [r3]
 8009b74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b78:	f023 0301 	bic.w	r3, r3, #1
 8009b7c:	663b      	str	r3, [r7, #96]	; 0x60
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	3308      	adds	r3, #8
 8009b84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009b86:	64ba      	str	r2, [r7, #72]	; 0x48
 8009b88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009b8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b8e:	e841 2300 	strex	r3, r2, [r1]
 8009b92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d1e5      	bne.n	8009b66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2220      	movs	r2, #32
 8009b9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2220      	movs	r2, #32
 8009ba6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009bb2:	2303      	movs	r3, #3
 8009bb4:	e069      	b.n	8009c8a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f003 0304 	and.w	r3, r3, #4
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d051      	beq.n	8009c68 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	69db      	ldr	r3, [r3, #28]
 8009bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bd2:	d149      	bne.n	8009c68 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009bdc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be6:	e853 3f00 	ldrex	r3, [r3]
 8009bea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009bf2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8009bfe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c04:	e841 2300 	strex	r3, r2, [r1]
 8009c08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d1e6      	bne.n	8009bde <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	3308      	adds	r3, #8
 8009c16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	e853 3f00 	ldrex	r3, [r3]
 8009c1e:	613b      	str	r3, [r7, #16]
   return(result);
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	f023 0301 	bic.w	r3, r3, #1
 8009c26:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	3308      	adds	r3, #8
 8009c2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009c30:	623a      	str	r2, [r7, #32]
 8009c32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c34:	69f9      	ldr	r1, [r7, #28]
 8009c36:	6a3a      	ldr	r2, [r7, #32]
 8009c38:	e841 2300 	strex	r3, r2, [r1]
 8009c3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d1e5      	bne.n	8009c10 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2220      	movs	r2, #32
 8009c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2220      	movs	r2, #32
 8009c50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2220      	movs	r2, #32
 8009c58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009c64:	2303      	movs	r3, #3
 8009c66:	e010      	b.n	8009c8a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	69da      	ldr	r2, [r3, #28]
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	4013      	ands	r3, r2
 8009c72:	68ba      	ldr	r2, [r7, #8]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	bf0c      	ite	eq
 8009c78:	2301      	moveq	r3, #1
 8009c7a:	2300      	movne	r3, #0
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	461a      	mov	r2, r3
 8009c80:	79fb      	ldrb	r3, [r7, #7]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	f43f af46 	beq.w	8009b14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3770      	adds	r7, #112	; 0x70
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009c92:	b480      	push	{r7}
 8009c94:	b085      	sub	sp, #20
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d101      	bne.n	8009ca8 <HAL_UARTEx_DisableFifoMode+0x16>
 8009ca4:	2302      	movs	r3, #2
 8009ca6:	e027      	b.n	8009cf8 <HAL_UARTEx_DisableFifoMode+0x66>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2224      	movs	r2, #36	; 0x24
 8009cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f022 0201 	bic.w	r2, r2, #1
 8009cce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009cd6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	68fa      	ldr	r2, [r7, #12]
 8009ce4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2220      	movs	r2, #32
 8009cea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009cf6:	2300      	movs	r3, #0
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3714      	adds	r7, #20
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d101      	bne.n	8009d1c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d18:	2302      	movs	r3, #2
 8009d1a:	e02d      	b.n	8009d78 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2224      	movs	r2, #36	; 0x24
 8009d28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f022 0201 	bic.w	r2, r2, #1
 8009d42:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	689b      	ldr	r3, [r3, #8]
 8009d4a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	683a      	ldr	r2, [r7, #0]
 8009d54:	430a      	orrs	r2, r1
 8009d56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 f84f 	bl	8009dfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	68fa      	ldr	r2, [r7, #12]
 8009d64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2220      	movs	r2, #32
 8009d6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d76:	2300      	movs	r3, #0
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3710      	adds	r7, #16
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d101      	bne.n	8009d98 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009d94:	2302      	movs	r3, #2
 8009d96:	e02d      	b.n	8009df4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2224      	movs	r2, #36	; 0x24
 8009da4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f022 0201 	bic.w	r2, r2, #1
 8009dbe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	683a      	ldr	r2, [r7, #0]
 8009dd0:	430a      	orrs	r2, r1
 8009dd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 f811 	bl	8009dfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	68fa      	ldr	r2, [r7, #12]
 8009de0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2220      	movs	r2, #32
 8009de6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009df2:	2300      	movs	r3, #0
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3710      	adds	r7, #16
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b085      	sub	sp, #20
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d108      	bne.n	8009e1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2201      	movs	r2, #1
 8009e18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e1c:	e031      	b.n	8009e82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e1e:	2310      	movs	r3, #16
 8009e20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e22:	2310      	movs	r3, #16
 8009e24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	0e5b      	lsrs	r3, r3, #25
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	f003 0307 	and.w	r3, r3, #7
 8009e34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	0f5b      	lsrs	r3, r3, #29
 8009e3e:	b2db      	uxtb	r3, r3
 8009e40:	f003 0307 	and.w	r3, r3, #7
 8009e44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e46:	7bbb      	ldrb	r3, [r7, #14]
 8009e48:	7b3a      	ldrb	r2, [r7, #12]
 8009e4a:	4911      	ldr	r1, [pc, #68]	; (8009e90 <UARTEx_SetNbDataToProcess+0x94>)
 8009e4c:	5c8a      	ldrb	r2, [r1, r2]
 8009e4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009e52:	7b3a      	ldrb	r2, [r7, #12]
 8009e54:	490f      	ldr	r1, [pc, #60]	; (8009e94 <UARTEx_SetNbDataToProcess+0x98>)
 8009e56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e58:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e5c:	b29a      	uxth	r2, r3
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e64:	7bfb      	ldrb	r3, [r7, #15]
 8009e66:	7b7a      	ldrb	r2, [r7, #13]
 8009e68:	4909      	ldr	r1, [pc, #36]	; (8009e90 <UARTEx_SetNbDataToProcess+0x94>)
 8009e6a:	5c8a      	ldrb	r2, [r1, r2]
 8009e6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009e70:	7b7a      	ldrb	r2, [r7, #13]
 8009e72:	4908      	ldr	r1, [pc, #32]	; (8009e94 <UARTEx_SetNbDataToProcess+0x98>)
 8009e74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e76:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e7a:	b29a      	uxth	r2, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009e82:	bf00      	nop
 8009e84:	3714      	adds	r7, #20
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop
 8009e90:	0800b55c 	.word	0x0800b55c
 8009e94:	0800b564 	.word	0x0800b564

08009e98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009e98:	b084      	sub	sp, #16
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b084      	sub	sp, #16
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
 8009ea2:	f107 001c 	add.w	r0, r7, #28
 8009ea6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d120      	bne.n	8009ef2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	68da      	ldr	r2, [r3, #12]
 8009ec0:	4b2a      	ldr	r3, [pc, #168]	; (8009f6c <USB_CoreInit+0xd4>)
 8009ec2:	4013      	ands	r3, r2
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d105      	bne.n	8009ee6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 faa8 	bl	800a43c <USB_CoreReset>
 8009eec:	4603      	mov	r3, r0
 8009eee:	73fb      	strb	r3, [r7, #15]
 8009ef0:	e01a      	b.n	8009f28 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	68db      	ldr	r3, [r3, #12]
 8009ef6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 fa9c 	bl	800a43c <USB_CoreReset>
 8009f04:	4603      	mov	r3, r0
 8009f06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d106      	bne.n	8009f1c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	639a      	str	r2, [r3, #56]	; 0x38
 8009f1a:	e005      	b.n	8009f28 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d116      	bne.n	8009f5c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f32:	b29a      	uxth	r2, r3
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009f3c:	4b0c      	ldr	r3, [pc, #48]	; (8009f70 <USB_CoreInit+0xd8>)
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	f043 0206 	orr.w	r2, r3, #6
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	f043 0220 	orr.w	r2, r3, #32
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f68:	b004      	add	sp, #16
 8009f6a:	4770      	bx	lr
 8009f6c:	ffbdffbf 	.word	0xffbdffbf
 8009f70:	03ee0000 	.word	0x03ee0000

08009f74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	f023 0201 	bic.w	r2, r3, #1
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	370c      	adds	r7, #12
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr

08009f96 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b084      	sub	sp, #16
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	68db      	ldr	r3, [r3, #12]
 8009faa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009fb2:	78fb      	ldrb	r3, [r7, #3]
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d115      	bne.n	8009fe4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009fc4:	2001      	movs	r0, #1
 8009fc6:	f7f8 fab1 	bl	800252c <HAL_Delay>
      ms++;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	3301      	adds	r3, #1
 8009fce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 fa25 	bl	800a420 <USB_GetMode>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d01e      	beq.n	800a01a <USB_SetCurrentMode+0x84>
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2b31      	cmp	r3, #49	; 0x31
 8009fe0:	d9f0      	bls.n	8009fc4 <USB_SetCurrentMode+0x2e>
 8009fe2:	e01a      	b.n	800a01a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009fe4:	78fb      	ldrb	r3, [r7, #3]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d115      	bne.n	800a016 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009ff6:	2001      	movs	r0, #1
 8009ff8:	f7f8 fa98 	bl	800252c <HAL_Delay>
      ms++;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	3301      	adds	r3, #1
 800a000:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 fa0c 	bl	800a420 <USB_GetMode>
 800a008:	4603      	mov	r3, r0
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d005      	beq.n	800a01a <USB_SetCurrentMode+0x84>
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2b31      	cmp	r3, #49	; 0x31
 800a012:	d9f0      	bls.n	8009ff6 <USB_SetCurrentMode+0x60>
 800a014:	e001      	b.n	800a01a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	e005      	b.n	800a026 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2b32      	cmp	r3, #50	; 0x32
 800a01e:	d101      	bne.n	800a024 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	e000      	b.n	800a026 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	3710      	adds	r7, #16
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
	...

0800a030 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a030:	b084      	sub	sp, #16
 800a032:	b580      	push	{r7, lr}
 800a034:	b086      	sub	sp, #24
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
 800a03a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a03e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a042:	2300      	movs	r3, #0
 800a044:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a04a:	2300      	movs	r3, #0
 800a04c:	613b      	str	r3, [r7, #16]
 800a04e:	e009      	b.n	800a064 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	3340      	adds	r3, #64	; 0x40
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	4413      	add	r3, r2
 800a05a:	2200      	movs	r2, #0
 800a05c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	3301      	adds	r3, #1
 800a062:	613b      	str	r3, [r7, #16]
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	2b0e      	cmp	r3, #14
 800a068:	d9f2      	bls.n	800a050 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a06a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d11c      	bne.n	800a0aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a07e:	f043 0302 	orr.w	r3, r3, #2
 800a082:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a088:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	601a      	str	r2, [r3, #0]
 800a0a8:	e005      	b.n	800a0b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a0bc:	461a      	mov	r2, r3
 800a0be:	2300      	movs	r3, #0
 800a0c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	680b      	ldr	r3, [r1, #0]
 800a0d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d10c      	bne.n	800a0f6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d104      	bne.n	800a0ec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a0e2:	2100      	movs	r1, #0
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f000 f961 	bl	800a3ac <USB_SetDevSpeed>
 800a0ea:	e008      	b.n	800a0fe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a0ec:	2101      	movs	r1, #1
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 f95c 	bl	800a3ac <USB_SetDevSpeed>
 800a0f4:	e003      	b.n	800a0fe <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a0f6:	2103      	movs	r1, #3
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 f957 	bl	800a3ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a0fe:	2110      	movs	r1, #16
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 f8f3 	bl	800a2ec <USB_FlushTxFifo>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d001      	beq.n	800a110 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a10c:	2301      	movs	r3, #1
 800a10e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 f91d 	bl	800a350 <USB_FlushRxFifo>
 800a116:	4603      	mov	r3, r0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d001      	beq.n	800a120 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a126:	461a      	mov	r2, r3
 800a128:	2300      	movs	r3, #0
 800a12a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a132:	461a      	mov	r2, r3
 800a134:	2300      	movs	r3, #0
 800a136:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a13e:	461a      	mov	r2, r3
 800a140:	2300      	movs	r3, #0
 800a142:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a144:	2300      	movs	r3, #0
 800a146:	613b      	str	r3, [r7, #16]
 800a148:	e043      	b.n	800a1d2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	015a      	lsls	r2, r3, #5
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	4413      	add	r3, r2
 800a152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a15c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a160:	d118      	bne.n	800a194 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d10a      	bne.n	800a17e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	015a      	lsls	r2, r3, #5
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	4413      	add	r3, r2
 800a170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a174:	461a      	mov	r2, r3
 800a176:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a17a:	6013      	str	r3, [r2, #0]
 800a17c:	e013      	b.n	800a1a6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	015a      	lsls	r2, r3, #5
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	4413      	add	r3, r2
 800a186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a18a:	461a      	mov	r2, r3
 800a18c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a190:	6013      	str	r3, [r2, #0]
 800a192:	e008      	b.n	800a1a6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	015a      	lsls	r2, r3, #5
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	4413      	add	r3, r2
 800a19c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	015a      	lsls	r2, r3, #5
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	015a      	lsls	r2, r3, #5
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	4413      	add	r3, r2
 800a1c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a1ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	613b      	str	r3, [r7, #16]
 800a1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d4:	693a      	ldr	r2, [r7, #16]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d3b7      	bcc.n	800a14a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1da:	2300      	movs	r3, #0
 800a1dc:	613b      	str	r3, [r7, #16]
 800a1de:	e043      	b.n	800a268 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	015a      	lsls	r2, r3, #5
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1f6:	d118      	bne.n	800a22a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d10a      	bne.n	800a214 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	015a      	lsls	r2, r3, #5
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	4413      	add	r3, r2
 800a206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a20a:	461a      	mov	r2, r3
 800a20c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a210:	6013      	str	r3, [r2, #0]
 800a212:	e013      	b.n	800a23c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	015a      	lsls	r2, r3, #5
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	4413      	add	r3, r2
 800a21c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a220:	461a      	mov	r2, r3
 800a222:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a226:	6013      	str	r3, [r2, #0]
 800a228:	e008      	b.n	800a23c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	015a      	lsls	r2, r3, #5
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	4413      	add	r3, r2
 800a232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a236:	461a      	mov	r2, r3
 800a238:	2300      	movs	r3, #0
 800a23a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	015a      	lsls	r2, r3, #5
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	4413      	add	r3, r2
 800a244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a248:	461a      	mov	r2, r3
 800a24a:	2300      	movs	r3, #0
 800a24c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	015a      	lsls	r2, r3, #5
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	4413      	add	r3, r2
 800a256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a25a:	461a      	mov	r2, r3
 800a25c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a260:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	3301      	adds	r3, #1
 800a266:	613b      	str	r3, [r7, #16]
 800a268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26a:	693a      	ldr	r2, [r7, #16]
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d3b7      	bcc.n	800a1e0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a27e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a282:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a290:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a294:	2b00      	cmp	r3, #0
 800a296:	d105      	bne.n	800a2a4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	699b      	ldr	r3, [r3, #24]
 800a29c:	f043 0210 	orr.w	r2, r3, #16
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	699a      	ldr	r2, [r3, #24]
 800a2a8:	4b0e      	ldr	r3, [pc, #56]	; (800a2e4 <USB_DevInit+0x2b4>)
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a2b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d005      	beq.n	800a2c2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	699b      	ldr	r3, [r3, #24]
 800a2ba:	f043 0208 	orr.w	r2, r3, #8
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a2c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d105      	bne.n	800a2d4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	699a      	ldr	r2, [r3, #24]
 800a2cc:	4b06      	ldr	r3, [pc, #24]	; (800a2e8 <USB_DevInit+0x2b8>)
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a2d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3718      	adds	r7, #24
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a2e0:	b004      	add	sp, #16
 800a2e2:	4770      	bx	lr
 800a2e4:	803c3800 	.word	0x803c3800
 800a2e8:	40000004 	.word	0x40000004

0800a2ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b085      	sub	sp, #20
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	60fb      	str	r3, [r7, #12]
 800a300:	4a12      	ldr	r2, [pc, #72]	; (800a34c <USB_FlushTxFifo+0x60>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d901      	bls.n	800a30a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a306:	2303      	movs	r3, #3
 800a308:	e01a      	b.n	800a340 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	691b      	ldr	r3, [r3, #16]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	daf3      	bge.n	800a2fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a312:	2300      	movs	r3, #0
 800a314:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	019b      	lsls	r3, r3, #6
 800a31a:	f043 0220 	orr.w	r2, r3, #32
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	3301      	adds	r3, #1
 800a326:	60fb      	str	r3, [r7, #12]
 800a328:	4a08      	ldr	r2, [pc, #32]	; (800a34c <USB_FlushTxFifo+0x60>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d901      	bls.n	800a332 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800a32e:	2303      	movs	r3, #3
 800a330:	e006      	b.n	800a340 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	691b      	ldr	r3, [r3, #16]
 800a336:	f003 0320 	and.w	r3, r3, #32
 800a33a:	2b20      	cmp	r3, #32
 800a33c:	d0f1      	beq.n	800a322 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	3714      	adds	r7, #20
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr
 800a34c:	00030d40 	.word	0x00030d40

0800a350 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a350:	b480      	push	{r7}
 800a352:	b085      	sub	sp, #20
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a358:	2300      	movs	r3, #0
 800a35a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	3301      	adds	r3, #1
 800a360:	60fb      	str	r3, [r7, #12]
 800a362:	4a11      	ldr	r2, [pc, #68]	; (800a3a8 <USB_FlushRxFifo+0x58>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d901      	bls.n	800a36c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800a368:	2303      	movs	r3, #3
 800a36a:	e017      	b.n	800a39c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	691b      	ldr	r3, [r3, #16]
 800a370:	2b00      	cmp	r3, #0
 800a372:	daf3      	bge.n	800a35c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a374:	2300      	movs	r3, #0
 800a376:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2210      	movs	r2, #16
 800a37c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	3301      	adds	r3, #1
 800a382:	60fb      	str	r3, [r7, #12]
 800a384:	4a08      	ldr	r2, [pc, #32]	; (800a3a8 <USB_FlushRxFifo+0x58>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d901      	bls.n	800a38e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800a38a:	2303      	movs	r3, #3
 800a38c:	e006      	b.n	800a39c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	f003 0310 	and.w	r3, r3, #16
 800a396:	2b10      	cmp	r3, #16
 800a398:	d0f1      	beq.n	800a37e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800a39a:	2300      	movs	r3, #0
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3714      	adds	r7, #20
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr
 800a3a8:	00030d40 	.word	0x00030d40

0800a3ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b085      	sub	sp, #20
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	78fb      	ldrb	r3, [r7, #3]
 800a3c6:	68f9      	ldr	r1, [r7, #12]
 800a3c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3714      	adds	r7, #20
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr

0800a3de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a3de:	b480      	push	{r7}
 800a3e0:	b085      	sub	sp, #20
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	68fa      	ldr	r2, [r7, #12]
 800a3f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a3f8:	f023 0303 	bic.w	r3, r3, #3
 800a3fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	68fa      	ldr	r2, [r7, #12]
 800a408:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a40c:	f043 0302 	orr.w	r3, r3, #2
 800a410:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a412:	2300      	movs	r3, #0
}
 800a414:	4618      	mov	r0, r3
 800a416:	3714      	adds	r7, #20
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	695b      	ldr	r3, [r3, #20]
 800a42c:	f003 0301 	and.w	r3, r3, #1
}
 800a430:	4618      	mov	r0, r3
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b085      	sub	sp, #20
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a444:	2300      	movs	r3, #0
 800a446:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	3301      	adds	r3, #1
 800a44c:	60fb      	str	r3, [r7, #12]
 800a44e:	4a13      	ldr	r2, [pc, #76]	; (800a49c <USB_CoreReset+0x60>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d901      	bls.n	800a458 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800a454:	2303      	movs	r3, #3
 800a456:	e01a      	b.n	800a48e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	691b      	ldr	r3, [r3, #16]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	daf3      	bge.n	800a448 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a460:	2300      	movs	r3, #0
 800a462:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	691b      	ldr	r3, [r3, #16]
 800a468:	f043 0201 	orr.w	r2, r3, #1
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	3301      	adds	r3, #1
 800a474:	60fb      	str	r3, [r7, #12]
 800a476:	4a09      	ldr	r2, [pc, #36]	; (800a49c <USB_CoreReset+0x60>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d901      	bls.n	800a480 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800a47c:	2303      	movs	r3, #3
 800a47e:	e006      	b.n	800a48e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	691b      	ldr	r3, [r3, #16]
 800a484:	f003 0301 	and.w	r3, r3, #1
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d0f1      	beq.n	800a470 <USB_CoreReset+0x34>

  return HAL_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3714      	adds	r7, #20
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr
 800a49a:	bf00      	nop
 800a49c:	00030d40 	.word	0x00030d40

0800a4a0 <__errno>:
 800a4a0:	4b01      	ldr	r3, [pc, #4]	; (800a4a8 <__errno+0x8>)
 800a4a2:	6818      	ldr	r0, [r3, #0]
 800a4a4:	4770      	bx	lr
 800a4a6:	bf00      	nop
 800a4a8:	24000018 	.word	0x24000018

0800a4ac <__libc_init_array>:
 800a4ac:	b570      	push	{r4, r5, r6, lr}
 800a4ae:	4d0d      	ldr	r5, [pc, #52]	; (800a4e4 <__libc_init_array+0x38>)
 800a4b0:	4c0d      	ldr	r4, [pc, #52]	; (800a4e8 <__libc_init_array+0x3c>)
 800a4b2:	1b64      	subs	r4, r4, r5
 800a4b4:	10a4      	asrs	r4, r4, #2
 800a4b6:	2600      	movs	r6, #0
 800a4b8:	42a6      	cmp	r6, r4
 800a4ba:	d109      	bne.n	800a4d0 <__libc_init_array+0x24>
 800a4bc:	4d0b      	ldr	r5, [pc, #44]	; (800a4ec <__libc_init_array+0x40>)
 800a4be:	4c0c      	ldr	r4, [pc, #48]	; (800a4f0 <__libc_init_array+0x44>)
 800a4c0:	f000 fc4e 	bl	800ad60 <_init>
 800a4c4:	1b64      	subs	r4, r4, r5
 800a4c6:	10a4      	asrs	r4, r4, #2
 800a4c8:	2600      	movs	r6, #0
 800a4ca:	42a6      	cmp	r6, r4
 800a4cc:	d105      	bne.n	800a4da <__libc_init_array+0x2e>
 800a4ce:	bd70      	pop	{r4, r5, r6, pc}
 800a4d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4d4:	4798      	blx	r3
 800a4d6:	3601      	adds	r6, #1
 800a4d8:	e7ee      	b.n	800a4b8 <__libc_init_array+0xc>
 800a4da:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4de:	4798      	blx	r3
 800a4e0:	3601      	adds	r6, #1
 800a4e2:	e7f2      	b.n	800a4ca <__libc_init_array+0x1e>
 800a4e4:	0800b5a8 	.word	0x0800b5a8
 800a4e8:	0800b5a8 	.word	0x0800b5a8
 800a4ec:	0800b5a8 	.word	0x0800b5a8
 800a4f0:	0800b5ac 	.word	0x0800b5ac

0800a4f4 <memcpy>:
 800a4f4:	440a      	add	r2, r1
 800a4f6:	4291      	cmp	r1, r2
 800a4f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4fc:	d100      	bne.n	800a500 <memcpy+0xc>
 800a4fe:	4770      	bx	lr
 800a500:	b510      	push	{r4, lr}
 800a502:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a506:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a50a:	4291      	cmp	r1, r2
 800a50c:	d1f9      	bne.n	800a502 <memcpy+0xe>
 800a50e:	bd10      	pop	{r4, pc}

0800a510 <memmove>:
 800a510:	4288      	cmp	r0, r1
 800a512:	b510      	push	{r4, lr}
 800a514:	eb01 0402 	add.w	r4, r1, r2
 800a518:	d902      	bls.n	800a520 <memmove+0x10>
 800a51a:	4284      	cmp	r4, r0
 800a51c:	4623      	mov	r3, r4
 800a51e:	d807      	bhi.n	800a530 <memmove+0x20>
 800a520:	1e43      	subs	r3, r0, #1
 800a522:	42a1      	cmp	r1, r4
 800a524:	d008      	beq.n	800a538 <memmove+0x28>
 800a526:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a52a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a52e:	e7f8      	b.n	800a522 <memmove+0x12>
 800a530:	4402      	add	r2, r0
 800a532:	4601      	mov	r1, r0
 800a534:	428a      	cmp	r2, r1
 800a536:	d100      	bne.n	800a53a <memmove+0x2a>
 800a538:	bd10      	pop	{r4, pc}
 800a53a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a53e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a542:	e7f7      	b.n	800a534 <memmove+0x24>

0800a544 <memset>:
 800a544:	4402      	add	r2, r0
 800a546:	4603      	mov	r3, r0
 800a548:	4293      	cmp	r3, r2
 800a54a:	d100      	bne.n	800a54e <memset+0xa>
 800a54c:	4770      	bx	lr
 800a54e:	f803 1b01 	strb.w	r1, [r3], #1
 800a552:	e7f9      	b.n	800a548 <memset+0x4>

0800a554 <siprintf>:
 800a554:	b40e      	push	{r1, r2, r3}
 800a556:	b500      	push	{lr}
 800a558:	b09c      	sub	sp, #112	; 0x70
 800a55a:	ab1d      	add	r3, sp, #116	; 0x74
 800a55c:	9002      	str	r0, [sp, #8]
 800a55e:	9006      	str	r0, [sp, #24]
 800a560:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a564:	4809      	ldr	r0, [pc, #36]	; (800a58c <siprintf+0x38>)
 800a566:	9107      	str	r1, [sp, #28]
 800a568:	9104      	str	r1, [sp, #16]
 800a56a:	4909      	ldr	r1, [pc, #36]	; (800a590 <siprintf+0x3c>)
 800a56c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a570:	9105      	str	r1, [sp, #20]
 800a572:	6800      	ldr	r0, [r0, #0]
 800a574:	9301      	str	r3, [sp, #4]
 800a576:	a902      	add	r1, sp, #8
 800a578:	f000 f868 	bl	800a64c <_svfiprintf_r>
 800a57c:	9b02      	ldr	r3, [sp, #8]
 800a57e:	2200      	movs	r2, #0
 800a580:	701a      	strb	r2, [r3, #0]
 800a582:	b01c      	add	sp, #112	; 0x70
 800a584:	f85d eb04 	ldr.w	lr, [sp], #4
 800a588:	b003      	add	sp, #12
 800a58a:	4770      	bx	lr
 800a58c:	24000018 	.word	0x24000018
 800a590:	ffff0208 	.word	0xffff0208

0800a594 <__ssputs_r>:
 800a594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a598:	688e      	ldr	r6, [r1, #8]
 800a59a:	429e      	cmp	r6, r3
 800a59c:	4682      	mov	sl, r0
 800a59e:	460c      	mov	r4, r1
 800a5a0:	4690      	mov	r8, r2
 800a5a2:	461f      	mov	r7, r3
 800a5a4:	d838      	bhi.n	800a618 <__ssputs_r+0x84>
 800a5a6:	898a      	ldrh	r2, [r1, #12]
 800a5a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a5ac:	d032      	beq.n	800a614 <__ssputs_r+0x80>
 800a5ae:	6825      	ldr	r5, [r4, #0]
 800a5b0:	6909      	ldr	r1, [r1, #16]
 800a5b2:	eba5 0901 	sub.w	r9, r5, r1
 800a5b6:	6965      	ldr	r5, [r4, #20]
 800a5b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	444b      	add	r3, r9
 800a5c4:	106d      	asrs	r5, r5, #1
 800a5c6:	429d      	cmp	r5, r3
 800a5c8:	bf38      	it	cc
 800a5ca:	461d      	movcc	r5, r3
 800a5cc:	0553      	lsls	r3, r2, #21
 800a5ce:	d531      	bpl.n	800a634 <__ssputs_r+0xa0>
 800a5d0:	4629      	mov	r1, r5
 800a5d2:	f000 fb1f 	bl	800ac14 <_malloc_r>
 800a5d6:	4606      	mov	r6, r0
 800a5d8:	b950      	cbnz	r0, 800a5f0 <__ssputs_r+0x5c>
 800a5da:	230c      	movs	r3, #12
 800a5dc:	f8ca 3000 	str.w	r3, [sl]
 800a5e0:	89a3      	ldrh	r3, [r4, #12]
 800a5e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5e6:	81a3      	strh	r3, [r4, #12]
 800a5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5f0:	6921      	ldr	r1, [r4, #16]
 800a5f2:	464a      	mov	r2, r9
 800a5f4:	f7ff ff7e 	bl	800a4f4 <memcpy>
 800a5f8:	89a3      	ldrh	r3, [r4, #12]
 800a5fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a5fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a602:	81a3      	strh	r3, [r4, #12]
 800a604:	6126      	str	r6, [r4, #16]
 800a606:	6165      	str	r5, [r4, #20]
 800a608:	444e      	add	r6, r9
 800a60a:	eba5 0509 	sub.w	r5, r5, r9
 800a60e:	6026      	str	r6, [r4, #0]
 800a610:	60a5      	str	r5, [r4, #8]
 800a612:	463e      	mov	r6, r7
 800a614:	42be      	cmp	r6, r7
 800a616:	d900      	bls.n	800a61a <__ssputs_r+0x86>
 800a618:	463e      	mov	r6, r7
 800a61a:	4632      	mov	r2, r6
 800a61c:	6820      	ldr	r0, [r4, #0]
 800a61e:	4641      	mov	r1, r8
 800a620:	f7ff ff76 	bl	800a510 <memmove>
 800a624:	68a3      	ldr	r3, [r4, #8]
 800a626:	6822      	ldr	r2, [r4, #0]
 800a628:	1b9b      	subs	r3, r3, r6
 800a62a:	4432      	add	r2, r6
 800a62c:	60a3      	str	r3, [r4, #8]
 800a62e:	6022      	str	r2, [r4, #0]
 800a630:	2000      	movs	r0, #0
 800a632:	e7db      	b.n	800a5ec <__ssputs_r+0x58>
 800a634:	462a      	mov	r2, r5
 800a636:	f000 fb47 	bl	800acc8 <_realloc_r>
 800a63a:	4606      	mov	r6, r0
 800a63c:	2800      	cmp	r0, #0
 800a63e:	d1e1      	bne.n	800a604 <__ssputs_r+0x70>
 800a640:	6921      	ldr	r1, [r4, #16]
 800a642:	4650      	mov	r0, sl
 800a644:	f000 fa96 	bl	800ab74 <_free_r>
 800a648:	e7c7      	b.n	800a5da <__ssputs_r+0x46>
	...

0800a64c <_svfiprintf_r>:
 800a64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a650:	4698      	mov	r8, r3
 800a652:	898b      	ldrh	r3, [r1, #12]
 800a654:	061b      	lsls	r3, r3, #24
 800a656:	b09d      	sub	sp, #116	; 0x74
 800a658:	4607      	mov	r7, r0
 800a65a:	460d      	mov	r5, r1
 800a65c:	4614      	mov	r4, r2
 800a65e:	d50e      	bpl.n	800a67e <_svfiprintf_r+0x32>
 800a660:	690b      	ldr	r3, [r1, #16]
 800a662:	b963      	cbnz	r3, 800a67e <_svfiprintf_r+0x32>
 800a664:	2140      	movs	r1, #64	; 0x40
 800a666:	f000 fad5 	bl	800ac14 <_malloc_r>
 800a66a:	6028      	str	r0, [r5, #0]
 800a66c:	6128      	str	r0, [r5, #16]
 800a66e:	b920      	cbnz	r0, 800a67a <_svfiprintf_r+0x2e>
 800a670:	230c      	movs	r3, #12
 800a672:	603b      	str	r3, [r7, #0]
 800a674:	f04f 30ff 	mov.w	r0, #4294967295
 800a678:	e0d1      	b.n	800a81e <_svfiprintf_r+0x1d2>
 800a67a:	2340      	movs	r3, #64	; 0x40
 800a67c:	616b      	str	r3, [r5, #20]
 800a67e:	2300      	movs	r3, #0
 800a680:	9309      	str	r3, [sp, #36]	; 0x24
 800a682:	2320      	movs	r3, #32
 800a684:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a688:	f8cd 800c 	str.w	r8, [sp, #12]
 800a68c:	2330      	movs	r3, #48	; 0x30
 800a68e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a838 <_svfiprintf_r+0x1ec>
 800a692:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a696:	f04f 0901 	mov.w	r9, #1
 800a69a:	4623      	mov	r3, r4
 800a69c:	469a      	mov	sl, r3
 800a69e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6a2:	b10a      	cbz	r2, 800a6a8 <_svfiprintf_r+0x5c>
 800a6a4:	2a25      	cmp	r2, #37	; 0x25
 800a6a6:	d1f9      	bne.n	800a69c <_svfiprintf_r+0x50>
 800a6a8:	ebba 0b04 	subs.w	fp, sl, r4
 800a6ac:	d00b      	beq.n	800a6c6 <_svfiprintf_r+0x7a>
 800a6ae:	465b      	mov	r3, fp
 800a6b0:	4622      	mov	r2, r4
 800a6b2:	4629      	mov	r1, r5
 800a6b4:	4638      	mov	r0, r7
 800a6b6:	f7ff ff6d 	bl	800a594 <__ssputs_r>
 800a6ba:	3001      	adds	r0, #1
 800a6bc:	f000 80aa 	beq.w	800a814 <_svfiprintf_r+0x1c8>
 800a6c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6c2:	445a      	add	r2, fp
 800a6c4:	9209      	str	r2, [sp, #36]	; 0x24
 800a6c6:	f89a 3000 	ldrb.w	r3, [sl]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	f000 80a2 	beq.w	800a814 <_svfiprintf_r+0x1c8>
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a6d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6da:	f10a 0a01 	add.w	sl, sl, #1
 800a6de:	9304      	str	r3, [sp, #16]
 800a6e0:	9307      	str	r3, [sp, #28]
 800a6e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6e6:	931a      	str	r3, [sp, #104]	; 0x68
 800a6e8:	4654      	mov	r4, sl
 800a6ea:	2205      	movs	r2, #5
 800a6ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6f0:	4851      	ldr	r0, [pc, #324]	; (800a838 <_svfiprintf_r+0x1ec>)
 800a6f2:	f7f5 fdfd 	bl	80002f0 <memchr>
 800a6f6:	9a04      	ldr	r2, [sp, #16]
 800a6f8:	b9d8      	cbnz	r0, 800a732 <_svfiprintf_r+0xe6>
 800a6fa:	06d0      	lsls	r0, r2, #27
 800a6fc:	bf44      	itt	mi
 800a6fe:	2320      	movmi	r3, #32
 800a700:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a704:	0711      	lsls	r1, r2, #28
 800a706:	bf44      	itt	mi
 800a708:	232b      	movmi	r3, #43	; 0x2b
 800a70a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a70e:	f89a 3000 	ldrb.w	r3, [sl]
 800a712:	2b2a      	cmp	r3, #42	; 0x2a
 800a714:	d015      	beq.n	800a742 <_svfiprintf_r+0xf6>
 800a716:	9a07      	ldr	r2, [sp, #28]
 800a718:	4654      	mov	r4, sl
 800a71a:	2000      	movs	r0, #0
 800a71c:	f04f 0c0a 	mov.w	ip, #10
 800a720:	4621      	mov	r1, r4
 800a722:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a726:	3b30      	subs	r3, #48	; 0x30
 800a728:	2b09      	cmp	r3, #9
 800a72a:	d94e      	bls.n	800a7ca <_svfiprintf_r+0x17e>
 800a72c:	b1b0      	cbz	r0, 800a75c <_svfiprintf_r+0x110>
 800a72e:	9207      	str	r2, [sp, #28]
 800a730:	e014      	b.n	800a75c <_svfiprintf_r+0x110>
 800a732:	eba0 0308 	sub.w	r3, r0, r8
 800a736:	fa09 f303 	lsl.w	r3, r9, r3
 800a73a:	4313      	orrs	r3, r2
 800a73c:	9304      	str	r3, [sp, #16]
 800a73e:	46a2      	mov	sl, r4
 800a740:	e7d2      	b.n	800a6e8 <_svfiprintf_r+0x9c>
 800a742:	9b03      	ldr	r3, [sp, #12]
 800a744:	1d19      	adds	r1, r3, #4
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	9103      	str	r1, [sp, #12]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	bfbb      	ittet	lt
 800a74e:	425b      	neglt	r3, r3
 800a750:	f042 0202 	orrlt.w	r2, r2, #2
 800a754:	9307      	strge	r3, [sp, #28]
 800a756:	9307      	strlt	r3, [sp, #28]
 800a758:	bfb8      	it	lt
 800a75a:	9204      	strlt	r2, [sp, #16]
 800a75c:	7823      	ldrb	r3, [r4, #0]
 800a75e:	2b2e      	cmp	r3, #46	; 0x2e
 800a760:	d10c      	bne.n	800a77c <_svfiprintf_r+0x130>
 800a762:	7863      	ldrb	r3, [r4, #1]
 800a764:	2b2a      	cmp	r3, #42	; 0x2a
 800a766:	d135      	bne.n	800a7d4 <_svfiprintf_r+0x188>
 800a768:	9b03      	ldr	r3, [sp, #12]
 800a76a:	1d1a      	adds	r2, r3, #4
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	9203      	str	r2, [sp, #12]
 800a770:	2b00      	cmp	r3, #0
 800a772:	bfb8      	it	lt
 800a774:	f04f 33ff 	movlt.w	r3, #4294967295
 800a778:	3402      	adds	r4, #2
 800a77a:	9305      	str	r3, [sp, #20]
 800a77c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a848 <_svfiprintf_r+0x1fc>
 800a780:	7821      	ldrb	r1, [r4, #0]
 800a782:	2203      	movs	r2, #3
 800a784:	4650      	mov	r0, sl
 800a786:	f7f5 fdb3 	bl	80002f0 <memchr>
 800a78a:	b140      	cbz	r0, 800a79e <_svfiprintf_r+0x152>
 800a78c:	2340      	movs	r3, #64	; 0x40
 800a78e:	eba0 000a 	sub.w	r0, r0, sl
 800a792:	fa03 f000 	lsl.w	r0, r3, r0
 800a796:	9b04      	ldr	r3, [sp, #16]
 800a798:	4303      	orrs	r3, r0
 800a79a:	3401      	adds	r4, #1
 800a79c:	9304      	str	r3, [sp, #16]
 800a79e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7a2:	4826      	ldr	r0, [pc, #152]	; (800a83c <_svfiprintf_r+0x1f0>)
 800a7a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7a8:	2206      	movs	r2, #6
 800a7aa:	f7f5 fda1 	bl	80002f0 <memchr>
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	d038      	beq.n	800a824 <_svfiprintf_r+0x1d8>
 800a7b2:	4b23      	ldr	r3, [pc, #140]	; (800a840 <_svfiprintf_r+0x1f4>)
 800a7b4:	bb1b      	cbnz	r3, 800a7fe <_svfiprintf_r+0x1b2>
 800a7b6:	9b03      	ldr	r3, [sp, #12]
 800a7b8:	3307      	adds	r3, #7
 800a7ba:	f023 0307 	bic.w	r3, r3, #7
 800a7be:	3308      	adds	r3, #8
 800a7c0:	9303      	str	r3, [sp, #12]
 800a7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7c4:	4433      	add	r3, r6
 800a7c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a7c8:	e767      	b.n	800a69a <_svfiprintf_r+0x4e>
 800a7ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7ce:	460c      	mov	r4, r1
 800a7d0:	2001      	movs	r0, #1
 800a7d2:	e7a5      	b.n	800a720 <_svfiprintf_r+0xd4>
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	3401      	adds	r4, #1
 800a7d8:	9305      	str	r3, [sp, #20]
 800a7da:	4619      	mov	r1, r3
 800a7dc:	f04f 0c0a 	mov.w	ip, #10
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7e6:	3a30      	subs	r2, #48	; 0x30
 800a7e8:	2a09      	cmp	r2, #9
 800a7ea:	d903      	bls.n	800a7f4 <_svfiprintf_r+0x1a8>
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d0c5      	beq.n	800a77c <_svfiprintf_r+0x130>
 800a7f0:	9105      	str	r1, [sp, #20]
 800a7f2:	e7c3      	b.n	800a77c <_svfiprintf_r+0x130>
 800a7f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7f8:	4604      	mov	r4, r0
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e7f0      	b.n	800a7e0 <_svfiprintf_r+0x194>
 800a7fe:	ab03      	add	r3, sp, #12
 800a800:	9300      	str	r3, [sp, #0]
 800a802:	462a      	mov	r2, r5
 800a804:	4b0f      	ldr	r3, [pc, #60]	; (800a844 <_svfiprintf_r+0x1f8>)
 800a806:	a904      	add	r1, sp, #16
 800a808:	4638      	mov	r0, r7
 800a80a:	f3af 8000 	nop.w
 800a80e:	1c42      	adds	r2, r0, #1
 800a810:	4606      	mov	r6, r0
 800a812:	d1d6      	bne.n	800a7c2 <_svfiprintf_r+0x176>
 800a814:	89ab      	ldrh	r3, [r5, #12]
 800a816:	065b      	lsls	r3, r3, #25
 800a818:	f53f af2c 	bmi.w	800a674 <_svfiprintf_r+0x28>
 800a81c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a81e:	b01d      	add	sp, #116	; 0x74
 800a820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a824:	ab03      	add	r3, sp, #12
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	462a      	mov	r2, r5
 800a82a:	4b06      	ldr	r3, [pc, #24]	; (800a844 <_svfiprintf_r+0x1f8>)
 800a82c:	a904      	add	r1, sp, #16
 800a82e:	4638      	mov	r0, r7
 800a830:	f000 f87a 	bl	800a928 <_printf_i>
 800a834:	e7eb      	b.n	800a80e <_svfiprintf_r+0x1c2>
 800a836:	bf00      	nop
 800a838:	0800b56c 	.word	0x0800b56c
 800a83c:	0800b576 	.word	0x0800b576
 800a840:	00000000 	.word	0x00000000
 800a844:	0800a595 	.word	0x0800a595
 800a848:	0800b572 	.word	0x0800b572

0800a84c <_printf_common>:
 800a84c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a850:	4616      	mov	r6, r2
 800a852:	4699      	mov	r9, r3
 800a854:	688a      	ldr	r2, [r1, #8]
 800a856:	690b      	ldr	r3, [r1, #16]
 800a858:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a85c:	4293      	cmp	r3, r2
 800a85e:	bfb8      	it	lt
 800a860:	4613      	movlt	r3, r2
 800a862:	6033      	str	r3, [r6, #0]
 800a864:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a868:	4607      	mov	r7, r0
 800a86a:	460c      	mov	r4, r1
 800a86c:	b10a      	cbz	r2, 800a872 <_printf_common+0x26>
 800a86e:	3301      	adds	r3, #1
 800a870:	6033      	str	r3, [r6, #0]
 800a872:	6823      	ldr	r3, [r4, #0]
 800a874:	0699      	lsls	r1, r3, #26
 800a876:	bf42      	ittt	mi
 800a878:	6833      	ldrmi	r3, [r6, #0]
 800a87a:	3302      	addmi	r3, #2
 800a87c:	6033      	strmi	r3, [r6, #0]
 800a87e:	6825      	ldr	r5, [r4, #0]
 800a880:	f015 0506 	ands.w	r5, r5, #6
 800a884:	d106      	bne.n	800a894 <_printf_common+0x48>
 800a886:	f104 0a19 	add.w	sl, r4, #25
 800a88a:	68e3      	ldr	r3, [r4, #12]
 800a88c:	6832      	ldr	r2, [r6, #0]
 800a88e:	1a9b      	subs	r3, r3, r2
 800a890:	42ab      	cmp	r3, r5
 800a892:	dc26      	bgt.n	800a8e2 <_printf_common+0x96>
 800a894:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a898:	1e13      	subs	r3, r2, #0
 800a89a:	6822      	ldr	r2, [r4, #0]
 800a89c:	bf18      	it	ne
 800a89e:	2301      	movne	r3, #1
 800a8a0:	0692      	lsls	r2, r2, #26
 800a8a2:	d42b      	bmi.n	800a8fc <_printf_common+0xb0>
 800a8a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a8a8:	4649      	mov	r1, r9
 800a8aa:	4638      	mov	r0, r7
 800a8ac:	47c0      	blx	r8
 800a8ae:	3001      	adds	r0, #1
 800a8b0:	d01e      	beq.n	800a8f0 <_printf_common+0xa4>
 800a8b2:	6823      	ldr	r3, [r4, #0]
 800a8b4:	68e5      	ldr	r5, [r4, #12]
 800a8b6:	6832      	ldr	r2, [r6, #0]
 800a8b8:	f003 0306 	and.w	r3, r3, #6
 800a8bc:	2b04      	cmp	r3, #4
 800a8be:	bf08      	it	eq
 800a8c0:	1aad      	subeq	r5, r5, r2
 800a8c2:	68a3      	ldr	r3, [r4, #8]
 800a8c4:	6922      	ldr	r2, [r4, #16]
 800a8c6:	bf0c      	ite	eq
 800a8c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8cc:	2500      	movne	r5, #0
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	bfc4      	itt	gt
 800a8d2:	1a9b      	subgt	r3, r3, r2
 800a8d4:	18ed      	addgt	r5, r5, r3
 800a8d6:	2600      	movs	r6, #0
 800a8d8:	341a      	adds	r4, #26
 800a8da:	42b5      	cmp	r5, r6
 800a8dc:	d11a      	bne.n	800a914 <_printf_common+0xc8>
 800a8de:	2000      	movs	r0, #0
 800a8e0:	e008      	b.n	800a8f4 <_printf_common+0xa8>
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	4652      	mov	r2, sl
 800a8e6:	4649      	mov	r1, r9
 800a8e8:	4638      	mov	r0, r7
 800a8ea:	47c0      	blx	r8
 800a8ec:	3001      	adds	r0, #1
 800a8ee:	d103      	bne.n	800a8f8 <_printf_common+0xac>
 800a8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8f8:	3501      	adds	r5, #1
 800a8fa:	e7c6      	b.n	800a88a <_printf_common+0x3e>
 800a8fc:	18e1      	adds	r1, r4, r3
 800a8fe:	1c5a      	adds	r2, r3, #1
 800a900:	2030      	movs	r0, #48	; 0x30
 800a902:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a906:	4422      	add	r2, r4
 800a908:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a90c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a910:	3302      	adds	r3, #2
 800a912:	e7c7      	b.n	800a8a4 <_printf_common+0x58>
 800a914:	2301      	movs	r3, #1
 800a916:	4622      	mov	r2, r4
 800a918:	4649      	mov	r1, r9
 800a91a:	4638      	mov	r0, r7
 800a91c:	47c0      	blx	r8
 800a91e:	3001      	adds	r0, #1
 800a920:	d0e6      	beq.n	800a8f0 <_printf_common+0xa4>
 800a922:	3601      	adds	r6, #1
 800a924:	e7d9      	b.n	800a8da <_printf_common+0x8e>
	...

0800a928 <_printf_i>:
 800a928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a92c:	460c      	mov	r4, r1
 800a92e:	4691      	mov	r9, r2
 800a930:	7e27      	ldrb	r7, [r4, #24]
 800a932:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a934:	2f78      	cmp	r7, #120	; 0x78
 800a936:	4680      	mov	r8, r0
 800a938:	469a      	mov	sl, r3
 800a93a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a93e:	d807      	bhi.n	800a950 <_printf_i+0x28>
 800a940:	2f62      	cmp	r7, #98	; 0x62
 800a942:	d80a      	bhi.n	800a95a <_printf_i+0x32>
 800a944:	2f00      	cmp	r7, #0
 800a946:	f000 80d8 	beq.w	800aafa <_printf_i+0x1d2>
 800a94a:	2f58      	cmp	r7, #88	; 0x58
 800a94c:	f000 80a3 	beq.w	800aa96 <_printf_i+0x16e>
 800a950:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a954:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a958:	e03a      	b.n	800a9d0 <_printf_i+0xa8>
 800a95a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a95e:	2b15      	cmp	r3, #21
 800a960:	d8f6      	bhi.n	800a950 <_printf_i+0x28>
 800a962:	a001      	add	r0, pc, #4	; (adr r0, 800a968 <_printf_i+0x40>)
 800a964:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a968:	0800a9c1 	.word	0x0800a9c1
 800a96c:	0800a9d5 	.word	0x0800a9d5
 800a970:	0800a951 	.word	0x0800a951
 800a974:	0800a951 	.word	0x0800a951
 800a978:	0800a951 	.word	0x0800a951
 800a97c:	0800a951 	.word	0x0800a951
 800a980:	0800a9d5 	.word	0x0800a9d5
 800a984:	0800a951 	.word	0x0800a951
 800a988:	0800a951 	.word	0x0800a951
 800a98c:	0800a951 	.word	0x0800a951
 800a990:	0800a951 	.word	0x0800a951
 800a994:	0800aae1 	.word	0x0800aae1
 800a998:	0800aa05 	.word	0x0800aa05
 800a99c:	0800aac3 	.word	0x0800aac3
 800a9a0:	0800a951 	.word	0x0800a951
 800a9a4:	0800a951 	.word	0x0800a951
 800a9a8:	0800ab03 	.word	0x0800ab03
 800a9ac:	0800a951 	.word	0x0800a951
 800a9b0:	0800aa05 	.word	0x0800aa05
 800a9b4:	0800a951 	.word	0x0800a951
 800a9b8:	0800a951 	.word	0x0800a951
 800a9bc:	0800aacb 	.word	0x0800aacb
 800a9c0:	680b      	ldr	r3, [r1, #0]
 800a9c2:	1d1a      	adds	r2, r3, #4
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	600a      	str	r2, [r1, #0]
 800a9c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a9cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	e0a3      	b.n	800ab1c <_printf_i+0x1f4>
 800a9d4:	6825      	ldr	r5, [r4, #0]
 800a9d6:	6808      	ldr	r0, [r1, #0]
 800a9d8:	062e      	lsls	r6, r5, #24
 800a9da:	f100 0304 	add.w	r3, r0, #4
 800a9de:	d50a      	bpl.n	800a9f6 <_printf_i+0xce>
 800a9e0:	6805      	ldr	r5, [r0, #0]
 800a9e2:	600b      	str	r3, [r1, #0]
 800a9e4:	2d00      	cmp	r5, #0
 800a9e6:	da03      	bge.n	800a9f0 <_printf_i+0xc8>
 800a9e8:	232d      	movs	r3, #45	; 0x2d
 800a9ea:	426d      	negs	r5, r5
 800a9ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9f0:	485e      	ldr	r0, [pc, #376]	; (800ab6c <_printf_i+0x244>)
 800a9f2:	230a      	movs	r3, #10
 800a9f4:	e019      	b.n	800aa2a <_printf_i+0x102>
 800a9f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a9fa:	6805      	ldr	r5, [r0, #0]
 800a9fc:	600b      	str	r3, [r1, #0]
 800a9fe:	bf18      	it	ne
 800aa00:	b22d      	sxthne	r5, r5
 800aa02:	e7ef      	b.n	800a9e4 <_printf_i+0xbc>
 800aa04:	680b      	ldr	r3, [r1, #0]
 800aa06:	6825      	ldr	r5, [r4, #0]
 800aa08:	1d18      	adds	r0, r3, #4
 800aa0a:	6008      	str	r0, [r1, #0]
 800aa0c:	0628      	lsls	r0, r5, #24
 800aa0e:	d501      	bpl.n	800aa14 <_printf_i+0xec>
 800aa10:	681d      	ldr	r5, [r3, #0]
 800aa12:	e002      	b.n	800aa1a <_printf_i+0xf2>
 800aa14:	0669      	lsls	r1, r5, #25
 800aa16:	d5fb      	bpl.n	800aa10 <_printf_i+0xe8>
 800aa18:	881d      	ldrh	r5, [r3, #0]
 800aa1a:	4854      	ldr	r0, [pc, #336]	; (800ab6c <_printf_i+0x244>)
 800aa1c:	2f6f      	cmp	r7, #111	; 0x6f
 800aa1e:	bf0c      	ite	eq
 800aa20:	2308      	moveq	r3, #8
 800aa22:	230a      	movne	r3, #10
 800aa24:	2100      	movs	r1, #0
 800aa26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa2a:	6866      	ldr	r6, [r4, #4]
 800aa2c:	60a6      	str	r6, [r4, #8]
 800aa2e:	2e00      	cmp	r6, #0
 800aa30:	bfa2      	ittt	ge
 800aa32:	6821      	ldrge	r1, [r4, #0]
 800aa34:	f021 0104 	bicge.w	r1, r1, #4
 800aa38:	6021      	strge	r1, [r4, #0]
 800aa3a:	b90d      	cbnz	r5, 800aa40 <_printf_i+0x118>
 800aa3c:	2e00      	cmp	r6, #0
 800aa3e:	d04d      	beq.n	800aadc <_printf_i+0x1b4>
 800aa40:	4616      	mov	r6, r2
 800aa42:	fbb5 f1f3 	udiv	r1, r5, r3
 800aa46:	fb03 5711 	mls	r7, r3, r1, r5
 800aa4a:	5dc7      	ldrb	r7, [r0, r7]
 800aa4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aa50:	462f      	mov	r7, r5
 800aa52:	42bb      	cmp	r3, r7
 800aa54:	460d      	mov	r5, r1
 800aa56:	d9f4      	bls.n	800aa42 <_printf_i+0x11a>
 800aa58:	2b08      	cmp	r3, #8
 800aa5a:	d10b      	bne.n	800aa74 <_printf_i+0x14c>
 800aa5c:	6823      	ldr	r3, [r4, #0]
 800aa5e:	07df      	lsls	r7, r3, #31
 800aa60:	d508      	bpl.n	800aa74 <_printf_i+0x14c>
 800aa62:	6923      	ldr	r3, [r4, #16]
 800aa64:	6861      	ldr	r1, [r4, #4]
 800aa66:	4299      	cmp	r1, r3
 800aa68:	bfde      	ittt	le
 800aa6a:	2330      	movle	r3, #48	; 0x30
 800aa6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aa70:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aa74:	1b92      	subs	r2, r2, r6
 800aa76:	6122      	str	r2, [r4, #16]
 800aa78:	f8cd a000 	str.w	sl, [sp]
 800aa7c:	464b      	mov	r3, r9
 800aa7e:	aa03      	add	r2, sp, #12
 800aa80:	4621      	mov	r1, r4
 800aa82:	4640      	mov	r0, r8
 800aa84:	f7ff fee2 	bl	800a84c <_printf_common>
 800aa88:	3001      	adds	r0, #1
 800aa8a:	d14c      	bne.n	800ab26 <_printf_i+0x1fe>
 800aa8c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa90:	b004      	add	sp, #16
 800aa92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa96:	4835      	ldr	r0, [pc, #212]	; (800ab6c <_printf_i+0x244>)
 800aa98:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aa9c:	6823      	ldr	r3, [r4, #0]
 800aa9e:	680e      	ldr	r6, [r1, #0]
 800aaa0:	061f      	lsls	r7, r3, #24
 800aaa2:	f856 5b04 	ldr.w	r5, [r6], #4
 800aaa6:	600e      	str	r6, [r1, #0]
 800aaa8:	d514      	bpl.n	800aad4 <_printf_i+0x1ac>
 800aaaa:	07d9      	lsls	r1, r3, #31
 800aaac:	bf44      	itt	mi
 800aaae:	f043 0320 	orrmi.w	r3, r3, #32
 800aab2:	6023      	strmi	r3, [r4, #0]
 800aab4:	b91d      	cbnz	r5, 800aabe <_printf_i+0x196>
 800aab6:	6823      	ldr	r3, [r4, #0]
 800aab8:	f023 0320 	bic.w	r3, r3, #32
 800aabc:	6023      	str	r3, [r4, #0]
 800aabe:	2310      	movs	r3, #16
 800aac0:	e7b0      	b.n	800aa24 <_printf_i+0xfc>
 800aac2:	6823      	ldr	r3, [r4, #0]
 800aac4:	f043 0320 	orr.w	r3, r3, #32
 800aac8:	6023      	str	r3, [r4, #0]
 800aaca:	2378      	movs	r3, #120	; 0x78
 800aacc:	4828      	ldr	r0, [pc, #160]	; (800ab70 <_printf_i+0x248>)
 800aace:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aad2:	e7e3      	b.n	800aa9c <_printf_i+0x174>
 800aad4:	065e      	lsls	r6, r3, #25
 800aad6:	bf48      	it	mi
 800aad8:	b2ad      	uxthmi	r5, r5
 800aada:	e7e6      	b.n	800aaaa <_printf_i+0x182>
 800aadc:	4616      	mov	r6, r2
 800aade:	e7bb      	b.n	800aa58 <_printf_i+0x130>
 800aae0:	680b      	ldr	r3, [r1, #0]
 800aae2:	6826      	ldr	r6, [r4, #0]
 800aae4:	6960      	ldr	r0, [r4, #20]
 800aae6:	1d1d      	adds	r5, r3, #4
 800aae8:	600d      	str	r5, [r1, #0]
 800aaea:	0635      	lsls	r5, r6, #24
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	d501      	bpl.n	800aaf4 <_printf_i+0x1cc>
 800aaf0:	6018      	str	r0, [r3, #0]
 800aaf2:	e002      	b.n	800aafa <_printf_i+0x1d2>
 800aaf4:	0671      	lsls	r1, r6, #25
 800aaf6:	d5fb      	bpl.n	800aaf0 <_printf_i+0x1c8>
 800aaf8:	8018      	strh	r0, [r3, #0]
 800aafa:	2300      	movs	r3, #0
 800aafc:	6123      	str	r3, [r4, #16]
 800aafe:	4616      	mov	r6, r2
 800ab00:	e7ba      	b.n	800aa78 <_printf_i+0x150>
 800ab02:	680b      	ldr	r3, [r1, #0]
 800ab04:	1d1a      	adds	r2, r3, #4
 800ab06:	600a      	str	r2, [r1, #0]
 800ab08:	681e      	ldr	r6, [r3, #0]
 800ab0a:	6862      	ldr	r2, [r4, #4]
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	4630      	mov	r0, r6
 800ab10:	f7f5 fbee 	bl	80002f0 <memchr>
 800ab14:	b108      	cbz	r0, 800ab1a <_printf_i+0x1f2>
 800ab16:	1b80      	subs	r0, r0, r6
 800ab18:	6060      	str	r0, [r4, #4]
 800ab1a:	6863      	ldr	r3, [r4, #4]
 800ab1c:	6123      	str	r3, [r4, #16]
 800ab1e:	2300      	movs	r3, #0
 800ab20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab24:	e7a8      	b.n	800aa78 <_printf_i+0x150>
 800ab26:	6923      	ldr	r3, [r4, #16]
 800ab28:	4632      	mov	r2, r6
 800ab2a:	4649      	mov	r1, r9
 800ab2c:	4640      	mov	r0, r8
 800ab2e:	47d0      	blx	sl
 800ab30:	3001      	adds	r0, #1
 800ab32:	d0ab      	beq.n	800aa8c <_printf_i+0x164>
 800ab34:	6823      	ldr	r3, [r4, #0]
 800ab36:	079b      	lsls	r3, r3, #30
 800ab38:	d413      	bmi.n	800ab62 <_printf_i+0x23a>
 800ab3a:	68e0      	ldr	r0, [r4, #12]
 800ab3c:	9b03      	ldr	r3, [sp, #12]
 800ab3e:	4298      	cmp	r0, r3
 800ab40:	bfb8      	it	lt
 800ab42:	4618      	movlt	r0, r3
 800ab44:	e7a4      	b.n	800aa90 <_printf_i+0x168>
 800ab46:	2301      	movs	r3, #1
 800ab48:	4632      	mov	r2, r6
 800ab4a:	4649      	mov	r1, r9
 800ab4c:	4640      	mov	r0, r8
 800ab4e:	47d0      	blx	sl
 800ab50:	3001      	adds	r0, #1
 800ab52:	d09b      	beq.n	800aa8c <_printf_i+0x164>
 800ab54:	3501      	adds	r5, #1
 800ab56:	68e3      	ldr	r3, [r4, #12]
 800ab58:	9903      	ldr	r1, [sp, #12]
 800ab5a:	1a5b      	subs	r3, r3, r1
 800ab5c:	42ab      	cmp	r3, r5
 800ab5e:	dcf2      	bgt.n	800ab46 <_printf_i+0x21e>
 800ab60:	e7eb      	b.n	800ab3a <_printf_i+0x212>
 800ab62:	2500      	movs	r5, #0
 800ab64:	f104 0619 	add.w	r6, r4, #25
 800ab68:	e7f5      	b.n	800ab56 <_printf_i+0x22e>
 800ab6a:	bf00      	nop
 800ab6c:	0800b57d 	.word	0x0800b57d
 800ab70:	0800b58e 	.word	0x0800b58e

0800ab74 <_free_r>:
 800ab74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab76:	2900      	cmp	r1, #0
 800ab78:	d048      	beq.n	800ac0c <_free_r+0x98>
 800ab7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab7e:	9001      	str	r0, [sp, #4]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	f1a1 0404 	sub.w	r4, r1, #4
 800ab86:	bfb8      	it	lt
 800ab88:	18e4      	addlt	r4, r4, r3
 800ab8a:	f000 f8d3 	bl	800ad34 <__malloc_lock>
 800ab8e:	4a20      	ldr	r2, [pc, #128]	; (800ac10 <_free_r+0x9c>)
 800ab90:	9801      	ldr	r0, [sp, #4]
 800ab92:	6813      	ldr	r3, [r2, #0]
 800ab94:	4615      	mov	r5, r2
 800ab96:	b933      	cbnz	r3, 800aba6 <_free_r+0x32>
 800ab98:	6063      	str	r3, [r4, #4]
 800ab9a:	6014      	str	r4, [r2, #0]
 800ab9c:	b003      	add	sp, #12
 800ab9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aba2:	f000 b8cd 	b.w	800ad40 <__malloc_unlock>
 800aba6:	42a3      	cmp	r3, r4
 800aba8:	d90b      	bls.n	800abc2 <_free_r+0x4e>
 800abaa:	6821      	ldr	r1, [r4, #0]
 800abac:	1862      	adds	r2, r4, r1
 800abae:	4293      	cmp	r3, r2
 800abb0:	bf04      	itt	eq
 800abb2:	681a      	ldreq	r2, [r3, #0]
 800abb4:	685b      	ldreq	r3, [r3, #4]
 800abb6:	6063      	str	r3, [r4, #4]
 800abb8:	bf04      	itt	eq
 800abba:	1852      	addeq	r2, r2, r1
 800abbc:	6022      	streq	r2, [r4, #0]
 800abbe:	602c      	str	r4, [r5, #0]
 800abc0:	e7ec      	b.n	800ab9c <_free_r+0x28>
 800abc2:	461a      	mov	r2, r3
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	b10b      	cbz	r3, 800abcc <_free_r+0x58>
 800abc8:	42a3      	cmp	r3, r4
 800abca:	d9fa      	bls.n	800abc2 <_free_r+0x4e>
 800abcc:	6811      	ldr	r1, [r2, #0]
 800abce:	1855      	adds	r5, r2, r1
 800abd0:	42a5      	cmp	r5, r4
 800abd2:	d10b      	bne.n	800abec <_free_r+0x78>
 800abd4:	6824      	ldr	r4, [r4, #0]
 800abd6:	4421      	add	r1, r4
 800abd8:	1854      	adds	r4, r2, r1
 800abda:	42a3      	cmp	r3, r4
 800abdc:	6011      	str	r1, [r2, #0]
 800abde:	d1dd      	bne.n	800ab9c <_free_r+0x28>
 800abe0:	681c      	ldr	r4, [r3, #0]
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	6053      	str	r3, [r2, #4]
 800abe6:	4421      	add	r1, r4
 800abe8:	6011      	str	r1, [r2, #0]
 800abea:	e7d7      	b.n	800ab9c <_free_r+0x28>
 800abec:	d902      	bls.n	800abf4 <_free_r+0x80>
 800abee:	230c      	movs	r3, #12
 800abf0:	6003      	str	r3, [r0, #0]
 800abf2:	e7d3      	b.n	800ab9c <_free_r+0x28>
 800abf4:	6825      	ldr	r5, [r4, #0]
 800abf6:	1961      	adds	r1, r4, r5
 800abf8:	428b      	cmp	r3, r1
 800abfa:	bf04      	itt	eq
 800abfc:	6819      	ldreq	r1, [r3, #0]
 800abfe:	685b      	ldreq	r3, [r3, #4]
 800ac00:	6063      	str	r3, [r4, #4]
 800ac02:	bf04      	itt	eq
 800ac04:	1949      	addeq	r1, r1, r5
 800ac06:	6021      	streq	r1, [r4, #0]
 800ac08:	6054      	str	r4, [r2, #4]
 800ac0a:	e7c7      	b.n	800ab9c <_free_r+0x28>
 800ac0c:	b003      	add	sp, #12
 800ac0e:	bd30      	pop	{r4, r5, pc}
 800ac10:	240004a4 	.word	0x240004a4

0800ac14 <_malloc_r>:
 800ac14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac16:	1ccd      	adds	r5, r1, #3
 800ac18:	f025 0503 	bic.w	r5, r5, #3
 800ac1c:	3508      	adds	r5, #8
 800ac1e:	2d0c      	cmp	r5, #12
 800ac20:	bf38      	it	cc
 800ac22:	250c      	movcc	r5, #12
 800ac24:	2d00      	cmp	r5, #0
 800ac26:	4606      	mov	r6, r0
 800ac28:	db01      	blt.n	800ac2e <_malloc_r+0x1a>
 800ac2a:	42a9      	cmp	r1, r5
 800ac2c:	d903      	bls.n	800ac36 <_malloc_r+0x22>
 800ac2e:	230c      	movs	r3, #12
 800ac30:	6033      	str	r3, [r6, #0]
 800ac32:	2000      	movs	r0, #0
 800ac34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac36:	f000 f87d 	bl	800ad34 <__malloc_lock>
 800ac3a:	4921      	ldr	r1, [pc, #132]	; (800acc0 <_malloc_r+0xac>)
 800ac3c:	680a      	ldr	r2, [r1, #0]
 800ac3e:	4614      	mov	r4, r2
 800ac40:	b99c      	cbnz	r4, 800ac6a <_malloc_r+0x56>
 800ac42:	4f20      	ldr	r7, [pc, #128]	; (800acc4 <_malloc_r+0xb0>)
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	b923      	cbnz	r3, 800ac52 <_malloc_r+0x3e>
 800ac48:	4621      	mov	r1, r4
 800ac4a:	4630      	mov	r0, r6
 800ac4c:	f000 f862 	bl	800ad14 <_sbrk_r>
 800ac50:	6038      	str	r0, [r7, #0]
 800ac52:	4629      	mov	r1, r5
 800ac54:	4630      	mov	r0, r6
 800ac56:	f000 f85d 	bl	800ad14 <_sbrk_r>
 800ac5a:	1c43      	adds	r3, r0, #1
 800ac5c:	d123      	bne.n	800aca6 <_malloc_r+0x92>
 800ac5e:	230c      	movs	r3, #12
 800ac60:	6033      	str	r3, [r6, #0]
 800ac62:	4630      	mov	r0, r6
 800ac64:	f000 f86c 	bl	800ad40 <__malloc_unlock>
 800ac68:	e7e3      	b.n	800ac32 <_malloc_r+0x1e>
 800ac6a:	6823      	ldr	r3, [r4, #0]
 800ac6c:	1b5b      	subs	r3, r3, r5
 800ac6e:	d417      	bmi.n	800aca0 <_malloc_r+0x8c>
 800ac70:	2b0b      	cmp	r3, #11
 800ac72:	d903      	bls.n	800ac7c <_malloc_r+0x68>
 800ac74:	6023      	str	r3, [r4, #0]
 800ac76:	441c      	add	r4, r3
 800ac78:	6025      	str	r5, [r4, #0]
 800ac7a:	e004      	b.n	800ac86 <_malloc_r+0x72>
 800ac7c:	6863      	ldr	r3, [r4, #4]
 800ac7e:	42a2      	cmp	r2, r4
 800ac80:	bf0c      	ite	eq
 800ac82:	600b      	streq	r3, [r1, #0]
 800ac84:	6053      	strne	r3, [r2, #4]
 800ac86:	4630      	mov	r0, r6
 800ac88:	f000 f85a 	bl	800ad40 <__malloc_unlock>
 800ac8c:	f104 000b 	add.w	r0, r4, #11
 800ac90:	1d23      	adds	r3, r4, #4
 800ac92:	f020 0007 	bic.w	r0, r0, #7
 800ac96:	1ac2      	subs	r2, r0, r3
 800ac98:	d0cc      	beq.n	800ac34 <_malloc_r+0x20>
 800ac9a:	1a1b      	subs	r3, r3, r0
 800ac9c:	50a3      	str	r3, [r4, r2]
 800ac9e:	e7c9      	b.n	800ac34 <_malloc_r+0x20>
 800aca0:	4622      	mov	r2, r4
 800aca2:	6864      	ldr	r4, [r4, #4]
 800aca4:	e7cc      	b.n	800ac40 <_malloc_r+0x2c>
 800aca6:	1cc4      	adds	r4, r0, #3
 800aca8:	f024 0403 	bic.w	r4, r4, #3
 800acac:	42a0      	cmp	r0, r4
 800acae:	d0e3      	beq.n	800ac78 <_malloc_r+0x64>
 800acb0:	1a21      	subs	r1, r4, r0
 800acb2:	4630      	mov	r0, r6
 800acb4:	f000 f82e 	bl	800ad14 <_sbrk_r>
 800acb8:	3001      	adds	r0, #1
 800acba:	d1dd      	bne.n	800ac78 <_malloc_r+0x64>
 800acbc:	e7cf      	b.n	800ac5e <_malloc_r+0x4a>
 800acbe:	bf00      	nop
 800acc0:	240004a4 	.word	0x240004a4
 800acc4:	240004a8 	.word	0x240004a8

0800acc8 <_realloc_r>:
 800acc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acca:	4607      	mov	r7, r0
 800accc:	4614      	mov	r4, r2
 800acce:	460e      	mov	r6, r1
 800acd0:	b921      	cbnz	r1, 800acdc <_realloc_r+0x14>
 800acd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800acd6:	4611      	mov	r1, r2
 800acd8:	f7ff bf9c 	b.w	800ac14 <_malloc_r>
 800acdc:	b922      	cbnz	r2, 800ace8 <_realloc_r+0x20>
 800acde:	f7ff ff49 	bl	800ab74 <_free_r>
 800ace2:	4625      	mov	r5, r4
 800ace4:	4628      	mov	r0, r5
 800ace6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ace8:	f000 f830 	bl	800ad4c <_malloc_usable_size_r>
 800acec:	42a0      	cmp	r0, r4
 800acee:	d20f      	bcs.n	800ad10 <_realloc_r+0x48>
 800acf0:	4621      	mov	r1, r4
 800acf2:	4638      	mov	r0, r7
 800acf4:	f7ff ff8e 	bl	800ac14 <_malloc_r>
 800acf8:	4605      	mov	r5, r0
 800acfa:	2800      	cmp	r0, #0
 800acfc:	d0f2      	beq.n	800ace4 <_realloc_r+0x1c>
 800acfe:	4631      	mov	r1, r6
 800ad00:	4622      	mov	r2, r4
 800ad02:	f7ff fbf7 	bl	800a4f4 <memcpy>
 800ad06:	4631      	mov	r1, r6
 800ad08:	4638      	mov	r0, r7
 800ad0a:	f7ff ff33 	bl	800ab74 <_free_r>
 800ad0e:	e7e9      	b.n	800ace4 <_realloc_r+0x1c>
 800ad10:	4635      	mov	r5, r6
 800ad12:	e7e7      	b.n	800ace4 <_realloc_r+0x1c>

0800ad14 <_sbrk_r>:
 800ad14:	b538      	push	{r3, r4, r5, lr}
 800ad16:	4d06      	ldr	r5, [pc, #24]	; (800ad30 <_sbrk_r+0x1c>)
 800ad18:	2300      	movs	r3, #0
 800ad1a:	4604      	mov	r4, r0
 800ad1c:	4608      	mov	r0, r1
 800ad1e:	602b      	str	r3, [r5, #0]
 800ad20:	f7f7 fa8a 	bl	8002238 <_sbrk>
 800ad24:	1c43      	adds	r3, r0, #1
 800ad26:	d102      	bne.n	800ad2e <_sbrk_r+0x1a>
 800ad28:	682b      	ldr	r3, [r5, #0]
 800ad2a:	b103      	cbz	r3, 800ad2e <_sbrk_r+0x1a>
 800ad2c:	6023      	str	r3, [r4, #0]
 800ad2e:	bd38      	pop	{r3, r4, r5, pc}
 800ad30:	24000b5c 	.word	0x24000b5c

0800ad34 <__malloc_lock>:
 800ad34:	4801      	ldr	r0, [pc, #4]	; (800ad3c <__malloc_lock+0x8>)
 800ad36:	f000 b811 	b.w	800ad5c <__retarget_lock_acquire_recursive>
 800ad3a:	bf00      	nop
 800ad3c:	24000b64 	.word	0x24000b64

0800ad40 <__malloc_unlock>:
 800ad40:	4801      	ldr	r0, [pc, #4]	; (800ad48 <__malloc_unlock+0x8>)
 800ad42:	f000 b80c 	b.w	800ad5e <__retarget_lock_release_recursive>
 800ad46:	bf00      	nop
 800ad48:	24000b64 	.word	0x24000b64

0800ad4c <_malloc_usable_size_r>:
 800ad4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad50:	1f18      	subs	r0, r3, #4
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	bfbc      	itt	lt
 800ad56:	580b      	ldrlt	r3, [r1, r0]
 800ad58:	18c0      	addlt	r0, r0, r3
 800ad5a:	4770      	bx	lr

0800ad5c <__retarget_lock_acquire_recursive>:
 800ad5c:	4770      	bx	lr

0800ad5e <__retarget_lock_release_recursive>:
 800ad5e:	4770      	bx	lr

0800ad60 <_init>:
 800ad60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad62:	bf00      	nop
 800ad64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad66:	bc08      	pop	{r3}
 800ad68:	469e      	mov	lr, r3
 800ad6a:	4770      	bx	lr

0800ad6c <_fini>:
 800ad6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6e:	bf00      	nop
 800ad70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad72:	bc08      	pop	{r3}
 800ad74:	469e      	mov	lr, r3
 800ad76:	4770      	bx	lr
