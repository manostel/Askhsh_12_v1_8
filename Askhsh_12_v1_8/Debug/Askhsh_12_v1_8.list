
Askhsh_12_v1_8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ebc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800915c  0800915c  0001915c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080091f0  080091f0  000191f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080091f8  080091f8  000191f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080091fc  080091fc  000191fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  08009200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000061c  24000074  08009274  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000690  08009274  00020690  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002dec9  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000043bf  00000000  00000000  0004df6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001900  00000000  00000000  00052330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000017b8  00000000  00000000  00053c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a90f  00000000  00000000  000553e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000202f4  00000000  00000000  0008fcf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017a714  00000000  00000000  000affeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0022a6ff  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007074  00000000  00000000  0022a754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009144 	.word	0x08009144

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	08009144 	.word	0x08009144

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <delayUS_DWT>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void delayUS_DWT(volatile uint32_t microseconds)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000690:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <delayUS_DWT+0x40>)
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000696:	f003 fffb 	bl	8004690 <HAL_RCC_GetHCLKFreq>
 800069a:	4603      	mov	r3, r0
 800069c:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <delayUS_DWT+0x44>)
 800069e:	fba2 2303 	umull	r2, r3, r2, r3
 80006a2:	0c9b      	lsrs	r3, r3, #18
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	fb02 f303 	mul.w	r3, r2, r3
 80006aa:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80006ac:	bf00      	nop
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <delayUS_DWT+0x40>)
 80006b0:	685a      	ldr	r2, [r3, #4]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	1ad2      	subs	r2, r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d3f8      	bcc.n	80006ae <delayUS_DWT+0x26>
}
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	e0001000 	.word	0xe0001000
 80006cc:	431bde83 	.word	0x431bde83

080006d0 <writeSDA>:
#define HEX2BCD(v)	((v) % 10 + (v) / 10 * 16)
#define BCD2HEX(v)	((v) % 16 + (v) / 16 * 10)


// SDA Write(output) Mode
static void writeSDA(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SDA;
 80006d6:	2301      	movs	r3, #1
 80006d8:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80006de:	2302      	movs	r3, #2
 80006e0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4619      	mov	r1, r3
 80006e6:	4803      	ldr	r0, [pc, #12]	; (80006f4 <writeSDA+0x24>)
 80006e8:	f002 fbda 	bl	8002ea0 <HAL_GPIO_Init>
	
}
 80006ec:	bf00      	nop
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	58021400 	.word	0x58021400

080006f8 <readSDA>:


// SDA Read(input) Mode
static void readSDA(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SDA;
 80006fe:	2301      	movs	r3, #1
 8000700:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_INPUT;
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8000706:	2302      	movs	r3, #2
 8000708:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800070a:	2302      	movs	r3, #2
 800070c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);	
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	4619      	mov	r1, r3
 8000712:	4803      	ldr	r0, [pc, #12]	; (8000720 <readSDA+0x28>)
 8000714:	f002 fbc4 	bl	8002ea0 <HAL_GPIO_Init>
}
 8000718:	bf00      	nop
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	58021400 	.word	0x58021400

08000724 <DS1302_SendCmd>:


/* Отправка адреса или команды */
static void DS1302_SendCmd(uint8_t cmd) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i ++) 
 800072e:	2300      	movs	r3, #0
 8000730:	73fb      	strb	r3, [r7, #15]
 8000732:	e01e      	b.n	8000772 <DS1302_SendCmd+0x4e>
	{	
		//		DS1302_SDA = (bit)(addr & 1);
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA, (cmd & 1) ?  GPIO_PIN_SET :  GPIO_PIN_RESET);
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	461a      	mov	r2, r3
 800073e:	2101      	movs	r1, #1
 8000740:	4810      	ldr	r0, [pc, #64]	; (8000784 <DS1302_SendCmd+0x60>)
 8000742:	f002 fd75 	bl	8003230 <HAL_GPIO_WritePin>
		//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	2102      	movs	r1, #2
 800074a:	480e      	ldr	r0, [pc, #56]	; (8000784 <DS1302_SendCmd+0x60>)
 800074c:	f002 fd70 	bl	8003230 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff ff99 	bl	8000688 <delayUS_DWT>
		//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2102      	movs	r1, #2
 800075a:	480a      	ldr	r0, [pc, #40]	; (8000784 <DS1302_SendCmd+0x60>)
 800075c:	f002 fd68 	bl	8003230 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 8000760:	2001      	movs	r0, #1
 8000762:	f7ff ff91 	bl	8000688 <delayUS_DWT>
		cmd >>= 1;
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	085b      	lsrs	r3, r3, #1
 800076a:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i ++) 
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	3301      	adds	r3, #1
 8000770:	73fb      	strb	r3, [r7, #15]
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	2b07      	cmp	r3, #7
 8000776:	d9dd      	bls.n	8000734 <DS1302_SendCmd+0x10>
	}
}
 8000778:	bf00      	nop
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	58021400 	.word	0x58021400

08000788 <DS1302_WriteByte>:


/* Прочитать байт по адресу 'addr' */
static void DS1302_WriteByte(uint8_t addr, uint8_t d)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	460a      	mov	r2, r1
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	4613      	mov	r3, r2
 8000796:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	//	DS1302_RST = 1;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_SET);	
 8000798:	2201      	movs	r2, #1
 800079a:	2104      	movs	r1, #4
 800079c:	481c      	ldr	r0, [pc, #112]	; (8000810 <DS1302_WriteByte+0x88>)
 800079e:	f002 fd47 	bl	8003230 <HAL_GPIO_WritePin>
	
	//addr = addr & 0xFE;
	DS1302_SendCmd(addr);	// Отправка адреса
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ffbd 	bl	8000724 <DS1302_SendCmd>
	
	for (i = 0; i < 8; i ++) 
 80007aa:	2300      	movs	r3, #0
 80007ac:	73fb      	strb	r3, [r7, #15]
 80007ae:	e01e      	b.n	80007ee <DS1302_WriteByte+0x66>
	{
		//		DS1302_SDA = (bit)(d & 1);
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA, (d & 1) ?  GPIO_PIN_SET :  GPIO_PIN_RESET);
 80007b0:	79bb      	ldrb	r3, [r7, #6]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	461a      	mov	r2, r3
 80007ba:	2101      	movs	r1, #1
 80007bc:	4814      	ldr	r0, [pc, #80]	; (8000810 <DS1302_WriteByte+0x88>)
 80007be:	f002 fd37 	bl	8003230 <HAL_GPIO_WritePin>
		//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	2102      	movs	r1, #2
 80007c6:	4812      	ldr	r0, [pc, #72]	; (8000810 <DS1302_WriteByte+0x88>)
 80007c8:	f002 fd32 	bl	8003230 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 80007cc:	2001      	movs	r0, #1
 80007ce:	f7ff ff5b 	bl	8000688 <delayUS_DWT>
		//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2102      	movs	r1, #2
 80007d6:	480e      	ldr	r0, [pc, #56]	; (8000810 <DS1302_WriteByte+0x88>)
 80007d8:	f002 fd2a 	bl	8003230 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 80007dc:	2001      	movs	r0, #1
 80007de:	f7ff ff53 	bl	8000688 <delayUS_DWT>
		d >>= 1;
 80007e2:	79bb      	ldrb	r3, [r7, #6]
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	71bb      	strb	r3, [r7, #6]
	for (i = 0; i < 8; i ++) 
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	3301      	adds	r3, #1
 80007ec:	73fb      	strb	r3, [r7, #15]
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2b07      	cmp	r3, #7
 80007f2:	d9dd      	bls.n	80007b0 <DS1302_WriteByte+0x28>
	}
	
	//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2104      	movs	r1, #4
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <DS1302_WriteByte+0x88>)
 80007fa:	f002 fd19 	bl	8003230 <HAL_GPIO_WritePin>
	//	DS1302_SDA = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA,  GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2101      	movs	r1, #1
 8000802:	4803      	ldr	r0, [pc, #12]	; (8000810 <DS1302_WriteByte+0x88>)
 8000804:	f002 fd14 	bl	8003230 <HAL_GPIO_WritePin>
}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	58021400 	.word	0x58021400

08000814 <DS1302_ReadByte>:
}


/* Reads a byte from addr */
static uint8_t DS1302_ReadByte(uint8_t addr)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t temp = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	73bb      	strb	r3, [r7, #14]

	//	DS1302_RST = 1;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_SET);	
 8000822:	2201      	movs	r2, #1
 8000824:	2104      	movs	r1, #4
 8000826:	4822      	ldr	r0, [pc, #136]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000828:	f002 fd02 	bl	8003230 <HAL_GPIO_WritePin>
	addr = addr | 0x01; 	// Generate Read Address
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	71fb      	strb	r3, [r7, #7]

	DS1302_SendCmd(addr);	// Sends address
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff74 	bl	8000724 <DS1302_SendCmd>
	
	readSDA();
 800083c:	f7ff ff5c 	bl	80006f8 <readSDA>
	for (i = 0; i < 8; i ++) 
 8000840:	2300      	movs	r3, #0
 8000842:	73fb      	strb	r3, [r7, #15]
 8000844:	e020      	b.n	8000888 <DS1302_ReadByte+0x74>
	{
		temp >>= 1;
 8000846:	7bbb      	ldrb	r3, [r7, #14]
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	73bb      	strb	r3, [r7, #14]
		//		if(DS1302_SDA)
		if(HAL_GPIO_ReadPin(DS1302_GPIO, DS1302_SDA))
 800084c:	2101      	movs	r1, #1
 800084e:	4818      	ldr	r0, [pc, #96]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000850:	f002 fcd6 	bl	8003200 <HAL_GPIO_ReadPin>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d003      	beq.n	8000862 <DS1302_ReadByte+0x4e>
			temp |= 0x80;
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000860:	73bb      	strb	r3, [r7, #14]
		//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	2102      	movs	r1, #2
 8000866:	4812      	ldr	r0, [pc, #72]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000868:	f002 fce2 	bl	8003230 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff ff0b 	bl	8000688 <delayUS_DWT>
		//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2102      	movs	r1, #2
 8000876:	480e      	ldr	r0, [pc, #56]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000878:	f002 fcda 	bl	8003230 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 800087c:	2001      	movs	r0, #1
 800087e:	f7ff ff03 	bl	8000688 <delayUS_DWT>
	for (i = 0; i < 8; i ++) 
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	3301      	adds	r3, #1
 8000886:	73fb      	strb	r3, [r7, #15]
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	2b07      	cmp	r3, #7
 800088c:	d9db      	bls.n	8000846 <DS1302_ReadByte+0x32>
	}
	writeSDA();
 800088e:	f7ff ff1f 	bl	80006d0 <writeSDA>

	//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2104      	movs	r1, #4
 8000896:	4806      	ldr	r0, [pc, #24]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000898:	f002 fcca 	bl	8003230 <HAL_GPIO_WritePin>
	//	DS1302_SDA = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA,  GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2101      	movs	r1, #1
 80008a0:	4803      	ldr	r0, [pc, #12]	; (80008b0 <DS1302_ReadByte+0x9c>)
 80008a2:	f002 fcc5 	bl	8003230 <HAL_GPIO_WritePin>
	return temp;
 80008a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	58021400 	.word	0x58021400

080008b4 <DS1302_WriteTime>:
}


/* Writes time byte by byte from 'buf' */
void DS1302_WriteTime(uint8_t *buf) 
{	
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	DS1302_WriteByte(DS1302_CONTROL, 0x00);			// Отключить защиту от записи
 80008bc:	2100      	movs	r1, #0
 80008be:	208e      	movs	r0, #142	; 0x8e
 80008c0:	f7ff ff62 	bl	8000788 <DS1302_WriteByte>
	delayUS_DWT(1);
 80008c4:	2001      	movs	r0, #1
 80008c6:	f7ff fedf 	bl	8000688 <delayUS_DWT>
	DS1302_WriteByte(DS1302_SEC, 0x80);
 80008ca:	2180      	movs	r1, #128	; 0x80
 80008cc:	2080      	movs	r0, #128	; 0x80
 80008ce:	f7ff ff5b 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_YEAR, HEX2BCD(buf[1]));
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3301      	adds	r3, #1
 80008d6:	781a      	ldrb	r2, [r3, #0]
 80008d8:	4b69      	ldr	r3, [pc, #420]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80008da:	fba3 1302 	umull	r1, r3, r3, r2
 80008de:	08d9      	lsrs	r1, r3, #3
 80008e0:	460b      	mov	r3, r1
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	440b      	add	r3, r1
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3301      	adds	r3, #1
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	4963      	ldr	r1, [pc, #396]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80008f4:	fba1 1303 	umull	r1, r3, r1, r3
 80008f8:	08db      	lsrs	r3, r3, #3
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	011b      	lsls	r3, r3, #4
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	4413      	add	r3, r2
 8000902:	b2db      	uxtb	r3, r3
 8000904:	4619      	mov	r1, r3
 8000906:	208c      	movs	r0, #140	; 0x8c
 8000908:	f7ff ff3e 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_MONTH, HEX2BCD(buf[2]));
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3302      	adds	r3, #2
 8000910:	781a      	ldrb	r2, [r3, #0]
 8000912:	4b5b      	ldr	r3, [pc, #364]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000914:	fba3 1302 	umull	r1, r3, r3, r2
 8000918:	08d9      	lsrs	r1, r3, #3
 800091a:	460b      	mov	r3, r1
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	440b      	add	r3, r1
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	b2da      	uxtb	r2, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3302      	adds	r3, #2
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4954      	ldr	r1, [pc, #336]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 800092e:	fba1 1303 	umull	r1, r3, r1, r3
 8000932:	08db      	lsrs	r3, r3, #3
 8000934:	b2db      	uxtb	r3, r3
 8000936:	011b      	lsls	r3, r3, #4
 8000938:	b2db      	uxtb	r3, r3
 800093a:	4413      	add	r3, r2
 800093c:	b2db      	uxtb	r3, r3
 800093e:	4619      	mov	r1, r3
 8000940:	2088      	movs	r0, #136	; 0x88
 8000942:	f7ff ff21 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_DATE, HEX2BCD(buf[3]));
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3303      	adds	r3, #3
 800094a:	781a      	ldrb	r2, [r3, #0]
 800094c:	4b4c      	ldr	r3, [pc, #304]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 800094e:	fba3 1302 	umull	r1, r3, r3, r2
 8000952:	08d9      	lsrs	r1, r3, #3
 8000954:	460b      	mov	r3, r1
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	440b      	add	r3, r1
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	b2da      	uxtb	r2, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3303      	adds	r3, #3
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	4946      	ldr	r1, [pc, #280]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000968:	fba1 1303 	umull	r1, r3, r1, r3
 800096c:	08db      	lsrs	r3, r3, #3
 800096e:	b2db      	uxtb	r3, r3
 8000970:	011b      	lsls	r3, r3, #4
 8000972:	b2db      	uxtb	r3, r3
 8000974:	4413      	add	r3, r2
 8000976:	b2db      	uxtb	r3, r3
 8000978:	4619      	mov	r1, r3
 800097a:	2086      	movs	r0, #134	; 0x86
 800097c:	f7ff ff04 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_HOUR, HEX2BCD(buf[4]));
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3304      	adds	r3, #4
 8000984:	781a      	ldrb	r2, [r3, #0]
 8000986:	4b3e      	ldr	r3, [pc, #248]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000988:	fba3 1302 	umull	r1, r3, r3, r2
 800098c:	08d9      	lsrs	r1, r3, #3
 800098e:	460b      	mov	r3, r1
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	440b      	add	r3, r1
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	b2da      	uxtb	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	3304      	adds	r3, #4
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	4937      	ldr	r1, [pc, #220]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80009a2:	fba1 1303 	umull	r1, r3, r1, r3
 80009a6:	08db      	lsrs	r3, r3, #3
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	011b      	lsls	r3, r3, #4
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	4413      	add	r3, r2
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	4619      	mov	r1, r3
 80009b4:	2084      	movs	r0, #132	; 0x84
 80009b6:	f7ff fee7 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_MIN, HEX2BCD(buf[5]));
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	3305      	adds	r3, #5
 80009be:	781a      	ldrb	r2, [r3, #0]
 80009c0:	4b2f      	ldr	r3, [pc, #188]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80009c2:	fba3 1302 	umull	r1, r3, r3, r2
 80009c6:	08d9      	lsrs	r1, r3, #3
 80009c8:	460b      	mov	r3, r1
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	440b      	add	r3, r1
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3305      	adds	r3, #5
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	4929      	ldr	r1, [pc, #164]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80009dc:	fba1 1303 	umull	r1, r3, r1, r3
 80009e0:	08db      	lsrs	r3, r3, #3
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	011b      	lsls	r3, r3, #4
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	4413      	add	r3, r2
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4619      	mov	r1, r3
 80009ee:	2082      	movs	r0, #130	; 0x82
 80009f0:	f7ff feca 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_SEC, HEX2BCD(buf[6]));
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3306      	adds	r3, #6
 80009f8:	781a      	ldrb	r2, [r3, #0]
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 80009fc:	fba3 1302 	umull	r1, r3, r3, r2
 8000a00:	08d9      	lsrs	r1, r3, #3
 8000a02:	460b      	mov	r3, r1
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	440b      	add	r3, r1
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3306      	adds	r3, #6
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	491a      	ldr	r1, [pc, #104]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000a16:	fba1 1303 	umull	r1, r3, r1, r3
 8000a1a:	08db      	lsrs	r3, r3, #3
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	011b      	lsls	r3, r3, #4
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	4413      	add	r3, r2
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	4619      	mov	r1, r3
 8000a28:	2080      	movs	r0, #128	; 0x80
 8000a2a:	f7ff fead 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_DAY, HEX2BCD(buf[7]));
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	3307      	adds	r3, #7
 8000a32:	781a      	ldrb	r2, [r3, #0]
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000a36:	fba3 1302 	umull	r1, r3, r3, r2
 8000a3a:	08d9      	lsrs	r1, r3, #3
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	440b      	add	r3, r1
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3307      	adds	r3, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	490c      	ldr	r1, [pc, #48]	; (8000a80 <DS1302_WriteTime+0x1cc>)
 8000a50:	fba1 1303 	umull	r1, r3, r1, r3
 8000a54:	08db      	lsrs	r3, r3, #3
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	011b      	lsls	r3, r3, #4
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	4413      	add	r3, r2
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	4619      	mov	r1, r3
 8000a62:	208a      	movs	r0, #138	; 0x8a
 8000a64:	f7ff fe90 	bl	8000788 <DS1302_WriteByte>
	DS1302_WriteByte(DS1302_CONTROL, 0x80);			// Включить защиту от записи
 8000a68:	2180      	movs	r1, #128	; 0x80
 8000a6a:	208e      	movs	r0, #142	; 0x8e
 8000a6c:	f7ff fe8c 	bl	8000788 <DS1302_WriteByte>
	delayUS_DWT(1);
 8000a70:	2001      	movs	r0, #1
 8000a72:	f7ff fe09 	bl	8000688 <delayUS_DWT>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	cccccccd 	.word	0xcccccccd

08000a84 <DS1302_ReadTime>:


/* Reads time byte by byte to 'buf' */
void DS1302_ReadTime(uint8_t *buf)  
{ 
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
   	uint8_t tmp;
	
	tmp = DS1302_ReadByte(DS1302_YEAR); 	
 8000a8c:	208c      	movs	r0, #140	; 0x8c
 8000a8e:	f7ff fec1 	bl	8000814 <DS1302_ReadByte>
 8000a92:	4603      	mov	r3, r0
 8000a94:	73fb      	strb	r3, [r7, #15]
	buf[1] = BCD2HEX(tmp);		 
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
 8000a98:	f003 030f 	and.w	r3, r3, #15
 8000a9c:	b2d9      	uxtb	r1, r3
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
 8000aa0:	091b      	lsrs	r3, r3, #4
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	0092      	lsls	r2, r2, #2
 8000aa8:	4413      	add	r3, r2
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	440a      	add	r2, r1
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_MONTH); 	
 8000ab8:	2088      	movs	r0, #136	; 0x88
 8000aba:	f7ff feab 	bl	8000814 <DS1302_ReadByte>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	73fb      	strb	r3, [r7, #15]
	buf[2] = BCD2HEX(tmp);	 
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	f003 030f 	and.w	r3, r3, #15
 8000ac8:	b2d9      	uxtb	r1, r3
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	091b      	lsrs	r3, r3, #4
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	0092      	lsls	r2, r2, #2
 8000ad4:	4413      	add	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	3302      	adds	r3, #2
 8000ade:	440a      	add	r2, r1
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_DATE); 	
 8000ae4:	2086      	movs	r0, #134	; 0x86
 8000ae6:	f7ff fe95 	bl	8000814 <DS1302_ReadByte>
 8000aea:	4603      	mov	r3, r0
 8000aec:	73fb      	strb	r3, [r7, #15]
	buf[3] = BCD2HEX(tmp);
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	f003 030f 	and.w	r3, r3, #15
 8000af4:	b2d9      	uxtb	r1, r3
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
 8000af8:	091b      	lsrs	r3, r3, #4
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	461a      	mov	r2, r3
 8000afe:	0092      	lsls	r2, r2, #2
 8000b00:	4413      	add	r3, r2
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3303      	adds	r3, #3
 8000b0a:	440a      	add	r2, r1
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_HOUR);		
 8000b10:	2084      	movs	r0, #132	; 0x84
 8000b12:	f7ff fe7f 	bl	8000814 <DS1302_ReadByte>
 8000b16:	4603      	mov	r3, r0
 8000b18:	73fb      	strb	r3, [r7, #15]
	buf[4] = BCD2HEX(tmp);
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
 8000b1c:	f003 030f 	and.w	r3, r3, #15
 8000b20:	b2d9      	uxtb	r1, r3
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	091b      	lsrs	r3, r3, #4
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	461a      	mov	r2, r3
 8000b2a:	0092      	lsls	r2, r2, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3304      	adds	r3, #4
 8000b36:	440a      	add	r2, r1
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_MIN);		
 8000b3c:	2082      	movs	r0, #130	; 0x82
 8000b3e:	f7ff fe69 	bl	8000814 <DS1302_ReadByte>
 8000b42:	4603      	mov	r3, r0
 8000b44:	73fb      	strb	r3, [r7, #15]
	buf[5] = BCD2HEX(tmp); 
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
 8000b48:	f003 030f 	and.w	r3, r3, #15
 8000b4c:	b2d9      	uxtb	r1, r3
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	091b      	lsrs	r3, r3, #4
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	461a      	mov	r2, r3
 8000b56:	0092      	lsls	r2, r2, #2
 8000b58:	4413      	add	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	3305      	adds	r3, #5
 8000b62:	440a      	add	r2, r1
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte((DS1302_SEC)) & 0x7F;
 8000b68:	2080      	movs	r0, #128	; 0x80
 8000b6a:	f7ff fe53 	bl	8000814 <DS1302_ReadByte>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b74:	73fb      	strb	r3, [r7, #15]
	buf[6] = BCD2HEX(tmp);
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	f003 030f 	and.w	r3, r3, #15
 8000b7c:	b2d9      	uxtb	r1, r3
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	091b      	lsrs	r3, r3, #4
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	461a      	mov	r2, r3
 8000b86:	0092      	lsls	r2, r2, #2
 8000b88:	4413      	add	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3306      	adds	r3, #6
 8000b92:	440a      	add	r2, r1
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_DAY);		
 8000b98:	208a      	movs	r0, #138	; 0x8a
 8000b9a:	f7ff fe3b 	bl	8000814 <DS1302_ReadByte>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	73fb      	strb	r3, [r7, #15]
	buf[7] = BCD2HEX(tmp);
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	f003 030f 	and.w	r3, r3, #15
 8000ba8:	b2d9      	uxtb	r1, r3
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	091b      	lsrs	r3, r3, #4
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	0092      	lsls	r2, r2, #2
 8000bb4:	4413      	add	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3307      	adds	r3, #7
 8000bbe:	440a      	add	r2, r1
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	701a      	strb	r2, [r3, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <DS1302_Init>:


/* Инициализация */
void DS1302_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
	DWT_Delay_Init(); //Инициализация таймера для отсчета милисекунд
 8000bd2:	f000 f849 	bl	8000c68 <DWT_Delay_Init>

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SCLK | DS1302_SDA | DS1302_RST;
 8000bd6:	2307      	movs	r3, #7
 8000bd8:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bde:	2302      	movs	r3, #2
 8000be0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	480d      	ldr	r0, [pc, #52]	; (8000c1c <DS1302_Init+0x50>)
 8000be8:	f002 f95a 	bl	8002ea0 <HAL_GPIO_Init>
	
	DS1302_WriteByte(DS1302_CHARGER, 0x00);			// Отключить Trickle Charger
 8000bec:	2100      	movs	r1, #0
 8000bee:	2090      	movs	r0, #144	; 0x90
 8000bf0:	f7ff fdca 	bl	8000788 <DS1302_WriteByte>
		
	//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2104      	movs	r1, #4
 8000bf8:	4808      	ldr	r0, [pc, #32]	; (8000c1c <DS1302_Init+0x50>)
 8000bfa:	f002 fb19 	bl	8003230 <HAL_GPIO_WritePin>
	//	DS1302_SCK = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2102      	movs	r1, #2
 8000c02:	4806      	ldr	r0, [pc, #24]	; (8000c1c <DS1302_Init+0x50>)
 8000c04:	f002 fb14 	bl	8003230 <HAL_GPIO_WritePin>

	delayUS_DWT(10); // Меньше 10 мкс делать не стоит.
 8000c08:	200a      	movs	r0, #10
 8000c0a:	f7ff fd3d 	bl	8000688 <delayUS_DWT>
	DS1302_ClockStart();
 8000c0e:	f000 f807 	bl	8000c20 <DS1302_ClockStart>
}
 8000c12:	bf00      	nop
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	58021400 	.word	0x58021400

08000c20 <DS1302_ClockStart>:

//Запуск часов.
//Изначально DS1302 в режиме HALT (остановлена, режим энергосбережения).
//Чтоб начался отсчет времени необходимо однократно выполнить эту функцию.
void DS1302_ClockStart(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
	uint8_t buf = 0x00;
 8000c26:	2300      	movs	r3, #0
 8000c28:	71fb      	strb	r3, [r7, #7]

	DS1302_WriteByte(DS1302_CONTROL, 0x00);			// Отключить защиту от записи
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	208e      	movs	r0, #142	; 0x8e
 8000c2e:	f7ff fdab 	bl	8000788 <DS1302_WriteByte>
	delayUS_DWT(1);
 8000c32:	2001      	movs	r0, #1
 8000c34:	f7ff fd28 	bl	8000688 <delayUS_DWT>

	buf = DS1302_ReadByte(DS1302_SEC) & 0x7F;		// Записываем в 8 бит 0. При этом сохраняем установленное значение секунд.
 8000c38:	2080      	movs	r0, #128	; 0x80
 8000c3a:	f7ff fdeb 	bl	8000814 <DS1302_ReadByte>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c44:	71fb      	strb	r3, [r7, #7]
	DS1302_WriteByte(DS1302_SEC, buf);
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	2080      	movs	r0, #128	; 0x80
 8000c4c:	f7ff fd9c 	bl	8000788 <DS1302_WriteByte>

	DS1302_WriteByte(DS1302_CONTROL, 0x80);			// Включить защиту от записи
 8000c50:	2180      	movs	r1, #128	; 0x80
 8000c52:	208e      	movs	r0, #142	; 0x8e
 8000c54:	f7ff fd98 	bl	8000788 <DS1302_WriteByte>
	delayUS_DWT(1);
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f7ff fd15 	bl	8000688 <delayUS_DWT>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <DWT_Delay_Init+0x58>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <DWT_Delay_Init+0x58>)
 8000c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c76:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <DWT_Delay_Init+0x58>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	4a10      	ldr	r2, [pc, #64]	; (8000cc0 <DWT_Delay_Init+0x58>)
 8000c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c82:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c8a:	f023 0301 	bic.w	r3, r3, #1
 8000c8e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000ca2:	bf00      	nop
     __ASM volatile ("NOP");
 8000ca4:	bf00      	nop
     __ASM volatile ("NOP");
 8000ca6:	bf00      	nop

     /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e000      	b.n	8000cb6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000cb4:	2301      	movs	r3, #1
  }
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000edf0 	.word	0xe000edf0
 8000cc4:	e0001000 	.word	0xe0001000

08000cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cca:	b0a3      	sub	sp, #140	; 0x8c
 8000ccc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cce:	f000 ffa5 	bl	8001c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd2:	f000 f851 	bl	8000d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd6:	f000 fadd 	bl	8001294 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000cda:	f000 fa5d 	bl	8001198 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000cde:	f000 faa7 	bl	8001230 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000ce2:	f000 f977 	bl	8000fd4 <MX_I2C1_Init>
  MX_ADC3_Init();
 8000ce6:	f000 f8d1 	bl	8000e8c <MX_ADC3_Init>
  MX_TIM1_Init();
 8000cea:	f000 f9b3 	bl	8001054 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000cee:	f000 fa05 	bl	80010fc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  DS1302_Init();
 8000cf2:	f7ff ff6b 	bl	8000bcc <DS1302_Init>
  HAL_Delay(1000);
 8000cf6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cfa:	f001 f821 	bl	8001d40 <HAL_Delay>
  char tempBuffer[100];
  char time[8];
  char time_to_set[8]={0,5,06,23,01,54,00,1};//Contr,Year,Mounth,Date,Hour,Min,Sec,Day
 8000cfe:	4a1b      	ldr	r2, [pc, #108]	; (8000d6c <main+0xa4>)
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d06:	e883 0003 	stmia.w	r3, {r0, r1}
  DS1302_WriteTime(time_to_set);
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fdd1 	bl	80008b4 <DS1302_WriteTime>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DS1302_ReadTime(time);
 8000d12:	f107 030c 	add.w	r3, r7, #12
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff feb4 	bl	8000a84 <DS1302_ReadTime>
	  sprintf(tempBuffer,"\n\r %2d/%2d/%2d%2d:%2d:%2d \n\r",time[1],time[2],time[3],time[4],time[5],time[6]);
 8000d1c:	7b7b      	ldrb	r3, [r7, #13]
 8000d1e:	461d      	mov	r5, r3
 8000d20:	7bbb      	ldrb	r3, [r7, #14]
 8000d22:	461e      	mov	r6, r3
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	7c3a      	ldrb	r2, [r7, #16]
 8000d28:	7c79      	ldrb	r1, [r7, #17]
 8000d2a:	7cb8      	ldrb	r0, [r7, #18]
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	f107 0014 	add.w	r0, r7, #20
 8000d32:	9403      	str	r4, [sp, #12]
 8000d34:	9102      	str	r1, [sp, #8]
 8000d36:	9201      	str	r2, [sp, #4]
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	4633      	mov	r3, r6
 8000d3c:	462a      	mov	r2, r5
 8000d3e:	490c      	ldr	r1, [pc, #48]	; (8000d70 <main+0xa8>)
 8000d40:	f007 fdfa 	bl	8008938 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)tempBuffer, strlen(tempBuffer), HAL_MAX_DELAY);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fac9 	bl	80002e0 <strlen>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	f107 0114 	add.w	r1, r7, #20
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	4806      	ldr	r0, [pc, #24]	; (8000d74 <main+0xac>)
 8000d5c:	f006 f9e0 	bl	8007120 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000d60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d64:	f000 ffec 	bl	8001d40 <HAL_Delay>
	  DS1302_ReadTime(time);
 8000d68:	e7d3      	b.n	8000d12 <main+0x4a>
 8000d6a:	bf00      	nop
 8000d6c:	0800917c 	.word	0x0800917c
 8000d70:	0800915c 	.word	0x0800915c
 8000d74:	2400009c 	.word	0x2400009c

08000d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b09c      	sub	sp, #112	; 0x70
 8000d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d82:	224c      	movs	r2, #76	; 0x4c
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f007 fdce 	bl	8008928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2220      	movs	r2, #32
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f007 fdc8 	bl	8008928 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d98:	2002      	movs	r0, #2
 8000d9a:	f002 fcd3 	bl	8003744 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d9e:	2300      	movs	r3, #0
 8000da0:	603b      	str	r3, [r7, #0]
 8000da2:	4b37      	ldr	r3, [pc, #220]	; (8000e80 <SystemClock_Config+0x108>)
 8000da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da6:	4a36      	ldr	r2, [pc, #216]	; (8000e80 <SystemClock_Config+0x108>)
 8000da8:	f023 0301 	bic.w	r3, r3, #1
 8000dac:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000dae:	4b34      	ldr	r3, [pc, #208]	; (8000e80 <SystemClock_Config+0x108>)
 8000db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	4b32      	ldr	r3, [pc, #200]	; (8000e84 <SystemClock_Config+0x10c>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4a31      	ldr	r2, [pc, #196]	; (8000e84 <SystemClock_Config+0x10c>)
 8000dbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dc2:	6193      	str	r3, [r2, #24]
 8000dc4:	4b2f      	ldr	r3, [pc, #188]	; (8000e84 <SystemClock_Config+0x10c>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dcc:	603b      	str	r3, [r7, #0]
 8000dce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dd0:	bf00      	nop
 8000dd2:	4b2c      	ldr	r3, [pc, #176]	; (8000e84 <SystemClock_Config+0x10c>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dde:	d1f8      	bne.n	8000dd2 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_CSI);
 8000de0:	4b29      	ldr	r3, [pc, #164]	; (8000e88 <SystemClock_Config+0x110>)
 8000de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de4:	f023 0303 	bic.w	r3, r3, #3
 8000de8:	4a27      	ldr	r2, [pc, #156]	; (8000e88 <SystemClock_Config+0x110>)
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSI;
 8000df0:	2312      	movs	r3, #18
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000df4:	2301      	movs	r3, #1
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df8:	2340      	movs	r3, #64	; 0x40
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000e00:	2320      	movs	r3, #32
 8000e02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e04:	2302      	movs	r3, #2
 8000e06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 37;
 8000e10:	2325      	movs	r3, #37	; 0x25
 8000e12:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e14:	2302      	movs	r3, #2
 8000e16:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000e20:	2308      	movs	r3, #8
 8000e22:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000e24:	2302      	movs	r3, #2
 8000e26:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000e28:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e32:	4618      	mov	r0, r3
 8000e34:	f002 fcd0 	bl	80037d8 <HAL_RCC_OscConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000e3e:	f000 fbaf 	bl	80015a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e42:	233f      	movs	r3, #63	; 0x3f
 8000e44:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e46:	2303      	movs	r3, #3
 8000e48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2101      	movs	r1, #1
 8000e66:	4618      	mov	r0, r3
 8000e68:	f003 f8e2 	bl	8004030 <HAL_RCC_ClockConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8000e72:	f000 fb95 	bl	80015a0 <Error_Handler>
  }
}
 8000e76:	bf00      	nop
 8000e78:	3770      	adds	r7, #112	; 0x70
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	58000400 	.word	0x58000400
 8000e84:	58024800 	.word	0x58024800
 8000e88:	58024400 	.word	0x58024400

08000e8c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
 8000ea0:	615a      	str	r2, [r3, #20]
 8000ea2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000ea4:	4b45      	ldr	r3, [pc, #276]	; (8000fbc <MX_ADC3_Init+0x130>)
 8000ea6:	4a46      	ldr	r2, [pc, #280]	; (8000fc0 <MX_ADC3_Init+0x134>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000eaa:	4b44      	ldr	r3, [pc, #272]	; (8000fbc <MX_ADC3_Init+0x130>)
 8000eac:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000eb0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb2:	4b42      	ldr	r3, [pc, #264]	; (8000fbc <MX_ADC3_Init+0x130>)
 8000eb4:	2208      	movs	r2, #8
 8000eb6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000eb8:	4b40      	ldr	r3, [pc, #256]	; (8000fbc <MX_ADC3_Init+0x130>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ebe:	4b3f      	ldr	r3, [pc, #252]	; (8000fbc <MX_ADC3_Init+0x130>)
 8000ec0:	2204      	movs	r2, #4
 8000ec2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000ec4:	4b3d      	ldr	r3, [pc, #244]	; (8000fbc <MX_ADC3_Init+0x130>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000eca:	4b3c      	ldr	r3, [pc, #240]	; (8000fbc <MX_ADC3_Init+0x130>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 5;
 8000ed0:	4b3a      	ldr	r3, [pc, #232]	; (8000fbc <MX_ADC3_Init+0x130>)
 8000ed2:	2205      	movs	r2, #5
 8000ed4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ed6:	4b39      	ldr	r3, [pc, #228]	; (8000fbc <MX_ADC3_Init+0x130>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000edc:	4b37      	ldr	r3, [pc, #220]	; (8000fbc <MX_ADC3_Init+0x130>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ee2:	4b36      	ldr	r3, [pc, #216]	; (8000fbc <MX_ADC3_Init+0x130>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ee8:	4b34      	ldr	r3, [pc, #208]	; (8000fbc <MX_ADC3_Init+0x130>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eee:	4b33      	ldr	r3, [pc, #204]	; (8000fbc <MX_ADC3_Init+0x130>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ef4:	4b31      	ldr	r3, [pc, #196]	; (8000fbc <MX_ADC3_Init+0x130>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000efa:	4b30      	ldr	r3, [pc, #192]	; (8000fbc <MX_ADC3_Init+0x130>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000f02:	482e      	ldr	r0, [pc, #184]	; (8000fbc <MX_ADC3_Init+0x130>)
 8000f04:	f001 f8ee 	bl	80020e4 <HAL_ADC_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000f0e:	f000 fb47 	bl	80015a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f12:	2301      	movs	r3, #1
 8000f14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f16:	2306      	movs	r3, #6
 8000f18:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f1e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f22:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f24:	2304      	movs	r3, #4
 8000f26:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4822      	ldr	r0, [pc, #136]	; (8000fbc <MX_ADC3_Init+0x130>)
 8000f32:	f001 fa77 	bl	8002424 <HAL_ADC_ConfigChannel>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8000f3c:	f000 fb30 	bl	80015a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f40:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <MX_ADC3_Init+0x138>)
 8000f42:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f44:	230c      	movs	r3, #12
 8000f46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	481b      	ldr	r0, [pc, #108]	; (8000fbc <MX_ADC3_Init+0x130>)
 8000f4e:	f001 fa69 	bl	8002424 <HAL_ADC_ConfigChannel>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000f58:	f000 fb22 	bl	80015a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f5c:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <MX_ADC3_Init+0x13c>)
 8000f5e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f60:	2312      	movs	r3, #18
 8000f62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	4619      	mov	r1, r3
 8000f68:	4814      	ldr	r0, [pc, #80]	; (8000fbc <MX_ADC3_Init+0x130>)
 8000f6a:	f001 fa5b 	bl	8002424 <HAL_ADC_ConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_ADC3_Init+0xec>
  {
    Error_Handler();
 8000f74:	f000 fb14 	bl	80015a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <MX_ADC3_Init+0x140>)
 8000f7a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f7c:	2318      	movs	r3, #24
 8000f7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	4619      	mov	r1, r3
 8000f84:	480d      	ldr	r0, [pc, #52]	; (8000fbc <MX_ADC3_Init+0x130>)
 8000f86:	f001 fa4d 	bl	8002424 <HAL_ADC_ConfigChannel>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_ADC3_Init+0x108>
  {
    Error_Handler();
 8000f90:	f000 fb06 	bl	80015a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <MX_ADC3_Init+0x144>)
 8000f96:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4806      	ldr	r0, [pc, #24]	; (8000fbc <MX_ADC3_Init+0x130>)
 8000fa4:	f001 fa3e 	bl	8002424 <HAL_ADC_ConfigChannel>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_ADC3_Init+0x126>
  {
    Error_Handler();
 8000fae:	f000 faf7 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	3720      	adds	r7, #32
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	240005cc 	.word	0x240005cc
 8000fc0:	58026000 	.word	0x58026000
 8000fc4:	04300002 	.word	0x04300002
 8000fc8:	10c00010 	.word	0x10c00010
 8000fcc:	14f00020 	.word	0x14f00020
 8000fd0:	19200040 	.word	0x19200040

08000fd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <MX_I2C1_Init+0x74>)
 8000fda:	4a1c      	ldr	r2, [pc, #112]	; (800104c <MX_I2C1_Init+0x78>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B0DCFB;
 8000fde:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <MX_I2C1_Init+0x74>)
 8000fe0:	4a1b      	ldr	r2, [pc, #108]	; (8001050 <MX_I2C1_Init+0x7c>)
 8000fe2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fe4:	4b18      	ldr	r3, [pc, #96]	; (8001048 <MX_I2C1_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <MX_I2C1_Init+0x74>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <MX_I2C1_Init+0x74>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <MX_I2C1_Init+0x74>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <MX_I2C1_Init+0x74>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_I2C1_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <MX_I2C1_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800100e:	480e      	ldr	r0, [pc, #56]	; (8001048 <MX_I2C1_Init+0x74>)
 8001010:	f002 f928 	bl	8003264 <HAL_I2C_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800101a:	f000 fac1 	bl	80015a0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800101e:	2100      	movs	r1, #0
 8001020:	4809      	ldr	r0, [pc, #36]	; (8001048 <MX_I2C1_Init+0x74>)
 8001022:	f002 f9af 	bl	8003384 <HAL_I2CEx_ConfigAnalogFilter>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800102c:	f000 fab8 	bl	80015a0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001030:	2100      	movs	r1, #0
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_I2C1_Init+0x74>)
 8001034:	f002 f9f1 	bl	800341a <HAL_I2CEx_ConfigDigitalFilter>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800103e:	f000 faaf 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	2400012c 	.word	0x2400012c
 800104c:	40005400 	.word	0x40005400
 8001050:	10b0dcfb 	.word	0x10b0dcfb

08001054 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800105a:	f107 0310 	add.w	r3, r7, #16
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001072:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <MX_TIM1_Init+0xa0>)
 8001074:	4a20      	ldr	r2, [pc, #128]	; (80010f8 <MX_TIM1_Init+0xa4>)
 8001076:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001078:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <MX_TIM1_Init+0xa0>)
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107e:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <MX_TIM1_Init+0xa0>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001084:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <MX_TIM1_Init+0xa0>)
 8001086:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800108a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108c:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <MX_TIM1_Init+0xa0>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <MX_TIM1_Init+0xa0>)
 8001094:	2200      	movs	r2, #0
 8001096:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <MX_TIM1_Init+0xa0>)
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800109e:	4815      	ldr	r0, [pc, #84]	; (80010f4 <MX_TIM1_Init+0xa0>)
 80010a0:	f005 fcd8 	bl	8006a54 <HAL_TIM_Base_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80010aa:	f000 fa79 	bl	80015a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	4619      	mov	r1, r3
 80010ba:	480e      	ldr	r0, [pc, #56]	; (80010f4 <MX_TIM1_Init+0xa0>)
 80010bc:	f005 fd22 	bl	8006b04 <HAL_TIM_ConfigClockSource>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80010c6:	f000 fa6b 	bl	80015a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	4619      	mov	r1, r3
 80010da:	4806      	ldr	r0, [pc, #24]	; (80010f4 <MX_TIM1_Init+0xa0>)
 80010dc:	f005 ff42 	bl	8006f64 <HAL_TIMEx_MasterConfigSynchronization>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80010e6:	f000 fa5b 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	3720      	adds	r7, #32
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	24000630 	.word	0x24000630
 80010f8:	40010000 	.word	0x40010000

080010fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001102:	f107 0310 	add.w	r3, r7, #16
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800111a:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <MX_TIM3_Init+0x94>)
 800111c:	4a1d      	ldr	r2, [pc, #116]	; (8001194 <MX_TIM3_Init+0x98>)
 800111e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <MX_TIM3_Init+0x94>)
 8001122:	2200      	movs	r2, #0
 8001124:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_TIM3_Init+0x94>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <MX_TIM3_Init+0x94>)
 800112e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001132:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <MX_TIM3_Init+0x94>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <MX_TIM3_Init+0x94>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001140:	4813      	ldr	r0, [pc, #76]	; (8001190 <MX_TIM3_Init+0x94>)
 8001142:	f005 fc87 	bl	8006a54 <HAL_TIM_Base_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800114c:	f000 fa28 	bl	80015a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001154:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001156:	f107 0310 	add.w	r3, r7, #16
 800115a:	4619      	mov	r1, r3
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <MX_TIM3_Init+0x94>)
 800115e:	f005 fcd1 	bl	8006b04 <HAL_TIM_ConfigClockSource>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001168:	f000 fa1a 	bl	80015a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116c:	2300      	movs	r3, #0
 800116e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_TIM3_Init+0x94>)
 800117a:	f005 fef3 	bl	8006f64 <HAL_TIMEx_MasterConfigSynchronization>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001184:	f000 fa0c 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3720      	adds	r7, #32
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	24000580 	.word	0x24000580
 8001194:	40000400 	.word	0x40000400

08001198 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800119c:	4b22      	ldr	r3, [pc, #136]	; (8001228 <MX_USART3_UART_Init+0x90>)
 800119e:	4a23      	ldr	r2, [pc, #140]	; (800122c <MX_USART3_UART_Init+0x94>)
 80011a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011a2:	4b21      	ldr	r3, [pc, #132]	; (8001228 <MX_USART3_UART_Init+0x90>)
 80011a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011aa:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <MX_USART3_UART_Init+0x90>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011b0:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <MX_USART3_UART_Init+0x90>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011b6:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <MX_USART3_UART_Init+0x90>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011bc:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <MX_USART3_UART_Init+0x90>)
 80011be:	220c      	movs	r2, #12
 80011c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <MX_USART3_UART_Init+0x90>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c8:	4b17      	ldr	r3, [pc, #92]	; (8001228 <MX_USART3_UART_Init+0x90>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ce:	4b16      	ldr	r3, [pc, #88]	; (8001228 <MX_USART3_UART_Init+0x90>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <MX_USART3_UART_Init+0x90>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <MX_USART3_UART_Init+0x90>)
 80011dc:	2200      	movs	r2, #0
 80011de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011e0:	4811      	ldr	r0, [pc, #68]	; (8001228 <MX_USART3_UART_Init+0x90>)
 80011e2:	f005 ff4d 	bl	8007080 <HAL_UART_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80011ec:	f000 f9d8 	bl	80015a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011f0:	2100      	movs	r1, #0
 80011f2:	480d      	ldr	r0, [pc, #52]	; (8001228 <MX_USART3_UART_Init+0x90>)
 80011f4:	f006 ff78 	bl	80080e8 <HAL_UARTEx_SetTxFifoThreshold>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80011fe:	f000 f9cf 	bl	80015a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001202:	2100      	movs	r1, #0
 8001204:	4808      	ldr	r0, [pc, #32]	; (8001228 <MX_USART3_UART_Init+0x90>)
 8001206:	f006 ffad 	bl	8008164 <HAL_UARTEx_SetRxFifoThreshold>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001210:	f000 f9c6 	bl	80015a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001214:	4804      	ldr	r0, [pc, #16]	; (8001228 <MX_USART3_UART_Init+0x90>)
 8001216:	f006 ff2e 	bl	8008076 <HAL_UARTEx_DisableFifoMode>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001220:	f000 f9be 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	2400009c 	.word	0x2400009c
 800122c:	40004800 	.word	0x40004800

08001230 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001236:	4a16      	ldr	r2, [pc, #88]	; (8001290 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001238:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800123a:	4b14      	ldr	r3, [pc, #80]	; (800128c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800123c:	2209      	movs	r2, #9
 800123e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001242:	2202      	movs	r2, #2
 8001244:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800124e:	2202      	movs	r2, #2
 8001250:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001254:	2201      	movs	r2, #1
 8001256:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800125a:	2200      	movs	r2, #0
 800125c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001260:	2200      	movs	r2, #0
 8001262:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001266:	2201      	movs	r2, #1
 8001268:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800126c:	2201      	movs	r2, #1
 800126e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001272:	2200      	movs	r2, #0
 8001274:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001278:	f002 f91b 	bl	80034b2 <HAL_PCD_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001282:	f000 f98d 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	24000178 	.word	0x24000178
 8001290:	40080000 	.word	0x40080000

08001294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08e      	sub	sp, #56	; 0x38
 8001298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012aa:	4bb5      	ldr	r3, [pc, #724]	; (8001580 <MX_GPIO_Init+0x2ec>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b0:	4ab3      	ldr	r2, [pc, #716]	; (8001580 <MX_GPIO_Init+0x2ec>)
 80012b2:	f043 0310 	orr.w	r3, r3, #16
 80012b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ba:	4bb1      	ldr	r3, [pc, #708]	; (8001580 <MX_GPIO_Init+0x2ec>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c0:	f003 0310 	and.w	r3, r3, #16
 80012c4:	623b      	str	r3, [r7, #32]
 80012c6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c8:	4bad      	ldr	r3, [pc, #692]	; (8001580 <MX_GPIO_Init+0x2ec>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ce:	4aac      	ldr	r2, [pc, #688]	; (8001580 <MX_GPIO_Init+0x2ec>)
 80012d0:	f043 0304 	orr.w	r3, r3, #4
 80012d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d8:	4ba9      	ldr	r3, [pc, #676]	; (8001580 <MX_GPIO_Init+0x2ec>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	61fb      	str	r3, [r7, #28]
 80012e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012e6:	4ba6      	ldr	r3, [pc, #664]	; (8001580 <MX_GPIO_Init+0x2ec>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ec:	4aa4      	ldr	r2, [pc, #656]	; (8001580 <MX_GPIO_Init+0x2ec>)
 80012ee:	f043 0320 	orr.w	r3, r3, #32
 80012f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f6:	4ba2      	ldr	r3, [pc, #648]	; (8001580 <MX_GPIO_Init+0x2ec>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fc:	f003 0320 	and.w	r3, r3, #32
 8001300:	61bb      	str	r3, [r7, #24]
 8001302:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001304:	4b9e      	ldr	r3, [pc, #632]	; (8001580 <MX_GPIO_Init+0x2ec>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130a:	4a9d      	ldr	r2, [pc, #628]	; (8001580 <MX_GPIO_Init+0x2ec>)
 800130c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001310:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001314:	4b9a      	ldr	r3, [pc, #616]	; (8001580 <MX_GPIO_Init+0x2ec>)
 8001316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	4b97      	ldr	r3, [pc, #604]	; (8001580 <MX_GPIO_Init+0x2ec>)
 8001324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001328:	4a95      	ldr	r2, [pc, #596]	; (8001580 <MX_GPIO_Init+0x2ec>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001332:	4b93      	ldr	r3, [pc, #588]	; (8001580 <MX_GPIO_Init+0x2ec>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001340:	4b8f      	ldr	r3, [pc, #572]	; (8001580 <MX_GPIO_Init+0x2ec>)
 8001342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001346:	4a8e      	ldr	r2, [pc, #568]	; (8001580 <MX_GPIO_Init+0x2ec>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001350:	4b8b      	ldr	r3, [pc, #556]	; (8001580 <MX_GPIO_Init+0x2ec>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800135e:	4b88      	ldr	r3, [pc, #544]	; (8001580 <MX_GPIO_Init+0x2ec>)
 8001360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001364:	4a86      	ldr	r2, [pc, #536]	; (8001580 <MX_GPIO_Init+0x2ec>)
 8001366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800136a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800136e:	4b84      	ldr	r3, [pc, #528]	; (8001580 <MX_GPIO_Init+0x2ec>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800137c:	4b80      	ldr	r3, [pc, #512]	; (8001580 <MX_GPIO_Init+0x2ec>)
 800137e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001382:	4a7f      	ldr	r2, [pc, #508]	; (8001580 <MX_GPIO_Init+0x2ec>)
 8001384:	f043 0308 	orr.w	r3, r3, #8
 8001388:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800138c:	4b7c      	ldr	r3, [pc, #496]	; (8001580 <MX_GPIO_Init+0x2ec>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, RTC_CLK_Pin|RTC_RST_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	2106      	movs	r1, #6
 800139e:	4879      	ldr	r0, [pc, #484]	; (8001584 <MX_GPIO_Init+0x2f0>)
 80013a0:	f001 ff46 	bl	8003230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80013aa:	4877      	ldr	r0, [pc, #476]	; (8001588 <MX_GPIO_Init+0x2f4>)
 80013ac:	f001 ff40 	bl	8003230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2140      	movs	r1, #64	; 0x40
 80013b4:	4875      	ldr	r0, [pc, #468]	; (800158c <MX_GPIO_Init+0x2f8>)
 80013b6:	f001 ff3b 	bl	8003230 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80013ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c0:	2303      	movs	r3, #3
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013cc:	4619      	mov	r1, r3
 80013ce:	4870      	ldr	r0, [pc, #448]	; (8001590 <MX_GPIO_Init+0x2fc>)
 80013d0:	f001 fd66 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80013d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80013e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e8:	4619      	mov	r1, r3
 80013ea:	486a      	ldr	r0, [pc, #424]	; (8001594 <MX_GPIO_Init+0x300>)
 80013ec:	f001 fd58 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RTC_IO_Pin */
  GPIO_InitStruct.Pin = RTC_IO_Pin;
 80013f0:	2301      	movs	r3, #1
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RTC_IO_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001400:	4619      	mov	r1, r3
 8001402:	4860      	ldr	r0, [pc, #384]	; (8001584 <MX_GPIO_Init+0x2f0>)
 8001404:	f001 fd4c 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RTC_CLK_Pin RTC_RST_Pin */
  GPIO_InitStruct.Pin = RTC_CLK_Pin|RTC_RST_Pin;
 8001408:	2306      	movs	r3, #6
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140c:	2301      	movs	r3, #1
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141c:	4619      	mov	r1, r3
 800141e:	4859      	ldr	r0, [pc, #356]	; (8001584 <MX_GPIO_Init+0x2f0>)
 8001420:	f001 fd3e 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF4 PF6 PF7 PF8
                           PF9 PF11 PF12 PF13
                           PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001424:	f64f 33d0 	movw	r3, #64464	; 0xfbd0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142a:	2303      	movs	r3, #3
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001436:	4619      	mov	r1, r3
 8001438:	4852      	ldr	r0, [pc, #328]	; (8001584 <MX_GPIO_Init+0x2f0>)
 800143a:	f001 fd31 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800143e:	f641 73f1 	movw	r3, #8177	; 0x1ff1
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001444:	2303      	movs	r3, #3
 8001446:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001450:	4619      	mov	r1, r3
 8001452:	4850      	ldr	r0, [pc, #320]	; (8001594 <MX_GPIO_Init+0x300>)
 8001454:	f001 fd24 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDC_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 8001458:	2302      	movs	r3, #2
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2300      	movs	r3, #0
 8001466:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001468:	230b      	movs	r3, #11
 800146a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 800146c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001470:	4619      	mov	r1, r3
 8001472:	4848      	ldr	r0, [pc, #288]	; (8001594 <MX_GPIO_Init+0x300>)
 8001474:	f001 fd14 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001478:	f248 03ff 	movw	r3, #33023	; 0x80ff
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800147e:	2303      	movs	r3, #3
 8001480:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148a:	4619      	mov	r1, r3
 800148c:	4842      	ldr	r0, [pc, #264]	; (8001598 <MX_GPIO_Init+0x304>)
 800148e:	f001 fd07 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB15 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001492:	f649 4377 	movw	r3, #40055	; 0x9c77
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001498:	2303      	movs	r3, #3
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a4:	4619      	mov	r1, r3
 80014a6:	4838      	ldr	r0, [pc, #224]	; (8001588 <MX_GPIO_Init+0x2f4>)
 80014a8:	f001 fcfa 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG8 PG9
                           PG10 PG12 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80014ac:	f24d 733f 	movw	r3, #55103	; 0xd73f
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014b2:	2303      	movs	r3, #3
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014be:	4619      	mov	r1, r3
 80014c0:	4832      	ldr	r0, [pc, #200]	; (800158c <MX_GPIO_Init+0x2f8>)
 80014c2:	f001 fced 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80014c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014d8:	230b      	movs	r3, #11
 80014da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e0:	4619      	mov	r1, r3
 80014e2:	4829      	ldr	r0, [pc, #164]	; (8001588 <MX_GPIO_Init+0x2f4>)
 80014e4:	f001 fcdc 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80014e8:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fe:	4619      	mov	r1, r3
 8001500:	4821      	ldr	r0, [pc, #132]	; (8001588 <MX_GPIO_Init+0x2f4>)
 8001502:	f001 fccd 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13
                           PD14 PD15 PD0 PD1
                           PD2 PD3 PD4 PD5
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001506:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800150c:	2303      	movs	r3, #3
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001518:	4619      	mov	r1, r3
 800151a:	4820      	ldr	r0, [pc, #128]	; (800159c <MX_GPIO_Init+0x308>)
 800151c:	f001 fcc0 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001520:	2340      	movs	r3, #64	; 0x40
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001524:	2301      	movs	r3, #1
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001534:	4619      	mov	r1, r3
 8001536:	4815      	ldr	r0, [pc, #84]	; (800158c <MX_GPIO_Init+0x2f8>)
 8001538:	f001 fcb2 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001540:	2300      	movs	r3, #0
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154c:	4619      	mov	r1, r3
 800154e:	480f      	ldr	r0, [pc, #60]	; (800158c <MX_GPIO_Init+0x2f8>)
 8001550:	f001 fca6 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001554:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001566:	230b      	movs	r3, #11
 8001568:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800156a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156e:	4619      	mov	r1, r3
 8001570:	4806      	ldr	r0, [pc, #24]	; (800158c <MX_GPIO_Init+0x2f8>)
 8001572:	f001 fc95 	bl	8002ea0 <HAL_GPIO_Init>

}
 8001576:	bf00      	nop
 8001578:	3738      	adds	r7, #56	; 0x38
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	58024400 	.word	0x58024400
 8001584:	58021400 	.word	0x58021400
 8001588:	58020400 	.word	0x58020400
 800158c:	58021800 	.word	0x58021800
 8001590:	58021000 	.word	0x58021000
 8001594:	58020800 	.word	0x58020800
 8001598:	58020000 	.word	0x58020000
 800159c:	58020c00 	.word	0x58020c00

080015a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a4:	b672      	cpsid	i
}
 80015a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <Error_Handler+0x8>
	...

080015ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <HAL_MspInit+0x30>)
 80015b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015b8:	4a08      	ldr	r2, [pc, #32]	; (80015dc <HAL_MspInit+0x30>)
 80015ba:	f043 0302 	orr.w	r3, r3, #2
 80015be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_MspInit+0x30>)
 80015c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	58024400 	.word	0x58024400

080015e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b0ba      	sub	sp, #232	; 0xe8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015f8:	f107 0318 	add.w	r3, r7, #24
 80015fc:	22bc      	movs	r2, #188	; 0xbc
 80015fe:	2100      	movs	r1, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f007 f991 	bl	8008928 <memset>
  if(hadc->Instance==ADC3)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a38      	ldr	r2, [pc, #224]	; (80016ec <HAL_ADC_MspInit+0x10c>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d169      	bne.n	80016e4 <HAL_ADC_MspInit+0x104>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001610:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001614:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001616:	2301      	movs	r3, #1
 8001618:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 37;
 800161a:	2325      	movs	r3, #37	; 0x25
 800161c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 1;
 800161e:	2301      	movs	r3, #1
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001622:	2302      	movs	r3, #2
 8001624:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001626:	2302      	movs	r3, #2
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800162e:	2320      	movs	r3, #32
 8001630:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8001632:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001636:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001638:	2300      	movs	r3, #0
 800163a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800163e:	f107 0318 	add.w	r3, r7, #24
 8001642:	4618      	mov	r0, r3
 8001644:	f003 f880 	bl	8004748 <HAL_RCCEx_PeriphCLKConfig>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 800164e:	f7ff ffa7 	bl	80015a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001652:	4b27      	ldr	r3, [pc, #156]	; (80016f0 <HAL_ADC_MspInit+0x110>)
 8001654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001658:	4a25      	ldr	r2, [pc, #148]	; (80016f0 <HAL_ADC_MspInit+0x110>)
 800165a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800165e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001662:	4b23      	ldr	r3, [pc, #140]	; (80016f0 <HAL_ADC_MspInit+0x110>)
 8001664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001668:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001670:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <HAL_ADC_MspInit+0x110>)
 8001672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001676:	4a1e      	ldr	r2, [pc, #120]	; (80016f0 <HAL_ADC_MspInit+0x110>)
 8001678:	f043 0320 	orr.w	r3, r3, #32
 800167c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001680:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <HAL_ADC_MspInit+0x110>)
 8001682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001686:	f003 0320 	and.w	r3, r3, #32
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <HAL_ADC_MspInit+0x110>)
 8001690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001694:	4a16      	ldr	r2, [pc, #88]	; (80016f0 <HAL_ADC_MspInit+0x110>)
 8001696:	f043 0304 	orr.w	r3, r3, #4
 800169a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800169e:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <HAL_ADC_MspInit+0x110>)
 80016a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
    PF5     ------> ADC3_INP4
    PF10     ------> ADC3_INP6
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_10;
 80016ac:	f44f 6385 	mov.w	r3, #1064	; 0x428
 80016b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016b4:	2303      	movs	r3, #3
 80016b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016c4:	4619      	mov	r1, r3
 80016c6:	480b      	ldr	r0, [pc, #44]	; (80016f4 <HAL_ADC_MspInit+0x114>)
 80016c8:	f001 fbea 	bl	8002ea0 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80016cc:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80016d0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80016d4:	f000 fb64 	bl	8001da0 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80016d8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80016dc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80016e0:	f000 fb5e 	bl	8001da0 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80016e4:	bf00      	nop
 80016e6:	37e8      	adds	r7, #232	; 0xe8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	58026000 	.word	0x58026000
 80016f0:	58024400 	.word	0x58024400
 80016f4:	58021400 	.word	0x58021400

080016f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b0b8      	sub	sp, #224	; 0xe0
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001710:	f107 0310 	add.w	r3, r7, #16
 8001714:	22bc      	movs	r2, #188	; 0xbc
 8001716:	2100      	movs	r1, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f007 f905 	bl	8008928 <memset>
  if(hi2c->Instance==I2C1)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a25      	ldr	r2, [pc, #148]	; (80017b8 <HAL_I2C_MspInit+0xc0>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d143      	bne.n	80017b0 <HAL_I2C_MspInit+0xb8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001728:	2308      	movs	r3, #8
 800172a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_HSI;
 800172c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001730:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001734:	f107 0310 	add.w	r3, r7, #16
 8001738:	4618      	mov	r0, r3
 800173a:	f003 f805 	bl	8004748 <HAL_RCCEx_PeriphCLKConfig>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001744:	f7ff ff2c 	bl	80015a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001748:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <HAL_I2C_MspInit+0xc4>)
 800174a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800174e:	4a1b      	ldr	r2, [pc, #108]	; (80017bc <HAL_I2C_MspInit+0xc4>)
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001758:	4b18      	ldr	r3, [pc, #96]	; (80017bc <HAL_I2C_MspInit+0xc4>)
 800175a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001766:	f44f 7340 	mov.w	r3, #768	; 0x300
 800176a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800176e:	2312      	movs	r3, #18
 8001770:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001774:	2301      	movs	r3, #1
 8001776:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800177a:	2302      	movs	r3, #2
 800177c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001780:	2304      	movs	r3, #4
 8001782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001786:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800178a:	4619      	mov	r1, r3
 800178c:	480c      	ldr	r0, [pc, #48]	; (80017c0 <HAL_I2C_MspInit+0xc8>)
 800178e:	f001 fb87 	bl	8002ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <HAL_I2C_MspInit+0xc4>)
 8001794:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001798:	4a08      	ldr	r2, [pc, #32]	; (80017bc <HAL_I2C_MspInit+0xc4>)
 800179a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800179e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_I2C_MspInit+0xc4>)
 80017a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017b0:	bf00      	nop
 80017b2:	37e0      	adds	r7, #224	; 0xe0
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40005400 	.word	0x40005400
 80017bc:	58024400 	.word	0x58024400
 80017c0:	58020400 	.word	0x58020400

080017c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a16      	ldr	r2, [pc, #88]	; (800182c <HAL_TIM_Base_MspInit+0x68>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d10f      	bne.n	80017f6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017d6:	4b16      	ldr	r3, [pc, #88]	; (8001830 <HAL_TIM_Base_MspInit+0x6c>)
 80017d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017dc:	4a14      	ldr	r2, [pc, #80]	; (8001830 <HAL_TIM_Base_MspInit+0x6c>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80017e6:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_TIM_Base_MspInit+0x6c>)
 80017e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017f4:	e013      	b.n	800181e <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM3)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <HAL_TIM_Base_MspInit+0x70>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d10e      	bne.n	800181e <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_TIM_Base_MspInit+0x6c>)
 8001802:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <HAL_TIM_Base_MspInit+0x6c>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001810:	4b07      	ldr	r3, [pc, #28]	; (8001830 <HAL_TIM_Base_MspInit+0x6c>)
 8001812:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
}
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40010000 	.word	0x40010000
 8001830:	58024400 	.word	0x58024400
 8001834:	40000400 	.word	0x40000400

08001838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b0b8      	sub	sp, #224	; 0xe0
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001850:	f107 0310 	add.w	r3, r7, #16
 8001854:	22bc      	movs	r2, #188	; 0xbc
 8001856:	2100      	movs	r1, #0
 8001858:	4618      	mov	r0, r3
 800185a:	f007 f865 	bl	8008928 <memset>
  if(huart->Instance==USART3)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a25      	ldr	r2, [pc, #148]	; (80018f8 <HAL_UART_MspInit+0xc0>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d142      	bne.n	80018ee <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001868:	2302      	movs	r3, #2
 800186a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800186c:	2300      	movs	r3, #0
 800186e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001872:	f107 0310 	add.w	r3, r7, #16
 8001876:	4618      	mov	r0, r3
 8001878:	f002 ff66 	bl	8004748 <HAL_RCCEx_PeriphCLKConfig>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001882:	f7ff fe8d 	bl	80015a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001886:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <HAL_UART_MspInit+0xc4>)
 8001888:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800188c:	4a1b      	ldr	r2, [pc, #108]	; (80018fc <HAL_UART_MspInit+0xc4>)
 800188e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001892:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_UART_MspInit+0xc4>)
 8001898:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800189c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a4:	4b15      	ldr	r3, [pc, #84]	; (80018fc <HAL_UART_MspInit+0xc4>)
 80018a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018aa:	4a14      	ldr	r2, [pc, #80]	; (80018fc <HAL_UART_MspInit+0xc4>)
 80018ac:	f043 0308 	orr.w	r3, r3, #8
 80018b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <HAL_UART_MspInit+0xc4>)
 80018b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80018c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018dc:	2307      	movs	r3, #7
 80018de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018e2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018e6:	4619      	mov	r1, r3
 80018e8:	4805      	ldr	r0, [pc, #20]	; (8001900 <HAL_UART_MspInit+0xc8>)
 80018ea:	f001 fad9 	bl	8002ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018ee:	bf00      	nop
 80018f0:	37e0      	adds	r7, #224	; 0xe0
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40004800 	.word	0x40004800
 80018fc:	58024400 	.word	0x58024400
 8001900:	58020c00 	.word	0x58020c00

08001904 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b0b8      	sub	sp, #224	; 0xe0
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800191c:	f107 0310 	add.w	r3, r7, #16
 8001920:	22bc      	movs	r2, #188	; 0xbc
 8001922:	2100      	movs	r1, #0
 8001924:	4618      	mov	r0, r3
 8001926:	f006 ffff 	bl	8008928 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a2f      	ldr	r2, [pc, #188]	; (80019ec <HAL_PCD_MspInit+0xe8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d156      	bne.n	80019e2 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001934:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001938:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800193a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800193e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001942:	f107 0310 	add.w	r3, r7, #16
 8001946:	4618      	mov	r0, r3
 8001948:	f002 fefe 	bl	8004748 <HAL_RCCEx_PeriphCLKConfig>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8001952:	f7ff fe25 	bl	80015a0 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001956:	f001 ff2f 	bl	80037b8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <HAL_PCD_MspInit+0xec>)
 800195c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001960:	4a23      	ldr	r2, [pc, #140]	; (80019f0 <HAL_PCD_MspInit+0xec>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800196a:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <HAL_PCD_MspInit+0xec>)
 800196c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001978:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800197c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198c:	2300      	movs	r3, #0
 800198e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001992:	230a      	movs	r3, #10
 8001994:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800199c:	4619      	mov	r1, r3
 800199e:	4815      	ldr	r0, [pc, #84]	; (80019f4 <HAL_PCD_MspInit+0xf0>)
 80019a0:	f001 fa7e 	bl	8002ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80019a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019bc:	4619      	mov	r1, r3
 80019be:	480d      	ldr	r0, [pc, #52]	; (80019f4 <HAL_PCD_MspInit+0xf0>)
 80019c0:	f001 fa6e 	bl	8002ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <HAL_PCD_MspInit+0xec>)
 80019c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019ca:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <HAL_PCD_MspInit+0xec>)
 80019cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80019d0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_PCD_MspInit+0xec>)
 80019d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80019e2:	bf00      	nop
 80019e4:	37e0      	adds	r7, #224	; 0xe0
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40080000 	.word	0x40080000
 80019f0:	58024400 	.word	0x58024400
 80019f4:	58020000 	.word	0x58020000

080019f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <NMI_Handler+0x4>

080019fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a02:	e7fe      	b.n	8001a02 <HardFault_Handler+0x4>

08001a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <MemManage_Handler+0x4>

08001a0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a0e:	e7fe      	b.n	8001a0e <BusFault_Handler+0x4>

08001a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <UsageFault_Handler+0x4>

08001a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a44:	f000 f95c 	bl	8001d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a54:	4a14      	ldr	r2, [pc, #80]	; (8001aa8 <_sbrk+0x5c>)
 8001a56:	4b15      	ldr	r3, [pc, #84]	; (8001aac <_sbrk+0x60>)
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a60:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <_sbrk+0x64>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d102      	bne.n	8001a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <_sbrk+0x64>)
 8001a6a:	4a12      	ldr	r2, [pc, #72]	; (8001ab4 <_sbrk+0x68>)
 8001a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <_sbrk+0x64>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d207      	bcs.n	8001a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a7c:	f006 ff02 	bl	8008884 <__errno>
 8001a80:	4603      	mov	r3, r0
 8001a82:	220c      	movs	r2, #12
 8001a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8a:	e009      	b.n	8001aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <_sbrk+0x64>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a92:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <_sbrk+0x64>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <_sbrk+0x64>)
 8001a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	24080000 	.word	0x24080000
 8001aac:	00000400 	.word	0x00000400
 8001ab0:	24000090 	.word	0x24000090
 8001ab4:	24000690 	.word	0x24000690

08001ab8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001abc:	4b37      	ldr	r3, [pc, #220]	; (8001b9c <SystemInit+0xe4>)
 8001abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ac2:	4a36      	ldr	r2, [pc, #216]	; (8001b9c <SystemInit+0xe4>)
 8001ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001acc:	4b34      	ldr	r3, [pc, #208]	; (8001ba0 <SystemInit+0xe8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 030f 	and.w	r3, r3, #15
 8001ad4:	2b06      	cmp	r3, #6
 8001ad6:	d807      	bhi.n	8001ae8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ad8:	4b31      	ldr	r3, [pc, #196]	; (8001ba0 <SystemInit+0xe8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f023 030f 	bic.w	r3, r3, #15
 8001ae0:	4a2f      	ldr	r2, [pc, #188]	; (8001ba0 <SystemInit+0xe8>)
 8001ae2:	f043 0307 	orr.w	r3, r3, #7
 8001ae6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001ae8:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <SystemInit+0xec>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a2d      	ldr	r2, [pc, #180]	; (8001ba4 <SystemInit+0xec>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001af4:	4b2b      	ldr	r3, [pc, #172]	; (8001ba4 <SystemInit+0xec>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001afa:	4b2a      	ldr	r3, [pc, #168]	; (8001ba4 <SystemInit+0xec>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4929      	ldr	r1, [pc, #164]	; (8001ba4 <SystemInit+0xec>)
 8001b00:	4b29      	ldr	r3, [pc, #164]	; (8001ba8 <SystemInit+0xf0>)
 8001b02:	4013      	ands	r3, r2
 8001b04:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b06:	4b26      	ldr	r3, [pc, #152]	; (8001ba0 <SystemInit+0xe8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d007      	beq.n	8001b22 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b12:	4b23      	ldr	r3, [pc, #140]	; (8001ba0 <SystemInit+0xe8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 030f 	bic.w	r3, r3, #15
 8001b1a:	4a21      	ldr	r2, [pc, #132]	; (8001ba0 <SystemInit+0xe8>)
 8001b1c:	f043 0307 	orr.w	r3, r3, #7
 8001b20:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001b22:	4b20      	ldr	r3, [pc, #128]	; (8001ba4 <SystemInit+0xec>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001b28:	4b1e      	ldr	r3, [pc, #120]	; (8001ba4 <SystemInit+0xec>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001b2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <SystemInit+0xec>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b34:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <SystemInit+0xec>)
 8001b36:	4a1d      	ldr	r2, [pc, #116]	; (8001bac <SystemInit+0xf4>)
 8001b38:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ba4 <SystemInit+0xec>)
 8001b3c:	4a1c      	ldr	r2, [pc, #112]	; (8001bb0 <SystemInit+0xf8>)
 8001b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b40:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <SystemInit+0xec>)
 8001b42:	4a1c      	ldr	r2, [pc, #112]	; (8001bb4 <SystemInit+0xfc>)
 8001b44:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b46:	4b17      	ldr	r3, [pc, #92]	; (8001ba4 <SystemInit+0xec>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b4c:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <SystemInit+0xec>)
 8001b4e:	4a19      	ldr	r2, [pc, #100]	; (8001bb4 <SystemInit+0xfc>)
 8001b50:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b52:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <SystemInit+0xec>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <SystemInit+0xec>)
 8001b5a:	4a16      	ldr	r2, [pc, #88]	; (8001bb4 <SystemInit+0xfc>)
 8001b5c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <SystemInit+0xec>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b64:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <SystemInit+0xec>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0e      	ldr	r2, [pc, #56]	; (8001ba4 <SystemInit+0xec>)
 8001b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b6e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <SystemInit+0xec>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <SystemInit+0x100>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <SystemInit+0x104>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b82:	d202      	bcs.n	8001b8a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001b84:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <SystemInit+0x108>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <SystemInit+0x10c>)
 8001b8c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001b90:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000ed00 	.word	0xe000ed00
 8001ba0:	52002000 	.word	0x52002000
 8001ba4:	58024400 	.word	0x58024400
 8001ba8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001bac:	02020200 	.word	0x02020200
 8001bb0:	01ff0000 	.word	0x01ff0000
 8001bb4:	01010280 	.word	0x01010280
 8001bb8:	5c001000 	.word	0x5c001000
 8001bbc:	ffff0000 	.word	0xffff0000
 8001bc0:	51008108 	.word	0x51008108
 8001bc4:	52004000 	.word	0x52004000

08001bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bcc:	f7ff ff74 	bl	8001ab8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bd0:	480c      	ldr	r0, [pc, #48]	; (8001c04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bd2:	490d      	ldr	r1, [pc, #52]	; (8001c08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bd4:	4a0d      	ldr	r2, [pc, #52]	; (8001c0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd8:	e002      	b.n	8001be0 <LoopCopyDataInit>

08001bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bde:	3304      	adds	r3, #4

08001be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be4:	d3f9      	bcc.n	8001bda <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be6:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001be8:	4c0a      	ldr	r4, [pc, #40]	; (8001c14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bec:	e001      	b.n	8001bf2 <LoopFillZerobss>

08001bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf0:	3204      	adds	r2, #4

08001bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf4:	d3fb      	bcc.n	8001bee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bf6:	f006 fe4b 	bl	8008890 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bfa:	f7ff f865 	bl	8000cc8 <main>
  bx  lr
 8001bfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c00:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001c04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c08:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001c0c:	08009200 	.word	0x08009200
  ldr r2, =_sbss
 8001c10:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001c14:	24000690 	.word	0x24000690

08001c18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c18:	e7fe      	b.n	8001c18 <ADC3_IRQHandler>
	...

08001c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c22:	2003      	movs	r0, #3
 8001c24:	f001 f90a 	bl	8002e3c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c28:	f002 fbb8 	bl	800439c <HAL_RCC_GetSysClockFreq>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_Init+0x68>)
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	0a1b      	lsrs	r3, r3, #8
 8001c34:	f003 030f 	and.w	r3, r3, #15
 8001c38:	4913      	ldr	r1, [pc, #76]	; (8001c88 <HAL_Init+0x6c>)
 8001c3a:	5ccb      	ldrb	r3, [r1, r3]
 8001c3c:	f003 031f 	and.w	r3, r3, #31
 8001c40:	fa22 f303 	lsr.w	r3, r2, r3
 8001c44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c46:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <HAL_Init+0x68>)
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	4a0e      	ldr	r2, [pc, #56]	; (8001c88 <HAL_Init+0x6c>)
 8001c50:	5cd3      	ldrb	r3, [r2, r3]
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5c:	4a0b      	ldr	r2, [pc, #44]	; (8001c8c <HAL_Init+0x70>)
 8001c5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c60:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <HAL_Init+0x74>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c66:	2000      	movs	r0, #0
 8001c68:	f000 f814 	bl	8001c94 <HAL_InitTick>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e002      	b.n	8001c7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c76:	f7ff fc99 	bl	80015ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	58024400 	.word	0x58024400
 8001c88:	08009184 	.word	0x08009184
 8001c8c:	24000004 	.word	0x24000004
 8001c90:	24000000 	.word	0x24000000

08001c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c9c:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <HAL_InitTick+0x60>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e021      	b.n	8001cec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ca8:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <HAL_InitTick+0x64>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <HAL_InitTick+0x60>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f001 f8e1 	bl	8002e86 <HAL_SYSTICK_Config>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e00e      	b.n	8001cec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b0f      	cmp	r3, #15
 8001cd2:	d80a      	bhi.n	8001cea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cdc:	f001 f8b9 	bl	8002e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce0:	4a06      	ldr	r2, [pc, #24]	; (8001cfc <HAL_InitTick+0x68>)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e000      	b.n	8001cec <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	2400000c 	.word	0x2400000c
 8001cf8:	24000000 	.word	0x24000000
 8001cfc:	24000008 	.word	0x24000008

08001d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_IncTick+0x20>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_IncTick+0x24>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4413      	add	r3, r2
 8001d10:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <HAL_IncTick+0x24>)
 8001d12:	6013      	str	r3, [r2, #0]
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	2400000c 	.word	0x2400000c
 8001d24:	2400067c 	.word	0x2400067c

08001d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d2c:	4b03      	ldr	r3, [pc, #12]	; (8001d3c <HAL_GetTick+0x14>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	2400067c 	.word	0x2400067c

08001d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d48:	f7ff ffee 	bl	8001d28 <HAL_GetTick>
 8001d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	d005      	beq.n	8001d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <HAL_Delay+0x44>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d66:	bf00      	nop
 8001d68:	f7ff ffde 	bl	8001d28 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d8f7      	bhi.n	8001d68 <HAL_Delay+0x28>
  {
  }
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	2400000c 	.word	0x2400000c

08001d88 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d8c:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <HAL_GetREVID+0x14>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	0c1b      	lsrs	r3, r3, #16
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	5c001000 	.word	0x5c001000

08001da0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001daa:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	401a      	ands	r2, r3
 8001db4:	4904      	ldr	r1, [pc, #16]	; (8001dc8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	604b      	str	r3, [r1, #4]
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	58000400 	.word	0x58000400

08001dcc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	609a      	str	r2, [r3, #8]
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b087      	sub	sp, #28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	3360      	adds	r3, #96	; 0x60
 8001e46:	461a      	mov	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	430b      	orrs	r3, r1
 8001e62:	431a      	orrs	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001e68:	bf00      	nop
 8001e6a:	371c      	adds	r7, #28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	f003 031f 	and.w	r3, r3, #31
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	fa01 f303 	lsl.w	r3, r1, r3
 8001e94:	431a      	orrs	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	611a      	str	r2, [r3, #16]
}
 8001e9a:	bf00      	nop
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b087      	sub	sp, #28
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	3360      	adds	r3, #96	; 0x60
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	601a      	str	r2, [r3, #0]
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	371c      	adds	r7, #28
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b087      	sub	sp, #28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	3330      	adds	r3, #48	; 0x30
 8001eec:	461a      	mov	r2, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	0a1b      	lsrs	r3, r3, #8
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	4413      	add	r3, r2
 8001efa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f003 031f 	and.w	r3, r3, #31
 8001f06:	211f      	movs	r1, #31
 8001f08:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	401a      	ands	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	0e9b      	lsrs	r3, r3, #26
 8001f14:	f003 011f 	and.w	r1, r3, #31
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f003 031f 	and.w	r3, r3, #31
 8001f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f22:	431a      	orrs	r2, r3
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f28:	bf00      	nop
 8001f2a:	371c      	adds	r7, #28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	3314      	adds	r3, #20
 8001f44:	461a      	mov	r2, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	0e5b      	lsrs	r3, r3, #25
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	4413      	add	r3, r2
 8001f52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	0d1b      	lsrs	r3, r3, #20
 8001f5c:	f003 031f 	and.w	r3, r3, #31
 8001f60:	2107      	movs	r1, #7
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	401a      	ands	r2, r3
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	0d1b      	lsrs	r3, r3, #20
 8001f6e:	f003 031f 	and.w	r3, r3, #31
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	fa01 f303 	lsl.w	r3, r1, r3
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f7e:	bf00      	nop
 8001f80:	371c      	adds	r7, #28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f003 0318 	and.w	r3, r3, #24
 8001fae:	4908      	ldr	r1, [pc, #32]	; (8001fd0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fb0:	40d9      	lsrs	r1, r3
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	400b      	ands	r3, r1
 8001fb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001fc2:	bf00      	nop
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	000fffff 	.word	0x000fffff

08001fd4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6093      	str	r3, [r2, #8]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	5fffffc0 	.word	0x5fffffc0

08001ff8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800200c:	d101      	bne.n	8002012 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <LL_ADC_EnableInternalRegulator+0x24>)
 800202e:	4013      	ands	r3, r2
 8002030:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	6fffffc0 	.word	0x6fffffc0

08002048 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002058:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800205c:	d101      	bne.n	8002062 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <LL_ADC_IsEnabled+0x18>
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <LL_ADC_IsEnabled+0x1a>
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d101      	bne.n	80020ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d101      	bne.n	80020d4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020e4:	b590      	push	{r4, r7, lr}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ec:	2300      	movs	r3, #0
 80020ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e18e      	b.n	800241c <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002108:	2b00      	cmp	r3, #0
 800210a:	d109      	bne.n	8002120 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff fa67 	bl	80015e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ff67 	bl	8001ff8 <LL_ADC_IsDeepPowerDownEnabled>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d004      	beq.n	800213a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff4d 	bl	8001fd4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff ff82 	bl	8002048 <LL_ADC_IsInternalRegulatorEnabled>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d114      	bne.n	8002174 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ff66 	bl	8002020 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002154:	4b9a      	ldr	r3, [pc, #616]	; (80023c0 <HAL_ADC_Init+0x2dc>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	099b      	lsrs	r3, r3, #6
 800215a:	4a9a      	ldr	r2, [pc, #616]	; (80023c4 <HAL_ADC_Init+0x2e0>)
 800215c:	fba2 2303 	umull	r2, r3, r2, r3
 8002160:	099b      	lsrs	r3, r3, #6
 8002162:	3301      	adds	r3, #1
 8002164:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002166:	e002      	b.n	800216e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	3b01      	subs	r3, #1
 800216c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1f9      	bne.n	8002168 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff65 	bl	8002048 <LL_ADC_IsInternalRegulatorEnabled>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10d      	bne.n	80021a0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002188:	f043 0210 	orr.w	r2, r3, #16
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002194:	f043 0201 	orr.w	r2, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff ff76 	bl	8002096 <LL_ADC_REG_IsConversionOngoing>
 80021aa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b0:	f003 0310 	and.w	r3, r3, #16
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f040 8128 	bne.w	800240a <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f040 8124 	bne.w	800240a <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021ca:	f043 0202 	orr.w	r2, r3, #2
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff ff4a 	bl	8002070 <LL_ADC_IsEnabled>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d136      	bne.n	8002250 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a78      	ldr	r2, [pc, #480]	; (80023c8 <HAL_ADC_Init+0x2e4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d004      	beq.n	80021f6 <HAL_ADC_Init+0x112>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a76      	ldr	r2, [pc, #472]	; (80023cc <HAL_ADC_Init+0x2e8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d10e      	bne.n	8002214 <HAL_ADC_Init+0x130>
 80021f6:	4874      	ldr	r0, [pc, #464]	; (80023c8 <HAL_ADC_Init+0x2e4>)
 80021f8:	f7ff ff3a 	bl	8002070 <LL_ADC_IsEnabled>
 80021fc:	4604      	mov	r4, r0
 80021fe:	4873      	ldr	r0, [pc, #460]	; (80023cc <HAL_ADC_Init+0x2e8>)
 8002200:	f7ff ff36 	bl	8002070 <LL_ADC_IsEnabled>
 8002204:	4603      	mov	r3, r0
 8002206:	4323      	orrs	r3, r4
 8002208:	2b00      	cmp	r3, #0
 800220a:	bf0c      	ite	eq
 800220c:	2301      	moveq	r3, #1
 800220e:	2300      	movne	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	e008      	b.n	8002226 <HAL_ADC_Init+0x142>
 8002214:	486e      	ldr	r0, [pc, #440]	; (80023d0 <HAL_ADC_Init+0x2ec>)
 8002216:	f7ff ff2b 	bl	8002070 <LL_ADC_IsEnabled>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf0c      	ite	eq
 8002220:	2301      	moveq	r3, #1
 8002222:	2300      	movne	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d012      	beq.n	8002250 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a66      	ldr	r2, [pc, #408]	; (80023c8 <HAL_ADC_Init+0x2e4>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d004      	beq.n	800223e <HAL_ADC_Init+0x15a>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a64      	ldr	r2, [pc, #400]	; (80023cc <HAL_ADC_Init+0x2e8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d101      	bne.n	8002242 <HAL_ADC_Init+0x15e>
 800223e:	4a65      	ldr	r2, [pc, #404]	; (80023d4 <HAL_ADC_Init+0x2f0>)
 8002240:	e000      	b.n	8002244 <HAL_ADC_Init+0x160>
 8002242:	4a65      	ldr	r2, [pc, #404]	; (80023d8 <HAL_ADC_Init+0x2f4>)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4619      	mov	r1, r3
 800224a:	4610      	mov	r0, r2
 800224c:	f7ff fdbe 	bl	8001dcc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002250:	f7ff fd9a 	bl	8001d88 <HAL_GetREVID>
 8002254:	4603      	mov	r3, r0
 8002256:	f241 0203 	movw	r2, #4099	; 0x1003
 800225a:	4293      	cmp	r3, r2
 800225c:	d914      	bls.n	8002288 <HAL_ADC_Init+0x1a4>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2b10      	cmp	r3, #16
 8002264:	d110      	bne.n	8002288 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	7d5b      	ldrb	r3, [r3, #21]
 800226a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002270:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002276:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	7f1b      	ldrb	r3, [r3, #28]
 800227c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800227e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002280:	f043 030c 	orr.w	r3, r3, #12
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	e00d      	b.n	80022a4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	7d5b      	ldrb	r3, [r3, #21]
 800228c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002292:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002298:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	7f1b      	ldrb	r3, [r3, #28]
 800229e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	7f1b      	ldrb	r3, [r3, #28]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d106      	bne.n	80022ba <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	3b01      	subs	r3, #1
 80022b2:	045b      	lsls	r3, r3, #17
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d009      	beq.n	80022d6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ce:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	4b3f      	ldr	r3, [pc, #252]	; (80023dc <HAL_ADC_Init+0x2f8>)
 80022de:	4013      	ands	r3, r2
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6812      	ldr	r2, [r2, #0]
 80022e4:	69b9      	ldr	r1, [r7, #24]
 80022e6:	430b      	orrs	r3, r1
 80022e8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fed1 	bl	8002096 <LL_ADC_REG_IsConversionOngoing>
 80022f4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff fede 	bl	80020bc <LL_ADC_INJ_IsConversionOngoing>
 8002300:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d14a      	bne.n	800239e <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d147      	bne.n	800239e <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	7d1b      	ldrb	r3, [r3, #20]
 8002312:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	4b2f      	ldr	r3, [pc, #188]	; (80023e0 <HAL_ADC_Init+0x2fc>)
 8002324:	4013      	ands	r3, r2
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6812      	ldr	r2, [r2, #0]
 800232a:	69b9      	ldr	r1, [r7, #24]
 800232c:	430b      	orrs	r3, r1
 800232e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002336:	2b01      	cmp	r3, #1
 8002338:	d11b      	bne.n	8002372 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	691a      	ldr	r2, [r3, #16]
 8002346:	4b27      	ldr	r3, [pc, #156]	; (80023e4 <HAL_ADC_Init+0x300>)
 8002348:	4013      	ands	r3, r2
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800234e:	3a01      	subs	r2, #1
 8002350:	0411      	lsls	r1, r2, #16
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002356:	4311      	orrs	r1, r2
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800235c:	4311      	orrs	r1, r2
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002362:	430a      	orrs	r2, r1
 8002364:	431a      	orrs	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0201 	orr.w	r2, r2, #1
 800236e:	611a      	str	r2, [r3, #16]
 8002370:	e007      	b.n	8002382 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0201 	bic.w	r2, r2, #1
 8002380:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 fb93 	bl	8002ac4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d120      	bne.n	80023e8 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ac:	f023 010f 	bic.w	r1, r3, #15
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	1e5a      	subs	r2, r3, #1
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	631a      	str	r2, [r3, #48]	; 0x30
 80023be:	e01b      	b.n	80023f8 <HAL_ADC_Init+0x314>
 80023c0:	24000000 	.word	0x24000000
 80023c4:	053e2d63 	.word	0x053e2d63
 80023c8:	40022000 	.word	0x40022000
 80023cc:	40022100 	.word	0x40022100
 80023d0:	58026000 	.word	0x58026000
 80023d4:	40022300 	.word	0x40022300
 80023d8:	58026300 	.word	0x58026300
 80023dc:	fff0c003 	.word	0xfff0c003
 80023e0:	ffffbffc 	.word	0xffffbffc
 80023e4:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 020f 	bic.w	r2, r2, #15
 80023f6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fc:	f023 0303 	bic.w	r3, r3, #3
 8002400:	f043 0201 	orr.w	r2, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	655a      	str	r2, [r3, #84]	; 0x54
 8002408:	e007      	b.n	800241a <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240e:	f043 0210 	orr.w	r2, r3, #16
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800241a:	7ffb      	ldrb	r3, [r7, #31]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3724      	adds	r7, #36	; 0x24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd90      	pop	{r4, r7, pc}

08002424 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002424:	b590      	push	{r4, r7, lr}
 8002426:	b0a1      	sub	sp, #132	; 0x84
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	4a9d      	ldr	r2, [pc, #628]	; (80026b4 <HAL_ADC_ConfigChannel+0x290>)
 800243e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <HAL_ADC_ConfigChannel+0x2a>
 800244a:	2302      	movs	r3, #2
 800244c:	e321      	b.n	8002a92 <HAL_ADC_ConfigChannel+0x66e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fe1b 	bl	8002096 <LL_ADC_REG_IsConversionOngoing>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	f040 8306 	bne.w	8002a74 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002470:	2b00      	cmp	r3, #0
 8002472:	d108      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x62>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	0e9b      	lsrs	r3, r3, #26
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	2201      	movs	r2, #1
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	e016      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x90>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800248e:	fa93 f3a3 	rbit	r3, r3
 8002492:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002494:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002496:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002498:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800249e:	2320      	movs	r3, #32
 80024a0:	e003      	b.n	80024aa <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80024a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024a4:	fab3 f383 	clz	r3, r3
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	f003 031f 	and.w	r3, r3, #31
 80024ae:	2201      	movs	r2, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	69d1      	ldr	r1, [r2, #28]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6812      	ldr	r2, [r2, #0]
 80024be:	430b      	orrs	r3, r1
 80024c0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	6859      	ldr	r1, [r3, #4]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	f7ff fd04 	bl	8001edc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fddc 	bl	8002096 <LL_ADC_REG_IsConversionOngoing>
 80024de:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff fde9 	bl	80020bc <LL_ADC_INJ_IsConversionOngoing>
 80024ea:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f040 80b3 	bne.w	800265a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f040 80af 	bne.w	800265a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	6819      	ldr	r1, [r3, #0]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	461a      	mov	r2, r3
 800250a:	f7ff fd13 	bl	8001f34 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800250e:	4b6a      	ldr	r3, [pc, #424]	; (80026b8 <HAL_ADC_ConfigChannel+0x294>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002516:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800251a:	d10b      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x110>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	695a      	ldr	r2, [r3, #20]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	089b      	lsrs	r3, r3, #2
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	e01d      	b.n	8002570 <HAL_ADC_ConfigChannel+0x14c>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10b      	bne.n	800255a <HAL_ADC_ConfigChannel+0x136>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	695a      	ldr	r2, [r3, #20]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	089b      	lsrs	r3, r3, #2
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	e00a      	b.n	8002570 <HAL_ADC_ConfigChannel+0x14c>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	695a      	ldr	r2, [r3, #20]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	089b      	lsrs	r3, r3, #2
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	2b04      	cmp	r3, #4
 8002578:	d027      	beq.n	80025ca <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	6919      	ldr	r1, [r3, #16]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002588:	f7ff fc54 	bl	8001e34 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6818      	ldr	r0, [r3, #0]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	6919      	ldr	r1, [r3, #16]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	7e5b      	ldrb	r3, [r3, #25]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d102      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x17e>
 800259c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80025a0:	e000      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x180>
 80025a2:	2300      	movs	r3, #0
 80025a4:	461a      	mov	r2, r3
 80025a6:	f7ff fc7e 	bl	8001ea6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6919      	ldr	r1, [r3, #16]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	7e1b      	ldrb	r3, [r3, #24]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d102      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x19c>
 80025ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025be:	e000      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x19e>
 80025c0:	2300      	movs	r3, #0
 80025c2:	461a      	mov	r2, r3
 80025c4:	f7ff fc56 	bl	8001e74 <LL_ADC_SetDataRightShift>
 80025c8:	e047      	b.n	800265a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	069b      	lsls	r3, r3, #26
 80025da:	429a      	cmp	r2, r3
 80025dc:	d107      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025ec:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	069b      	lsls	r3, r3, #26
 80025fe:	429a      	cmp	r2, r3
 8002600:	d107      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002610:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002618:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	069b      	lsls	r3, r3, #26
 8002622:	429a      	cmp	r2, r3
 8002624:	d107      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002634:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800263c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	069b      	lsls	r3, r3, #26
 8002646:	429a      	cmp	r2, r3
 8002648:	d107      	bne.n	800265a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002658:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fd06 	bl	8002070 <LL_ADC_IsEnabled>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	f040 820d 	bne.w	8002a86 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	6819      	ldr	r1, [r3, #0]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	461a      	mov	r2, r3
 800267a:	f7ff fc87 	bl	8001f8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	4a0c      	ldr	r2, [pc, #48]	; (80026b4 <HAL_ADC_ConfigChannel+0x290>)
 8002684:	4293      	cmp	r3, r2
 8002686:	f040 8133 	bne.w	80028f0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002696:	2b00      	cmp	r3, #0
 8002698:	d110      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x298>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	0e9b      	lsrs	r3, r3, #26
 80026a0:	3301      	adds	r3, #1
 80026a2:	f003 031f 	and.w	r3, r3, #31
 80026a6:	2b09      	cmp	r3, #9
 80026a8:	bf94      	ite	ls
 80026aa:	2301      	movls	r3, #1
 80026ac:	2300      	movhi	r3, #0
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	e01e      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x2cc>
 80026b2:	bf00      	nop
 80026b4:	47ff0000 	.word	0x47ff0000
 80026b8:	5c001000 	.word	0x5c001000
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026c4:	fa93 f3a3 	rbit	r3, r3
 80026c8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80026ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80026ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80026d4:	2320      	movs	r3, #32
 80026d6:	e003      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80026d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026da:	fab3 f383 	clz	r3, r3
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	3301      	adds	r3, #1
 80026e2:	f003 031f 	and.w	r3, r3, #31
 80026e6:	2b09      	cmp	r3, #9
 80026e8:	bf94      	ite	ls
 80026ea:	2301      	movls	r3, #1
 80026ec:	2300      	movhi	r3, #0
 80026ee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d079      	beq.n	80027e8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d107      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x2ec>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	0e9b      	lsrs	r3, r3, #26
 8002706:	3301      	adds	r3, #1
 8002708:	069b      	lsls	r3, r3, #26
 800270a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800270e:	e015      	b.n	800273c <HAL_ADC_ConfigChannel+0x318>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002718:	fa93 f3a3 	rbit	r3, r3
 800271c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800271e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002720:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002728:	2320      	movs	r3, #32
 800272a:	e003      	b.n	8002734 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800272c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800272e:	fab3 f383 	clz	r3, r3
 8002732:	b2db      	uxtb	r3, r3
 8002734:	3301      	adds	r3, #1
 8002736:	069b      	lsls	r3, r3, #26
 8002738:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002744:	2b00      	cmp	r3, #0
 8002746:	d109      	bne.n	800275c <HAL_ADC_ConfigChannel+0x338>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	0e9b      	lsrs	r3, r3, #26
 800274e:	3301      	adds	r3, #1
 8002750:	f003 031f 	and.w	r3, r3, #31
 8002754:	2101      	movs	r1, #1
 8002756:	fa01 f303 	lsl.w	r3, r1, r3
 800275a:	e017      	b.n	800278c <HAL_ADC_ConfigChannel+0x368>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002764:	fa93 f3a3 	rbit	r3, r3
 8002768:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800276a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800276c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800276e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002774:	2320      	movs	r3, #32
 8002776:	e003      	b.n	8002780 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800277a:	fab3 f383 	clz	r3, r3
 800277e:	b2db      	uxtb	r3, r3
 8002780:	3301      	adds	r3, #1
 8002782:	f003 031f 	and.w	r3, r3, #31
 8002786:	2101      	movs	r1, #1
 8002788:	fa01 f303 	lsl.w	r3, r1, r3
 800278c:	ea42 0103 	orr.w	r1, r2, r3
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10a      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x38e>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	0e9b      	lsrs	r3, r3, #26
 80027a2:	3301      	adds	r3, #1
 80027a4:	f003 021f 	and.w	r2, r3, #31
 80027a8:	4613      	mov	r3, r2
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	4413      	add	r3, r2
 80027ae:	051b      	lsls	r3, r3, #20
 80027b0:	e018      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x3c0>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ba:	fa93 f3a3 	rbit	r3, r3
 80027be:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80027c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80027c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80027ca:	2320      	movs	r3, #32
 80027cc:	e003      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80027ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d0:	fab3 f383 	clz	r3, r3
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	3301      	adds	r3, #1
 80027d8:	f003 021f 	and.w	r2, r3, #31
 80027dc:	4613      	mov	r3, r2
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	4413      	add	r3, r2
 80027e2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027e4:	430b      	orrs	r3, r1
 80027e6:	e07e      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d107      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x3e0>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	0e9b      	lsrs	r3, r3, #26
 80027fa:	3301      	adds	r3, #1
 80027fc:	069b      	lsls	r3, r3, #26
 80027fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002802:	e015      	b.n	8002830 <HAL_ADC_ConfigChannel+0x40c>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280c:	fa93 f3a3 	rbit	r3, r3
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800281c:	2320      	movs	r3, #32
 800281e:	e003      	b.n	8002828 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002822:	fab3 f383 	clz	r3, r3
 8002826:	b2db      	uxtb	r3, r3
 8002828:	3301      	adds	r3, #1
 800282a:	069b      	lsls	r3, r3, #26
 800282c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002838:	2b00      	cmp	r3, #0
 800283a:	d109      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x42c>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	0e9b      	lsrs	r3, r3, #26
 8002842:	3301      	adds	r3, #1
 8002844:	f003 031f 	and.w	r3, r3, #31
 8002848:	2101      	movs	r1, #1
 800284a:	fa01 f303 	lsl.w	r3, r1, r3
 800284e:	e017      	b.n	8002880 <HAL_ADC_ConfigChannel+0x45c>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	61bb      	str	r3, [r7, #24]
  return result;
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002868:	2320      	movs	r3, #32
 800286a:	e003      	b.n	8002874 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800286c:	6a3b      	ldr	r3, [r7, #32]
 800286e:	fab3 f383 	clz	r3, r3
 8002872:	b2db      	uxtb	r3, r3
 8002874:	3301      	adds	r3, #1
 8002876:	f003 031f 	and.w	r3, r3, #31
 800287a:	2101      	movs	r1, #1
 800287c:	fa01 f303 	lsl.w	r3, r1, r3
 8002880:	ea42 0103 	orr.w	r1, r2, r3
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10d      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x488>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	0e9b      	lsrs	r3, r3, #26
 8002896:	3301      	adds	r3, #1
 8002898:	f003 021f 	and.w	r2, r3, #31
 800289c:	4613      	mov	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	3b1e      	subs	r3, #30
 80028a4:	051b      	lsls	r3, r3, #20
 80028a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028aa:	e01b      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x4c0>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	fa93 f3a3 	rbit	r3, r3
 80028b8:	60fb      	str	r3, [r7, #12]
  return result;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80028c4:	2320      	movs	r3, #32
 80028c6:	e003      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	3301      	adds	r3, #1
 80028d2:	f003 021f 	and.w	r2, r3, #31
 80028d6:	4613      	mov	r3, r2
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	4413      	add	r3, r2
 80028dc:	3b1e      	subs	r3, #30
 80028de:	051b      	lsls	r3, r3, #20
 80028e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028e4:	430b      	orrs	r3, r1
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	6892      	ldr	r2, [r2, #8]
 80028ea:	4619      	mov	r1, r3
 80028ec:	f7ff fb22 	bl	8001f34 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f280 80c6 	bge.w	8002a86 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a67      	ldr	r2, [pc, #412]	; (8002a9c <HAL_ADC_ConfigChannel+0x678>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d004      	beq.n	800290e <HAL_ADC_ConfigChannel+0x4ea>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a65      	ldr	r2, [pc, #404]	; (8002aa0 <HAL_ADC_ConfigChannel+0x67c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d101      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x4ee>
 800290e:	4b65      	ldr	r3, [pc, #404]	; (8002aa4 <HAL_ADC_ConfigChannel+0x680>)
 8002910:	e000      	b.n	8002914 <HAL_ADC_ConfigChannel+0x4f0>
 8002912:	4b65      	ldr	r3, [pc, #404]	; (8002aa8 <HAL_ADC_ConfigChannel+0x684>)
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fa7f 	bl	8001e18 <LL_ADC_GetCommonPathInternalCh>
 800291a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a5e      	ldr	r2, [pc, #376]	; (8002a9c <HAL_ADC_ConfigChannel+0x678>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d004      	beq.n	8002930 <HAL_ADC_ConfigChannel+0x50c>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a5d      	ldr	r2, [pc, #372]	; (8002aa0 <HAL_ADC_ConfigChannel+0x67c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d10e      	bne.n	800294e <HAL_ADC_ConfigChannel+0x52a>
 8002930:	485a      	ldr	r0, [pc, #360]	; (8002a9c <HAL_ADC_ConfigChannel+0x678>)
 8002932:	f7ff fb9d 	bl	8002070 <LL_ADC_IsEnabled>
 8002936:	4604      	mov	r4, r0
 8002938:	4859      	ldr	r0, [pc, #356]	; (8002aa0 <HAL_ADC_ConfigChannel+0x67c>)
 800293a:	f7ff fb99 	bl	8002070 <LL_ADC_IsEnabled>
 800293e:	4603      	mov	r3, r0
 8002940:	4323      	orrs	r3, r4
 8002942:	2b00      	cmp	r3, #0
 8002944:	bf0c      	ite	eq
 8002946:	2301      	moveq	r3, #1
 8002948:	2300      	movne	r3, #0
 800294a:	b2db      	uxtb	r3, r3
 800294c:	e008      	b.n	8002960 <HAL_ADC_ConfigChannel+0x53c>
 800294e:	4857      	ldr	r0, [pc, #348]	; (8002aac <HAL_ADC_ConfigChannel+0x688>)
 8002950:	f7ff fb8e 	bl	8002070 <LL_ADC_IsEnabled>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	bf0c      	ite	eq
 800295a:	2301      	moveq	r3, #1
 800295c:	2300      	movne	r3, #0
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	d07d      	beq.n	8002a60 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a51      	ldr	r2, [pc, #324]	; (8002ab0 <HAL_ADC_ConfigChannel+0x68c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d130      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x5ac>
 800296e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002970:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d12b      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a4b      	ldr	r2, [pc, #300]	; (8002aac <HAL_ADC_ConfigChannel+0x688>)
 800297e:	4293      	cmp	r3, r2
 8002980:	f040 8081 	bne.w	8002a86 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a44      	ldr	r2, [pc, #272]	; (8002a9c <HAL_ADC_ConfigChannel+0x678>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d004      	beq.n	8002998 <HAL_ADC_ConfigChannel+0x574>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a43      	ldr	r2, [pc, #268]	; (8002aa0 <HAL_ADC_ConfigChannel+0x67c>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d101      	bne.n	800299c <HAL_ADC_ConfigChannel+0x578>
 8002998:	4a42      	ldr	r2, [pc, #264]	; (8002aa4 <HAL_ADC_ConfigChannel+0x680>)
 800299a:	e000      	b.n	800299e <HAL_ADC_ConfigChannel+0x57a>
 800299c:	4a42      	ldr	r2, [pc, #264]	; (8002aa8 <HAL_ADC_ConfigChannel+0x684>)
 800299e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029a4:	4619      	mov	r1, r3
 80029a6:	4610      	mov	r0, r2
 80029a8:	f7ff fa23 	bl	8001df2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029ac:	4b41      	ldr	r3, [pc, #260]	; (8002ab4 <HAL_ADC_ConfigChannel+0x690>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	099b      	lsrs	r3, r3, #6
 80029b2:	4a41      	ldr	r2, [pc, #260]	; (8002ab8 <HAL_ADC_ConfigChannel+0x694>)
 80029b4:	fba2 2303 	umull	r2, r3, r2, r3
 80029b8:	099b      	lsrs	r3, r3, #6
 80029ba:	3301      	adds	r3, #1
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80029c0:	e002      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	3b01      	subs	r3, #1
 80029c6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f9      	bne.n	80029c2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029ce:	e05a      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a39      	ldr	r2, [pc, #228]	; (8002abc <HAL_ADC_ConfigChannel+0x698>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d11e      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x5f4>
 80029da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d119      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a30      	ldr	r2, [pc, #192]	; (8002aac <HAL_ADC_ConfigChannel+0x688>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d14b      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a2a      	ldr	r2, [pc, #168]	; (8002a9c <HAL_ADC_ConfigChannel+0x678>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d004      	beq.n	8002a02 <HAL_ADC_ConfigChannel+0x5de>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a28      	ldr	r2, [pc, #160]	; (8002aa0 <HAL_ADC_ConfigChannel+0x67c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d101      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x5e2>
 8002a02:	4a28      	ldr	r2, [pc, #160]	; (8002aa4 <HAL_ADC_ConfigChannel+0x680>)
 8002a04:	e000      	b.n	8002a08 <HAL_ADC_ConfigChannel+0x5e4>
 8002a06:	4a28      	ldr	r2, [pc, #160]	; (8002aa8 <HAL_ADC_ConfigChannel+0x684>)
 8002a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4610      	mov	r0, r2
 8002a12:	f7ff f9ee 	bl	8001df2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a16:	e036      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a28      	ldr	r2, [pc, #160]	; (8002ac0 <HAL_ADC_ConfigChannel+0x69c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d131      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x662>
 8002a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d12c      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a1e      	ldr	r2, [pc, #120]	; (8002aac <HAL_ADC_ConfigChannel+0x688>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d127      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a18      	ldr	r2, [pc, #96]	; (8002a9c <HAL_ADC_ConfigChannel+0x678>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d004      	beq.n	8002a4a <HAL_ADC_ConfigChannel+0x626>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a16      	ldr	r2, [pc, #88]	; (8002aa0 <HAL_ADC_ConfigChannel+0x67c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d101      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x62a>
 8002a4a:	4a16      	ldr	r2, [pc, #88]	; (8002aa4 <HAL_ADC_ConfigChannel+0x680>)
 8002a4c:	e000      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x62c>
 8002a4e:	4a16      	ldr	r2, [pc, #88]	; (8002aa8 <HAL_ADC_ConfigChannel+0x684>)
 8002a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a56:	4619      	mov	r1, r3
 8002a58:	4610      	mov	r0, r2
 8002a5a:	f7ff f9ca 	bl	8001df2 <LL_ADC_SetCommonPathInternalCh>
 8002a5e:	e012      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a64:	f043 0220 	orr.w	r2, r3, #32
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002a72:	e008      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a78:	f043 0220 	orr.w	r2, r3, #32
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a8e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3784      	adds	r7, #132	; 0x84
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd90      	pop	{r4, r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40022000 	.word	0x40022000
 8002aa0:	40022100 	.word	0x40022100
 8002aa4:	40022300 	.word	0x40022300
 8002aa8:	58026300 	.word	0x58026300
 8002aac:	58026000 	.word	0x58026000
 8002ab0:	cb840000 	.word	0xcb840000
 8002ab4:	24000000 	.word	0x24000000
 8002ab8:	053e2d63 	.word	0x053e2d63
 8002abc:	c7520000 	.word	0xc7520000
 8002ac0:	cfb80000 	.word	0xcfb80000

08002ac4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a79      	ldr	r2, [pc, #484]	; (8002cb8 <ADC_ConfigureBoostMode+0x1f4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d004      	beq.n	8002ae0 <ADC_ConfigureBoostMode+0x1c>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a78      	ldr	r2, [pc, #480]	; (8002cbc <ADC_ConfigureBoostMode+0x1f8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d109      	bne.n	8002af4 <ADC_ConfigureBoostMode+0x30>
 8002ae0:	4b77      	ldr	r3, [pc, #476]	; (8002cc0 <ADC_ConfigureBoostMode+0x1fc>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf14      	ite	ne
 8002aec:	2301      	movne	r3, #1
 8002aee:	2300      	moveq	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	e008      	b.n	8002b06 <ADC_ConfigureBoostMode+0x42>
 8002af4:	4b73      	ldr	r3, [pc, #460]	; (8002cc4 <ADC_ConfigureBoostMode+0x200>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	bf14      	ite	ne
 8002b00:	2301      	movne	r3, #1
 8002b02:	2300      	moveq	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d01c      	beq.n	8002b44 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002b0a:	f001 fdc1 	bl	8004690 <HAL_RCC_GetHCLKFreq>
 8002b0e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b18:	d010      	beq.n	8002b3c <ADC_ConfigureBoostMode+0x78>
 8002b1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b1e:	d871      	bhi.n	8002c04 <ADC_ConfigureBoostMode+0x140>
 8002b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b24:	d002      	beq.n	8002b2c <ADC_ConfigureBoostMode+0x68>
 8002b26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b2a:	d16b      	bne.n	8002c04 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	0c1b      	lsrs	r3, r3, #16
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b38:	60fb      	str	r3, [r7, #12]
        break;
 8002b3a:	e066      	b.n	8002c0a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	089b      	lsrs	r3, r3, #2
 8002b40:	60fb      	str	r3, [r7, #12]
        break;
 8002b42:	e062      	b.n	8002c0a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002b44:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002b48:	f002 fd3e 	bl	80055c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002b4c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002b56:	d051      	beq.n	8002bfc <ADC_ConfigureBoostMode+0x138>
 8002b58:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002b5c:	d854      	bhi.n	8002c08 <ADC_ConfigureBoostMode+0x144>
 8002b5e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002b62:	d047      	beq.n	8002bf4 <ADC_ConfigureBoostMode+0x130>
 8002b64:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002b68:	d84e      	bhi.n	8002c08 <ADC_ConfigureBoostMode+0x144>
 8002b6a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002b6e:	d03d      	beq.n	8002bec <ADC_ConfigureBoostMode+0x128>
 8002b70:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002b74:	d848      	bhi.n	8002c08 <ADC_ConfigureBoostMode+0x144>
 8002b76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b7a:	d033      	beq.n	8002be4 <ADC_ConfigureBoostMode+0x120>
 8002b7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b80:	d842      	bhi.n	8002c08 <ADC_ConfigureBoostMode+0x144>
 8002b82:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002b86:	d029      	beq.n	8002bdc <ADC_ConfigureBoostMode+0x118>
 8002b88:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002b8c:	d83c      	bhi.n	8002c08 <ADC_ConfigureBoostMode+0x144>
 8002b8e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b92:	d01a      	beq.n	8002bca <ADC_ConfigureBoostMode+0x106>
 8002b94:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b98:	d836      	bhi.n	8002c08 <ADC_ConfigureBoostMode+0x144>
 8002b9a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002b9e:	d014      	beq.n	8002bca <ADC_ConfigureBoostMode+0x106>
 8002ba0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002ba4:	d830      	bhi.n	8002c08 <ADC_ConfigureBoostMode+0x144>
 8002ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002baa:	d00e      	beq.n	8002bca <ADC_ConfigureBoostMode+0x106>
 8002bac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bb0:	d82a      	bhi.n	8002c08 <ADC_ConfigureBoostMode+0x144>
 8002bb2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002bb6:	d008      	beq.n	8002bca <ADC_ConfigureBoostMode+0x106>
 8002bb8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002bbc:	d824      	bhi.n	8002c08 <ADC_ConfigureBoostMode+0x144>
 8002bbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bc2:	d002      	beq.n	8002bca <ADC_ConfigureBoostMode+0x106>
 8002bc4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002bc8:	d11e      	bne.n	8002c08 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	0c9b      	lsrs	r3, r3, #18
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd8:	60fb      	str	r3, [r7, #12]
        break;
 8002bda:	e016      	b.n	8002c0a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	091b      	lsrs	r3, r3, #4
 8002be0:	60fb      	str	r3, [r7, #12]
        break;
 8002be2:	e012      	b.n	8002c0a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	60fb      	str	r3, [r7, #12]
        break;
 8002bea:	e00e      	b.n	8002c0a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	099b      	lsrs	r3, r3, #6
 8002bf0:	60fb      	str	r3, [r7, #12]
        break;
 8002bf2:	e00a      	b.n	8002c0a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	09db      	lsrs	r3, r3, #7
 8002bf8:	60fb      	str	r3, [r7, #12]
        break;
 8002bfa:	e006      	b.n	8002c0a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	0a1b      	lsrs	r3, r3, #8
 8002c00:	60fb      	str	r3, [r7, #12]
        break;
 8002c02:	e002      	b.n	8002c0a <ADC_ConfigureBoostMode+0x146>
        break;
 8002c04:	bf00      	nop
 8002c06:	e000      	b.n	8002c0a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8002c08:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002c0a:	f7ff f8bd 	bl	8001d88 <HAL_GetREVID>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d815      	bhi.n	8002c44 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4a2b      	ldr	r2, [pc, #172]	; (8002cc8 <ADC_ConfigureBoostMode+0x204>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d908      	bls.n	8002c32 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c2e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002c30:	e03e      	b.n	8002cb0 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c40:	609a      	str	r2, [r3, #8]
}
 8002c42:	e035      	b.n	8002cb0 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	085b      	lsrs	r3, r3, #1
 8002c48:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	4a1f      	ldr	r2, [pc, #124]	; (8002ccc <ADC_ConfigureBoostMode+0x208>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d808      	bhi.n	8002c64 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c60:	609a      	str	r2, [r3, #8]
}
 8002c62:	e025      	b.n	8002cb0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4a1a      	ldr	r2, [pc, #104]	; (8002cd0 <ADC_ConfigureBoostMode+0x20c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d80a      	bhi.n	8002c82 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c7e:	609a      	str	r2, [r3, #8]
}
 8002c80:	e016      	b.n	8002cb0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4a13      	ldr	r2, [pc, #76]	; (8002cd4 <ADC_ConfigureBoostMode+0x210>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d80a      	bhi.n	8002ca0 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c9c:	609a      	str	r2, [r3, #8]
}
 8002c9e:	e007      	b.n	8002cb0 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002cae:	609a      	str	r2, [r3, #8]
}
 8002cb0:	bf00      	nop
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40022000 	.word	0x40022000
 8002cbc:	40022100 	.word	0x40022100
 8002cc0:	40022300 	.word	0x40022300
 8002cc4:	58026300 	.word	0x58026300
 8002cc8:	01312d00 	.word	0x01312d00
 8002ccc:	005f5e10 	.word	0x005f5e10
 8002cd0:	00bebc20 	.word	0x00bebc20
 8002cd4:	017d7840 	.word	0x017d7840

08002cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <__NVIC_SetPriorityGrouping+0x40>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d00:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <__NVIC_SetPriorityGrouping+0x44>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d06:	4a04      	ldr	r2, [pc, #16]	; (8002d18 <__NVIC_SetPriorityGrouping+0x40>)
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	60d3      	str	r3, [r2, #12]
}
 8002d0c:	bf00      	nop
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	e000ed00 	.word	0xe000ed00
 8002d1c:	05fa0000 	.word	0x05fa0000

08002d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d24:	4b04      	ldr	r3, [pc, #16]	; (8002d38 <__NVIC_GetPriorityGrouping+0x18>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	0a1b      	lsrs	r3, r3, #8
 8002d2a:	f003 0307 	and.w	r3, r3, #7
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	e000ed00 	.word	0xe000ed00

08002d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	6039      	str	r1, [r7, #0]
 8002d46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	db0a      	blt.n	8002d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	490c      	ldr	r1, [pc, #48]	; (8002d88 <__NVIC_SetPriority+0x4c>)
 8002d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d5a:	0112      	lsls	r2, r2, #4
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	440b      	add	r3, r1
 8002d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d64:	e00a      	b.n	8002d7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	4908      	ldr	r1, [pc, #32]	; (8002d8c <__NVIC_SetPriority+0x50>)
 8002d6c:	88fb      	ldrh	r3, [r7, #6]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	3b04      	subs	r3, #4
 8002d74:	0112      	lsls	r2, r2, #4
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	440b      	add	r3, r1
 8002d7a:	761a      	strb	r2, [r3, #24]
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	e000e100 	.word	0xe000e100
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b089      	sub	sp, #36	; 0x24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f1c3 0307 	rsb	r3, r3, #7
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	bf28      	it	cs
 8002dae:	2304      	movcs	r3, #4
 8002db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3304      	adds	r3, #4
 8002db6:	2b06      	cmp	r3, #6
 8002db8:	d902      	bls.n	8002dc0 <NVIC_EncodePriority+0x30>
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3b03      	subs	r3, #3
 8002dbe:	e000      	b.n	8002dc2 <NVIC_EncodePriority+0x32>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43da      	mvns	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	401a      	ands	r2, r3
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	fa01 f303 	lsl.w	r3, r1, r3
 8002de2:	43d9      	mvns	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de8:	4313      	orrs	r3, r2
         );
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3724      	adds	r7, #36	; 0x24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e08:	d301      	bcc.n	8002e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e00f      	b.n	8002e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e0e:	4a0a      	ldr	r2, [pc, #40]	; (8002e38 <SysTick_Config+0x40>)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e16:	210f      	movs	r1, #15
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295
 8002e1c:	f7ff ff8e 	bl	8002d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e20:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <SysTick_Config+0x40>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e26:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <SysTick_Config+0x40>)
 8002e28:	2207      	movs	r2, #7
 8002e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	e000e010 	.word	0xe000e010

08002e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff ff47 	bl	8002cd8 <__NVIC_SetPriorityGrouping>
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b086      	sub	sp, #24
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	4603      	mov	r3, r0
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e60:	f7ff ff5e 	bl	8002d20 <__NVIC_GetPriorityGrouping>
 8002e64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	68b9      	ldr	r1, [r7, #8]
 8002e6a:	6978      	ldr	r0, [r7, #20]
 8002e6c:	f7ff ff90 	bl	8002d90 <NVIC_EncodePriority>
 8002e70:	4602      	mov	r2, r0
 8002e72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e76:	4611      	mov	r1, r2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff ff5f 	bl	8002d3c <__NVIC_SetPriority>
}
 8002e7e:	bf00      	nop
 8002e80:	3718      	adds	r7, #24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7ff ffb2 	bl	8002df8 <SysTick_Config>
 8002e94:	4603      	mov	r3, r0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b089      	sub	sp, #36	; 0x24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002eae:	4b89      	ldr	r3, [pc, #548]	; (80030d4 <HAL_GPIO_Init+0x234>)
 8002eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002eb2:	e194      	b.n	80031de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	2101      	movs	r1, #1
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 8186 	beq.w	80031d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d005      	beq.n	8002ee4 <HAL_GPIO_Init+0x44>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d130      	bne.n	8002f46 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	2203      	movs	r2, #3
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	091b      	lsrs	r3, r3, #4
 8002f30:	f003 0201 	and.w	r2, r3, #1
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d017      	beq.n	8002f82 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d123      	bne.n	8002fd6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	08da      	lsrs	r2, r3, #3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3208      	adds	r2, #8
 8002f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	220f      	movs	r2, #15
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43db      	mvns	r3, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	691a      	ldr	r2, [r3, #16]
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	08da      	lsrs	r2, r3, #3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3208      	adds	r2, #8
 8002fd0:	69b9      	ldr	r1, [r7, #24]
 8002fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4013      	ands	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 0203 	and.w	r2, r3, #3
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 80e0 	beq.w	80031d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003018:	4b2f      	ldr	r3, [pc, #188]	; (80030d8 <HAL_GPIO_Init+0x238>)
 800301a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800301e:	4a2e      	ldr	r2, [pc, #184]	; (80030d8 <HAL_GPIO_Init+0x238>)
 8003020:	f043 0302 	orr.w	r3, r3, #2
 8003024:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003028:	4b2b      	ldr	r3, [pc, #172]	; (80030d8 <HAL_GPIO_Init+0x238>)
 800302a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003036:	4a29      	ldr	r2, [pc, #164]	; (80030dc <HAL_GPIO_Init+0x23c>)
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	089b      	lsrs	r3, r3, #2
 800303c:	3302      	adds	r3, #2
 800303e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	220f      	movs	r2, #15
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43db      	mvns	r3, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4013      	ands	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a20      	ldr	r2, [pc, #128]	; (80030e0 <HAL_GPIO_Init+0x240>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d052      	beq.n	8003108 <HAL_GPIO_Init+0x268>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a1f      	ldr	r2, [pc, #124]	; (80030e4 <HAL_GPIO_Init+0x244>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d031      	beq.n	80030ce <HAL_GPIO_Init+0x22e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a1e      	ldr	r2, [pc, #120]	; (80030e8 <HAL_GPIO_Init+0x248>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d02b      	beq.n	80030ca <HAL_GPIO_Init+0x22a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a1d      	ldr	r2, [pc, #116]	; (80030ec <HAL_GPIO_Init+0x24c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d025      	beq.n	80030c6 <HAL_GPIO_Init+0x226>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a1c      	ldr	r2, [pc, #112]	; (80030f0 <HAL_GPIO_Init+0x250>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d01f      	beq.n	80030c2 <HAL_GPIO_Init+0x222>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a1b      	ldr	r2, [pc, #108]	; (80030f4 <HAL_GPIO_Init+0x254>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d019      	beq.n	80030be <HAL_GPIO_Init+0x21e>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a1a      	ldr	r2, [pc, #104]	; (80030f8 <HAL_GPIO_Init+0x258>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d013      	beq.n	80030ba <HAL_GPIO_Init+0x21a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a19      	ldr	r2, [pc, #100]	; (80030fc <HAL_GPIO_Init+0x25c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00d      	beq.n	80030b6 <HAL_GPIO_Init+0x216>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a18      	ldr	r2, [pc, #96]	; (8003100 <HAL_GPIO_Init+0x260>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d007      	beq.n	80030b2 <HAL_GPIO_Init+0x212>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a17      	ldr	r2, [pc, #92]	; (8003104 <HAL_GPIO_Init+0x264>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d101      	bne.n	80030ae <HAL_GPIO_Init+0x20e>
 80030aa:	2309      	movs	r3, #9
 80030ac:	e02d      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030ae:	230a      	movs	r3, #10
 80030b0:	e02b      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030b2:	2308      	movs	r3, #8
 80030b4:	e029      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030b6:	2307      	movs	r3, #7
 80030b8:	e027      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030ba:	2306      	movs	r3, #6
 80030bc:	e025      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030be:	2305      	movs	r3, #5
 80030c0:	e023      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030c2:	2304      	movs	r3, #4
 80030c4:	e021      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030c6:	2303      	movs	r3, #3
 80030c8:	e01f      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030ca:	2302      	movs	r3, #2
 80030cc:	e01d      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e01b      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030d2:	bf00      	nop
 80030d4:	58000080 	.word	0x58000080
 80030d8:	58024400 	.word	0x58024400
 80030dc:	58000400 	.word	0x58000400
 80030e0:	58020000 	.word	0x58020000
 80030e4:	58020400 	.word	0x58020400
 80030e8:	58020800 	.word	0x58020800
 80030ec:	58020c00 	.word	0x58020c00
 80030f0:	58021000 	.word	0x58021000
 80030f4:	58021400 	.word	0x58021400
 80030f8:	58021800 	.word	0x58021800
 80030fc:	58021c00 	.word	0x58021c00
 8003100:	58022000 	.word	0x58022000
 8003104:	58022400 	.word	0x58022400
 8003108:	2300      	movs	r3, #0
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	f002 0203 	and.w	r2, r2, #3
 8003110:	0092      	lsls	r2, r2, #2
 8003112:	4093      	lsls	r3, r2
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4313      	orrs	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800311a:	4938      	ldr	r1, [pc, #224]	; (80031fc <HAL_GPIO_Init+0x35c>)
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	089b      	lsrs	r3, r3, #2
 8003120:	3302      	adds	r3, #2
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	43db      	mvns	r3, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4013      	ands	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800314e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800317c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	3301      	adds	r3, #1
 80031dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	fa22 f303 	lsr.w	r3, r2, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f47f ae63 	bne.w	8002eb4 <HAL_GPIO_Init+0x14>
  }
}
 80031ee:	bf00      	nop
 80031f0:	bf00      	nop
 80031f2:	3724      	adds	r7, #36	; 0x24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	58000400 	.word	0x58000400

08003200 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	887b      	ldrh	r3, [r7, #2]
 8003212:	4013      	ands	r3, r2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d002      	beq.n	800321e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003218:	2301      	movs	r3, #1
 800321a:	73fb      	strb	r3, [r7, #15]
 800321c:	e001      	b.n	8003222 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800321e:	2300      	movs	r3, #0
 8003220:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003222:	7bfb      	ldrb	r3, [r7, #15]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	807b      	strh	r3, [r7, #2]
 800323c:	4613      	mov	r3, r2
 800323e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003240:	787b      	ldrb	r3, [r7, #1]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003246:	887a      	ldrh	r2, [r7, #2]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800324c:	e003      	b.n	8003256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800324e:	887b      	ldrh	r3, [r7, #2]
 8003250:	041a      	lsls	r2, r3, #16
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	619a      	str	r2, [r3, #24]
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e07f      	b.n	8003376 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d106      	bne.n	8003290 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7fe fa34 	bl	80016f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2224      	movs	r2, #36	; 0x24
 8003294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0201 	bic.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d107      	bne.n	80032de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	e006      	b.n	80032ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80032ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d104      	bne.n	80032fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6859      	ldr	r1, [r3, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	4b1d      	ldr	r3, [pc, #116]	; (8003380 <HAL_I2C_Init+0x11c>)
 800330a:	430b      	orrs	r3, r1
 800330c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800331c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691a      	ldr	r2, [r3, #16]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	69d9      	ldr	r1, [r3, #28]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1a      	ldr	r2, [r3, #32]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2220      	movs	r2, #32
 8003362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	02008000 	.word	0x02008000

08003384 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b20      	cmp	r3, #32
 8003398:	d138      	bne.n	800340c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033a4:	2302      	movs	r3, #2
 80033a6:	e032      	b.n	800340e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2224      	movs	r2, #36	; 0x24
 80033b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0201 	bic.w	r2, r2, #1
 80033c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6819      	ldr	r1, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0201 	orr.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003408:	2300      	movs	r3, #0
 800340a:	e000      	b.n	800340e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800340c:	2302      	movs	r3, #2
  }
}
 800340e:	4618      	mov	r0, r3
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800341a:	b480      	push	{r7}
 800341c:	b085      	sub	sp, #20
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b20      	cmp	r3, #32
 800342e:	d139      	bne.n	80034a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003436:	2b01      	cmp	r3, #1
 8003438:	d101      	bne.n	800343e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800343a:	2302      	movs	r3, #2
 800343c:	e033      	b.n	80034a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2224      	movs	r2, #36	; 0x24
 800344a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0201 	bic.w	r2, r2, #1
 800345c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800346c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	021b      	lsls	r3, r3, #8
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	4313      	orrs	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0201 	orr.w	r2, r2, #1
 800348e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034a0:	2300      	movs	r3, #0
 80034a2:	e000      	b.n	80034a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034a4:	2302      	movs	r3, #2
  }
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034b4:	b08f      	sub	sp, #60	; 0x3c
 80034b6:	af0a      	add	r7, sp, #40	; 0x28
 80034b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e116      	b.n	80036f2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7fe fa10 	bl	8001904 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2203      	movs	r2, #3
 80034e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d102      	bne.n	80034fe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f004 ff28 	bl	8008358 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	687e      	ldr	r6, [r7, #4]
 8003510:	466d      	mov	r5, sp
 8003512:	f106 0410 	add.w	r4, r6, #16
 8003516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800351a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800351c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800351e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003522:	e885 0003 	stmia.w	r5, {r0, r1}
 8003526:	1d33      	adds	r3, r6, #4
 8003528:	cb0e      	ldmia	r3, {r1, r2, r3}
 800352a:	6838      	ldr	r0, [r7, #0]
 800352c:	f004 fea6 	bl	800827c <USB_CoreInit>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d005      	beq.n	8003542 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2202      	movs	r2, #2
 800353a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e0d7      	b.n	80036f2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2100      	movs	r1, #0
 8003548:	4618      	mov	r0, r3
 800354a:	f004 ff16 	bl	800837a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800354e:	2300      	movs	r3, #0
 8003550:	73fb      	strb	r3, [r7, #15]
 8003552:	e04a      	b.n	80035ea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003554:	7bfa      	ldrb	r2, [r7, #15]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	333d      	adds	r3, #61	; 0x3d
 8003564:	2201      	movs	r2, #1
 8003566:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003568:	7bfa      	ldrb	r2, [r7, #15]
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	4613      	mov	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	1a9b      	subs	r3, r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	333c      	adds	r3, #60	; 0x3c
 8003578:	7bfa      	ldrb	r2, [r7, #15]
 800357a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800357c:	7bfa      	ldrb	r2, [r7, #15]
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	b298      	uxth	r0, r3
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	3342      	adds	r3, #66	; 0x42
 8003590:	4602      	mov	r2, r0
 8003592:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003594:	7bfa      	ldrb	r2, [r7, #15]
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	1a9b      	subs	r3, r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	333f      	adds	r3, #63	; 0x3f
 80035a4:	2200      	movs	r2, #0
 80035a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035a8:	7bfa      	ldrb	r2, [r7, #15]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	3344      	adds	r3, #68	; 0x44
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035bc:	7bfa      	ldrb	r2, [r7, #15]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	1a9b      	subs	r3, r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	3348      	adds	r3, #72	; 0x48
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035d0:	7bfa      	ldrb	r2, [r7, #15]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	3350      	adds	r3, #80	; 0x50
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	3301      	adds	r3, #1
 80035e8:	73fb      	strb	r3, [r7, #15]
 80035ea:	7bfa      	ldrb	r2, [r7, #15]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d3af      	bcc.n	8003554 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035f4:	2300      	movs	r3, #0
 80035f6:	73fb      	strb	r3, [r7, #15]
 80035f8:	e044      	b.n	8003684 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035fa:	7bfa      	ldrb	r2, [r7, #15]
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800360c:	2200      	movs	r2, #0
 800360e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003610:	7bfa      	ldrb	r2, [r7, #15]
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	1a9b      	subs	r3, r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003622:	7bfa      	ldrb	r2, [r7, #15]
 8003624:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003626:	7bfa      	ldrb	r2, [r7, #15]
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	1a9b      	subs	r3, r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003638:	2200      	movs	r2, #0
 800363a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800363c:	7bfa      	ldrb	r2, [r7, #15]
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	1a9b      	subs	r3, r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003652:	7bfa      	ldrb	r2, [r7, #15]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	1a9b      	subs	r3, r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003668:	7bfa      	ldrb	r2, [r7, #15]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	3301      	adds	r3, #1
 8003682:	73fb      	strb	r3, [r7, #15]
 8003684:	7bfa      	ldrb	r2, [r7, #15]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	429a      	cmp	r2, r3
 800368c:	d3b5      	bcc.n	80035fa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	687e      	ldr	r6, [r7, #4]
 8003696:	466d      	mov	r5, sp
 8003698:	f106 0410 	add.w	r4, r6, #16
 800369c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800369e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80036ac:	1d33      	adds	r3, r6, #4
 80036ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036b0:	6838      	ldr	r0, [r7, #0]
 80036b2:	f004 feaf 	bl	8008414 <USB_DevInit>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e014      	b.n	80036f2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d102      	bne.n	80036e6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f80b 	bl	80036fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f005 f869 	bl	80087c2 <USB_DevDisconnect>

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080036fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800372a:	4b05      	ldr	r3, [pc, #20]	; (8003740 <HAL_PCDEx_ActivateLPM+0x44>)
 800372c:	4313      	orrs	r3, r2
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	10000003 	.word	0x10000003

08003744 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800374c:	4b19      	ldr	r3, [pc, #100]	; (80037b4 <HAL_PWREx_ConfigSupply+0x70>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b04      	cmp	r3, #4
 8003756:	d00a      	beq.n	800376e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003758:	4b16      	ldr	r3, [pc, #88]	; (80037b4 <HAL_PWREx_ConfigSupply+0x70>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	429a      	cmp	r2, r3
 8003764:	d001      	beq.n	800376a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e01f      	b.n	80037aa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	e01d      	b.n	80037aa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800376e:	4b11      	ldr	r3, [pc, #68]	; (80037b4 <HAL_PWREx_ConfigSupply+0x70>)
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f023 0207 	bic.w	r2, r3, #7
 8003776:	490f      	ldr	r1, [pc, #60]	; (80037b4 <HAL_PWREx_ConfigSupply+0x70>)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4313      	orrs	r3, r2
 800377c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800377e:	f7fe fad3 	bl	8001d28 <HAL_GetTick>
 8003782:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003784:	e009      	b.n	800379a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003786:	f7fe facf 	bl	8001d28 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003794:	d901      	bls.n	800379a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e007      	b.n	80037aa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800379a:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <HAL_PWREx_ConfigSupply+0x70>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037a6:	d1ee      	bne.n	8003786 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	58024800 	.word	0x58024800

080037b8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80037bc:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	4a04      	ldr	r2, [pc, #16]	; (80037d4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80037c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037c6:	60d3      	str	r3, [r2, #12]
}
 80037c8:	bf00      	nop
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	58024800 	.word	0x58024800

080037d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08c      	sub	sp, #48	; 0x30
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d102      	bne.n	80037ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	f000 bc1c 	b.w	8004024 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 8087 	beq.w	8003908 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037fa:	4b9e      	ldr	r3, [pc, #632]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003802:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003804:	4b9b      	ldr	r3, [pc, #620]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 8003806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003808:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800380a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380c:	2b10      	cmp	r3, #16
 800380e:	d007      	beq.n	8003820 <HAL_RCC_OscConfig+0x48>
 8003810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003812:	2b18      	cmp	r3, #24
 8003814:	d110      	bne.n	8003838 <HAL_RCC_OscConfig+0x60>
 8003816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003818:	f003 0303 	and.w	r3, r3, #3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d10b      	bne.n	8003838 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003820:	4b94      	ldr	r3, [pc, #592]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d06c      	beq.n	8003906 <HAL_RCC_OscConfig+0x12e>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d168      	bne.n	8003906 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e3f5      	b.n	8004024 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003840:	d106      	bne.n	8003850 <HAL_RCC_OscConfig+0x78>
 8003842:	4b8c      	ldr	r3, [pc, #560]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a8b      	ldr	r2, [pc, #556]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 8003848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	e02e      	b.n	80038ae <HAL_RCC_OscConfig+0xd6>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10c      	bne.n	8003872 <HAL_RCC_OscConfig+0x9a>
 8003858:	4b86      	ldr	r3, [pc, #536]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a85      	ldr	r2, [pc, #532]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 800385e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003862:	6013      	str	r3, [r2, #0]
 8003864:	4b83      	ldr	r3, [pc, #524]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a82      	ldr	r2, [pc, #520]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 800386a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	e01d      	b.n	80038ae <HAL_RCC_OscConfig+0xd6>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800387a:	d10c      	bne.n	8003896 <HAL_RCC_OscConfig+0xbe>
 800387c:	4b7d      	ldr	r3, [pc, #500]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a7c      	ldr	r2, [pc, #496]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 8003882:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	4b7a      	ldr	r3, [pc, #488]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a79      	ldr	r2, [pc, #484]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 800388e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	e00b      	b.n	80038ae <HAL_RCC_OscConfig+0xd6>
 8003896:	4b77      	ldr	r3, [pc, #476]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a76      	ldr	r2, [pc, #472]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 800389c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	4b74      	ldr	r3, [pc, #464]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a73      	ldr	r2, [pc, #460]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 80038a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d013      	beq.n	80038de <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b6:	f7fe fa37 	bl	8001d28 <HAL_GetTick>
 80038ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038be:	f7fe fa33 	bl	8001d28 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b64      	cmp	r3, #100	; 0x64
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e3a9      	b.n	8004024 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038d0:	4b68      	ldr	r3, [pc, #416]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0f0      	beq.n	80038be <HAL_RCC_OscConfig+0xe6>
 80038dc:	e014      	b.n	8003908 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038de:	f7fe fa23 	bl	8001d28 <HAL_GetTick>
 80038e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038e6:	f7fe fa1f 	bl	8001d28 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b64      	cmp	r3, #100	; 0x64
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e395      	b.n	8004024 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038f8:	4b5e      	ldr	r3, [pc, #376]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1f0      	bne.n	80038e6 <HAL_RCC_OscConfig+0x10e>
 8003904:	e000      	b.n	8003908 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003906:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 80ca 	beq.w	8003aaa <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003916:	4b57      	ldr	r3, [pc, #348]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800391e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003920:	4b54      	ldr	r3, [pc, #336]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d007      	beq.n	800393c <HAL_RCC_OscConfig+0x164>
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	2b18      	cmp	r3, #24
 8003930:	d156      	bne.n	80039e0 <HAL_RCC_OscConfig+0x208>
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d151      	bne.n	80039e0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800393c:	4b4d      	ldr	r3, [pc, #308]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <HAL_RCC_OscConfig+0x17c>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e367      	b.n	8004024 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003954:	4b47      	ldr	r3, [pc, #284]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f023 0219 	bic.w	r2, r3, #25
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	4944      	ldr	r1, [pc, #272]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 8003962:	4313      	orrs	r3, r2
 8003964:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003966:	f7fe f9df 	bl	8001d28 <HAL_GetTick>
 800396a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800396e:	f7fe f9db 	bl	8001d28 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e351      	b.n	8004024 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003980:	4b3c      	ldr	r3, [pc, #240]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0f0      	beq.n	800396e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800398c:	f7fe f9fc 	bl	8001d88 <HAL_GetREVID>
 8003990:	4603      	mov	r3, r0
 8003992:	f241 0203 	movw	r2, #4099	; 0x1003
 8003996:	4293      	cmp	r3, r2
 8003998:	d817      	bhi.n	80039ca <HAL_RCC_OscConfig+0x1f2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	2b40      	cmp	r3, #64	; 0x40
 80039a0:	d108      	bne.n	80039b4 <HAL_RCC_OscConfig+0x1dc>
 80039a2:	4b34      	ldr	r3, [pc, #208]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80039aa:	4a32      	ldr	r2, [pc, #200]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 80039ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039b2:	e07a      	b.n	8003aaa <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b4:	4b2f      	ldr	r3, [pc, #188]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	031b      	lsls	r3, r3, #12
 80039c2:	492c      	ldr	r1, [pc, #176]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039c8:	e06f      	b.n	8003aaa <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ca:	4b2a      	ldr	r3, [pc, #168]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	061b      	lsls	r3, r3, #24
 80039d8:	4926      	ldr	r1, [pc, #152]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039de:	e064      	b.n	8003aaa <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d047      	beq.n	8003a78 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80039e8:	4b22      	ldr	r3, [pc, #136]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f023 0219 	bic.w	r2, r3, #25
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	491f      	ldr	r1, [pc, #124]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fa:	f7fe f995 	bl	8001d28 <HAL_GetTick>
 80039fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a02:	f7fe f991 	bl	8001d28 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e307      	b.n	8004024 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a14:	4b17      	ldr	r3, [pc, #92]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0f0      	beq.n	8003a02 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a20:	f7fe f9b2 	bl	8001d88 <HAL_GetREVID>
 8003a24:	4603      	mov	r3, r0
 8003a26:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d817      	bhi.n	8003a5e <HAL_RCC_OscConfig+0x286>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	2b40      	cmp	r3, #64	; 0x40
 8003a34:	d108      	bne.n	8003a48 <HAL_RCC_OscConfig+0x270>
 8003a36:	4b0f      	ldr	r3, [pc, #60]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003a3e:	4a0d      	ldr	r2, [pc, #52]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 8003a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a44:	6053      	str	r3, [r2, #4]
 8003a46:	e030      	b.n	8003aaa <HAL_RCC_OscConfig+0x2d2>
 8003a48:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	031b      	lsls	r3, r3, #12
 8003a56:	4907      	ldr	r1, [pc, #28]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	604b      	str	r3, [r1, #4]
 8003a5c:	e025      	b.n	8003aaa <HAL_RCC_OscConfig+0x2d2>
 8003a5e:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	061b      	lsls	r3, r3, #24
 8003a6c:	4901      	ldr	r1, [pc, #4]	; (8003a74 <HAL_RCC_OscConfig+0x29c>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	604b      	str	r3, [r1, #4]
 8003a72:	e01a      	b.n	8003aaa <HAL_RCC_OscConfig+0x2d2>
 8003a74:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a78:	4b9e      	ldr	r3, [pc, #632]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a9d      	ldr	r2, [pc, #628]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003a7e:	f023 0301 	bic.w	r3, r3, #1
 8003a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a84:	f7fe f950 	bl	8001d28 <HAL_GetTick>
 8003a88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a8c:	f7fe f94c 	bl	8001d28 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e2c2      	b.n	8004024 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a9e:	4b95      	ldr	r3, [pc, #596]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0310 	and.w	r3, r3, #16
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 80a9 	beq.w	8003c0a <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ab8:	4b8e      	ldr	r3, [pc, #568]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ac0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ac2:	4b8c      	ldr	r3, [pc, #560]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d007      	beq.n	8003ade <HAL_RCC_OscConfig+0x306>
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	2b18      	cmp	r3, #24
 8003ad2:	d13a      	bne.n	8003b4a <HAL_RCC_OscConfig+0x372>
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d135      	bne.n	8003b4a <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ade:	4b85      	ldr	r3, [pc, #532]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d005      	beq.n	8003af6 <HAL_RCC_OscConfig+0x31e>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	2b80      	cmp	r3, #128	; 0x80
 8003af0:	d001      	beq.n	8003af6 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e296      	b.n	8004024 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003af6:	f7fe f947 	bl	8001d88 <HAL_GetREVID>
 8003afa:	4603      	mov	r3, r0
 8003afc:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d817      	bhi.n	8003b34 <HAL_RCC_OscConfig+0x35c>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	d108      	bne.n	8003b1e <HAL_RCC_OscConfig+0x346>
 8003b0c:	4b79      	ldr	r3, [pc, #484]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003b14:	4a77      	ldr	r2, [pc, #476]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003b16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b1a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b1c:	e075      	b.n	8003c0a <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b1e:	4b75      	ldr	r3, [pc, #468]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	069b      	lsls	r3, r3, #26
 8003b2c:	4971      	ldr	r1, [pc, #452]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b32:	e06a      	b.n	8003c0a <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b34:	4b6f      	ldr	r3, [pc, #444]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	061b      	lsls	r3, r3, #24
 8003b42:	496c      	ldr	r1, [pc, #432]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b48:	e05f      	b.n	8003c0a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d042      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003b52:	4b68      	ldr	r3, [pc, #416]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a67      	ldr	r2, [pc, #412]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5e:	f7fe f8e3 	bl	8001d28 <HAL_GetTick>
 8003b62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b64:	e008      	b.n	8003b78 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003b66:	f7fe f8df 	bl	8001d28 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e255      	b.n	8004024 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b78:	4b5e      	ldr	r3, [pc, #376]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0f0      	beq.n	8003b66 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b84:	f7fe f900 	bl	8001d88 <HAL_GetREVID>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d817      	bhi.n	8003bc2 <HAL_RCC_OscConfig+0x3ea>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	2b20      	cmp	r3, #32
 8003b98:	d108      	bne.n	8003bac <HAL_RCC_OscConfig+0x3d4>
 8003b9a:	4b56      	ldr	r3, [pc, #344]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003ba2:	4a54      	ldr	r2, [pc, #336]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003ba4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ba8:	6053      	str	r3, [r2, #4]
 8003baa:	e02e      	b.n	8003c0a <HAL_RCC_OscConfig+0x432>
 8003bac:	4b51      	ldr	r3, [pc, #324]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	069b      	lsls	r3, r3, #26
 8003bba:	494e      	ldr	r1, [pc, #312]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	604b      	str	r3, [r1, #4]
 8003bc0:	e023      	b.n	8003c0a <HAL_RCC_OscConfig+0x432>
 8003bc2:	4b4c      	ldr	r3, [pc, #304]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	061b      	lsls	r3, r3, #24
 8003bd0:	4948      	ldr	r1, [pc, #288]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60cb      	str	r3, [r1, #12]
 8003bd6:	e018      	b.n	8003c0a <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003bd8:	4b46      	ldr	r3, [pc, #280]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a45      	ldr	r2, [pc, #276]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003bde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be4:	f7fe f8a0 	bl	8001d28 <HAL_GetTick>
 8003be8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003bec:	f7fe f89c 	bl	8001d28 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e212      	b.n	8004024 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003bfe:	4b3d      	ldr	r3, [pc, #244]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d036      	beq.n	8003c84 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d019      	beq.n	8003c52 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c1e:	4b35      	ldr	r3, [pc, #212]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c22:	4a34      	ldr	r2, [pc, #208]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003c24:	f043 0301 	orr.w	r3, r3, #1
 8003c28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2a:	f7fe f87d 	bl	8001d28 <HAL_GetTick>
 8003c2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c32:	f7fe f879 	bl	8001d28 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e1ef      	b.n	8004024 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c44:	4b2b      	ldr	r3, [pc, #172]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0f0      	beq.n	8003c32 <HAL_RCC_OscConfig+0x45a>
 8003c50:	e018      	b.n	8003c84 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c52:	4b28      	ldr	r3, [pc, #160]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c56:	4a27      	ldr	r2, [pc, #156]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003c58:	f023 0301 	bic.w	r3, r3, #1
 8003c5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5e:	f7fe f863 	bl	8001d28 <HAL_GetTick>
 8003c62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c66:	f7fe f85f 	bl	8001d28 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e1d5      	b.n	8004024 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c78:	4b1e      	ldr	r3, [pc, #120]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1f0      	bne.n	8003c66 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d039      	beq.n	8003d04 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d019      	beq.n	8003ccc <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c98:	4b16      	ldr	r3, [pc, #88]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a15      	ldr	r2, [pc, #84]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003c9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ca2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ca4:	f7fe f840 	bl	8001d28 <HAL_GetTick>
 8003ca8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003cac:	f7fe f83c 	bl	8001d28 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e1b2      	b.n	8004024 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cbe:	4b0d      	ldr	r3, [pc, #52]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f0      	beq.n	8003cac <HAL_RCC_OscConfig+0x4d4>
 8003cca:	e01b      	b.n	8003d04 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ccc:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a08      	ldr	r2, [pc, #32]	; (8003cf4 <HAL_RCC_OscConfig+0x51c>)
 8003cd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cd6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003cd8:	f7fe f826 	bl	8001d28 <HAL_GetTick>
 8003cdc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003cde:	e00b      	b.n	8003cf8 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003ce0:	f7fe f822 	bl	8001d28 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d904      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e198      	b.n	8004024 <HAL_RCC_OscConfig+0x84c>
 8003cf2:	bf00      	nop
 8003cf4:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003cf8:	4ba3      	ldr	r3, [pc, #652]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1ed      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 8081 	beq.w	8003e14 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d12:	4b9e      	ldr	r3, [pc, #632]	; (8003f8c <HAL_RCC_OscConfig+0x7b4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a9d      	ldr	r2, [pc, #628]	; (8003f8c <HAL_RCC_OscConfig+0x7b4>)
 8003d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d1e:	f7fe f803 	bl	8001d28 <HAL_GetTick>
 8003d22:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d26:	f7fd ffff 	bl	8001d28 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b64      	cmp	r3, #100	; 0x64
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e175      	b.n	8004024 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d38:	4b94      	ldr	r3, [pc, #592]	; (8003f8c <HAL_RCC_OscConfig+0x7b4>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0f0      	beq.n	8003d26 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d106      	bne.n	8003d5a <HAL_RCC_OscConfig+0x582>
 8003d4c:	4b8e      	ldr	r3, [pc, #568]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d50:	4a8d      	ldr	r2, [pc, #564]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003d52:	f043 0301 	orr.w	r3, r3, #1
 8003d56:	6713      	str	r3, [r2, #112]	; 0x70
 8003d58:	e02d      	b.n	8003db6 <HAL_RCC_OscConfig+0x5de>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10c      	bne.n	8003d7c <HAL_RCC_OscConfig+0x5a4>
 8003d62:	4b89      	ldr	r3, [pc, #548]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d66:	4a88      	ldr	r2, [pc, #544]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003d68:	f023 0301 	bic.w	r3, r3, #1
 8003d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d6e:	4b86      	ldr	r3, [pc, #536]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d72:	4a85      	ldr	r2, [pc, #532]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003d74:	f023 0304 	bic.w	r3, r3, #4
 8003d78:	6713      	str	r3, [r2, #112]	; 0x70
 8003d7a:	e01c      	b.n	8003db6 <HAL_RCC_OscConfig+0x5de>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	2b05      	cmp	r3, #5
 8003d82:	d10c      	bne.n	8003d9e <HAL_RCC_OscConfig+0x5c6>
 8003d84:	4b80      	ldr	r3, [pc, #512]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d88:	4a7f      	ldr	r2, [pc, #508]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003d8a:	f043 0304 	orr.w	r3, r3, #4
 8003d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d90:	4b7d      	ldr	r3, [pc, #500]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d94:	4a7c      	ldr	r2, [pc, #496]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d9c:	e00b      	b.n	8003db6 <HAL_RCC_OscConfig+0x5de>
 8003d9e:	4b7a      	ldr	r3, [pc, #488]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da2:	4a79      	ldr	r2, [pc, #484]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003da4:	f023 0301 	bic.w	r3, r3, #1
 8003da8:	6713      	str	r3, [r2, #112]	; 0x70
 8003daa:	4b77      	ldr	r3, [pc, #476]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dae:	4a76      	ldr	r2, [pc, #472]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003db0:	f023 0304 	bic.w	r3, r3, #4
 8003db4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d015      	beq.n	8003dea <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dbe:	f7fd ffb3 	bl	8001d28 <HAL_GetTick>
 8003dc2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dc4:	e00a      	b.n	8003ddc <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dc6:	f7fd ffaf 	bl	8001d28 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e123      	b.n	8004024 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ddc:	4b6a      	ldr	r3, [pc, #424]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0ee      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x5ee>
 8003de8:	e014      	b.n	8003e14 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dea:	f7fd ff9d 	bl	8001d28 <HAL_GetTick>
 8003dee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003df0:	e00a      	b.n	8003e08 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df2:	f7fd ff99 	bl	8001d28 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e10d      	b.n	8004024 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e08:	4b5f      	ldr	r3, [pc, #380]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1ee      	bne.n	8003df2 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 8102 	beq.w	8004022 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e1e:	4b5a      	ldr	r3, [pc, #360]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e26:	2b18      	cmp	r3, #24
 8003e28:	f000 80bd 	beq.w	8003fa6 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	f040 8095 	bne.w	8003f60 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e36:	4b54      	ldr	r3, [pc, #336]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a53      	ldr	r2, [pc, #332]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003e3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e42:	f7fd ff71 	bl	8001d28 <HAL_GetTick>
 8003e46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e4a:	f7fd ff6d 	bl	8001d28 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e0e3      	b.n	8004024 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e5c:	4b4a      	ldr	r3, [pc, #296]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1f0      	bne.n	8003e4a <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e68:	4b47      	ldr	r3, [pc, #284]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003e6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e6c:	4b48      	ldr	r3, [pc, #288]	; (8003f90 <HAL_RCC_OscConfig+0x7b8>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e78:	0112      	lsls	r2, r2, #4
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	4942      	ldr	r1, [pc, #264]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	628b      	str	r3, [r1, #40]	; 0x28
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	3b01      	subs	r3, #1
 8003e88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e90:	3b01      	subs	r3, #1
 8003e92:	025b      	lsls	r3, r3, #9
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	431a      	orrs	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	041b      	lsls	r3, r3, #16
 8003ea0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	061b      	lsls	r3, r3, #24
 8003eae:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003eb2:	4935      	ldr	r1, [pc, #212]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003eb8:	4b33      	ldr	r3, [pc, #204]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	4a32      	ldr	r2, [pc, #200]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003ebe:	f023 0301 	bic.w	r3, r3, #1
 8003ec2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ec4:	4b30      	ldr	r3, [pc, #192]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ec8:	4b32      	ldr	r3, [pc, #200]	; (8003f94 <HAL_RCC_OscConfig+0x7bc>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ed0:	00d2      	lsls	r2, r2, #3
 8003ed2:	492d      	ldr	r1, [pc, #180]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003ed8:	4b2b      	ldr	r3, [pc, #172]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	f023 020c 	bic.w	r2, r3, #12
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	4928      	ldr	r1, [pc, #160]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003eea:	4b27      	ldr	r3, [pc, #156]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eee:	f023 0202 	bic.w	r2, r3, #2
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef6:	4924      	ldr	r1, [pc, #144]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003efc:	4b22      	ldr	r3, [pc, #136]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	4a21      	ldr	r2, [pc, #132]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f08:	4b1f      	ldr	r3, [pc, #124]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	4a1e      	ldr	r2, [pc, #120]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f14:	4b1c      	ldr	r3, [pc, #112]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f18:	4a1b      	ldr	r2, [pc, #108]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003f1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003f20:	4b19      	ldr	r3, [pc, #100]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	4a18      	ldr	r2, [pc, #96]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f2c:	4b16      	ldr	r3, [pc, #88]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a15      	ldr	r2, [pc, #84]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003f32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f38:	f7fd fef6 	bl	8001d28 <HAL_GetTick>
 8003f3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f40:	f7fd fef2 	bl	8001d28 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e068      	b.n	8004024 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f52:	4b0d      	ldr	r3, [pc, #52]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0f0      	beq.n	8003f40 <HAL_RCC_OscConfig+0x768>
 8003f5e:	e060      	b.n	8004022 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f60:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a08      	ldr	r2, [pc, #32]	; (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003f66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6c:	f7fd fedc 	bl	8001d28 <HAL_GetTick>
 8003f70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f72:	e011      	b.n	8003f98 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f74:	f7fd fed8 	bl	8001d28 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d90a      	bls.n	8003f98 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e04e      	b.n	8004024 <HAL_RCC_OscConfig+0x84c>
 8003f86:	bf00      	nop
 8003f88:	58024400 	.word	0x58024400
 8003f8c:	58024800 	.word	0x58024800
 8003f90:	fffffc0c 	.word	0xfffffc0c
 8003f94:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f98:	4b24      	ldr	r3, [pc, #144]	; (800402c <HAL_RCC_OscConfig+0x854>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1e7      	bne.n	8003f74 <HAL_RCC_OscConfig+0x79c>
 8003fa4:	e03d      	b.n	8004022 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003fa6:	4b21      	ldr	r3, [pc, #132]	; (800402c <HAL_RCC_OscConfig+0x854>)
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003faa:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003fac:	4b1f      	ldr	r3, [pc, #124]	; (800402c <HAL_RCC_OscConfig+0x854>)
 8003fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d031      	beq.n	800401e <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f003 0203 	and.w	r2, r3, #3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d12a      	bne.n	800401e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	091b      	lsrs	r3, r3, #4
 8003fcc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d122      	bne.n	800401e <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d11a      	bne.n	800401e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	0a5b      	lsrs	r3, r3, #9
 8003fec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d111      	bne.n	800401e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	0c1b      	lsrs	r3, r3, #16
 8003ffe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004008:	429a      	cmp	r2, r3
 800400a:	d108      	bne.n	800401e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	0e1b      	lsrs	r3, r3, #24
 8004010:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004018:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800401a:	429a      	cmp	r2, r3
 800401c:	d001      	beq.n	8004022 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3730      	adds	r7, #48	; 0x30
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	58024400 	.word	0x58024400

08004030 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e19c      	b.n	800437e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004044:	4b8a      	ldr	r3, [pc, #552]	; (8004270 <HAL_RCC_ClockConfig+0x240>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 030f 	and.w	r3, r3, #15
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d910      	bls.n	8004074 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004052:	4b87      	ldr	r3, [pc, #540]	; (8004270 <HAL_RCC_ClockConfig+0x240>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f023 020f 	bic.w	r2, r3, #15
 800405a:	4985      	ldr	r1, [pc, #532]	; (8004270 <HAL_RCC_ClockConfig+0x240>)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	4313      	orrs	r3, r2
 8004060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004062:	4b83      	ldr	r3, [pc, #524]	; (8004270 <HAL_RCC_ClockConfig+0x240>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	429a      	cmp	r2, r3
 800406e:	d001      	beq.n	8004074 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e184      	b.n	800437e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b00      	cmp	r3, #0
 800407e:	d010      	beq.n	80040a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691a      	ldr	r2, [r3, #16]
 8004084:	4b7b      	ldr	r3, [pc, #492]	; (8004274 <HAL_RCC_ClockConfig+0x244>)
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800408c:	429a      	cmp	r2, r3
 800408e:	d908      	bls.n	80040a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004090:	4b78      	ldr	r3, [pc, #480]	; (8004274 <HAL_RCC_ClockConfig+0x244>)
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	4975      	ldr	r1, [pc, #468]	; (8004274 <HAL_RCC_ClockConfig+0x244>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d010      	beq.n	80040d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695a      	ldr	r2, [r3, #20]
 80040b2:	4b70      	ldr	r3, [pc, #448]	; (8004274 <HAL_RCC_ClockConfig+0x244>)
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d908      	bls.n	80040d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040be:	4b6d      	ldr	r3, [pc, #436]	; (8004274 <HAL_RCC_ClockConfig+0x244>)
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	496a      	ldr	r1, [pc, #424]	; (8004274 <HAL_RCC_ClockConfig+0x244>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d010      	beq.n	80040fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	699a      	ldr	r2, [r3, #24]
 80040e0:	4b64      	ldr	r3, [pc, #400]	; (8004274 <HAL_RCC_ClockConfig+0x244>)
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d908      	bls.n	80040fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80040ec:	4b61      	ldr	r3, [pc, #388]	; (8004274 <HAL_RCC_ClockConfig+0x244>)
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	495e      	ldr	r1, [pc, #376]	; (8004274 <HAL_RCC_ClockConfig+0x244>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0320 	and.w	r3, r3, #32
 8004106:	2b00      	cmp	r3, #0
 8004108:	d010      	beq.n	800412c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69da      	ldr	r2, [r3, #28]
 800410e:	4b59      	ldr	r3, [pc, #356]	; (8004274 <HAL_RCC_ClockConfig+0x244>)
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004116:	429a      	cmp	r2, r3
 8004118:	d908      	bls.n	800412c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800411a:	4b56      	ldr	r3, [pc, #344]	; (8004274 <HAL_RCC_ClockConfig+0x244>)
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	4953      	ldr	r1, [pc, #332]	; (8004274 <HAL_RCC_ClockConfig+0x244>)
 8004128:	4313      	orrs	r3, r2
 800412a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d010      	beq.n	800415a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68da      	ldr	r2, [r3, #12]
 800413c:	4b4d      	ldr	r3, [pc, #308]	; (8004274 <HAL_RCC_ClockConfig+0x244>)
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	429a      	cmp	r2, r3
 8004146:	d908      	bls.n	800415a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004148:	4b4a      	ldr	r3, [pc, #296]	; (8004274 <HAL_RCC_ClockConfig+0x244>)
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	f023 020f 	bic.w	r2, r3, #15
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	4947      	ldr	r1, [pc, #284]	; (8004274 <HAL_RCC_ClockConfig+0x244>)
 8004156:	4313      	orrs	r3, r2
 8004158:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d055      	beq.n	8004212 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004166:	4b43      	ldr	r3, [pc, #268]	; (8004274 <HAL_RCC_ClockConfig+0x244>)
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	4940      	ldr	r1, [pc, #256]	; (8004274 <HAL_RCC_ClockConfig+0x244>)
 8004174:	4313      	orrs	r3, r2
 8004176:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	2b02      	cmp	r3, #2
 800417e:	d107      	bne.n	8004190 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004180:	4b3c      	ldr	r3, [pc, #240]	; (8004274 <HAL_RCC_ClockConfig+0x244>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d121      	bne.n	80041d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e0f6      	b.n	800437e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2b03      	cmp	r3, #3
 8004196:	d107      	bne.n	80041a8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004198:	4b36      	ldr	r3, [pc, #216]	; (8004274 <HAL_RCC_ClockConfig+0x244>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d115      	bne.n	80041d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0ea      	b.n	800437e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d107      	bne.n	80041c0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041b0:	4b30      	ldr	r3, [pc, #192]	; (8004274 <HAL_RCC_ClockConfig+0x244>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d109      	bne.n	80041d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e0de      	b.n	800437e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041c0:	4b2c      	ldr	r3, [pc, #176]	; (8004274 <HAL_RCC_ClockConfig+0x244>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e0d6      	b.n	800437e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041d0:	4b28      	ldr	r3, [pc, #160]	; (8004274 <HAL_RCC_ClockConfig+0x244>)
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	f023 0207 	bic.w	r2, r3, #7
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	4925      	ldr	r1, [pc, #148]	; (8004274 <HAL_RCC_ClockConfig+0x244>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e2:	f7fd fda1 	bl	8001d28 <HAL_GetTick>
 80041e6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e8:	e00a      	b.n	8004200 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ea:	f7fd fd9d 	bl	8001d28 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e0be      	b.n	800437e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004200:	4b1c      	ldr	r3, [pc, #112]	; (8004274 <HAL_RCC_ClockConfig+0x244>)
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	429a      	cmp	r2, r3
 8004210:	d1eb      	bne.n	80041ea <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d010      	beq.n	8004240 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	4b14      	ldr	r3, [pc, #80]	; (8004274 <HAL_RCC_ClockConfig+0x244>)
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	429a      	cmp	r2, r3
 800422c:	d208      	bcs.n	8004240 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800422e:	4b11      	ldr	r3, [pc, #68]	; (8004274 <HAL_RCC_ClockConfig+0x244>)
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	f023 020f 	bic.w	r2, r3, #15
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	490e      	ldr	r1, [pc, #56]	; (8004274 <HAL_RCC_ClockConfig+0x244>)
 800423c:	4313      	orrs	r3, r2
 800423e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004240:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <HAL_RCC_ClockConfig+0x240>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 030f 	and.w	r3, r3, #15
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d214      	bcs.n	8004278 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424e:	4b08      	ldr	r3, [pc, #32]	; (8004270 <HAL_RCC_ClockConfig+0x240>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f023 020f 	bic.w	r2, r3, #15
 8004256:	4906      	ldr	r1, [pc, #24]	; (8004270 <HAL_RCC_ClockConfig+0x240>)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	4313      	orrs	r3, r2
 800425c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800425e:	4b04      	ldr	r3, [pc, #16]	; (8004270 <HAL_RCC_ClockConfig+0x240>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d005      	beq.n	8004278 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e086      	b.n	800437e <HAL_RCC_ClockConfig+0x34e>
 8004270:	52002000 	.word	0x52002000
 8004274:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b00      	cmp	r3, #0
 8004282:	d010      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	4b3f      	ldr	r3, [pc, #252]	; (8004388 <HAL_RCC_ClockConfig+0x358>)
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004290:	429a      	cmp	r2, r3
 8004292:	d208      	bcs.n	80042a6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004294:	4b3c      	ldr	r3, [pc, #240]	; (8004388 <HAL_RCC_ClockConfig+0x358>)
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	4939      	ldr	r1, [pc, #228]	; (8004388 <HAL_RCC_ClockConfig+0x358>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d010      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	695a      	ldr	r2, [r3, #20]
 80042b6:	4b34      	ldr	r3, [pc, #208]	; (8004388 <HAL_RCC_ClockConfig+0x358>)
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042be:	429a      	cmp	r2, r3
 80042c0:	d208      	bcs.n	80042d4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042c2:	4b31      	ldr	r3, [pc, #196]	; (8004388 <HAL_RCC_ClockConfig+0x358>)
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	492e      	ldr	r1, [pc, #184]	; (8004388 <HAL_RCC_ClockConfig+0x358>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0310 	and.w	r3, r3, #16
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d010      	beq.n	8004302 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699a      	ldr	r2, [r3, #24]
 80042e4:	4b28      	ldr	r3, [pc, #160]	; (8004388 <HAL_RCC_ClockConfig+0x358>)
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d208      	bcs.n	8004302 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80042f0:	4b25      	ldr	r3, [pc, #148]	; (8004388 <HAL_RCC_ClockConfig+0x358>)
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	4922      	ldr	r1, [pc, #136]	; (8004388 <HAL_RCC_ClockConfig+0x358>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b00      	cmp	r3, #0
 800430c:	d010      	beq.n	8004330 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69da      	ldr	r2, [r3, #28]
 8004312:	4b1d      	ldr	r3, [pc, #116]	; (8004388 <HAL_RCC_ClockConfig+0x358>)
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800431a:	429a      	cmp	r2, r3
 800431c:	d208      	bcs.n	8004330 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800431e:	4b1a      	ldr	r3, [pc, #104]	; (8004388 <HAL_RCC_ClockConfig+0x358>)
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	4917      	ldr	r1, [pc, #92]	; (8004388 <HAL_RCC_ClockConfig+0x358>)
 800432c:	4313      	orrs	r3, r2
 800432e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004330:	f000 f834 	bl	800439c <HAL_RCC_GetSysClockFreq>
 8004334:	4602      	mov	r2, r0
 8004336:	4b14      	ldr	r3, [pc, #80]	; (8004388 <HAL_RCC_ClockConfig+0x358>)
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	0a1b      	lsrs	r3, r3, #8
 800433c:	f003 030f 	and.w	r3, r3, #15
 8004340:	4912      	ldr	r1, [pc, #72]	; (800438c <HAL_RCC_ClockConfig+0x35c>)
 8004342:	5ccb      	ldrb	r3, [r1, r3]
 8004344:	f003 031f 	and.w	r3, r3, #31
 8004348:	fa22 f303 	lsr.w	r3, r2, r3
 800434c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800434e:	4b0e      	ldr	r3, [pc, #56]	; (8004388 <HAL_RCC_ClockConfig+0x358>)
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	4a0d      	ldr	r2, [pc, #52]	; (800438c <HAL_RCC_ClockConfig+0x35c>)
 8004358:	5cd3      	ldrb	r3, [r2, r3]
 800435a:	f003 031f 	and.w	r3, r3, #31
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	fa22 f303 	lsr.w	r3, r2, r3
 8004364:	4a0a      	ldr	r2, [pc, #40]	; (8004390 <HAL_RCC_ClockConfig+0x360>)
 8004366:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004368:	4a0a      	ldr	r2, [pc, #40]	; (8004394 <HAL_RCC_ClockConfig+0x364>)
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800436e:	4b0a      	ldr	r3, [pc, #40]	; (8004398 <HAL_RCC_ClockConfig+0x368>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f7fd fc8e 	bl	8001c94 <HAL_InitTick>
 8004378:	4603      	mov	r3, r0
 800437a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800437c:	7bfb      	ldrb	r3, [r7, #15]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	58024400 	.word	0x58024400
 800438c:	08009184 	.word	0x08009184
 8004390:	24000004 	.word	0x24000004
 8004394:	24000000 	.word	0x24000000
 8004398:	24000008 	.word	0x24000008

0800439c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800439c:	b480      	push	{r7}
 800439e:	b089      	sub	sp, #36	; 0x24
 80043a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043a2:	4bb3      	ldr	r3, [pc, #716]	; (8004670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043aa:	2b18      	cmp	r3, #24
 80043ac:	f200 8155 	bhi.w	800465a <HAL_RCC_GetSysClockFreq+0x2be>
 80043b0:	a201      	add	r2, pc, #4	; (adr r2, 80043b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80043b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b6:	bf00      	nop
 80043b8:	0800441d 	.word	0x0800441d
 80043bc:	0800465b 	.word	0x0800465b
 80043c0:	0800465b 	.word	0x0800465b
 80043c4:	0800465b 	.word	0x0800465b
 80043c8:	0800465b 	.word	0x0800465b
 80043cc:	0800465b 	.word	0x0800465b
 80043d0:	0800465b 	.word	0x0800465b
 80043d4:	0800465b 	.word	0x0800465b
 80043d8:	08004443 	.word	0x08004443
 80043dc:	0800465b 	.word	0x0800465b
 80043e0:	0800465b 	.word	0x0800465b
 80043e4:	0800465b 	.word	0x0800465b
 80043e8:	0800465b 	.word	0x0800465b
 80043ec:	0800465b 	.word	0x0800465b
 80043f0:	0800465b 	.word	0x0800465b
 80043f4:	0800465b 	.word	0x0800465b
 80043f8:	08004449 	.word	0x08004449
 80043fc:	0800465b 	.word	0x0800465b
 8004400:	0800465b 	.word	0x0800465b
 8004404:	0800465b 	.word	0x0800465b
 8004408:	0800465b 	.word	0x0800465b
 800440c:	0800465b 	.word	0x0800465b
 8004410:	0800465b 	.word	0x0800465b
 8004414:	0800465b 	.word	0x0800465b
 8004418:	0800444f 	.word	0x0800444f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800441c:	4b94      	ldr	r3, [pc, #592]	; (8004670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0320 	and.w	r3, r3, #32
 8004424:	2b00      	cmp	r3, #0
 8004426:	d009      	beq.n	800443c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004428:	4b91      	ldr	r3, [pc, #580]	; (8004670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	08db      	lsrs	r3, r3, #3
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	4a90      	ldr	r2, [pc, #576]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004434:	fa22 f303 	lsr.w	r3, r2, r3
 8004438:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800443a:	e111      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800443c:	4b8d      	ldr	r3, [pc, #564]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800443e:	61bb      	str	r3, [r7, #24]
    break;
 8004440:	e10e      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004442:	4b8d      	ldr	r3, [pc, #564]	; (8004678 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004444:	61bb      	str	r3, [r7, #24]
    break;
 8004446:	e10b      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004448:	4b8c      	ldr	r3, [pc, #560]	; (800467c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800444a:	61bb      	str	r3, [r7, #24]
    break;
 800444c:	e108      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800444e:	4b88      	ldr	r3, [pc, #544]	; (8004670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004458:	4b85      	ldr	r3, [pc, #532]	; (8004670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800445a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445c:	091b      	lsrs	r3, r3, #4
 800445e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004462:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004464:	4b82      	ldr	r3, [pc, #520]	; (8004670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800446e:	4b80      	ldr	r3, [pc, #512]	; (8004670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004472:	08db      	lsrs	r3, r3, #3
 8004474:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	fb02 f303 	mul.w	r3, r2, r3
 800447e:	ee07 3a90 	vmov	s15, r3
 8004482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004486:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 80e1 	beq.w	8004654 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2b02      	cmp	r3, #2
 8004496:	f000 8083 	beq.w	80045a0 <HAL_RCC_GetSysClockFreq+0x204>
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2b02      	cmp	r3, #2
 800449e:	f200 80a1 	bhi.w	80045e4 <HAL_RCC_GetSysClockFreq+0x248>
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <HAL_RCC_GetSysClockFreq+0x114>
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d056      	beq.n	800455c <HAL_RCC_GetSysClockFreq+0x1c0>
 80044ae:	e099      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044b0:	4b6f      	ldr	r3, [pc, #444]	; (8004670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0320 	and.w	r3, r3, #32
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d02d      	beq.n	8004518 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044bc:	4b6c      	ldr	r3, [pc, #432]	; (8004670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	08db      	lsrs	r3, r3, #3
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	4a6b      	ldr	r2, [pc, #428]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044c8:	fa22 f303 	lsr.w	r3, r2, r3
 80044cc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	ee07 3a90 	vmov	s15, r3
 80044d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	ee07 3a90 	vmov	s15, r3
 80044de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044e6:	4b62      	ldr	r3, [pc, #392]	; (8004670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ee:	ee07 3a90 	vmov	s15, r3
 80044f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80044fa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004680 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800450a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800450e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004512:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004516:	e087      	b.n	8004628 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	ee07 3a90 	vmov	s15, r3
 800451e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004522:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004684 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800452a:	4b51      	ldr	r3, [pc, #324]	; (8004670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800452c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004532:	ee07 3a90 	vmov	s15, r3
 8004536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800453a:	ed97 6a02 	vldr	s12, [r7, #8]
 800453e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004680 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800454a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800454e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004556:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800455a:	e065      	b.n	8004628 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	ee07 3a90 	vmov	s15, r3
 8004562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004566:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004688 <HAL_RCC_GetSysClockFreq+0x2ec>
 800456a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800456e:	4b40      	ldr	r3, [pc, #256]	; (8004670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004576:	ee07 3a90 	vmov	s15, r3
 800457a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800457e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004582:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004680 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800458a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800458e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800459a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800459e:	e043      	b.n	8004628 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	ee07 3a90 	vmov	s15, r3
 80045a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045aa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800468c <HAL_RCC_GetSysClockFreq+0x2f0>
 80045ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045b2:	4b2f      	ldr	r3, [pc, #188]	; (8004670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ba:	ee07 3a90 	vmov	s15, r3
 80045be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80045c6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004680 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045e2:	e021      	b.n	8004628 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	ee07 3a90 	vmov	s15, r3
 80045ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004688 <HAL_RCC_GetSysClockFreq+0x2ec>
 80045f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045f6:	4b1e      	ldr	r3, [pc, #120]	; (8004670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045fe:	ee07 3a90 	vmov	s15, r3
 8004602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004606:	ed97 6a02 	vldr	s12, [r7, #8]
 800460a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800460e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800461a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800461e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004622:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004626:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004628:	4b11      	ldr	r3, [pc, #68]	; (8004670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	0a5b      	lsrs	r3, r3, #9
 800462e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004632:	3301      	adds	r3, #1
 8004634:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	ee07 3a90 	vmov	s15, r3
 800463c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004640:	edd7 6a07 	vldr	s13, [r7, #28]
 8004644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800464c:	ee17 3a90 	vmov	r3, s15
 8004650:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004652:	e005      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	61bb      	str	r3, [r7, #24]
    break;
 8004658:	e002      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800465a:	4b07      	ldr	r3, [pc, #28]	; (8004678 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800465c:	61bb      	str	r3, [r7, #24]
    break;
 800465e:	bf00      	nop
  }

  return sysclockfreq;
 8004660:	69bb      	ldr	r3, [r7, #24]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3724      	adds	r7, #36	; 0x24
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	58024400 	.word	0x58024400
 8004674:	03d09000 	.word	0x03d09000
 8004678:	003d0900 	.word	0x003d0900
 800467c:	007a1200 	.word	0x007a1200
 8004680:	46000000 	.word	0x46000000
 8004684:	4c742400 	.word	0x4c742400
 8004688:	4a742400 	.word	0x4a742400
 800468c:	4af42400 	.word	0x4af42400

08004690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004696:	f7ff fe81 	bl	800439c <HAL_RCC_GetSysClockFreq>
 800469a:	4602      	mov	r2, r0
 800469c:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	0a1b      	lsrs	r3, r3, #8
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	490f      	ldr	r1, [pc, #60]	; (80046e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80046a8:	5ccb      	ldrb	r3, [r1, r3]
 80046aa:	f003 031f 	and.w	r3, r3, #31
 80046ae:	fa22 f303 	lsr.w	r3, r2, r3
 80046b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046b4:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	f003 030f 	and.w	r3, r3, #15
 80046bc:	4a09      	ldr	r2, [pc, #36]	; (80046e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80046be:	5cd3      	ldrb	r3, [r2, r3]
 80046c0:	f003 031f 	and.w	r3, r3, #31
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	fa22 f303 	lsr.w	r3, r2, r3
 80046ca:	4a07      	ldr	r2, [pc, #28]	; (80046e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80046cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046ce:	4a07      	ldr	r2, [pc, #28]	; (80046ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80046d4:	4b04      	ldr	r3, [pc, #16]	; (80046e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80046d6:	681b      	ldr	r3, [r3, #0]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	58024400 	.word	0x58024400
 80046e4:	08009184 	.word	0x08009184
 80046e8:	24000004 	.word	0x24000004
 80046ec:	24000000 	.word	0x24000000

080046f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80046f4:	f7ff ffcc 	bl	8004690 <HAL_RCC_GetHCLKFreq>
 80046f8:	4602      	mov	r2, r0
 80046fa:	4b06      	ldr	r3, [pc, #24]	; (8004714 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	091b      	lsrs	r3, r3, #4
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	4904      	ldr	r1, [pc, #16]	; (8004718 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004706:	5ccb      	ldrb	r3, [r1, r3]
 8004708:	f003 031f 	and.w	r3, r3, #31
 800470c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004710:	4618      	mov	r0, r3
 8004712:	bd80      	pop	{r7, pc}
 8004714:	58024400 	.word	0x58024400
 8004718:	08009184 	.word	0x08009184

0800471c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004720:	f7ff ffb6 	bl	8004690 <HAL_RCC_GetHCLKFreq>
 8004724:	4602      	mov	r2, r0
 8004726:	4b06      	ldr	r3, [pc, #24]	; (8004740 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	0a1b      	lsrs	r3, r3, #8
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	4904      	ldr	r1, [pc, #16]	; (8004744 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004732:	5ccb      	ldrb	r3, [r1, r3]
 8004734:	f003 031f 	and.w	r3, r3, #31
 8004738:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800473c:	4618      	mov	r0, r3
 800473e:	bd80      	pop	{r7, pc}
 8004740:	58024400 	.word	0x58024400
 8004744:	08009184 	.word	0x08009184

08004748 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004750:	2300      	movs	r3, #0
 8004752:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004754:	2300      	movs	r3, #0
 8004756:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d03f      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004768:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800476c:	d02a      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800476e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004772:	d824      	bhi.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004774:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004778:	d018      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800477a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800477e:	d81e      	bhi.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004784:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004788:	d007      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800478a:	e018      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800478c:	4bab      	ldr	r3, [pc, #684]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800478e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004790:	4aaa      	ldr	r2, [pc, #680]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004796:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004798:	e015      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3304      	adds	r3, #4
 800479e:	2102      	movs	r1, #2
 80047a0:	4618      	mov	r0, r3
 80047a2:	f001 fff3 	bl	800678c <RCCEx_PLL2_Config>
 80047a6:	4603      	mov	r3, r0
 80047a8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80047aa:	e00c      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3324      	adds	r3, #36	; 0x24
 80047b0:	2102      	movs	r1, #2
 80047b2:	4618      	mov	r0, r3
 80047b4:	f002 f89c 	bl	80068f0 <RCCEx_PLL3_Config>
 80047b8:	4603      	mov	r3, r0
 80047ba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80047bc:	e003      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	75fb      	strb	r3, [r7, #23]
      break;
 80047c2:	e000      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80047c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047c6:	7dfb      	ldrb	r3, [r7, #23]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d109      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80047cc:	4b9b      	ldr	r3, [pc, #620]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047d8:	4998      	ldr	r1, [pc, #608]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	650b      	str	r3, [r1, #80]	; 0x50
 80047de:	e001      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e0:	7dfb      	ldrb	r3, [r7, #23]
 80047e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d03d      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d826      	bhi.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80047f8:	a201      	add	r2, pc, #4	; (adr r2, 8004800 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80047fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fe:	bf00      	nop
 8004800:	08004815 	.word	0x08004815
 8004804:	08004823 	.word	0x08004823
 8004808:	08004835 	.word	0x08004835
 800480c:	0800484d 	.word	0x0800484d
 8004810:	0800484d 	.word	0x0800484d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004814:	4b89      	ldr	r3, [pc, #548]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	4a88      	ldr	r2, [pc, #544]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800481a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800481e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004820:	e015      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3304      	adds	r3, #4
 8004826:	2100      	movs	r1, #0
 8004828:	4618      	mov	r0, r3
 800482a:	f001 ffaf 	bl	800678c <RCCEx_PLL2_Config>
 800482e:	4603      	mov	r3, r0
 8004830:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004832:	e00c      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	3324      	adds	r3, #36	; 0x24
 8004838:	2100      	movs	r1, #0
 800483a:	4618      	mov	r0, r3
 800483c:	f002 f858 	bl	80068f0 <RCCEx_PLL3_Config>
 8004840:	4603      	mov	r3, r0
 8004842:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004844:	e003      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	75fb      	strb	r3, [r7, #23]
      break;
 800484a:	e000      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800484c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800484e:	7dfb      	ldrb	r3, [r7, #23]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d109      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004854:	4b79      	ldr	r3, [pc, #484]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004858:	f023 0207 	bic.w	r2, r3, #7
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004860:	4976      	ldr	r1, [pc, #472]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004862:	4313      	orrs	r3, r2
 8004864:	650b      	str	r3, [r1, #80]	; 0x50
 8004866:	e001      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004868:	7dfb      	ldrb	r3, [r7, #23]
 800486a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004874:	2b00      	cmp	r3, #0
 8004876:	d042      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004880:	d02b      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004886:	d825      	bhi.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004888:	2bc0      	cmp	r3, #192	; 0xc0
 800488a:	d028      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x196>
 800488c:	2bc0      	cmp	r3, #192	; 0xc0
 800488e:	d821      	bhi.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004890:	2b80      	cmp	r3, #128	; 0x80
 8004892:	d016      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004894:	2b80      	cmp	r3, #128	; 0x80
 8004896:	d81d      	bhi.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800489c:	2b40      	cmp	r3, #64	; 0x40
 800489e:	d007      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80048a0:	e018      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048a2:	4b66      	ldr	r3, [pc, #408]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a6:	4a65      	ldr	r2, [pc, #404]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80048ae:	e017      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3304      	adds	r3, #4
 80048b4:	2100      	movs	r1, #0
 80048b6:	4618      	mov	r0, r3
 80048b8:	f001 ff68 	bl	800678c <RCCEx_PLL2_Config>
 80048bc:	4603      	mov	r3, r0
 80048be:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80048c0:	e00e      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	3324      	adds	r3, #36	; 0x24
 80048c6:	2100      	movs	r1, #0
 80048c8:	4618      	mov	r0, r3
 80048ca:	f002 f811 	bl	80068f0 <RCCEx_PLL3_Config>
 80048ce:	4603      	mov	r3, r0
 80048d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80048d2:	e005      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	75fb      	strb	r3, [r7, #23]
      break;
 80048d8:	e002      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80048da:	bf00      	nop
 80048dc:	e000      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80048de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048e0:	7dfb      	ldrb	r3, [r7, #23]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d109      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80048e6:	4b55      	ldr	r3, [pc, #340]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ea:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f2:	4952      	ldr	r1, [pc, #328]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	650b      	str	r3, [r1, #80]	; 0x50
 80048f8:	e001      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fa:	7dfb      	ldrb	r3, [r7, #23]
 80048fc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004906:	2b00      	cmp	r3, #0
 8004908:	d049      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004910:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004914:	d030      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004916:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800491a:	d82a      	bhi.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800491c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004920:	d02c      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004922:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004926:	d824      	bhi.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004928:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800492c:	d018      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800492e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004932:	d81e      	bhi.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004938:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800493c:	d007      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800493e:	e018      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004940:	4b3e      	ldr	r3, [pc, #248]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	4a3d      	ldr	r2, [pc, #244]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800494a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800494c:	e017      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3304      	adds	r3, #4
 8004952:	2100      	movs	r1, #0
 8004954:	4618      	mov	r0, r3
 8004956:	f001 ff19 	bl	800678c <RCCEx_PLL2_Config>
 800495a:	4603      	mov	r3, r0
 800495c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800495e:	e00e      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3324      	adds	r3, #36	; 0x24
 8004964:	2100      	movs	r1, #0
 8004966:	4618      	mov	r0, r3
 8004968:	f001 ffc2 	bl	80068f0 <RCCEx_PLL3_Config>
 800496c:	4603      	mov	r3, r0
 800496e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004970:	e005      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	75fb      	strb	r3, [r7, #23]
      break;
 8004976:	e002      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004978:	bf00      	nop
 800497a:	e000      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800497c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800497e:	7dfb      	ldrb	r3, [r7, #23]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10a      	bne.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004984:	4b2d      	ldr	r3, [pc, #180]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004988:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004992:	492a      	ldr	r1, [pc, #168]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004994:	4313      	orrs	r3, r2
 8004996:	658b      	str	r3, [r1, #88]	; 0x58
 8004998:	e001      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800499a:	7dfb      	ldrb	r3, [r7, #23]
 800499c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d04c      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80049b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049b4:	d030      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80049b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049ba:	d82a      	bhi.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80049bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049c0:	d02c      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80049c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049c6:	d824      	bhi.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80049c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049cc:	d018      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80049ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049d2:	d81e      	bhi.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80049d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049dc:	d007      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80049de:	e018      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049e0:	4b16      	ldr	r3, [pc, #88]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e4:	4a15      	ldr	r2, [pc, #84]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049ec:	e017      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3304      	adds	r3, #4
 80049f2:	2100      	movs	r1, #0
 80049f4:	4618      	mov	r0, r3
 80049f6:	f001 fec9 	bl	800678c <RCCEx_PLL2_Config>
 80049fa:	4603      	mov	r3, r0
 80049fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80049fe:	e00e      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3324      	adds	r3, #36	; 0x24
 8004a04:	2100      	movs	r1, #0
 8004a06:	4618      	mov	r0, r3
 8004a08:	f001 ff72 	bl	80068f0 <RCCEx_PLL3_Config>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a10:	e005      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	75fb      	strb	r3, [r7, #23]
      break;
 8004a16:	e002      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004a18:	bf00      	nop
 8004a1a:	e000      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004a1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a1e:	7dfb      	ldrb	r3, [r7, #23]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10d      	bne.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004a24:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a28:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a32:	4902      	ldr	r1, [pc, #8]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	658b      	str	r3, [r1, #88]	; 0x58
 8004a38:	e004      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004a3a:	bf00      	nop
 8004a3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a40:	7dfb      	ldrb	r3, [r7, #23]
 8004a42:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d032      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a54:	2b30      	cmp	r3, #48	; 0x30
 8004a56:	d01c      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004a58:	2b30      	cmp	r3, #48	; 0x30
 8004a5a:	d817      	bhi.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004a5c:	2b20      	cmp	r3, #32
 8004a5e:	d00c      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004a60:	2b20      	cmp	r3, #32
 8004a62:	d813      	bhi.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d016      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004a68:	2b10      	cmp	r3, #16
 8004a6a:	d10f      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a6c:	4baf      	ldr	r3, [pc, #700]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a70:	4aae      	ldr	r2, [pc, #696]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004a78:	e00e      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	2102      	movs	r1, #2
 8004a80:	4618      	mov	r0, r3
 8004a82:	f001 fe83 	bl	800678c <RCCEx_PLL2_Config>
 8004a86:	4603      	mov	r3, r0
 8004a88:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004a8a:	e005      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a90:	e002      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004a92:	bf00      	nop
 8004a94:	e000      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004a96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a98:	7dfb      	ldrb	r3, [r7, #23]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d109      	bne.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a9e:	4ba3      	ldr	r3, [pc, #652]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aa2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aaa:	49a0      	ldr	r1, [pc, #640]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004ab0:	e001      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab2:	7dfb      	ldrb	r3, [r7, #23]
 8004ab4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d047      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004aca:	d030      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004acc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ad0:	d82a      	bhi.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004ad2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ad6:	d02c      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004ad8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004adc:	d824      	bhi.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ae2:	d018      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ae8:	d81e      	bhi.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af2:	d007      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004af4:	e018      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004af6:	4b8d      	ldr	r3, [pc, #564]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afa:	4a8c      	ldr	r2, [pc, #560]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004b02:	e017      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3304      	adds	r3, #4
 8004b08:	2100      	movs	r1, #0
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f001 fe3e 	bl	800678c <RCCEx_PLL2_Config>
 8004b10:	4603      	mov	r3, r0
 8004b12:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004b14:	e00e      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	3324      	adds	r3, #36	; 0x24
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f001 fee7 	bl	80068f0 <RCCEx_PLL3_Config>
 8004b22:	4603      	mov	r3, r0
 8004b24:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004b26:	e005      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b2c:	e002      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004b2e:	bf00      	nop
 8004b30:	e000      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004b32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b34:	7dfb      	ldrb	r3, [r7, #23]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d109      	bne.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004b3a:	4b7c      	ldr	r3, [pc, #496]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b3e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b46:	4979      	ldr	r1, [pc, #484]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	650b      	str	r3, [r1, #80]	; 0x50
 8004b4c:	e001      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b4e:	7dfb      	ldrb	r3, [r7, #23]
 8004b50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d049      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b66:	d02e      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b6c:	d828      	bhi.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004b6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b72:	d02a      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004b74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b78:	d822      	bhi.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004b7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b7e:	d026      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004b80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b84:	d81c      	bhi.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004b86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b8a:	d010      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004b8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b90:	d816      	bhi.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d01d      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b9a:	d111      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f001 fdf2 	bl	800678c <RCCEx_PLL2_Config>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004bac:	e012      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	3324      	adds	r3, #36	; 0x24
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f001 fe9b 	bl	80068f0 <RCCEx_PLL3_Config>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004bbe:	e009      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8004bc4:	e006      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004bc6:	bf00      	nop
 8004bc8:	e004      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004bca:	bf00      	nop
 8004bcc:	e002      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004bce:	bf00      	nop
 8004bd0:	e000      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004bd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bd4:	7dfb      	ldrb	r3, [r7, #23]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d109      	bne.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004bda:	4b54      	ldr	r3, [pc, #336]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bde:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004be6:	4951      	ldr	r1, [pc, #324]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	650b      	str	r3, [r1, #80]	; 0x50
 8004bec:	e001      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bee:	7dfb      	ldrb	r3, [r7, #23]
 8004bf0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d04b      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c08:	d02e      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004c0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c0e:	d828      	bhi.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c14:	d02a      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c1a:	d822      	bhi.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004c1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c20:	d026      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004c22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c26:	d81c      	bhi.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004c28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c2c:	d010      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004c2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c32:	d816      	bhi.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d01d      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004c38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c3c:	d111      	bne.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3304      	adds	r3, #4
 8004c42:	2101      	movs	r1, #1
 8004c44:	4618      	mov	r0, r3
 8004c46:	f001 fda1 	bl	800678c <RCCEx_PLL2_Config>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004c4e:	e012      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	3324      	adds	r3, #36	; 0x24
 8004c54:	2101      	movs	r1, #1
 8004c56:	4618      	mov	r0, r3
 8004c58:	f001 fe4a 	bl	80068f0 <RCCEx_PLL3_Config>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004c60:	e009      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	75fb      	strb	r3, [r7, #23]
      break;
 8004c66:	e006      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004c68:	bf00      	nop
 8004c6a:	e004      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004c6c:	bf00      	nop
 8004c6e:	e002      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004c70:	bf00      	nop
 8004c72:	e000      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004c74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c76:	7dfb      	ldrb	r3, [r7, #23]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10a      	bne.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004c7c:	4b2b      	ldr	r3, [pc, #172]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c80:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c8a:	4928      	ldr	r1, [pc, #160]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	658b      	str	r3, [r1, #88]	; 0x58
 8004c90:	e001      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c92:	7dfb      	ldrb	r3, [r7, #23]
 8004c94:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d02f      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004caa:	d00e      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004cac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cb0:	d814      	bhi.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d015      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004cb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cba:	d10f      	bne.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cbc:	4b1b      	ldr	r3, [pc, #108]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	4a1a      	ldr	r2, [pc, #104]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004cc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004cc8:	e00c      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	3304      	adds	r3, #4
 8004cce:	2101      	movs	r1, #1
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f001 fd5b 	bl	800678c <RCCEx_PLL2_Config>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004cda:	e003      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	75fb      	strb	r3, [r7, #23]
      break;
 8004ce0:	e000      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004ce2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ce4:	7dfb      	ldrb	r3, [r7, #23]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d109      	bne.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004cea:	4b10      	ldr	r3, [pc, #64]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cf6:	490d      	ldr	r1, [pc, #52]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	650b      	str	r3, [r1, #80]	; 0x50
 8004cfc:	e001      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cfe:	7dfb      	ldrb	r3, [r7, #23]
 8004d00:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d033      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d81c      	bhi.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004d16:	a201      	add	r2, pc, #4	; (adr r2, 8004d1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1c:	08004d57 	.word	0x08004d57
 8004d20:	08004d31 	.word	0x08004d31
 8004d24:	08004d3f 	.word	0x08004d3f
 8004d28:	08004d57 	.word	0x08004d57
 8004d2c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d30:	4bb8      	ldr	r3, [pc, #736]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d34:	4ab7      	ldr	r2, [pc, #732]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004d3c:	e00c      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	3304      	adds	r3, #4
 8004d42:	2102      	movs	r1, #2
 8004d44:	4618      	mov	r0, r3
 8004d46:	f001 fd21 	bl	800678c <RCCEx_PLL2_Config>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004d4e:	e003      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	75fb      	strb	r3, [r7, #23]
      break;
 8004d54:	e000      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004d56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d58:	7dfb      	ldrb	r3, [r7, #23]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d109      	bne.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004d5e:	4bad      	ldr	r3, [pc, #692]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d62:	f023 0203 	bic.w	r2, r3, #3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6a:	49aa      	ldr	r1, [pc, #680]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004d70:	e001      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d72:	7dfb      	ldrb	r3, [r7, #23]
 8004d74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 8086 	beq.w	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d84:	4ba4      	ldr	r3, [pc, #656]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4aa3      	ldr	r2, [pc, #652]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d90:	f7fc ffca 	bl	8001d28 <HAL_GetTick>
 8004d94:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d96:	e009      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d98:	f7fc ffc6 	bl	8001d28 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b64      	cmp	r3, #100	; 0x64
 8004da4:	d902      	bls.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	75fb      	strb	r3, [r7, #23]
        break;
 8004daa:	e005      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dac:	4b9a      	ldr	r3, [pc, #616]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0ef      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004db8:	7dfb      	ldrb	r3, [r7, #23]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d166      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004dbe:	4b95      	ldr	r3, [pc, #596]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004dc0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004dc8:	4053      	eors	r3, r2
 8004dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d013      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dd2:	4b90      	ldr	r3, [pc, #576]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dda:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ddc:	4b8d      	ldr	r3, [pc, #564]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de0:	4a8c      	ldr	r2, [pc, #560]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004de8:	4b8a      	ldr	r3, [pc, #552]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dec:	4a89      	ldr	r2, [pc, #548]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004df2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004df4:	4a87      	ldr	r2, [pc, #540]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e04:	d115      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e06:	f7fc ff8f 	bl	8001d28 <HAL_GetTick>
 8004e0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e0c:	e00b      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e0e:	f7fc ff8b 	bl	8001d28 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d902      	bls.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	75fb      	strb	r3, [r7, #23]
            break;
 8004e24:	e005      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e26:	4b7b      	ldr	r3, [pc, #492]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0ed      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004e32:	7dfb      	ldrb	r3, [r7, #23]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d126      	bne.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e46:	d10d      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004e48:	4b72      	ldr	r3, [pc, #456]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e56:	0919      	lsrs	r1, r3, #4
 8004e58:	4b70      	ldr	r3, [pc, #448]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8004e5a:	400b      	ands	r3, r1
 8004e5c:	496d      	ldr	r1, [pc, #436]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	610b      	str	r3, [r1, #16]
 8004e62:	e005      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004e64:	4b6b      	ldr	r3, [pc, #428]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	4a6a      	ldr	r2, [pc, #424]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e6a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004e6e:	6113      	str	r3, [r2, #16]
 8004e70:	4b68      	ldr	r3, [pc, #416]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e7e:	4965      	ldr	r1, [pc, #404]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	670b      	str	r3, [r1, #112]	; 0x70
 8004e84:	e004      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e86:	7dfb      	ldrb	r3, [r7, #23]
 8004e88:	75bb      	strb	r3, [r7, #22]
 8004e8a:	e001      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e8c:	7dfb      	ldrb	r3, [r7, #23]
 8004e8e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d07e      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ea0:	2b28      	cmp	r3, #40	; 0x28
 8004ea2:	d867      	bhi.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004ea4:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eaa:	bf00      	nop
 8004eac:	08004f7b 	.word	0x08004f7b
 8004eb0:	08004f75 	.word	0x08004f75
 8004eb4:	08004f75 	.word	0x08004f75
 8004eb8:	08004f75 	.word	0x08004f75
 8004ebc:	08004f75 	.word	0x08004f75
 8004ec0:	08004f75 	.word	0x08004f75
 8004ec4:	08004f75 	.word	0x08004f75
 8004ec8:	08004f75 	.word	0x08004f75
 8004ecc:	08004f51 	.word	0x08004f51
 8004ed0:	08004f75 	.word	0x08004f75
 8004ed4:	08004f75 	.word	0x08004f75
 8004ed8:	08004f75 	.word	0x08004f75
 8004edc:	08004f75 	.word	0x08004f75
 8004ee0:	08004f75 	.word	0x08004f75
 8004ee4:	08004f75 	.word	0x08004f75
 8004ee8:	08004f75 	.word	0x08004f75
 8004eec:	08004f63 	.word	0x08004f63
 8004ef0:	08004f75 	.word	0x08004f75
 8004ef4:	08004f75 	.word	0x08004f75
 8004ef8:	08004f75 	.word	0x08004f75
 8004efc:	08004f75 	.word	0x08004f75
 8004f00:	08004f75 	.word	0x08004f75
 8004f04:	08004f75 	.word	0x08004f75
 8004f08:	08004f75 	.word	0x08004f75
 8004f0c:	08004f7b 	.word	0x08004f7b
 8004f10:	08004f75 	.word	0x08004f75
 8004f14:	08004f75 	.word	0x08004f75
 8004f18:	08004f75 	.word	0x08004f75
 8004f1c:	08004f75 	.word	0x08004f75
 8004f20:	08004f75 	.word	0x08004f75
 8004f24:	08004f75 	.word	0x08004f75
 8004f28:	08004f75 	.word	0x08004f75
 8004f2c:	08004f7b 	.word	0x08004f7b
 8004f30:	08004f75 	.word	0x08004f75
 8004f34:	08004f75 	.word	0x08004f75
 8004f38:	08004f75 	.word	0x08004f75
 8004f3c:	08004f75 	.word	0x08004f75
 8004f40:	08004f75 	.word	0x08004f75
 8004f44:	08004f75 	.word	0x08004f75
 8004f48:	08004f75 	.word	0x08004f75
 8004f4c:	08004f7b 	.word	0x08004f7b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3304      	adds	r3, #4
 8004f54:	2101      	movs	r1, #1
 8004f56:	4618      	mov	r0, r3
 8004f58:	f001 fc18 	bl	800678c <RCCEx_PLL2_Config>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004f60:	e00c      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3324      	adds	r3, #36	; 0x24
 8004f66:	2101      	movs	r1, #1
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f001 fcc1 	bl	80068f0 <RCCEx_PLL3_Config>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004f72:	e003      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	75fb      	strb	r3, [r7, #23]
      break;
 8004f78:	e000      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8004f7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f7c:	7dfb      	ldrb	r3, [r7, #23]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d109      	bne.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004f82:	4b24      	ldr	r3, [pc, #144]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f86:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f8e:	4921      	ldr	r1, [pc, #132]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	654b      	str	r3, [r1, #84]	; 0x54
 8004f94:	e001      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f96:	7dfb      	ldrb	r3, [r7, #23]
 8004f98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d03e      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004faa:	2b05      	cmp	r3, #5
 8004fac:	d820      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8004fae:	a201      	add	r2, pc, #4	; (adr r2, 8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8004fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb4:	08004ff7 	.word	0x08004ff7
 8004fb8:	08004fcd 	.word	0x08004fcd
 8004fbc:	08004fdf 	.word	0x08004fdf
 8004fc0:	08004ff7 	.word	0x08004ff7
 8004fc4:	08004ff7 	.word	0x08004ff7
 8004fc8:	08004ff7 	.word	0x08004ff7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3304      	adds	r3, #4
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f001 fbda 	bl	800678c <RCCEx_PLL2_Config>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004fdc:	e00c      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3324      	adds	r3, #36	; 0x24
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f001 fc83 	bl	80068f0 <RCCEx_PLL3_Config>
 8004fea:	4603      	mov	r3, r0
 8004fec:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004fee:	e003      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ff4:	e000      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8004ff6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ff8:	7dfb      	ldrb	r3, [r7, #23]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d110      	bne.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004ffe:	4b05      	ldr	r3, [pc, #20]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005002:	f023 0207 	bic.w	r2, r3, #7
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800500a:	4902      	ldr	r1, [pc, #8]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800500c:	4313      	orrs	r3, r2
 800500e:	654b      	str	r3, [r1, #84]	; 0x54
 8005010:	e008      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8005012:	bf00      	nop
 8005014:	58024400 	.word	0x58024400
 8005018:	58024800 	.word	0x58024800
 800501c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005020:	7dfb      	ldrb	r3, [r7, #23]
 8005022:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d039      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005036:	2b05      	cmp	r3, #5
 8005038:	d820      	bhi.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x934>
 800503a:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800503c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005040:	08005083 	.word	0x08005083
 8005044:	08005059 	.word	0x08005059
 8005048:	0800506b 	.word	0x0800506b
 800504c:	08005083 	.word	0x08005083
 8005050:	08005083 	.word	0x08005083
 8005054:	08005083 	.word	0x08005083
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3304      	adds	r3, #4
 800505c:	2101      	movs	r1, #1
 800505e:	4618      	mov	r0, r3
 8005060:	f001 fb94 	bl	800678c <RCCEx_PLL2_Config>
 8005064:	4603      	mov	r3, r0
 8005066:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005068:	e00c      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3324      	adds	r3, #36	; 0x24
 800506e:	2101      	movs	r1, #1
 8005070:	4618      	mov	r0, r3
 8005072:	f001 fc3d 	bl	80068f0 <RCCEx_PLL3_Config>
 8005076:	4603      	mov	r3, r0
 8005078:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800507a:	e003      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	75fb      	strb	r3, [r7, #23]
      break;
 8005080:	e000      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8005082:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005084:	7dfb      	ldrb	r3, [r7, #23]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10a      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800508a:	4bb7      	ldr	r3, [pc, #732]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800508c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508e:	f023 0207 	bic.w	r2, r3, #7
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005098:	49b3      	ldr	r1, [pc, #716]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800509a:	4313      	orrs	r3, r2
 800509c:	658b      	str	r3, [r1, #88]	; 0x58
 800509e:	e001      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a0:	7dfb      	ldrb	r3, [r7, #23]
 80050a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0320 	and.w	r3, r3, #32
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d04b      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050ba:	d02e      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80050bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050c0:	d828      	bhi.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80050c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c6:	d02a      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80050c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050cc:	d822      	bhi.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80050ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80050d2:	d026      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80050d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80050d8:	d81c      	bhi.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80050da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050de:	d010      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80050e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050e4:	d816      	bhi.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d01d      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80050ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050ee:	d111      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	3304      	adds	r3, #4
 80050f4:	2100      	movs	r1, #0
 80050f6:	4618      	mov	r0, r3
 80050f8:	f001 fb48 	bl	800678c <RCCEx_PLL2_Config>
 80050fc:	4603      	mov	r3, r0
 80050fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005100:	e012      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	3324      	adds	r3, #36	; 0x24
 8005106:	2102      	movs	r1, #2
 8005108:	4618      	mov	r0, r3
 800510a:	f001 fbf1 	bl	80068f0 <RCCEx_PLL3_Config>
 800510e:	4603      	mov	r3, r0
 8005110:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005112:	e009      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	75fb      	strb	r3, [r7, #23]
      break;
 8005118:	e006      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800511a:	bf00      	nop
 800511c:	e004      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800511e:	bf00      	nop
 8005120:	e002      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005122:	bf00      	nop
 8005124:	e000      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005126:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005128:	7dfb      	ldrb	r3, [r7, #23]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10a      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800512e:	4b8e      	ldr	r3, [pc, #568]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005132:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800513c:	498a      	ldr	r1, [pc, #552]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800513e:	4313      	orrs	r3, r2
 8005140:	654b      	str	r3, [r1, #84]	; 0x54
 8005142:	e001      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005144:	7dfb      	ldrb	r3, [r7, #23]
 8005146:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005150:	2b00      	cmp	r3, #0
 8005152:	d04b      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800515a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800515e:	d02e      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8005160:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005164:	d828      	bhi.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800516a:	d02a      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800516c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005170:	d822      	bhi.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005172:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005176:	d026      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005178:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800517c:	d81c      	bhi.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800517e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005182:	d010      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005188:	d816      	bhi.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800518a:	2b00      	cmp	r3, #0
 800518c:	d01d      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800518e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005192:	d111      	bne.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3304      	adds	r3, #4
 8005198:	2100      	movs	r1, #0
 800519a:	4618      	mov	r0, r3
 800519c:	f001 faf6 	bl	800678c <RCCEx_PLL2_Config>
 80051a0:	4603      	mov	r3, r0
 80051a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80051a4:	e012      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	3324      	adds	r3, #36	; 0x24
 80051aa:	2102      	movs	r1, #2
 80051ac:	4618      	mov	r0, r3
 80051ae:	f001 fb9f 	bl	80068f0 <RCCEx_PLL3_Config>
 80051b2:	4603      	mov	r3, r0
 80051b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80051b6:	e009      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	75fb      	strb	r3, [r7, #23]
      break;
 80051bc:	e006      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80051be:	bf00      	nop
 80051c0:	e004      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80051c2:	bf00      	nop
 80051c4:	e002      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80051c6:	bf00      	nop
 80051c8:	e000      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80051ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051cc:	7dfb      	ldrb	r3, [r7, #23]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10a      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051d2:	4b65      	ldr	r3, [pc, #404]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80051d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051e0:	4961      	ldr	r1, [pc, #388]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	658b      	str	r3, [r1, #88]	; 0x58
 80051e6:	e001      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e8:	7dfb      	ldrb	r3, [r7, #23]
 80051ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d04b      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005202:	d02e      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8005204:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005208:	d828      	bhi.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800520a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800520e:	d02a      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8005210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005214:	d822      	bhi.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005216:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800521a:	d026      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800521c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005220:	d81c      	bhi.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005222:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005226:	d010      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005228:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800522c:	d816      	bhi.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800522e:	2b00      	cmp	r3, #0
 8005230:	d01d      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005236:	d111      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	3304      	adds	r3, #4
 800523c:	2100      	movs	r1, #0
 800523e:	4618      	mov	r0, r3
 8005240:	f001 faa4 	bl	800678c <RCCEx_PLL2_Config>
 8005244:	4603      	mov	r3, r0
 8005246:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005248:	e012      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	3324      	adds	r3, #36	; 0x24
 800524e:	2102      	movs	r1, #2
 8005250:	4618      	mov	r0, r3
 8005252:	f001 fb4d 	bl	80068f0 <RCCEx_PLL3_Config>
 8005256:	4603      	mov	r3, r0
 8005258:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800525a:	e009      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	75fb      	strb	r3, [r7, #23]
      break;
 8005260:	e006      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005262:	bf00      	nop
 8005264:	e004      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005266:	bf00      	nop
 8005268:	e002      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800526a:	bf00      	nop
 800526c:	e000      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800526e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005270:	7dfb      	ldrb	r3, [r7, #23]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10a      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005276:	4b3c      	ldr	r3, [pc, #240]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800527a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005284:	4938      	ldr	r1, [pc, #224]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005286:	4313      	orrs	r3, r2
 8005288:	658b      	str	r3, [r1, #88]	; 0x58
 800528a:	e001      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800528c:	7dfb      	ldrb	r3, [r7, #23]
 800528e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0308 	and.w	r3, r3, #8
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01a      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a6:	d10a      	bne.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3324      	adds	r3, #36	; 0x24
 80052ac:	2102      	movs	r1, #2
 80052ae:	4618      	mov	r0, r3
 80052b0:	f001 fb1e 	bl	80068f0 <RCCEx_PLL3_Config>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80052be:	4b2a      	ldr	r3, [pc, #168]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80052c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052cc:	4926      	ldr	r1, [pc, #152]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0310 	and.w	r3, r3, #16
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d01a      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052e8:	d10a      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	3324      	adds	r3, #36	; 0x24
 80052ee:	2102      	movs	r1, #2
 80052f0:	4618      	mov	r0, r3
 80052f2:	f001 fafd 	bl	80068f0 <RCCEx_PLL3_Config>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005300:	4b19      	ldr	r3, [pc, #100]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005304:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800530e:	4916      	ldr	r1, [pc, #88]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005310:	4313      	orrs	r3, r2
 8005312:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d036      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005326:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800532a:	d01f      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800532c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005330:	d817      	bhi.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8005336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800533a:	d009      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800533c:	e011      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	3304      	adds	r3, #4
 8005342:	2100      	movs	r1, #0
 8005344:	4618      	mov	r0, r3
 8005346:	f001 fa21 	bl	800678c <RCCEx_PLL2_Config>
 800534a:	4603      	mov	r3, r0
 800534c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800534e:	e00e      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3324      	adds	r3, #36	; 0x24
 8005354:	2102      	movs	r1, #2
 8005356:	4618      	mov	r0, r3
 8005358:	f001 faca 	bl	80068f0 <RCCEx_PLL3_Config>
 800535c:	4603      	mov	r3, r0
 800535e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005360:	e005      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	75fb      	strb	r3, [r7, #23]
      break;
 8005366:	e002      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005368:	58024400 	.word	0x58024400
      break;
 800536c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800536e:	7dfb      	ldrb	r3, [r7, #23]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10a      	bne.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005374:	4b93      	ldr	r3, [pc, #588]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005378:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005382:	4990      	ldr	r1, [pc, #576]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005384:	4313      	orrs	r3, r2
 8005386:	658b      	str	r3, [r1, #88]	; 0x58
 8005388:	e001      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800538a:	7dfb      	ldrb	r3, [r7, #23]
 800538c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d033      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053a4:	d01c      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80053a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053aa:	d816      	bhi.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80053ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053b0:	d003      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80053b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053b6:	d007      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80053b8:	e00f      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053ba:	4b82      	ldr	r3, [pc, #520]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053be:	4a81      	ldr	r2, [pc, #516]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80053c6:	e00c      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	3324      	adds	r3, #36	; 0x24
 80053cc:	2101      	movs	r1, #1
 80053ce:	4618      	mov	r0, r3
 80053d0:	f001 fa8e 	bl	80068f0 <RCCEx_PLL3_Config>
 80053d4:	4603      	mov	r3, r0
 80053d6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80053d8:	e003      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	75fb      	strb	r3, [r7, #23]
      break;
 80053de:	e000      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80053e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053e2:	7dfb      	ldrb	r3, [r7, #23]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10a      	bne.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053e8:	4b76      	ldr	r3, [pc, #472]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053f6:	4973      	ldr	r1, [pc, #460]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	654b      	str	r3, [r1, #84]	; 0x54
 80053fc:	e001      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053fe:	7dfb      	ldrb	r3, [r7, #23]
 8005400:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d029      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8005416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800541a:	d007      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800541c:	e00f      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800541e:	4b69      	ldr	r3, [pc, #420]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005422:	4a68      	ldr	r2, [pc, #416]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005428:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800542a:	e00b      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3304      	adds	r3, #4
 8005430:	2102      	movs	r1, #2
 8005432:	4618      	mov	r0, r3
 8005434:	f001 f9aa 	bl	800678c <RCCEx_PLL2_Config>
 8005438:	4603      	mov	r3, r0
 800543a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800543c:	e002      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	75fb      	strb	r3, [r7, #23]
      break;
 8005442:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005444:	7dfb      	ldrb	r3, [r7, #23]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d109      	bne.n	800545e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800544a:	4b5e      	ldr	r3, [pc, #376]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800544c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800544e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005456:	495b      	ldr	r1, [pc, #364]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005458:	4313      	orrs	r3, r2
 800545a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800545c:	e001      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800545e:	7dfb      	ldrb	r3, [r7, #23]
 8005460:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	3324      	adds	r3, #36	; 0x24
 8005472:	2102      	movs	r1, #2
 8005474:	4618      	mov	r0, r3
 8005476:	f001 fa3b 	bl	80068f0 <RCCEx_PLL3_Config>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d030      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005494:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005498:	d017      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800549a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800549e:	d811      	bhi.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80054a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054a4:	d013      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80054a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054aa:	d80b      	bhi.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d010      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80054b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054b4:	d106      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054b6:	4b43      	ldr	r3, [pc, #268]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ba:	4a42      	ldr	r2, [pc, #264]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80054c2:	e007      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	75fb      	strb	r3, [r7, #23]
      break;
 80054c8:	e004      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80054ca:	bf00      	nop
 80054cc:	e002      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80054ce:	bf00      	nop
 80054d0:	e000      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80054d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054d4:	7dfb      	ldrb	r3, [r7, #23]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d109      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054da:	4b3a      	ldr	r3, [pc, #232]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054e6:	4937      	ldr	r1, [pc, #220]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	654b      	str	r3, [r1, #84]	; 0x54
 80054ec:	e001      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ee:	7dfb      	ldrb	r3, [r7, #23]
 80054f0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d008      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054fe:	4b31      	ldr	r3, [pc, #196]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005502:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550a:	492e      	ldr	r1, [pc, #184]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800550c:	4313      	orrs	r3, r2
 800550e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d009      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800551c:	4b29      	ldr	r3, [pc, #164]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800552a:	4926      	ldr	r1, [pc, #152]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800552c:	4313      	orrs	r3, r2
 800552e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d008      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800553c:	4b21      	ldr	r3, [pc, #132]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800553e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005540:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005548:	491e      	ldr	r1, [pc, #120]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800554a:	4313      	orrs	r3, r2
 800554c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00d      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800555a:	4b1a      	ldr	r3, [pc, #104]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	4a19      	ldr	r2, [pc, #100]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005560:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005564:	6113      	str	r3, [r2, #16]
 8005566:	4b17      	ldr	r3, [pc, #92]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005568:	691a      	ldr	r2, [r3, #16]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005570:	4914      	ldr	r1, [pc, #80]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005572:	4313      	orrs	r3, r2
 8005574:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	da08      	bge.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800557e:	4b11      	ldr	r3, [pc, #68]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005582:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800558a:	490e      	ldr	r1, [pc, #56]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800558c:	4313      	orrs	r3, r2
 800558e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d009      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800559c:	4b09      	ldr	r3, [pc, #36]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800559e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055aa:	4906      	ldr	r1, [pc, #24]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80055b0:	7dbb      	ldrb	r3, [r7, #22]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80055b6:	2300      	movs	r3, #0
 80055b8:	e000      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	58024400 	.word	0x58024400

080055c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b090      	sub	sp, #64	; 0x40
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055d6:	f040 8095 	bne.w	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80055da:	4bae      	ldr	r3, [pc, #696]	; (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80055dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055de:	f003 0307 	and.w	r3, r3, #7
 80055e2:	633b      	str	r3, [r7, #48]	; 0x30
 80055e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	f200 8088 	bhi.w	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80055ec:	a201      	add	r2, pc, #4	; (adr r2, 80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80055ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f2:	bf00      	nop
 80055f4:	08005609 	.word	0x08005609
 80055f8:	08005631 	.word	0x08005631
 80055fc:	08005659 	.word	0x08005659
 8005600:	080056f5 	.word	0x080056f5
 8005604:	08005681 	.word	0x08005681

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005608:	4ba2      	ldr	r3, [pc, #648]	; (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005610:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005614:	d108      	bne.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800561a:	4618      	mov	r0, r3
 800561c:	f000 ff64 	bl	80064e8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005622:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005624:	f000 bc95 	b.w	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005628:	2300      	movs	r3, #0
 800562a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800562c:	f000 bc91 	b.w	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005630:	4b98      	ldr	r3, [pc, #608]	; (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005638:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800563c:	d108      	bne.n	8005650 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800563e:	f107 0318 	add.w	r3, r7, #24
 8005642:	4618      	mov	r0, r3
 8005644:	f000 fca8 	bl	8005f98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800564c:	f000 bc81 	b.w	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005650:	2300      	movs	r3, #0
 8005652:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005654:	f000 bc7d 	b.w	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005658:	4b8e      	ldr	r3, [pc, #568]	; (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005664:	d108      	bne.n	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005666:	f107 030c 	add.w	r3, r7, #12
 800566a:	4618      	mov	r0, r3
 800566c:	f000 fde8 	bl	8006240 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005674:	f000 bc6d 	b.w	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005678:	2300      	movs	r3, #0
 800567a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800567c:	f000 bc69 	b.w	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005680:	4b84      	ldr	r3, [pc, #528]	; (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005684:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005688:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800568a:	4b82      	ldr	r3, [pc, #520]	; (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0304 	and.w	r3, r3, #4
 8005692:	2b04      	cmp	r3, #4
 8005694:	d10c      	bne.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8005696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005698:	2b00      	cmp	r3, #0
 800569a:	d109      	bne.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800569c:	4b7d      	ldr	r3, [pc, #500]	; (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	08db      	lsrs	r3, r3, #3
 80056a2:	f003 0303 	and.w	r3, r3, #3
 80056a6:	4a7c      	ldr	r2, [pc, #496]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80056a8:	fa22 f303 	lsr.w	r3, r2, r3
 80056ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056ae:	e01f      	b.n	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80056b0:	4b78      	ldr	r3, [pc, #480]	; (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056bc:	d106      	bne.n	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80056be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056c4:	d102      	bne.n	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80056c6:	4b75      	ldr	r3, [pc, #468]	; (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80056c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056ca:	e011      	b.n	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80056cc:	4b71      	ldr	r3, [pc, #452]	; (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056d8:	d106      	bne.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80056da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056e0:	d102      	bne.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80056e2:	4b6f      	ldr	r3, [pc, #444]	; (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80056e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056e6:	e003      	b.n	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80056e8:	2300      	movs	r3, #0
 80056ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80056ec:	f000 bc31 	b.w	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80056f0:	f000 bc2f 	b.w	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80056f4:	4b6b      	ldr	r3, [pc, #428]	; (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80056f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056f8:	f000 bc2b 	b.w	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80056fc:	2300      	movs	r3, #0
 80056fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005700:	f000 bc27 	b.w	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800570a:	f040 8095 	bne.w	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800570e:	4b61      	ldr	r3, [pc, #388]	; (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005712:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005716:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800571e:	d04d      	beq.n	80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8005720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005726:	f200 8084 	bhi.w	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	2bc0      	cmp	r3, #192	; 0xc0
 800572e:	d07d      	beq.n	800582c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005732:	2bc0      	cmp	r3, #192	; 0xc0
 8005734:	d87d      	bhi.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005738:	2b80      	cmp	r3, #128	; 0x80
 800573a:	d02d      	beq.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573e:	2b80      	cmp	r3, #128	; 0x80
 8005740:	d877      	bhi.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8005748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574a:	2b40      	cmp	r3, #64	; 0x40
 800574c:	d012      	beq.n	8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800574e:	e070      	b.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005750:	4b50      	ldr	r3, [pc, #320]	; (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005758:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800575c:	d107      	bne.n	800576e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800575e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005762:	4618      	mov	r0, r3
 8005764:	f000 fec0 	bl	80064e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800576c:	e3f1      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800576e:	2300      	movs	r3, #0
 8005770:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005772:	e3ee      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005774:	4b47      	ldr	r3, [pc, #284]	; (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800577c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005780:	d107      	bne.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005782:	f107 0318 	add.w	r3, r7, #24
 8005786:	4618      	mov	r0, r3
 8005788:	f000 fc06 	bl	8005f98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005790:	e3df      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005792:	2300      	movs	r3, #0
 8005794:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005796:	e3dc      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005798:	4b3e      	ldr	r3, [pc, #248]	; (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057a4:	d107      	bne.n	80057b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057a6:	f107 030c 	add.w	r3, r7, #12
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 fd48 	bl	8006240 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80057b4:	e3cd      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80057b6:	2300      	movs	r3, #0
 80057b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057ba:	e3ca      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80057bc:	4b35      	ldr	r3, [pc, #212]	; (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80057be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057c4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80057c6:	4b33      	ldr	r3, [pc, #204]	; (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0304 	and.w	r3, r3, #4
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	d10c      	bne.n	80057ec <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80057d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d109      	bne.n	80057ec <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057d8:	4b2e      	ldr	r3, [pc, #184]	; (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	08db      	lsrs	r3, r3, #3
 80057de:	f003 0303 	and.w	r3, r3, #3
 80057e2:	4a2d      	ldr	r2, [pc, #180]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80057e4:	fa22 f303 	lsr.w	r3, r2, r3
 80057e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057ea:	e01e      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80057ec:	4b29      	ldr	r3, [pc, #164]	; (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057f8:	d106      	bne.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80057fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005800:	d102      	bne.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005802:	4b26      	ldr	r3, [pc, #152]	; (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005804:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005806:	e010      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005808:	4b22      	ldr	r3, [pc, #136]	; (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005810:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005814:	d106      	bne.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8005816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800581c:	d102      	bne.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800581e:	4b20      	ldr	r3, [pc, #128]	; (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005820:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005822:	e002      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005824:	2300      	movs	r3, #0
 8005826:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005828:	e393      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800582a:	e392      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800582c:	4b1d      	ldr	r3, [pc, #116]	; (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800582e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005830:	e38f      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005832:	2300      	movs	r3, #0
 8005834:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005836:	e38c      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800583e:	f040 80a7 	bne.w	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8005842:	4b14      	ldr	r3, [pc, #80]	; (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005846:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800584a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800584c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005852:	d05f      	beq.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8005854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005856:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800585a:	f200 8096 	bhi.w	800598a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800585e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005860:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005864:	f000 808e 	beq.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8005868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800586e:	f200 808c 	bhi.w	800598a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005874:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005878:	d03a      	beq.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800587a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005880:	f200 8083 	bhi.w	800598a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00e      	beq.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800588a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005890:	d01c      	beq.n	80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005892:	e07a      	b.n	800598a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005894:	58024400 	.word	0x58024400
 8005898:	03d09000 	.word	0x03d09000
 800589c:	003d0900 	.word	0x003d0900
 80058a0:	007a1200 	.word	0x007a1200
 80058a4:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80058a8:	4baa      	ldr	r3, [pc, #680]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058b4:	d107      	bne.n	80058c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 fe14 	bl	80064e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80058c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80058c4:	e345      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80058c6:	2300      	movs	r3, #0
 80058c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058ca:	e342      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80058cc:	4ba1      	ldr	r3, [pc, #644]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058d8:	d107      	bne.n	80058ea <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058da:	f107 0318 	add.w	r3, r7, #24
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fb5a 	bl	8005f98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80058e8:	e333      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80058ea:	2300      	movs	r3, #0
 80058ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058ee:	e330      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80058f0:	4b98      	ldr	r3, [pc, #608]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058fc:	d107      	bne.n	800590e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058fe:	f107 030c 	add.w	r3, r7, #12
 8005902:	4618      	mov	r0, r3
 8005904:	f000 fc9c 	bl	8006240 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800590c:	e321      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800590e:	2300      	movs	r3, #0
 8005910:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005912:	e31e      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005914:	4b8f      	ldr	r3, [pc, #572]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005918:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800591c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800591e:	4b8d      	ldr	r3, [pc, #564]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0304 	and.w	r3, r3, #4
 8005926:	2b04      	cmp	r3, #4
 8005928:	d10c      	bne.n	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800592a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592c:	2b00      	cmp	r3, #0
 800592e:	d109      	bne.n	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005930:	4b88      	ldr	r3, [pc, #544]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	08db      	lsrs	r3, r3, #3
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	4a87      	ldr	r2, [pc, #540]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800593c:	fa22 f303 	lsr.w	r3, r2, r3
 8005940:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005942:	e01e      	b.n	8005982 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005944:	4b83      	ldr	r3, [pc, #524]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800594c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005950:	d106      	bne.n	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8005952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005954:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005958:	d102      	bne.n	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800595a:	4b80      	ldr	r3, [pc, #512]	; (8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800595c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800595e:	e010      	b.n	8005982 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005960:	4b7c      	ldr	r3, [pc, #496]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005968:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800596c:	d106      	bne.n	800597c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800596e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005974:	d102      	bne.n	800597c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005976:	4b7a      	ldr	r3, [pc, #488]	; (8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005978:	63fb      	str	r3, [r7, #60]	; 0x3c
 800597a:	e002      	b.n	8005982 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800597c:	2300      	movs	r3, #0
 800597e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005980:	e2e7      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005982:	e2e6      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005984:	4b77      	ldr	r3, [pc, #476]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005986:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005988:	e2e3      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800598a:	2300      	movs	r3, #0
 800598c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800598e:	e2e0      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005996:	f040 809c 	bne.w	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800599a:	4b6e      	ldr	r3, [pc, #440]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800599c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80059a2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80059a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059aa:	d054      	beq.n	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80059ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059b2:	f200 808b 	bhi.w	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80059b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80059bc:	f000 8083 	beq.w	8005ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80059c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80059c6:	f200 8081 	bhi.w	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80059ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059d0:	d02f      	beq.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80059d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059d8:	d878      	bhi.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80059da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d004      	beq.n	80059ea <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059e6:	d012      	beq.n	8005a0e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80059e8:	e070      	b.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80059ea:	4b5a      	ldr	r3, [pc, #360]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059f6:	d107      	bne.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059fc:	4618      	mov	r0, r3
 80059fe:	f000 fd73 	bl	80064e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005a06:	e2a4      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a0c:	e2a1      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a0e:	4b51      	ldr	r3, [pc, #324]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a1a:	d107      	bne.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a1c:	f107 0318 	add.w	r3, r7, #24
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 fab9 	bl	8005f98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8005a2a:	e292      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a30:	e28f      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a32:	4b48      	ldr	r3, [pc, #288]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a3e:	d107      	bne.n	8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a40:	f107 030c 	add.w	r3, r7, #12
 8005a44:	4618      	mov	r0, r3
 8005a46:	f000 fbfb 	bl	8006240 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005a4e:	e280      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005a50:	2300      	movs	r3, #0
 8005a52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a54:	e27d      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005a56:	4b3f      	ldr	r3, [pc, #252]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a5e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a60:	4b3c      	ldr	r3, [pc, #240]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b04      	cmp	r3, #4
 8005a6a:	d10c      	bne.n	8005a86 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8005a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d109      	bne.n	8005a86 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a72:	4b38      	ldr	r3, [pc, #224]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	08db      	lsrs	r3, r3, #3
 8005a78:	f003 0303 	and.w	r3, r3, #3
 8005a7c:	4a36      	ldr	r2, [pc, #216]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a84:	e01e      	b.n	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a86:	4b33      	ldr	r3, [pc, #204]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a92:	d106      	bne.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8005a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a9a:	d102      	bne.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005a9c:	4b2f      	ldr	r3, [pc, #188]	; (8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aa0:	e010      	b.n	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005aa2:	4b2c      	ldr	r3, [pc, #176]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005aae:	d106      	bne.n	8005abe <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ab6:	d102      	bne.n	8005abe <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005ab8:	4b29      	ldr	r3, [pc, #164]	; (8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005aba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005abc:	e002      	b.n	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005ac2:	e246      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005ac4:	e245      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005ac6:	4b27      	ldr	r3, [pc, #156]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005aca:	e242      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005acc:	2300      	movs	r3, #0
 8005ace:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ad0:	e23f      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad8:	f040 80a8 	bne.w	8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005adc:	4b1d      	ldr	r3, [pc, #116]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005ae4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005aec:	d060      	beq.n	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8005aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005af4:	f200 8097 	bhi.w	8005c26 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005afe:	f000 808f 	beq.w	8005c20 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8005b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b08:	f200 808d 	bhi.w	8005c26 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b12:	d03b      	beq.n	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8005b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b1a:	f200 8084 	bhi.w	8005c26 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d004      	beq.n	8005b2e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8005b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b2a:	d01d      	beq.n	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8005b2c:	e07b      	b.n	8005c26 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b2e:	4b09      	ldr	r3, [pc, #36]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b3a:	d107      	bne.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b40:	4618      	mov	r0, r3
 8005b42:	f000 fcd1 	bl	80064e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b48:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005b4a:	e202      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b50:	e1ff      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005b52:	bf00      	nop
 8005b54:	58024400 	.word	0x58024400
 8005b58:	03d09000 	.word	0x03d09000
 8005b5c:	003d0900 	.word	0x003d0900
 8005b60:	007a1200 	.word	0x007a1200
 8005b64:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b68:	4ba3      	ldr	r3, [pc, #652]	; (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b74:	d107      	bne.n	8005b86 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b76:	f107 0318 	add.w	r3, r7, #24
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 fa0c 	bl	8005f98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005b84:	e1e5      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005b86:	2300      	movs	r3, #0
 8005b88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b8a:	e1e2      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b8c:	4b9a      	ldr	r3, [pc, #616]	; (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b98:	d107      	bne.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b9a:	f107 030c 	add.w	r3, r7, #12
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 fb4e 	bl	8006240 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005ba8:	e1d3      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005baa:	2300      	movs	r3, #0
 8005bac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bae:	e1d0      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005bb0:	4b91      	ldr	r3, [pc, #580]	; (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bb8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005bba:	4b8f      	ldr	r3, [pc, #572]	; (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0304 	and.w	r3, r3, #4
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d10c      	bne.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8005bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d109      	bne.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005bcc:	4b8a      	ldr	r3, [pc, #552]	; (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	08db      	lsrs	r3, r3, #3
 8005bd2:	f003 0303 	and.w	r3, r3, #3
 8005bd6:	4a89      	ldr	r2, [pc, #548]	; (8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bde:	e01e      	b.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005be0:	4b85      	ldr	r3, [pc, #532]	; (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bec:	d106      	bne.n	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8005bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bf4:	d102      	bne.n	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005bf6:	4b82      	ldr	r3, [pc, #520]	; (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bfa:	e010      	b.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005bfc:	4b7e      	ldr	r3, [pc, #504]	; (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c08:	d106      	bne.n	8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c10:	d102      	bne.n	8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005c12:	4b7c      	ldr	r3, [pc, #496]	; (8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005c14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c16:	e002      	b.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005c1c:	e199      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005c1e:	e198      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005c20:	4b79      	ldr	r3, [pc, #484]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005c22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c24:	e195      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005c26:	2300      	movs	r3, #0
 8005c28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c2a:	e192      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c32:	d173      	bne.n	8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005c34:	4b70      	ldr	r3, [pc, #448]	; (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c3c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c44:	d02f      	beq.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8005c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c4c:	d863      	bhi.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8005c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d004      	beq.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8005c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c5a:	d012      	beq.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8005c5c:	e05b      	b.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c5e:	4b66      	ldr	r3, [pc, #408]	; (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c6a:	d107      	bne.n	8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c6c:	f107 0318 	add.w	r3, r7, #24
 8005c70:	4618      	mov	r0, r3
 8005c72:	f000 f991 	bl	8005f98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c7a:	e16a      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c80:	e167      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c82:	4b5d      	ldr	r3, [pc, #372]	; (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c8e:	d107      	bne.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c90:	f107 030c 	add.w	r3, r7, #12
 8005c94:	4618      	mov	r0, r3
 8005c96:	f000 fad3 	bl	8006240 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c9e:	e158      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ca4:	e155      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005ca6:	4b54      	ldr	r3, [pc, #336]	; (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005caa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005cae:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005cb0:	4b51      	ldr	r3, [pc, #324]	; (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d10c      	bne.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8005cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d109      	bne.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005cc2:	4b4d      	ldr	r3, [pc, #308]	; (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	08db      	lsrs	r3, r3, #3
 8005cc8:	f003 0303 	and.w	r3, r3, #3
 8005ccc:	4a4b      	ldr	r2, [pc, #300]	; (8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005cce:	fa22 f303 	lsr.w	r3, r2, r3
 8005cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cd4:	e01e      	b.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005cd6:	4b48      	ldr	r3, [pc, #288]	; (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ce2:	d106      	bne.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8005ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cea:	d102      	bne.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005cec:	4b44      	ldr	r3, [pc, #272]	; (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cf0:	e010      	b.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005cf2:	4b41      	ldr	r3, [pc, #260]	; (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cfe:	d106      	bne.n	8005d0e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8005d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d06:	d102      	bne.n	8005d0e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005d08:	4b3e      	ldr	r3, [pc, #248]	; (8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d0c:	e002      	b.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005d12:	e11e      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005d14:	e11d      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005d16:	2300      	movs	r3, #0
 8005d18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d1a:	e11a      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d22:	d133      	bne.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005d24:	4b34      	ldr	r3, [pc, #208]	; (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d2c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d004      	beq.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8005d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d3a:	d012      	beq.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8005d3c:	e023      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d3e:	4b2e      	ldr	r3, [pc, #184]	; (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d4a:	d107      	bne.n	8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 fbc9 	bl	80064e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d58:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005d5a:	e0fa      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d60:	e0f7      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d62:	4b25      	ldr	r3, [pc, #148]	; (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d6e:	d107      	bne.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d70:	f107 0318 	add.w	r3, r7, #24
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 f90f 	bl	8005f98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005d7e:	e0e8      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005d80:	2300      	movs	r3, #0
 8005d82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d84:	e0e5      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005d86:	2300      	movs	r3, #0
 8005d88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d8a:	e0e2      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d92:	f040 808f 	bne.w	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005d96:	4b18      	ldr	r3, [pc, #96]	; (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005d9e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005da6:	d075      	beq.n	8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8005da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005daa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dae:	d87e      	bhi.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db6:	d060      	beq.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dbe:	d876      	bhi.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005dc6:	d045      	beq.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8005dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005dce:	d86e      	bhi.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dd6:	d02b      	beq.n	8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8005dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dde:	d866      	bhi.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d004      	beq.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8005de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dec:	d00e      	beq.n	8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005dee:	e05e      	b.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005df0:	f000 f8bc 	bl	8005f6c <HAL_RCCEx_GetD3PCLK1Freq>
 8005df4:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005df6:	e0ac      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005df8:	58024400 	.word	0x58024400
 8005dfc:	03d09000 	.word	0x03d09000
 8005e00:	003d0900 	.word	0x003d0900
 8005e04:	007a1200 	.word	0x007a1200
 8005e08:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e0c:	4b53      	ldr	r3, [pc, #332]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e18:	d107      	bne.n	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e1a:	f107 0318 	add.w	r3, r7, #24
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 f8ba 	bl	8005f98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005e28:	e093      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e2e:	e090      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e30:	4b4a      	ldr	r3, [pc, #296]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e3c:	d107      	bne.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e3e:	f107 030c 	add.w	r3, r7, #12
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 f9fc 	bl	8006240 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005e4c:	e081      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e52:	e07e      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e54:	4b41      	ldr	r3, [pc, #260]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0304 	and.w	r3, r3, #4
 8005e5c:	2b04      	cmp	r3, #4
 8005e5e:	d109      	bne.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e60:	4b3e      	ldr	r3, [pc, #248]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	08db      	lsrs	r3, r3, #3
 8005e66:	f003 0303 	and.w	r3, r3, #3
 8005e6a:	4a3d      	ldr	r2, [pc, #244]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8005e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e70:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005e72:	e06e      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e74:	2300      	movs	r3, #0
 8005e76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e78:	e06b      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005e7a:	4b38      	ldr	r3, [pc, #224]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e86:	d102      	bne.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8005e88:	4b36      	ldr	r3, [pc, #216]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005e8c:	e061      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e92:	e05e      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e94:	4b31      	ldr	r3, [pc, #196]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ea0:	d102      	bne.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8005ea2:	4b31      	ldr	r3, [pc, #196]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005ea6:	e054      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005eac:	e051      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005eb2:	e04e      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eba:	d148      	bne.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005ebc:	4b27      	ldr	r3, [pc, #156]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ec0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ec4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ecc:	d02a      	beq.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8005ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ed4:	d838      	bhi.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d004      	beq.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ede:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ee2:	d00d      	beq.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8005ee4:	e030      	b.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005ee6:	4b1d      	ldr	r3, [pc, #116]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ef2:	d102      	bne.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8005ef4:	4b1c      	ldr	r3, [pc, #112]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005ef8:	e02b      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005efa:	2300      	movs	r3, #0
 8005efc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005efe:	e028      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f00:	4b16      	ldr	r3, [pc, #88]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f0c:	d107      	bne.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 fae8 	bl	80064e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f1c:	e019      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f22:	e016      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f24:	4b0d      	ldr	r3, [pc, #52]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f30:	d107      	bne.n	8005f42 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f32:	f107 0318 	add.w	r3, r7, #24
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 f82e 	bl	8005f98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f40:	e007      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f42:	2300      	movs	r3, #0
 8005f44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f46:	e004      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f4c:	e001      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3740      	adds	r7, #64	; 0x40
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	58024400 	.word	0x58024400
 8005f60:	03d09000 	.word	0x03d09000
 8005f64:	003d0900 	.word	0x003d0900
 8005f68:	007a1200 	.word	0x007a1200

08005f6c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005f70:	f7fe fb8e 	bl	8004690 <HAL_RCC_GetHCLKFreq>
 8005f74:	4602      	mov	r2, r0
 8005f76:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	091b      	lsrs	r3, r3, #4
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	4904      	ldr	r1, [pc, #16]	; (8005f94 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005f82:	5ccb      	ldrb	r3, [r1, r3]
 8005f84:	f003 031f 	and.w	r3, r3, #31
 8005f88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	58024400 	.word	0x58024400
 8005f94:	08009184 	.word	0x08009184

08005f98 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b089      	sub	sp, #36	; 0x24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fa0:	4ba1      	ldr	r3, [pc, #644]	; (8006228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa4:	f003 0303 	and.w	r3, r3, #3
 8005fa8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005faa:	4b9f      	ldr	r3, [pc, #636]	; (8006228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fae:	0b1b      	lsrs	r3, r3, #12
 8005fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fb4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005fb6:	4b9c      	ldr	r3, [pc, #624]	; (8006228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fba:	091b      	lsrs	r3, r3, #4
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005fc2:	4b99      	ldr	r3, [pc, #612]	; (8006228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc6:	08db      	lsrs	r3, r3, #3
 8005fc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	fb02 f303 	mul.w	r3, r2, r3
 8005fd2:	ee07 3a90 	vmov	s15, r3
 8005fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fda:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 8111 	beq.w	8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	f000 8083 	beq.w	80060f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	f200 80a1 	bhi.w	8006138 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d003      	beq.n	8006004 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d056      	beq.n	80060b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006002:	e099      	b.n	8006138 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006004:	4b88      	ldr	r3, [pc, #544]	; (8006228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0320 	and.w	r3, r3, #32
 800600c:	2b00      	cmp	r3, #0
 800600e:	d02d      	beq.n	800606c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006010:	4b85      	ldr	r3, [pc, #532]	; (8006228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	08db      	lsrs	r3, r3, #3
 8006016:	f003 0303 	and.w	r3, r3, #3
 800601a:	4a84      	ldr	r2, [pc, #528]	; (800622c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800601c:	fa22 f303 	lsr.w	r3, r2, r3
 8006020:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	ee07 3a90 	vmov	s15, r3
 8006028:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	ee07 3a90 	vmov	s15, r3
 8006032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800603a:	4b7b      	ldr	r3, [pc, #492]	; (8006228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800603c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006042:	ee07 3a90 	vmov	s15, r3
 8006046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800604a:	ed97 6a03 	vldr	s12, [r7, #12]
 800604e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006230 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800605a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800605e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006066:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800606a:	e087      	b.n	800617c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	ee07 3a90 	vmov	s15, r3
 8006072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006076:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006234 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800607a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800607e:	4b6a      	ldr	r3, [pc, #424]	; (8006228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006086:	ee07 3a90 	vmov	s15, r3
 800608a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800608e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006092:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006230 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800609a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800609e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060ae:	e065      	b.n	800617c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	ee07 3a90 	vmov	s15, r3
 80060b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006238 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80060be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060c2:	4b59      	ldr	r3, [pc, #356]	; (8006228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ca:	ee07 3a90 	vmov	s15, r3
 80060ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80060d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006230 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060f2:	e043      	b.n	800617c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	ee07 3a90 	vmov	s15, r3
 80060fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800623c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006106:	4b48      	ldr	r3, [pc, #288]	; (8006228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800610e:	ee07 3a90 	vmov	s15, r3
 8006112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006116:	ed97 6a03 	vldr	s12, [r7, #12]
 800611a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006230 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800611e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800612a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800612e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006132:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006136:	e021      	b.n	800617c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	ee07 3a90 	vmov	s15, r3
 800613e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006142:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006238 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800614a:	4b37      	ldr	r3, [pc, #220]	; (8006228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800614c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006152:	ee07 3a90 	vmov	s15, r3
 8006156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800615a:	ed97 6a03 	vldr	s12, [r7, #12]
 800615e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006230 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800616a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800616e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006176:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800617a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800617c:	4b2a      	ldr	r3, [pc, #168]	; (8006228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800617e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006180:	0a5b      	lsrs	r3, r3, #9
 8006182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006186:	ee07 3a90 	vmov	s15, r3
 800618a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800618e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006192:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006196:	edd7 6a07 	vldr	s13, [r7, #28]
 800619a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800619e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061a2:	ee17 2a90 	vmov	r2, s15
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80061aa:	4b1f      	ldr	r3, [pc, #124]	; (8006228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ae:	0c1b      	lsrs	r3, r3, #16
 80061b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061b4:	ee07 3a90 	vmov	s15, r3
 80061b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80061c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061d0:	ee17 2a90 	vmov	r2, s15
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80061d8:	4b13      	ldr	r3, [pc, #76]	; (8006228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061dc:	0e1b      	lsrs	r3, r3, #24
 80061de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061e2:	ee07 3a90 	vmov	s15, r3
 80061e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80061f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061fe:	ee17 2a90 	vmov	r2, s15
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006206:	e008      	b.n	800621a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	609a      	str	r2, [r3, #8]
}
 800621a:	bf00      	nop
 800621c:	3724      	adds	r7, #36	; 0x24
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	58024400 	.word	0x58024400
 800622c:	03d09000 	.word	0x03d09000
 8006230:	46000000 	.word	0x46000000
 8006234:	4c742400 	.word	0x4c742400
 8006238:	4a742400 	.word	0x4a742400
 800623c:	4af42400 	.word	0x4af42400

08006240 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006240:	b480      	push	{r7}
 8006242:	b089      	sub	sp, #36	; 0x24
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006248:	4ba1      	ldr	r3, [pc, #644]	; (80064d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800624a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624c:	f003 0303 	and.w	r3, r3, #3
 8006250:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006252:	4b9f      	ldr	r3, [pc, #636]	; (80064d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006256:	0d1b      	lsrs	r3, r3, #20
 8006258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800625c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800625e:	4b9c      	ldr	r3, [pc, #624]	; (80064d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006262:	0a1b      	lsrs	r3, r3, #8
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800626a:	4b99      	ldr	r3, [pc, #612]	; (80064d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800626c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800626e:	08db      	lsrs	r3, r3, #3
 8006270:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	fb02 f303 	mul.w	r3, r2, r3
 800627a:	ee07 3a90 	vmov	s15, r3
 800627e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006282:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 8111 	beq.w	80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	2b02      	cmp	r3, #2
 8006292:	f000 8083 	beq.w	800639c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	2b02      	cmp	r3, #2
 800629a:	f200 80a1 	bhi.w	80063e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d056      	beq.n	8006358 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80062aa:	e099      	b.n	80063e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062ac:	4b88      	ldr	r3, [pc, #544]	; (80064d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0320 	and.w	r3, r3, #32
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d02d      	beq.n	8006314 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80062b8:	4b85      	ldr	r3, [pc, #532]	; (80064d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	08db      	lsrs	r3, r3, #3
 80062be:	f003 0303 	and.w	r3, r3, #3
 80062c2:	4a84      	ldr	r2, [pc, #528]	; (80064d4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80062c4:	fa22 f303 	lsr.w	r3, r2, r3
 80062c8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	ee07 3a90 	vmov	s15, r3
 80062d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	ee07 3a90 	vmov	s15, r3
 80062da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062e2:	4b7b      	ldr	r3, [pc, #492]	; (80064d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ea:	ee07 3a90 	vmov	s15, r3
 80062ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80062f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80064d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006302:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800630a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800630e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006312:	e087      	b.n	8006424 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	ee07 3a90 	vmov	s15, r3
 800631a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800631e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80064dc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006326:	4b6a      	ldr	r3, [pc, #424]	; (80064d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800632e:	ee07 3a90 	vmov	s15, r3
 8006332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006336:	ed97 6a03 	vldr	s12, [r7, #12]
 800633a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80064d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800633e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006346:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800634a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800634e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006352:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006356:	e065      	b.n	8006424 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	ee07 3a90 	vmov	s15, r3
 800635e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006362:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80064e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800636a:	4b59      	ldr	r3, [pc, #356]	; (80064d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006372:	ee07 3a90 	vmov	s15, r3
 8006376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800637a:	ed97 6a03 	vldr	s12, [r7, #12]
 800637e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80064d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800638a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800638e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006396:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800639a:	e043      	b.n	8006424 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	ee07 3a90 	vmov	s15, r3
 80063a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80064e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80063aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ae:	4b48      	ldr	r3, [pc, #288]	; (80064d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063b6:	ee07 3a90 	vmov	s15, r3
 80063ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063be:	ed97 6a03 	vldr	s12, [r7, #12]
 80063c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80064d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063de:	e021      	b.n	8006424 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	ee07 3a90 	vmov	s15, r3
 80063e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80064e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80063ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063f2:	4b37      	ldr	r3, [pc, #220]	; (80064d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063fa:	ee07 3a90 	vmov	s15, r3
 80063fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006402:	ed97 6a03 	vldr	s12, [r7, #12]
 8006406:	eddf 5a34 	vldr	s11, [pc, #208]	; 80064d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800640a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800640e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800641a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800641e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006422:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006424:	4b2a      	ldr	r3, [pc, #168]	; (80064d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006428:	0a5b      	lsrs	r3, r3, #9
 800642a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800642e:	ee07 3a90 	vmov	s15, r3
 8006432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006436:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800643a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800643e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800644a:	ee17 2a90 	vmov	r2, s15
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006452:	4b1f      	ldr	r3, [pc, #124]	; (80064d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006456:	0c1b      	lsrs	r3, r3, #16
 8006458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800645c:	ee07 3a90 	vmov	s15, r3
 8006460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006464:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006468:	ee37 7a87 	vadd.f32	s14, s15, s14
 800646c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006474:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006478:	ee17 2a90 	vmov	r2, s15
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006480:	4b13      	ldr	r3, [pc, #76]	; (80064d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006484:	0e1b      	lsrs	r3, r3, #24
 8006486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800648a:	ee07 3a90 	vmov	s15, r3
 800648e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006492:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006496:	ee37 7a87 	vadd.f32	s14, s15, s14
 800649a:	edd7 6a07 	vldr	s13, [r7, #28]
 800649e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064a6:	ee17 2a90 	vmov	r2, s15
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80064ae:	e008      	b.n	80064c2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	609a      	str	r2, [r3, #8]
}
 80064c2:	bf00      	nop
 80064c4:	3724      	adds	r7, #36	; 0x24
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	58024400 	.word	0x58024400
 80064d4:	03d09000 	.word	0x03d09000
 80064d8:	46000000 	.word	0x46000000
 80064dc:	4c742400 	.word	0x4c742400
 80064e0:	4a742400 	.word	0x4a742400
 80064e4:	4af42400 	.word	0x4af42400

080064e8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b089      	sub	sp, #36	; 0x24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80064f0:	4ba0      	ldr	r3, [pc, #640]	; (8006774 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f4:	f003 0303 	and.w	r3, r3, #3
 80064f8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80064fa:	4b9e      	ldr	r3, [pc, #632]	; (8006774 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fe:	091b      	lsrs	r3, r3, #4
 8006500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006504:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006506:	4b9b      	ldr	r3, [pc, #620]	; (8006774 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006510:	4b98      	ldr	r3, [pc, #608]	; (8006774 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006514:	08db      	lsrs	r3, r3, #3
 8006516:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	fb02 f303 	mul.w	r3, r2, r3
 8006520:	ee07 3a90 	vmov	s15, r3
 8006524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006528:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 8111 	beq.w	8006756 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	2b02      	cmp	r3, #2
 8006538:	f000 8083 	beq.w	8006642 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	2b02      	cmp	r3, #2
 8006540:	f200 80a1 	bhi.w	8006686 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d056      	beq.n	80065fe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006550:	e099      	b.n	8006686 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006552:	4b88      	ldr	r3, [pc, #544]	; (8006774 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0320 	and.w	r3, r3, #32
 800655a:	2b00      	cmp	r3, #0
 800655c:	d02d      	beq.n	80065ba <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800655e:	4b85      	ldr	r3, [pc, #532]	; (8006774 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	08db      	lsrs	r3, r3, #3
 8006564:	f003 0303 	and.w	r3, r3, #3
 8006568:	4a83      	ldr	r2, [pc, #524]	; (8006778 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800656a:	fa22 f303 	lsr.w	r3, r2, r3
 800656e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	ee07 3a90 	vmov	s15, r3
 8006576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	ee07 3a90 	vmov	s15, r3
 8006580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006584:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006588:	4b7a      	ldr	r3, [pc, #488]	; (8006774 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800658a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006590:	ee07 3a90 	vmov	s15, r3
 8006594:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006598:	ed97 6a03 	vldr	s12, [r7, #12]
 800659c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800677c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80065a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065b4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80065b8:	e087      	b.n	80066ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	ee07 3a90 	vmov	s15, r3
 80065c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065c4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006780 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80065c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065cc:	4b69      	ldr	r3, [pc, #420]	; (8006774 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065d4:	ee07 3a90 	vmov	s15, r3
 80065d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80065e0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800677c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80065e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065fc:	e065      	b.n	80066ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	ee07 3a90 	vmov	s15, r3
 8006604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006608:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006784 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800660c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006610:	4b58      	ldr	r3, [pc, #352]	; (8006774 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006618:	ee07 3a90 	vmov	s15, r3
 800661c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006620:	ed97 6a03 	vldr	s12, [r7, #12]
 8006624:	eddf 5a55 	vldr	s11, [pc, #340]	; 800677c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006628:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800662c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006630:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006634:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800663c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006640:	e043      	b.n	80066ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	ee07 3a90 	vmov	s15, r3
 8006648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800664c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006788 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006650:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006654:	4b47      	ldr	r3, [pc, #284]	; (8006774 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800665c:	ee07 3a90 	vmov	s15, r3
 8006660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006664:	ed97 6a03 	vldr	s12, [r7, #12]
 8006668:	eddf 5a44 	vldr	s11, [pc, #272]	; 800677c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800666c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006670:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006674:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006678:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800667c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006680:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006684:	e021      	b.n	80066ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	ee07 3a90 	vmov	s15, r3
 800668c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006690:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006780 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006694:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006698:	4b36      	ldr	r3, [pc, #216]	; (8006774 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800669a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066a0:	ee07 3a90 	vmov	s15, r3
 80066a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80066ac:	eddf 5a33 	vldr	s11, [pc, #204]	; 800677c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80066b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066c8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80066ca:	4b2a      	ldr	r3, [pc, #168]	; (8006774 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ce:	0a5b      	lsrs	r3, r3, #9
 80066d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066d4:	ee07 3a90 	vmov	s15, r3
 80066d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80066e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066f0:	ee17 2a90 	vmov	r2, s15
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80066f8:	4b1e      	ldr	r3, [pc, #120]	; (8006774 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fc:	0c1b      	lsrs	r3, r3, #16
 80066fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006702:	ee07 3a90 	vmov	s15, r3
 8006706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800670a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800670e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006712:	edd7 6a07 	vldr	s13, [r7, #28]
 8006716:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800671a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800671e:	ee17 2a90 	vmov	r2, s15
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006726:	4b13      	ldr	r3, [pc, #76]	; (8006774 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672a:	0e1b      	lsrs	r3, r3, #24
 800672c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006730:	ee07 3a90 	vmov	s15, r3
 8006734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006738:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800673c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006740:	edd7 6a07 	vldr	s13, [r7, #28]
 8006744:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800674c:	ee17 2a90 	vmov	r2, s15
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006754:	e008      	b.n	8006768 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	609a      	str	r2, [r3, #8]
}
 8006768:	bf00      	nop
 800676a:	3724      	adds	r7, #36	; 0x24
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	58024400 	.word	0x58024400
 8006778:	03d09000 	.word	0x03d09000
 800677c:	46000000 	.word	0x46000000
 8006780:	4c742400 	.word	0x4c742400
 8006784:	4a742400 	.word	0x4a742400
 8006788:	4af42400 	.word	0x4af42400

0800678c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800679a:	4b53      	ldr	r3, [pc, #332]	; (80068e8 <RCCEx_PLL2_Config+0x15c>)
 800679c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679e:	f003 0303 	and.w	r3, r3, #3
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	d101      	bne.n	80067aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e099      	b.n	80068de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80067aa:	4b4f      	ldr	r3, [pc, #316]	; (80068e8 <RCCEx_PLL2_Config+0x15c>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a4e      	ldr	r2, [pc, #312]	; (80068e8 <RCCEx_PLL2_Config+0x15c>)
 80067b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80067b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067b6:	f7fb fab7 	bl	8001d28 <HAL_GetTick>
 80067ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067bc:	e008      	b.n	80067d0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80067be:	f7fb fab3 	bl	8001d28 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d901      	bls.n	80067d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e086      	b.n	80068de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067d0:	4b45      	ldr	r3, [pc, #276]	; (80068e8 <RCCEx_PLL2_Config+0x15c>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1f0      	bne.n	80067be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80067dc:	4b42      	ldr	r3, [pc, #264]	; (80068e8 <RCCEx_PLL2_Config+0x15c>)
 80067de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	031b      	lsls	r3, r3, #12
 80067ea:	493f      	ldr	r1, [pc, #252]	; (80068e8 <RCCEx_PLL2_Config+0x15c>)
 80067ec:	4313      	orrs	r3, r2
 80067ee:	628b      	str	r3, [r1, #40]	; 0x28
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	3b01      	subs	r3, #1
 80067f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	3b01      	subs	r3, #1
 8006800:	025b      	lsls	r3, r3, #9
 8006802:	b29b      	uxth	r3, r3
 8006804:	431a      	orrs	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	3b01      	subs	r3, #1
 800680c:	041b      	lsls	r3, r3, #16
 800680e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006812:	431a      	orrs	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	3b01      	subs	r3, #1
 800681a:	061b      	lsls	r3, r3, #24
 800681c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006820:	4931      	ldr	r1, [pc, #196]	; (80068e8 <RCCEx_PLL2_Config+0x15c>)
 8006822:	4313      	orrs	r3, r2
 8006824:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006826:	4b30      	ldr	r3, [pc, #192]	; (80068e8 <RCCEx_PLL2_Config+0x15c>)
 8006828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	492d      	ldr	r1, [pc, #180]	; (80068e8 <RCCEx_PLL2_Config+0x15c>)
 8006834:	4313      	orrs	r3, r2
 8006836:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006838:	4b2b      	ldr	r3, [pc, #172]	; (80068e8 <RCCEx_PLL2_Config+0x15c>)
 800683a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683c:	f023 0220 	bic.w	r2, r3, #32
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	4928      	ldr	r1, [pc, #160]	; (80068e8 <RCCEx_PLL2_Config+0x15c>)
 8006846:	4313      	orrs	r3, r2
 8006848:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800684a:	4b27      	ldr	r3, [pc, #156]	; (80068e8 <RCCEx_PLL2_Config+0x15c>)
 800684c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684e:	4a26      	ldr	r2, [pc, #152]	; (80068e8 <RCCEx_PLL2_Config+0x15c>)
 8006850:	f023 0310 	bic.w	r3, r3, #16
 8006854:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006856:	4b24      	ldr	r3, [pc, #144]	; (80068e8 <RCCEx_PLL2_Config+0x15c>)
 8006858:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800685a:	4b24      	ldr	r3, [pc, #144]	; (80068ec <RCCEx_PLL2_Config+0x160>)
 800685c:	4013      	ands	r3, r2
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	69d2      	ldr	r2, [r2, #28]
 8006862:	00d2      	lsls	r2, r2, #3
 8006864:	4920      	ldr	r1, [pc, #128]	; (80068e8 <RCCEx_PLL2_Config+0x15c>)
 8006866:	4313      	orrs	r3, r2
 8006868:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800686a:	4b1f      	ldr	r3, [pc, #124]	; (80068e8 <RCCEx_PLL2_Config+0x15c>)
 800686c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686e:	4a1e      	ldr	r2, [pc, #120]	; (80068e8 <RCCEx_PLL2_Config+0x15c>)
 8006870:	f043 0310 	orr.w	r3, r3, #16
 8006874:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d106      	bne.n	800688a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800687c:	4b1a      	ldr	r3, [pc, #104]	; (80068e8 <RCCEx_PLL2_Config+0x15c>)
 800687e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006880:	4a19      	ldr	r2, [pc, #100]	; (80068e8 <RCCEx_PLL2_Config+0x15c>)
 8006882:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006886:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006888:	e00f      	b.n	80068aa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d106      	bne.n	800689e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006890:	4b15      	ldr	r3, [pc, #84]	; (80068e8 <RCCEx_PLL2_Config+0x15c>)
 8006892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006894:	4a14      	ldr	r2, [pc, #80]	; (80068e8 <RCCEx_PLL2_Config+0x15c>)
 8006896:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800689a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800689c:	e005      	b.n	80068aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800689e:	4b12      	ldr	r3, [pc, #72]	; (80068e8 <RCCEx_PLL2_Config+0x15c>)
 80068a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a2:	4a11      	ldr	r2, [pc, #68]	; (80068e8 <RCCEx_PLL2_Config+0x15c>)
 80068a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80068a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80068aa:	4b0f      	ldr	r3, [pc, #60]	; (80068e8 <RCCEx_PLL2_Config+0x15c>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a0e      	ldr	r2, [pc, #56]	; (80068e8 <RCCEx_PLL2_Config+0x15c>)
 80068b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80068b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068b6:	f7fb fa37 	bl	8001d28 <HAL_GetTick>
 80068ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068bc:	e008      	b.n	80068d0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80068be:	f7fb fa33 	bl	8001d28 <HAL_GetTick>
 80068c2:	4602      	mov	r2, r0
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d901      	bls.n	80068d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e006      	b.n	80068de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068d0:	4b05      	ldr	r3, [pc, #20]	; (80068e8 <RCCEx_PLL2_Config+0x15c>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d0f0      	beq.n	80068be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80068dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	58024400 	.word	0x58024400
 80068ec:	ffff0007 	.word	0xffff0007

080068f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80068fe:	4b53      	ldr	r3, [pc, #332]	; (8006a4c <RCCEx_PLL3_Config+0x15c>)
 8006900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006902:	f003 0303 	and.w	r3, r3, #3
 8006906:	2b03      	cmp	r3, #3
 8006908:	d101      	bne.n	800690e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e099      	b.n	8006a42 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800690e:	4b4f      	ldr	r3, [pc, #316]	; (8006a4c <RCCEx_PLL3_Config+0x15c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a4e      	ldr	r2, [pc, #312]	; (8006a4c <RCCEx_PLL3_Config+0x15c>)
 8006914:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006918:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800691a:	f7fb fa05 	bl	8001d28 <HAL_GetTick>
 800691e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006920:	e008      	b.n	8006934 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006922:	f7fb fa01 	bl	8001d28 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b02      	cmp	r3, #2
 800692e:	d901      	bls.n	8006934 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e086      	b.n	8006a42 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006934:	4b45      	ldr	r3, [pc, #276]	; (8006a4c <RCCEx_PLL3_Config+0x15c>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1f0      	bne.n	8006922 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006940:	4b42      	ldr	r3, [pc, #264]	; (8006a4c <RCCEx_PLL3_Config+0x15c>)
 8006942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006944:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	051b      	lsls	r3, r3, #20
 800694e:	493f      	ldr	r1, [pc, #252]	; (8006a4c <RCCEx_PLL3_Config+0x15c>)
 8006950:	4313      	orrs	r3, r2
 8006952:	628b      	str	r3, [r1, #40]	; 0x28
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	3b01      	subs	r3, #1
 800695a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	3b01      	subs	r3, #1
 8006964:	025b      	lsls	r3, r3, #9
 8006966:	b29b      	uxth	r3, r3
 8006968:	431a      	orrs	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	3b01      	subs	r3, #1
 8006970:	041b      	lsls	r3, r3, #16
 8006972:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006976:	431a      	orrs	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	3b01      	subs	r3, #1
 800697e:	061b      	lsls	r3, r3, #24
 8006980:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006984:	4931      	ldr	r1, [pc, #196]	; (8006a4c <RCCEx_PLL3_Config+0x15c>)
 8006986:	4313      	orrs	r3, r2
 8006988:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800698a:	4b30      	ldr	r3, [pc, #192]	; (8006a4c <RCCEx_PLL3_Config+0x15c>)
 800698c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	492d      	ldr	r1, [pc, #180]	; (8006a4c <RCCEx_PLL3_Config+0x15c>)
 8006998:	4313      	orrs	r3, r2
 800699a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800699c:	4b2b      	ldr	r3, [pc, #172]	; (8006a4c <RCCEx_PLL3_Config+0x15c>)
 800699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	4928      	ldr	r1, [pc, #160]	; (8006a4c <RCCEx_PLL3_Config+0x15c>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80069ae:	4b27      	ldr	r3, [pc, #156]	; (8006a4c <RCCEx_PLL3_Config+0x15c>)
 80069b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b2:	4a26      	ldr	r2, [pc, #152]	; (8006a4c <RCCEx_PLL3_Config+0x15c>)
 80069b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80069ba:	4b24      	ldr	r3, [pc, #144]	; (8006a4c <RCCEx_PLL3_Config+0x15c>)
 80069bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069be:	4b24      	ldr	r3, [pc, #144]	; (8006a50 <RCCEx_PLL3_Config+0x160>)
 80069c0:	4013      	ands	r3, r2
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	69d2      	ldr	r2, [r2, #28]
 80069c6:	00d2      	lsls	r2, r2, #3
 80069c8:	4920      	ldr	r1, [pc, #128]	; (8006a4c <RCCEx_PLL3_Config+0x15c>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80069ce:	4b1f      	ldr	r3, [pc, #124]	; (8006a4c <RCCEx_PLL3_Config+0x15c>)
 80069d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d2:	4a1e      	ldr	r2, [pc, #120]	; (8006a4c <RCCEx_PLL3_Config+0x15c>)
 80069d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d106      	bne.n	80069ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80069e0:	4b1a      	ldr	r3, [pc, #104]	; (8006a4c <RCCEx_PLL3_Config+0x15c>)
 80069e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e4:	4a19      	ldr	r2, [pc, #100]	; (8006a4c <RCCEx_PLL3_Config+0x15c>)
 80069e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80069ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80069ec:	e00f      	b.n	8006a0e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d106      	bne.n	8006a02 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80069f4:	4b15      	ldr	r3, [pc, #84]	; (8006a4c <RCCEx_PLL3_Config+0x15c>)
 80069f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f8:	4a14      	ldr	r2, [pc, #80]	; (8006a4c <RCCEx_PLL3_Config+0x15c>)
 80069fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80069fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a00:	e005      	b.n	8006a0e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006a02:	4b12      	ldr	r3, [pc, #72]	; (8006a4c <RCCEx_PLL3_Config+0x15c>)
 8006a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a06:	4a11      	ldr	r2, [pc, #68]	; (8006a4c <RCCEx_PLL3_Config+0x15c>)
 8006a08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006a0e:	4b0f      	ldr	r3, [pc, #60]	; (8006a4c <RCCEx_PLL3_Config+0x15c>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a0e      	ldr	r2, [pc, #56]	; (8006a4c <RCCEx_PLL3_Config+0x15c>)
 8006a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a1a:	f7fb f985 	bl	8001d28 <HAL_GetTick>
 8006a1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a20:	e008      	b.n	8006a34 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006a22:	f7fb f981 	bl	8001d28 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d901      	bls.n	8006a34 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e006      	b.n	8006a42 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a34:	4b05      	ldr	r3, [pc, #20]	; (8006a4c <RCCEx_PLL3_Config+0x15c>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d0f0      	beq.n	8006a22 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	58024400 	.word	0x58024400
 8006a50:	ffff0007 	.word	0xffff0007

08006a54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e049      	b.n	8006afa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d106      	bne.n	8006a80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7fa fea2 	bl	80017c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2202      	movs	r2, #2
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	3304      	adds	r3, #4
 8006a90:	4619      	mov	r1, r3
 8006a92:	4610      	mov	r0, r2
 8006a94:	f000 f92e 	bl	8006cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
	...

08006b04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d101      	bne.n	8006b20 <HAL_TIM_ConfigClockSource+0x1c>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	e0dc      	b.n	8006cda <HAL_TIM_ConfigClockSource+0x1d6>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	4b6a      	ldr	r3, [pc, #424]	; (8006ce4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a64      	ldr	r2, [pc, #400]	; (8006ce8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	f000 80a9 	beq.w	8006cae <HAL_TIM_ConfigClockSource+0x1aa>
 8006b5c:	4a62      	ldr	r2, [pc, #392]	; (8006ce8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	f200 80ae 	bhi.w	8006cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006b64:	4a61      	ldr	r2, [pc, #388]	; (8006cec <HAL_TIM_ConfigClockSource+0x1e8>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	f000 80a1 	beq.w	8006cae <HAL_TIM_ConfigClockSource+0x1aa>
 8006b6c:	4a5f      	ldr	r2, [pc, #380]	; (8006cec <HAL_TIM_ConfigClockSource+0x1e8>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	f200 80a6 	bhi.w	8006cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006b74:	4a5e      	ldr	r2, [pc, #376]	; (8006cf0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	f000 8099 	beq.w	8006cae <HAL_TIM_ConfigClockSource+0x1aa>
 8006b7c:	4a5c      	ldr	r2, [pc, #368]	; (8006cf0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	f200 809e 	bhi.w	8006cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006b84:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006b88:	f000 8091 	beq.w	8006cae <HAL_TIM_ConfigClockSource+0x1aa>
 8006b8c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006b90:	f200 8096 	bhi.w	8006cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006b94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b98:	f000 8089 	beq.w	8006cae <HAL_TIM_ConfigClockSource+0x1aa>
 8006b9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ba0:	f200 808e 	bhi.w	8006cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ba8:	d03e      	beq.n	8006c28 <HAL_TIM_ConfigClockSource+0x124>
 8006baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bae:	f200 8087 	bhi.w	8006cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bb6:	f000 8086 	beq.w	8006cc6 <HAL_TIM_ConfigClockSource+0x1c2>
 8006bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bbe:	d87f      	bhi.n	8006cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006bc0:	2b70      	cmp	r3, #112	; 0x70
 8006bc2:	d01a      	beq.n	8006bfa <HAL_TIM_ConfigClockSource+0xf6>
 8006bc4:	2b70      	cmp	r3, #112	; 0x70
 8006bc6:	d87b      	bhi.n	8006cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006bc8:	2b60      	cmp	r3, #96	; 0x60
 8006bca:	d050      	beq.n	8006c6e <HAL_TIM_ConfigClockSource+0x16a>
 8006bcc:	2b60      	cmp	r3, #96	; 0x60
 8006bce:	d877      	bhi.n	8006cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006bd0:	2b50      	cmp	r3, #80	; 0x50
 8006bd2:	d03c      	beq.n	8006c4e <HAL_TIM_ConfigClockSource+0x14a>
 8006bd4:	2b50      	cmp	r3, #80	; 0x50
 8006bd6:	d873      	bhi.n	8006cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006bd8:	2b40      	cmp	r3, #64	; 0x40
 8006bda:	d058      	beq.n	8006c8e <HAL_TIM_ConfigClockSource+0x18a>
 8006bdc:	2b40      	cmp	r3, #64	; 0x40
 8006bde:	d86f      	bhi.n	8006cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006be0:	2b30      	cmp	r3, #48	; 0x30
 8006be2:	d064      	beq.n	8006cae <HAL_TIM_ConfigClockSource+0x1aa>
 8006be4:	2b30      	cmp	r3, #48	; 0x30
 8006be6:	d86b      	bhi.n	8006cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006be8:	2b20      	cmp	r3, #32
 8006bea:	d060      	beq.n	8006cae <HAL_TIM_ConfigClockSource+0x1aa>
 8006bec:	2b20      	cmp	r3, #32
 8006bee:	d867      	bhi.n	8006cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d05c      	beq.n	8006cae <HAL_TIM_ConfigClockSource+0x1aa>
 8006bf4:	2b10      	cmp	r3, #16
 8006bf6:	d05a      	beq.n	8006cae <HAL_TIM_ConfigClockSource+0x1aa>
 8006bf8:	e062      	b.n	8006cc0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6818      	ldr	r0, [r3, #0]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	6899      	ldr	r1, [r3, #8]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f000 f98b 	bl	8006f24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	609a      	str	r2, [r3, #8]
      break;
 8006c26:	e04f      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6818      	ldr	r0, [r3, #0]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	6899      	ldr	r1, [r3, #8]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f000 f974 	bl	8006f24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689a      	ldr	r2, [r3, #8]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c4a:	609a      	str	r2, [r3, #8]
      break;
 8006c4c:	e03c      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6818      	ldr	r0, [r3, #0]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	6859      	ldr	r1, [r3, #4]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	f000 f8e4 	bl	8006e28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2150      	movs	r1, #80	; 0x50
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 f93e 	bl	8006ee8 <TIM_ITRx_SetConfig>
      break;
 8006c6c:	e02c      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6818      	ldr	r0, [r3, #0]
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	6859      	ldr	r1, [r3, #4]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f000 f903 	bl	8006e86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2160      	movs	r1, #96	; 0x60
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 f92e 	bl	8006ee8 <TIM_ITRx_SetConfig>
      break;
 8006c8c:	e01c      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6818      	ldr	r0, [r3, #0]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	6859      	ldr	r1, [r3, #4]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	f000 f8c4 	bl	8006e28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2140      	movs	r1, #64	; 0x40
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 f91e 	bl	8006ee8 <TIM_ITRx_SetConfig>
      break;
 8006cac:	e00c      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	4610      	mov	r0, r2
 8006cba:	f000 f915 	bl	8006ee8 <TIM_ITRx_SetConfig>
      break;
 8006cbe:	e003      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8006cc4:	e000      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006cc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	ffceff88 	.word	0xffceff88
 8006ce8:	00100040 	.word	0x00100040
 8006cec:	00100030 	.word	0x00100030
 8006cf0:	00100020 	.word	0x00100020

08006cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a40      	ldr	r2, [pc, #256]	; (8006e08 <TIM_Base_SetConfig+0x114>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d013      	beq.n	8006d34 <TIM_Base_SetConfig+0x40>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d12:	d00f      	beq.n	8006d34 <TIM_Base_SetConfig+0x40>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a3d      	ldr	r2, [pc, #244]	; (8006e0c <TIM_Base_SetConfig+0x118>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d00b      	beq.n	8006d34 <TIM_Base_SetConfig+0x40>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a3c      	ldr	r2, [pc, #240]	; (8006e10 <TIM_Base_SetConfig+0x11c>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d007      	beq.n	8006d34 <TIM_Base_SetConfig+0x40>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a3b      	ldr	r2, [pc, #236]	; (8006e14 <TIM_Base_SetConfig+0x120>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d003      	beq.n	8006d34 <TIM_Base_SetConfig+0x40>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a3a      	ldr	r2, [pc, #232]	; (8006e18 <TIM_Base_SetConfig+0x124>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d108      	bne.n	8006d46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a2f      	ldr	r2, [pc, #188]	; (8006e08 <TIM_Base_SetConfig+0x114>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d01f      	beq.n	8006d8e <TIM_Base_SetConfig+0x9a>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d54:	d01b      	beq.n	8006d8e <TIM_Base_SetConfig+0x9a>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a2c      	ldr	r2, [pc, #176]	; (8006e0c <TIM_Base_SetConfig+0x118>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d017      	beq.n	8006d8e <TIM_Base_SetConfig+0x9a>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a2b      	ldr	r2, [pc, #172]	; (8006e10 <TIM_Base_SetConfig+0x11c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d013      	beq.n	8006d8e <TIM_Base_SetConfig+0x9a>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a2a      	ldr	r2, [pc, #168]	; (8006e14 <TIM_Base_SetConfig+0x120>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d00f      	beq.n	8006d8e <TIM_Base_SetConfig+0x9a>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a29      	ldr	r2, [pc, #164]	; (8006e18 <TIM_Base_SetConfig+0x124>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d00b      	beq.n	8006d8e <TIM_Base_SetConfig+0x9a>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a28      	ldr	r2, [pc, #160]	; (8006e1c <TIM_Base_SetConfig+0x128>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d007      	beq.n	8006d8e <TIM_Base_SetConfig+0x9a>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a27      	ldr	r2, [pc, #156]	; (8006e20 <TIM_Base_SetConfig+0x12c>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d003      	beq.n	8006d8e <TIM_Base_SetConfig+0x9a>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a26      	ldr	r2, [pc, #152]	; (8006e24 <TIM_Base_SetConfig+0x130>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d108      	bne.n	8006da0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	689a      	ldr	r2, [r3, #8]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a10      	ldr	r2, [pc, #64]	; (8006e08 <TIM_Base_SetConfig+0x114>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d00f      	beq.n	8006dec <TIM_Base_SetConfig+0xf8>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a12      	ldr	r2, [pc, #72]	; (8006e18 <TIM_Base_SetConfig+0x124>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d00b      	beq.n	8006dec <TIM_Base_SetConfig+0xf8>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a11      	ldr	r2, [pc, #68]	; (8006e1c <TIM_Base_SetConfig+0x128>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d007      	beq.n	8006dec <TIM_Base_SetConfig+0xf8>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a10      	ldr	r2, [pc, #64]	; (8006e20 <TIM_Base_SetConfig+0x12c>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d003      	beq.n	8006dec <TIM_Base_SetConfig+0xf8>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a0f      	ldr	r2, [pc, #60]	; (8006e24 <TIM_Base_SetConfig+0x130>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d103      	bne.n	8006df4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	691a      	ldr	r2, [r3, #16]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	615a      	str	r2, [r3, #20]
}
 8006dfa:	bf00      	nop
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	40010000 	.word	0x40010000
 8006e0c:	40000400 	.word	0x40000400
 8006e10:	40000800 	.word	0x40000800
 8006e14:	40000c00 	.word	0x40000c00
 8006e18:	40010400 	.word	0x40010400
 8006e1c:	40014000 	.word	0x40014000
 8006e20:	40014400 	.word	0x40014400
 8006e24:	40014800 	.word	0x40014800

08006e28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6a1b      	ldr	r3, [r3, #32]
 8006e38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	f023 0201 	bic.w	r2, r3, #1
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	011b      	lsls	r3, r3, #4
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f023 030a 	bic.w	r3, r3, #10
 8006e64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	621a      	str	r2, [r3, #32]
}
 8006e7a:	bf00      	nop
 8006e7c:	371c      	adds	r7, #28
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b087      	sub	sp, #28
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	60f8      	str	r0, [r7, #12]
 8006e8e:	60b9      	str	r1, [r7, #8]
 8006e90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	f023 0210 	bic.w	r2, r3, #16
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006eb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	031b      	lsls	r3, r3, #12
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ec2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	011b      	lsls	r3, r3, #4
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	621a      	str	r2, [r3, #32]
}
 8006eda:	bf00      	nop
 8006edc:	371c      	adds	r7, #28
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
	...

08006ee8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	4b09      	ldr	r3, [pc, #36]	; (8006f20 <TIM_ITRx_SetConfig+0x38>)
 8006efc:	4013      	ands	r3, r2
 8006efe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f00:	683a      	ldr	r2, [r7, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	f043 0307 	orr.w	r3, r3, #7
 8006f0a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	609a      	str	r2, [r3, #8]
}
 8006f12:	bf00      	nop
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	ffcfff8f 	.word	0xffcfff8f

08006f24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
 8006f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	021a      	lsls	r2, r3, #8
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	431a      	orrs	r2, r3
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	609a      	str	r2, [r3, #8]
}
 8006f58:	bf00      	nop
 8006f5a:	371c      	adds	r7, #28
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d101      	bne.n	8006f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f78:	2302      	movs	r3, #2
 8006f7a:	e06d      	b.n	8007058 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2202      	movs	r2, #2
 8006f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a30      	ldr	r2, [pc, #192]	; (8007064 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d004      	beq.n	8006fb0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a2f      	ldr	r2, [pc, #188]	; (8007068 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d108      	bne.n	8006fc2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006fb6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a20      	ldr	r2, [pc, #128]	; (8007064 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d022      	beq.n	800702c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fee:	d01d      	beq.n	800702c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a1d      	ldr	r2, [pc, #116]	; (800706c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d018      	beq.n	800702c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a1c      	ldr	r2, [pc, #112]	; (8007070 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d013      	beq.n	800702c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a1a      	ldr	r2, [pc, #104]	; (8007074 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d00e      	beq.n	800702c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a15      	ldr	r2, [pc, #84]	; (8007068 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d009      	beq.n	800702c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a16      	ldr	r2, [pc, #88]	; (8007078 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d004      	beq.n	800702c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a15      	ldr	r2, [pc, #84]	; (800707c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d10c      	bne.n	8007046 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007032:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	4313      	orrs	r3, r2
 800703c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr
 8007064:	40010000 	.word	0x40010000
 8007068:	40010400 	.word	0x40010400
 800706c:	40000400 	.word	0x40000400
 8007070:	40000800 	.word	0x40000800
 8007074:	40000c00 	.word	0x40000c00
 8007078:	40001800 	.word	0x40001800
 800707c:	40014000 	.word	0x40014000

08007080 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e042      	b.n	8007118 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007098:	2b00      	cmp	r3, #0
 800709a:	d106      	bne.n	80070aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7fa fbc7 	bl	8001838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2224      	movs	r2, #36	; 0x24
 80070ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f022 0201 	bic.w	r2, r2, #1
 80070c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f8c2 	bl	800724c <UART_SetConfig>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d101      	bne.n	80070d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e022      	b.n	8007118 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d002      	beq.n	80070e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fe16 	bl	8007d0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685a      	ldr	r2, [r3, #4]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689a      	ldr	r2, [r3, #8]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f042 0201 	orr.w	r2, r2, #1
 800710e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fe9d 	bl	8007e50 <UART_CheckIdleState>
 8007116:	4603      	mov	r3, r0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b08a      	sub	sp, #40	; 0x28
 8007124:	af02      	add	r7, sp, #8
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	603b      	str	r3, [r7, #0]
 800712c:	4613      	mov	r3, r2
 800712e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007136:	2b20      	cmp	r3, #32
 8007138:	f040 8083 	bne.w	8007242 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d002      	beq.n	8007148 <HAL_UART_Transmit+0x28>
 8007142:	88fb      	ldrh	r3, [r7, #6]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e07b      	b.n	8007244 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007152:	2b01      	cmp	r3, #1
 8007154:	d101      	bne.n	800715a <HAL_UART_Transmit+0x3a>
 8007156:	2302      	movs	r3, #2
 8007158:	e074      	b.n	8007244 <HAL_UART_Transmit+0x124>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2221      	movs	r2, #33	; 0x21
 800716e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007172:	f7fa fdd9 	bl	8001d28 <HAL_GetTick>
 8007176:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	88fa      	ldrh	r2, [r7, #6]
 800717c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	88fa      	ldrh	r2, [r7, #6]
 8007184:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007190:	d108      	bne.n	80071a4 <HAL_UART_Transmit+0x84>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d104      	bne.n	80071a4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800719a:	2300      	movs	r3, #0
 800719c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	61bb      	str	r3, [r7, #24]
 80071a2:	e003      	b.n	80071ac <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071a8:	2300      	movs	r3, #0
 80071aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80071b4:	e02c      	b.n	8007210 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	2200      	movs	r2, #0
 80071be:	2180      	movs	r1, #128	; 0x80
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f000 fe90 	bl	8007ee6 <UART_WaitOnFlagUntilTimeout>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d001      	beq.n	80071d0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e039      	b.n	8007244 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10b      	bne.n	80071ee <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	461a      	mov	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	3302      	adds	r3, #2
 80071ea:	61bb      	str	r3, [r7, #24]
 80071ec:	e007      	b.n	80071fe <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	781a      	ldrb	r2, [r3, #0]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	3301      	adds	r3, #1
 80071fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007204:	b29b      	uxth	r3, r3
 8007206:	3b01      	subs	r3, #1
 8007208:	b29a      	uxth	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007216:	b29b      	uxth	r3, r3
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1cc      	bne.n	80071b6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	2200      	movs	r2, #0
 8007224:	2140      	movs	r1, #64	; 0x40
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f000 fe5d 	bl	8007ee6 <UART_WaitOnFlagUntilTimeout>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d001      	beq.n	8007236 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e006      	b.n	8007244 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2220      	movs	r2, #32
 800723a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800723e:	2300      	movs	r3, #0
 8007240:	e000      	b.n	8007244 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007242:	2302      	movs	r3, #2
  }
}
 8007244:	4618      	mov	r0, r3
 8007246:	3720      	adds	r7, #32
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800724c:	b5b0      	push	{r4, r5, r7, lr}
 800724e:	b08e      	sub	sp, #56	; 0x38
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007254:	2300      	movs	r3, #0
 8007256:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	689a      	ldr	r2, [r3, #8]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	431a      	orrs	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	431a      	orrs	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	69db      	ldr	r3, [r3, #28]
 800726e:	4313      	orrs	r3, r2
 8007270:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	4bbf      	ldr	r3, [pc, #764]	; (8007578 <UART_SetConfig+0x32c>)
 800727a:	4013      	ands	r3, r2
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	6812      	ldr	r2, [r2, #0]
 8007280:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007282:	430b      	orrs	r3, r1
 8007284:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68da      	ldr	r2, [r3, #12]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	430a      	orrs	r2, r1
 800729a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4ab5      	ldr	r2, [pc, #724]	; (800757c <UART_SetConfig+0x330>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d004      	beq.n	80072b6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a1b      	ldr	r3, [r3, #32]
 80072b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072b2:	4313      	orrs	r3, r2
 80072b4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689a      	ldr	r2, [r3, #8]
 80072bc:	4bb0      	ldr	r3, [pc, #704]	; (8007580 <UART_SetConfig+0x334>)
 80072be:	4013      	ands	r3, r2
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	6812      	ldr	r2, [r2, #0]
 80072c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80072c6:	430b      	orrs	r3, r1
 80072c8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d0:	f023 010f 	bic.w	r1, r3, #15
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	430a      	orrs	r2, r1
 80072de:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4aa7      	ldr	r2, [pc, #668]	; (8007584 <UART_SetConfig+0x338>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d176      	bne.n	80073d8 <UART_SetConfig+0x18c>
 80072ea:	4ba7      	ldr	r3, [pc, #668]	; (8007588 <UART_SetConfig+0x33c>)
 80072ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072f2:	2b28      	cmp	r3, #40	; 0x28
 80072f4:	d86c      	bhi.n	80073d0 <UART_SetConfig+0x184>
 80072f6:	a201      	add	r2, pc, #4	; (adr r2, 80072fc <UART_SetConfig+0xb0>)
 80072f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fc:	080073a1 	.word	0x080073a1
 8007300:	080073d1 	.word	0x080073d1
 8007304:	080073d1 	.word	0x080073d1
 8007308:	080073d1 	.word	0x080073d1
 800730c:	080073d1 	.word	0x080073d1
 8007310:	080073d1 	.word	0x080073d1
 8007314:	080073d1 	.word	0x080073d1
 8007318:	080073d1 	.word	0x080073d1
 800731c:	080073a9 	.word	0x080073a9
 8007320:	080073d1 	.word	0x080073d1
 8007324:	080073d1 	.word	0x080073d1
 8007328:	080073d1 	.word	0x080073d1
 800732c:	080073d1 	.word	0x080073d1
 8007330:	080073d1 	.word	0x080073d1
 8007334:	080073d1 	.word	0x080073d1
 8007338:	080073d1 	.word	0x080073d1
 800733c:	080073b1 	.word	0x080073b1
 8007340:	080073d1 	.word	0x080073d1
 8007344:	080073d1 	.word	0x080073d1
 8007348:	080073d1 	.word	0x080073d1
 800734c:	080073d1 	.word	0x080073d1
 8007350:	080073d1 	.word	0x080073d1
 8007354:	080073d1 	.word	0x080073d1
 8007358:	080073d1 	.word	0x080073d1
 800735c:	080073b9 	.word	0x080073b9
 8007360:	080073d1 	.word	0x080073d1
 8007364:	080073d1 	.word	0x080073d1
 8007368:	080073d1 	.word	0x080073d1
 800736c:	080073d1 	.word	0x080073d1
 8007370:	080073d1 	.word	0x080073d1
 8007374:	080073d1 	.word	0x080073d1
 8007378:	080073d1 	.word	0x080073d1
 800737c:	080073c1 	.word	0x080073c1
 8007380:	080073d1 	.word	0x080073d1
 8007384:	080073d1 	.word	0x080073d1
 8007388:	080073d1 	.word	0x080073d1
 800738c:	080073d1 	.word	0x080073d1
 8007390:	080073d1 	.word	0x080073d1
 8007394:	080073d1 	.word	0x080073d1
 8007398:	080073d1 	.word	0x080073d1
 800739c:	080073c9 	.word	0x080073c9
 80073a0:	2301      	movs	r3, #1
 80073a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073a6:	e222      	b.n	80077ee <UART_SetConfig+0x5a2>
 80073a8:	2304      	movs	r3, #4
 80073aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073ae:	e21e      	b.n	80077ee <UART_SetConfig+0x5a2>
 80073b0:	2308      	movs	r3, #8
 80073b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073b6:	e21a      	b.n	80077ee <UART_SetConfig+0x5a2>
 80073b8:	2310      	movs	r3, #16
 80073ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073be:	e216      	b.n	80077ee <UART_SetConfig+0x5a2>
 80073c0:	2320      	movs	r3, #32
 80073c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073c6:	e212      	b.n	80077ee <UART_SetConfig+0x5a2>
 80073c8:	2340      	movs	r3, #64	; 0x40
 80073ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073ce:	e20e      	b.n	80077ee <UART_SetConfig+0x5a2>
 80073d0:	2380      	movs	r3, #128	; 0x80
 80073d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073d6:	e20a      	b.n	80077ee <UART_SetConfig+0x5a2>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a6b      	ldr	r2, [pc, #428]	; (800758c <UART_SetConfig+0x340>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d130      	bne.n	8007444 <UART_SetConfig+0x1f8>
 80073e2:	4b69      	ldr	r3, [pc, #420]	; (8007588 <UART_SetConfig+0x33c>)
 80073e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e6:	f003 0307 	and.w	r3, r3, #7
 80073ea:	2b05      	cmp	r3, #5
 80073ec:	d826      	bhi.n	800743c <UART_SetConfig+0x1f0>
 80073ee:	a201      	add	r2, pc, #4	; (adr r2, 80073f4 <UART_SetConfig+0x1a8>)
 80073f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f4:	0800740d 	.word	0x0800740d
 80073f8:	08007415 	.word	0x08007415
 80073fc:	0800741d 	.word	0x0800741d
 8007400:	08007425 	.word	0x08007425
 8007404:	0800742d 	.word	0x0800742d
 8007408:	08007435 	.word	0x08007435
 800740c:	2300      	movs	r3, #0
 800740e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007412:	e1ec      	b.n	80077ee <UART_SetConfig+0x5a2>
 8007414:	2304      	movs	r3, #4
 8007416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800741a:	e1e8      	b.n	80077ee <UART_SetConfig+0x5a2>
 800741c:	2308      	movs	r3, #8
 800741e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007422:	e1e4      	b.n	80077ee <UART_SetConfig+0x5a2>
 8007424:	2310      	movs	r3, #16
 8007426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800742a:	e1e0      	b.n	80077ee <UART_SetConfig+0x5a2>
 800742c:	2320      	movs	r3, #32
 800742e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007432:	e1dc      	b.n	80077ee <UART_SetConfig+0x5a2>
 8007434:	2340      	movs	r3, #64	; 0x40
 8007436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800743a:	e1d8      	b.n	80077ee <UART_SetConfig+0x5a2>
 800743c:	2380      	movs	r3, #128	; 0x80
 800743e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007442:	e1d4      	b.n	80077ee <UART_SetConfig+0x5a2>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a51      	ldr	r2, [pc, #324]	; (8007590 <UART_SetConfig+0x344>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d130      	bne.n	80074b0 <UART_SetConfig+0x264>
 800744e:	4b4e      	ldr	r3, [pc, #312]	; (8007588 <UART_SetConfig+0x33c>)
 8007450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007452:	f003 0307 	and.w	r3, r3, #7
 8007456:	2b05      	cmp	r3, #5
 8007458:	d826      	bhi.n	80074a8 <UART_SetConfig+0x25c>
 800745a:	a201      	add	r2, pc, #4	; (adr r2, 8007460 <UART_SetConfig+0x214>)
 800745c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007460:	08007479 	.word	0x08007479
 8007464:	08007481 	.word	0x08007481
 8007468:	08007489 	.word	0x08007489
 800746c:	08007491 	.word	0x08007491
 8007470:	08007499 	.word	0x08007499
 8007474:	080074a1 	.word	0x080074a1
 8007478:	2300      	movs	r3, #0
 800747a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800747e:	e1b6      	b.n	80077ee <UART_SetConfig+0x5a2>
 8007480:	2304      	movs	r3, #4
 8007482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007486:	e1b2      	b.n	80077ee <UART_SetConfig+0x5a2>
 8007488:	2308      	movs	r3, #8
 800748a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800748e:	e1ae      	b.n	80077ee <UART_SetConfig+0x5a2>
 8007490:	2310      	movs	r3, #16
 8007492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007496:	e1aa      	b.n	80077ee <UART_SetConfig+0x5a2>
 8007498:	2320      	movs	r3, #32
 800749a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800749e:	e1a6      	b.n	80077ee <UART_SetConfig+0x5a2>
 80074a0:	2340      	movs	r3, #64	; 0x40
 80074a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074a6:	e1a2      	b.n	80077ee <UART_SetConfig+0x5a2>
 80074a8:	2380      	movs	r3, #128	; 0x80
 80074aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ae:	e19e      	b.n	80077ee <UART_SetConfig+0x5a2>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a37      	ldr	r2, [pc, #220]	; (8007594 <UART_SetConfig+0x348>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d130      	bne.n	800751c <UART_SetConfig+0x2d0>
 80074ba:	4b33      	ldr	r3, [pc, #204]	; (8007588 <UART_SetConfig+0x33c>)
 80074bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074be:	f003 0307 	and.w	r3, r3, #7
 80074c2:	2b05      	cmp	r3, #5
 80074c4:	d826      	bhi.n	8007514 <UART_SetConfig+0x2c8>
 80074c6:	a201      	add	r2, pc, #4	; (adr r2, 80074cc <UART_SetConfig+0x280>)
 80074c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074cc:	080074e5 	.word	0x080074e5
 80074d0:	080074ed 	.word	0x080074ed
 80074d4:	080074f5 	.word	0x080074f5
 80074d8:	080074fd 	.word	0x080074fd
 80074dc:	08007505 	.word	0x08007505
 80074e0:	0800750d 	.word	0x0800750d
 80074e4:	2300      	movs	r3, #0
 80074e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ea:	e180      	b.n	80077ee <UART_SetConfig+0x5a2>
 80074ec:	2304      	movs	r3, #4
 80074ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074f2:	e17c      	b.n	80077ee <UART_SetConfig+0x5a2>
 80074f4:	2308      	movs	r3, #8
 80074f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074fa:	e178      	b.n	80077ee <UART_SetConfig+0x5a2>
 80074fc:	2310      	movs	r3, #16
 80074fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007502:	e174      	b.n	80077ee <UART_SetConfig+0x5a2>
 8007504:	2320      	movs	r3, #32
 8007506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800750a:	e170      	b.n	80077ee <UART_SetConfig+0x5a2>
 800750c:	2340      	movs	r3, #64	; 0x40
 800750e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007512:	e16c      	b.n	80077ee <UART_SetConfig+0x5a2>
 8007514:	2380      	movs	r3, #128	; 0x80
 8007516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800751a:	e168      	b.n	80077ee <UART_SetConfig+0x5a2>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a1d      	ldr	r2, [pc, #116]	; (8007598 <UART_SetConfig+0x34c>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d142      	bne.n	80075ac <UART_SetConfig+0x360>
 8007526:	4b18      	ldr	r3, [pc, #96]	; (8007588 <UART_SetConfig+0x33c>)
 8007528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800752a:	f003 0307 	and.w	r3, r3, #7
 800752e:	2b05      	cmp	r3, #5
 8007530:	d838      	bhi.n	80075a4 <UART_SetConfig+0x358>
 8007532:	a201      	add	r2, pc, #4	; (adr r2, 8007538 <UART_SetConfig+0x2ec>)
 8007534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007538:	08007551 	.word	0x08007551
 800753c:	08007559 	.word	0x08007559
 8007540:	08007561 	.word	0x08007561
 8007544:	08007569 	.word	0x08007569
 8007548:	08007571 	.word	0x08007571
 800754c:	0800759d 	.word	0x0800759d
 8007550:	2300      	movs	r3, #0
 8007552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007556:	e14a      	b.n	80077ee <UART_SetConfig+0x5a2>
 8007558:	2304      	movs	r3, #4
 800755a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800755e:	e146      	b.n	80077ee <UART_SetConfig+0x5a2>
 8007560:	2308      	movs	r3, #8
 8007562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007566:	e142      	b.n	80077ee <UART_SetConfig+0x5a2>
 8007568:	2310      	movs	r3, #16
 800756a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800756e:	e13e      	b.n	80077ee <UART_SetConfig+0x5a2>
 8007570:	2320      	movs	r3, #32
 8007572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007576:	e13a      	b.n	80077ee <UART_SetConfig+0x5a2>
 8007578:	cfff69f3 	.word	0xcfff69f3
 800757c:	58000c00 	.word	0x58000c00
 8007580:	11fff4ff 	.word	0x11fff4ff
 8007584:	40011000 	.word	0x40011000
 8007588:	58024400 	.word	0x58024400
 800758c:	40004400 	.word	0x40004400
 8007590:	40004800 	.word	0x40004800
 8007594:	40004c00 	.word	0x40004c00
 8007598:	40005000 	.word	0x40005000
 800759c:	2340      	movs	r3, #64	; 0x40
 800759e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075a2:	e124      	b.n	80077ee <UART_SetConfig+0x5a2>
 80075a4:	2380      	movs	r3, #128	; 0x80
 80075a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075aa:	e120      	b.n	80077ee <UART_SetConfig+0x5a2>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4acc      	ldr	r2, [pc, #816]	; (80078e4 <UART_SetConfig+0x698>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d176      	bne.n	80076a4 <UART_SetConfig+0x458>
 80075b6:	4bcc      	ldr	r3, [pc, #816]	; (80078e8 <UART_SetConfig+0x69c>)
 80075b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075be:	2b28      	cmp	r3, #40	; 0x28
 80075c0:	d86c      	bhi.n	800769c <UART_SetConfig+0x450>
 80075c2:	a201      	add	r2, pc, #4	; (adr r2, 80075c8 <UART_SetConfig+0x37c>)
 80075c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c8:	0800766d 	.word	0x0800766d
 80075cc:	0800769d 	.word	0x0800769d
 80075d0:	0800769d 	.word	0x0800769d
 80075d4:	0800769d 	.word	0x0800769d
 80075d8:	0800769d 	.word	0x0800769d
 80075dc:	0800769d 	.word	0x0800769d
 80075e0:	0800769d 	.word	0x0800769d
 80075e4:	0800769d 	.word	0x0800769d
 80075e8:	08007675 	.word	0x08007675
 80075ec:	0800769d 	.word	0x0800769d
 80075f0:	0800769d 	.word	0x0800769d
 80075f4:	0800769d 	.word	0x0800769d
 80075f8:	0800769d 	.word	0x0800769d
 80075fc:	0800769d 	.word	0x0800769d
 8007600:	0800769d 	.word	0x0800769d
 8007604:	0800769d 	.word	0x0800769d
 8007608:	0800767d 	.word	0x0800767d
 800760c:	0800769d 	.word	0x0800769d
 8007610:	0800769d 	.word	0x0800769d
 8007614:	0800769d 	.word	0x0800769d
 8007618:	0800769d 	.word	0x0800769d
 800761c:	0800769d 	.word	0x0800769d
 8007620:	0800769d 	.word	0x0800769d
 8007624:	0800769d 	.word	0x0800769d
 8007628:	08007685 	.word	0x08007685
 800762c:	0800769d 	.word	0x0800769d
 8007630:	0800769d 	.word	0x0800769d
 8007634:	0800769d 	.word	0x0800769d
 8007638:	0800769d 	.word	0x0800769d
 800763c:	0800769d 	.word	0x0800769d
 8007640:	0800769d 	.word	0x0800769d
 8007644:	0800769d 	.word	0x0800769d
 8007648:	0800768d 	.word	0x0800768d
 800764c:	0800769d 	.word	0x0800769d
 8007650:	0800769d 	.word	0x0800769d
 8007654:	0800769d 	.word	0x0800769d
 8007658:	0800769d 	.word	0x0800769d
 800765c:	0800769d 	.word	0x0800769d
 8007660:	0800769d 	.word	0x0800769d
 8007664:	0800769d 	.word	0x0800769d
 8007668:	08007695 	.word	0x08007695
 800766c:	2301      	movs	r3, #1
 800766e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007672:	e0bc      	b.n	80077ee <UART_SetConfig+0x5a2>
 8007674:	2304      	movs	r3, #4
 8007676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800767a:	e0b8      	b.n	80077ee <UART_SetConfig+0x5a2>
 800767c:	2308      	movs	r3, #8
 800767e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007682:	e0b4      	b.n	80077ee <UART_SetConfig+0x5a2>
 8007684:	2310      	movs	r3, #16
 8007686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800768a:	e0b0      	b.n	80077ee <UART_SetConfig+0x5a2>
 800768c:	2320      	movs	r3, #32
 800768e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007692:	e0ac      	b.n	80077ee <UART_SetConfig+0x5a2>
 8007694:	2340      	movs	r3, #64	; 0x40
 8007696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800769a:	e0a8      	b.n	80077ee <UART_SetConfig+0x5a2>
 800769c:	2380      	movs	r3, #128	; 0x80
 800769e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076a2:	e0a4      	b.n	80077ee <UART_SetConfig+0x5a2>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a90      	ldr	r2, [pc, #576]	; (80078ec <UART_SetConfig+0x6a0>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d130      	bne.n	8007710 <UART_SetConfig+0x4c4>
 80076ae:	4b8e      	ldr	r3, [pc, #568]	; (80078e8 <UART_SetConfig+0x69c>)
 80076b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b2:	f003 0307 	and.w	r3, r3, #7
 80076b6:	2b05      	cmp	r3, #5
 80076b8:	d826      	bhi.n	8007708 <UART_SetConfig+0x4bc>
 80076ba:	a201      	add	r2, pc, #4	; (adr r2, 80076c0 <UART_SetConfig+0x474>)
 80076bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c0:	080076d9 	.word	0x080076d9
 80076c4:	080076e1 	.word	0x080076e1
 80076c8:	080076e9 	.word	0x080076e9
 80076cc:	080076f1 	.word	0x080076f1
 80076d0:	080076f9 	.word	0x080076f9
 80076d4:	08007701 	.word	0x08007701
 80076d8:	2300      	movs	r3, #0
 80076da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076de:	e086      	b.n	80077ee <UART_SetConfig+0x5a2>
 80076e0:	2304      	movs	r3, #4
 80076e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076e6:	e082      	b.n	80077ee <UART_SetConfig+0x5a2>
 80076e8:	2308      	movs	r3, #8
 80076ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076ee:	e07e      	b.n	80077ee <UART_SetConfig+0x5a2>
 80076f0:	2310      	movs	r3, #16
 80076f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076f6:	e07a      	b.n	80077ee <UART_SetConfig+0x5a2>
 80076f8:	2320      	movs	r3, #32
 80076fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076fe:	e076      	b.n	80077ee <UART_SetConfig+0x5a2>
 8007700:	2340      	movs	r3, #64	; 0x40
 8007702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007706:	e072      	b.n	80077ee <UART_SetConfig+0x5a2>
 8007708:	2380      	movs	r3, #128	; 0x80
 800770a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800770e:	e06e      	b.n	80077ee <UART_SetConfig+0x5a2>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a76      	ldr	r2, [pc, #472]	; (80078f0 <UART_SetConfig+0x6a4>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d130      	bne.n	800777c <UART_SetConfig+0x530>
 800771a:	4b73      	ldr	r3, [pc, #460]	; (80078e8 <UART_SetConfig+0x69c>)
 800771c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800771e:	f003 0307 	and.w	r3, r3, #7
 8007722:	2b05      	cmp	r3, #5
 8007724:	d826      	bhi.n	8007774 <UART_SetConfig+0x528>
 8007726:	a201      	add	r2, pc, #4	; (adr r2, 800772c <UART_SetConfig+0x4e0>)
 8007728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772c:	08007745 	.word	0x08007745
 8007730:	0800774d 	.word	0x0800774d
 8007734:	08007755 	.word	0x08007755
 8007738:	0800775d 	.word	0x0800775d
 800773c:	08007765 	.word	0x08007765
 8007740:	0800776d 	.word	0x0800776d
 8007744:	2300      	movs	r3, #0
 8007746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800774a:	e050      	b.n	80077ee <UART_SetConfig+0x5a2>
 800774c:	2304      	movs	r3, #4
 800774e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007752:	e04c      	b.n	80077ee <UART_SetConfig+0x5a2>
 8007754:	2308      	movs	r3, #8
 8007756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800775a:	e048      	b.n	80077ee <UART_SetConfig+0x5a2>
 800775c:	2310      	movs	r3, #16
 800775e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007762:	e044      	b.n	80077ee <UART_SetConfig+0x5a2>
 8007764:	2320      	movs	r3, #32
 8007766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800776a:	e040      	b.n	80077ee <UART_SetConfig+0x5a2>
 800776c:	2340      	movs	r3, #64	; 0x40
 800776e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007772:	e03c      	b.n	80077ee <UART_SetConfig+0x5a2>
 8007774:	2380      	movs	r3, #128	; 0x80
 8007776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800777a:	e038      	b.n	80077ee <UART_SetConfig+0x5a2>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a5c      	ldr	r2, [pc, #368]	; (80078f4 <UART_SetConfig+0x6a8>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d130      	bne.n	80077e8 <UART_SetConfig+0x59c>
 8007786:	4b58      	ldr	r3, [pc, #352]	; (80078e8 <UART_SetConfig+0x69c>)
 8007788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800778a:	f003 0307 	and.w	r3, r3, #7
 800778e:	2b05      	cmp	r3, #5
 8007790:	d826      	bhi.n	80077e0 <UART_SetConfig+0x594>
 8007792:	a201      	add	r2, pc, #4	; (adr r2, 8007798 <UART_SetConfig+0x54c>)
 8007794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007798:	080077b1 	.word	0x080077b1
 800779c:	080077b9 	.word	0x080077b9
 80077a0:	080077c1 	.word	0x080077c1
 80077a4:	080077c9 	.word	0x080077c9
 80077a8:	080077d1 	.word	0x080077d1
 80077ac:	080077d9 	.word	0x080077d9
 80077b0:	2302      	movs	r3, #2
 80077b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077b6:	e01a      	b.n	80077ee <UART_SetConfig+0x5a2>
 80077b8:	2304      	movs	r3, #4
 80077ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077be:	e016      	b.n	80077ee <UART_SetConfig+0x5a2>
 80077c0:	2308      	movs	r3, #8
 80077c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077c6:	e012      	b.n	80077ee <UART_SetConfig+0x5a2>
 80077c8:	2310      	movs	r3, #16
 80077ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ce:	e00e      	b.n	80077ee <UART_SetConfig+0x5a2>
 80077d0:	2320      	movs	r3, #32
 80077d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077d6:	e00a      	b.n	80077ee <UART_SetConfig+0x5a2>
 80077d8:	2340      	movs	r3, #64	; 0x40
 80077da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077de:	e006      	b.n	80077ee <UART_SetConfig+0x5a2>
 80077e0:	2380      	movs	r3, #128	; 0x80
 80077e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077e6:	e002      	b.n	80077ee <UART_SetConfig+0x5a2>
 80077e8:	2380      	movs	r3, #128	; 0x80
 80077ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a40      	ldr	r2, [pc, #256]	; (80078f4 <UART_SetConfig+0x6a8>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	f040 80ef 	bne.w	80079d8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80077fe:	2b20      	cmp	r3, #32
 8007800:	dc46      	bgt.n	8007890 <UART_SetConfig+0x644>
 8007802:	2b02      	cmp	r3, #2
 8007804:	f2c0 8081 	blt.w	800790a <UART_SetConfig+0x6be>
 8007808:	3b02      	subs	r3, #2
 800780a:	2b1e      	cmp	r3, #30
 800780c:	d87d      	bhi.n	800790a <UART_SetConfig+0x6be>
 800780e:	a201      	add	r2, pc, #4	; (adr r2, 8007814 <UART_SetConfig+0x5c8>)
 8007810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007814:	08007897 	.word	0x08007897
 8007818:	0800790b 	.word	0x0800790b
 800781c:	0800789f 	.word	0x0800789f
 8007820:	0800790b 	.word	0x0800790b
 8007824:	0800790b 	.word	0x0800790b
 8007828:	0800790b 	.word	0x0800790b
 800782c:	080078af 	.word	0x080078af
 8007830:	0800790b 	.word	0x0800790b
 8007834:	0800790b 	.word	0x0800790b
 8007838:	0800790b 	.word	0x0800790b
 800783c:	0800790b 	.word	0x0800790b
 8007840:	0800790b 	.word	0x0800790b
 8007844:	0800790b 	.word	0x0800790b
 8007848:	0800790b 	.word	0x0800790b
 800784c:	080078bf 	.word	0x080078bf
 8007850:	0800790b 	.word	0x0800790b
 8007854:	0800790b 	.word	0x0800790b
 8007858:	0800790b 	.word	0x0800790b
 800785c:	0800790b 	.word	0x0800790b
 8007860:	0800790b 	.word	0x0800790b
 8007864:	0800790b 	.word	0x0800790b
 8007868:	0800790b 	.word	0x0800790b
 800786c:	0800790b 	.word	0x0800790b
 8007870:	0800790b 	.word	0x0800790b
 8007874:	0800790b 	.word	0x0800790b
 8007878:	0800790b 	.word	0x0800790b
 800787c:	0800790b 	.word	0x0800790b
 8007880:	0800790b 	.word	0x0800790b
 8007884:	0800790b 	.word	0x0800790b
 8007888:	0800790b 	.word	0x0800790b
 800788c:	080078fd 	.word	0x080078fd
 8007890:	2b40      	cmp	r3, #64	; 0x40
 8007892:	d036      	beq.n	8007902 <UART_SetConfig+0x6b6>
 8007894:	e039      	b.n	800790a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007896:	f7fe fb69 	bl	8005f6c <HAL_RCCEx_GetD3PCLK1Freq>
 800789a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800789c:	e03b      	b.n	8007916 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800789e:	f107 0314 	add.w	r3, r7, #20
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7fe fb78 	bl	8005f98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078ac:	e033      	b.n	8007916 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078ae:	f107 0308 	add.w	r3, r7, #8
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fe fcc4 	bl	8006240 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078bc:	e02b      	b.n	8007916 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078be:	4b0a      	ldr	r3, [pc, #40]	; (80078e8 <UART_SetConfig+0x69c>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0320 	and.w	r3, r3, #32
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d009      	beq.n	80078de <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80078ca:	4b07      	ldr	r3, [pc, #28]	; (80078e8 <UART_SetConfig+0x69c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	08db      	lsrs	r3, r3, #3
 80078d0:	f003 0303 	and.w	r3, r3, #3
 80078d4:	4a08      	ldr	r2, [pc, #32]	; (80078f8 <UART_SetConfig+0x6ac>)
 80078d6:	fa22 f303 	lsr.w	r3, r2, r3
 80078da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80078dc:	e01b      	b.n	8007916 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80078de:	4b06      	ldr	r3, [pc, #24]	; (80078f8 <UART_SetConfig+0x6ac>)
 80078e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078e2:	e018      	b.n	8007916 <UART_SetConfig+0x6ca>
 80078e4:	40011400 	.word	0x40011400
 80078e8:	58024400 	.word	0x58024400
 80078ec:	40007800 	.word	0x40007800
 80078f0:	40007c00 	.word	0x40007c00
 80078f4:	58000c00 	.word	0x58000c00
 80078f8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80078fc:	4bc4      	ldr	r3, [pc, #784]	; (8007c10 <UART_SetConfig+0x9c4>)
 80078fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007900:	e009      	b.n	8007916 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007906:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007908:	e005      	b.n	8007916 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800790a:	2300      	movs	r3, #0
 800790c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007914:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 81da 	beq.w	8007cd2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007922:	4abc      	ldr	r2, [pc, #752]	; (8007c14 <UART_SetConfig+0x9c8>)
 8007924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007928:	461a      	mov	r2, r3
 800792a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007930:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	4613      	mov	r3, r2
 8007938:	005b      	lsls	r3, r3, #1
 800793a:	4413      	add	r3, r2
 800793c:	6a3a      	ldr	r2, [r7, #32]
 800793e:	429a      	cmp	r2, r3
 8007940:	d305      	bcc.n	800794e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007948:	6a3a      	ldr	r2, [r7, #32]
 800794a:	429a      	cmp	r2, r3
 800794c:	d903      	bls.n	8007956 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007954:	e1bd      	b.n	8007cd2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007958:	4618      	mov	r0, r3
 800795a:	f04f 0100 	mov.w	r1, #0
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007962:	4aac      	ldr	r2, [pc, #688]	; (8007c14 <UART_SetConfig+0x9c8>)
 8007964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007968:	b29a      	uxth	r2, r3
 800796a:	f04f 0300 	mov.w	r3, #0
 800796e:	f7f8 fd0f 	bl	8000390 <__aeabi_uldivmod>
 8007972:	4602      	mov	r2, r0
 8007974:	460b      	mov	r3, r1
 8007976:	4610      	mov	r0, r2
 8007978:	4619      	mov	r1, r3
 800797a:	f04f 0200 	mov.w	r2, #0
 800797e:	f04f 0300 	mov.w	r3, #0
 8007982:	020b      	lsls	r3, r1, #8
 8007984:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007988:	0202      	lsls	r2, r0, #8
 800798a:	6879      	ldr	r1, [r7, #4]
 800798c:	6849      	ldr	r1, [r1, #4]
 800798e:	0849      	lsrs	r1, r1, #1
 8007990:	4608      	mov	r0, r1
 8007992:	f04f 0100 	mov.w	r1, #0
 8007996:	1814      	adds	r4, r2, r0
 8007998:	eb43 0501 	adc.w	r5, r3, r1
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	461a      	mov	r2, r3
 80079a2:	f04f 0300 	mov.w	r3, #0
 80079a6:	4620      	mov	r0, r4
 80079a8:	4629      	mov	r1, r5
 80079aa:	f7f8 fcf1 	bl	8000390 <__aeabi_uldivmod>
 80079ae:	4602      	mov	r2, r0
 80079b0:	460b      	mov	r3, r1
 80079b2:	4613      	mov	r3, r2
 80079b4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079bc:	d308      	bcc.n	80079d0 <UART_SetConfig+0x784>
 80079be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079c4:	d204      	bcs.n	80079d0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079cc:	60da      	str	r2, [r3, #12]
 80079ce:	e180      	b.n	8007cd2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80079d6:	e17c      	b.n	8007cd2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	69db      	ldr	r3, [r3, #28]
 80079dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079e0:	f040 80be 	bne.w	8007b60 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 80079e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80079e8:	2b20      	cmp	r3, #32
 80079ea:	dc49      	bgt.n	8007a80 <UART_SetConfig+0x834>
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	db7c      	blt.n	8007aea <UART_SetConfig+0x89e>
 80079f0:	2b20      	cmp	r3, #32
 80079f2:	d87a      	bhi.n	8007aea <UART_SetConfig+0x89e>
 80079f4:	a201      	add	r2, pc, #4	; (adr r2, 80079fc <UART_SetConfig+0x7b0>)
 80079f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fa:	bf00      	nop
 80079fc:	08007a87 	.word	0x08007a87
 8007a00:	08007a8f 	.word	0x08007a8f
 8007a04:	08007aeb 	.word	0x08007aeb
 8007a08:	08007aeb 	.word	0x08007aeb
 8007a0c:	08007a97 	.word	0x08007a97
 8007a10:	08007aeb 	.word	0x08007aeb
 8007a14:	08007aeb 	.word	0x08007aeb
 8007a18:	08007aeb 	.word	0x08007aeb
 8007a1c:	08007aa7 	.word	0x08007aa7
 8007a20:	08007aeb 	.word	0x08007aeb
 8007a24:	08007aeb 	.word	0x08007aeb
 8007a28:	08007aeb 	.word	0x08007aeb
 8007a2c:	08007aeb 	.word	0x08007aeb
 8007a30:	08007aeb 	.word	0x08007aeb
 8007a34:	08007aeb 	.word	0x08007aeb
 8007a38:	08007aeb 	.word	0x08007aeb
 8007a3c:	08007ab7 	.word	0x08007ab7
 8007a40:	08007aeb 	.word	0x08007aeb
 8007a44:	08007aeb 	.word	0x08007aeb
 8007a48:	08007aeb 	.word	0x08007aeb
 8007a4c:	08007aeb 	.word	0x08007aeb
 8007a50:	08007aeb 	.word	0x08007aeb
 8007a54:	08007aeb 	.word	0x08007aeb
 8007a58:	08007aeb 	.word	0x08007aeb
 8007a5c:	08007aeb 	.word	0x08007aeb
 8007a60:	08007aeb 	.word	0x08007aeb
 8007a64:	08007aeb 	.word	0x08007aeb
 8007a68:	08007aeb 	.word	0x08007aeb
 8007a6c:	08007aeb 	.word	0x08007aeb
 8007a70:	08007aeb 	.word	0x08007aeb
 8007a74:	08007aeb 	.word	0x08007aeb
 8007a78:	08007aeb 	.word	0x08007aeb
 8007a7c:	08007add 	.word	0x08007add
 8007a80:	2b40      	cmp	r3, #64	; 0x40
 8007a82:	d02e      	beq.n	8007ae2 <UART_SetConfig+0x896>
 8007a84:	e031      	b.n	8007aea <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a86:	f7fc fe33 	bl	80046f0 <HAL_RCC_GetPCLK1Freq>
 8007a8a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007a8c:	e033      	b.n	8007af6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a8e:	f7fc fe45 	bl	800471c <HAL_RCC_GetPCLK2Freq>
 8007a92:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007a94:	e02f      	b.n	8007af6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a96:	f107 0314 	add.w	r3, r7, #20
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7fe fa7c 	bl	8005f98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007aa4:	e027      	b.n	8007af6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007aa6:	f107 0308 	add.w	r3, r7, #8
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fe fbc8 	bl	8006240 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ab4:	e01f      	b.n	8007af6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ab6:	4b58      	ldr	r3, [pc, #352]	; (8007c18 <UART_SetConfig+0x9cc>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 0320 	and.w	r3, r3, #32
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d009      	beq.n	8007ad6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ac2:	4b55      	ldr	r3, [pc, #340]	; (8007c18 <UART_SetConfig+0x9cc>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	08db      	lsrs	r3, r3, #3
 8007ac8:	f003 0303 	and.w	r3, r3, #3
 8007acc:	4a53      	ldr	r2, [pc, #332]	; (8007c1c <UART_SetConfig+0x9d0>)
 8007ace:	fa22 f303 	lsr.w	r3, r2, r3
 8007ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ad4:	e00f      	b.n	8007af6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8007ad6:	4b51      	ldr	r3, [pc, #324]	; (8007c1c <UART_SetConfig+0x9d0>)
 8007ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ada:	e00c      	b.n	8007af6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007adc:	4b4c      	ldr	r3, [pc, #304]	; (8007c10 <UART_SetConfig+0x9c4>)
 8007ade:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ae0:	e009      	b.n	8007af6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ae8:	e005      	b.n	8007af6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8007aea:	2300      	movs	r3, #0
 8007aec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007af4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 80ea 	beq.w	8007cd2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b02:	4a44      	ldr	r2, [pc, #272]	; (8007c14 <UART_SetConfig+0x9c8>)
 8007b04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b10:	005a      	lsls	r2, r3, #1
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	085b      	lsrs	r3, r3, #1
 8007b18:	441a      	add	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b22:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b26:	2b0f      	cmp	r3, #15
 8007b28:	d916      	bls.n	8007b58 <UART_SetConfig+0x90c>
 8007b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b30:	d212      	bcs.n	8007b58 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	f023 030f 	bic.w	r3, r3, #15
 8007b3a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3e:	085b      	lsrs	r3, r3, #1
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	f003 0307 	and.w	r3, r3, #7
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007b54:	60da      	str	r2, [r3, #12]
 8007b56:	e0bc      	b.n	8007cd2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007b5e:	e0b8      	b.n	8007cd2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007b64:	2b20      	cmp	r3, #32
 8007b66:	dc4b      	bgt.n	8007c00 <UART_SetConfig+0x9b4>
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f2c0 8087 	blt.w	8007c7c <UART_SetConfig+0xa30>
 8007b6e:	2b20      	cmp	r3, #32
 8007b70:	f200 8084 	bhi.w	8007c7c <UART_SetConfig+0xa30>
 8007b74:	a201      	add	r2, pc, #4	; (adr r2, 8007b7c <UART_SetConfig+0x930>)
 8007b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7a:	bf00      	nop
 8007b7c:	08007c07 	.word	0x08007c07
 8007b80:	08007c21 	.word	0x08007c21
 8007b84:	08007c7d 	.word	0x08007c7d
 8007b88:	08007c7d 	.word	0x08007c7d
 8007b8c:	08007c29 	.word	0x08007c29
 8007b90:	08007c7d 	.word	0x08007c7d
 8007b94:	08007c7d 	.word	0x08007c7d
 8007b98:	08007c7d 	.word	0x08007c7d
 8007b9c:	08007c39 	.word	0x08007c39
 8007ba0:	08007c7d 	.word	0x08007c7d
 8007ba4:	08007c7d 	.word	0x08007c7d
 8007ba8:	08007c7d 	.word	0x08007c7d
 8007bac:	08007c7d 	.word	0x08007c7d
 8007bb0:	08007c7d 	.word	0x08007c7d
 8007bb4:	08007c7d 	.word	0x08007c7d
 8007bb8:	08007c7d 	.word	0x08007c7d
 8007bbc:	08007c49 	.word	0x08007c49
 8007bc0:	08007c7d 	.word	0x08007c7d
 8007bc4:	08007c7d 	.word	0x08007c7d
 8007bc8:	08007c7d 	.word	0x08007c7d
 8007bcc:	08007c7d 	.word	0x08007c7d
 8007bd0:	08007c7d 	.word	0x08007c7d
 8007bd4:	08007c7d 	.word	0x08007c7d
 8007bd8:	08007c7d 	.word	0x08007c7d
 8007bdc:	08007c7d 	.word	0x08007c7d
 8007be0:	08007c7d 	.word	0x08007c7d
 8007be4:	08007c7d 	.word	0x08007c7d
 8007be8:	08007c7d 	.word	0x08007c7d
 8007bec:	08007c7d 	.word	0x08007c7d
 8007bf0:	08007c7d 	.word	0x08007c7d
 8007bf4:	08007c7d 	.word	0x08007c7d
 8007bf8:	08007c7d 	.word	0x08007c7d
 8007bfc:	08007c6f 	.word	0x08007c6f
 8007c00:	2b40      	cmp	r3, #64	; 0x40
 8007c02:	d037      	beq.n	8007c74 <UART_SetConfig+0xa28>
 8007c04:	e03a      	b.n	8007c7c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c06:	f7fc fd73 	bl	80046f0 <HAL_RCC_GetPCLK1Freq>
 8007c0a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007c0c:	e03c      	b.n	8007c88 <UART_SetConfig+0xa3c>
 8007c0e:	bf00      	nop
 8007c10:	003d0900 	.word	0x003d0900
 8007c14:	08009194 	.word	0x08009194
 8007c18:	58024400 	.word	0x58024400
 8007c1c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c20:	f7fc fd7c 	bl	800471c <HAL_RCC_GetPCLK2Freq>
 8007c24:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007c26:	e02f      	b.n	8007c88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c28:	f107 0314 	add.w	r3, r7, #20
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7fe f9b3 	bl	8005f98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c36:	e027      	b.n	8007c88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c38:	f107 0308 	add.w	r3, r7, #8
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fe faff 	bl	8006240 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c46:	e01f      	b.n	8007c88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c48:	4b2c      	ldr	r3, [pc, #176]	; (8007cfc <UART_SetConfig+0xab0>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 0320 	and.w	r3, r3, #32
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d009      	beq.n	8007c68 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c54:	4b29      	ldr	r3, [pc, #164]	; (8007cfc <UART_SetConfig+0xab0>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	08db      	lsrs	r3, r3, #3
 8007c5a:	f003 0303 	and.w	r3, r3, #3
 8007c5e:	4a28      	ldr	r2, [pc, #160]	; (8007d00 <UART_SetConfig+0xab4>)
 8007c60:	fa22 f303 	lsr.w	r3, r2, r3
 8007c64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c66:	e00f      	b.n	8007c88 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8007c68:	4b25      	ldr	r3, [pc, #148]	; (8007d00 <UART_SetConfig+0xab4>)
 8007c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c6c:	e00c      	b.n	8007c88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c6e:	4b25      	ldr	r3, [pc, #148]	; (8007d04 <UART_SetConfig+0xab8>)
 8007c70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c72:	e009      	b.n	8007c88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c7a:	e005      	b.n	8007c88 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007c86:	bf00      	nop
    }

    if (pclk != 0U)
 8007c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d021      	beq.n	8007cd2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c92:	4a1d      	ldr	r2, [pc, #116]	; (8007d08 <UART_SetConfig+0xabc>)
 8007c94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c98:	461a      	mov	r2, r3
 8007c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	085b      	lsrs	r3, r3, #1
 8007ca6:	441a      	add	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb4:	2b0f      	cmp	r3, #15
 8007cb6:	d909      	bls.n	8007ccc <UART_SetConfig+0xa80>
 8007cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cbe:	d205      	bcs.n	8007ccc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	60da      	str	r2, [r3, #12]
 8007cca:	e002      	b.n	8007cd2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007cee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3738      	adds	r7, #56	; 0x38
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bdb0      	pop	{r4, r5, r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	58024400 	.word	0x58024400
 8007d00:	03d09000 	.word	0x03d09000
 8007d04:	003d0900 	.word	0x003d0900
 8007d08:	08009194 	.word	0x08009194

08007d0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d18:	f003 0301 	and.w	r3, r3, #1
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00a      	beq.n	8007d36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	430a      	orrs	r2, r1
 8007d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3a:	f003 0302 	and.w	r3, r3, #2
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00a      	beq.n	8007d58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	430a      	orrs	r2, r1
 8007d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d5c:	f003 0304 	and.w	r3, r3, #4
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00a      	beq.n	8007d7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	430a      	orrs	r2, r1
 8007d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d7e:	f003 0308 	and.w	r3, r3, #8
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00a      	beq.n	8007d9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da0:	f003 0310 	and.w	r3, r3, #16
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00a      	beq.n	8007dbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	430a      	orrs	r2, r1
 8007dbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc2:	f003 0320 	and.w	r3, r3, #32
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00a      	beq.n	8007de0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d01a      	beq.n	8007e22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e0a:	d10a      	bne.n	8007e22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00a      	beq.n	8007e44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	430a      	orrs	r2, r1
 8007e42:	605a      	str	r2, [r3, #4]
  }
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af02      	add	r7, sp, #8
 8007e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e60:	f7f9 ff62 	bl	8001d28 <HAL_GetTick>
 8007e64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 0308 	and.w	r3, r3, #8
 8007e70:	2b08      	cmp	r3, #8
 8007e72:	d10e      	bne.n	8007e92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f82f 	bl	8007ee6 <UART_WaitOnFlagUntilTimeout>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d001      	beq.n	8007e92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e025      	b.n	8007ede <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 0304 	and.w	r3, r3, #4
 8007e9c:	2b04      	cmp	r3, #4
 8007e9e:	d10e      	bne.n	8007ebe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ea0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f819 	bl	8007ee6 <UART_WaitOnFlagUntilTimeout>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d001      	beq.n	8007ebe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e00f      	b.n	8007ede <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2220      	movs	r2, #32
 8007ec2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2220      	movs	r2, #32
 8007eca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b09c      	sub	sp, #112	; 0x70
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	60f8      	str	r0, [r7, #12]
 8007eee:	60b9      	str	r1, [r7, #8]
 8007ef0:	603b      	str	r3, [r7, #0]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ef6:	e0a9      	b.n	800804c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ef8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efe:	f000 80a5 	beq.w	800804c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f02:	f7f9 ff11 	bl	8001d28 <HAL_GetTick>
 8007f06:	4602      	mov	r2, r0
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d302      	bcc.n	8007f18 <UART_WaitOnFlagUntilTimeout+0x32>
 8007f12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d140      	bne.n	8007f9a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f20:	e853 3f00 	ldrex	r3, [r3]
 8007f24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f2c:	667b      	str	r3, [r7, #100]	; 0x64
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f38:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f3e:	e841 2300 	strex	r3, r2, [r1]
 8007f42:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1e6      	bne.n	8007f18 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	3308      	adds	r3, #8
 8007f50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f54:	e853 3f00 	ldrex	r3, [r3]
 8007f58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5c:	f023 0301 	bic.w	r3, r3, #1
 8007f60:	663b      	str	r3, [r7, #96]	; 0x60
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3308      	adds	r3, #8
 8007f68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007f6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f72:	e841 2300 	strex	r3, r2, [r1]
 8007f76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1e5      	bne.n	8007f4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2220      	movs	r2, #32
 8007f82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2220      	movs	r2, #32
 8007f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e069      	b.n	800806e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 0304 	and.w	r3, r3, #4
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d051      	beq.n	800804c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	69db      	ldr	r3, [r3, #28]
 8007fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fb6:	d149      	bne.n	800804c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fc0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fca:	e853 3f00 	ldrex	r3, [r3]
 8007fce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007fd6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8007fe2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007fe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fe8:	e841 2300 	strex	r3, r2, [r1]
 8007fec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1e6      	bne.n	8007fc2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	3308      	adds	r3, #8
 8007ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	e853 3f00 	ldrex	r3, [r3]
 8008002:	613b      	str	r3, [r7, #16]
   return(result);
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	f023 0301 	bic.w	r3, r3, #1
 800800a:	66bb      	str	r3, [r7, #104]	; 0x68
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3308      	adds	r3, #8
 8008012:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008014:	623a      	str	r2, [r7, #32]
 8008016:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008018:	69f9      	ldr	r1, [r7, #28]
 800801a:	6a3a      	ldr	r2, [r7, #32]
 800801c:	e841 2300 	strex	r3, r2, [r1]
 8008020:	61bb      	str	r3, [r7, #24]
   return(result);
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1e5      	bne.n	8007ff4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2220      	movs	r2, #32
 800802c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2220      	movs	r2, #32
 8008034:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2220      	movs	r2, #32
 800803c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2200      	movs	r2, #0
 8008044:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e010      	b.n	800806e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	69da      	ldr	r2, [r3, #28]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	4013      	ands	r3, r2
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	429a      	cmp	r2, r3
 800805a:	bf0c      	ite	eq
 800805c:	2301      	moveq	r3, #1
 800805e:	2300      	movne	r3, #0
 8008060:	b2db      	uxtb	r3, r3
 8008062:	461a      	mov	r2, r3
 8008064:	79fb      	ldrb	r3, [r7, #7]
 8008066:	429a      	cmp	r2, r3
 8008068:	f43f af46 	beq.w	8007ef8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3770      	adds	r7, #112	; 0x70
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008076:	b480      	push	{r7}
 8008078:	b085      	sub	sp, #20
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008084:	2b01      	cmp	r3, #1
 8008086:	d101      	bne.n	800808c <HAL_UARTEx_DisableFifoMode+0x16>
 8008088:	2302      	movs	r3, #2
 800808a:	e027      	b.n	80080dc <HAL_UARTEx_DisableFifoMode+0x66>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2224      	movs	r2, #36	; 0x24
 8008098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f022 0201 	bic.w	r2, r2, #1
 80080b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80080ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2220      	movs	r2, #32
 80080ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3714      	adds	r7, #20
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d101      	bne.n	8008100 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80080fc:	2302      	movs	r3, #2
 80080fe:	e02d      	b.n	800815c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2224      	movs	r2, #36	; 0x24
 800810c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f022 0201 	bic.w	r2, r2, #1
 8008126:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	683a      	ldr	r2, [r7, #0]
 8008138:	430a      	orrs	r2, r1
 800813a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f84f 	bl	80081e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2220      	movs	r2, #32
 800814e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008174:	2b01      	cmp	r3, #1
 8008176:	d101      	bne.n	800817c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008178:	2302      	movs	r3, #2
 800817a:	e02d      	b.n	80081d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2224      	movs	r2, #36	; 0x24
 8008188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f022 0201 	bic.w	r2, r2, #1
 80081a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	430a      	orrs	r2, r1
 80081b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 f811 	bl	80081e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2220      	movs	r2, #32
 80081ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d108      	bne.n	8008202 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008200:	e031      	b.n	8008266 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008202:	2310      	movs	r3, #16
 8008204:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008206:	2310      	movs	r3, #16
 8008208:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	0e5b      	lsrs	r3, r3, #25
 8008212:	b2db      	uxtb	r3, r3
 8008214:	f003 0307 	and.w	r3, r3, #7
 8008218:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	0f5b      	lsrs	r3, r3, #29
 8008222:	b2db      	uxtb	r3, r3
 8008224:	f003 0307 	and.w	r3, r3, #7
 8008228:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800822a:	7bbb      	ldrb	r3, [r7, #14]
 800822c:	7b3a      	ldrb	r2, [r7, #12]
 800822e:	4911      	ldr	r1, [pc, #68]	; (8008274 <UARTEx_SetNbDataToProcess+0x94>)
 8008230:	5c8a      	ldrb	r2, [r1, r2]
 8008232:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008236:	7b3a      	ldrb	r2, [r7, #12]
 8008238:	490f      	ldr	r1, [pc, #60]	; (8008278 <UARTEx_SetNbDataToProcess+0x98>)
 800823a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800823c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008240:	b29a      	uxth	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008248:	7bfb      	ldrb	r3, [r7, #15]
 800824a:	7b7a      	ldrb	r2, [r7, #13]
 800824c:	4909      	ldr	r1, [pc, #36]	; (8008274 <UARTEx_SetNbDataToProcess+0x94>)
 800824e:	5c8a      	ldrb	r2, [r1, r2]
 8008250:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008254:	7b7a      	ldrb	r2, [r7, #13]
 8008256:	4908      	ldr	r1, [pc, #32]	; (8008278 <UARTEx_SetNbDataToProcess+0x98>)
 8008258:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800825a:	fb93 f3f2 	sdiv	r3, r3, r2
 800825e:	b29a      	uxth	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008266:	bf00      	nop
 8008268:	3714      	adds	r7, #20
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	080091ac 	.word	0x080091ac
 8008278:	080091b4 	.word	0x080091b4

0800827c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800827c:	b084      	sub	sp, #16
 800827e:	b580      	push	{r7, lr}
 8008280:	b084      	sub	sp, #16
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	f107 001c 	add.w	r0, r7, #28
 800828a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800828e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008290:	2b01      	cmp	r3, #1
 8008292:	d120      	bne.n	80082d6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008298:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	68da      	ldr	r2, [r3, #12]
 80082a4:	4b2a      	ldr	r3, [pc, #168]	; (8008350 <USB_CoreInit+0xd4>)
 80082a6:	4013      	ands	r3, r2
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80082b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d105      	bne.n	80082ca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 faa8 	bl	8008820 <USB_CoreReset>
 80082d0:	4603      	mov	r3, r0
 80082d2:	73fb      	strb	r3, [r7, #15]
 80082d4:	e01a      	b.n	800830c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fa9c 	bl	8008820 <USB_CoreReset>
 80082e8:	4603      	mov	r3, r0
 80082ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80082ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d106      	bne.n	8008300 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	639a      	str	r2, [r3, #56]	; 0x38
 80082fe:	e005      	b.n	800830c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008304:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800830c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830e:	2b01      	cmp	r3, #1
 8008310:	d116      	bne.n	8008340 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008316:	b29a      	uxth	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008320:	4b0c      	ldr	r3, [pc, #48]	; (8008354 <USB_CoreInit+0xd8>)
 8008322:	4313      	orrs	r3, r2
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	f043 0206 	orr.w	r2, r3, #6
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	f043 0220 	orr.w	r2, r3, #32
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008340:	7bfb      	ldrb	r3, [r7, #15]
}
 8008342:	4618      	mov	r0, r3
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800834c:	b004      	add	sp, #16
 800834e:	4770      	bx	lr
 8008350:	ffbdffbf 	.word	0xffbdffbf
 8008354:	03ee0000 	.word	0x03ee0000

08008358 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	f023 0201 	bic.w	r2, r3, #1
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	370c      	adds	r7, #12
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr

0800837a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b084      	sub	sp, #16
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
 8008382:	460b      	mov	r3, r1
 8008384:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008386:	2300      	movs	r3, #0
 8008388:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008396:	78fb      	ldrb	r3, [r7, #3]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d115      	bne.n	80083c8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80083a8:	2001      	movs	r0, #1
 80083aa:	f7f9 fcc9 	bl	8001d40 <HAL_Delay>
      ms++;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	3301      	adds	r3, #1
 80083b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fa25 	bl	8008804 <USB_GetMode>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d01e      	beq.n	80083fe <USB_SetCurrentMode+0x84>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2b31      	cmp	r3, #49	; 0x31
 80083c4:	d9f0      	bls.n	80083a8 <USB_SetCurrentMode+0x2e>
 80083c6:	e01a      	b.n	80083fe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80083c8:	78fb      	ldrb	r3, [r7, #3]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d115      	bne.n	80083fa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80083da:	2001      	movs	r0, #1
 80083dc:	f7f9 fcb0 	bl	8001d40 <HAL_Delay>
      ms++;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	3301      	adds	r3, #1
 80083e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fa0c 	bl	8008804 <USB_GetMode>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d005      	beq.n	80083fe <USB_SetCurrentMode+0x84>
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2b31      	cmp	r3, #49	; 0x31
 80083f6:	d9f0      	bls.n	80083da <USB_SetCurrentMode+0x60>
 80083f8:	e001      	b.n	80083fe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e005      	b.n	800840a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2b32      	cmp	r3, #50	; 0x32
 8008402:	d101      	bne.n	8008408 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e000      	b.n	800840a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
	...

08008414 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008414:	b084      	sub	sp, #16
 8008416:	b580      	push	{r7, lr}
 8008418:	b086      	sub	sp, #24
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008422:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008426:	2300      	movs	r3, #0
 8008428:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800842e:	2300      	movs	r3, #0
 8008430:	613b      	str	r3, [r7, #16]
 8008432:	e009      	b.n	8008448 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	3340      	adds	r3, #64	; 0x40
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	2200      	movs	r2, #0
 8008440:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	3301      	adds	r3, #1
 8008446:	613b      	str	r3, [r7, #16]
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	2b0e      	cmp	r3, #14
 800844c:	d9f2      	bls.n	8008434 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800844e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008450:	2b00      	cmp	r3, #0
 8008452:	d11c      	bne.n	800848e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008462:	f043 0302 	orr.w	r3, r3, #2
 8008466:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	601a      	str	r2, [r3, #0]
 800848c:	e005      	b.n	800849a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008492:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80084a0:	461a      	mov	r2, r3
 80084a2:	2300      	movs	r3, #0
 80084a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ac:	4619      	mov	r1, r3
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084b4:	461a      	mov	r2, r3
 80084b6:	680b      	ldr	r3, [r1, #0]
 80084b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80084ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d10c      	bne.n	80084da <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80084c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d104      	bne.n	80084d0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80084c6:	2100      	movs	r1, #0
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f961 	bl	8008790 <USB_SetDevSpeed>
 80084ce:	e008      	b.n	80084e2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80084d0:	2101      	movs	r1, #1
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f95c 	bl	8008790 <USB_SetDevSpeed>
 80084d8:	e003      	b.n	80084e2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80084da:	2103      	movs	r1, #3
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 f957 	bl	8008790 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80084e2:	2110      	movs	r1, #16
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 f8f3 	bl	80086d0 <USB_FlushTxFifo>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d001      	beq.n	80084f4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 f91d 	bl	8008734 <USB_FlushRxFifo>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d001      	beq.n	8008504 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800850a:	461a      	mov	r2, r3
 800850c:	2300      	movs	r3, #0
 800850e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008516:	461a      	mov	r2, r3
 8008518:	2300      	movs	r3, #0
 800851a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008522:	461a      	mov	r2, r3
 8008524:	2300      	movs	r3, #0
 8008526:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008528:	2300      	movs	r3, #0
 800852a:	613b      	str	r3, [r7, #16]
 800852c:	e043      	b.n	80085b6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	015a      	lsls	r2, r3, #5
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	4413      	add	r3, r2
 8008536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008540:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008544:	d118      	bne.n	8008578 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10a      	bne.n	8008562 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	015a      	lsls	r2, r3, #5
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	4413      	add	r3, r2
 8008554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008558:	461a      	mov	r2, r3
 800855a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800855e:	6013      	str	r3, [r2, #0]
 8008560:	e013      	b.n	800858a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	015a      	lsls	r2, r3, #5
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	4413      	add	r3, r2
 800856a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800856e:	461a      	mov	r2, r3
 8008570:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008574:	6013      	str	r3, [r2, #0]
 8008576:	e008      	b.n	800858a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	015a      	lsls	r2, r3, #5
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	4413      	add	r3, r2
 8008580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008584:	461a      	mov	r2, r3
 8008586:	2300      	movs	r3, #0
 8008588:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	015a      	lsls	r2, r3, #5
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	4413      	add	r3, r2
 8008592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008596:	461a      	mov	r2, r3
 8008598:	2300      	movs	r3, #0
 800859a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	015a      	lsls	r2, r3, #5
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	4413      	add	r3, r2
 80085a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a8:	461a      	mov	r2, r3
 80085aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80085ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	3301      	adds	r3, #1
 80085b4:	613b      	str	r3, [r7, #16]
 80085b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b8:	693a      	ldr	r2, [r7, #16]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d3b7      	bcc.n	800852e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085be:	2300      	movs	r3, #0
 80085c0:	613b      	str	r3, [r7, #16]
 80085c2:	e043      	b.n	800864c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	015a      	lsls	r2, r3, #5
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	4413      	add	r3, r2
 80085cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085da:	d118      	bne.n	800860e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d10a      	bne.n	80085f8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	015a      	lsls	r2, r3, #5
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	4413      	add	r3, r2
 80085ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ee:	461a      	mov	r2, r3
 80085f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80085f4:	6013      	str	r3, [r2, #0]
 80085f6:	e013      	b.n	8008620 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	015a      	lsls	r2, r3, #5
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	4413      	add	r3, r2
 8008600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008604:	461a      	mov	r2, r3
 8008606:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800860a:	6013      	str	r3, [r2, #0]
 800860c:	e008      	b.n	8008620 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	015a      	lsls	r2, r3, #5
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	4413      	add	r3, r2
 8008616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800861a:	461a      	mov	r2, r3
 800861c:	2300      	movs	r3, #0
 800861e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	015a      	lsls	r2, r3, #5
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	4413      	add	r3, r2
 8008628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800862c:	461a      	mov	r2, r3
 800862e:	2300      	movs	r3, #0
 8008630:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	015a      	lsls	r2, r3, #5
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	4413      	add	r3, r2
 800863a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800863e:	461a      	mov	r2, r3
 8008640:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008644:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	3301      	adds	r3, #1
 800864a:	613b      	str	r3, [r7, #16]
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864e:	693a      	ldr	r2, [r7, #16]
 8008650:	429a      	cmp	r2, r3
 8008652:	d3b7      	bcc.n	80085c4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008662:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008666:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008674:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008678:	2b00      	cmp	r3, #0
 800867a:	d105      	bne.n	8008688 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	f043 0210 	orr.w	r2, r3, #16
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	699a      	ldr	r2, [r3, #24]
 800868c:	4b0e      	ldr	r3, [pc, #56]	; (80086c8 <USB_DevInit+0x2b4>)
 800868e:	4313      	orrs	r3, r2
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008696:	2b00      	cmp	r3, #0
 8008698:	d005      	beq.n	80086a6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	699b      	ldr	r3, [r3, #24]
 800869e:	f043 0208 	orr.w	r2, r3, #8
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80086a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d105      	bne.n	80086b8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	699a      	ldr	r2, [r3, #24]
 80086b0:	4b06      	ldr	r3, [pc, #24]	; (80086cc <USB_DevInit+0x2b8>)
 80086b2:	4313      	orrs	r3, r2
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80086b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3718      	adds	r7, #24
 80086be:	46bd      	mov	sp, r7
 80086c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80086c4:	b004      	add	sp, #16
 80086c6:	4770      	bx	lr
 80086c8:	803c3800 	.word	0x803c3800
 80086cc:	40000004 	.word	0x40000004

080086d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80086da:	2300      	movs	r3, #0
 80086dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	3301      	adds	r3, #1
 80086e2:	60fb      	str	r3, [r7, #12]
 80086e4:	4a12      	ldr	r2, [pc, #72]	; (8008730 <USB_FlushTxFifo+0x60>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d901      	bls.n	80086ee <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80086ea:	2303      	movs	r3, #3
 80086ec:	e01a      	b.n	8008724 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	daf3      	bge.n	80086de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80086f6:	2300      	movs	r3, #0
 80086f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	019b      	lsls	r3, r3, #6
 80086fe:	f043 0220 	orr.w	r2, r3, #32
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	3301      	adds	r3, #1
 800870a:	60fb      	str	r3, [r7, #12]
 800870c:	4a08      	ldr	r2, [pc, #32]	; (8008730 <USB_FlushTxFifo+0x60>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d901      	bls.n	8008716 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8008712:	2303      	movs	r3, #3
 8008714:	e006      	b.n	8008724 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	f003 0320 	and.w	r3, r3, #32
 800871e:	2b20      	cmp	r3, #32
 8008720:	d0f1      	beq.n	8008706 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3714      	adds	r7, #20
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr
 8008730:	00030d40 	.word	0x00030d40

08008734 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800873c:	2300      	movs	r3, #0
 800873e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	3301      	adds	r3, #1
 8008744:	60fb      	str	r3, [r7, #12]
 8008746:	4a11      	ldr	r2, [pc, #68]	; (800878c <USB_FlushRxFifo+0x58>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d901      	bls.n	8008750 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800874c:	2303      	movs	r3, #3
 800874e:	e017      	b.n	8008780 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	2b00      	cmp	r3, #0
 8008756:	daf3      	bge.n	8008740 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008758:	2300      	movs	r3, #0
 800875a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2210      	movs	r2, #16
 8008760:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	3301      	adds	r3, #1
 8008766:	60fb      	str	r3, [r7, #12]
 8008768:	4a08      	ldr	r2, [pc, #32]	; (800878c <USB_FlushRxFifo+0x58>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d901      	bls.n	8008772 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800876e:	2303      	movs	r3, #3
 8008770:	e006      	b.n	8008780 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	f003 0310 	and.w	r3, r3, #16
 800877a:	2b10      	cmp	r3, #16
 800877c:	d0f1      	beq.n	8008762 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3714      	adds	r7, #20
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	00030d40 	.word	0x00030d40

08008790 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	460b      	mov	r3, r1
 800879a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	78fb      	ldrb	r3, [r7, #3]
 80087aa:	68f9      	ldr	r1, [r7, #12]
 80087ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087b0:	4313      	orrs	r3, r2
 80087b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3714      	adds	r7, #20
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr

080087c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80087c2:	b480      	push	{r7}
 80087c4:	b085      	sub	sp, #20
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80087dc:	f023 0303 	bic.w	r3, r3, #3
 80087e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087f0:	f043 0302 	orr.w	r3, r3, #2
 80087f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3714      	adds	r7, #20
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	695b      	ldr	r3, [r3, #20]
 8008810:	f003 0301 	and.w	r3, r3, #1
}
 8008814:	4618      	mov	r0, r3
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008820:	b480      	push	{r7}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008828:	2300      	movs	r3, #0
 800882a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	3301      	adds	r3, #1
 8008830:	60fb      	str	r3, [r7, #12]
 8008832:	4a13      	ldr	r2, [pc, #76]	; (8008880 <USB_CoreReset+0x60>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d901      	bls.n	800883c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008838:	2303      	movs	r3, #3
 800883a:	e01a      	b.n	8008872 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	2b00      	cmp	r3, #0
 8008842:	daf3      	bge.n	800882c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008844:	2300      	movs	r3, #0
 8008846:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	f043 0201 	orr.w	r2, r3, #1
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	3301      	adds	r3, #1
 8008858:	60fb      	str	r3, [r7, #12]
 800885a:	4a09      	ldr	r2, [pc, #36]	; (8008880 <USB_CoreReset+0x60>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d901      	bls.n	8008864 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008860:	2303      	movs	r3, #3
 8008862:	e006      	b.n	8008872 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	691b      	ldr	r3, [r3, #16]
 8008868:	f003 0301 	and.w	r3, r3, #1
 800886c:	2b01      	cmp	r3, #1
 800886e:	d0f1      	beq.n	8008854 <USB_CoreReset+0x34>

  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3714      	adds	r7, #20
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	00030d40 	.word	0x00030d40

08008884 <__errno>:
 8008884:	4b01      	ldr	r3, [pc, #4]	; (800888c <__errno+0x8>)
 8008886:	6818      	ldr	r0, [r3, #0]
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	24000010 	.word	0x24000010

08008890 <__libc_init_array>:
 8008890:	b570      	push	{r4, r5, r6, lr}
 8008892:	4d0d      	ldr	r5, [pc, #52]	; (80088c8 <__libc_init_array+0x38>)
 8008894:	4c0d      	ldr	r4, [pc, #52]	; (80088cc <__libc_init_array+0x3c>)
 8008896:	1b64      	subs	r4, r4, r5
 8008898:	10a4      	asrs	r4, r4, #2
 800889a:	2600      	movs	r6, #0
 800889c:	42a6      	cmp	r6, r4
 800889e:	d109      	bne.n	80088b4 <__libc_init_array+0x24>
 80088a0:	4d0b      	ldr	r5, [pc, #44]	; (80088d0 <__libc_init_array+0x40>)
 80088a2:	4c0c      	ldr	r4, [pc, #48]	; (80088d4 <__libc_init_array+0x44>)
 80088a4:	f000 fc4e 	bl	8009144 <_init>
 80088a8:	1b64      	subs	r4, r4, r5
 80088aa:	10a4      	asrs	r4, r4, #2
 80088ac:	2600      	movs	r6, #0
 80088ae:	42a6      	cmp	r6, r4
 80088b0:	d105      	bne.n	80088be <__libc_init_array+0x2e>
 80088b2:	bd70      	pop	{r4, r5, r6, pc}
 80088b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80088b8:	4798      	blx	r3
 80088ba:	3601      	adds	r6, #1
 80088bc:	e7ee      	b.n	800889c <__libc_init_array+0xc>
 80088be:	f855 3b04 	ldr.w	r3, [r5], #4
 80088c2:	4798      	blx	r3
 80088c4:	3601      	adds	r6, #1
 80088c6:	e7f2      	b.n	80088ae <__libc_init_array+0x1e>
 80088c8:	080091f8 	.word	0x080091f8
 80088cc:	080091f8 	.word	0x080091f8
 80088d0:	080091f8 	.word	0x080091f8
 80088d4:	080091fc 	.word	0x080091fc

080088d8 <memcpy>:
 80088d8:	440a      	add	r2, r1
 80088da:	4291      	cmp	r1, r2
 80088dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80088e0:	d100      	bne.n	80088e4 <memcpy+0xc>
 80088e2:	4770      	bx	lr
 80088e4:	b510      	push	{r4, lr}
 80088e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088ee:	4291      	cmp	r1, r2
 80088f0:	d1f9      	bne.n	80088e6 <memcpy+0xe>
 80088f2:	bd10      	pop	{r4, pc}

080088f4 <memmove>:
 80088f4:	4288      	cmp	r0, r1
 80088f6:	b510      	push	{r4, lr}
 80088f8:	eb01 0402 	add.w	r4, r1, r2
 80088fc:	d902      	bls.n	8008904 <memmove+0x10>
 80088fe:	4284      	cmp	r4, r0
 8008900:	4623      	mov	r3, r4
 8008902:	d807      	bhi.n	8008914 <memmove+0x20>
 8008904:	1e43      	subs	r3, r0, #1
 8008906:	42a1      	cmp	r1, r4
 8008908:	d008      	beq.n	800891c <memmove+0x28>
 800890a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800890e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008912:	e7f8      	b.n	8008906 <memmove+0x12>
 8008914:	4402      	add	r2, r0
 8008916:	4601      	mov	r1, r0
 8008918:	428a      	cmp	r2, r1
 800891a:	d100      	bne.n	800891e <memmove+0x2a>
 800891c:	bd10      	pop	{r4, pc}
 800891e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008922:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008926:	e7f7      	b.n	8008918 <memmove+0x24>

08008928 <memset>:
 8008928:	4402      	add	r2, r0
 800892a:	4603      	mov	r3, r0
 800892c:	4293      	cmp	r3, r2
 800892e:	d100      	bne.n	8008932 <memset+0xa>
 8008930:	4770      	bx	lr
 8008932:	f803 1b01 	strb.w	r1, [r3], #1
 8008936:	e7f9      	b.n	800892c <memset+0x4>

08008938 <siprintf>:
 8008938:	b40e      	push	{r1, r2, r3}
 800893a:	b500      	push	{lr}
 800893c:	b09c      	sub	sp, #112	; 0x70
 800893e:	ab1d      	add	r3, sp, #116	; 0x74
 8008940:	9002      	str	r0, [sp, #8]
 8008942:	9006      	str	r0, [sp, #24]
 8008944:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008948:	4809      	ldr	r0, [pc, #36]	; (8008970 <siprintf+0x38>)
 800894a:	9107      	str	r1, [sp, #28]
 800894c:	9104      	str	r1, [sp, #16]
 800894e:	4909      	ldr	r1, [pc, #36]	; (8008974 <siprintf+0x3c>)
 8008950:	f853 2b04 	ldr.w	r2, [r3], #4
 8008954:	9105      	str	r1, [sp, #20]
 8008956:	6800      	ldr	r0, [r0, #0]
 8008958:	9301      	str	r3, [sp, #4]
 800895a:	a902      	add	r1, sp, #8
 800895c:	f000 f868 	bl	8008a30 <_svfiprintf_r>
 8008960:	9b02      	ldr	r3, [sp, #8]
 8008962:	2200      	movs	r2, #0
 8008964:	701a      	strb	r2, [r3, #0]
 8008966:	b01c      	add	sp, #112	; 0x70
 8008968:	f85d eb04 	ldr.w	lr, [sp], #4
 800896c:	b003      	add	sp, #12
 800896e:	4770      	bx	lr
 8008970:	24000010 	.word	0x24000010
 8008974:	ffff0208 	.word	0xffff0208

08008978 <__ssputs_r>:
 8008978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800897c:	688e      	ldr	r6, [r1, #8]
 800897e:	429e      	cmp	r6, r3
 8008980:	4682      	mov	sl, r0
 8008982:	460c      	mov	r4, r1
 8008984:	4690      	mov	r8, r2
 8008986:	461f      	mov	r7, r3
 8008988:	d838      	bhi.n	80089fc <__ssputs_r+0x84>
 800898a:	898a      	ldrh	r2, [r1, #12]
 800898c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008990:	d032      	beq.n	80089f8 <__ssputs_r+0x80>
 8008992:	6825      	ldr	r5, [r4, #0]
 8008994:	6909      	ldr	r1, [r1, #16]
 8008996:	eba5 0901 	sub.w	r9, r5, r1
 800899a:	6965      	ldr	r5, [r4, #20]
 800899c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089a4:	3301      	adds	r3, #1
 80089a6:	444b      	add	r3, r9
 80089a8:	106d      	asrs	r5, r5, #1
 80089aa:	429d      	cmp	r5, r3
 80089ac:	bf38      	it	cc
 80089ae:	461d      	movcc	r5, r3
 80089b0:	0553      	lsls	r3, r2, #21
 80089b2:	d531      	bpl.n	8008a18 <__ssputs_r+0xa0>
 80089b4:	4629      	mov	r1, r5
 80089b6:	f000 fb1f 	bl	8008ff8 <_malloc_r>
 80089ba:	4606      	mov	r6, r0
 80089bc:	b950      	cbnz	r0, 80089d4 <__ssputs_r+0x5c>
 80089be:	230c      	movs	r3, #12
 80089c0:	f8ca 3000 	str.w	r3, [sl]
 80089c4:	89a3      	ldrh	r3, [r4, #12]
 80089c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089ca:	81a3      	strh	r3, [r4, #12]
 80089cc:	f04f 30ff 	mov.w	r0, #4294967295
 80089d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089d4:	6921      	ldr	r1, [r4, #16]
 80089d6:	464a      	mov	r2, r9
 80089d8:	f7ff ff7e 	bl	80088d8 <memcpy>
 80089dc:	89a3      	ldrh	r3, [r4, #12]
 80089de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80089e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089e6:	81a3      	strh	r3, [r4, #12]
 80089e8:	6126      	str	r6, [r4, #16]
 80089ea:	6165      	str	r5, [r4, #20]
 80089ec:	444e      	add	r6, r9
 80089ee:	eba5 0509 	sub.w	r5, r5, r9
 80089f2:	6026      	str	r6, [r4, #0]
 80089f4:	60a5      	str	r5, [r4, #8]
 80089f6:	463e      	mov	r6, r7
 80089f8:	42be      	cmp	r6, r7
 80089fa:	d900      	bls.n	80089fe <__ssputs_r+0x86>
 80089fc:	463e      	mov	r6, r7
 80089fe:	4632      	mov	r2, r6
 8008a00:	6820      	ldr	r0, [r4, #0]
 8008a02:	4641      	mov	r1, r8
 8008a04:	f7ff ff76 	bl	80088f4 <memmove>
 8008a08:	68a3      	ldr	r3, [r4, #8]
 8008a0a:	6822      	ldr	r2, [r4, #0]
 8008a0c:	1b9b      	subs	r3, r3, r6
 8008a0e:	4432      	add	r2, r6
 8008a10:	60a3      	str	r3, [r4, #8]
 8008a12:	6022      	str	r2, [r4, #0]
 8008a14:	2000      	movs	r0, #0
 8008a16:	e7db      	b.n	80089d0 <__ssputs_r+0x58>
 8008a18:	462a      	mov	r2, r5
 8008a1a:	f000 fb47 	bl	80090ac <_realloc_r>
 8008a1e:	4606      	mov	r6, r0
 8008a20:	2800      	cmp	r0, #0
 8008a22:	d1e1      	bne.n	80089e8 <__ssputs_r+0x70>
 8008a24:	6921      	ldr	r1, [r4, #16]
 8008a26:	4650      	mov	r0, sl
 8008a28:	f000 fa96 	bl	8008f58 <_free_r>
 8008a2c:	e7c7      	b.n	80089be <__ssputs_r+0x46>
	...

08008a30 <_svfiprintf_r>:
 8008a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a34:	4698      	mov	r8, r3
 8008a36:	898b      	ldrh	r3, [r1, #12]
 8008a38:	061b      	lsls	r3, r3, #24
 8008a3a:	b09d      	sub	sp, #116	; 0x74
 8008a3c:	4607      	mov	r7, r0
 8008a3e:	460d      	mov	r5, r1
 8008a40:	4614      	mov	r4, r2
 8008a42:	d50e      	bpl.n	8008a62 <_svfiprintf_r+0x32>
 8008a44:	690b      	ldr	r3, [r1, #16]
 8008a46:	b963      	cbnz	r3, 8008a62 <_svfiprintf_r+0x32>
 8008a48:	2140      	movs	r1, #64	; 0x40
 8008a4a:	f000 fad5 	bl	8008ff8 <_malloc_r>
 8008a4e:	6028      	str	r0, [r5, #0]
 8008a50:	6128      	str	r0, [r5, #16]
 8008a52:	b920      	cbnz	r0, 8008a5e <_svfiprintf_r+0x2e>
 8008a54:	230c      	movs	r3, #12
 8008a56:	603b      	str	r3, [r7, #0]
 8008a58:	f04f 30ff 	mov.w	r0, #4294967295
 8008a5c:	e0d1      	b.n	8008c02 <_svfiprintf_r+0x1d2>
 8008a5e:	2340      	movs	r3, #64	; 0x40
 8008a60:	616b      	str	r3, [r5, #20]
 8008a62:	2300      	movs	r3, #0
 8008a64:	9309      	str	r3, [sp, #36]	; 0x24
 8008a66:	2320      	movs	r3, #32
 8008a68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a70:	2330      	movs	r3, #48	; 0x30
 8008a72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008c1c <_svfiprintf_r+0x1ec>
 8008a76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a7a:	f04f 0901 	mov.w	r9, #1
 8008a7e:	4623      	mov	r3, r4
 8008a80:	469a      	mov	sl, r3
 8008a82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a86:	b10a      	cbz	r2, 8008a8c <_svfiprintf_r+0x5c>
 8008a88:	2a25      	cmp	r2, #37	; 0x25
 8008a8a:	d1f9      	bne.n	8008a80 <_svfiprintf_r+0x50>
 8008a8c:	ebba 0b04 	subs.w	fp, sl, r4
 8008a90:	d00b      	beq.n	8008aaa <_svfiprintf_r+0x7a>
 8008a92:	465b      	mov	r3, fp
 8008a94:	4622      	mov	r2, r4
 8008a96:	4629      	mov	r1, r5
 8008a98:	4638      	mov	r0, r7
 8008a9a:	f7ff ff6d 	bl	8008978 <__ssputs_r>
 8008a9e:	3001      	adds	r0, #1
 8008aa0:	f000 80aa 	beq.w	8008bf8 <_svfiprintf_r+0x1c8>
 8008aa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008aa6:	445a      	add	r2, fp
 8008aa8:	9209      	str	r2, [sp, #36]	; 0x24
 8008aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f000 80a2 	beq.w	8008bf8 <_svfiprintf_r+0x1c8>
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8008aba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008abe:	f10a 0a01 	add.w	sl, sl, #1
 8008ac2:	9304      	str	r3, [sp, #16]
 8008ac4:	9307      	str	r3, [sp, #28]
 8008ac6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008aca:	931a      	str	r3, [sp, #104]	; 0x68
 8008acc:	4654      	mov	r4, sl
 8008ace:	2205      	movs	r2, #5
 8008ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ad4:	4851      	ldr	r0, [pc, #324]	; (8008c1c <_svfiprintf_r+0x1ec>)
 8008ad6:	f7f7 fc0b 	bl	80002f0 <memchr>
 8008ada:	9a04      	ldr	r2, [sp, #16]
 8008adc:	b9d8      	cbnz	r0, 8008b16 <_svfiprintf_r+0xe6>
 8008ade:	06d0      	lsls	r0, r2, #27
 8008ae0:	bf44      	itt	mi
 8008ae2:	2320      	movmi	r3, #32
 8008ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ae8:	0711      	lsls	r1, r2, #28
 8008aea:	bf44      	itt	mi
 8008aec:	232b      	movmi	r3, #43	; 0x2b
 8008aee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008af2:	f89a 3000 	ldrb.w	r3, [sl]
 8008af6:	2b2a      	cmp	r3, #42	; 0x2a
 8008af8:	d015      	beq.n	8008b26 <_svfiprintf_r+0xf6>
 8008afa:	9a07      	ldr	r2, [sp, #28]
 8008afc:	4654      	mov	r4, sl
 8008afe:	2000      	movs	r0, #0
 8008b00:	f04f 0c0a 	mov.w	ip, #10
 8008b04:	4621      	mov	r1, r4
 8008b06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b0a:	3b30      	subs	r3, #48	; 0x30
 8008b0c:	2b09      	cmp	r3, #9
 8008b0e:	d94e      	bls.n	8008bae <_svfiprintf_r+0x17e>
 8008b10:	b1b0      	cbz	r0, 8008b40 <_svfiprintf_r+0x110>
 8008b12:	9207      	str	r2, [sp, #28]
 8008b14:	e014      	b.n	8008b40 <_svfiprintf_r+0x110>
 8008b16:	eba0 0308 	sub.w	r3, r0, r8
 8008b1a:	fa09 f303 	lsl.w	r3, r9, r3
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	9304      	str	r3, [sp, #16]
 8008b22:	46a2      	mov	sl, r4
 8008b24:	e7d2      	b.n	8008acc <_svfiprintf_r+0x9c>
 8008b26:	9b03      	ldr	r3, [sp, #12]
 8008b28:	1d19      	adds	r1, r3, #4
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	9103      	str	r1, [sp, #12]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	bfbb      	ittet	lt
 8008b32:	425b      	neglt	r3, r3
 8008b34:	f042 0202 	orrlt.w	r2, r2, #2
 8008b38:	9307      	strge	r3, [sp, #28]
 8008b3a:	9307      	strlt	r3, [sp, #28]
 8008b3c:	bfb8      	it	lt
 8008b3e:	9204      	strlt	r2, [sp, #16]
 8008b40:	7823      	ldrb	r3, [r4, #0]
 8008b42:	2b2e      	cmp	r3, #46	; 0x2e
 8008b44:	d10c      	bne.n	8008b60 <_svfiprintf_r+0x130>
 8008b46:	7863      	ldrb	r3, [r4, #1]
 8008b48:	2b2a      	cmp	r3, #42	; 0x2a
 8008b4a:	d135      	bne.n	8008bb8 <_svfiprintf_r+0x188>
 8008b4c:	9b03      	ldr	r3, [sp, #12]
 8008b4e:	1d1a      	adds	r2, r3, #4
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	9203      	str	r2, [sp, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	bfb8      	it	lt
 8008b58:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b5c:	3402      	adds	r4, #2
 8008b5e:	9305      	str	r3, [sp, #20]
 8008b60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c2c <_svfiprintf_r+0x1fc>
 8008b64:	7821      	ldrb	r1, [r4, #0]
 8008b66:	2203      	movs	r2, #3
 8008b68:	4650      	mov	r0, sl
 8008b6a:	f7f7 fbc1 	bl	80002f0 <memchr>
 8008b6e:	b140      	cbz	r0, 8008b82 <_svfiprintf_r+0x152>
 8008b70:	2340      	movs	r3, #64	; 0x40
 8008b72:	eba0 000a 	sub.w	r0, r0, sl
 8008b76:	fa03 f000 	lsl.w	r0, r3, r0
 8008b7a:	9b04      	ldr	r3, [sp, #16]
 8008b7c:	4303      	orrs	r3, r0
 8008b7e:	3401      	adds	r4, #1
 8008b80:	9304      	str	r3, [sp, #16]
 8008b82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b86:	4826      	ldr	r0, [pc, #152]	; (8008c20 <_svfiprintf_r+0x1f0>)
 8008b88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b8c:	2206      	movs	r2, #6
 8008b8e:	f7f7 fbaf 	bl	80002f0 <memchr>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d038      	beq.n	8008c08 <_svfiprintf_r+0x1d8>
 8008b96:	4b23      	ldr	r3, [pc, #140]	; (8008c24 <_svfiprintf_r+0x1f4>)
 8008b98:	bb1b      	cbnz	r3, 8008be2 <_svfiprintf_r+0x1b2>
 8008b9a:	9b03      	ldr	r3, [sp, #12]
 8008b9c:	3307      	adds	r3, #7
 8008b9e:	f023 0307 	bic.w	r3, r3, #7
 8008ba2:	3308      	adds	r3, #8
 8008ba4:	9303      	str	r3, [sp, #12]
 8008ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ba8:	4433      	add	r3, r6
 8008baa:	9309      	str	r3, [sp, #36]	; 0x24
 8008bac:	e767      	b.n	8008a7e <_svfiprintf_r+0x4e>
 8008bae:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bb2:	460c      	mov	r4, r1
 8008bb4:	2001      	movs	r0, #1
 8008bb6:	e7a5      	b.n	8008b04 <_svfiprintf_r+0xd4>
 8008bb8:	2300      	movs	r3, #0
 8008bba:	3401      	adds	r4, #1
 8008bbc:	9305      	str	r3, [sp, #20]
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	f04f 0c0a 	mov.w	ip, #10
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bca:	3a30      	subs	r2, #48	; 0x30
 8008bcc:	2a09      	cmp	r2, #9
 8008bce:	d903      	bls.n	8008bd8 <_svfiprintf_r+0x1a8>
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d0c5      	beq.n	8008b60 <_svfiprintf_r+0x130>
 8008bd4:	9105      	str	r1, [sp, #20]
 8008bd6:	e7c3      	b.n	8008b60 <_svfiprintf_r+0x130>
 8008bd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bdc:	4604      	mov	r4, r0
 8008bde:	2301      	movs	r3, #1
 8008be0:	e7f0      	b.n	8008bc4 <_svfiprintf_r+0x194>
 8008be2:	ab03      	add	r3, sp, #12
 8008be4:	9300      	str	r3, [sp, #0]
 8008be6:	462a      	mov	r2, r5
 8008be8:	4b0f      	ldr	r3, [pc, #60]	; (8008c28 <_svfiprintf_r+0x1f8>)
 8008bea:	a904      	add	r1, sp, #16
 8008bec:	4638      	mov	r0, r7
 8008bee:	f3af 8000 	nop.w
 8008bf2:	1c42      	adds	r2, r0, #1
 8008bf4:	4606      	mov	r6, r0
 8008bf6:	d1d6      	bne.n	8008ba6 <_svfiprintf_r+0x176>
 8008bf8:	89ab      	ldrh	r3, [r5, #12]
 8008bfa:	065b      	lsls	r3, r3, #25
 8008bfc:	f53f af2c 	bmi.w	8008a58 <_svfiprintf_r+0x28>
 8008c00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c02:	b01d      	add	sp, #116	; 0x74
 8008c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c08:	ab03      	add	r3, sp, #12
 8008c0a:	9300      	str	r3, [sp, #0]
 8008c0c:	462a      	mov	r2, r5
 8008c0e:	4b06      	ldr	r3, [pc, #24]	; (8008c28 <_svfiprintf_r+0x1f8>)
 8008c10:	a904      	add	r1, sp, #16
 8008c12:	4638      	mov	r0, r7
 8008c14:	f000 f87a 	bl	8008d0c <_printf_i>
 8008c18:	e7eb      	b.n	8008bf2 <_svfiprintf_r+0x1c2>
 8008c1a:	bf00      	nop
 8008c1c:	080091bc 	.word	0x080091bc
 8008c20:	080091c6 	.word	0x080091c6
 8008c24:	00000000 	.word	0x00000000
 8008c28:	08008979 	.word	0x08008979
 8008c2c:	080091c2 	.word	0x080091c2

08008c30 <_printf_common>:
 8008c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c34:	4616      	mov	r6, r2
 8008c36:	4699      	mov	r9, r3
 8008c38:	688a      	ldr	r2, [r1, #8]
 8008c3a:	690b      	ldr	r3, [r1, #16]
 8008c3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c40:	4293      	cmp	r3, r2
 8008c42:	bfb8      	it	lt
 8008c44:	4613      	movlt	r3, r2
 8008c46:	6033      	str	r3, [r6, #0]
 8008c48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c4c:	4607      	mov	r7, r0
 8008c4e:	460c      	mov	r4, r1
 8008c50:	b10a      	cbz	r2, 8008c56 <_printf_common+0x26>
 8008c52:	3301      	adds	r3, #1
 8008c54:	6033      	str	r3, [r6, #0]
 8008c56:	6823      	ldr	r3, [r4, #0]
 8008c58:	0699      	lsls	r1, r3, #26
 8008c5a:	bf42      	ittt	mi
 8008c5c:	6833      	ldrmi	r3, [r6, #0]
 8008c5e:	3302      	addmi	r3, #2
 8008c60:	6033      	strmi	r3, [r6, #0]
 8008c62:	6825      	ldr	r5, [r4, #0]
 8008c64:	f015 0506 	ands.w	r5, r5, #6
 8008c68:	d106      	bne.n	8008c78 <_printf_common+0x48>
 8008c6a:	f104 0a19 	add.w	sl, r4, #25
 8008c6e:	68e3      	ldr	r3, [r4, #12]
 8008c70:	6832      	ldr	r2, [r6, #0]
 8008c72:	1a9b      	subs	r3, r3, r2
 8008c74:	42ab      	cmp	r3, r5
 8008c76:	dc26      	bgt.n	8008cc6 <_printf_common+0x96>
 8008c78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c7c:	1e13      	subs	r3, r2, #0
 8008c7e:	6822      	ldr	r2, [r4, #0]
 8008c80:	bf18      	it	ne
 8008c82:	2301      	movne	r3, #1
 8008c84:	0692      	lsls	r2, r2, #26
 8008c86:	d42b      	bmi.n	8008ce0 <_printf_common+0xb0>
 8008c88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c8c:	4649      	mov	r1, r9
 8008c8e:	4638      	mov	r0, r7
 8008c90:	47c0      	blx	r8
 8008c92:	3001      	adds	r0, #1
 8008c94:	d01e      	beq.n	8008cd4 <_printf_common+0xa4>
 8008c96:	6823      	ldr	r3, [r4, #0]
 8008c98:	68e5      	ldr	r5, [r4, #12]
 8008c9a:	6832      	ldr	r2, [r6, #0]
 8008c9c:	f003 0306 	and.w	r3, r3, #6
 8008ca0:	2b04      	cmp	r3, #4
 8008ca2:	bf08      	it	eq
 8008ca4:	1aad      	subeq	r5, r5, r2
 8008ca6:	68a3      	ldr	r3, [r4, #8]
 8008ca8:	6922      	ldr	r2, [r4, #16]
 8008caa:	bf0c      	ite	eq
 8008cac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cb0:	2500      	movne	r5, #0
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	bfc4      	itt	gt
 8008cb6:	1a9b      	subgt	r3, r3, r2
 8008cb8:	18ed      	addgt	r5, r5, r3
 8008cba:	2600      	movs	r6, #0
 8008cbc:	341a      	adds	r4, #26
 8008cbe:	42b5      	cmp	r5, r6
 8008cc0:	d11a      	bne.n	8008cf8 <_printf_common+0xc8>
 8008cc2:	2000      	movs	r0, #0
 8008cc4:	e008      	b.n	8008cd8 <_printf_common+0xa8>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	4652      	mov	r2, sl
 8008cca:	4649      	mov	r1, r9
 8008ccc:	4638      	mov	r0, r7
 8008cce:	47c0      	blx	r8
 8008cd0:	3001      	adds	r0, #1
 8008cd2:	d103      	bne.n	8008cdc <_printf_common+0xac>
 8008cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cdc:	3501      	adds	r5, #1
 8008cde:	e7c6      	b.n	8008c6e <_printf_common+0x3e>
 8008ce0:	18e1      	adds	r1, r4, r3
 8008ce2:	1c5a      	adds	r2, r3, #1
 8008ce4:	2030      	movs	r0, #48	; 0x30
 8008ce6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008cea:	4422      	add	r2, r4
 8008cec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008cf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cf4:	3302      	adds	r3, #2
 8008cf6:	e7c7      	b.n	8008c88 <_printf_common+0x58>
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	4622      	mov	r2, r4
 8008cfc:	4649      	mov	r1, r9
 8008cfe:	4638      	mov	r0, r7
 8008d00:	47c0      	blx	r8
 8008d02:	3001      	adds	r0, #1
 8008d04:	d0e6      	beq.n	8008cd4 <_printf_common+0xa4>
 8008d06:	3601      	adds	r6, #1
 8008d08:	e7d9      	b.n	8008cbe <_printf_common+0x8e>
	...

08008d0c <_printf_i>:
 8008d0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d10:	460c      	mov	r4, r1
 8008d12:	4691      	mov	r9, r2
 8008d14:	7e27      	ldrb	r7, [r4, #24]
 8008d16:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008d18:	2f78      	cmp	r7, #120	; 0x78
 8008d1a:	4680      	mov	r8, r0
 8008d1c:	469a      	mov	sl, r3
 8008d1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d22:	d807      	bhi.n	8008d34 <_printf_i+0x28>
 8008d24:	2f62      	cmp	r7, #98	; 0x62
 8008d26:	d80a      	bhi.n	8008d3e <_printf_i+0x32>
 8008d28:	2f00      	cmp	r7, #0
 8008d2a:	f000 80d8 	beq.w	8008ede <_printf_i+0x1d2>
 8008d2e:	2f58      	cmp	r7, #88	; 0x58
 8008d30:	f000 80a3 	beq.w	8008e7a <_printf_i+0x16e>
 8008d34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d3c:	e03a      	b.n	8008db4 <_printf_i+0xa8>
 8008d3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d42:	2b15      	cmp	r3, #21
 8008d44:	d8f6      	bhi.n	8008d34 <_printf_i+0x28>
 8008d46:	a001      	add	r0, pc, #4	; (adr r0, 8008d4c <_printf_i+0x40>)
 8008d48:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008d4c:	08008da5 	.word	0x08008da5
 8008d50:	08008db9 	.word	0x08008db9
 8008d54:	08008d35 	.word	0x08008d35
 8008d58:	08008d35 	.word	0x08008d35
 8008d5c:	08008d35 	.word	0x08008d35
 8008d60:	08008d35 	.word	0x08008d35
 8008d64:	08008db9 	.word	0x08008db9
 8008d68:	08008d35 	.word	0x08008d35
 8008d6c:	08008d35 	.word	0x08008d35
 8008d70:	08008d35 	.word	0x08008d35
 8008d74:	08008d35 	.word	0x08008d35
 8008d78:	08008ec5 	.word	0x08008ec5
 8008d7c:	08008de9 	.word	0x08008de9
 8008d80:	08008ea7 	.word	0x08008ea7
 8008d84:	08008d35 	.word	0x08008d35
 8008d88:	08008d35 	.word	0x08008d35
 8008d8c:	08008ee7 	.word	0x08008ee7
 8008d90:	08008d35 	.word	0x08008d35
 8008d94:	08008de9 	.word	0x08008de9
 8008d98:	08008d35 	.word	0x08008d35
 8008d9c:	08008d35 	.word	0x08008d35
 8008da0:	08008eaf 	.word	0x08008eaf
 8008da4:	680b      	ldr	r3, [r1, #0]
 8008da6:	1d1a      	adds	r2, r3, #4
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	600a      	str	r2, [r1, #0]
 8008dac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008db0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008db4:	2301      	movs	r3, #1
 8008db6:	e0a3      	b.n	8008f00 <_printf_i+0x1f4>
 8008db8:	6825      	ldr	r5, [r4, #0]
 8008dba:	6808      	ldr	r0, [r1, #0]
 8008dbc:	062e      	lsls	r6, r5, #24
 8008dbe:	f100 0304 	add.w	r3, r0, #4
 8008dc2:	d50a      	bpl.n	8008dda <_printf_i+0xce>
 8008dc4:	6805      	ldr	r5, [r0, #0]
 8008dc6:	600b      	str	r3, [r1, #0]
 8008dc8:	2d00      	cmp	r5, #0
 8008dca:	da03      	bge.n	8008dd4 <_printf_i+0xc8>
 8008dcc:	232d      	movs	r3, #45	; 0x2d
 8008dce:	426d      	negs	r5, r5
 8008dd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dd4:	485e      	ldr	r0, [pc, #376]	; (8008f50 <_printf_i+0x244>)
 8008dd6:	230a      	movs	r3, #10
 8008dd8:	e019      	b.n	8008e0e <_printf_i+0x102>
 8008dda:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008dde:	6805      	ldr	r5, [r0, #0]
 8008de0:	600b      	str	r3, [r1, #0]
 8008de2:	bf18      	it	ne
 8008de4:	b22d      	sxthne	r5, r5
 8008de6:	e7ef      	b.n	8008dc8 <_printf_i+0xbc>
 8008de8:	680b      	ldr	r3, [r1, #0]
 8008dea:	6825      	ldr	r5, [r4, #0]
 8008dec:	1d18      	adds	r0, r3, #4
 8008dee:	6008      	str	r0, [r1, #0]
 8008df0:	0628      	lsls	r0, r5, #24
 8008df2:	d501      	bpl.n	8008df8 <_printf_i+0xec>
 8008df4:	681d      	ldr	r5, [r3, #0]
 8008df6:	e002      	b.n	8008dfe <_printf_i+0xf2>
 8008df8:	0669      	lsls	r1, r5, #25
 8008dfa:	d5fb      	bpl.n	8008df4 <_printf_i+0xe8>
 8008dfc:	881d      	ldrh	r5, [r3, #0]
 8008dfe:	4854      	ldr	r0, [pc, #336]	; (8008f50 <_printf_i+0x244>)
 8008e00:	2f6f      	cmp	r7, #111	; 0x6f
 8008e02:	bf0c      	ite	eq
 8008e04:	2308      	moveq	r3, #8
 8008e06:	230a      	movne	r3, #10
 8008e08:	2100      	movs	r1, #0
 8008e0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e0e:	6866      	ldr	r6, [r4, #4]
 8008e10:	60a6      	str	r6, [r4, #8]
 8008e12:	2e00      	cmp	r6, #0
 8008e14:	bfa2      	ittt	ge
 8008e16:	6821      	ldrge	r1, [r4, #0]
 8008e18:	f021 0104 	bicge.w	r1, r1, #4
 8008e1c:	6021      	strge	r1, [r4, #0]
 8008e1e:	b90d      	cbnz	r5, 8008e24 <_printf_i+0x118>
 8008e20:	2e00      	cmp	r6, #0
 8008e22:	d04d      	beq.n	8008ec0 <_printf_i+0x1b4>
 8008e24:	4616      	mov	r6, r2
 8008e26:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e2a:	fb03 5711 	mls	r7, r3, r1, r5
 8008e2e:	5dc7      	ldrb	r7, [r0, r7]
 8008e30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e34:	462f      	mov	r7, r5
 8008e36:	42bb      	cmp	r3, r7
 8008e38:	460d      	mov	r5, r1
 8008e3a:	d9f4      	bls.n	8008e26 <_printf_i+0x11a>
 8008e3c:	2b08      	cmp	r3, #8
 8008e3e:	d10b      	bne.n	8008e58 <_printf_i+0x14c>
 8008e40:	6823      	ldr	r3, [r4, #0]
 8008e42:	07df      	lsls	r7, r3, #31
 8008e44:	d508      	bpl.n	8008e58 <_printf_i+0x14c>
 8008e46:	6923      	ldr	r3, [r4, #16]
 8008e48:	6861      	ldr	r1, [r4, #4]
 8008e4a:	4299      	cmp	r1, r3
 8008e4c:	bfde      	ittt	le
 8008e4e:	2330      	movle	r3, #48	; 0x30
 8008e50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e58:	1b92      	subs	r2, r2, r6
 8008e5a:	6122      	str	r2, [r4, #16]
 8008e5c:	f8cd a000 	str.w	sl, [sp]
 8008e60:	464b      	mov	r3, r9
 8008e62:	aa03      	add	r2, sp, #12
 8008e64:	4621      	mov	r1, r4
 8008e66:	4640      	mov	r0, r8
 8008e68:	f7ff fee2 	bl	8008c30 <_printf_common>
 8008e6c:	3001      	adds	r0, #1
 8008e6e:	d14c      	bne.n	8008f0a <_printf_i+0x1fe>
 8008e70:	f04f 30ff 	mov.w	r0, #4294967295
 8008e74:	b004      	add	sp, #16
 8008e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e7a:	4835      	ldr	r0, [pc, #212]	; (8008f50 <_printf_i+0x244>)
 8008e7c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e80:	6823      	ldr	r3, [r4, #0]
 8008e82:	680e      	ldr	r6, [r1, #0]
 8008e84:	061f      	lsls	r7, r3, #24
 8008e86:	f856 5b04 	ldr.w	r5, [r6], #4
 8008e8a:	600e      	str	r6, [r1, #0]
 8008e8c:	d514      	bpl.n	8008eb8 <_printf_i+0x1ac>
 8008e8e:	07d9      	lsls	r1, r3, #31
 8008e90:	bf44      	itt	mi
 8008e92:	f043 0320 	orrmi.w	r3, r3, #32
 8008e96:	6023      	strmi	r3, [r4, #0]
 8008e98:	b91d      	cbnz	r5, 8008ea2 <_printf_i+0x196>
 8008e9a:	6823      	ldr	r3, [r4, #0]
 8008e9c:	f023 0320 	bic.w	r3, r3, #32
 8008ea0:	6023      	str	r3, [r4, #0]
 8008ea2:	2310      	movs	r3, #16
 8008ea4:	e7b0      	b.n	8008e08 <_printf_i+0xfc>
 8008ea6:	6823      	ldr	r3, [r4, #0]
 8008ea8:	f043 0320 	orr.w	r3, r3, #32
 8008eac:	6023      	str	r3, [r4, #0]
 8008eae:	2378      	movs	r3, #120	; 0x78
 8008eb0:	4828      	ldr	r0, [pc, #160]	; (8008f54 <_printf_i+0x248>)
 8008eb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008eb6:	e7e3      	b.n	8008e80 <_printf_i+0x174>
 8008eb8:	065e      	lsls	r6, r3, #25
 8008eba:	bf48      	it	mi
 8008ebc:	b2ad      	uxthmi	r5, r5
 8008ebe:	e7e6      	b.n	8008e8e <_printf_i+0x182>
 8008ec0:	4616      	mov	r6, r2
 8008ec2:	e7bb      	b.n	8008e3c <_printf_i+0x130>
 8008ec4:	680b      	ldr	r3, [r1, #0]
 8008ec6:	6826      	ldr	r6, [r4, #0]
 8008ec8:	6960      	ldr	r0, [r4, #20]
 8008eca:	1d1d      	adds	r5, r3, #4
 8008ecc:	600d      	str	r5, [r1, #0]
 8008ece:	0635      	lsls	r5, r6, #24
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	d501      	bpl.n	8008ed8 <_printf_i+0x1cc>
 8008ed4:	6018      	str	r0, [r3, #0]
 8008ed6:	e002      	b.n	8008ede <_printf_i+0x1d2>
 8008ed8:	0671      	lsls	r1, r6, #25
 8008eda:	d5fb      	bpl.n	8008ed4 <_printf_i+0x1c8>
 8008edc:	8018      	strh	r0, [r3, #0]
 8008ede:	2300      	movs	r3, #0
 8008ee0:	6123      	str	r3, [r4, #16]
 8008ee2:	4616      	mov	r6, r2
 8008ee4:	e7ba      	b.n	8008e5c <_printf_i+0x150>
 8008ee6:	680b      	ldr	r3, [r1, #0]
 8008ee8:	1d1a      	adds	r2, r3, #4
 8008eea:	600a      	str	r2, [r1, #0]
 8008eec:	681e      	ldr	r6, [r3, #0]
 8008eee:	6862      	ldr	r2, [r4, #4]
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	f7f7 f9fc 	bl	80002f0 <memchr>
 8008ef8:	b108      	cbz	r0, 8008efe <_printf_i+0x1f2>
 8008efa:	1b80      	subs	r0, r0, r6
 8008efc:	6060      	str	r0, [r4, #4]
 8008efe:	6863      	ldr	r3, [r4, #4]
 8008f00:	6123      	str	r3, [r4, #16]
 8008f02:	2300      	movs	r3, #0
 8008f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f08:	e7a8      	b.n	8008e5c <_printf_i+0x150>
 8008f0a:	6923      	ldr	r3, [r4, #16]
 8008f0c:	4632      	mov	r2, r6
 8008f0e:	4649      	mov	r1, r9
 8008f10:	4640      	mov	r0, r8
 8008f12:	47d0      	blx	sl
 8008f14:	3001      	adds	r0, #1
 8008f16:	d0ab      	beq.n	8008e70 <_printf_i+0x164>
 8008f18:	6823      	ldr	r3, [r4, #0]
 8008f1a:	079b      	lsls	r3, r3, #30
 8008f1c:	d413      	bmi.n	8008f46 <_printf_i+0x23a>
 8008f1e:	68e0      	ldr	r0, [r4, #12]
 8008f20:	9b03      	ldr	r3, [sp, #12]
 8008f22:	4298      	cmp	r0, r3
 8008f24:	bfb8      	it	lt
 8008f26:	4618      	movlt	r0, r3
 8008f28:	e7a4      	b.n	8008e74 <_printf_i+0x168>
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	4632      	mov	r2, r6
 8008f2e:	4649      	mov	r1, r9
 8008f30:	4640      	mov	r0, r8
 8008f32:	47d0      	blx	sl
 8008f34:	3001      	adds	r0, #1
 8008f36:	d09b      	beq.n	8008e70 <_printf_i+0x164>
 8008f38:	3501      	adds	r5, #1
 8008f3a:	68e3      	ldr	r3, [r4, #12]
 8008f3c:	9903      	ldr	r1, [sp, #12]
 8008f3e:	1a5b      	subs	r3, r3, r1
 8008f40:	42ab      	cmp	r3, r5
 8008f42:	dcf2      	bgt.n	8008f2a <_printf_i+0x21e>
 8008f44:	e7eb      	b.n	8008f1e <_printf_i+0x212>
 8008f46:	2500      	movs	r5, #0
 8008f48:	f104 0619 	add.w	r6, r4, #25
 8008f4c:	e7f5      	b.n	8008f3a <_printf_i+0x22e>
 8008f4e:	bf00      	nop
 8008f50:	080091cd 	.word	0x080091cd
 8008f54:	080091de 	.word	0x080091de

08008f58 <_free_r>:
 8008f58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f5a:	2900      	cmp	r1, #0
 8008f5c:	d048      	beq.n	8008ff0 <_free_r+0x98>
 8008f5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f62:	9001      	str	r0, [sp, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f1a1 0404 	sub.w	r4, r1, #4
 8008f6a:	bfb8      	it	lt
 8008f6c:	18e4      	addlt	r4, r4, r3
 8008f6e:	f000 f8d3 	bl	8009118 <__malloc_lock>
 8008f72:	4a20      	ldr	r2, [pc, #128]	; (8008ff4 <_free_r+0x9c>)
 8008f74:	9801      	ldr	r0, [sp, #4]
 8008f76:	6813      	ldr	r3, [r2, #0]
 8008f78:	4615      	mov	r5, r2
 8008f7a:	b933      	cbnz	r3, 8008f8a <_free_r+0x32>
 8008f7c:	6063      	str	r3, [r4, #4]
 8008f7e:	6014      	str	r4, [r2, #0]
 8008f80:	b003      	add	sp, #12
 8008f82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f86:	f000 b8cd 	b.w	8009124 <__malloc_unlock>
 8008f8a:	42a3      	cmp	r3, r4
 8008f8c:	d90b      	bls.n	8008fa6 <_free_r+0x4e>
 8008f8e:	6821      	ldr	r1, [r4, #0]
 8008f90:	1862      	adds	r2, r4, r1
 8008f92:	4293      	cmp	r3, r2
 8008f94:	bf04      	itt	eq
 8008f96:	681a      	ldreq	r2, [r3, #0]
 8008f98:	685b      	ldreq	r3, [r3, #4]
 8008f9a:	6063      	str	r3, [r4, #4]
 8008f9c:	bf04      	itt	eq
 8008f9e:	1852      	addeq	r2, r2, r1
 8008fa0:	6022      	streq	r2, [r4, #0]
 8008fa2:	602c      	str	r4, [r5, #0]
 8008fa4:	e7ec      	b.n	8008f80 <_free_r+0x28>
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	b10b      	cbz	r3, 8008fb0 <_free_r+0x58>
 8008fac:	42a3      	cmp	r3, r4
 8008fae:	d9fa      	bls.n	8008fa6 <_free_r+0x4e>
 8008fb0:	6811      	ldr	r1, [r2, #0]
 8008fb2:	1855      	adds	r5, r2, r1
 8008fb4:	42a5      	cmp	r5, r4
 8008fb6:	d10b      	bne.n	8008fd0 <_free_r+0x78>
 8008fb8:	6824      	ldr	r4, [r4, #0]
 8008fba:	4421      	add	r1, r4
 8008fbc:	1854      	adds	r4, r2, r1
 8008fbe:	42a3      	cmp	r3, r4
 8008fc0:	6011      	str	r1, [r2, #0]
 8008fc2:	d1dd      	bne.n	8008f80 <_free_r+0x28>
 8008fc4:	681c      	ldr	r4, [r3, #0]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	6053      	str	r3, [r2, #4]
 8008fca:	4421      	add	r1, r4
 8008fcc:	6011      	str	r1, [r2, #0]
 8008fce:	e7d7      	b.n	8008f80 <_free_r+0x28>
 8008fd0:	d902      	bls.n	8008fd8 <_free_r+0x80>
 8008fd2:	230c      	movs	r3, #12
 8008fd4:	6003      	str	r3, [r0, #0]
 8008fd6:	e7d3      	b.n	8008f80 <_free_r+0x28>
 8008fd8:	6825      	ldr	r5, [r4, #0]
 8008fda:	1961      	adds	r1, r4, r5
 8008fdc:	428b      	cmp	r3, r1
 8008fde:	bf04      	itt	eq
 8008fe0:	6819      	ldreq	r1, [r3, #0]
 8008fe2:	685b      	ldreq	r3, [r3, #4]
 8008fe4:	6063      	str	r3, [r4, #4]
 8008fe6:	bf04      	itt	eq
 8008fe8:	1949      	addeq	r1, r1, r5
 8008fea:	6021      	streq	r1, [r4, #0]
 8008fec:	6054      	str	r4, [r2, #4]
 8008fee:	e7c7      	b.n	8008f80 <_free_r+0x28>
 8008ff0:	b003      	add	sp, #12
 8008ff2:	bd30      	pop	{r4, r5, pc}
 8008ff4:	24000094 	.word	0x24000094

08008ff8 <_malloc_r>:
 8008ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffa:	1ccd      	adds	r5, r1, #3
 8008ffc:	f025 0503 	bic.w	r5, r5, #3
 8009000:	3508      	adds	r5, #8
 8009002:	2d0c      	cmp	r5, #12
 8009004:	bf38      	it	cc
 8009006:	250c      	movcc	r5, #12
 8009008:	2d00      	cmp	r5, #0
 800900a:	4606      	mov	r6, r0
 800900c:	db01      	blt.n	8009012 <_malloc_r+0x1a>
 800900e:	42a9      	cmp	r1, r5
 8009010:	d903      	bls.n	800901a <_malloc_r+0x22>
 8009012:	230c      	movs	r3, #12
 8009014:	6033      	str	r3, [r6, #0]
 8009016:	2000      	movs	r0, #0
 8009018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800901a:	f000 f87d 	bl	8009118 <__malloc_lock>
 800901e:	4921      	ldr	r1, [pc, #132]	; (80090a4 <_malloc_r+0xac>)
 8009020:	680a      	ldr	r2, [r1, #0]
 8009022:	4614      	mov	r4, r2
 8009024:	b99c      	cbnz	r4, 800904e <_malloc_r+0x56>
 8009026:	4f20      	ldr	r7, [pc, #128]	; (80090a8 <_malloc_r+0xb0>)
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	b923      	cbnz	r3, 8009036 <_malloc_r+0x3e>
 800902c:	4621      	mov	r1, r4
 800902e:	4630      	mov	r0, r6
 8009030:	f000 f862 	bl	80090f8 <_sbrk_r>
 8009034:	6038      	str	r0, [r7, #0]
 8009036:	4629      	mov	r1, r5
 8009038:	4630      	mov	r0, r6
 800903a:	f000 f85d 	bl	80090f8 <_sbrk_r>
 800903e:	1c43      	adds	r3, r0, #1
 8009040:	d123      	bne.n	800908a <_malloc_r+0x92>
 8009042:	230c      	movs	r3, #12
 8009044:	6033      	str	r3, [r6, #0]
 8009046:	4630      	mov	r0, r6
 8009048:	f000 f86c 	bl	8009124 <__malloc_unlock>
 800904c:	e7e3      	b.n	8009016 <_malloc_r+0x1e>
 800904e:	6823      	ldr	r3, [r4, #0]
 8009050:	1b5b      	subs	r3, r3, r5
 8009052:	d417      	bmi.n	8009084 <_malloc_r+0x8c>
 8009054:	2b0b      	cmp	r3, #11
 8009056:	d903      	bls.n	8009060 <_malloc_r+0x68>
 8009058:	6023      	str	r3, [r4, #0]
 800905a:	441c      	add	r4, r3
 800905c:	6025      	str	r5, [r4, #0]
 800905e:	e004      	b.n	800906a <_malloc_r+0x72>
 8009060:	6863      	ldr	r3, [r4, #4]
 8009062:	42a2      	cmp	r2, r4
 8009064:	bf0c      	ite	eq
 8009066:	600b      	streq	r3, [r1, #0]
 8009068:	6053      	strne	r3, [r2, #4]
 800906a:	4630      	mov	r0, r6
 800906c:	f000 f85a 	bl	8009124 <__malloc_unlock>
 8009070:	f104 000b 	add.w	r0, r4, #11
 8009074:	1d23      	adds	r3, r4, #4
 8009076:	f020 0007 	bic.w	r0, r0, #7
 800907a:	1ac2      	subs	r2, r0, r3
 800907c:	d0cc      	beq.n	8009018 <_malloc_r+0x20>
 800907e:	1a1b      	subs	r3, r3, r0
 8009080:	50a3      	str	r3, [r4, r2]
 8009082:	e7c9      	b.n	8009018 <_malloc_r+0x20>
 8009084:	4622      	mov	r2, r4
 8009086:	6864      	ldr	r4, [r4, #4]
 8009088:	e7cc      	b.n	8009024 <_malloc_r+0x2c>
 800908a:	1cc4      	adds	r4, r0, #3
 800908c:	f024 0403 	bic.w	r4, r4, #3
 8009090:	42a0      	cmp	r0, r4
 8009092:	d0e3      	beq.n	800905c <_malloc_r+0x64>
 8009094:	1a21      	subs	r1, r4, r0
 8009096:	4630      	mov	r0, r6
 8009098:	f000 f82e 	bl	80090f8 <_sbrk_r>
 800909c:	3001      	adds	r0, #1
 800909e:	d1dd      	bne.n	800905c <_malloc_r+0x64>
 80090a0:	e7cf      	b.n	8009042 <_malloc_r+0x4a>
 80090a2:	bf00      	nop
 80090a4:	24000094 	.word	0x24000094
 80090a8:	24000098 	.word	0x24000098

080090ac <_realloc_r>:
 80090ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ae:	4607      	mov	r7, r0
 80090b0:	4614      	mov	r4, r2
 80090b2:	460e      	mov	r6, r1
 80090b4:	b921      	cbnz	r1, 80090c0 <_realloc_r+0x14>
 80090b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80090ba:	4611      	mov	r1, r2
 80090bc:	f7ff bf9c 	b.w	8008ff8 <_malloc_r>
 80090c0:	b922      	cbnz	r2, 80090cc <_realloc_r+0x20>
 80090c2:	f7ff ff49 	bl	8008f58 <_free_r>
 80090c6:	4625      	mov	r5, r4
 80090c8:	4628      	mov	r0, r5
 80090ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090cc:	f000 f830 	bl	8009130 <_malloc_usable_size_r>
 80090d0:	42a0      	cmp	r0, r4
 80090d2:	d20f      	bcs.n	80090f4 <_realloc_r+0x48>
 80090d4:	4621      	mov	r1, r4
 80090d6:	4638      	mov	r0, r7
 80090d8:	f7ff ff8e 	bl	8008ff8 <_malloc_r>
 80090dc:	4605      	mov	r5, r0
 80090de:	2800      	cmp	r0, #0
 80090e0:	d0f2      	beq.n	80090c8 <_realloc_r+0x1c>
 80090e2:	4631      	mov	r1, r6
 80090e4:	4622      	mov	r2, r4
 80090e6:	f7ff fbf7 	bl	80088d8 <memcpy>
 80090ea:	4631      	mov	r1, r6
 80090ec:	4638      	mov	r0, r7
 80090ee:	f7ff ff33 	bl	8008f58 <_free_r>
 80090f2:	e7e9      	b.n	80090c8 <_realloc_r+0x1c>
 80090f4:	4635      	mov	r5, r6
 80090f6:	e7e7      	b.n	80090c8 <_realloc_r+0x1c>

080090f8 <_sbrk_r>:
 80090f8:	b538      	push	{r3, r4, r5, lr}
 80090fa:	4d06      	ldr	r5, [pc, #24]	; (8009114 <_sbrk_r+0x1c>)
 80090fc:	2300      	movs	r3, #0
 80090fe:	4604      	mov	r4, r0
 8009100:	4608      	mov	r0, r1
 8009102:	602b      	str	r3, [r5, #0]
 8009104:	f7f8 fca2 	bl	8001a4c <_sbrk>
 8009108:	1c43      	adds	r3, r0, #1
 800910a:	d102      	bne.n	8009112 <_sbrk_r+0x1a>
 800910c:	682b      	ldr	r3, [r5, #0]
 800910e:	b103      	cbz	r3, 8009112 <_sbrk_r+0x1a>
 8009110:	6023      	str	r3, [r4, #0]
 8009112:	bd38      	pop	{r3, r4, r5, pc}
 8009114:	24000680 	.word	0x24000680

08009118 <__malloc_lock>:
 8009118:	4801      	ldr	r0, [pc, #4]	; (8009120 <__malloc_lock+0x8>)
 800911a:	f000 b811 	b.w	8009140 <__retarget_lock_acquire_recursive>
 800911e:	bf00      	nop
 8009120:	24000688 	.word	0x24000688

08009124 <__malloc_unlock>:
 8009124:	4801      	ldr	r0, [pc, #4]	; (800912c <__malloc_unlock+0x8>)
 8009126:	f000 b80c 	b.w	8009142 <__retarget_lock_release_recursive>
 800912a:	bf00      	nop
 800912c:	24000688 	.word	0x24000688

08009130 <_malloc_usable_size_r>:
 8009130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009134:	1f18      	subs	r0, r3, #4
 8009136:	2b00      	cmp	r3, #0
 8009138:	bfbc      	itt	lt
 800913a:	580b      	ldrlt	r3, [r1, r0]
 800913c:	18c0      	addlt	r0, r0, r3
 800913e:	4770      	bx	lr

08009140 <__retarget_lock_acquire_recursive>:
 8009140:	4770      	bx	lr

08009142 <__retarget_lock_release_recursive>:
 8009142:	4770      	bx	lr

08009144 <_init>:
 8009144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009146:	bf00      	nop
 8009148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800914a:	bc08      	pop	{r3}
 800914c:	469e      	mov	lr, r3
 800914e:	4770      	bx	lr

08009150 <_fini>:
 8009150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009152:	bf00      	nop
 8009154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009156:	bc08      	pop	{r3}
 8009158:	469e      	mov	lr, r3
 800915a:	4770      	bx	lr
